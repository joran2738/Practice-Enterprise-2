
PE2_V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800523c  0800523c  0001523c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800531c  0800531c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800531c  0800531c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800531c  0800531c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800531c  0800531c  0001531c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000070  08005394  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08005394  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dae  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000259c  00000000  00000000  00030e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000333f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00034138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f27  00000000  00000000  00034d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012128  00000000  00000000  0004bcaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842a6  00000000  00000000  0005ddd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e207d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e20  00000000  00000000  000e20d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005224 	.word	0x08005224

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005224 	.word	0x08005224

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_write>:
#include "debug.h"

// Declare external UART handle
extern UART_HandleTypeDef huart3;

int _write(int file, char *ptr, int len) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	3b01      	subs	r3, #1
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8000280:	2b01      	cmp	r3, #1
 8000282:	d814      	bhi.n	80002ae <_write+0x3e>
    case STDOUT_FILENO: /*stdout*/
    case STDERR_FILENO: /*stderr*/
        xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	b29a      	uxth	r2, r3
 8000288:	f04f 33ff 	mov.w	r3, #4294967295
 800028c:	68b9      	ldr	r1, [r7, #8]
 800028e:	480f      	ldr	r0, [pc, #60]	; (80002cc <_write+0x5c>)
 8000290:	f003 f8e1 	bl	8003456 <HAL_UART_Transmit>
 8000294:	4603      	mov	r3, r0
 8000296:	75fb      	strb	r3, [r7, #23]
        if (xStatus != HAL_OK) {
 8000298:	7dfb      	ldrb	r3, [r7, #23]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d00f      	beq.n	80002be <_write+0x4e>
            errno = EIO;
 800029e:	f004 f801 	bl	80042a4 <__errno>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2205      	movs	r2, #5
 80002a6:	601a      	str	r2, [r3, #0]
            return -1;
 80002a8:	f04f 33ff 	mov.w	r3, #4294967295
 80002ac:	e009      	b.n	80002c2 <_write+0x52>
        }
        break;
    default:
        errno = EBADF;
 80002ae:	f003 fff9 	bl	80042a4 <__errno>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2209      	movs	r2, #9
 80002b6:	601a      	str	r2, [r3, #0]
        return -1;
 80002b8:	f04f 33ff 	mov.w	r3, #4294967295
 80002bc:	e001      	b.n	80002c2 <_write+0x52>
        break;
 80002be:	bf00      	nop
    }
    return len;
 80002c0:	687b      	ldr	r3, [r7, #4]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3718      	adds	r7, #24
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000210 	.word	0x20000210

080002d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d4:	f000 fcbe 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d8:	f000 f81c 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002dc:	f000 f972 	bl	80005c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80002e0:	f000 f952 	bl	8000588 <MX_DMA_Init>
  MX_I2C2_Init();
 80002e4:	f000 f86c 	bl	80003c0 <MX_I2C2_Init>
  MX_SPI2_Init();
 80002e8:	f000 f8aa 	bl	8000440 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80002ec:	f000 f8e6 	bl	80004bc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80002f0:	f000 f91a 	bl	8000528 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart2, "Hello\r\n", sizeof("Hello\r\n"), 300);
 80002f4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80002f8:	2208      	movs	r2, #8
 80002fa:	4904      	ldr	r1, [pc, #16]	; (800030c <main+0x3c>)
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <main+0x40>)
 80002fe:	f003 f8aa 	bl	8003456 <HAL_UART_Transmit>
  while (1)
  {
      //printf("test\r\n");
      //HAL_UART_Transmit(&huart2, (uint8_t *)"Hello, I am under the water\r\n", sizeof("Hello, I am under the water\r\n"), 300);
      HAL_Delay(5000);
 8000302:	f241 3088 	movw	r0, #5000	; 0x1388
 8000306:	f000 fd0b 	bl	8000d20 <HAL_Delay>
 800030a:	e7fa      	b.n	8000302 <main+0x32>
 800030c:	0800523c 	.word	0x0800523c
 8000310:	20000188 	.word	0x20000188

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b09c      	sub	sp, #112	; 0x70
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800031e:	2228      	movs	r2, #40	; 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f003 ffe8 	bl	80042f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
 8000336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2230      	movs	r2, #48	; 0x30
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f003 ffda 	bl	80042f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000344:	2302      	movs	r3, #2
 8000346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000348:	2301      	movs	r3, #1
 800034a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034c:	2310      	movs	r3, #16
 800034e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000350:	2302      	movs	r3, #2
 8000352:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000354:	2300      	movs	r3, #0
 8000356:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000358:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800035c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000362:	4618      	mov	r0, r3
 8000364:	f001 fa66 	bl	8001834 <HAL_RCC_OscConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800036e:	f000 f9c7 	bl	8000700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	230f      	movs	r3, #15
 8000374:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000376:	2302      	movs	r3, #2
 8000378:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000388:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800038c:	2102      	movs	r1, #2
 800038e:	4618      	mov	r0, r3
 8000390:	f002 fa8e 	bl	80028b0 <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800039a:	f000 f9b1 	bl	8000700 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800039e:	2340      	movs	r3, #64	; 0x40
 80003a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4618      	mov	r0, r3
 80003aa:	f002 fcb7 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80003b4:	f000 f9a4 	bl	8000700 <Error_Handler>
  }
}
 80003b8:	bf00      	nop
 80003ba:	3770      	adds	r7, #112	; 0x70
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_I2C2_Init+0x74>)
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <MX_I2C2_Init+0x78>)
 80003c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_I2C2_Init+0x74>)
 80003cc:	4a1b      	ldr	r2, [pc, #108]	; (800043c <MX_I2C2_Init+0x7c>)
 80003ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_I2C2_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <MX_I2C2_Init+0x74>)
 80003d8:	2201      	movs	r2, #1
 80003da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <MX_I2C2_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MX_I2C2_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <MX_I2C2_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_I2C2_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_I2C2_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003fa:	480e      	ldr	r0, [pc, #56]	; (8000434 <MX_I2C2_Init+0x74>)
 80003fc:	f001 f8f3 	bl	80015e6 <HAL_I2C_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000406:	f000 f97b 	bl	8000700 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800040a:	2100      	movs	r1, #0
 800040c:	4809      	ldr	r0, [pc, #36]	; (8000434 <MX_I2C2_Init+0x74>)
 800040e:	f001 f979 	bl	8001704 <HAL_I2CEx_ConfigAnalogFilter>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000418:	f000 f972 	bl	8000700 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800041c:	2100      	movs	r1, #0
 800041e:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_I2C2_Init+0x74>)
 8000420:	f001 f9bb 	bl	800179a <HAL_I2CEx_ConfigDigitalFilter>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800042a:	f000 f969 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	2000008c 	.word	0x2000008c
 8000438:	40005800 	.word	0x40005800
 800043c:	2000090e 	.word	0x2000090e

08000440 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000446:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <MX_SPI2_Init+0x78>)
 8000448:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800044a:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_SPI2_Init+0x74>)
 800044c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000450:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <MX_SPI2_Init+0x74>)
 800045a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800045e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_SPI2_Init+0x74>)
 800046e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000472:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_SPI2_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_SPI2_Init+0x74>)
 800048e:	2207      	movs	r2, #7
 8000490:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_SPI2_Init+0x74>)
 800049a:	2208      	movs	r2, #8
 800049c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_SPI2_Init+0x74>)
 80004a0:	f002 fdc0 	bl	8003024 <HAL_SPI_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80004aa:	f000 f929 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200000e0 	.word	0x200000e0
 80004b8:	40003800 	.word	0x40003800

080004bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c0:	4b17      	ldr	r3, [pc, #92]	; (8000520 <MX_USART2_UART_Init+0x64>)
 80004c2:	4a18      	ldr	r2, [pc, #96]	; (8000524 <MX_USART2_UART_Init+0x68>)
 80004c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004c6:	4b16      	ldr	r3, [pc, #88]	; (8000520 <MX_USART2_UART_Init+0x64>)
 80004c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_USART2_UART_Init+0x64>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <MX_USART2_UART_Init+0x64>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_USART2_UART_Init+0x64>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MX_USART2_UART_Init+0x64>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_USART2_UART_Init+0x64>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_USART2_UART_Init+0x64>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_USART2_UART_Init+0x64>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_USART2_UART_Init+0x64>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004fe:	4808      	ldr	r0, [pc, #32]	; (8000520 <MX_USART2_UART_Init+0x64>)
 8000500:	f002 ff5b 	bl	80033ba <HAL_UART_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800050a:	f000 f8f9 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART2->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <MX_USART2_UART_Init+0x68>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a04      	ldr	r2, [pc, #16]	; (8000524 <MX_USART2_UART_Init+0x68>)
 8000514:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8000518:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000188 	.word	0x20000188
 8000524:	40004400 	.word	0x40004400

08000528 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_USART3_UART_Init+0x58>)
 800052e:	4a15      	ldr	r2, [pc, #84]	; (8000584 <MX_USART3_UART_Init+0x5c>)
 8000530:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_USART3_UART_Init+0x58>)
 8000534:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000538:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_USART3_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_USART3_UART_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_USART3_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_USART3_UART_Init+0x58>)
 800054e:	220c      	movs	r2, #12
 8000550:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <MX_USART3_UART_Init+0x58>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_USART3_UART_Init+0x58>)
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <MX_USART3_UART_Init+0x58>)
 8000560:	2200      	movs	r2, #0
 8000562:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_USART3_UART_Init+0x58>)
 8000566:	2200      	movs	r2, #0
 8000568:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <MX_USART3_UART_Init+0x58>)
 800056c:	f002 ff25 	bl	80033ba <HAL_UART_Init>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000576:	f000 f8c3 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000210 	.word	0x20000210
 8000584:	40004800 	.word	0x40004800

08000588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_DMA_Init+0x38>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <MX_DMA_Init+0x38>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_DMA_Init+0x38>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	200f      	movs	r0, #15
 80005ac:	f000 fcb7 	bl	8000f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005b0:	200f      	movs	r0, #15
 80005b2:	f000 fcd0 	bl	8000f56 <HAL_NVIC_EnableIRQ>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b46      	ldr	r3, [pc, #280]	; (80006f4 <MX_GPIO_Init+0x130>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a45      	ldr	r2, [pc, #276]	; (80006f4 <MX_GPIO_Init+0x130>)
 80005e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b43      	ldr	r3, [pc, #268]	; (80006f4 <MX_GPIO_Init+0x130>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f2:	4b40      	ldr	r3, [pc, #256]	; (80006f4 <MX_GPIO_Init+0x130>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a3f      	ldr	r2, [pc, #252]	; (80006f4 <MX_GPIO_Init+0x130>)
 80005f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b3d      	ldr	r3, [pc, #244]	; (80006f4 <MX_GPIO_Init+0x130>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b3a      	ldr	r3, [pc, #232]	; (80006f4 <MX_GPIO_Init+0x130>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a39      	ldr	r2, [pc, #228]	; (80006f4 <MX_GPIO_Init+0x130>)
 8000610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b37      	ldr	r3, [pc, #220]	; (80006f4 <MX_GPIO_Init+0x130>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b34      	ldr	r3, [pc, #208]	; (80006f4 <MX_GPIO_Init+0x130>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a33      	ldr	r2, [pc, #204]	; (80006f4 <MX_GPIO_Init+0x130>)
 8000628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b31      	ldr	r3, [pc, #196]	; (80006f4 <MX_GPIO_Init+0x130>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	482d      	ldr	r0, [pc, #180]	; (80006f8 <MX_GPIO_Init+0x134>)
 8000642:	f000 ff95 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f000 ff8e 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8000654:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800065a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000660:	2301      	movs	r3, #1
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	4824      	ldr	r0, [pc, #144]	; (80006fc <MX_GPIO_Init+0x138>)
 800066c:	f000 fe0e 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8000670:	2301      	movs	r3, #1
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000674:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800067a:	2301      	movs	r3, #1
 800067c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f000 fe00 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4814      	ldr	r0, [pc, #80]	; (80006f8 <MX_GPIO_Init+0x134>)
 80006a6:	f000 fdf1 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 80006aa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c6:	f000 fde1 	bl	800128c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2006      	movs	r0, #6
 80006d0:	f000 fc25 	bl	8000f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006d4:	2006      	movs	r0, #6
 80006d6:	f000 fc3e 	bl	8000f56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2028      	movs	r0, #40	; 0x28
 80006e0:	f000 fc1d 	bl	8000f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006e4:	2028      	movs	r0, #40	; 0x28
 80006e6:	f000 fc36 	bl	8000f56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ea:	bf00      	nop
 80006ec:	3728      	adds	r7, #40	; 0x28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000400 	.word	0x48000400
 80006fc:	48000800 	.word	0x48000800

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000708:	e7fe      	b.n	8000708 <Error_Handler+0x8>
	...

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x44>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <HAL_MspInit+0x44>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6193      	str	r3, [r2, #24]
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x44>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_MspInit+0x44>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <HAL_MspInit+0x44>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	61d3      	str	r3, [r2, #28]
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_MspInit+0x44>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <HAL_I2C_MspInit+0x7c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d127      	bne.n	80007c6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <HAL_I2C_MspInit+0x80>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <HAL_I2C_MspInit+0x80>)
 800077c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_I2C_MspInit+0x80>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800078e:	2303      	movs	r3, #3
 8000790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000792:	2312      	movs	r3, #18
 8000794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000796:	2301      	movs	r3, #1
 8000798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800079e:	2304      	movs	r3, #4
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <HAL_I2C_MspInit+0x84>)
 80007aa:	f000 fd6f 	bl	800128c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_I2C_MspInit+0x80>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_I2C_MspInit+0x80>)
 80007b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007b8:	61d3      	str	r3, [r2, #28]
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_I2C_MspInit+0x80>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007c6:	bf00      	nop
 80007c8:	3728      	adds	r7, #40	; 0x28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40005800 	.word	0x40005800
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48001400 	.word	0x48001400

080007dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a2e      	ldr	r2, [pc, #184]	; (80008b4 <HAL_SPI_MspInit+0xd8>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d156      	bne.n	80008ac <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	4a2d      	ldr	r2, [pc, #180]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	61d3      	str	r3, [r2, #28]
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a27      	ldr	r2, [pc, #156]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 800081c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000820:	6153      	str	r3, [r2, #20]
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <HAL_SPI_MspInit+0xdc>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 800082e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000840:	2305      	movs	r3, #5
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	481c      	ldr	r0, [pc, #112]	; (80008bc <HAL_SPI_MspInit+0xe0>)
 800084c:	f000 fd1e 	bl	800128c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <HAL_SPI_MspInit+0xe4>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <HAL_SPI_MspInit+0xe8>)
 8000854:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <HAL_SPI_MspInit+0xe4>)
 8000858:	2210      	movs	r2, #16
 800085a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <HAL_SPI_MspInit+0xe4>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <HAL_SPI_MspInit+0xe4>)
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <HAL_SPI_MspInit+0xe4>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_SPI_MspInit+0xe4>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_SPI_MspInit+0xe4>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_SPI_MspInit+0xe4>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000880:	480f      	ldr	r0, [pc, #60]	; (80008c0 <HAL_SPI_MspInit+0xe4>)
 8000882:	f000 fb82 	bl	8000f8a <HAL_DMA_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 800088c:	f7ff ff38 	bl	8000700 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <HAL_SPI_MspInit+0xe4>)
 8000894:	655a      	str	r2, [r3, #84]	; 0x54
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_SPI_MspInit+0xe4>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	2024      	movs	r0, #36	; 0x24
 80008a2:	f000 fb3c 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80008a6:	2024      	movs	r0, #36	; 0x24
 80008a8:	f000 fb55 	bl	8000f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40003800 	.word	0x40003800
 80008b8:	40021000 	.word	0x40021000
 80008bc:	48000400 	.word	0x48000400
 80008c0:	20000144 	.word	0x20000144
 80008c4:	40020058 	.word	0x40020058

080008c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	; 0x30
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a33      	ldr	r2, [pc, #204]	; (80009b4 <HAL_UART_MspInit+0xec>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d131      	bne.n	800094e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ea:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <HAL_UART_MspInit+0xf0>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a32      	ldr	r2, [pc, #200]	; (80009b8 <HAL_UART_MspInit+0xf0>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <HAL_UART_MspInit+0xf0>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <HAL_UART_MspInit+0xf0>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	4a2c      	ldr	r2, [pc, #176]	; (80009b8 <HAL_UART_MspInit+0xf0>)
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	6153      	str	r3, [r2, #20]
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <HAL_UART_MspInit+0xf0>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800091a:	230c      	movs	r3, #12
 800091c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092a:	2307      	movs	r3, #7
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f000 fca8 	bl	800128c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2026      	movs	r0, #38	; 0x26
 8000942:	f000 faec 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000946:	2026      	movs	r0, #38	; 0x26
 8000948:	f000 fb05 	bl	8000f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800094c:	e02d      	b.n	80009aa <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a1a      	ldr	r2, [pc, #104]	; (80009bc <HAL_UART_MspInit+0xf4>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d128      	bne.n	80009aa <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_UART_MspInit+0xf0>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <HAL_UART_MspInit+0xf0>)
 800095e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000962:	61d3      	str	r3, [r2, #28]
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <HAL_UART_MspInit+0xf0>)
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_UART_MspInit+0xf0>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <HAL_UART_MspInit+0xf0>)
 8000976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800097a:	6153      	str	r3, [r2, #20]
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_UART_MspInit+0xf0>)
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000988:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800099a:	2307      	movs	r3, #7
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4806      	ldr	r0, [pc, #24]	; (80009c0 <HAL_UART_MspInit+0xf8>)
 80009a6:	f000 fc71 	bl	800128c <HAL_GPIO_Init>
}
 80009aa:	bf00      	nop
 80009ac:	3730      	adds	r7, #48	; 0x30
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40004400 	.word	0x40004400
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40004800 	.word	0x40004800
 80009c0:	48000400 	.word	0x48000400

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a10:	f000 f966 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 fdbf 	bl	80015a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <DMA1_Channel5_IRQHandler+0x10>)
 8000a2e:	f000 fb6a 	bl	8001106 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000144 	.word	0x20000144

08000a3c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <SPI2_IRQHandler+0x10>)
 8000a42:	f002 fb9b 	bl	800317c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000e0 	.word	0x200000e0

08000a50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

    char ch;
    uint16_t number;

    uint32_t isrflags = READ_REG(huart2.Instance->ISR);
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <USART2_IRQHandler+0x54>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	69db      	ldr	r3, [r3, #28]
 8000a5c:	60fb      	str	r3, [r7, #12]
    uint32_t crlits = READ_REG(huart2.Instance->CR1);
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <USART2_IRQHandler+0x54>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60bb      	str	r3, [r7, #8]

    if (((isrflags & USART_ISR_RXNE) != RESET) && ((crlits & USART_CR1_RXNEIE) != RESET)) {
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f003 0320 	and.w	r3, r3, #32
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d011      	beq.n	8000a94 <USART2_IRQHandler+0x44>
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	f003 0320 	and.w	r3, r3, #32
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00c      	beq.n	8000a94 <USART2_IRQHandler+0x44>
        huart2.Instance->ISR;
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <USART2_IRQHandler+0x54>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	69db      	ldr	r3, [r3, #28]
        //number = huart2.Instance->RDR;
        ch = huart2.Instance->RDR;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <USART2_IRQHandler+0x54>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	71fb      	strb	r3, [r7, #7]
        //printf("%ul\r\n", number);
        printf("%c\r\n", ch);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <USART2_IRQHandler+0x58>)
 8000a90:	f003 fc3a 	bl	8004308 <iprintf>
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <USART2_IRQHandler+0x54>)
 8000a96:	f002 fd69 	bl	800356c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000188 	.word	0x20000188
 8000aa8:	08005244 	.word	0x08005244

08000aac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 8000ab0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ab4:	f000 fd74 	bl	80015a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8000ab8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000abc:	f000 fd70 	bl	80015a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8000ac0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ac4:	f000 fd6c 	bl	80015a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	e00a      	b.n	8000af4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ade:	f3af 8000 	nop.w
 8000ae2:	4601      	mov	r1, r0
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	60ba      	str	r2, [r7, #8]
 8000aea:	b2ca      	uxtb	r2, r1
 8000aec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf0      	blt.n	8000ade <_read+0x12>
  }

  return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_isatty>:

int _isatty(int file)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f003 fb80 	bl	80042a4 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20004000 	.word	0x20004000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	20000298 	.word	0x20000298
 8000bd8:	200002b0 	.word	0x200002b0

08000bdc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c04:	f7ff ffea 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	; (8000c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <LoopForever+0xe>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	; (8000c4c <LoopForever+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f003 fb3f 	bl	80042b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c32:	f7ff fb4d 	bl	80002d0 <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c38:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c44:	08005324 	.word	0x08005324
  ldr r2, =_sbss
 8000c48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c4c:	200002b0 	.word	0x200002b0

08000c50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_Init+0x28>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_Init+0x28>)
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f94f 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f000 f808 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff fd4c 	bl	800070c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40022000 	.word	0x40022000

08000c80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x54>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x58>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f967 	bl	8000f72 <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00e      	b.n	8000ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d80a      	bhi.n	8000cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f000 f92f 	bl	8000f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <HAL_InitTick+0x5c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	2000029c 	.word	0x2000029c

08000d08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	2000029c 	.word	0x2000029c

08000d20 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d28:	f7ff ffee 	bl	8000d08 <HAL_GetTick>
 8000d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d38:	d005      	beq.n	8000d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_Delay+0x44>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4413      	add	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d46:	bf00      	nop
 8000d48:	f7ff ffde 	bl	8000d08 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d8f7      	bhi.n	8000d48 <HAL_Delay+0x28>
  {
  }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	db0b      	blt.n	8000df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f003 021f 	and.w	r2, r3, #31
 8000de4:	4907      	ldr	r1, [pc, #28]	; (8000e04 <__NVIC_EnableIRQ+0x38>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	2001      	movs	r0, #1
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff29 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff3e 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff8e 	bl	8000e5c <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5d 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff31 	bl	8000dcc <__NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffa2 	bl	8000ec4 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e037      	b.n	8001010 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 f92a 	bl	800124c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}  
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001026:	2b02      	cmp	r3, #2
 8001028:	d008      	beq.n	800103c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2204      	movs	r2, #4
 800102e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e020      	b.n	800107e <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 020e 	bic.w	r2, r2, #14
 800104a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0201 	bic.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f202 	lsl.w	r2, r1, r2
 800106a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800109c:	2b02      	cmp	r3, #2
 800109e:	d005      	beq.n	80010ac <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2204      	movs	r2, #4
 80010a4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e027      	b.n	80010fc <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 020e 	bic.w	r2, r2, #14
 80010ba:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0201 	bic.w	r2, r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d4:	2101      	movs	r1, #1
 80010d6:	fa01 f202 	lsl.w	r2, r1, r2
 80010da:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	4798      	blx	r3
    } 
  }
  return status;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	2204      	movs	r2, #4
 8001124:	409a      	lsls	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4013      	ands	r3, r2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d024      	beq.n	8001178 <HAL_DMA_IRQHandler+0x72>
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01f      	beq.n	8001178 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0320 	and.w	r3, r3, #32
 8001142:	2b00      	cmp	r3, #0
 8001144:	d107      	bne.n	8001156 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0204 	bic.w	r2, r2, #4
 8001154:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800115e:	2104      	movs	r1, #4
 8001160:	fa01 f202 	lsl.w	r2, r1, r2
 8001164:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	2b00      	cmp	r3, #0
 800116c:	d06a      	beq.n	8001244 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001176:	e065      	b.n	8001244 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	2202      	movs	r2, #2
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d02c      	beq.n	80011e2 <HAL_DMA_IRQHandler+0xdc>
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d027      	beq.n	80011e2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10b      	bne.n	80011b8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 020a 	bic.w	r2, r2, #10
 80011ae:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c0:	2102      	movs	r1, #2
 80011c2:	fa01 f202 	lsl.w	r2, r1, r2
 80011c6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d035      	beq.n	8001244 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80011e0:	e030      	b.n	8001244 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	2208      	movs	r2, #8
 80011e8:	409a      	lsls	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d028      	beq.n	8001244 <HAL_DMA_IRQHandler+0x13e>
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d023      	beq.n	8001244 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 020e 	bic.w	r2, r2, #14
 800120a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001214:	2101      	movs	r1, #1
 8001216:	fa01 f202 	lsl.w	r2, r1, r2
 800121a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	2b00      	cmp	r3, #0
 8001238:	d004      	beq.n	8001244 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	4798      	blx	r3
    }
  }
}  
 8001242:	e7ff      	b.n	8001244 <HAL_DMA_IRQHandler+0x13e>
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <DMA_CalcBaseAndBitshift+0x34>)
 800125c:	4413      	add	r3, r2
 800125e:	4a09      	ldr	r2, [pc, #36]	; (8001284 <DMA_CalcBaseAndBitshift+0x38>)
 8001260:	fba2 2303 	umull	r2, r3, r2, r3
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	009a      	lsls	r2, r3, #2
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a06      	ldr	r2, [pc, #24]	; (8001288 <DMA_CalcBaseAndBitshift+0x3c>)
 8001270:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	bffdfff8 	.word	0xbffdfff8
 8001284:	cccccccd 	.word	0xcccccccd
 8001288:	40020000 	.word	0x40020000

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	e14e      	b.n	800153a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8140 	beq.w	8001534 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d005      	beq.n	80012cc <HAL_GPIO_Init+0x40>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 0201 	and.w	r2, r3, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b03      	cmp	r3, #3
 8001338:	d017      	beq.n	800136a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d123      	bne.n	80013be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	6939      	ldr	r1, [r7, #16]
 80013ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0203 	and.w	r2, r3, #3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 809a 	beq.w	8001534 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001400:	4b55      	ldr	r3, [pc, #340]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a54      	ldr	r2, [pc, #336]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b52      	ldr	r3, [pc, #328]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001418:	4a50      	ldr	r2, [pc, #320]	; (800155c <HAL_GPIO_Init+0x2d0>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001442:	d013      	beq.n	800146c <HAL_GPIO_Init+0x1e0>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a46      	ldr	r2, [pc, #280]	; (8001560 <HAL_GPIO_Init+0x2d4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d00d      	beq.n	8001468 <HAL_GPIO_Init+0x1dc>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a45      	ldr	r2, [pc, #276]	; (8001564 <HAL_GPIO_Init+0x2d8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d007      	beq.n	8001464 <HAL_GPIO_Init+0x1d8>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a44      	ldr	r2, [pc, #272]	; (8001568 <HAL_GPIO_Init+0x2dc>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_GPIO_Init+0x1d4>
 800145c:	2303      	movs	r3, #3
 800145e:	e006      	b.n	800146e <HAL_GPIO_Init+0x1e2>
 8001460:	2305      	movs	r3, #5
 8001462:	e004      	b.n	800146e <HAL_GPIO_Init+0x1e2>
 8001464:	2302      	movs	r3, #2
 8001466:	e002      	b.n	800146e <HAL_GPIO_Init+0x1e2>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_GPIO_Init+0x1e2>
 800146c:	2300      	movs	r3, #0
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	f002 0203 	and.w	r2, r2, #3
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	4093      	lsls	r3, r2
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800147e:	4937      	ldr	r1, [pc, #220]	; (800155c <HAL_GPIO_Init+0x2d0>)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148c:	4b37      	ldr	r3, [pc, #220]	; (800156c <HAL_GPIO_Init+0x2e0>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014b0:	4a2e      	ldr	r2, [pc, #184]	; (800156c <HAL_GPIO_Init+0x2e0>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b6:	4b2d      	ldr	r3, [pc, #180]	; (800156c <HAL_GPIO_Init+0x2e0>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014da:	4a24      	ldr	r2, [pc, #144]	; (800156c <HAL_GPIO_Init+0x2e0>)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_GPIO_Init+0x2e0>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001504:	4a19      	ldr	r2, [pc, #100]	; (800156c <HAL_GPIO_Init+0x2e0>)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <HAL_GPIO_Init+0x2e0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800152e:	4a0f      	ldr	r2, [pc, #60]	; (800156c <HAL_GPIO_Init+0x2e0>)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	f47f aea9 	bne.w	800129c <HAL_GPIO_Init+0x10>
  }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40021000 	.word	0x40021000
 800155c:	40010000 	.word	0x40010000
 8001560:	48000400 	.word	0x48000400
 8001564:	48000800 	.word	0x48000800
 8001568:	48000c00 	.word	0x48000c00
 800156c:	40010400 	.word	0x40010400

08001570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]
 800157c:	4613      	mov	r3, r2
 800157e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001580:	787b      	ldrb	r3, [r7, #1]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800158c:	e002      	b.n	8001594 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f806 	bl	80015d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40010400 	.word	0x40010400

080015d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e081      	b.n	80016fc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d106      	bne.n	8001612 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff f8a1 	bl	8000754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2224      	movs	r2, #36	; 0x24
 8001616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0201 	bic.w	r2, r2, #1
 8001628:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001636:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001646:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d107      	bne.n	8001660 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	e006      	b.n	800166e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800166c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d104      	bne.n	8001680 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800167e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800168e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001692:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69d9      	ldr	r1, [r3, #28]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1a      	ldr	r2, [r3, #32]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 0201 	orr.w	r2, r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2220      	movs	r2, #32
 80016e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b20      	cmp	r3, #32
 8001718:	d138      	bne.n	800178c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001724:	2302      	movs	r3, #2
 8001726:	e032      	b.n	800178e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2224      	movs	r2, #36	; 0x24
 8001734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0201 	bic.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001756:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6819      	ldr	r1, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0201 	orr.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2220      	movs	r2, #32
 800177c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	e000      	b.n	800178e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800178c:	2302      	movs	r3, #2
  }
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b20      	cmp	r3, #32
 80017ae:	d139      	bne.n	8001824 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e033      	b.n	8001826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2224      	movs	r2, #36	; 0x24
 80017ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2220      	movs	r2, #32
 8001814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	e000      	b.n	8001826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001824:	2302      	movs	r3, #2
  }
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800183a:	af00      	add	r7, sp, #0
 800183c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001840:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001844:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	f001 b823 	b.w	80028a0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 817d 	beq.w	8001b6a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001870:	4bbc      	ldr	r3, [pc, #752]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b04      	cmp	r3, #4
 800187a:	d00c      	beq.n	8001896 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800187c:	4bb9      	ldr	r3, [pc, #740]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d15c      	bne.n	8001942 <HAL_RCC_OscConfig+0x10e>
 8001888:	4bb6      	ldr	r3, [pc, #728]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001894:	d155      	bne.n	8001942 <HAL_RCC_OscConfig+0x10e>
 8001896:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	095b      	lsrs	r3, r3, #5
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d102      	bne.n	80018c8 <HAL_RCC_OscConfig+0x94>
 80018c2:	4ba8      	ldr	r3, [pc, #672]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	e015      	b.n	80018f4 <HAL_RCC_OscConfig+0xc0>
 80018c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018cc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018d4:	fa93 f3a3 	rbit	r3, r3
 80018d8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018e0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018e4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80018f0:	4b9c      	ldr	r3, [pc, #624]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018f8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80018fc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001900:	fa92 f2a2 	rbit	r2, r2
 8001904:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001908:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800190c:	fab2 f282 	clz	r2, r2
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	f042 0220 	orr.w	r2, r2, #32
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	f002 021f 	and.w	r2, r2, #31
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f202 	lsl.w	r2, r1, r2
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 811f 	beq.w	8001b68 <HAL_RCC_OscConfig+0x334>
 800192a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 8116 	bne.w	8001b68 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	f000 bfaf 	b.w	80028a0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x12e>
 8001954:	4b83      	ldr	r3, [pc, #524]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a82      	ldr	r2, [pc, #520]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 800195a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e036      	b.n	80019d0 <HAL_RCC_OscConfig+0x19c>
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0x158>
 8001972:	4b7c      	ldr	r3, [pc, #496]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a7b      	ldr	r2, [pc, #492]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 8001978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b79      	ldr	r3, [pc, #484]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a78      	ldr	r2, [pc, #480]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 8001984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e021      	b.n	80019d0 <HAL_RCC_OscConfig+0x19c>
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x184>
 800199e:	4b71      	ldr	r3, [pc, #452]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a70      	ldr	r2, [pc, #448]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 80019a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b6e      	ldr	r3, [pc, #440]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6d      	ldr	r2, [pc, #436]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e00b      	b.n	80019d0 <HAL_RCC_OscConfig+0x19c>
 80019b8:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a69      	ldr	r2, [pc, #420]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 80019be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b67      	ldr	r3, [pc, #412]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a66      	ldr	r2, [pc, #408]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 80019ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ce:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019d0:	4b64      	ldr	r3, [pc, #400]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	f023 020f 	bic.w	r2, r3, #15
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	495f      	ldr	r1, [pc, #380]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d059      	beq.n	8001aae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff f985 	bl	8000d08 <HAL_GetTick>
 80019fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff f980 	bl	8000d08 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b64      	cmp	r3, #100	; 0x64
 8001a12:	d902      	bls.n	8001a1a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	f000 bf43 	b.w	80028a0 <HAL_RCC_OscConfig+0x106c>
 8001a1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a1e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a2e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	095b      	lsrs	r3, r3, #5
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_OscConfig+0x218>
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	e015      	b.n	8001a78 <HAL_RCC_OscConfig+0x244>
 8001a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a50:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a58:	fa93 f3a3 	rbit	r3, r3
 8001a5c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a64:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a68:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a74:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a7c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a80:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a84:	fa92 f2a2 	rbit	r2, r2
 8001a88:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a8c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001a90:	fab2 f282 	clz	r2, r2
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	f042 0220 	orr.w	r2, r2, #32
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	f002 021f 	and.w	r2, r2, #31
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0ab      	beq.n	8001a04 <HAL_RCC_OscConfig+0x1d0>
 8001aac:	e05d      	b.n	8001b6a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff f92b 	bl	8000d08 <HAL_GetTick>
 8001ab2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff f926 	bl	8000d08 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b64      	cmp	r3, #100	; 0x64
 8001ac6:	d902      	bls.n	8001ace <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	f000 bee9 	b.w	80028a0 <HAL_RCC_OscConfig+0x106c>
 8001ace:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ae2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d102      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2cc>
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	e015      	b.n	8001b2c <HAL_RCC_OscConfig+0x2f8>
 8001b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b04:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b0c:	fa93 f3a3 	rbit	r3, r3
 8001b10:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b18:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b1c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_RCC_OscConfig+0x330>)
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b30:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b34:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b38:	fa92 f2a2 	rbit	r2, r2
 8001b3c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b40:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b44:	fab2 f282 	clz	r2, r2
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	f042 0220 	orr.w	r2, r2, #32
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	f002 021f 	and.w	r2, r2, #31
 8001b54:	2101      	movs	r1, #1
 8001b56:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1ab      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x284>
 8001b60:	e003      	b.n	8001b6a <HAL_RCC_OscConfig+0x336>
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 817d 	beq.w	8001e7a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b80:	4ba6      	ldr	r3, [pc, #664]	; (8001e1c <HAL_RCC_OscConfig+0x5e8>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00b      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b8c:	4ba3      	ldr	r3, [pc, #652]	; (8001e1c <HAL_RCC_OscConfig+0x5e8>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d172      	bne.n	8001c7e <HAL_RCC_OscConfig+0x44a>
 8001b98:	4ba0      	ldr	r3, [pc, #640]	; (8001e1c <HAL_RCC_OscConfig+0x5e8>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d16c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x44a>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001bb6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	095b      	lsrs	r3, r3, #5
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d102      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x3a0>
 8001bce:	4b93      	ldr	r3, [pc, #588]	; (8001e1c <HAL_RCC_OscConfig+0x5e8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	e013      	b.n	8001bfc <HAL_RCC_OscConfig+0x3c8>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001be6:	2302      	movs	r3, #2
 8001be8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001bec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001bf8:	4b88      	ldr	r3, [pc, #544]	; (8001e1c <HAL_RCC_OscConfig+0x5e8>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c02:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c06:	fa92 f2a2 	rbit	r2, r2
 8001c0a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c0e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c12:	fab2 f282 	clz	r2, r2
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f042 0220 	orr.w	r2, r2, #32
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	f002 021f 	and.w	r2, r2, #31
 8001c22:	2101      	movs	r1, #1
 8001c24:	fa01 f202 	lsl.w	r2, r1, r2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00a      	beq.n	8001c44 <HAL_RCC_OscConfig+0x410>
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d002      	beq.n	8001c44 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f000 be2e 	b.w	80028a0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b75      	ldr	r3, [pc, #468]	; (8001e1c <HAL_RCC_OscConfig+0x5e8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	21f8      	movs	r1, #248	; 0xf8
 8001c5a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c62:	fa91 f1a1 	rbit	r1, r1
 8001c66:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c6a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c6e:	fab1 f181 	clz	r1, r1
 8001c72:	b2c9      	uxtb	r1, r1
 8001c74:	408b      	lsls	r3, r1
 8001c76:	4969      	ldr	r1, [pc, #420]	; (8001e1c <HAL_RCC_OscConfig+0x5e8>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7c:	e0fd      	b.n	8001e7a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8088 	beq.w	8001da0 <HAL_RCC_OscConfig+0x56c>
 8001c90:	2301      	movs	r3, #1
 8001c92:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ca2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	2301      	movs	r3, #1
 8001cba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f824 	bl	8000d08 <HAL_GetTick>
 8001cc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc6:	f7ff f81f 	bl	8000d08 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d902      	bls.n	8001cdc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	f000 bde2 	b.w	80028a0 <HAL_RCC_OscConfig+0x106c>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001cee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d102      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4d8>
 8001d06:	4b45      	ldr	r3, [pc, #276]	; (8001e1c <HAL_RCC_OscConfig+0x5e8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	e013      	b.n	8001d34 <HAL_RCC_OscConfig+0x500>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d24:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d30:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <HAL_RCC_OscConfig+0x5e8>)
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	2202      	movs	r2, #2
 8001d36:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d3a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d3e:	fa92 f2a2 	rbit	r2, r2
 8001d42:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d46:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d4a:	fab2 f282 	clz	r2, r2
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f042 0220 	orr.w	r2, r2, #32
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	f002 021f 	and.w	r2, r2, #31
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0af      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d66:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <HAL_RCC_OscConfig+0x5e8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	21f8      	movs	r1, #248	; 0xf8
 8001d7c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d84:	fa91 f1a1 	rbit	r1, r1
 8001d88:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d8c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d90:	fab1 f181 	clz	r1, r1
 8001d94:	b2c9      	uxtb	r1, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	4920      	ldr	r1, [pc, #128]	; (8001e1c <HAL_RCC_OscConfig+0x5e8>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]
 8001d9e:	e06c      	b.n	8001e7a <HAL_RCC_OscConfig+0x646>
 8001da0:	2301      	movs	r3, #1
 8001da2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001db2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2300      	movs	r3, #0
 8001dca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7fe ff9c 	bl	8000d08 <HAL_GetTick>
 8001dd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7fe ff97 	bl	8000d08 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d902      	bls.n	8001dec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	f000 bd5a 	b.w	80028a0 <HAL_RCC_OscConfig+0x106c>
 8001dec:	2302      	movs	r3, #2
 8001dee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d104      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5ec>
 8001e16:	4b01      	ldr	r3, [pc, #4]	; (8001e1c <HAL_RCC_OscConfig+0x5e8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	e015      	b.n	8001e48 <HAL_RCC_OscConfig+0x614>
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	2302      	movs	r3, #2
 8001e22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e32:	2302      	movs	r3, #2
 8001e34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e44:	4bc8      	ldr	r3, [pc, #800]	; (8002168 <HAL_RCC_OscConfig+0x934>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	2202      	movs	r2, #2
 8001e4a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e4e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e52:	fa92 f2a2 	rbit	r2, r2
 8001e56:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e5a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e5e:	fab2 f282 	clz	r2, r2
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	f042 0220 	orr.w	r2, r2, #32
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	f002 021f 	and.w	r2, r2, #31
 8001e6e:	2101      	movs	r1, #1
 8001e70:	fa01 f202 	lsl.w	r2, r1, r2
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ad      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8110 	beq.w	80020b0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d079      	beq.n	8001f94 <HAL_RCC_OscConfig+0x760>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4bab      	ldr	r3, [pc, #684]	; (800216c <HAL_RCC_OscConfig+0x938>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eca:	f7fe ff1d 	bl	8000d08 <HAL_GetTick>
 8001ece:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7fe ff18 	bl	8000d08 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d902      	bls.n	8001eea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	f000 bcdb 	b.w	80028a0 <HAL_RCC_OscConfig+0x106c>
 8001eea:	2302      	movs	r3, #2
 8001eec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f00:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f04:	2202      	movs	r2, #2
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f28:	2202      	movs	r2, #2
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f42:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f44:	4b88      	ldr	r3, [pc, #544]	; (8002168 <HAL_RCC_OscConfig+0x934>)
 8001f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f50:	2102      	movs	r1, #2
 8001f52:	6019      	str	r1, [r3, #0]
 8001f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	fa93 f1a3 	rbit	r1, r3
 8001f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f66:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f6a:	6019      	str	r1, [r3, #0]
  return result;
 8001f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0a0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x6a0>
 8001f92:	e08d      	b.n	80020b0 <HAL_RCC_OscConfig+0x87c>
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	fa93 f2a3 	rbit	r2, r3
 8001fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fb6:	601a      	str	r2, [r3, #0]
  return result;
 8001fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fc0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b68      	ldr	r3, [pc, #416]	; (800216c <HAL_RCC_OscConfig+0x938>)
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd6:	f7fe fe97 	bl	8000d08 <HAL_GetTick>
 8001fda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7fe fe92 	bl	8000d08 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d902      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	f000 bc55 	b.w	80028a0 <HAL_RCC_OscConfig+0x106c>
 8001ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ffe:	2202      	movs	r2, #2
 8002000:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	fa93 f2a3 	rbit	r2, r3
 8002010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002014:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002022:	2202      	movs	r2, #2
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002046:	2202      	movs	r2, #2
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f2a3 	rbit	r2, r3
 8002058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002060:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002062:	4b41      	ldr	r3, [pc, #260]	; (8002168 <HAL_RCC_OscConfig+0x934>)
 8002064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800206e:	2102      	movs	r1, #2
 8002070:	6019      	str	r1, [r3, #0]
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	fa93 f1a3 	rbit	r1, r3
 8002080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002084:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002088:	6019      	str	r1, [r3, #0]
  return result;
 800208a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2101      	movs	r1, #1
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d197      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 81a1 	beq.w	8002408 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020cc:	4b26      	ldr	r3, [pc, #152]	; (8002168 <HAL_RCC_OscConfig+0x934>)
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d116      	bne.n	8002106 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d8:	4b23      	ldr	r3, [pc, #140]	; (8002168 <HAL_RCC_OscConfig+0x934>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	4a22      	ldr	r2, [pc, #136]	; (8002168 <HAL_RCC_OscConfig+0x934>)
 80020de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e2:	61d3      	str	r3, [r2, #28]
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_RCC_OscConfig+0x934>)
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80020ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80020fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002100:	2301      	movs	r3, #1
 8002102:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002106:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <HAL_RCC_OscConfig+0x93c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d11a      	bne.n	8002148 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <HAL_RCC_OscConfig+0x93c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a16      	ldr	r2, [pc, #88]	; (8002170 <HAL_RCC_OscConfig+0x93c>)
 8002118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211e:	f7fe fdf3 	bl	8000d08 <HAL_GetTick>
 8002122:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002126:	e009      	b.n	800213c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002128:	f7fe fdee 	bl	8000d08 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b64      	cmp	r3, #100	; 0x64
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e3b1      	b.n	80028a0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_RCC_OscConfig+0x93c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0ef      	beq.n	8002128 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d10d      	bne.n	8002174 <HAL_RCC_OscConfig+0x940>
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_RCC_OscConfig+0x934>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4a02      	ldr	r2, [pc, #8]	; (8002168 <HAL_RCC_OscConfig+0x934>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6213      	str	r3, [r2, #32]
 8002164:	e03c      	b.n	80021e0 <HAL_RCC_OscConfig+0x9ac>
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	10908120 	.word	0x10908120
 8002170:	40007000 	.word	0x40007000
 8002174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002178:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10c      	bne.n	800219e <HAL_RCC_OscConfig+0x96a>
 8002184:	4bc1      	ldr	r3, [pc, #772]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4ac0      	ldr	r2, [pc, #768]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	4bbe      	ldr	r3, [pc, #760]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	4abd      	ldr	r2, [pc, #756]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 8002196:	f023 0304 	bic.w	r3, r3, #4
 800219a:	6213      	str	r3, [r2, #32]
 800219c:	e020      	b.n	80021e0 <HAL_RCC_OscConfig+0x9ac>
 800219e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x994>
 80021ae:	4bb7      	ldr	r3, [pc, #732]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4ab6      	ldr	r2, [pc, #728]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	4bb4      	ldr	r3, [pc, #720]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4ab3      	ldr	r2, [pc, #716]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6213      	str	r3, [r2, #32]
 80021c6:	e00b      	b.n	80021e0 <HAL_RCC_OscConfig+0x9ac>
 80021c8:	4bb0      	ldr	r3, [pc, #704]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4aaf      	ldr	r2, [pc, #700]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 80021ce:	f023 0301 	bic.w	r3, r3, #1
 80021d2:	6213      	str	r3, [r2, #32]
 80021d4:	4bad      	ldr	r3, [pc, #692]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4aac      	ldr	r2, [pc, #688]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 80021da:	f023 0304 	bic.w	r3, r3, #4
 80021de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8081 	beq.w	80022f4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f2:	f7fe fd89 	bl	8000d08 <HAL_GetTick>
 80021f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fc:	f7fe fd84 	bl	8000d08 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	; 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e345      	b.n	80028a0 <HAL_RCC_OscConfig+0x106c>
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800221c:	2202      	movs	r2, #2
 800221e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	fa93 f2a3 	rbit	r2, r3
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002240:	2202      	movs	r2, #2
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002248:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	fa93 f2a3 	rbit	r2, r3
 8002252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002256:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800225a:	601a      	str	r2, [r3, #0]
  return result;
 800225c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002260:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002264:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d102      	bne.n	8002280 <HAL_RCC_OscConfig+0xa4c>
 800227a:	4b84      	ldr	r3, [pc, #528]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	e013      	b.n	80022a8 <HAL_RCC_OscConfig+0xa74>
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002288:	2202      	movs	r2, #2
 800228a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002290:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	fa93 f2a3 	rbit	r2, r3
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	4b79      	ldr	r3, [pc, #484]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022b0:	2102      	movs	r1, #2
 80022b2:	6011      	str	r1, [r2, #0]
 80022b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	fa92 f1a2 	rbit	r1, r2
 80022c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022c6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022ca:	6011      	str	r1, [r2, #0]
  return result;
 80022cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	fab2 f282 	clz	r2, r2
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	f002 021f 	and.w	r2, r2, #31
 80022e6:	2101      	movs	r1, #1
 80022e8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d084      	beq.n	80021fc <HAL_RCC_OscConfig+0x9c8>
 80022f2:	e07f      	b.n	80023f4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f4:	f7fe fd08 	bl	8000d08 <HAL_GetTick>
 80022f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fc:	e00b      	b.n	8002316 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fe:	f7fe fd03 	bl	8000d08 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	; 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e2c4      	b.n	80028a0 <HAL_RCC_OscConfig+0x106c>
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800231e:	2202      	movs	r2, #2
 8002320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	fa93 f2a3 	rbit	r2, r3
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002342:	2202      	movs	r2, #2
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	fa93 f2a3 	rbit	r2, r3
 8002354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002358:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800235c:	601a      	str	r2, [r3, #0]
  return result;
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002366:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f043 0302 	orr.w	r3, r3, #2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d102      	bne.n	8002382 <HAL_RCC_OscConfig+0xb4e>
 800237c:	4b43      	ldr	r3, [pc, #268]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	e013      	b.n	80023aa <HAL_RCC_OscConfig+0xb76>
 8002382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002386:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800238a:	2202      	movs	r2, #2
 800238c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002392:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	fa93 f2a3 	rbit	r2, r3
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	4b39      	ldr	r3, [pc, #228]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023b2:	2102      	movs	r1, #2
 80023b4:	6011      	str	r1, [r2, #0]
 80023b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	fa92 f1a2 	rbit	r1, r2
 80023c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023c8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023cc:	6011      	str	r1, [r2, #0]
  return result;
 80023ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023d2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	fab2 f282 	clz	r2, r2
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	f002 021f 	and.w	r2, r2, #31
 80023e8:	2101      	movs	r1, #1
 80023ea:	fa01 f202 	lsl.w	r2, r1, r2
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d184      	bne.n	80022fe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	4a22      	ldr	r2, [pc, #136]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 8002402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002406:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 8242 	beq.w	800289e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_RCC_OscConfig+0xc58>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b08      	cmp	r3, #8
 8002424:	f000 8213 	beq.w	800284e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b02      	cmp	r3, #2
 8002436:	f040 8162 	bne.w	80026fe <HAL_RCC_OscConfig+0xeca>
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002442:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800245e:	601a      	str	r2, [r3, #0]
  return result;
 8002460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002464:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002468:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002474:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	461a      	mov	r2, r3
 800247c:	2300      	movs	r3, #0
 800247e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7fe fc42 	bl	8000d08 <HAL_GetTick>
 8002484:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002488:	e00c      	b.n	80024a4 <HAL_RCC_OscConfig+0xc70>
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe fc3a 	bl	8000d08 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e1fd      	b.n	80028a0 <HAL_RCC_OscConfig+0x106c>
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	fa93 f2a3 	rbit	r2, r3
 80024c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024c8:	601a      	str	r2, [r3, #0]
  return result;
 80024ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d102      	bne.n	80024ee <HAL_RCC_OscConfig+0xcba>
 80024e8:	4bb0      	ldr	r3, [pc, #704]	; (80027ac <HAL_RCC_OscConfig+0xf78>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	e027      	b.n	800253e <HAL_RCC_OscConfig+0xd0a>
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80024f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	fa93 f2a3 	rbit	r2, r3
 800250a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002518:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800251c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002526:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	fa93 f2a3 	rbit	r2, r3
 8002530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002534:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	4b9c      	ldr	r3, [pc, #624]	; (80027ac <HAL_RCC_OscConfig+0xf78>)
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002542:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002546:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800254a:	6011      	str	r1, [r2, #0]
 800254c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002550:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	fa92 f1a2 	rbit	r1, r2
 800255a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800255e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002562:	6011      	str	r1, [r2, #0]
  return result;
 8002564:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002568:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	fab2 f282 	clz	r2, r2
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	f042 0220 	orr.w	r2, r2, #32
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	f002 021f 	and.w	r2, r2, #31
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f202 	lsl.w	r2, r1, r2
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d182      	bne.n	8002490 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258a:	4b88      	ldr	r3, [pc, #544]	; (80027ac <HAL_RCC_OscConfig+0xf78>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	430b      	orrs	r3, r1
 80025ac:	497f      	ldr	r1, [pc, #508]	; (80027ac <HAL_RCC_OscConfig+0xf78>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
 80025b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	fa93 f2a3 	rbit	r2, r3
 80025ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025d6:	601a      	str	r2, [r3, #0]
  return result;
 80025d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025dc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025e0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	461a      	mov	r2, r3
 80025f4:	2301      	movs	r3, #1
 80025f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7fe fb86 	bl	8000d08 <HAL_GetTick>
 80025fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002600:	e009      	b.n	8002616 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe fb81 	bl	8000d08 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e144      	b.n	80028a0 <HAL_RCC_OscConfig+0x106c>
 8002616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800261e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002628:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	fa93 f2a3 	rbit	r2, r3
 8002632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002636:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800263a:	601a      	str	r2, [r3, #0]
  return result;
 800263c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002640:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002644:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d102      	bne.n	8002660 <HAL_RCC_OscConfig+0xe2c>
 800265a:	4b54      	ldr	r3, [pc, #336]	; (80027ac <HAL_RCC_OscConfig+0xf78>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	e027      	b.n	80026b0 <HAL_RCC_OscConfig+0xe7c>
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002668:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800266c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002672:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	fa93 f2a3 	rbit	r2, r3
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800268e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	fa93 f2a3 	rbit	r2, r3
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <HAL_RCC_OscConfig+0xf78>)
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026bc:	6011      	str	r1, [r2, #0]
 80026be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026c2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	fa92 f1a2 	rbit	r1, r2
 80026cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026d0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026d4:	6011      	str	r1, [r2, #0]
  return result;
 80026d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026da:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	fab2 f282 	clz	r2, r2
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f042 0220 	orr.w	r2, r2, #32
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	f002 021f 	and.w	r2, r2, #31
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d082      	beq.n	8002602 <HAL_RCC_OscConfig+0xdce>
 80026fc:	e0cf      	b.n	800289e <HAL_RCC_OscConfig+0x106a>
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002706:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800270a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	fa93 f2a3 	rbit	r2, r3
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002722:	601a      	str	r2, [r3, #0]
  return result;
 8002724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002728:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800272c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002738:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	461a      	mov	r2, r3
 8002740:	2300      	movs	r3, #0
 8002742:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe fae0 	bl	8000d08 <HAL_GetTick>
 8002748:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274c:	e009      	b.n	8002762 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274e:	f7fe fadb 	bl	8000d08 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e09e      	b.n	80028a0 <HAL_RCC_OscConfig+0x106c>
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800276a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800276e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002774:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	fa93 f2a3 	rbit	r2, r3
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002786:	601a      	str	r2, [r3, #0]
  return result;
 8002788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002790:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d104      	bne.n	80027b0 <HAL_RCC_OscConfig+0xf7c>
 80027a6:	4b01      	ldr	r3, [pc, #4]	; (80027ac <HAL_RCC_OscConfig+0xf78>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	e029      	b.n	8002800 <HAL_RCC_OscConfig+0xfcc>
 80027ac:	40021000 	.word	0x40021000
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	fa93 f2a3 	rbit	r2, r3
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	fa93 f2a3 	rbit	r2, r3
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <HAL_RCC_OscConfig+0x1078>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002804:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002808:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800280c:	6011      	str	r1, [r2, #0]
 800280e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002812:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	fa92 f1a2 	rbit	r1, r2
 800281c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002820:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002824:	6011      	str	r1, [r2, #0]
  return result;
 8002826:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800282a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f042 0220 	orr.w	r2, r2, #32
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f002 021f 	and.w	r2, r2, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d180      	bne.n	800274e <HAL_RCC_OscConfig+0xf1a>
 800284c:	e027      	b.n	800289e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e01e      	b.n	80028a0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_RCC_OscConfig+0x1078>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800286a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800286e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	429a      	cmp	r2, r3
 8002880:	d10b      	bne.n	800289a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002882:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002886:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002896:	429a      	cmp	r2, r3
 8002898:	d001      	beq.n	800289e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000

080028b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b09e      	sub	sp, #120	; 0x78
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e162      	b.n	8002b8e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c8:	4b90      	ldr	r3, [pc, #576]	; (8002b0c <HAL_RCC_ClockConfig+0x25c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d910      	bls.n	80028f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b8d      	ldr	r3, [pc, #564]	; (8002b0c <HAL_RCC_ClockConfig+0x25c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 0207 	bic.w	r2, r3, #7
 80028de:	498b      	ldr	r1, [pc, #556]	; (8002b0c <HAL_RCC_ClockConfig+0x25c>)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b89      	ldr	r3, [pc, #548]	; (8002b0c <HAL_RCC_ClockConfig+0x25c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e14a      	b.n	8002b8e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002904:	4b82      	ldr	r3, [pc, #520]	; (8002b10 <HAL_RCC_ClockConfig+0x260>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	497f      	ldr	r1, [pc, #508]	; (8002b10 <HAL_RCC_ClockConfig+0x260>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 80dc 	beq.w	8002adc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d13c      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xf6>
 800292c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002930:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800293a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293c:	fab3 f383 	clz	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d102      	bne.n	8002956 <HAL_RCC_ClockConfig+0xa6>
 8002950:	4b6f      	ldr	r3, [pc, #444]	; (8002b10 <HAL_RCC_ClockConfig+0x260>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	e00f      	b.n	8002976 <HAL_RCC_ClockConfig+0xc6>
 8002956:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800295a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	667b      	str	r3, [r7, #100]	; 0x64
 8002964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002968:	663b      	str	r3, [r7, #96]	; 0x60
 800296a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002972:	4b67      	ldr	r3, [pc, #412]	; (8002b10 <HAL_RCC_ClockConfig+0x260>)
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800297a:	65ba      	str	r2, [r7, #88]	; 0x58
 800297c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800297e:	fa92 f2a2 	rbit	r2, r2
 8002982:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002984:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002986:	fab2 f282 	clz	r2, r2
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f042 0220 	orr.w	r2, r2, #32
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f002 021f 	and.w	r2, r2, #31
 8002996:	2101      	movs	r1, #1
 8002998:	fa01 f202 	lsl.w	r2, r1, r2
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d17b      	bne.n	8002a9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0f3      	b.n	8002b8e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d13c      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x178>
 80029ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d102      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x128>
 80029d2:	4b4f      	ldr	r3, [pc, #316]	; (8002b10 <HAL_RCC_ClockConfig+0x260>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	e00f      	b.n	80029f8 <HAL_RCC_ClockConfig+0x148>
 80029d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	647b      	str	r3, [r7, #68]	; 0x44
 80029e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ea:	643b      	str	r3, [r7, #64]	; 0x40
 80029ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f4:	4b46      	ldr	r3, [pc, #280]	; (8002b10 <HAL_RCC_ClockConfig+0x260>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80029fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a00:	fa92 f2a2 	rbit	r2, r2
 8002a04:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a08:	fab2 f282 	clz	r2, r2
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	f042 0220 	orr.w	r2, r2, #32
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	f002 021f 	and.w	r2, r2, #31
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d13a      	bne.n	8002a9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0b2      	b.n	8002b8e <HAL_RCC_ClockConfig+0x2de>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d102      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x1a0>
 8002a4a:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <HAL_RCC_ClockConfig+0x260>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	e00d      	b.n	8002a6c <HAL_RCC_ClockConfig+0x1bc>
 8002a50:	2302      	movs	r3, #2
 8002a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	623b      	str	r3, [r7, #32]
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <HAL_RCC_ClockConfig+0x260>)
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	61ba      	str	r2, [r7, #24]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	fa92 f2a2 	rbit	r2, r2
 8002a76:	617a      	str	r2, [r7, #20]
  return result;
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	fab2 f282 	clz	r2, r2
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	f042 0220 	orr.w	r2, r2, #32
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	f002 021f 	and.w	r2, r2, #31
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e079      	b.n	8002b8e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9a:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <HAL_RCC_ClockConfig+0x260>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	491a      	ldr	r1, [pc, #104]	; (8002b10 <HAL_RCC_ClockConfig+0x260>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aac:	f7fe f92c 	bl	8000d08 <HAL_GetTick>
 8002ab0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab4:	f7fe f928 	bl	8000d08 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e061      	b.n	8002b8e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_RCC_ClockConfig+0x260>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1eb      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_ClockConfig+0x25c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d214      	bcs.n	8002b14 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_RCC_ClockConfig+0x25c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 0207 	bic.w	r2, r3, #7
 8002af2:	4906      	ldr	r1, [pc, #24]	; (8002b0c <HAL_RCC_ClockConfig+0x25c>)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <HAL_RCC_ClockConfig+0x25c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e040      	b.n	8002b8e <HAL_RCC_ClockConfig+0x2de>
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b20:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <HAL_RCC_ClockConfig+0x2e8>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	491a      	ldr	r1, [pc, #104]	; (8002b98 <HAL_RCC_ClockConfig+0x2e8>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <HAL_RCC_ClockConfig+0x2e8>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4912      	ldr	r1, [pc, #72]	; (8002b98 <HAL_RCC_ClockConfig+0x2e8>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b52:	f000 f829 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b56:	4601      	mov	r1, r0
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <HAL_RCC_ClockConfig+0x2e8>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b60:	22f0      	movs	r2, #240	; 0xf0
 8002b62:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	fa92 f2a2 	rbit	r2, r2
 8002b6a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	fab2 f282 	clz	r2, r2
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	40d3      	lsrs	r3, r2
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <HAL_RCC_ClockConfig+0x2ec>)
 8002b78:	5cd3      	ldrb	r3, [r2, r3]
 8002b7a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b7e:	4a08      	ldr	r2, [pc, #32]	; (8002ba0 <HAL_RCC_ClockConfig+0x2f0>)
 8002b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_RCC_ClockConfig+0x2f4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe f87a 	bl	8000c80 <HAL_InitTick>
  
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3778      	adds	r7, #120	; 0x78
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	0800524c 	.word	0x0800524c
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	20000004 	.word	0x20000004

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b08b      	sub	sp, #44	; 0x2c
 8002bac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002bc2:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d002      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x30>
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d003      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0x36>
 8002bd6:	e03c      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bd8:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bda:	623b      	str	r3, [r7, #32]
      break;
 8002bdc:	e03c      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002be4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002be8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	fa92 f2a2 	rbit	r2, r2
 8002bf0:	607a      	str	r2, [r7, #4]
  return result;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	fab2 f282 	clz	r2, r2
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	40d3      	lsrs	r3, r2
 8002bfc:	4a1c      	ldr	r2, [pc, #112]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bfe:	5cd3      	ldrb	r3, [r2, r3]
 8002c00:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	fa92 f2a2 	rbit	r2, r2
 8002c14:	60fa      	str	r2, [r7, #12]
  return result;
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	fab2 f282 	clz	r2, r2
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	40d3      	lsrs	r3, r2
 8002c20:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c22:	5cd3      	ldrb	r3, [r2, r3]
 8002c24:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c30:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c40:	e004      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	623b      	str	r3, [r7, #32]
      break;
 8002c50:	e002      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c54:	623b      	str	r3, [r7, #32]
      break;
 8002c56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c58:	6a3b      	ldr	r3, [r7, #32]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	372c      	adds	r7, #44	; 0x2c
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	007a1200 	.word	0x007a1200
 8002c70:	08005264 	.word	0x08005264
 8002c74:	08005274 	.word	0x08005274
 8002c78:	003d0900 	.word	0x003d0900

08002c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	20000000 	.word	0x20000000

08002c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c9a:	f7ff ffef 	bl	8002c7c <HAL_RCC_GetHCLKFreq>
 8002c9e:	4601      	mov	r1, r0
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ca8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	fa92 f2a2 	rbit	r2, r2
 8002cb4:	603a      	str	r2, [r7, #0]
  return result;
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	fab2 f282 	clz	r2, r2
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	40d3      	lsrs	r3, r2
 8002cc0:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002cc2:	5cd3      	ldrb	r3, [r2, r3]
 8002cc4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	0800525c 	.word	0x0800525c

08002cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cde:	f7ff ffcd 	bl	8002c7c <HAL_RCC_GetHCLKFreq>
 8002ce2:	4601      	mov	r1, r0
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002cec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cf0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	fa92 f2a2 	rbit	r2, r2
 8002cf8:	603a      	str	r2, [r7, #0]
  return result;
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	fab2 f282 	clz	r2, r2
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	40d3      	lsrs	r3, r2
 8002d04:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000
 8002d18:	0800525c 	.word	0x0800525c

08002d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b092      	sub	sp, #72	; 0x48
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80d4 	beq.w	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d40:	4b4e      	ldr	r3, [pc, #312]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10e      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4c:	4b4b      	ldr	r3, [pc, #300]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	4a4a      	ldr	r2, [pc, #296]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d56:	61d3      	str	r3, [r2, #28]
 8002d58:	4b48      	ldr	r3, [pc, #288]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d64:	2301      	movs	r3, #1
 8002d66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b45      	ldr	r3, [pc, #276]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d118      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d76:	4b42      	ldr	r3, [pc, #264]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a41      	ldr	r2, [pc, #260]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d82:	f7fd ffc1 	bl	8000d08 <HAL_GetTick>
 8002d86:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	e008      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8a:	f7fd ffbd 	bl	8000d08 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b64      	cmp	r3, #100	; 0x64
 8002d96:	d901      	bls.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e13c      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002da8:	4b34      	ldr	r3, [pc, #208]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8084 	beq.w	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d07c      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dc8:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	461a      	mov	r2, r3
 8002df2:	2301      	movs	r3, #1
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	461a      	mov	r2, r3
 8002e16:	2300      	movs	r3, #0
 8002e18:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e1a:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d04b      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fd ff6d 	bl	8000d08 <HAL_GetTick>
 8002e2e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fd ff69 	bl	8000d08 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e0e6      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
 8002e54:	2302      	movs	r3, #2
 8002e56:	623b      	str	r3, [r7, #32]
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	61fb      	str	r3, [r7, #28]
  return result;
 8002e60:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d108      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e76:	4b01      	ldr	r3, [pc, #4]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	e00d      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40007000 	.word	0x40007000
 8002e84:	10908100 	.word	0x10908100
 8002e88:	2302      	movs	r3, #2
 8002e8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	4b62      	ldr	r3, [pc, #392]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2202      	movs	r2, #2
 8002e9a:	613a      	str	r2, [r7, #16]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	fa92 f2a2 	rbit	r2, r2
 8002ea2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	fab2 f282 	clz	r2, r2
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f002 021f 	and.w	r2, r2, #31
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0b7      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ec2:	4b57      	ldr	r3, [pc, #348]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4954      	ldr	r1, [pc, #336]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ed4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d105      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002edc:	4b50      	ldr	r3, [pc, #320]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	4a4f      	ldr	r2, [pc, #316]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ef4:	4b4a      	ldr	r3, [pc, #296]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	f023 0203 	bic.w	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4947      	ldr	r1, [pc, #284]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f12:	4b43      	ldr	r3, [pc, #268]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f023 0210 	bic.w	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	4940      	ldr	r1, [pc, #256]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f30:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	f023 0220 	bic.w	r2, r3, #32
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	4938      	ldr	r1, [pc, #224]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f4e:	4b34      	ldr	r3, [pc, #208]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	4931      	ldr	r1, [pc, #196]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f6c:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4929      	ldr	r1, [pc, #164]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002f8a:	4b25      	ldr	r3, [pc, #148]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	4922      	ldr	r1, [pc, #136]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	491a      	ldr	r1, [pc, #104]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002fc6:	4b16      	ldr	r3, [pc, #88]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	4913      	ldr	r1, [pc, #76]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	490b      	ldr	r1, [pc, #44]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003002:	4b07      	ldr	r3, [pc, #28]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	4904      	ldr	r1, [pc, #16]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003010:	4313      	orrs	r3, r2
 8003012:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3748      	adds	r7, #72	; 0x48
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000

08003024 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e09d      	b.n	8003172 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	2b00      	cmp	r3, #0
 800303c:	d108      	bne.n	8003050 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003046:	d009      	beq.n	800305c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	61da      	str	r2, [r3, #28]
 800304e:	e005      	b.n	800305c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fd fbb0 	bl	80007dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003092:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800309c:	d902      	bls.n	80030a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	e002      	b.n	80030aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030b2:	d007      	beq.n	80030c4 <HAL_SPI_Init+0xa0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030bc:	d002      	beq.n	80030c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003106:	ea42 0103 	orr.w	r1, r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	0c1b      	lsrs	r3, r3, #16
 8003120:	f003 0204 	and.w	r2, r3, #4
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003140:	ea42 0103 	orr.w	r1, r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003160:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10f      	bne.n	80031c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	099b      	lsrs	r3, r3, #6
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d004      	beq.n	80031c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
    return;
 80031be:	e0d7      	b.n	8003370 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	085b      	lsrs	r3, r3, #1
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_SPI_IRQHandler+0x66>
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	09db      	lsrs	r3, r3, #7
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
    return;
 80031e0:	e0c6      	b.n	8003370 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10c      	bne.n	8003208 <HAL_SPI_IRQHandler+0x8c>
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80b4 	beq.w	8003370 <HAL_SPI_IRQHandler+0x1f4>
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80ad 	beq.w	8003370 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	099b      	lsrs	r3, r3, #6
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d023      	beq.n	800326a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b03      	cmp	r3, #3
 800322c:	d011      	beq.n	8003252 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003232:	f043 0204 	orr.w	r2, r3, #4
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	e00b      	b.n	800326a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	693b      	ldr	r3, [r7, #16]
        return;
 8003268:	e082      	b.n	8003370 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d014      	beq.n	80032a0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327a:	f043 0201 	orr.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00c      	beq.n	80032c6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b0:	f043 0208 	orr.w	r2, r3, #8
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d04f      	beq.n	800336e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032dc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d104      	bne.n	80032fa <HAL_SPI_IRQHandler+0x17e>
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d034      	beq.n	8003364 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0203 	bic.w	r2, r2, #3
 8003308:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	2b00      	cmp	r3, #0
 8003310:	d011      	beq.n	8003336 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	4a18      	ldr	r2, [pc, #96]	; (8003378 <HAL_SPI_IRQHandler+0x1fc>)
 8003318:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd feb3 	bl	800108a <HAL_DMA_Abort_IT>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	2b00      	cmp	r3, #0
 800333c:	d016      	beq.n	800336c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003342:	4a0d      	ldr	r2, [pc, #52]	; (8003378 <HAL_SPI_IRQHandler+0x1fc>)
 8003344:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334a:	4618      	mov	r0, r3
 800334c:	f7fd fe9d 	bl	800108a <HAL_DMA_Abort_IT>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003362:	e003      	b.n	800336c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f809 	bl	800337c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800336a:	e000      	b.n	800336e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800336c:	bf00      	nop
    return;
 800336e:	bf00      	nop
  }
}
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	08003391 	.word	0x08003391

0800337c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7ff ffe5 	bl	800337c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e040      	b.n	800344e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d106      	bne.n	80033e2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7fd fa73 	bl	80008c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2224      	movs	r2, #36	; 0x24
 80033e6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fbbd 	bl	8003b78 <UART_SetConfig>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e022      	b.n	800344e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fce7 	bl	8003de4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003424:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003434:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0201 	orr.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fd6e 	bl	8003f28 <UART_CheckIdleState>
 800344c:	4603      	mov	r3, r0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b08a      	sub	sp, #40	; 0x28
 800345a:	af02      	add	r7, sp, #8
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800346a:	2b20      	cmp	r3, #32
 800346c:	d178      	bne.n	8003560 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_UART_Transmit+0x24>
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e071      	b.n	8003562 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2221      	movs	r2, #33	; 0x21
 800348a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800348c:	f7fd fc3c 	bl	8000d08 <HAL_GetTick>
 8003490:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	88fa      	ldrh	r2, [r7, #6]
 8003496:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	88fa      	ldrh	r2, [r7, #6]
 800349e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034aa:	d108      	bne.n	80034be <HAL_UART_Transmit+0x68>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d104      	bne.n	80034be <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	e003      	b.n	80034c6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034c6:	e030      	b.n	800352a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2200      	movs	r2, #0
 80034d0:	2180      	movs	r1, #128	; 0x80
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fdd0 	bl	8004078 <UART_WaitOnFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d004      	beq.n	80034e8 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e03c      	b.n	8003562 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10b      	bne.n	8003506 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	881a      	ldrh	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034fa:	b292      	uxth	r2, r2
 80034fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	3302      	adds	r3, #2
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	e008      	b.n	8003518 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	781a      	ldrb	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	b292      	uxth	r2, r2
 8003510:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1c8      	bne.n	80034c8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2200      	movs	r2, #0
 800353e:	2140      	movs	r1, #64	; 0x40
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 fd99 	bl	8004078 <UART_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d004      	beq.n	8003556 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e005      	b.n	8003562 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	e000      	b.n	8003562 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003560:	2302      	movs	r3, #2
  }
}
 8003562:	4618      	mov	r0, r3
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b0ba      	sub	sp, #232	; 0xe8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003592:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003596:	f640 030f 	movw	r3, #2063	; 0x80f
 800359a:	4013      	ands	r3, r2
 800359c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80035a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d115      	bne.n	80035d4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00f      	beq.n	80035d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 82ab 	beq.w	8003b20 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
      }
      return;
 80035d2:	e2a5      	b.n	8003b20 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8117 	beq.w	800380c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035ee:	4b85      	ldr	r3, [pc, #532]	; (8003804 <HAL_UART_IRQHandler+0x298>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 810a 	beq.w	800380c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d011      	beq.n	8003628 <HAL_UART_IRQHandler+0xbc>
 8003604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00b      	beq.n	8003628 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2201      	movs	r2, #1
 8003616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361e:	f043 0201 	orr.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d011      	beq.n	8003658 <HAL_UART_IRQHandler+0xec>
 8003634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2202      	movs	r2, #2
 8003646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364e:	f043 0204 	orr.w	r2, r3, #4
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d011      	beq.n	8003688 <HAL_UART_IRQHandler+0x11c>
 8003664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00b      	beq.n	8003688 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2204      	movs	r2, #4
 8003676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367e:	f043 0202 	orr.w	r2, r3, #2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d017      	beq.n	80036c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2208      	movs	r2, #8
 80036b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ba:	f043 0208 	orr.w	r2, r3, #8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d012      	beq.n	80036f6 <HAL_UART_IRQHandler+0x18a>
 80036d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00c      	beq.n	80036f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ec:	f043 0220 	orr.w	r2, r3, #32
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 8211 	beq.w	8003b24 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00d      	beq.n	800372a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800370e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003730:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d005      	beq.n	800374e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003746:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800374a:	2b00      	cmp	r3, #0
 800374c:	d04f      	beq.n	80037ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fcf9 	bl	8004146 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d141      	bne.n	80037e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3308      	adds	r3, #8
 8003768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800377c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3308      	adds	r3, #8
 800378a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800378e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003792:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800379a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1d9      	bne.n	8003762 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d013      	beq.n	80037de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ba:	4a13      	ldr	r2, [pc, #76]	; (8003808 <HAL_UART_IRQHandler+0x29c>)
 80037bc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fd fc61 	bl	800108a <HAL_DMA_Abort_IT>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d017      	beq.n	80037fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037d8:	4610      	mov	r0, r2
 80037da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	e00f      	b.n	80037fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f9b4 	bl	8003b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	e00b      	b.n	80037fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f9b0 	bl	8003b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ec:	e007      	b.n	80037fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f9ac 	bl	8003b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80037fc:	e192      	b.n	8003b24 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fe:	bf00      	nop
    return;
 8003800:	e190      	b.n	8003b24 <HAL_UART_IRQHandler+0x5b8>
 8003802:	bf00      	nop
 8003804:	04000120 	.word	0x04000120
 8003808:	0800420f 	.word	0x0800420f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003810:	2b01      	cmp	r3, #1
 8003812:	f040 814b 	bne.w	8003aac <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8144 	beq.w	8003aac <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 813d 	beq.w	8003aac <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2210      	movs	r2, #16
 8003838:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	f040 80b5 	bne.w	80039b4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003856:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8164 	beq.w	8003b28 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800386a:	429a      	cmp	r2, r3
 800386c:	f080 815c 	bcs.w	8003b28 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b20      	cmp	r3, #32
 8003882:	f000 8086 	beq.w	8003992 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800389a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800389e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1da      	bne.n	8003886 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3308      	adds	r3, #8
 80038d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3308      	adds	r3, #8
 80038f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e1      	bne.n	80038d0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3308      	adds	r3, #8
 8003912:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800391c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3308      	adds	r3, #8
 800392c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003930:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003932:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003936:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003938:	e841 2300 	strex	r3, r2, [r1]
 800393c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800393e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e3      	bne.n	800390c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395a:	e853 3f00 	ldrex	r3, [r3]
 800395e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003962:	f023 0310 	bic.w	r3, r3, #16
 8003966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003974:	65bb      	str	r3, [r7, #88]	; 0x58
 8003976:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003978:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800397a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800397c:	e841 2300 	strex	r3, r2, [r1]
 8003980:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e4      	bne.n	8003952 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398c:	4618      	mov	r0, r3
 800398e:	f7fd fb43 	bl	8001018 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	4619      	mov	r1, r3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f8d7 	bl	8003b60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039b2:	e0b9      	b.n	8003b28 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80ab 	beq.w	8003b2c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80039d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80a6 	beq.w	8003b2c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a02:	647b      	str	r3, [r7, #68]	; 0x44
 8003a04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e4      	bne.n	80039e0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	623b      	str	r3, [r7, #32]
   return(result);
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3308      	adds	r3, #8
 8003a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a3a:	633a      	str	r2, [r7, #48]	; 0x30
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e3      	bne.n	8003a16 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0310 	bic.w	r3, r3, #16
 8003a76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	69b9      	ldr	r1, [r7, #24]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	617b      	str	r3, [r7, #20]
   return(result);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e4      	bne.n	8003a62 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f85b 	bl	8003b60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003aaa:	e03f      	b.n	8003b2c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x56a>
 8003ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003acc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fbdd 	bl	800428e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ad4:	e02d      	b.n	8003b32 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00e      	beq.n	8003b00 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d01c      	beq.n	8003b30 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	4798      	blx	r3
    }
    return;
 8003afe:	e017      	b.n	8003b30 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d012      	beq.n	8003b32 <HAL_UART_IRQHandler+0x5c6>
 8003b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00c      	beq.n	8003b32 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fb8e 	bl	800423a <UART_EndTransmit_IT>
    return;
 8003b1e:	e008      	b.n	8003b32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b20:	bf00      	nop
 8003b22:	e006      	b.n	8003b32 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003b24:	bf00      	nop
 8003b26:	e004      	b.n	8003b32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b28:	bf00      	nop
 8003b2a:	e002      	b.n	8003b32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b2c:	bf00      	nop
 8003b2e:	e000      	b.n	8003b32 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003b30:	bf00      	nop
  }

}
 8003b32:	37e8      	adds	r7, #232	; 0xe8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4b8a      	ldr	r3, [pc, #552]	; (8003dcc <UART_SetConfig+0x254>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	6979      	ldr	r1, [r7, #20]
 8003bac:	430b      	orrs	r3, r1
 8003bae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a78      	ldr	r2, [pc, #480]	; (8003dd0 <UART_SetConfig+0x258>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d120      	bne.n	8003c36 <UART_SetConfig+0xbe>
 8003bf4:	4b77      	ldr	r3, [pc, #476]	; (8003dd4 <UART_SetConfig+0x25c>)
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d817      	bhi.n	8003c30 <UART_SetConfig+0xb8>
 8003c00:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <UART_SetConfig+0x90>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c25 	.word	0x08003c25
 8003c10:	08003c2b 	.word	0x08003c2b
 8003c14:	08003c1f 	.word	0x08003c1f
 8003c18:	2300      	movs	r3, #0
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e01d      	b.n	8003c5a <UART_SetConfig+0xe2>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	77fb      	strb	r3, [r7, #31]
 8003c22:	e01a      	b.n	8003c5a <UART_SetConfig+0xe2>
 8003c24:	2304      	movs	r3, #4
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e017      	b.n	8003c5a <UART_SetConfig+0xe2>
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e014      	b.n	8003c5a <UART_SetConfig+0xe2>
 8003c30:	2310      	movs	r3, #16
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e011      	b.n	8003c5a <UART_SetConfig+0xe2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a67      	ldr	r2, [pc, #412]	; (8003dd8 <UART_SetConfig+0x260>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d102      	bne.n	8003c46 <UART_SetConfig+0xce>
 8003c40:	2300      	movs	r3, #0
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e009      	b.n	8003c5a <UART_SetConfig+0xe2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a64      	ldr	r2, [pc, #400]	; (8003ddc <UART_SetConfig+0x264>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d102      	bne.n	8003c56 <UART_SetConfig+0xde>
 8003c50:	2300      	movs	r3, #0
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e001      	b.n	8003c5a <UART_SetConfig+0xe2>
 8003c56:	2310      	movs	r3, #16
 8003c58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c62:	d15a      	bne.n	8003d1a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003c64:	7ffb      	ldrb	r3, [r7, #31]
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d827      	bhi.n	8003cba <UART_SetConfig+0x142>
 8003c6a:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <UART_SetConfig+0xf8>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003c95 	.word	0x08003c95
 8003c74:	08003c9d 	.word	0x08003c9d
 8003c78:	08003ca5 	.word	0x08003ca5
 8003c7c:	08003cbb 	.word	0x08003cbb
 8003c80:	08003cab 	.word	0x08003cab
 8003c84:	08003cbb 	.word	0x08003cbb
 8003c88:	08003cbb 	.word	0x08003cbb
 8003c8c:	08003cbb 	.word	0x08003cbb
 8003c90:	08003cb3 	.word	0x08003cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c94:	f7fe fffe 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
 8003c98:	61b8      	str	r0, [r7, #24]
        break;
 8003c9a:	e013      	b.n	8003cc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c9c:	f7ff f81c 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 8003ca0:	61b8      	str	r0, [r7, #24]
        break;
 8003ca2:	e00f      	b.n	8003cc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ca4:	4b4e      	ldr	r3, [pc, #312]	; (8003de0 <UART_SetConfig+0x268>)
 8003ca6:	61bb      	str	r3, [r7, #24]
        break;
 8003ca8:	e00c      	b.n	8003cc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003caa:	f7fe ff7d 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8003cae:	61b8      	str	r0, [r7, #24]
        break;
 8003cb0:	e008      	b.n	8003cc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cb6:	61bb      	str	r3, [r7, #24]
        break;
 8003cb8:	e004      	b.n	8003cc4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	77bb      	strb	r3, [r7, #30]
        break;
 8003cc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d074      	beq.n	8003db4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	005a      	lsls	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	441a      	add	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b0f      	cmp	r3, #15
 8003ce4:	d916      	bls.n	8003d14 <UART_SetConfig+0x19c>
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cec:	d212      	bcs.n	8003d14 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f023 030f 	bic.w	r3, r3, #15
 8003cf6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	89fb      	ldrh	r3, [r7, #14]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	89fa      	ldrh	r2, [r7, #14]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	e04f      	b.n	8003db4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	77bb      	strb	r3, [r7, #30]
 8003d18:	e04c      	b.n	8003db4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d1a:	7ffb      	ldrb	r3, [r7, #31]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d828      	bhi.n	8003d72 <UART_SetConfig+0x1fa>
 8003d20:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <UART_SetConfig+0x1b0>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d55 	.word	0x08003d55
 8003d30:	08003d5d 	.word	0x08003d5d
 8003d34:	08003d73 	.word	0x08003d73
 8003d38:	08003d63 	.word	0x08003d63
 8003d3c:	08003d73 	.word	0x08003d73
 8003d40:	08003d73 	.word	0x08003d73
 8003d44:	08003d73 	.word	0x08003d73
 8003d48:	08003d6b 	.word	0x08003d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f7fe ffa2 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
 8003d50:	61b8      	str	r0, [r7, #24]
        break;
 8003d52:	e013      	b.n	8003d7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d54:	f7fe ffc0 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 8003d58:	61b8      	str	r0, [r7, #24]
        break;
 8003d5a:	e00f      	b.n	8003d7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d5c:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <UART_SetConfig+0x268>)
 8003d5e:	61bb      	str	r3, [r7, #24]
        break;
 8003d60:	e00c      	b.n	8003d7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d62:	f7fe ff21 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8003d66:	61b8      	str	r0, [r7, #24]
        break;
 8003d68:	e008      	b.n	8003d7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6e:	61bb      	str	r3, [r7, #24]
        break;
 8003d70:	e004      	b.n	8003d7c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	77bb      	strb	r3, [r7, #30]
        break;
 8003d7a:	bf00      	nop
    }

    if (pclk != 0U)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d018      	beq.n	8003db4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	085a      	lsrs	r2, r3, #1
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	441a      	add	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b0f      	cmp	r3, #15
 8003d9a:	d909      	bls.n	8003db0 <UART_SetConfig+0x238>
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da2:	d205      	bcs.n	8003db0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	e001      	b.n	8003db4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003dc0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	efff69f3 	.word	0xefff69f3
 8003dd0:	40013800 	.word	0x40013800
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40004400 	.word	0x40004400
 8003ddc:	40004800 	.word	0x40004800
 8003de0:	007a1200 	.word	0x007a1200

08003de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01a      	beq.n	8003efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee2:	d10a      	bne.n	8003efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b098      	sub	sp, #96	; 0x60
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f38:	f7fc fee6 	bl	8000d08 <HAL_GetTick>
 8003f3c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d12e      	bne.n	8003faa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f54:	2200      	movs	r2, #0
 8003f56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f88c 	bl	8004078 <UART_WaitOnFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d021      	beq.n	8003faa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f84:	647b      	str	r3, [r7, #68]	; 0x44
 8003f86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e6      	bne.n	8003f66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e062      	b.n	8004070 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d149      	bne.n	800404c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f856 	bl	8004078 <UART_WaitOnFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d03c      	beq.n	800404c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	623b      	str	r3, [r7, #32]
   return(result);
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e6      	bne.n	8003fd2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3308      	adds	r3, #8
 800400a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	60fb      	str	r3, [r7, #12]
   return(result);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	64bb      	str	r3, [r7, #72]	; 0x48
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3308      	adds	r3, #8
 8004022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004024:	61fa      	str	r2, [r7, #28]
 8004026:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	69b9      	ldr	r1, [r7, #24]
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	617b      	str	r3, [r7, #20]
   return(result);
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e5      	bne.n	8004004 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e011      	b.n	8004070 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3758      	adds	r7, #88	; 0x58
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	4613      	mov	r3, r2
 8004086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004088:	e049      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d045      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004092:	f7fc fe39 	bl	8000d08 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d302      	bcc.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e048      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d031      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d110      	bne.n	80040ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2208      	movs	r2, #8
 80040ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f838 	bl	8004146 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2208      	movs	r2, #8
 80040da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e029      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f8:	d111      	bne.n	800411e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f81e 	bl	8004146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e00f      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4013      	ands	r3, r2
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	429a      	cmp	r2, r3
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	429a      	cmp	r2, r3
 800413a:	d0a6      	beq.n	800408a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004146:	b480      	push	{r7}
 8004148:	b095      	sub	sp, #84	; 0x54
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416c:	643b      	str	r3, [r7, #64]	; 0x40
 800416e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004172:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e6      	bne.n	800414e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3308      	adds	r3, #8
 8004186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f023 0301 	bic.w	r3, r3, #1
 8004196:	64bb      	str	r3, [r7, #72]	; 0x48
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3308      	adds	r3, #8
 800419e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e5      	bne.n	8004180 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d118      	bne.n	80041ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f023 0310 	bic.w	r3, r3, #16
 80041d0:	647b      	str	r3, [r7, #68]	; 0x44
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6979      	ldr	r1, [r7, #20]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	613b      	str	r3, [r7, #16]
   return(result);
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e6      	bne.n	80041bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004202:	bf00      	nop
 8004204:	3754      	adds	r7, #84	; 0x54
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7ff fc8d 	bl	8003b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b088      	sub	sp, #32
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6979      	ldr	r1, [r7, #20]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	613b      	str	r3, [r7, #16]
   return(result);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e6      	bne.n	8004242 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff fc59 	bl	8003b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004286:	bf00      	nop
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <__errno>:
 80042a4:	4b01      	ldr	r3, [pc, #4]	; (80042ac <__errno+0x8>)
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	2000000c 	.word	0x2000000c

080042b0 <__libc_init_array>:
 80042b0:	b570      	push	{r4, r5, r6, lr}
 80042b2:	4d0d      	ldr	r5, [pc, #52]	; (80042e8 <__libc_init_array+0x38>)
 80042b4:	4c0d      	ldr	r4, [pc, #52]	; (80042ec <__libc_init_array+0x3c>)
 80042b6:	1b64      	subs	r4, r4, r5
 80042b8:	10a4      	asrs	r4, r4, #2
 80042ba:	2600      	movs	r6, #0
 80042bc:	42a6      	cmp	r6, r4
 80042be:	d109      	bne.n	80042d4 <__libc_init_array+0x24>
 80042c0:	4d0b      	ldr	r5, [pc, #44]	; (80042f0 <__libc_init_array+0x40>)
 80042c2:	4c0c      	ldr	r4, [pc, #48]	; (80042f4 <__libc_init_array+0x44>)
 80042c4:	f000 ffae 	bl	8005224 <_init>
 80042c8:	1b64      	subs	r4, r4, r5
 80042ca:	10a4      	asrs	r4, r4, #2
 80042cc:	2600      	movs	r6, #0
 80042ce:	42a6      	cmp	r6, r4
 80042d0:	d105      	bne.n	80042de <__libc_init_array+0x2e>
 80042d2:	bd70      	pop	{r4, r5, r6, pc}
 80042d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d8:	4798      	blx	r3
 80042da:	3601      	adds	r6, #1
 80042dc:	e7ee      	b.n	80042bc <__libc_init_array+0xc>
 80042de:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e2:	4798      	blx	r3
 80042e4:	3601      	adds	r6, #1
 80042e6:	e7f2      	b.n	80042ce <__libc_init_array+0x1e>
 80042e8:	0800531c 	.word	0x0800531c
 80042ec:	0800531c 	.word	0x0800531c
 80042f0:	0800531c 	.word	0x0800531c
 80042f4:	08005320 	.word	0x08005320

080042f8 <memset>:
 80042f8:	4402      	add	r2, r0
 80042fa:	4603      	mov	r3, r0
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d100      	bne.n	8004302 <memset+0xa>
 8004300:	4770      	bx	lr
 8004302:	f803 1b01 	strb.w	r1, [r3], #1
 8004306:	e7f9      	b.n	80042fc <memset+0x4>

08004308 <iprintf>:
 8004308:	b40f      	push	{r0, r1, r2, r3}
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <iprintf+0x2c>)
 800430c:	b513      	push	{r0, r1, r4, lr}
 800430e:	681c      	ldr	r4, [r3, #0]
 8004310:	b124      	cbz	r4, 800431c <iprintf+0x14>
 8004312:	69a3      	ldr	r3, [r4, #24]
 8004314:	b913      	cbnz	r3, 800431c <iprintf+0x14>
 8004316:	4620      	mov	r0, r4
 8004318:	f000 f866 	bl	80043e8 <__sinit>
 800431c:	ab05      	add	r3, sp, #20
 800431e:	9a04      	ldr	r2, [sp, #16]
 8004320:	68a1      	ldr	r1, [r4, #8]
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	4620      	mov	r0, r4
 8004326:	f000 f9bd 	bl	80046a4 <_vfiprintf_r>
 800432a:	b002      	add	sp, #8
 800432c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004330:	b004      	add	sp, #16
 8004332:	4770      	bx	lr
 8004334:	2000000c 	.word	0x2000000c

08004338 <std>:
 8004338:	2300      	movs	r3, #0
 800433a:	b510      	push	{r4, lr}
 800433c:	4604      	mov	r4, r0
 800433e:	e9c0 3300 	strd	r3, r3, [r0]
 8004342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004346:	6083      	str	r3, [r0, #8]
 8004348:	8181      	strh	r1, [r0, #12]
 800434a:	6643      	str	r3, [r0, #100]	; 0x64
 800434c:	81c2      	strh	r2, [r0, #14]
 800434e:	6183      	str	r3, [r0, #24]
 8004350:	4619      	mov	r1, r3
 8004352:	2208      	movs	r2, #8
 8004354:	305c      	adds	r0, #92	; 0x5c
 8004356:	f7ff ffcf 	bl	80042f8 <memset>
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <std+0x38>)
 800435c:	6263      	str	r3, [r4, #36]	; 0x24
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <std+0x3c>)
 8004360:	62a3      	str	r3, [r4, #40]	; 0x28
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <std+0x40>)
 8004364:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <std+0x44>)
 8004368:	6224      	str	r4, [r4, #32]
 800436a:	6323      	str	r3, [r4, #48]	; 0x30
 800436c:	bd10      	pop	{r4, pc}
 800436e:	bf00      	nop
 8004370:	08004c4d 	.word	0x08004c4d
 8004374:	08004c6f 	.word	0x08004c6f
 8004378:	08004ca7 	.word	0x08004ca7
 800437c:	08004ccb 	.word	0x08004ccb

08004380 <_cleanup_r>:
 8004380:	4901      	ldr	r1, [pc, #4]	; (8004388 <_cleanup_r+0x8>)
 8004382:	f000 b8af 	b.w	80044e4 <_fwalk_reent>
 8004386:	bf00      	nop
 8004388:	08004fa5 	.word	0x08004fa5

0800438c <__sfmoreglue>:
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	2268      	movs	r2, #104	; 0x68
 8004390:	1e4d      	subs	r5, r1, #1
 8004392:	4355      	muls	r5, r2
 8004394:	460e      	mov	r6, r1
 8004396:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800439a:	f000 f8e5 	bl	8004568 <_malloc_r>
 800439e:	4604      	mov	r4, r0
 80043a0:	b140      	cbz	r0, 80043b4 <__sfmoreglue+0x28>
 80043a2:	2100      	movs	r1, #0
 80043a4:	e9c0 1600 	strd	r1, r6, [r0]
 80043a8:	300c      	adds	r0, #12
 80043aa:	60a0      	str	r0, [r4, #8]
 80043ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043b0:	f7ff ffa2 	bl	80042f8 <memset>
 80043b4:	4620      	mov	r0, r4
 80043b6:	bd70      	pop	{r4, r5, r6, pc}

080043b8 <__sfp_lock_acquire>:
 80043b8:	4801      	ldr	r0, [pc, #4]	; (80043c0 <__sfp_lock_acquire+0x8>)
 80043ba:	f000 b8b3 	b.w	8004524 <__retarget_lock_acquire_recursive>
 80043be:	bf00      	nop
 80043c0:	200002a1 	.word	0x200002a1

080043c4 <__sfp_lock_release>:
 80043c4:	4801      	ldr	r0, [pc, #4]	; (80043cc <__sfp_lock_release+0x8>)
 80043c6:	f000 b8ae 	b.w	8004526 <__retarget_lock_release_recursive>
 80043ca:	bf00      	nop
 80043cc:	200002a1 	.word	0x200002a1

080043d0 <__sinit_lock_acquire>:
 80043d0:	4801      	ldr	r0, [pc, #4]	; (80043d8 <__sinit_lock_acquire+0x8>)
 80043d2:	f000 b8a7 	b.w	8004524 <__retarget_lock_acquire_recursive>
 80043d6:	bf00      	nop
 80043d8:	200002a2 	.word	0x200002a2

080043dc <__sinit_lock_release>:
 80043dc:	4801      	ldr	r0, [pc, #4]	; (80043e4 <__sinit_lock_release+0x8>)
 80043de:	f000 b8a2 	b.w	8004526 <__retarget_lock_release_recursive>
 80043e2:	bf00      	nop
 80043e4:	200002a2 	.word	0x200002a2

080043e8 <__sinit>:
 80043e8:	b510      	push	{r4, lr}
 80043ea:	4604      	mov	r4, r0
 80043ec:	f7ff fff0 	bl	80043d0 <__sinit_lock_acquire>
 80043f0:	69a3      	ldr	r3, [r4, #24]
 80043f2:	b11b      	cbz	r3, 80043fc <__sinit+0x14>
 80043f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043f8:	f7ff bff0 	b.w	80043dc <__sinit_lock_release>
 80043fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004400:	6523      	str	r3, [r4, #80]	; 0x50
 8004402:	4b13      	ldr	r3, [pc, #76]	; (8004450 <__sinit+0x68>)
 8004404:	4a13      	ldr	r2, [pc, #76]	; (8004454 <__sinit+0x6c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	62a2      	str	r2, [r4, #40]	; 0x28
 800440a:	42a3      	cmp	r3, r4
 800440c:	bf04      	itt	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	61a3      	streq	r3, [r4, #24]
 8004412:	4620      	mov	r0, r4
 8004414:	f000 f820 	bl	8004458 <__sfp>
 8004418:	6060      	str	r0, [r4, #4]
 800441a:	4620      	mov	r0, r4
 800441c:	f000 f81c 	bl	8004458 <__sfp>
 8004420:	60a0      	str	r0, [r4, #8]
 8004422:	4620      	mov	r0, r4
 8004424:	f000 f818 	bl	8004458 <__sfp>
 8004428:	2200      	movs	r2, #0
 800442a:	60e0      	str	r0, [r4, #12]
 800442c:	2104      	movs	r1, #4
 800442e:	6860      	ldr	r0, [r4, #4]
 8004430:	f7ff ff82 	bl	8004338 <std>
 8004434:	68a0      	ldr	r0, [r4, #8]
 8004436:	2201      	movs	r2, #1
 8004438:	2109      	movs	r1, #9
 800443a:	f7ff ff7d 	bl	8004338 <std>
 800443e:	68e0      	ldr	r0, [r4, #12]
 8004440:	2202      	movs	r2, #2
 8004442:	2112      	movs	r1, #18
 8004444:	f7ff ff78 	bl	8004338 <std>
 8004448:	2301      	movs	r3, #1
 800444a:	61a3      	str	r3, [r4, #24]
 800444c:	e7d2      	b.n	80043f4 <__sinit+0xc>
 800444e:	bf00      	nop
 8004450:	08005284 	.word	0x08005284
 8004454:	08004381 	.word	0x08004381

08004458 <__sfp>:
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445a:	4607      	mov	r7, r0
 800445c:	f7ff ffac 	bl	80043b8 <__sfp_lock_acquire>
 8004460:	4b1e      	ldr	r3, [pc, #120]	; (80044dc <__sfp+0x84>)
 8004462:	681e      	ldr	r6, [r3, #0]
 8004464:	69b3      	ldr	r3, [r6, #24]
 8004466:	b913      	cbnz	r3, 800446e <__sfp+0x16>
 8004468:	4630      	mov	r0, r6
 800446a:	f7ff ffbd 	bl	80043e8 <__sinit>
 800446e:	3648      	adds	r6, #72	; 0x48
 8004470:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004474:	3b01      	subs	r3, #1
 8004476:	d503      	bpl.n	8004480 <__sfp+0x28>
 8004478:	6833      	ldr	r3, [r6, #0]
 800447a:	b30b      	cbz	r3, 80044c0 <__sfp+0x68>
 800447c:	6836      	ldr	r6, [r6, #0]
 800447e:	e7f7      	b.n	8004470 <__sfp+0x18>
 8004480:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004484:	b9d5      	cbnz	r5, 80044bc <__sfp+0x64>
 8004486:	4b16      	ldr	r3, [pc, #88]	; (80044e0 <__sfp+0x88>)
 8004488:	60e3      	str	r3, [r4, #12]
 800448a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800448e:	6665      	str	r5, [r4, #100]	; 0x64
 8004490:	f000 f847 	bl	8004522 <__retarget_lock_init_recursive>
 8004494:	f7ff ff96 	bl	80043c4 <__sfp_lock_release>
 8004498:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800449c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044a0:	6025      	str	r5, [r4, #0]
 80044a2:	61a5      	str	r5, [r4, #24]
 80044a4:	2208      	movs	r2, #8
 80044a6:	4629      	mov	r1, r5
 80044a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044ac:	f7ff ff24 	bl	80042f8 <memset>
 80044b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044b8:	4620      	mov	r0, r4
 80044ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044bc:	3468      	adds	r4, #104	; 0x68
 80044be:	e7d9      	b.n	8004474 <__sfp+0x1c>
 80044c0:	2104      	movs	r1, #4
 80044c2:	4638      	mov	r0, r7
 80044c4:	f7ff ff62 	bl	800438c <__sfmoreglue>
 80044c8:	4604      	mov	r4, r0
 80044ca:	6030      	str	r0, [r6, #0]
 80044cc:	2800      	cmp	r0, #0
 80044ce:	d1d5      	bne.n	800447c <__sfp+0x24>
 80044d0:	f7ff ff78 	bl	80043c4 <__sfp_lock_release>
 80044d4:	230c      	movs	r3, #12
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	e7ee      	b.n	80044b8 <__sfp+0x60>
 80044da:	bf00      	nop
 80044dc:	08005284 	.word	0x08005284
 80044e0:	ffff0001 	.word	0xffff0001

080044e4 <_fwalk_reent>:
 80044e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044e8:	4606      	mov	r6, r0
 80044ea:	4688      	mov	r8, r1
 80044ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044f0:	2700      	movs	r7, #0
 80044f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044f6:	f1b9 0901 	subs.w	r9, r9, #1
 80044fa:	d505      	bpl.n	8004508 <_fwalk_reent+0x24>
 80044fc:	6824      	ldr	r4, [r4, #0]
 80044fe:	2c00      	cmp	r4, #0
 8004500:	d1f7      	bne.n	80044f2 <_fwalk_reent+0xe>
 8004502:	4638      	mov	r0, r7
 8004504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004508:	89ab      	ldrh	r3, [r5, #12]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d907      	bls.n	800451e <_fwalk_reent+0x3a>
 800450e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004512:	3301      	adds	r3, #1
 8004514:	d003      	beq.n	800451e <_fwalk_reent+0x3a>
 8004516:	4629      	mov	r1, r5
 8004518:	4630      	mov	r0, r6
 800451a:	47c0      	blx	r8
 800451c:	4307      	orrs	r7, r0
 800451e:	3568      	adds	r5, #104	; 0x68
 8004520:	e7e9      	b.n	80044f6 <_fwalk_reent+0x12>

08004522 <__retarget_lock_init_recursive>:
 8004522:	4770      	bx	lr

08004524 <__retarget_lock_acquire_recursive>:
 8004524:	4770      	bx	lr

08004526 <__retarget_lock_release_recursive>:
 8004526:	4770      	bx	lr

08004528 <sbrk_aligned>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	4e0e      	ldr	r6, [pc, #56]	; (8004564 <sbrk_aligned+0x3c>)
 800452c:	460c      	mov	r4, r1
 800452e:	6831      	ldr	r1, [r6, #0]
 8004530:	4605      	mov	r5, r0
 8004532:	b911      	cbnz	r1, 800453a <sbrk_aligned+0x12>
 8004534:	f000 fb7a 	bl	8004c2c <_sbrk_r>
 8004538:	6030      	str	r0, [r6, #0]
 800453a:	4621      	mov	r1, r4
 800453c:	4628      	mov	r0, r5
 800453e:	f000 fb75 	bl	8004c2c <_sbrk_r>
 8004542:	1c43      	adds	r3, r0, #1
 8004544:	d00a      	beq.n	800455c <sbrk_aligned+0x34>
 8004546:	1cc4      	adds	r4, r0, #3
 8004548:	f024 0403 	bic.w	r4, r4, #3
 800454c:	42a0      	cmp	r0, r4
 800454e:	d007      	beq.n	8004560 <sbrk_aligned+0x38>
 8004550:	1a21      	subs	r1, r4, r0
 8004552:	4628      	mov	r0, r5
 8004554:	f000 fb6a 	bl	8004c2c <_sbrk_r>
 8004558:	3001      	adds	r0, #1
 800455a:	d101      	bne.n	8004560 <sbrk_aligned+0x38>
 800455c:	f04f 34ff 	mov.w	r4, #4294967295
 8004560:	4620      	mov	r0, r4
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	200002a8 	.word	0x200002a8

08004568 <_malloc_r>:
 8004568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456c:	1ccd      	adds	r5, r1, #3
 800456e:	f025 0503 	bic.w	r5, r5, #3
 8004572:	3508      	adds	r5, #8
 8004574:	2d0c      	cmp	r5, #12
 8004576:	bf38      	it	cc
 8004578:	250c      	movcc	r5, #12
 800457a:	2d00      	cmp	r5, #0
 800457c:	4607      	mov	r7, r0
 800457e:	db01      	blt.n	8004584 <_malloc_r+0x1c>
 8004580:	42a9      	cmp	r1, r5
 8004582:	d905      	bls.n	8004590 <_malloc_r+0x28>
 8004584:	230c      	movs	r3, #12
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	2600      	movs	r6, #0
 800458a:	4630      	mov	r0, r6
 800458c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004590:	4e2e      	ldr	r6, [pc, #184]	; (800464c <_malloc_r+0xe4>)
 8004592:	f000 fdbb 	bl	800510c <__malloc_lock>
 8004596:	6833      	ldr	r3, [r6, #0]
 8004598:	461c      	mov	r4, r3
 800459a:	bb34      	cbnz	r4, 80045ea <_malloc_r+0x82>
 800459c:	4629      	mov	r1, r5
 800459e:	4638      	mov	r0, r7
 80045a0:	f7ff ffc2 	bl	8004528 <sbrk_aligned>
 80045a4:	1c43      	adds	r3, r0, #1
 80045a6:	4604      	mov	r4, r0
 80045a8:	d14d      	bne.n	8004646 <_malloc_r+0xde>
 80045aa:	6834      	ldr	r4, [r6, #0]
 80045ac:	4626      	mov	r6, r4
 80045ae:	2e00      	cmp	r6, #0
 80045b0:	d140      	bne.n	8004634 <_malloc_r+0xcc>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	4631      	mov	r1, r6
 80045b6:	4638      	mov	r0, r7
 80045b8:	eb04 0803 	add.w	r8, r4, r3
 80045bc:	f000 fb36 	bl	8004c2c <_sbrk_r>
 80045c0:	4580      	cmp	r8, r0
 80045c2:	d13a      	bne.n	800463a <_malloc_r+0xd2>
 80045c4:	6821      	ldr	r1, [r4, #0]
 80045c6:	3503      	adds	r5, #3
 80045c8:	1a6d      	subs	r5, r5, r1
 80045ca:	f025 0503 	bic.w	r5, r5, #3
 80045ce:	3508      	adds	r5, #8
 80045d0:	2d0c      	cmp	r5, #12
 80045d2:	bf38      	it	cc
 80045d4:	250c      	movcc	r5, #12
 80045d6:	4629      	mov	r1, r5
 80045d8:	4638      	mov	r0, r7
 80045da:	f7ff ffa5 	bl	8004528 <sbrk_aligned>
 80045de:	3001      	adds	r0, #1
 80045e0:	d02b      	beq.n	800463a <_malloc_r+0xd2>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	442b      	add	r3, r5
 80045e6:	6023      	str	r3, [r4, #0]
 80045e8:	e00e      	b.n	8004608 <_malloc_r+0xa0>
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	1b52      	subs	r2, r2, r5
 80045ee:	d41e      	bmi.n	800462e <_malloc_r+0xc6>
 80045f0:	2a0b      	cmp	r2, #11
 80045f2:	d916      	bls.n	8004622 <_malloc_r+0xba>
 80045f4:	1961      	adds	r1, r4, r5
 80045f6:	42a3      	cmp	r3, r4
 80045f8:	6025      	str	r5, [r4, #0]
 80045fa:	bf18      	it	ne
 80045fc:	6059      	strne	r1, [r3, #4]
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	bf08      	it	eq
 8004602:	6031      	streq	r1, [r6, #0]
 8004604:	5162      	str	r2, [r4, r5]
 8004606:	604b      	str	r3, [r1, #4]
 8004608:	4638      	mov	r0, r7
 800460a:	f104 060b 	add.w	r6, r4, #11
 800460e:	f000 fd83 	bl	8005118 <__malloc_unlock>
 8004612:	f026 0607 	bic.w	r6, r6, #7
 8004616:	1d23      	adds	r3, r4, #4
 8004618:	1af2      	subs	r2, r6, r3
 800461a:	d0b6      	beq.n	800458a <_malloc_r+0x22>
 800461c:	1b9b      	subs	r3, r3, r6
 800461e:	50a3      	str	r3, [r4, r2]
 8004620:	e7b3      	b.n	800458a <_malloc_r+0x22>
 8004622:	6862      	ldr	r2, [r4, #4]
 8004624:	42a3      	cmp	r3, r4
 8004626:	bf0c      	ite	eq
 8004628:	6032      	streq	r2, [r6, #0]
 800462a:	605a      	strne	r2, [r3, #4]
 800462c:	e7ec      	b.n	8004608 <_malloc_r+0xa0>
 800462e:	4623      	mov	r3, r4
 8004630:	6864      	ldr	r4, [r4, #4]
 8004632:	e7b2      	b.n	800459a <_malloc_r+0x32>
 8004634:	4634      	mov	r4, r6
 8004636:	6876      	ldr	r6, [r6, #4]
 8004638:	e7b9      	b.n	80045ae <_malloc_r+0x46>
 800463a:	230c      	movs	r3, #12
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4638      	mov	r0, r7
 8004640:	f000 fd6a 	bl	8005118 <__malloc_unlock>
 8004644:	e7a1      	b.n	800458a <_malloc_r+0x22>
 8004646:	6025      	str	r5, [r4, #0]
 8004648:	e7de      	b.n	8004608 <_malloc_r+0xa0>
 800464a:	bf00      	nop
 800464c:	200002a4 	.word	0x200002a4

08004650 <__sfputc_r>:
 8004650:	6893      	ldr	r3, [r2, #8]
 8004652:	3b01      	subs	r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	b410      	push	{r4}
 8004658:	6093      	str	r3, [r2, #8]
 800465a:	da08      	bge.n	800466e <__sfputc_r+0x1e>
 800465c:	6994      	ldr	r4, [r2, #24]
 800465e:	42a3      	cmp	r3, r4
 8004660:	db01      	blt.n	8004666 <__sfputc_r+0x16>
 8004662:	290a      	cmp	r1, #10
 8004664:	d103      	bne.n	800466e <__sfputc_r+0x1e>
 8004666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800466a:	f000 bb33 	b.w	8004cd4 <__swbuf_r>
 800466e:	6813      	ldr	r3, [r2, #0]
 8004670:	1c58      	adds	r0, r3, #1
 8004672:	6010      	str	r0, [r2, #0]
 8004674:	7019      	strb	r1, [r3, #0]
 8004676:	4608      	mov	r0, r1
 8004678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800467c:	4770      	bx	lr

0800467e <__sfputs_r>:
 800467e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004680:	4606      	mov	r6, r0
 8004682:	460f      	mov	r7, r1
 8004684:	4614      	mov	r4, r2
 8004686:	18d5      	adds	r5, r2, r3
 8004688:	42ac      	cmp	r4, r5
 800468a:	d101      	bne.n	8004690 <__sfputs_r+0x12>
 800468c:	2000      	movs	r0, #0
 800468e:	e007      	b.n	80046a0 <__sfputs_r+0x22>
 8004690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004694:	463a      	mov	r2, r7
 8004696:	4630      	mov	r0, r6
 8004698:	f7ff ffda 	bl	8004650 <__sfputc_r>
 800469c:	1c43      	adds	r3, r0, #1
 800469e:	d1f3      	bne.n	8004688 <__sfputs_r+0xa>
 80046a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046a4 <_vfiprintf_r>:
 80046a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a8:	460d      	mov	r5, r1
 80046aa:	b09d      	sub	sp, #116	; 0x74
 80046ac:	4614      	mov	r4, r2
 80046ae:	4698      	mov	r8, r3
 80046b0:	4606      	mov	r6, r0
 80046b2:	b118      	cbz	r0, 80046bc <_vfiprintf_r+0x18>
 80046b4:	6983      	ldr	r3, [r0, #24]
 80046b6:	b90b      	cbnz	r3, 80046bc <_vfiprintf_r+0x18>
 80046b8:	f7ff fe96 	bl	80043e8 <__sinit>
 80046bc:	4b89      	ldr	r3, [pc, #548]	; (80048e4 <_vfiprintf_r+0x240>)
 80046be:	429d      	cmp	r5, r3
 80046c0:	d11b      	bne.n	80046fa <_vfiprintf_r+0x56>
 80046c2:	6875      	ldr	r5, [r6, #4]
 80046c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046c6:	07d9      	lsls	r1, r3, #31
 80046c8:	d405      	bmi.n	80046d6 <_vfiprintf_r+0x32>
 80046ca:	89ab      	ldrh	r3, [r5, #12]
 80046cc:	059a      	lsls	r2, r3, #22
 80046ce:	d402      	bmi.n	80046d6 <_vfiprintf_r+0x32>
 80046d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046d2:	f7ff ff27 	bl	8004524 <__retarget_lock_acquire_recursive>
 80046d6:	89ab      	ldrh	r3, [r5, #12]
 80046d8:	071b      	lsls	r3, r3, #28
 80046da:	d501      	bpl.n	80046e0 <_vfiprintf_r+0x3c>
 80046dc:	692b      	ldr	r3, [r5, #16]
 80046de:	b9eb      	cbnz	r3, 800471c <_vfiprintf_r+0x78>
 80046e0:	4629      	mov	r1, r5
 80046e2:	4630      	mov	r0, r6
 80046e4:	f000 fb5a 	bl	8004d9c <__swsetup_r>
 80046e8:	b1c0      	cbz	r0, 800471c <_vfiprintf_r+0x78>
 80046ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046ec:	07dc      	lsls	r4, r3, #31
 80046ee:	d50e      	bpl.n	800470e <_vfiprintf_r+0x6a>
 80046f0:	f04f 30ff 	mov.w	r0, #4294967295
 80046f4:	b01d      	add	sp, #116	; 0x74
 80046f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fa:	4b7b      	ldr	r3, [pc, #492]	; (80048e8 <_vfiprintf_r+0x244>)
 80046fc:	429d      	cmp	r5, r3
 80046fe:	d101      	bne.n	8004704 <_vfiprintf_r+0x60>
 8004700:	68b5      	ldr	r5, [r6, #8]
 8004702:	e7df      	b.n	80046c4 <_vfiprintf_r+0x20>
 8004704:	4b79      	ldr	r3, [pc, #484]	; (80048ec <_vfiprintf_r+0x248>)
 8004706:	429d      	cmp	r5, r3
 8004708:	bf08      	it	eq
 800470a:	68f5      	ldreq	r5, [r6, #12]
 800470c:	e7da      	b.n	80046c4 <_vfiprintf_r+0x20>
 800470e:	89ab      	ldrh	r3, [r5, #12]
 8004710:	0598      	lsls	r0, r3, #22
 8004712:	d4ed      	bmi.n	80046f0 <_vfiprintf_r+0x4c>
 8004714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004716:	f7ff ff06 	bl	8004526 <__retarget_lock_release_recursive>
 800471a:	e7e9      	b.n	80046f0 <_vfiprintf_r+0x4c>
 800471c:	2300      	movs	r3, #0
 800471e:	9309      	str	r3, [sp, #36]	; 0x24
 8004720:	2320      	movs	r3, #32
 8004722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004726:	f8cd 800c 	str.w	r8, [sp, #12]
 800472a:	2330      	movs	r3, #48	; 0x30
 800472c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80048f0 <_vfiprintf_r+0x24c>
 8004730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004734:	f04f 0901 	mov.w	r9, #1
 8004738:	4623      	mov	r3, r4
 800473a:	469a      	mov	sl, r3
 800473c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004740:	b10a      	cbz	r2, 8004746 <_vfiprintf_r+0xa2>
 8004742:	2a25      	cmp	r2, #37	; 0x25
 8004744:	d1f9      	bne.n	800473a <_vfiprintf_r+0x96>
 8004746:	ebba 0b04 	subs.w	fp, sl, r4
 800474a:	d00b      	beq.n	8004764 <_vfiprintf_r+0xc0>
 800474c:	465b      	mov	r3, fp
 800474e:	4622      	mov	r2, r4
 8004750:	4629      	mov	r1, r5
 8004752:	4630      	mov	r0, r6
 8004754:	f7ff ff93 	bl	800467e <__sfputs_r>
 8004758:	3001      	adds	r0, #1
 800475a:	f000 80aa 	beq.w	80048b2 <_vfiprintf_r+0x20e>
 800475e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004760:	445a      	add	r2, fp
 8004762:	9209      	str	r2, [sp, #36]	; 0x24
 8004764:	f89a 3000 	ldrb.w	r3, [sl]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80a2 	beq.w	80048b2 <_vfiprintf_r+0x20e>
 800476e:	2300      	movs	r3, #0
 8004770:	f04f 32ff 	mov.w	r2, #4294967295
 8004774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004778:	f10a 0a01 	add.w	sl, sl, #1
 800477c:	9304      	str	r3, [sp, #16]
 800477e:	9307      	str	r3, [sp, #28]
 8004780:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004784:	931a      	str	r3, [sp, #104]	; 0x68
 8004786:	4654      	mov	r4, sl
 8004788:	2205      	movs	r2, #5
 800478a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800478e:	4858      	ldr	r0, [pc, #352]	; (80048f0 <_vfiprintf_r+0x24c>)
 8004790:	f7fb fd1e 	bl	80001d0 <memchr>
 8004794:	9a04      	ldr	r2, [sp, #16]
 8004796:	b9d8      	cbnz	r0, 80047d0 <_vfiprintf_r+0x12c>
 8004798:	06d1      	lsls	r1, r2, #27
 800479a:	bf44      	itt	mi
 800479c:	2320      	movmi	r3, #32
 800479e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047a2:	0713      	lsls	r3, r2, #28
 80047a4:	bf44      	itt	mi
 80047a6:	232b      	movmi	r3, #43	; 0x2b
 80047a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ac:	f89a 3000 	ldrb.w	r3, [sl]
 80047b0:	2b2a      	cmp	r3, #42	; 0x2a
 80047b2:	d015      	beq.n	80047e0 <_vfiprintf_r+0x13c>
 80047b4:	9a07      	ldr	r2, [sp, #28]
 80047b6:	4654      	mov	r4, sl
 80047b8:	2000      	movs	r0, #0
 80047ba:	f04f 0c0a 	mov.w	ip, #10
 80047be:	4621      	mov	r1, r4
 80047c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047c4:	3b30      	subs	r3, #48	; 0x30
 80047c6:	2b09      	cmp	r3, #9
 80047c8:	d94e      	bls.n	8004868 <_vfiprintf_r+0x1c4>
 80047ca:	b1b0      	cbz	r0, 80047fa <_vfiprintf_r+0x156>
 80047cc:	9207      	str	r2, [sp, #28]
 80047ce:	e014      	b.n	80047fa <_vfiprintf_r+0x156>
 80047d0:	eba0 0308 	sub.w	r3, r0, r8
 80047d4:	fa09 f303 	lsl.w	r3, r9, r3
 80047d8:	4313      	orrs	r3, r2
 80047da:	9304      	str	r3, [sp, #16]
 80047dc:	46a2      	mov	sl, r4
 80047de:	e7d2      	b.n	8004786 <_vfiprintf_r+0xe2>
 80047e0:	9b03      	ldr	r3, [sp, #12]
 80047e2:	1d19      	adds	r1, r3, #4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	9103      	str	r1, [sp, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bfbb      	ittet	lt
 80047ec:	425b      	neglt	r3, r3
 80047ee:	f042 0202 	orrlt.w	r2, r2, #2
 80047f2:	9307      	strge	r3, [sp, #28]
 80047f4:	9307      	strlt	r3, [sp, #28]
 80047f6:	bfb8      	it	lt
 80047f8:	9204      	strlt	r2, [sp, #16]
 80047fa:	7823      	ldrb	r3, [r4, #0]
 80047fc:	2b2e      	cmp	r3, #46	; 0x2e
 80047fe:	d10c      	bne.n	800481a <_vfiprintf_r+0x176>
 8004800:	7863      	ldrb	r3, [r4, #1]
 8004802:	2b2a      	cmp	r3, #42	; 0x2a
 8004804:	d135      	bne.n	8004872 <_vfiprintf_r+0x1ce>
 8004806:	9b03      	ldr	r3, [sp, #12]
 8004808:	1d1a      	adds	r2, r3, #4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	9203      	str	r2, [sp, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	bfb8      	it	lt
 8004812:	f04f 33ff 	movlt.w	r3, #4294967295
 8004816:	3402      	adds	r4, #2
 8004818:	9305      	str	r3, [sp, #20]
 800481a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004900 <_vfiprintf_r+0x25c>
 800481e:	7821      	ldrb	r1, [r4, #0]
 8004820:	2203      	movs	r2, #3
 8004822:	4650      	mov	r0, sl
 8004824:	f7fb fcd4 	bl	80001d0 <memchr>
 8004828:	b140      	cbz	r0, 800483c <_vfiprintf_r+0x198>
 800482a:	2340      	movs	r3, #64	; 0x40
 800482c:	eba0 000a 	sub.w	r0, r0, sl
 8004830:	fa03 f000 	lsl.w	r0, r3, r0
 8004834:	9b04      	ldr	r3, [sp, #16]
 8004836:	4303      	orrs	r3, r0
 8004838:	3401      	adds	r4, #1
 800483a:	9304      	str	r3, [sp, #16]
 800483c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004840:	482c      	ldr	r0, [pc, #176]	; (80048f4 <_vfiprintf_r+0x250>)
 8004842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004846:	2206      	movs	r2, #6
 8004848:	f7fb fcc2 	bl	80001d0 <memchr>
 800484c:	2800      	cmp	r0, #0
 800484e:	d03f      	beq.n	80048d0 <_vfiprintf_r+0x22c>
 8004850:	4b29      	ldr	r3, [pc, #164]	; (80048f8 <_vfiprintf_r+0x254>)
 8004852:	bb1b      	cbnz	r3, 800489c <_vfiprintf_r+0x1f8>
 8004854:	9b03      	ldr	r3, [sp, #12]
 8004856:	3307      	adds	r3, #7
 8004858:	f023 0307 	bic.w	r3, r3, #7
 800485c:	3308      	adds	r3, #8
 800485e:	9303      	str	r3, [sp, #12]
 8004860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004862:	443b      	add	r3, r7
 8004864:	9309      	str	r3, [sp, #36]	; 0x24
 8004866:	e767      	b.n	8004738 <_vfiprintf_r+0x94>
 8004868:	fb0c 3202 	mla	r2, ip, r2, r3
 800486c:	460c      	mov	r4, r1
 800486e:	2001      	movs	r0, #1
 8004870:	e7a5      	b.n	80047be <_vfiprintf_r+0x11a>
 8004872:	2300      	movs	r3, #0
 8004874:	3401      	adds	r4, #1
 8004876:	9305      	str	r3, [sp, #20]
 8004878:	4619      	mov	r1, r3
 800487a:	f04f 0c0a 	mov.w	ip, #10
 800487e:	4620      	mov	r0, r4
 8004880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004884:	3a30      	subs	r2, #48	; 0x30
 8004886:	2a09      	cmp	r2, #9
 8004888:	d903      	bls.n	8004892 <_vfiprintf_r+0x1ee>
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0c5      	beq.n	800481a <_vfiprintf_r+0x176>
 800488e:	9105      	str	r1, [sp, #20]
 8004890:	e7c3      	b.n	800481a <_vfiprintf_r+0x176>
 8004892:	fb0c 2101 	mla	r1, ip, r1, r2
 8004896:	4604      	mov	r4, r0
 8004898:	2301      	movs	r3, #1
 800489a:	e7f0      	b.n	800487e <_vfiprintf_r+0x1da>
 800489c:	ab03      	add	r3, sp, #12
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	462a      	mov	r2, r5
 80048a2:	4b16      	ldr	r3, [pc, #88]	; (80048fc <_vfiprintf_r+0x258>)
 80048a4:	a904      	add	r1, sp, #16
 80048a6:	4630      	mov	r0, r6
 80048a8:	f3af 8000 	nop.w
 80048ac:	4607      	mov	r7, r0
 80048ae:	1c78      	adds	r0, r7, #1
 80048b0:	d1d6      	bne.n	8004860 <_vfiprintf_r+0x1bc>
 80048b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048b4:	07d9      	lsls	r1, r3, #31
 80048b6:	d405      	bmi.n	80048c4 <_vfiprintf_r+0x220>
 80048b8:	89ab      	ldrh	r3, [r5, #12]
 80048ba:	059a      	lsls	r2, r3, #22
 80048bc:	d402      	bmi.n	80048c4 <_vfiprintf_r+0x220>
 80048be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048c0:	f7ff fe31 	bl	8004526 <__retarget_lock_release_recursive>
 80048c4:	89ab      	ldrh	r3, [r5, #12]
 80048c6:	065b      	lsls	r3, r3, #25
 80048c8:	f53f af12 	bmi.w	80046f0 <_vfiprintf_r+0x4c>
 80048cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048ce:	e711      	b.n	80046f4 <_vfiprintf_r+0x50>
 80048d0:	ab03      	add	r3, sp, #12
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	462a      	mov	r2, r5
 80048d6:	4b09      	ldr	r3, [pc, #36]	; (80048fc <_vfiprintf_r+0x258>)
 80048d8:	a904      	add	r1, sp, #16
 80048da:	4630      	mov	r0, r6
 80048dc:	f000 f880 	bl	80049e0 <_printf_i>
 80048e0:	e7e4      	b.n	80048ac <_vfiprintf_r+0x208>
 80048e2:	bf00      	nop
 80048e4:	080052a8 	.word	0x080052a8
 80048e8:	080052c8 	.word	0x080052c8
 80048ec:	08005288 	.word	0x08005288
 80048f0:	080052e8 	.word	0x080052e8
 80048f4:	080052f2 	.word	0x080052f2
 80048f8:	00000000 	.word	0x00000000
 80048fc:	0800467f 	.word	0x0800467f
 8004900:	080052ee 	.word	0x080052ee

08004904 <_printf_common>:
 8004904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004908:	4616      	mov	r6, r2
 800490a:	4699      	mov	r9, r3
 800490c:	688a      	ldr	r2, [r1, #8]
 800490e:	690b      	ldr	r3, [r1, #16]
 8004910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004914:	4293      	cmp	r3, r2
 8004916:	bfb8      	it	lt
 8004918:	4613      	movlt	r3, r2
 800491a:	6033      	str	r3, [r6, #0]
 800491c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004920:	4607      	mov	r7, r0
 8004922:	460c      	mov	r4, r1
 8004924:	b10a      	cbz	r2, 800492a <_printf_common+0x26>
 8004926:	3301      	adds	r3, #1
 8004928:	6033      	str	r3, [r6, #0]
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	0699      	lsls	r1, r3, #26
 800492e:	bf42      	ittt	mi
 8004930:	6833      	ldrmi	r3, [r6, #0]
 8004932:	3302      	addmi	r3, #2
 8004934:	6033      	strmi	r3, [r6, #0]
 8004936:	6825      	ldr	r5, [r4, #0]
 8004938:	f015 0506 	ands.w	r5, r5, #6
 800493c:	d106      	bne.n	800494c <_printf_common+0x48>
 800493e:	f104 0a19 	add.w	sl, r4, #25
 8004942:	68e3      	ldr	r3, [r4, #12]
 8004944:	6832      	ldr	r2, [r6, #0]
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	42ab      	cmp	r3, r5
 800494a:	dc26      	bgt.n	800499a <_printf_common+0x96>
 800494c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004950:	1e13      	subs	r3, r2, #0
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	bf18      	it	ne
 8004956:	2301      	movne	r3, #1
 8004958:	0692      	lsls	r2, r2, #26
 800495a:	d42b      	bmi.n	80049b4 <_printf_common+0xb0>
 800495c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004960:	4649      	mov	r1, r9
 8004962:	4638      	mov	r0, r7
 8004964:	47c0      	blx	r8
 8004966:	3001      	adds	r0, #1
 8004968:	d01e      	beq.n	80049a8 <_printf_common+0xa4>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	68e5      	ldr	r5, [r4, #12]
 800496e:	6832      	ldr	r2, [r6, #0]
 8004970:	f003 0306 	and.w	r3, r3, #6
 8004974:	2b04      	cmp	r3, #4
 8004976:	bf08      	it	eq
 8004978:	1aad      	subeq	r5, r5, r2
 800497a:	68a3      	ldr	r3, [r4, #8]
 800497c:	6922      	ldr	r2, [r4, #16]
 800497e:	bf0c      	ite	eq
 8004980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004984:	2500      	movne	r5, #0
 8004986:	4293      	cmp	r3, r2
 8004988:	bfc4      	itt	gt
 800498a:	1a9b      	subgt	r3, r3, r2
 800498c:	18ed      	addgt	r5, r5, r3
 800498e:	2600      	movs	r6, #0
 8004990:	341a      	adds	r4, #26
 8004992:	42b5      	cmp	r5, r6
 8004994:	d11a      	bne.n	80049cc <_printf_common+0xc8>
 8004996:	2000      	movs	r0, #0
 8004998:	e008      	b.n	80049ac <_printf_common+0xa8>
 800499a:	2301      	movs	r3, #1
 800499c:	4652      	mov	r2, sl
 800499e:	4649      	mov	r1, r9
 80049a0:	4638      	mov	r0, r7
 80049a2:	47c0      	blx	r8
 80049a4:	3001      	adds	r0, #1
 80049a6:	d103      	bne.n	80049b0 <_printf_common+0xac>
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b0:	3501      	adds	r5, #1
 80049b2:	e7c6      	b.n	8004942 <_printf_common+0x3e>
 80049b4:	18e1      	adds	r1, r4, r3
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	2030      	movs	r0, #48	; 0x30
 80049ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049be:	4422      	add	r2, r4
 80049c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049c8:	3302      	adds	r3, #2
 80049ca:	e7c7      	b.n	800495c <_printf_common+0x58>
 80049cc:	2301      	movs	r3, #1
 80049ce:	4622      	mov	r2, r4
 80049d0:	4649      	mov	r1, r9
 80049d2:	4638      	mov	r0, r7
 80049d4:	47c0      	blx	r8
 80049d6:	3001      	adds	r0, #1
 80049d8:	d0e6      	beq.n	80049a8 <_printf_common+0xa4>
 80049da:	3601      	adds	r6, #1
 80049dc:	e7d9      	b.n	8004992 <_printf_common+0x8e>
	...

080049e0 <_printf_i>:
 80049e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049e4:	7e0f      	ldrb	r7, [r1, #24]
 80049e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049e8:	2f78      	cmp	r7, #120	; 0x78
 80049ea:	4691      	mov	r9, r2
 80049ec:	4680      	mov	r8, r0
 80049ee:	460c      	mov	r4, r1
 80049f0:	469a      	mov	sl, r3
 80049f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049f6:	d807      	bhi.n	8004a08 <_printf_i+0x28>
 80049f8:	2f62      	cmp	r7, #98	; 0x62
 80049fa:	d80a      	bhi.n	8004a12 <_printf_i+0x32>
 80049fc:	2f00      	cmp	r7, #0
 80049fe:	f000 80d8 	beq.w	8004bb2 <_printf_i+0x1d2>
 8004a02:	2f58      	cmp	r7, #88	; 0x58
 8004a04:	f000 80a3 	beq.w	8004b4e <_printf_i+0x16e>
 8004a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a10:	e03a      	b.n	8004a88 <_printf_i+0xa8>
 8004a12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a16:	2b15      	cmp	r3, #21
 8004a18:	d8f6      	bhi.n	8004a08 <_printf_i+0x28>
 8004a1a:	a101      	add	r1, pc, #4	; (adr r1, 8004a20 <_printf_i+0x40>)
 8004a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a20:	08004a79 	.word	0x08004a79
 8004a24:	08004a8d 	.word	0x08004a8d
 8004a28:	08004a09 	.word	0x08004a09
 8004a2c:	08004a09 	.word	0x08004a09
 8004a30:	08004a09 	.word	0x08004a09
 8004a34:	08004a09 	.word	0x08004a09
 8004a38:	08004a8d 	.word	0x08004a8d
 8004a3c:	08004a09 	.word	0x08004a09
 8004a40:	08004a09 	.word	0x08004a09
 8004a44:	08004a09 	.word	0x08004a09
 8004a48:	08004a09 	.word	0x08004a09
 8004a4c:	08004b99 	.word	0x08004b99
 8004a50:	08004abd 	.word	0x08004abd
 8004a54:	08004b7b 	.word	0x08004b7b
 8004a58:	08004a09 	.word	0x08004a09
 8004a5c:	08004a09 	.word	0x08004a09
 8004a60:	08004bbb 	.word	0x08004bbb
 8004a64:	08004a09 	.word	0x08004a09
 8004a68:	08004abd 	.word	0x08004abd
 8004a6c:	08004a09 	.word	0x08004a09
 8004a70:	08004a09 	.word	0x08004a09
 8004a74:	08004b83 	.word	0x08004b83
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	1d1a      	adds	r2, r3, #4
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	602a      	str	r2, [r5, #0]
 8004a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0a3      	b.n	8004bd4 <_printf_i+0x1f4>
 8004a8c:	6820      	ldr	r0, [r4, #0]
 8004a8e:	6829      	ldr	r1, [r5, #0]
 8004a90:	0606      	lsls	r6, r0, #24
 8004a92:	f101 0304 	add.w	r3, r1, #4
 8004a96:	d50a      	bpl.n	8004aae <_printf_i+0xce>
 8004a98:	680e      	ldr	r6, [r1, #0]
 8004a9a:	602b      	str	r3, [r5, #0]
 8004a9c:	2e00      	cmp	r6, #0
 8004a9e:	da03      	bge.n	8004aa8 <_printf_i+0xc8>
 8004aa0:	232d      	movs	r3, #45	; 0x2d
 8004aa2:	4276      	negs	r6, r6
 8004aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa8:	485e      	ldr	r0, [pc, #376]	; (8004c24 <_printf_i+0x244>)
 8004aaa:	230a      	movs	r3, #10
 8004aac:	e019      	b.n	8004ae2 <_printf_i+0x102>
 8004aae:	680e      	ldr	r6, [r1, #0]
 8004ab0:	602b      	str	r3, [r5, #0]
 8004ab2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ab6:	bf18      	it	ne
 8004ab8:	b236      	sxthne	r6, r6
 8004aba:	e7ef      	b.n	8004a9c <_printf_i+0xbc>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	6820      	ldr	r0, [r4, #0]
 8004ac0:	1d19      	adds	r1, r3, #4
 8004ac2:	6029      	str	r1, [r5, #0]
 8004ac4:	0601      	lsls	r1, r0, #24
 8004ac6:	d501      	bpl.n	8004acc <_printf_i+0xec>
 8004ac8:	681e      	ldr	r6, [r3, #0]
 8004aca:	e002      	b.n	8004ad2 <_printf_i+0xf2>
 8004acc:	0646      	lsls	r6, r0, #25
 8004ace:	d5fb      	bpl.n	8004ac8 <_printf_i+0xe8>
 8004ad0:	881e      	ldrh	r6, [r3, #0]
 8004ad2:	4854      	ldr	r0, [pc, #336]	; (8004c24 <_printf_i+0x244>)
 8004ad4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2308      	moveq	r3, #8
 8004ada:	230a      	movne	r3, #10
 8004adc:	2100      	movs	r1, #0
 8004ade:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ae2:	6865      	ldr	r5, [r4, #4]
 8004ae4:	60a5      	str	r5, [r4, #8]
 8004ae6:	2d00      	cmp	r5, #0
 8004ae8:	bfa2      	ittt	ge
 8004aea:	6821      	ldrge	r1, [r4, #0]
 8004aec:	f021 0104 	bicge.w	r1, r1, #4
 8004af0:	6021      	strge	r1, [r4, #0]
 8004af2:	b90e      	cbnz	r6, 8004af8 <_printf_i+0x118>
 8004af4:	2d00      	cmp	r5, #0
 8004af6:	d04d      	beq.n	8004b94 <_printf_i+0x1b4>
 8004af8:	4615      	mov	r5, r2
 8004afa:	fbb6 f1f3 	udiv	r1, r6, r3
 8004afe:	fb03 6711 	mls	r7, r3, r1, r6
 8004b02:	5dc7      	ldrb	r7, [r0, r7]
 8004b04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b08:	4637      	mov	r7, r6
 8004b0a:	42bb      	cmp	r3, r7
 8004b0c:	460e      	mov	r6, r1
 8004b0e:	d9f4      	bls.n	8004afa <_printf_i+0x11a>
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d10b      	bne.n	8004b2c <_printf_i+0x14c>
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	07de      	lsls	r6, r3, #31
 8004b18:	d508      	bpl.n	8004b2c <_printf_i+0x14c>
 8004b1a:	6923      	ldr	r3, [r4, #16]
 8004b1c:	6861      	ldr	r1, [r4, #4]
 8004b1e:	4299      	cmp	r1, r3
 8004b20:	bfde      	ittt	le
 8004b22:	2330      	movle	r3, #48	; 0x30
 8004b24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b2c:	1b52      	subs	r2, r2, r5
 8004b2e:	6122      	str	r2, [r4, #16]
 8004b30:	f8cd a000 	str.w	sl, [sp]
 8004b34:	464b      	mov	r3, r9
 8004b36:	aa03      	add	r2, sp, #12
 8004b38:	4621      	mov	r1, r4
 8004b3a:	4640      	mov	r0, r8
 8004b3c:	f7ff fee2 	bl	8004904 <_printf_common>
 8004b40:	3001      	adds	r0, #1
 8004b42:	d14c      	bne.n	8004bde <_printf_i+0x1fe>
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295
 8004b48:	b004      	add	sp, #16
 8004b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b4e:	4835      	ldr	r0, [pc, #212]	; (8004c24 <_printf_i+0x244>)
 8004b50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b54:	6829      	ldr	r1, [r5, #0]
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b5c:	6029      	str	r1, [r5, #0]
 8004b5e:	061d      	lsls	r5, r3, #24
 8004b60:	d514      	bpl.n	8004b8c <_printf_i+0x1ac>
 8004b62:	07df      	lsls	r7, r3, #31
 8004b64:	bf44      	itt	mi
 8004b66:	f043 0320 	orrmi.w	r3, r3, #32
 8004b6a:	6023      	strmi	r3, [r4, #0]
 8004b6c:	b91e      	cbnz	r6, 8004b76 <_printf_i+0x196>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	f023 0320 	bic.w	r3, r3, #32
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	2310      	movs	r3, #16
 8004b78:	e7b0      	b.n	8004adc <_printf_i+0xfc>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	f043 0320 	orr.w	r3, r3, #32
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	2378      	movs	r3, #120	; 0x78
 8004b84:	4828      	ldr	r0, [pc, #160]	; (8004c28 <_printf_i+0x248>)
 8004b86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b8a:	e7e3      	b.n	8004b54 <_printf_i+0x174>
 8004b8c:	0659      	lsls	r1, r3, #25
 8004b8e:	bf48      	it	mi
 8004b90:	b2b6      	uxthmi	r6, r6
 8004b92:	e7e6      	b.n	8004b62 <_printf_i+0x182>
 8004b94:	4615      	mov	r5, r2
 8004b96:	e7bb      	b.n	8004b10 <_printf_i+0x130>
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	6826      	ldr	r6, [r4, #0]
 8004b9c:	6961      	ldr	r1, [r4, #20]
 8004b9e:	1d18      	adds	r0, r3, #4
 8004ba0:	6028      	str	r0, [r5, #0]
 8004ba2:	0635      	lsls	r5, r6, #24
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	d501      	bpl.n	8004bac <_printf_i+0x1cc>
 8004ba8:	6019      	str	r1, [r3, #0]
 8004baa:	e002      	b.n	8004bb2 <_printf_i+0x1d2>
 8004bac:	0670      	lsls	r0, r6, #25
 8004bae:	d5fb      	bpl.n	8004ba8 <_printf_i+0x1c8>
 8004bb0:	8019      	strh	r1, [r3, #0]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	6123      	str	r3, [r4, #16]
 8004bb6:	4615      	mov	r5, r2
 8004bb8:	e7ba      	b.n	8004b30 <_printf_i+0x150>
 8004bba:	682b      	ldr	r3, [r5, #0]
 8004bbc:	1d1a      	adds	r2, r3, #4
 8004bbe:	602a      	str	r2, [r5, #0]
 8004bc0:	681d      	ldr	r5, [r3, #0]
 8004bc2:	6862      	ldr	r2, [r4, #4]
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f7fb fb02 	bl	80001d0 <memchr>
 8004bcc:	b108      	cbz	r0, 8004bd2 <_printf_i+0x1f2>
 8004bce:	1b40      	subs	r0, r0, r5
 8004bd0:	6060      	str	r0, [r4, #4]
 8004bd2:	6863      	ldr	r3, [r4, #4]
 8004bd4:	6123      	str	r3, [r4, #16]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bdc:	e7a8      	b.n	8004b30 <_printf_i+0x150>
 8004bde:	6923      	ldr	r3, [r4, #16]
 8004be0:	462a      	mov	r2, r5
 8004be2:	4649      	mov	r1, r9
 8004be4:	4640      	mov	r0, r8
 8004be6:	47d0      	blx	sl
 8004be8:	3001      	adds	r0, #1
 8004bea:	d0ab      	beq.n	8004b44 <_printf_i+0x164>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	079b      	lsls	r3, r3, #30
 8004bf0:	d413      	bmi.n	8004c1a <_printf_i+0x23a>
 8004bf2:	68e0      	ldr	r0, [r4, #12]
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	4298      	cmp	r0, r3
 8004bf8:	bfb8      	it	lt
 8004bfa:	4618      	movlt	r0, r3
 8004bfc:	e7a4      	b.n	8004b48 <_printf_i+0x168>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	4632      	mov	r2, r6
 8004c02:	4649      	mov	r1, r9
 8004c04:	4640      	mov	r0, r8
 8004c06:	47d0      	blx	sl
 8004c08:	3001      	adds	r0, #1
 8004c0a:	d09b      	beq.n	8004b44 <_printf_i+0x164>
 8004c0c:	3501      	adds	r5, #1
 8004c0e:	68e3      	ldr	r3, [r4, #12]
 8004c10:	9903      	ldr	r1, [sp, #12]
 8004c12:	1a5b      	subs	r3, r3, r1
 8004c14:	42ab      	cmp	r3, r5
 8004c16:	dcf2      	bgt.n	8004bfe <_printf_i+0x21e>
 8004c18:	e7eb      	b.n	8004bf2 <_printf_i+0x212>
 8004c1a:	2500      	movs	r5, #0
 8004c1c:	f104 0619 	add.w	r6, r4, #25
 8004c20:	e7f5      	b.n	8004c0e <_printf_i+0x22e>
 8004c22:	bf00      	nop
 8004c24:	080052f9 	.word	0x080052f9
 8004c28:	0800530a 	.word	0x0800530a

08004c2c <_sbrk_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4d06      	ldr	r5, [pc, #24]	; (8004c48 <_sbrk_r+0x1c>)
 8004c30:	2300      	movs	r3, #0
 8004c32:	4604      	mov	r4, r0
 8004c34:	4608      	mov	r0, r1
 8004c36:	602b      	str	r3, [r5, #0]
 8004c38:	f7fb ff9a 	bl	8000b70 <_sbrk>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	d102      	bne.n	8004c46 <_sbrk_r+0x1a>
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	b103      	cbz	r3, 8004c46 <_sbrk_r+0x1a>
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	200002ac 	.word	0x200002ac

08004c4c <__sread>:
 8004c4c:	b510      	push	{r4, lr}
 8004c4e:	460c      	mov	r4, r1
 8004c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c54:	f000 fab2 	bl	80051bc <_read_r>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	bfab      	itete	ge
 8004c5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8004c60:	181b      	addge	r3, r3, r0
 8004c62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c66:	bfac      	ite	ge
 8004c68:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c6a:	81a3      	strhlt	r3, [r4, #12]
 8004c6c:	bd10      	pop	{r4, pc}

08004c6e <__swrite>:
 8004c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c72:	461f      	mov	r7, r3
 8004c74:	898b      	ldrh	r3, [r1, #12]
 8004c76:	05db      	lsls	r3, r3, #23
 8004c78:	4605      	mov	r5, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	4616      	mov	r6, r2
 8004c7e:	d505      	bpl.n	8004c8c <__swrite+0x1e>
 8004c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c84:	2302      	movs	r3, #2
 8004c86:	2200      	movs	r2, #0
 8004c88:	f000 f9c8 	bl	800501c <_lseek_r>
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c96:	81a3      	strh	r3, [r4, #12]
 8004c98:	4632      	mov	r2, r6
 8004c9a:	463b      	mov	r3, r7
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca2:	f000 b869 	b.w	8004d78 <_write_r>

08004ca6 <__sseek>:
 8004ca6:	b510      	push	{r4, lr}
 8004ca8:	460c      	mov	r4, r1
 8004caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cae:	f000 f9b5 	bl	800501c <_lseek_r>
 8004cb2:	1c43      	adds	r3, r0, #1
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	bf15      	itete	ne
 8004cb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cc2:	81a3      	strheq	r3, [r4, #12]
 8004cc4:	bf18      	it	ne
 8004cc6:	81a3      	strhne	r3, [r4, #12]
 8004cc8:	bd10      	pop	{r4, pc}

08004cca <__sclose>:
 8004cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cce:	f000 b8d3 	b.w	8004e78 <_close_r>
	...

08004cd4 <__swbuf_r>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	460e      	mov	r6, r1
 8004cd8:	4614      	mov	r4, r2
 8004cda:	4605      	mov	r5, r0
 8004cdc:	b118      	cbz	r0, 8004ce6 <__swbuf_r+0x12>
 8004cde:	6983      	ldr	r3, [r0, #24]
 8004ce0:	b90b      	cbnz	r3, 8004ce6 <__swbuf_r+0x12>
 8004ce2:	f7ff fb81 	bl	80043e8 <__sinit>
 8004ce6:	4b21      	ldr	r3, [pc, #132]	; (8004d6c <__swbuf_r+0x98>)
 8004ce8:	429c      	cmp	r4, r3
 8004cea:	d12b      	bne.n	8004d44 <__swbuf_r+0x70>
 8004cec:	686c      	ldr	r4, [r5, #4]
 8004cee:	69a3      	ldr	r3, [r4, #24]
 8004cf0:	60a3      	str	r3, [r4, #8]
 8004cf2:	89a3      	ldrh	r3, [r4, #12]
 8004cf4:	071a      	lsls	r2, r3, #28
 8004cf6:	d52f      	bpl.n	8004d58 <__swbuf_r+0x84>
 8004cf8:	6923      	ldr	r3, [r4, #16]
 8004cfa:	b36b      	cbz	r3, 8004d58 <__swbuf_r+0x84>
 8004cfc:	6923      	ldr	r3, [r4, #16]
 8004cfe:	6820      	ldr	r0, [r4, #0]
 8004d00:	1ac0      	subs	r0, r0, r3
 8004d02:	6963      	ldr	r3, [r4, #20]
 8004d04:	b2f6      	uxtb	r6, r6
 8004d06:	4283      	cmp	r3, r0
 8004d08:	4637      	mov	r7, r6
 8004d0a:	dc04      	bgt.n	8004d16 <__swbuf_r+0x42>
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f000 f948 	bl	8004fa4 <_fflush_r>
 8004d14:	bb30      	cbnz	r0, 8004d64 <__swbuf_r+0x90>
 8004d16:	68a3      	ldr	r3, [r4, #8]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	60a3      	str	r3, [r4, #8]
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	6022      	str	r2, [r4, #0]
 8004d22:	701e      	strb	r6, [r3, #0]
 8004d24:	6963      	ldr	r3, [r4, #20]
 8004d26:	3001      	adds	r0, #1
 8004d28:	4283      	cmp	r3, r0
 8004d2a:	d004      	beq.n	8004d36 <__swbuf_r+0x62>
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	07db      	lsls	r3, r3, #31
 8004d30:	d506      	bpl.n	8004d40 <__swbuf_r+0x6c>
 8004d32:	2e0a      	cmp	r6, #10
 8004d34:	d104      	bne.n	8004d40 <__swbuf_r+0x6c>
 8004d36:	4621      	mov	r1, r4
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f000 f933 	bl	8004fa4 <_fflush_r>
 8004d3e:	b988      	cbnz	r0, 8004d64 <__swbuf_r+0x90>
 8004d40:	4638      	mov	r0, r7
 8004d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d44:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <__swbuf_r+0x9c>)
 8004d46:	429c      	cmp	r4, r3
 8004d48:	d101      	bne.n	8004d4e <__swbuf_r+0x7a>
 8004d4a:	68ac      	ldr	r4, [r5, #8]
 8004d4c:	e7cf      	b.n	8004cee <__swbuf_r+0x1a>
 8004d4e:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <__swbuf_r+0xa0>)
 8004d50:	429c      	cmp	r4, r3
 8004d52:	bf08      	it	eq
 8004d54:	68ec      	ldreq	r4, [r5, #12]
 8004d56:	e7ca      	b.n	8004cee <__swbuf_r+0x1a>
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f000 f81e 	bl	8004d9c <__swsetup_r>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d0cb      	beq.n	8004cfc <__swbuf_r+0x28>
 8004d64:	f04f 37ff 	mov.w	r7, #4294967295
 8004d68:	e7ea      	b.n	8004d40 <__swbuf_r+0x6c>
 8004d6a:	bf00      	nop
 8004d6c:	080052a8 	.word	0x080052a8
 8004d70:	080052c8 	.word	0x080052c8
 8004d74:	08005288 	.word	0x08005288

08004d78 <_write_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4d07      	ldr	r5, [pc, #28]	; (8004d98 <_write_r+0x20>)
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	4608      	mov	r0, r1
 8004d80:	4611      	mov	r1, r2
 8004d82:	2200      	movs	r2, #0
 8004d84:	602a      	str	r2, [r5, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	f7fb fa72 	bl	8000270 <_write>
 8004d8c:	1c43      	adds	r3, r0, #1
 8004d8e:	d102      	bne.n	8004d96 <_write_r+0x1e>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	b103      	cbz	r3, 8004d96 <_write_r+0x1e>
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	bd38      	pop	{r3, r4, r5, pc}
 8004d98:	200002ac 	.word	0x200002ac

08004d9c <__swsetup_r>:
 8004d9c:	4b32      	ldr	r3, [pc, #200]	; (8004e68 <__swsetup_r+0xcc>)
 8004d9e:	b570      	push	{r4, r5, r6, lr}
 8004da0:	681d      	ldr	r5, [r3, #0]
 8004da2:	4606      	mov	r6, r0
 8004da4:	460c      	mov	r4, r1
 8004da6:	b125      	cbz	r5, 8004db2 <__swsetup_r+0x16>
 8004da8:	69ab      	ldr	r3, [r5, #24]
 8004daa:	b913      	cbnz	r3, 8004db2 <__swsetup_r+0x16>
 8004dac:	4628      	mov	r0, r5
 8004dae:	f7ff fb1b 	bl	80043e8 <__sinit>
 8004db2:	4b2e      	ldr	r3, [pc, #184]	; (8004e6c <__swsetup_r+0xd0>)
 8004db4:	429c      	cmp	r4, r3
 8004db6:	d10f      	bne.n	8004dd8 <__swsetup_r+0x3c>
 8004db8:	686c      	ldr	r4, [r5, #4]
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dc0:	0719      	lsls	r1, r3, #28
 8004dc2:	d42c      	bmi.n	8004e1e <__swsetup_r+0x82>
 8004dc4:	06dd      	lsls	r5, r3, #27
 8004dc6:	d411      	bmi.n	8004dec <__swsetup_r+0x50>
 8004dc8:	2309      	movs	r3, #9
 8004dca:	6033      	str	r3, [r6, #0]
 8004dcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004dd0:	81a3      	strh	r3, [r4, #12]
 8004dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd6:	e03e      	b.n	8004e56 <__swsetup_r+0xba>
 8004dd8:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <__swsetup_r+0xd4>)
 8004dda:	429c      	cmp	r4, r3
 8004ddc:	d101      	bne.n	8004de2 <__swsetup_r+0x46>
 8004dde:	68ac      	ldr	r4, [r5, #8]
 8004de0:	e7eb      	b.n	8004dba <__swsetup_r+0x1e>
 8004de2:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <__swsetup_r+0xd8>)
 8004de4:	429c      	cmp	r4, r3
 8004de6:	bf08      	it	eq
 8004de8:	68ec      	ldreq	r4, [r5, #12]
 8004dea:	e7e6      	b.n	8004dba <__swsetup_r+0x1e>
 8004dec:	0758      	lsls	r0, r3, #29
 8004dee:	d512      	bpl.n	8004e16 <__swsetup_r+0x7a>
 8004df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004df2:	b141      	cbz	r1, 8004e06 <__swsetup_r+0x6a>
 8004df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004df8:	4299      	cmp	r1, r3
 8004dfa:	d002      	beq.n	8004e02 <__swsetup_r+0x66>
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f000 f991 	bl	8005124 <_free_r>
 8004e02:	2300      	movs	r3, #0
 8004e04:	6363      	str	r3, [r4, #52]	; 0x34
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e0c:	81a3      	strh	r3, [r4, #12]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	6063      	str	r3, [r4, #4]
 8004e12:	6923      	ldr	r3, [r4, #16]
 8004e14:	6023      	str	r3, [r4, #0]
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	f043 0308 	orr.w	r3, r3, #8
 8004e1c:	81a3      	strh	r3, [r4, #12]
 8004e1e:	6923      	ldr	r3, [r4, #16]
 8004e20:	b94b      	cbnz	r3, 8004e36 <__swsetup_r+0x9a>
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2c:	d003      	beq.n	8004e36 <__swsetup_r+0x9a>
 8004e2e:	4621      	mov	r1, r4
 8004e30:	4630      	mov	r0, r6
 8004e32:	f000 f92b 	bl	800508c <__smakebuf_r>
 8004e36:	89a0      	ldrh	r0, [r4, #12]
 8004e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e3c:	f010 0301 	ands.w	r3, r0, #1
 8004e40:	d00a      	beq.n	8004e58 <__swsetup_r+0xbc>
 8004e42:	2300      	movs	r3, #0
 8004e44:	60a3      	str	r3, [r4, #8]
 8004e46:	6963      	ldr	r3, [r4, #20]
 8004e48:	425b      	negs	r3, r3
 8004e4a:	61a3      	str	r3, [r4, #24]
 8004e4c:	6923      	ldr	r3, [r4, #16]
 8004e4e:	b943      	cbnz	r3, 8004e62 <__swsetup_r+0xc6>
 8004e50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e54:	d1ba      	bne.n	8004dcc <__swsetup_r+0x30>
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	0781      	lsls	r1, r0, #30
 8004e5a:	bf58      	it	pl
 8004e5c:	6963      	ldrpl	r3, [r4, #20]
 8004e5e:	60a3      	str	r3, [r4, #8]
 8004e60:	e7f4      	b.n	8004e4c <__swsetup_r+0xb0>
 8004e62:	2000      	movs	r0, #0
 8004e64:	e7f7      	b.n	8004e56 <__swsetup_r+0xba>
 8004e66:	bf00      	nop
 8004e68:	2000000c 	.word	0x2000000c
 8004e6c:	080052a8 	.word	0x080052a8
 8004e70:	080052c8 	.word	0x080052c8
 8004e74:	08005288 	.word	0x08005288

08004e78 <_close_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d06      	ldr	r5, [pc, #24]	; (8004e94 <_close_r+0x1c>)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fb fe3f 	bl	8000b06 <_close>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_close_r+0x1a>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_close_r+0x1a>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	200002ac 	.word	0x200002ac

08004e98 <__sflush_r>:
 8004e98:	898a      	ldrh	r2, [r1, #12]
 8004e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9e:	4605      	mov	r5, r0
 8004ea0:	0710      	lsls	r0, r2, #28
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	d458      	bmi.n	8004f58 <__sflush_r+0xc0>
 8004ea6:	684b      	ldr	r3, [r1, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	dc05      	bgt.n	8004eb8 <__sflush_r+0x20>
 8004eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	dc02      	bgt.n	8004eb8 <__sflush_r+0x20>
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004eba:	2e00      	cmp	r6, #0
 8004ebc:	d0f9      	beq.n	8004eb2 <__sflush_r+0x1a>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ec4:	682f      	ldr	r7, [r5, #0]
 8004ec6:	602b      	str	r3, [r5, #0]
 8004ec8:	d032      	beq.n	8004f30 <__sflush_r+0x98>
 8004eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	075a      	lsls	r2, r3, #29
 8004ed0:	d505      	bpl.n	8004ede <__sflush_r+0x46>
 8004ed2:	6863      	ldr	r3, [r4, #4]
 8004ed4:	1ac0      	subs	r0, r0, r3
 8004ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ed8:	b10b      	cbz	r3, 8004ede <__sflush_r+0x46>
 8004eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004edc:	1ac0      	subs	r0, r0, r3
 8004ede:	2300      	movs	r3, #0
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ee4:	6a21      	ldr	r1, [r4, #32]
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	47b0      	blx	r6
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	d106      	bne.n	8004efe <__sflush_r+0x66>
 8004ef0:	6829      	ldr	r1, [r5, #0]
 8004ef2:	291d      	cmp	r1, #29
 8004ef4:	d82c      	bhi.n	8004f50 <__sflush_r+0xb8>
 8004ef6:	4a2a      	ldr	r2, [pc, #168]	; (8004fa0 <__sflush_r+0x108>)
 8004ef8:	40ca      	lsrs	r2, r1
 8004efa:	07d6      	lsls	r6, r2, #31
 8004efc:	d528      	bpl.n	8004f50 <__sflush_r+0xb8>
 8004efe:	2200      	movs	r2, #0
 8004f00:	6062      	str	r2, [r4, #4]
 8004f02:	04d9      	lsls	r1, r3, #19
 8004f04:	6922      	ldr	r2, [r4, #16]
 8004f06:	6022      	str	r2, [r4, #0]
 8004f08:	d504      	bpl.n	8004f14 <__sflush_r+0x7c>
 8004f0a:	1c42      	adds	r2, r0, #1
 8004f0c:	d101      	bne.n	8004f12 <__sflush_r+0x7a>
 8004f0e:	682b      	ldr	r3, [r5, #0]
 8004f10:	b903      	cbnz	r3, 8004f14 <__sflush_r+0x7c>
 8004f12:	6560      	str	r0, [r4, #84]	; 0x54
 8004f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f16:	602f      	str	r7, [r5, #0]
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	d0ca      	beq.n	8004eb2 <__sflush_r+0x1a>
 8004f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f20:	4299      	cmp	r1, r3
 8004f22:	d002      	beq.n	8004f2a <__sflush_r+0x92>
 8004f24:	4628      	mov	r0, r5
 8004f26:	f000 f8fd 	bl	8005124 <_free_r>
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	6360      	str	r0, [r4, #52]	; 0x34
 8004f2e:	e7c1      	b.n	8004eb4 <__sflush_r+0x1c>
 8004f30:	6a21      	ldr	r1, [r4, #32]
 8004f32:	2301      	movs	r3, #1
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b0      	blx	r6
 8004f38:	1c41      	adds	r1, r0, #1
 8004f3a:	d1c7      	bne.n	8004ecc <__sflush_r+0x34>
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0c4      	beq.n	8004ecc <__sflush_r+0x34>
 8004f42:	2b1d      	cmp	r3, #29
 8004f44:	d001      	beq.n	8004f4a <__sflush_r+0xb2>
 8004f46:	2b16      	cmp	r3, #22
 8004f48:	d101      	bne.n	8004f4e <__sflush_r+0xb6>
 8004f4a:	602f      	str	r7, [r5, #0]
 8004f4c:	e7b1      	b.n	8004eb2 <__sflush_r+0x1a>
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f54:	81a3      	strh	r3, [r4, #12]
 8004f56:	e7ad      	b.n	8004eb4 <__sflush_r+0x1c>
 8004f58:	690f      	ldr	r7, [r1, #16]
 8004f5a:	2f00      	cmp	r7, #0
 8004f5c:	d0a9      	beq.n	8004eb2 <__sflush_r+0x1a>
 8004f5e:	0793      	lsls	r3, r2, #30
 8004f60:	680e      	ldr	r6, [r1, #0]
 8004f62:	bf08      	it	eq
 8004f64:	694b      	ldreq	r3, [r1, #20]
 8004f66:	600f      	str	r7, [r1, #0]
 8004f68:	bf18      	it	ne
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	eba6 0807 	sub.w	r8, r6, r7
 8004f70:	608b      	str	r3, [r1, #8]
 8004f72:	f1b8 0f00 	cmp.w	r8, #0
 8004f76:	dd9c      	ble.n	8004eb2 <__sflush_r+0x1a>
 8004f78:	6a21      	ldr	r1, [r4, #32]
 8004f7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f7c:	4643      	mov	r3, r8
 8004f7e:	463a      	mov	r2, r7
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b0      	blx	r6
 8004f84:	2800      	cmp	r0, #0
 8004f86:	dc06      	bgt.n	8004f96 <__sflush_r+0xfe>
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8e:	81a3      	strh	r3, [r4, #12]
 8004f90:	f04f 30ff 	mov.w	r0, #4294967295
 8004f94:	e78e      	b.n	8004eb4 <__sflush_r+0x1c>
 8004f96:	4407      	add	r7, r0
 8004f98:	eba8 0800 	sub.w	r8, r8, r0
 8004f9c:	e7e9      	b.n	8004f72 <__sflush_r+0xda>
 8004f9e:	bf00      	nop
 8004fa0:	20400001 	.word	0x20400001

08004fa4 <_fflush_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	690b      	ldr	r3, [r1, #16]
 8004fa8:	4605      	mov	r5, r0
 8004faa:	460c      	mov	r4, r1
 8004fac:	b913      	cbnz	r3, 8004fb4 <_fflush_r+0x10>
 8004fae:	2500      	movs	r5, #0
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	b118      	cbz	r0, 8004fbe <_fflush_r+0x1a>
 8004fb6:	6983      	ldr	r3, [r0, #24]
 8004fb8:	b90b      	cbnz	r3, 8004fbe <_fflush_r+0x1a>
 8004fba:	f7ff fa15 	bl	80043e8 <__sinit>
 8004fbe:	4b14      	ldr	r3, [pc, #80]	; (8005010 <_fflush_r+0x6c>)
 8004fc0:	429c      	cmp	r4, r3
 8004fc2:	d11b      	bne.n	8004ffc <_fflush_r+0x58>
 8004fc4:	686c      	ldr	r4, [r5, #4]
 8004fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0ef      	beq.n	8004fae <_fflush_r+0xa>
 8004fce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fd0:	07d0      	lsls	r0, r2, #31
 8004fd2:	d404      	bmi.n	8004fde <_fflush_r+0x3a>
 8004fd4:	0599      	lsls	r1, r3, #22
 8004fd6:	d402      	bmi.n	8004fde <_fflush_r+0x3a>
 8004fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fda:	f7ff faa3 	bl	8004524 <__retarget_lock_acquire_recursive>
 8004fde:	4628      	mov	r0, r5
 8004fe0:	4621      	mov	r1, r4
 8004fe2:	f7ff ff59 	bl	8004e98 <__sflush_r>
 8004fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fe8:	07da      	lsls	r2, r3, #31
 8004fea:	4605      	mov	r5, r0
 8004fec:	d4e0      	bmi.n	8004fb0 <_fflush_r+0xc>
 8004fee:	89a3      	ldrh	r3, [r4, #12]
 8004ff0:	059b      	lsls	r3, r3, #22
 8004ff2:	d4dd      	bmi.n	8004fb0 <_fflush_r+0xc>
 8004ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ff6:	f7ff fa96 	bl	8004526 <__retarget_lock_release_recursive>
 8004ffa:	e7d9      	b.n	8004fb0 <_fflush_r+0xc>
 8004ffc:	4b05      	ldr	r3, [pc, #20]	; (8005014 <_fflush_r+0x70>)
 8004ffe:	429c      	cmp	r4, r3
 8005000:	d101      	bne.n	8005006 <_fflush_r+0x62>
 8005002:	68ac      	ldr	r4, [r5, #8]
 8005004:	e7df      	b.n	8004fc6 <_fflush_r+0x22>
 8005006:	4b04      	ldr	r3, [pc, #16]	; (8005018 <_fflush_r+0x74>)
 8005008:	429c      	cmp	r4, r3
 800500a:	bf08      	it	eq
 800500c:	68ec      	ldreq	r4, [r5, #12]
 800500e:	e7da      	b.n	8004fc6 <_fflush_r+0x22>
 8005010:	080052a8 	.word	0x080052a8
 8005014:	080052c8 	.word	0x080052c8
 8005018:	08005288 	.word	0x08005288

0800501c <_lseek_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	4d07      	ldr	r5, [pc, #28]	; (800503c <_lseek_r+0x20>)
 8005020:	4604      	mov	r4, r0
 8005022:	4608      	mov	r0, r1
 8005024:	4611      	mov	r1, r2
 8005026:	2200      	movs	r2, #0
 8005028:	602a      	str	r2, [r5, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	f7fb fd92 	bl	8000b54 <_lseek>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d102      	bne.n	800503a <_lseek_r+0x1e>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	b103      	cbz	r3, 800503a <_lseek_r+0x1e>
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	bd38      	pop	{r3, r4, r5, pc}
 800503c:	200002ac 	.word	0x200002ac

08005040 <__swhatbuf_r>:
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	460e      	mov	r6, r1
 8005044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005048:	2900      	cmp	r1, #0
 800504a:	b096      	sub	sp, #88	; 0x58
 800504c:	4614      	mov	r4, r2
 800504e:	461d      	mov	r5, r3
 8005050:	da08      	bge.n	8005064 <__swhatbuf_r+0x24>
 8005052:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	602a      	str	r2, [r5, #0]
 800505a:	061a      	lsls	r2, r3, #24
 800505c:	d410      	bmi.n	8005080 <__swhatbuf_r+0x40>
 800505e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005062:	e00e      	b.n	8005082 <__swhatbuf_r+0x42>
 8005064:	466a      	mov	r2, sp
 8005066:	f000 f8bb 	bl	80051e0 <_fstat_r>
 800506a:	2800      	cmp	r0, #0
 800506c:	dbf1      	blt.n	8005052 <__swhatbuf_r+0x12>
 800506e:	9a01      	ldr	r2, [sp, #4]
 8005070:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005074:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005078:	425a      	negs	r2, r3
 800507a:	415a      	adcs	r2, r3
 800507c:	602a      	str	r2, [r5, #0]
 800507e:	e7ee      	b.n	800505e <__swhatbuf_r+0x1e>
 8005080:	2340      	movs	r3, #64	; 0x40
 8005082:	2000      	movs	r0, #0
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	b016      	add	sp, #88	; 0x58
 8005088:	bd70      	pop	{r4, r5, r6, pc}
	...

0800508c <__smakebuf_r>:
 800508c:	898b      	ldrh	r3, [r1, #12]
 800508e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005090:	079d      	lsls	r5, r3, #30
 8005092:	4606      	mov	r6, r0
 8005094:	460c      	mov	r4, r1
 8005096:	d507      	bpl.n	80050a8 <__smakebuf_r+0x1c>
 8005098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	6123      	str	r3, [r4, #16]
 80050a0:	2301      	movs	r3, #1
 80050a2:	6163      	str	r3, [r4, #20]
 80050a4:	b002      	add	sp, #8
 80050a6:	bd70      	pop	{r4, r5, r6, pc}
 80050a8:	ab01      	add	r3, sp, #4
 80050aa:	466a      	mov	r2, sp
 80050ac:	f7ff ffc8 	bl	8005040 <__swhatbuf_r>
 80050b0:	9900      	ldr	r1, [sp, #0]
 80050b2:	4605      	mov	r5, r0
 80050b4:	4630      	mov	r0, r6
 80050b6:	f7ff fa57 	bl	8004568 <_malloc_r>
 80050ba:	b948      	cbnz	r0, 80050d0 <__smakebuf_r+0x44>
 80050bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050c0:	059a      	lsls	r2, r3, #22
 80050c2:	d4ef      	bmi.n	80050a4 <__smakebuf_r+0x18>
 80050c4:	f023 0303 	bic.w	r3, r3, #3
 80050c8:	f043 0302 	orr.w	r3, r3, #2
 80050cc:	81a3      	strh	r3, [r4, #12]
 80050ce:	e7e3      	b.n	8005098 <__smakebuf_r+0xc>
 80050d0:	4b0d      	ldr	r3, [pc, #52]	; (8005108 <__smakebuf_r+0x7c>)
 80050d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	6020      	str	r0, [r4, #0]
 80050d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050dc:	81a3      	strh	r3, [r4, #12]
 80050de:	9b00      	ldr	r3, [sp, #0]
 80050e0:	6163      	str	r3, [r4, #20]
 80050e2:	9b01      	ldr	r3, [sp, #4]
 80050e4:	6120      	str	r0, [r4, #16]
 80050e6:	b15b      	cbz	r3, 8005100 <__smakebuf_r+0x74>
 80050e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ec:	4630      	mov	r0, r6
 80050ee:	f000 f889 	bl	8005204 <_isatty_r>
 80050f2:	b128      	cbz	r0, 8005100 <__smakebuf_r+0x74>
 80050f4:	89a3      	ldrh	r3, [r4, #12]
 80050f6:	f023 0303 	bic.w	r3, r3, #3
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	81a3      	strh	r3, [r4, #12]
 8005100:	89a0      	ldrh	r0, [r4, #12]
 8005102:	4305      	orrs	r5, r0
 8005104:	81a5      	strh	r5, [r4, #12]
 8005106:	e7cd      	b.n	80050a4 <__smakebuf_r+0x18>
 8005108:	08004381 	.word	0x08004381

0800510c <__malloc_lock>:
 800510c:	4801      	ldr	r0, [pc, #4]	; (8005114 <__malloc_lock+0x8>)
 800510e:	f7ff ba09 	b.w	8004524 <__retarget_lock_acquire_recursive>
 8005112:	bf00      	nop
 8005114:	200002a0 	.word	0x200002a0

08005118 <__malloc_unlock>:
 8005118:	4801      	ldr	r0, [pc, #4]	; (8005120 <__malloc_unlock+0x8>)
 800511a:	f7ff ba04 	b.w	8004526 <__retarget_lock_release_recursive>
 800511e:	bf00      	nop
 8005120:	200002a0 	.word	0x200002a0

08005124 <_free_r>:
 8005124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005126:	2900      	cmp	r1, #0
 8005128:	d044      	beq.n	80051b4 <_free_r+0x90>
 800512a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800512e:	9001      	str	r0, [sp, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	f1a1 0404 	sub.w	r4, r1, #4
 8005136:	bfb8      	it	lt
 8005138:	18e4      	addlt	r4, r4, r3
 800513a:	f7ff ffe7 	bl	800510c <__malloc_lock>
 800513e:	4a1e      	ldr	r2, [pc, #120]	; (80051b8 <_free_r+0x94>)
 8005140:	9801      	ldr	r0, [sp, #4]
 8005142:	6813      	ldr	r3, [r2, #0]
 8005144:	b933      	cbnz	r3, 8005154 <_free_r+0x30>
 8005146:	6063      	str	r3, [r4, #4]
 8005148:	6014      	str	r4, [r2, #0]
 800514a:	b003      	add	sp, #12
 800514c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005150:	f7ff bfe2 	b.w	8005118 <__malloc_unlock>
 8005154:	42a3      	cmp	r3, r4
 8005156:	d908      	bls.n	800516a <_free_r+0x46>
 8005158:	6825      	ldr	r5, [r4, #0]
 800515a:	1961      	adds	r1, r4, r5
 800515c:	428b      	cmp	r3, r1
 800515e:	bf01      	itttt	eq
 8005160:	6819      	ldreq	r1, [r3, #0]
 8005162:	685b      	ldreq	r3, [r3, #4]
 8005164:	1949      	addeq	r1, r1, r5
 8005166:	6021      	streq	r1, [r4, #0]
 8005168:	e7ed      	b.n	8005146 <_free_r+0x22>
 800516a:	461a      	mov	r2, r3
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	b10b      	cbz	r3, 8005174 <_free_r+0x50>
 8005170:	42a3      	cmp	r3, r4
 8005172:	d9fa      	bls.n	800516a <_free_r+0x46>
 8005174:	6811      	ldr	r1, [r2, #0]
 8005176:	1855      	adds	r5, r2, r1
 8005178:	42a5      	cmp	r5, r4
 800517a:	d10b      	bne.n	8005194 <_free_r+0x70>
 800517c:	6824      	ldr	r4, [r4, #0]
 800517e:	4421      	add	r1, r4
 8005180:	1854      	adds	r4, r2, r1
 8005182:	42a3      	cmp	r3, r4
 8005184:	6011      	str	r1, [r2, #0]
 8005186:	d1e0      	bne.n	800514a <_free_r+0x26>
 8005188:	681c      	ldr	r4, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	6053      	str	r3, [r2, #4]
 800518e:	4421      	add	r1, r4
 8005190:	6011      	str	r1, [r2, #0]
 8005192:	e7da      	b.n	800514a <_free_r+0x26>
 8005194:	d902      	bls.n	800519c <_free_r+0x78>
 8005196:	230c      	movs	r3, #12
 8005198:	6003      	str	r3, [r0, #0]
 800519a:	e7d6      	b.n	800514a <_free_r+0x26>
 800519c:	6825      	ldr	r5, [r4, #0]
 800519e:	1961      	adds	r1, r4, r5
 80051a0:	428b      	cmp	r3, r1
 80051a2:	bf04      	itt	eq
 80051a4:	6819      	ldreq	r1, [r3, #0]
 80051a6:	685b      	ldreq	r3, [r3, #4]
 80051a8:	6063      	str	r3, [r4, #4]
 80051aa:	bf04      	itt	eq
 80051ac:	1949      	addeq	r1, r1, r5
 80051ae:	6021      	streq	r1, [r4, #0]
 80051b0:	6054      	str	r4, [r2, #4]
 80051b2:	e7ca      	b.n	800514a <_free_r+0x26>
 80051b4:	b003      	add	sp, #12
 80051b6:	bd30      	pop	{r4, r5, pc}
 80051b8:	200002a4 	.word	0x200002a4

080051bc <_read_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4d07      	ldr	r5, [pc, #28]	; (80051dc <_read_r+0x20>)
 80051c0:	4604      	mov	r4, r0
 80051c2:	4608      	mov	r0, r1
 80051c4:	4611      	mov	r1, r2
 80051c6:	2200      	movs	r2, #0
 80051c8:	602a      	str	r2, [r5, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f7fb fc7e 	bl	8000acc <_read>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d102      	bne.n	80051da <_read_r+0x1e>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	b103      	cbz	r3, 80051da <_read_r+0x1e>
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	200002ac 	.word	0x200002ac

080051e0 <_fstat_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4d07      	ldr	r5, [pc, #28]	; (8005200 <_fstat_r+0x20>)
 80051e4:	2300      	movs	r3, #0
 80051e6:	4604      	mov	r4, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	4611      	mov	r1, r2
 80051ec:	602b      	str	r3, [r5, #0]
 80051ee:	f7fb fc96 	bl	8000b1e <_fstat>
 80051f2:	1c43      	adds	r3, r0, #1
 80051f4:	d102      	bne.n	80051fc <_fstat_r+0x1c>
 80051f6:	682b      	ldr	r3, [r5, #0]
 80051f8:	b103      	cbz	r3, 80051fc <_fstat_r+0x1c>
 80051fa:	6023      	str	r3, [r4, #0]
 80051fc:	bd38      	pop	{r3, r4, r5, pc}
 80051fe:	bf00      	nop
 8005200:	200002ac 	.word	0x200002ac

08005204 <_isatty_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	4d06      	ldr	r5, [pc, #24]	; (8005220 <_isatty_r+0x1c>)
 8005208:	2300      	movs	r3, #0
 800520a:	4604      	mov	r4, r0
 800520c:	4608      	mov	r0, r1
 800520e:	602b      	str	r3, [r5, #0]
 8005210:	f7fb fc95 	bl	8000b3e <_isatty>
 8005214:	1c43      	adds	r3, r0, #1
 8005216:	d102      	bne.n	800521e <_isatty_r+0x1a>
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	b103      	cbz	r3, 800521e <_isatty_r+0x1a>
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	bd38      	pop	{r3, r4, r5, pc}
 8005220:	200002ac 	.word	0x200002ac

08005224 <_init>:
 8005224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005226:	bf00      	nop
 8005228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522a:	bc08      	pop	{r3}
 800522c:	469e      	mov	lr, r3
 800522e:	4770      	bx	lr

08005230 <_fini>:
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	bf00      	nop
 8005234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005236:	bc08      	pop	{r3}
 8005238:	469e      	mov	lr, r3
 800523a:	4770      	bx	lr
