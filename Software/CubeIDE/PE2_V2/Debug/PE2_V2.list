
PE2_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007624  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079f8  080079f8  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080079f8  080079f8  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079f8  080079f8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015c0  20000090  08007a90  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001650  08007a90  00021650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001149b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002766  00000000  00000000  0003155b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00033cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00034b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a8c  00000000  00000000  00035910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013dc8  00000000  00000000  0004c39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085bac  00000000  00000000  00060164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5d10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004678  00000000  00000000  000e5d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800779c 	.word	0x0800779c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800779c 	.word	0x0800779c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <init>:
uint8_t gamechoice = 0;
extern uint8_t play;
char str[12];


void init (void) {
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
    choice = 0;
 8000276:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <init+0x54>)
 8000278:	2200      	movs	r2, #0
 800027a:	701a      	strb	r2, [r3, #0]
    for(int x = 0; x < SCREEN_WIDTH; x++){
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	e016      	b.n	80002b0 <init+0x40>
        for(int y = 0; y < SCREEN_HEIGHT; y++){
 8000282:	2300      	movs	r3, #0
 8000284:	603b      	str	r3, [r7, #0]
 8000286:	e00d      	b.n	80002a4 <init+0x34>
            game_screen[x][y] = ENC_DARK_GRAY;
 8000288:	490f      	ldr	r1, [pc, #60]	; (80002c8 <init+0x58>)
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	4613      	mov	r3, r2
 800028e:	011b      	lsls	r3, r3, #4
 8000290:	1a9b      	subs	r3, r3, r2
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	18ca      	adds	r2, r1, r3
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	4413      	add	r3, r2
 800029a:	2206      	movs	r2, #6
 800029c:	701a      	strb	r2, [r3, #0]
        for(int y = 0; y < SCREEN_HEIGHT; y++){
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	2b3b      	cmp	r3, #59	; 0x3b
 80002a8:	ddee      	ble.n	8000288 <init+0x18>
    for(int x = 0; x < SCREEN_WIDTH; x++){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	3301      	adds	r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b4f      	cmp	r3, #79	; 0x4f
 80002b4:	dde5      	ble.n	8000282 <init+0x12>
    }else{
        //nothing yet, your init
    }


}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2000136d 	.word	0x2000136d
 80002c8:	200000ac 	.word	0x200000ac

080002cc <loop>:

int loop (int key) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
    updateScreen();
 80002d4:	f000 f8d6 	bl	8000484 <updateScreen>
    if (play == menu){
 80002d8:	4b63      	ldr	r3, [pc, #396]	; (8000468 <loop+0x19c>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b03      	cmp	r3, #3
 80002de:	d104      	bne.n	80002ea <loop+0x1e>
        max_choice = total_games;
 80002e0:	4b62      	ldr	r3, [pc, #392]	; (800046c <loop+0x1a0>)
 80002e2:	781a      	ldrb	r2, [r3, #0]
 80002e4:	4b62      	ldr	r3, [pc, #392]	; (8000470 <loop+0x1a4>)
 80002e6:	701a      	strb	r2, [r3, #0]
 80002e8:	e002      	b.n	80002f0 <loop+0x24>
    }else{
        max_choice = 1;
 80002ea:	4b61      	ldr	r3, [pc, #388]	; (8000470 <loop+0x1a4>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	701a      	strb	r2, [r3, #0]
    }
    if(key == left) {
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d119      	bne.n	800032a <loop+0x5e>
        if(play < paused){
 80002f6:	4b5c      	ldr	r3, [pc, #368]	; (8000468 <loop+0x19c>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d804      	bhi.n	8000308 <loop+0x3c>
            moveSpaceship(-1);
 80002fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000302:	f001 fadd 	bl	80018c0 <moveSpaceship>
 8000306:	e00e      	b.n	8000326 <loop+0x5a>
        }else{
            if (choice == 0){
 8000308:	4b5a      	ldr	r3, [pc, #360]	; (8000474 <loop+0x1a8>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d104      	bne.n	800031a <loop+0x4e>
                choice = max_choice;
 8000310:	4b57      	ldr	r3, [pc, #348]	; (8000470 <loop+0x1a4>)
 8000312:	781a      	ldrb	r2, [r3, #0]
 8000314:	4b57      	ldr	r3, [pc, #348]	; (8000474 <loop+0x1a8>)
 8000316:	701a      	strb	r2, [r3, #0]
 8000318:	e005      	b.n	8000326 <loop+0x5a>
            }else{
                choice--;
 800031a:	4b56      	ldr	r3, [pc, #344]	; (8000474 <loop+0x1a8>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	3b01      	subs	r3, #1
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4b54      	ldr	r3, [pc, #336]	; (8000474 <loop+0x1a8>)
 8000324:	701a      	strb	r2, [r3, #0]
            }
            //QD << choice; // change to uart debug
        }
        key = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	607b      	str	r3, [r7, #4]
    }
    if(key == right) {
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2b03      	cmp	r3, #3
 800032e:	d119      	bne.n	8000364 <loop+0x98>
        if(play < paused){
 8000330:	4b4d      	ldr	r3, [pc, #308]	; (8000468 <loop+0x19c>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d803      	bhi.n	8000340 <loop+0x74>
            moveSpaceship(1);
 8000338:	2001      	movs	r0, #1
 800033a:	f001 fac1 	bl	80018c0 <moveSpaceship>
 800033e:	e00f      	b.n	8000360 <loop+0x94>
        }else{
            if (choice == max_choice){
 8000340:	4b4c      	ldr	r3, [pc, #304]	; (8000474 <loop+0x1a8>)
 8000342:	781a      	ldrb	r2, [r3, #0]
 8000344:	4b4a      	ldr	r3, [pc, #296]	; (8000470 <loop+0x1a4>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	429a      	cmp	r2, r3
 800034a:	d103      	bne.n	8000354 <loop+0x88>
                choice = 0;
 800034c:	4b49      	ldr	r3, [pc, #292]	; (8000474 <loop+0x1a8>)
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]
 8000352:	e005      	b.n	8000360 <loop+0x94>
            }else{
                choice++;
 8000354:	4b47      	ldr	r3, [pc, #284]	; (8000474 <loop+0x1a8>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b45      	ldr	r3, [pc, #276]	; (8000474 <loop+0x1a8>)
 800035e:	701a      	strb	r2, [r3, #0]
            }
            //QD << choice; // change to uart debug
        }
        key = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	607b      	str	r3, [r7, #4]
    }
    if(key == down){
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b04      	cmp	r3, #4
 8000368:	d151      	bne.n	800040e <loop+0x142>
        if (play == notPlay){
 800036a:	4b3f      	ldr	r3, [pc, #252]	; (8000468 <loop+0x19c>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d103      	bne.n	800037a <loop+0xae>
            play = inPlay;
 8000372:	4b3d      	ldr	r3, [pc, #244]	; (8000468 <loop+0x19c>)
 8000374:	2201      	movs	r2, #1
 8000376:	701a      	strb	r2, [r3, #0]
 8000378:	e047      	b.n	800040a <loop+0x13e>
        }else if(play == paused){
 800037a:	4b3b      	ldr	r3, [pc, #236]	; (8000468 <loop+0x19c>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b02      	cmp	r3, #2
 8000380:	d115      	bne.n	80003ae <loop+0xe2>
            if(choice == 0){
 8000382:	4b3c      	ldr	r3, [pc, #240]	; (8000474 <loop+0x1a8>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d105      	bne.n	8000396 <loop+0xca>
                //QD << "return"; // change to uart debug
                play = menu;
 800038a:	4b37      	ldr	r3, [pc, #220]	; (8000468 <loop+0x19c>)
 800038c:	2203      	movs	r2, #3
 800038e:	701a      	strb	r2, [r3, #0]
                init();
 8000390:	f7ff ff6e 	bl	8000270 <init>
 8000394:	e039      	b.n	800040a <loop+0x13e>
            }
            else if(choice == 1){
 8000396:	4b37      	ldr	r3, [pc, #220]	; (8000474 <loop+0x1a8>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b01      	cmp	r3, #1
 800039c:	d103      	bne.n	80003a6 <loop+0xda>
                //QD << "play on";  // change to uart debug
                play = inPlay;
 800039e:	4b32      	ldr	r3, [pc, #200]	; (8000468 <loop+0x19c>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	701a      	strb	r2, [r3, #0]
 80003a4:	e031      	b.n	800040a <loop+0x13e>
            }else{
                displayPauseMenu(game_screen);
 80003a6:	4834      	ldr	r0, [pc, #208]	; (8000478 <loop+0x1ac>)
 80003a8:	f000 fc3c 	bl	8000c24 <displayPauseMenu>
 80003ac:	e02d      	b.n	800040a <loop+0x13e>
            }

        }else if(play == menu){
 80003ae:	4b2e      	ldr	r3, [pc, #184]	; (8000468 <loop+0x19c>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b03      	cmp	r3, #3
 80003b4:	d122      	bne.n	80003fc <loop+0x130>
            if(choice == 0){
 80003b6:	4b2f      	ldr	r3, [pc, #188]	; (8000474 <loop+0x1a8>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d102      	bne.n	80003c4 <loop+0xf8>
                toggle_multiplayer();
 80003be:	f000 fed5 	bl	800116c <toggle_multiplayer>
 80003c2:	e022      	b.n	800040a <loop+0x13e>
            }else if(choice == 1){
 80003c4:	4b2b      	ldr	r3, [pc, #172]	; (8000474 <loop+0x1a8>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d106      	bne.n	80003da <loop+0x10e>
                gamechoice = 0;
 80003cc:	4b2b      	ldr	r3, [pc, #172]	; (800047c <loop+0x1b0>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80003d2:	4b25      	ldr	r3, [pc, #148]	; (8000468 <loop+0x19c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
 80003d8:	e017      	b.n	800040a <loop+0x13e>
            }
            else if(choice == 2){
 80003da:	4b26      	ldr	r3, [pc, #152]	; (8000474 <loop+0x1a8>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b02      	cmp	r3, #2
 80003e0:	d108      	bne.n	80003f4 <loop+0x128>
                gamechoice = 1;
 80003e2:	4b26      	ldr	r3, [pc, #152]	; (800047c <loop+0x1b0>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80003e8:	4b1f      	ldr	r3, [pc, #124]	; (8000468 <loop+0x19c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
                init();
 80003ee:	f7ff ff3f 	bl	8000270 <init>
 80003f2:	e00a      	b.n	800040a <loop+0x13e>
            }else{
                displayMenu(game_screen);
 80003f4:	4820      	ldr	r0, [pc, #128]	; (8000478 <loop+0x1ac>)
 80003f6:	f000 fcaf 	bl	8000d58 <displayMenu>
 80003fa:	e006      	b.n	800040a <loop+0x13e>
            }
        }
        else if(!hit){
 80003fc:	4b20      	ldr	r3, [pc, #128]	; (8000480 <loop+0x1b4>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d102      	bne.n	800040a <loop+0x13e>
            spawnBullet(0);
 8000404:	2000      	movs	r0, #0
 8000406:	f000 ff85 	bl	8001314 <spawnBullet>
        }
        key = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	607b      	str	r3, [r7, #4]
    }
    if(key == up && play < 2){
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2b02      	cmp	r3, #2
 8000412:	d10b      	bne.n	800042c <loop+0x160>
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <loop+0x19c>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d807      	bhi.n	800042c <loop+0x160>
        play = paused;
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <loop+0x19c>)
 800041e:	2202      	movs	r2, #2
 8000420:	701a      	strb	r2, [r3, #0]
        choice = 1;
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <loop+0x1a8>)
 8000424:	2201      	movs	r2, #1
 8000426:	701a      	strb	r2, [r3, #0]
        key = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	607b      	str	r3, [r7, #4]
    }

    if(play == inPlay){
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <loop+0x19c>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b01      	cmp	r3, #1
 8000432:	d10b      	bne.n	800044c <loop+0x180>

        spawnComet();
 8000434:	f000 fee2 	bl	80011fc <spawnComet>

        delayBullet();
 8000438:	f001 fd36 	bl	8001ea8 <delayBullet>

        moveComets();
 800043c:	f001 f93a 	bl	80016b4 <moveComets>
        moveBullets();
 8000440:	f001 f818 	bl	8001474 <moveBullets>
        moveEnemyBullets();
 8000444:	f001 f884 	bl	8001550 <moveEnemyBullets>

        updateScreen();
 8000448:	f000 f81c 	bl	8000484 <updateScreen>
    }if(play < paused){
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <loop+0x19c>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b01      	cmp	r3, #1
 8000452:	d803      	bhi.n	800045c <loop+0x190>

        spawnStar();
 8000454:	f000 ffb0 	bl	80013b8 <spawnStar>

        moveStars();
 8000458:	f001 f9da 	bl	8001810 <moveStars>

    }
    return key;
 800045c:	687b      	ldr	r3, [r7, #4]
}
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	2000000a 	.word	0x2000000a
 800046c:	20000004 	.word	0x20000004
 8000470:	20000000 	.word	0x20000000
 8000474:	2000136d 	.word	0x2000136d
 8000478:	200000ac 	.word	0x200000ac
 800047c:	2000136e 	.word	0x2000136e
 8000480:	2000136c 	.word	0x2000136c

08000484 <updateScreen>:


void updateScreen()
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
    if (play == menu){
 800048a:	4b2a      	ldr	r3, [pc, #168]	; (8000534 <updateScreen+0xb0>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d103      	bne.n	800049a <updateScreen+0x16>
        displayMenu(game_screen);
 8000492:	4829      	ldr	r0, [pc, #164]	; (8000538 <updateScreen+0xb4>)
 8000494:	f000 fc60 	bl	8000d58 <displayMenu>
        return;
 8000498:	e048      	b.n	800052c <updateScreen+0xa8>
    }

    //hit
    if (gamechoice == 1 && hit > 0){
 800049a:	4b28      	ldr	r3, [pc, #160]	; (800053c <updateScreen+0xb8>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d105      	bne.n	80004ae <updateScreen+0x2a>
 80004a2:	4b27      	ldr	r3, [pc, #156]	; (8000540 <updateScreen+0xbc>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <updateScreen+0x2a>
        spaceShipHitColorToggle();
 80004aa:	f001 fcb7 	bl	8001e1c <spaceShipHitColorToggle>
    }
    //background
    for(int x = 0; x < SCREEN_WIDTH; x++) {
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	e016      	b.n	80004e2 <updateScreen+0x5e>
        for(int y = 0; y < SCREEN_HEIGHT; y++) {
 80004b4:	2300      	movs	r3, #0
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	e00d      	b.n	80004d6 <updateScreen+0x52>
            game_screen[x][y] = ENC_DARK_GRAY;
 80004ba:	491f      	ldr	r1, [pc, #124]	; (8000538 <updateScreen+0xb4>)
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	4613      	mov	r3, r2
 80004c0:	011b      	lsls	r3, r3, #4
 80004c2:	1a9b      	subs	r3, r3, r2
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	18ca      	adds	r2, r1, r3
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	4413      	add	r3, r2
 80004cc:	2206      	movs	r2, #6
 80004ce:	701a      	strb	r2, [r3, #0]
        for(int y = 0; y < SCREEN_HEIGHT; y++) {
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	3301      	adds	r3, #1
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	2b3b      	cmp	r3, #59	; 0x3b
 80004da:	ddee      	ble.n	80004ba <updateScreen+0x36>
    for(int x = 0; x < SCREEN_WIDTH; x++) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3301      	adds	r3, #1
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2b4f      	cmp	r3, #79	; 0x4f
 80004e6:	dde5      	ble.n	80004b4 <updateScreen+0x30>
        }
    }

    if(gamechoice == 1){
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <updateScreen+0xb8>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d108      	bne.n	8000502 <updateScreen+0x7e>
        //stars

        displayStars(game_screen);
 80004f0:	4811      	ldr	r0, [pc, #68]	; (8000538 <updateScreen+0xb4>)
 80004f2:	f001 fb01 	bl	8001af8 <displayStars>

        //bullets
        displayAmmo(game_screen);
 80004f6:	4810      	ldr	r0, [pc, #64]	; (8000538 <updateScreen+0xb4>)
 80004f8:	f001 fb2c 	bl	8001b54 <displayAmmo>

        // comets
        displayComets(game_screen);
 80004fc:	480e      	ldr	r0, [pc, #56]	; (8000538 <updateScreen+0xb4>)
 80004fe:	f001 fb7f 	bl	8001c00 <displayComets>
    }else{
        //nothin yet, here comes your things
    }

    //start
    if(!play){
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <updateScreen+0xb0>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d006      	beq.n	8000518 <updateScreen+0x94>
        //displayText(game_screen,"START", SCREEN_WIDTH - (SCREEN_WIDTH / 2)-14, SCREEN_HEIGHT - (SCREEN_HEIGHT / 2) - 4, WHITE);
    }
    else if(play == paused){
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <updateScreen+0xb0>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d102      	bne.n	8000518 <updateScreen+0x94>
        displayPauseMenu(game_screen);
 8000512:	4809      	ldr	r0, [pc, #36]	; (8000538 <updateScreen+0xb4>)
 8000514:	f000 fb86 	bl	8000c24 <displayPauseMenu>
    }

    if(gamechoice == 1){
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <updateScreen+0xb8>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d105      	bne.n	800052c <updateScreen+0xa8>
    	//spaceship
    	displaySpaceShip(game_screen);
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <updateScreen+0xb4>)
 8000522:	f001 fbcb 	bl	8001cbc <displaySpaceShip>

    	//lives
    	displayLives(game_screen);
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <updateScreen+0xb4>)
 8000528:	f001 fc50 	bl	8001dcc <displayLives>
        //displayText(game_screen,"bricks", SCREEN_WIDTH - (SCREEN_WIDTH / 2) - 18, SCREEN_HEIGHT - (SCREEN_HEIGHT / 2) + 5, WHITE);
        //nothin yet, here comes your things
    }


}
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000000a 	.word	0x2000000a
 8000538:	200000ac 	.word	0x200000ac
 800053c:	2000136e 	.word	0x2000136e
 8000540:	2000136c 	.word	0x2000136c

08000544 <_write>:
int16_t angle = 90;
uint32_t millis = 0;
uint32_t premillis = 0;
extern uint8_t game_screen[SCREEN_WIDTH][SCREEN_HEIGHT];

int _write(int file, char *ptr, int len) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d003      	beq.n	800055e <_write+0x1a>
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	2b02      	cmp	r3, #2
 800055a:	d015      	beq.n	8000588 <_write+0x44>
 800055c:	e029      	b.n	80005b2 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	b29a      	uxth	r2, r3
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
 8000566:	68b9      	ldr	r1, [r7, #8]
 8000568:	481a      	ldr	r0, [pc, #104]	; (80005d4 <_write+0x90>)
 800056a:	f005 fc49 	bl	8005e00 <HAL_UART_Transmit>
 800056e:	4603      	mov	r3, r0
 8000570:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000572:	7dfb      	ldrb	r3, [r7, #23]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d024      	beq.n	80005c2 <_write+0x7e>
			errno = EIO;
 8000578:	f006 f818 	bl	80065ac <__errno>
 800057c:	4603      	mov	r3, r0
 800057e:	2205      	movs	r2, #5
 8000580:	601a      	str	r2, [r3, #0]
			return -1;
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	e020      	b.n	80005ca <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	b29a      	uxth	r2, r3
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	68b9      	ldr	r1, [r7, #8]
 8000592:	4810      	ldr	r0, [pc, #64]	; (80005d4 <_write+0x90>)
 8000594:	f005 fc34 	bl	8005e00 <HAL_UART_Transmit>
 8000598:	4603      	mov	r3, r0
 800059a:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 800059c:	7dfb      	ldrb	r3, [r7, #23]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d011      	beq.n	80005c6 <_write+0x82>
			errno = EIO;
 80005a2:	f006 f803 	bl	80065ac <__errno>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2205      	movs	r2, #5
 80005aa:	601a      	str	r2, [r3, #0]
			return -1;
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	e00b      	b.n	80005ca <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 80005b2:	f005 fffb 	bl	80065ac <__errno>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2209      	movs	r2, #9
 80005ba:	601a      	str	r2, [r3, #0]
        return -1;
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	e003      	b.n	80005ca <_write+0x86>
        break;
 80005c2:	bf00      	nop
 80005c4:	e000      	b.n	80005c8 <_write+0x84>
        break;
 80005c6:	bf00      	nop
    }
    return len;
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200014b0 	.word	0x200014b0

080005d8 <read_MPU_mem>:

uint8_t read_MPU_mem(uint8_t reg_addr){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af04      	add	r7, sp, #16
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9302      	str	r3, [sp, #8]
 80005ea:	2301      	movs	r3, #1
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	f107 030f 	add.w	r3, r7, #15
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2301      	movs	r3, #1
 80005f6:	21d0      	movs	r1, #208	; 0xd0
 80005f8:	4807      	ldr	r0, [pc, #28]	; (8000618 <read_MPU_mem+0x40>)
 80005fa:	f002 fec3 	bl	8003384 <HAL_I2C_Mem_Read>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d101      	bne.n	8000608 <read_MPU_mem+0x30>
		return data;
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	e003      	b.n	8000610 <read_MPU_mem+0x38>
	}
	else{
		printf("mem not read\r\n");
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <read_MPU_mem+0x44>)
 800060a:	f006 f887 	bl	800671c <puts>
		return 0;
 800060e:	2300      	movs	r3, #0
	}
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20001370 	.word	0x20001370
 800061c:	080077b4 	.word	0x080077b4

08000620 <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af04      	add	r7, sp, #16
 8000626:	4603      	mov	r3, r0
 8000628:	460a      	mov	r2, r1
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	4613      	mov	r3, r2
 800062e:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	b29a      	uxth	r2, r3
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	9302      	str	r3, [sp, #8]
 8000638:	2301      	movs	r3, #1
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	1dbb      	adds	r3, r7, #6
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2301      	movs	r3, #1
 8000642:	21d1      	movs	r1, #209	; 0xd1
 8000644:	4806      	ldr	r0, [pc, #24]	; (8000660 <write_MPU_mem+0x40>)
 8000646:	f002 fd89 	bl	800315c <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <write_MPU_mem+0x44>)
 8000652:	f006 f863 	bl	800671c <puts>
    }
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20001370 	.word	0x20001370
 8000664:	080077c4 	.word	0x080077c4

08000668 <read_y_accel>:

void read_y_accel(){
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	uint8_t LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 800066e:	203e      	movs	r0, #62	; 0x3e
 8000670:	f7ff ffb2 	bl	80005d8 <read_MPU_mem>
 8000674:	4603      	mov	r3, r0
 8000676:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 8000678:	203d      	movs	r0, #61	; 0x3d
 800067a:	f7ff ffad 	bl	80005d8 <read_MPU_mem>
 800067e:	4603      	mov	r3, r0
 8000680:	71bb      	strb	r3, [r7, #6]

	ay = (((int16_t)MSByte << 8) | LSByte);
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	b21a      	sxth	r2, r3
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	b21b      	sxth	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b21a      	sxth	r2, r3
 8000690:	4b02      	ldr	r3, [pc, #8]	; (800069c <read_y_accel+0x34>)
 8000692:	801a      	strh	r2, [r3, #0]

}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20001538 	.word	0x20001538

080006a0 <init_MPU>:

void init_MPU(){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 80006a4:	2100      	movs	r1, #0
 80006a6:	206b      	movs	r0, #107	; 0x6b
 80006a8:	f7ff ffba 	bl	8000620 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 80006ac:	2107      	movs	r1, #7
 80006ae:	2019      	movs	r0, #25
 80006b0:	f7ff ffb6 	bl	8000620 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 80006b4:	2100      	movs	r1, #0
 80006b6:	201b      	movs	r0, #27
 80006b8:	f7ff ffb2 	bl	8000620 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 80006bc:	2100      	movs	r1, #0
 80006be:	201c      	movs	r0, #28
 80006c0:	f7ff ffae 	bl	8000620 <write_MPU_mem>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <print_balk_test>:
void print_balk_test(uint64_t color){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af02      	add	r7, sp, #8
 80006ce:	e9c7 0100 	strd	r0, r1, [r7]
		for (int i = 0; i < 90; i++) {
			Displ_Pixel(x + i, 240 - 5 + j, color);
		}
	}
	*/
	Displ_FillArea(x, 235, 88, 3, color);
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <print_balk_test+0x24>)
 80006d4:	8818      	ldrh	r0, [r3, #0]
 80006d6:	883b      	ldrh	r3, [r7, #0]
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	2303      	movs	r3, #3
 80006dc:	2258      	movs	r2, #88	; 0x58
 80006de:	21eb      	movs	r1, #235	; 0xeb
 80006e0:	f001 ffd2 	bl	8002688 <Displ_FillArea>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000002 	.word	0x20000002

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f4:	f002 f94c 	bl	8002990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f87a 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 f9ac 	bl	8000a58 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000700:	f000 f8cc 	bl	800089c <MX_I2C2_Init>
  MX_SPI2_Init();
 8000704:	f000 f90a 	bl	800091c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000708:	f000 f946 	bl	8000998 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800070c:	f000 f974 	bl	80009f8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000710:	2064      	movs	r0, #100	; 0x64
 8000712:	f002 f9a3 	bl	8002a5c <HAL_Delay>
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 8000716:	2364      	movs	r3, #100	; 0x64
 8000718:	2201      	movs	r2, #1
 800071a:	21d0      	movs	r1, #208	; 0xd0
 800071c:	4829      	ldr	r0, [pc, #164]	; (80007c4 <main+0xd4>)
 800071e:	f002 ff4b 	bl	80035b8 <HAL_I2C_IsDeviceReady>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d105      	bne.n	8000734 <main+0x44>
	  printf("succesfully communicated\n\r");
 8000728:	4827      	ldr	r0, [pc, #156]	; (80007c8 <main+0xd8>)
 800072a:	f005 ff71 	bl	8006610 <iprintf>
	  init_MPU();
 800072e:	f7ff ffb7 	bl	80006a0 <init_MPU>
 8000732:	e002      	b.n	800073a <main+0x4a>
  }
  else{
	  printf("i2C not found\n\r");
 8000734:	4825      	ldr	r0, [pc, #148]	; (80007cc <main+0xdc>)
 8000736:	f005 ff6b 	bl	8006610 <iprintf>
  }

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 800073a:	2001      	movs	r0, #1
 800073c:	f001 ff2e 	bl	800259c <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 8000740:	2000      	movs	r0, #0
 8000742:	f002 f8df 	bl	8002904 <Displ_CLS>
          }
      }

  }
*/
  print_balk_test(RED);
 8000746:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800074a:	f04f 0100 	mov.w	r1, #0
 800074e:	f7ff ffbb 	bl	80006c8 <print_balk_test>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(1);
 8000752:	2001      	movs	r0, #1
 8000754:	f002 f982 	bl	8002a5c <HAL_Delay>

      read_y_accel();
 8000758:	f7ff ff86 	bl	8000668 <read_y_accel>
      if (ay > 3000){
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <main+0xe0>)
 800075e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000762:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000766:	4293      	cmp	r3, r2
 8000768:	dd0a      	ble.n	8000780 <main+0x90>
          printf("going right\r\n");
 800076a:	481a      	ldr	r0, [pc, #104]	; (80007d4 <main+0xe4>)
 800076c:	f005 ffd6 	bl	800671c <puts>
          if(x < 320 - 88){
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <main+0xe8>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	2be7      	cmp	r3, #231	; 0xe7
 8000776:	d817      	bhi.n	80007a8 <main+0xb8>
        	  //print_balk_test(BLACK);
        	  //x += 1;
        	  //print_balk_test(RED);
        	  key = right;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <main+0xec>)
 800077a:	2203      	movs	r2, #3
 800077c:	701a      	strb	r2, [r3, #0]
 800077e:	e013      	b.n	80007a8 <main+0xb8>
          }
      }
      else if (ay < -3000){
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <main+0xe0>)
 8000782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000786:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <main+0xf0>)
 8000788:	4293      	cmp	r3, r2
 800078a:	da0a      	bge.n	80007a2 <main+0xb2>
          printf("going left\r\n");
 800078c:	4815      	ldr	r0, [pc, #84]	; (80007e4 <main+0xf4>)
 800078e:	f005 ffc5 	bl	800671c <puts>
          if(x > 0){
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <main+0xe8>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d006      	beq.n	80007a8 <main+0xb8>
        	  //print_balk_test(BLACK);
        	  //x -= 1;
        	  //print_balk_test(RED);
        	  key = left;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <main+0xec>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	e002      	b.n	80007a8 <main+0xb8>
          }
      }
      else{
          printf("level\r\n");
 80007a2:	4811      	ldr	r0, [pc, #68]	; (80007e8 <main+0xf8>)
 80007a4:	f005 ffba 	bl	800671c <puts>
      }
      key = loop(key);
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <main+0xec>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd8d 	bl	80002cc <loop>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <main+0xec>)
 80007b8:	701a      	strb	r2, [r3, #0]
      //Displ_FillArea(0, 0, 320, 240, RED);
      displ_game_screen(game_screen);
 80007ba:	480c      	ldr	r0, [pc, #48]	; (80007ec <main+0xfc>)
 80007bc:	f002 f81c 	bl	80027f8 <displ_game_screen>
      HAL_Delay(1);
 80007c0:	e7c7      	b.n	8000752 <main+0x62>
 80007c2:	bf00      	nop
 80007c4:	20001370 	.word	0x20001370
 80007c8:	080077d8 	.word	0x080077d8
 80007cc:	080077f4 	.word	0x080077f4
 80007d0:	20001538 	.word	0x20001538
 80007d4:	08007804 	.word	0x08007804
 80007d8:	20000002 	.word	0x20000002
 80007dc:	2000153a 	.word	0x2000153a
 80007e0:	fffff448 	.word	0xfffff448
 80007e4:	08007814 	.word	0x08007814
 80007e8:	08007820 	.word	0x08007820
 80007ec:	200000ac 	.word	0x200000ac

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09c      	sub	sp, #112	; 0x70
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007fa:	2228      	movs	r2, #40	; 0x28
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f005 fefe 	bl	8006600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2230      	movs	r2, #48	; 0x30
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f005 fef0 	bl	8006600 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000820:	2302      	movs	r3, #2
 8000822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000828:	2310      	movs	r3, #16
 800082a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082c:	2302      	movs	r3, #2
 800082e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000834:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000838:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800083e:	4618      	mov	r0, r3
 8000840:	f003 fb14 	bl	8003e6c <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800084a:	f000 f9e5 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2302      	movs	r3, #2
 8000854:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000864:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f004 fb3c 	bl	8004ee8 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000876:	f000 f9cf 	bl	8000c18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	4618      	mov	r0, r3
 8000886:	f004 fd65 	bl	8005354 <HAL_RCCEx_PeriphCLKConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000890:	f000 f9c2 	bl	8000c18 <Error_Handler>
  }
}
 8000894:	bf00      	nop
 8000896:	3770      	adds	r7, #112	; 0x70
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_I2C2_Init+0x74>)
 80008a2:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <MX_I2C2_Init+0x78>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_I2C2_Init+0x74>)
 80008a8:	4a1b      	ldr	r2, [pc, #108]	; (8000918 <MX_I2C2_Init+0x7c>)
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_I2C2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_I2C2_Init+0x74>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_I2C2_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_I2C2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_I2C2_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_I2C2_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008d6:	480e      	ldr	r0, [pc, #56]	; (8000910 <MX_I2C2_Init+0x74>)
 80008d8:	f002 fbb0 	bl	800303c <HAL_I2C_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008e2:	f000 f999 	bl	8000c18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <MX_I2C2_Init+0x74>)
 80008ea:	f003 fa27 	bl	8003d3c <HAL_I2CEx_ConfigAnalogFilter>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008f4:	f000 f990 	bl	8000c18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_I2C2_Init+0x74>)
 80008fc:	f003 fa69 	bl	8003dd2 <HAL_I2CEx_ConfigDigitalFilter>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000906:	f000 f987 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20001370 	.word	0x20001370
 8000914:	40005800 	.word	0x40005800
 8000918:	2000090e 	.word	0x2000090e

0800091c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_SPI2_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_SPI2_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_SPI2_Init+0x74>)
 8000928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800092c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_SPI2_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SPI2_Init+0x74>)
 8000936:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800093a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SPI2_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_SPI2_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SPI2_Init+0x74>)
 800094a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI2_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SPI2_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI2_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_SPI2_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI2_Init+0x74>)
 800096a:	2207      	movs	r2, #7
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_SPI2_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI2_Init+0x74>)
 8000976:	2208      	movs	r2, #8
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_SPI2_Init+0x74>)
 800097c:	f004 fe6e 	bl	800565c <HAL_SPI_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 f947 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200013c4 	.word	0x200013c4
 8000994:	40003800 	.word	0x40003800

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <MX_USART2_UART_Init+0x5c>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009a4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART2_UART_Init+0x58>)
 80009dc:	f005 f9c2 	bl	8005d64 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 f917 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20001428 	.word	0x20001428
 80009f4:	40004400 	.word	0x40004400

080009f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 80009fe:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <MX_USART3_UART_Init+0x5c>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a04:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000a08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a3c:	f005 f992 	bl	8005d64 <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a46:	f000 f8e7 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200014b0 	.word	0x200014b0
 8000a54:	40004800 	.word	0x40004800

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	4b46      	ldr	r3, [pc, #280]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4a45      	ldr	r2, [pc, #276]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000a74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a78:	6153      	str	r3, [r2, #20]
 8000a7a:	4b43      	ldr	r3, [pc, #268]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a86:	4b40      	ldr	r3, [pc, #256]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	4a3f      	ldr	r2, [pc, #252]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000a8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a90:	6153      	str	r3, [r2, #20]
 8000a92:	4b3d      	ldr	r3, [pc, #244]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b3a      	ldr	r3, [pc, #232]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4a39      	ldr	r2, [pc, #228]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	6153      	str	r3, [r2, #20]
 8000aaa:	4b37      	ldr	r3, [pc, #220]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	4a33      	ldr	r2, [pc, #204]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac0:	6153      	str	r3, [r2, #20]
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad4:	482d      	ldr	r0, [pc, #180]	; (8000b8c <MX_GPIO_Init+0x134>)
 8000ad6:	f002 fa81 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae4:	f002 fa7a 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8000ae8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4824      	ldr	r0, [pc, #144]	; (8000b90 <MX_GPIO_Init+0x138>)
 8000b00:	f002 f8e2 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8000b04:	2301      	movs	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1c:	f002 f8d4 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8000b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4814      	ldr	r0, [pc, #80]	; (8000b8c <MX_GPIO_Init+0x134>)
 8000b3a:	f002 f8c5 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 8000b3e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f002 f8b5 	bl	8002cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2006      	movs	r0, #6
 8000b64:	f002 f879 	bl	8002c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b68:	2006      	movs	r0, #6
 8000b6a:	f002 f892 	bl	8002c92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	2028      	movs	r0, #40	; 0x28
 8000b74:	f002 f871 	bl	8002c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b78:	2028      	movs	r0, #40	; 0x28
 8000b7a:	f002 f88a 	bl	8002c92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	48000400 	.word	0x48000400
 8000b90:	48000800 	.word	0x48000800

08000b94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
	printf("interupt!\r\n");
 8000b9e:	4818      	ldr	r0, [pc, #96]	; (8000c00 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000ba0:	f005 fdbc 	bl	800671c <puts>
	if(GPIO_Pin == LEFT_Pin){
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000baa:	d106      	bne.n	8000bba <HAL_GPIO_EXTI_Callback+0x26>
		key = left;
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x70>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
		printf("left clicked\r\n");
 8000bb2:	4815      	ldr	r0, [pc, #84]	; (8000c08 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bb4:	f005 fdb2 	bl	800671c <puts>
	}
	else if(GPIO_Pin == MIDDLE_Pin){
		key = down;
		printf("down clicked\r\n");
	}
}
 8000bb8:	e01e      	b.n	8000bf8 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == TOP_Pin){
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bc0:	d106      	bne.n	8000bd0 <HAL_GPIO_EXTI_Callback+0x3c>
		key = up;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x70>)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	701a      	strb	r2, [r3, #0]
		printf("up clicked\r\n");
 8000bc8:	4810      	ldr	r0, [pc, #64]	; (8000c0c <HAL_GPIO_EXTI_Callback+0x78>)
 8000bca:	f005 fda7 	bl	800671c <puts>
}
 8000bce:	e013      	b.n	8000bf8 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == RIGHT_Pin){
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bd6:	d106      	bne.n	8000be6 <HAL_GPIO_EXTI_Callback+0x52>
		key = right;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x70>)
 8000bda:	2203      	movs	r2, #3
 8000bdc:	701a      	strb	r2, [r3, #0]
		printf("right clicked\r\n");
 8000bde:	480c      	ldr	r0, [pc, #48]	; (8000c10 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000be0:	f005 fd9c 	bl	800671c <puts>
}
 8000be4:	e008      	b.n	8000bf8 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == MIDDLE_Pin){
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d105      	bne.n	8000bf8 <HAL_GPIO_EXTI_Callback+0x64>
		key = down;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x70>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	701a      	strb	r2, [r3, #0]
		printf("down clicked\r\n");
 8000bf2:	4808      	ldr	r0, [pc, #32]	; (8000c14 <HAL_GPIO_EXTI_Callback+0x80>)
 8000bf4:	f005 fd92 	bl	800671c <puts>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	08007828 	.word	0x08007828
 8000c04:	2000153a 	.word	0x2000153a
 8000c08:	08007834 	.word	0x08007834
 8000c0c:	08007844 	.word	0x08007844
 8000c10:	08007850 	.word	0x08007850
 8000c14:	08007860 	.word	0x08007860

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <displayPauseMenu>:
#include "debug.h"

int total_games = 2;
extern uint8_t connected;

void displayPauseMenu(uint8_t game_screen[][SCREEN_HEIGHT]){
 8000c24:	b480      	push	{r7}
 8000c26:	b08d      	sub	sp, #52	; 0x34
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
    int xcord_offset = (BUTTON_OFFSET + 2) + ((BUTTON_SIZE + 4) * choice);
 8000c2c:	4b49      	ldr	r3, [pc, #292]	; (8000d54 <displayPauseMenu+0x130>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4613      	mov	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	3316      	adds	r3, #22
 8000c3c:	60fb      	str	r3, [r7, #12]

    //box around
    for(int i = BUTTON_OFFSET; i < SCREEN_WIDTH - BUTTON_OFFSET; i++){
 8000c3e:	2314      	movs	r3, #20
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c42:	e017      	b.n	8000c74 <displayPauseMenu+0x50>
        for(int j = ycord_offset; j < ycord_offset + BUTTON_SIZE; j++){
 8000c44:	2314      	movs	r3, #20
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c48:	e00e      	b.n	8000c68 <displayPauseMenu+0x44>
            game_screen[i][j] = ENC_GRAY;
 8000c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	011b      	lsls	r3, r3, #4
 8000c50:	1a9b      	subs	r3, r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	461a      	mov	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	441a      	add	r2, r3
 8000c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c5c:	4413      	add	r3, r2
 8000c5e:	2208      	movs	r2, #8
 8000c60:	701a      	strb	r2, [r3, #0]
        for(int j = ycord_offset; j < ycord_offset + BUTTON_SIZE; j++){
 8000c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c64:	3301      	adds	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6a:	2b23      	cmp	r3, #35	; 0x23
 8000c6c:	dded      	ble.n	8000c4a <displayPauseMenu+0x26>
    for(int i = BUTTON_OFFSET; i < SCREEN_WIDTH - BUTTON_OFFSET; i++){
 8000c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c70:	3301      	adds	r3, #1
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c76:	2b3b      	cmp	r3, #59	; 0x3b
 8000c78:	dde4      	ble.n	8000c44 <displayPauseMenu+0x20>
        }
    }

    //selector
    for(int i = xcord_offset; i < xcord_offset + BUTTON_SIZE; i++){
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c7e:	e017      	b.n	8000cb0 <displayPauseMenu+0x8c>
        for(int j = ycord_offset; j < ycord_offset + BUTTON_SIZE; j++){
 8000c80:	2314      	movs	r3, #20
 8000c82:	623b      	str	r3, [r7, #32]
 8000c84:	e00e      	b.n	8000ca4 <displayPauseMenu+0x80>
            game_screen[i][j] = ENC_RED;
 8000c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c88:	4613      	mov	r3, r2
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	1a9b      	subs	r3, r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	441a      	add	r2, r3
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	4413      	add	r3, r2
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
        for(int j = ycord_offset; j < ycord_offset + BUTTON_SIZE; j++){
 8000c9e:	6a3b      	ldr	r3, [r7, #32]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	623b      	str	r3, [r7, #32]
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
 8000ca6:	2b23      	cmp	r3, #35	; 0x23
 8000ca8:	dded      	ble.n	8000c86 <displayPauseMenu+0x62>
    for(int i = xcord_offset; i < xcord_offset + BUTTON_SIZE; i++){
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	3301      	adds	r3, #1
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	330f      	adds	r3, #15
 8000cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	dde2      	ble.n	8000c80 <displayPauseMenu+0x5c>
        }
    }

    //play
    for (int i = 0; i < BUTTON_SIZE - 2; i++){
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
 8000cbe:	e01c      	b.n	8000cfa <displayPauseMenu+0xd6>
        for (int j = i; j < BUTTON_SIZE - i; j++){
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	61bb      	str	r3, [r7, #24]
 8000cc4:	e010      	b.n	8000ce8 <displayPauseMenu+0xc4>
            game_screen[xplay_offset + i][ycord_offset + j] = ENC_LIGHT_GREEN;
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	332e      	adds	r3, #46	; 0x2e
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4613      	mov	r3, r2
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	1a9b      	subs	r3, r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	441a      	add	r2, r3
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	3314      	adds	r3, #20
 8000cde:	2109      	movs	r1, #9
 8000ce0:	54d1      	strb	r1, [r2, r3]
        for (int j = i; j < BUTTON_SIZE - i; j++){
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f1c3 0310 	rsb	r3, r3, #16
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbe8      	blt.n	8000cc6 <displayPauseMenu+0xa2>
    for (int i = 0; i < BUTTON_SIZE - 2; i++){
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	2b0d      	cmp	r3, #13
 8000cfe:	dddf      	ble.n	8000cc0 <displayPauseMenu+0x9c>
        }
    }

    // go back
    for (int i = 0; i < BUTTON_SIZE - 2; i++){
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e01c      	b.n	8000d40 <displayPauseMenu+0x11c>
        for (int j = i; j < BUTTON_SIZE - i; j++){
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	e010      	b.n	8000d2e <displayPauseMenu+0x10a>
            game_screen[xback_offset + i][ycord_offset + j] = ENC_LIGHT_GREEN;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	331a      	adds	r3, #26
 8000d10:	461a      	mov	r2, r3
 8000d12:	4613      	mov	r3, r2
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	441a      	add	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	3314      	adds	r3, #20
 8000d24:	2109      	movs	r1, #9
 8000d26:	54d1      	strb	r1, [r2, r3]
        for (int j = i; j < BUTTON_SIZE - i; j++){
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f1c3 0310 	rsb	r3, r3, #16
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	dbe8      	blt.n	8000d0c <displayPauseMenu+0xe8>
    for (int i = 0; i < BUTTON_SIZE - 2; i++){
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	2b0d      	cmp	r3, #13
 8000d44:	dddf      	ble.n	8000d06 <displayPauseMenu+0xe2>
        }
    }
}
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	3734      	adds	r7, #52	; 0x34
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	2000136d 	.word	0x2000136d

08000d58 <displayMenu>:

void displayMenu(uint8_t game_screen[][SCREEN_HEIGHT]){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    int y_offset = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    int x_offset = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
    //box around
    for(int i = 0; i < total_games + 1 && i < 8; i++){
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
 8000d6c:	e04a      	b.n	8000e04 <displayMenu+0xac>
        for (int j = 3; j < 3 + BUTTON_SIZE; j++){
 8000d6e:	2303      	movs	r3, #3
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	e032      	b.n	8000dda <displayMenu+0x82>
            for (int k = 3; k < 3 + BUTTON_SIZE; k++){
 8000d74:	2303      	movs	r3, #3
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	e029      	b.n	8000dce <displayMenu+0x76>
                if(i == choice){
 8000d7a:	4b42      	ldr	r3, [pc, #264]	; (8000e84 <displayMenu+0x12c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d110      	bne.n	8000da8 <displayMenu+0x50>
                    game_screen[x_offset + j][y_offset + k] = ENC_RED;
 8000d86:	6a3a      	ldr	r2, [r7, #32]
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4613      	mov	r3, r2
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	1a9b      	subs	r3, r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	461a      	mov	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	441a      	add	r2, r3
 8000d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	440b      	add	r3, r1
 8000da2:	2101      	movs	r1, #1
 8000da4:	54d1      	strb	r1, [r2, r3]
 8000da6:	e00f      	b.n	8000dc8 <displayMenu+0x70>
                }else{
                    game_screen[x_offset + j][y_offset + k] = ENC_GRAY;
 8000da8:	6a3a      	ldr	r2, [r7, #32]
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4413      	add	r3, r2
 8000dae:	461a      	mov	r2, r3
 8000db0:	4613      	mov	r3, r2
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	1a9b      	subs	r3, r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	461a      	mov	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	441a      	add	r2, r3
 8000dbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	440b      	add	r3, r1
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	54d1      	strb	r1, [r2, r3]
            for (int k = 3; k < 3 + BUTTON_SIZE; k++){
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2b12      	cmp	r3, #18
 8000dd2:	ddd2      	ble.n	8000d7a <displayMenu+0x22>
        for (int j = 3; j < 3 + BUTTON_SIZE; j++){
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	2b12      	cmp	r3, #18
 8000dde:	ddc9      	ble.n	8000d74 <displayMenu+0x1c>

            }
        }


        if((i + 1)% 4 == 0){
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	3301      	adds	r3, #1
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d105      	bne.n	8000df8 <displayMenu+0xa0>
            x_offset = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
            y_offset += BUTTON_SIZE + 3;
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	3313      	adds	r3, #19
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
            continue;
 8000df6:	e002      	b.n	8000dfe <displayMenu+0xa6>
        }
        x_offset += BUTTON_SIZE + 3;
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	3313      	adds	r3, #19
 8000dfc:	623b      	str	r3, [r7, #32]
    for(int i = 0; i < total_games + 1 && i < 8; i++){
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3301      	adds	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <displayMenu+0x130>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	69fa      	ldr	r2, [r7, #28]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dc02      	bgt.n	8000e14 <displayMenu+0xbc>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	2b07      	cmp	r3, #7
 8000e12:	ddac      	ble.n	8000d6e <displayMenu+0x16>
    }
    displayMenuIcons(game_screen);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f000 f839 	bl	8000e8c <displayMenuIcons>

    // text

    for (int i = 0; i < SCREEN_WIDTH; i++){
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	e017      	b.n	8000e50 <displayMenu+0xf8>
        for (int j = SCREEN_HEIGHT - 16; j < SCREEN_HEIGHT; j++){
 8000e20:	232c      	movs	r3, #44	; 0x2c
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e00e      	b.n	8000e44 <displayMenu+0xec>
            game_screen[i][j] = ENC_BLACK;
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	1a9b      	subs	r3, r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	461a      	mov	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	441a      	add	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4413      	add	r3, r2
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	701a      	strb	r2, [r3, #0]
        for (int j = SCREEN_HEIGHT - 16; j < SCREEN_HEIGHT; j++){
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	3301      	adds	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b3b      	cmp	r3, #59	; 0x3b
 8000e48:	dded      	ble.n	8000e26 <displayMenu+0xce>
    for (int i = 0; i < SCREEN_WIDTH; i++){
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	2b4f      	cmp	r3, #79	; 0x4f
 8000e54:	dde4      	ble.n	8000e20 <displayMenu+0xc8>
        }
    }

    switch (choice) {
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <displayMenu+0x12c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d006      	beq.n	8000e6c <displayMenu+0x114>
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	dc06      	bgt.n	8000e70 <displayMenu+0x118>
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d006      	beq.n	8000e74 <displayMenu+0x11c>
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d006      	beq.n	8000e78 <displayMenu+0x120>
        break;
    case 2:
        //displayText(game_screen,"Space Invaders", 2, SCREEN_HEIGHT - 16, WHITE);
        break;
    default:
        break;
 8000e6a:	e001      	b.n	8000e70 <displayMenu+0x118>
        break;
 8000e6c:	bf00      	nop
 8000e6e:	e004      	b.n	8000e7a <displayMenu+0x122>
        break;
 8000e70:	bf00      	nop
 8000e72:	e002      	b.n	8000e7a <displayMenu+0x122>
        break;
 8000e74:	bf00      	nop
 8000e76:	e000      	b.n	8000e7a <displayMenu+0x122>
        break;
 8000e78:	bf00      	nop
    }
}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000136d 	.word	0x2000136d
 8000e88:	20000004 	.word	0x20000004

08000e8c <displayMenuIcons>:

void displayMenuIcons(uint8_t game_screen[][SCREEN_HEIGHT]){
 8000e8c:	b480      	push	{r7}
 8000e8e:	b093      	sub	sp, #76	; 0x4c
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

    // multiplayer
    if(connected){
 8000e94:	4b9a      	ldr	r3, [pc, #616]	; (8001100 <displayMenuIcons+0x274>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d04a      	beq.n	8000f32 <displayMenuIcons+0xa6>
        for(int j = 5; j <= BUTTON_SIZE; j++){
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8000ea0:	e00c      	b.n	8000ebc <displayMenuIcons+0x30>
            game_screen[j][5] = ENC_LIGHT_GREEN;
 8000ea2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	1a9b      	subs	r3, r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	461a      	mov	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	2209      	movs	r2, #9
 8000eb4:	715a      	strb	r2, [r3, #5]
        for(int j = 5; j <= BUTTON_SIZE; j++){
 8000eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eb8:	3301      	adds	r3, #1
 8000eba:	647b      	str	r3, [r7, #68]	; 0x44
 8000ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ebe:	2b10      	cmp	r3, #16
 8000ec0:	ddef      	ble.n	8000ea2 <displayMenuIcons+0x16>
        }
        for(int j = 1; j < 3; j++){
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8000ec6:	e010      	b.n	8000eea <displayMenuIcons+0x5e>
            game_screen[5][2 + j] = ENC_LIGHT_GREEN;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8000ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	2109      	movs	r1, #9
 8000ed4:	54d1      	strb	r1, [r2, r3]
            game_screen[BUTTON_SIZE][2 + j] = ENC_LIGHT_GREEN;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
 8000edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ede:	3302      	adds	r3, #2
 8000ee0:	2109      	movs	r1, #9
 8000ee2:	54d1      	strb	r1, [r2, r3]
        for(int j = 1; j < 3; j++){
 8000ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8000eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	ddeb      	ble.n	8000ec8 <displayMenuIcons+0x3c>
        }
        for (int j = 0; j < 2; j++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ef4:	e01a      	b.n	8000f2c <displayMenuIcons+0xa0>
            for(int k = 7; k < BUTTON_SIZE; k += 2){
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000efa:	e011      	b.n	8000f20 <displayMenuIcons+0x94>
                game_screen[2 + j + BUTTON_SIZE/2][k] = ENC_LIGHT_GREEN;
 8000efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000efe:	3302      	adds	r3, #2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4613      	mov	r3, r2
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	1a9b      	subs	r3, r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	441a      	add	r2, r3
 8000f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f14:	4413      	add	r3, r2
 8000f16:	2209      	movs	r2, #9
 8000f18:	701a      	strb	r2, [r3, #0]
            for(int k = 7; k < BUTTON_SIZE; k += 2){
 8000f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f22:	2b0f      	cmp	r3, #15
 8000f24:	ddea      	ble.n	8000efc <displayMenuIcons+0x70>
        for (int j = 0; j < 2; j++){
 8000f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f28:	3301      	adds	r3, #1
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	dde1      	ble.n	8000ef6 <displayMenuIcons+0x6a>
            }

        }
    }
    for(int j = 5; j <= BUTTON_SIZE; j++){
 8000f32:	2305      	movs	r3, #5
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
 8000f36:	e00c      	b.n	8000f52 <displayMenuIcons+0xc6>
        game_screen[j][BUTTON_SIZE] = ENC_LIGHT_GREEN;
 8000f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	1a9b      	subs	r3, r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	461a      	mov	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	2209      	movs	r2, #9
 8000f4a:	741a      	strb	r2, [r3, #16]
    for(int j = 5; j <= BUTTON_SIZE; j++){
 8000f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4e:	3301      	adds	r3, #1
 8000f50:	637b      	str	r3, [r7, #52]	; 0x34
 8000f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f54:	2b10      	cmp	r3, #16
 8000f56:	ddef      	ble.n	8000f38 <displayMenuIcons+0xac>
    }
    for(int j = 1; j < 3; j++){
 8000f58:	2301      	movs	r3, #1
 8000f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8000f5c:	e010      	b.n	8000f80 <displayMenuIcons+0xf4>
        game_screen[5][BUTTON_SIZE + j] = ENC_LIGHT_GREEN;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 8000f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f66:	3310      	adds	r3, #16
 8000f68:	2109      	movs	r1, #9
 8000f6a:	54d1      	strb	r1, [r2, r3]
        game_screen[BUTTON_SIZE][BUTTON_SIZE + j] = ENC_LIGHT_GREEN;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
 8000f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f74:	3310      	adds	r3, #16
 8000f76:	2109      	movs	r1, #9
 8000f78:	54d1      	strb	r1, [r2, r3]
    for(int j = 1; j < 3; j++){
 8000f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8000f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	ddeb      	ble.n	8000f5e <displayMenuIcons+0xd2>
    }

    for (int j = 0; j < 2; j++){
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f8a:	e01a      	b.n	8000fc2 <displayMenuIcons+0x136>
        for(int k = 6; k < BUTTON_SIZE; k += 2){
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f90:	e011      	b.n	8000fb6 <displayMenuIcons+0x12a>
            game_screen[2 + j + BUTTON_SIZE/2][k] = ENC_LIGHT_GREEN;
 8000f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f94:	3302      	adds	r3, #2
 8000f96:	461a      	mov	r2, r3
 8000f98:	4613      	mov	r3, r2
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	1a9b      	subs	r3, r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	441a      	add	r2, r3
 8000fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000faa:	4413      	add	r3, r2
 8000fac:	2209      	movs	r2, #9
 8000fae:	701a      	strb	r2, [r3, #0]
        for(int k = 6; k < BUTTON_SIZE; k += 2){
 8000fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	ddea      	ble.n	8000f92 <displayMenuIcons+0x106>
    for (int j = 0; j < 2; j++){
 8000fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	dde1      	ble.n	8000f8c <displayMenuIcons+0x100>
        }

    }

    // brick
    for(int j = 10; j < 15; j++){
 8000fc8:	230a      	movs	r3, #10
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
 8000fcc:	e00e      	b.n	8000fec <displayMenuIcons+0x160>
        game_screen[BUTTON_SIZE + j][BUTTON_SIZE] = ENC_LIGHT_GREEN;
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	3310      	adds	r3, #16
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	2209      	movs	r2, #9
 8000fe4:	741a      	strb	r2, [r3, #16]
    for(int j = 10; j < 15; j++){
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	3301      	adds	r3, #1
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	2b0e      	cmp	r3, #14
 8000ff0:	dded      	ble.n	8000fce <displayMenuIcons+0x142>
    }
    for(int j = 5; j < BUTTON_SIZE; j++){
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	623b      	str	r3, [r7, #32]
 8000ff6:	e010      	b.n	800101a <displayMenuIcons+0x18e>
        game_screen[BUTTON_SIZE + 7][j] = ENC_LIGHT_GREEN;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f203 5264 	addw	r2, r3, #1380	; 0x564
 8000ffe:	6a3b      	ldr	r3, [r7, #32]
 8001000:	4413      	add	r3, r2
 8001002:	2209      	movs	r2, #9
 8001004:	701a      	strb	r2, [r3, #0]
        game_screen[BUTTON_SIZE * 2 + 4][j] = ENC_LIGHT_GREEN;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 6207 	add.w	r2, r3, #2160	; 0x870
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	4413      	add	r3, r2
 8001010:	2209      	movs	r2, #9
 8001012:	701a      	strb	r2, [r3, #0]
    for(int j = 5; j < BUTTON_SIZE; j++){
 8001014:	6a3b      	ldr	r3, [r7, #32]
 8001016:	3301      	adds	r3, #1
 8001018:	623b      	str	r3, [r7, #32]
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	ddeb      	ble.n	8000ff8 <displayMenuIcons+0x16c>
    }
    game_screen[BUTTON_SIZE + 10][BUTTON_SIZE - 5] = ENC_LIGHT_GREEN;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8001026:	2209      	movs	r2, #9
 8001028:	72da      	strb	r2, [r3, #11]

    //spaceinvaders
    uint8_t spaceShipX = BUTTON_SIZE * 2 + 15;
 800102a:	232f      	movs	r3, #47	; 0x2f
 800102c:	73fb      	strb	r3, [r7, #15]
    uint8_t spaceShipY = BUTTON_SIZE - 2;
 800102e:	230e      	movs	r3, #14
 8001030:	73bb      	strb	r3, [r7, #14]

    for (int i = spaceShipX - SPACESHIP_WIDTH / 2; i <= spaceShipX + SPACESHIP_WIDTH / 2; i++) {
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	3b02      	subs	r3, #2
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	e057      	b.n	80010ea <displayMenuIcons+0x25e>
        for (int j = spaceShipY - SPACESHIP_HEIGHT / 2; j <= spaceShipY + SPACESHIP_HEIGHT / 2; j++) {
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	3b02      	subs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
 8001040:	e04b      	b.n	80010da <displayMenuIcons+0x24e>
            if (i == spaceShipX && j != spaceShipY + SPACESHIP_HEIGHT / 2){
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	429a      	cmp	r2, r3
 8001048:	d111      	bne.n	800106e <displayMenuIcons+0x1e2>
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	3302      	adds	r3, #2
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	429a      	cmp	r2, r3
 8001052:	d00c      	beq.n	800106e <displayMenuIcons+0x1e2>
                game_screen[i][j] = ENC_LIGHT_GREEN;
 8001054:	69fa      	ldr	r2, [r7, #28]
 8001056:	4613      	mov	r3, r2
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	1a9b      	subs	r3, r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	441a      	add	r2, r3
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	4413      	add	r3, r2
 8001068:	2209      	movs	r2, #9
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	e032      	b.n	80010d4 <displayMenuIcons+0x248>
            }else if((i == spaceShipX - SPACESHIP_WIDTH / 2 || i == spaceShipX + SPACESHIP_WIDTH / 2) && j != spaceShipY - SPACESHIP_HEIGHT / 2){
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	3b02      	subs	r3, #2
 8001072:	69fa      	ldr	r2, [r7, #28]
 8001074:	429a      	cmp	r2, r3
 8001076:	d004      	beq.n	8001082 <displayMenuIcons+0x1f6>
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	3302      	adds	r3, #2
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	429a      	cmp	r2, r3
 8001080:	d111      	bne.n	80010a6 <displayMenuIcons+0x21a>
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	3b02      	subs	r3, #2
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	429a      	cmp	r2, r3
 800108a:	d00c      	beq.n	80010a6 <displayMenuIcons+0x21a>
                game_screen[i][j] = ENC_LIGHT_GREEN;
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	4613      	mov	r3, r2
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	441a      	add	r2, r3
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	4413      	add	r3, r2
 80010a0:	2209      	movs	r2, #9
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e016      	b.n	80010d4 <displayMenuIcons+0x248>
            }else if((i == spaceShipX || spaceShipX ) && j == spaceShipY - (SPACESHIP_HEIGHT / 2) + 2){
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d002      	beq.n	80010b4 <displayMenuIcons+0x228>
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00f      	beq.n	80010d4 <displayMenuIcons+0x248>
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d10b      	bne.n	80010d4 <displayMenuIcons+0x248>
                game_screen[i][j] = ENC_LIGHT_GREEN;
 80010bc:	69fa      	ldr	r2, [r7, #28]
 80010be:	4613      	mov	r3, r2
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	461a      	mov	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	441a      	add	r2, r3
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	4413      	add	r3, r2
 80010d0:	2209      	movs	r2, #9
 80010d2:	701a      	strb	r2, [r3, #0]
        for (int j = spaceShipY - SPACESHIP_HEIGHT / 2; j <= spaceShipY + SPACESHIP_HEIGHT / 2; j++) {
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	3301      	adds	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	7bbb      	ldrb	r3, [r7, #14]
 80010dc:	3302      	adds	r3, #2
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	ddae      	ble.n	8001042 <displayMenuIcons+0x1b6>
    for (int i = spaceShipX - SPACESHIP_WIDTH / 2; i <= spaceShipX + SPACESHIP_WIDTH / 2; i++) {
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	3301      	adds	r3, #1
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	3302      	adds	r3, #2
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dda2      	ble.n	800103a <displayMenuIcons+0x1ae>
            }
        }
    }
    for (int i = 0; i < 3; i++){
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	e01b      	b.n	8001132 <displayMenuIcons+0x2a6>
        for (int j = 6; j < 9; j++){
 80010fa:	2306      	movs	r3, #6
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	e012      	b.n	8001126 <displayMenuIcons+0x29a>
 8001100:	2000153b 	.word	0x2000153b
            game_screen[BUTTON_SIZE * 3 + i][j] = ENC_LIGHT_GREEN;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	3330      	adds	r3, #48	; 0x30
 8001108:	461a      	mov	r2, r3
 800110a:	4613      	mov	r3, r2
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	1a9b      	subs	r3, r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	461a      	mov	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	441a      	add	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4413      	add	r3, r2
 800111c:	2209      	movs	r2, #9
 800111e:	701a      	strb	r2, [r3, #0]
        for (int j = 6; j < 9; j++){
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	3301      	adds	r3, #1
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	2b08      	cmp	r3, #8
 800112a:	ddeb      	ble.n	8001104 <displayMenuIcons+0x278>
    for (int i = 0; i < 3; i++){
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	3301      	adds	r3, #1
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2b02      	cmp	r3, #2
 8001136:	dde0      	ble.n	80010fa <displayMenuIcons+0x26e>
        }
    }



}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	374c      	adds	r7, #76	; 0x4c
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <check_availability>:

uint8_t emulate = 1;
uint8_t connected = 0;


void check_availability(){
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
    //QD << "(mockup) is player 2 there?";  // change to uart debug
    if(emulate /*or answer was received */){
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <check_availability+0x1c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <check_availability+0x12>
        connected = 1;
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <check_availability+0x20>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
        // QD << "(mockup) player 2 connected";  // change to uart debug
    }
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	20000008 	.word	0x20000008
 8001168:	2000153b 	.word	0x2000153b

0800116c <toggle_multiplayer>:

void toggle_multiplayer(){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    if(connected){
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <toggle_multiplayer+0x1c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <toggle_multiplayer+0x14>
        //QD << "(mockup) stoping multiplayer";  // change to uart debug
        connected = 0;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <toggle_multiplayer+0x1c>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
    }else{
        //QD << "(mockup) starting multiplayer";  // change to uart debug
        check_availability();
    }

}
 800117e:	e001      	b.n	8001184 <toggle_multiplayer+0x18>
        check_availability();
 8001180:	f7ff ffe2 	bl	8001148 <check_availability>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000153b 	.word	0x2000153b

0800118c <initSpaceInvaders>:
uint32_t spaceshipCurrentColor = ENC_RED;
uint8_t hit_graph_counter = 60;
uint8_t in_multiplayer = 1;
extern uint8_t connected;

void initSpaceInvaders(){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    money = 0;
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <initSpaceInvaders+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
    lives = 3;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <initSpaceInvaders+0x44>)
 8001198:	2203      	movs	r2, #3
 800119a:	701a      	strb	r2, [r3, #0]

    // Seed the random number generator
    //srand(static_cast<quint64>(QDateTime::currentMSecsSinceEpoch()));
    //comet_delay = rand() % ((20 + 1) - 5) + 5;
    comet_delay = 15;
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <initSpaceInvaders+0x48>)
 800119e:	220f      	movs	r2, #15
 80011a0:	701a      	strb	r2, [r3, #0]

    initSpaceShip();
 80011a2:	f000 f81f 	bl	80011e4 <initSpaceShip>
    initAmmo(&ammo,0);
 80011a6:	2100      	movs	r1, #0
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <initSpaceInvaders+0x4c>)
 80011aa:	f000 fc2f 	bl	8001a0c <initAmmo>
    if(in_multiplayer){
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <initSpaceInvaders+0x50>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <initSpaceInvaders+0x32>
        initAmmo(&enemy_ammo,1);
 80011b6:	2101      	movs	r1, #1
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <initSpaceInvaders+0x54>)
 80011ba:	f000 fc27 	bl	8001a0c <initAmmo>
    }

    initComets();
 80011be:	f000 fc4d 	bl	8001a5c <initComets>
    initStars();
 80011c2:	f000 fc75 	bl	8001ab0 <initStars>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200015a0 	.word	0x200015a0
 80011d0:	20000009 	.word	0x20000009
 80011d4:	200015a4 	.word	0x200015a4
 80011d8:	2000153c 	.word	0x2000153c
 80011dc:	20000015 	.word	0x20000015
 80011e0:	2000154c 	.word	0x2000154c

080011e4 <initSpaceShip>:

void initSpaceShip(){
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
    SpaceShip.x = SCREEN_WIDTH/2;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <initSpaceShip+0x14>)
 80011ea:	2228      	movs	r2, #40	; 0x28
 80011ec:	701a      	strb	r2, [r3, #0]
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	2000000c 	.word	0x2000000c

080011fc <spawnComet>:

void spawnComet(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 8001200:	4b3f      	ldr	r3, [pc, #252]	; (8001300 <spawnComet+0x104>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d172      	bne.n	80012ee <spawnComet+0xf2>
 8001208:	4b3e      	ldr	r3, [pc, #248]	; (8001304 <spawnComet+0x108>)
 800120a:	f993 3000 	ldrsb.w	r3, [r3]
 800120e:	2b09      	cmp	r3, #9
 8001210:	dc6d      	bgt.n	80012ee <spawnComet+0xf2>
        Comet.comet_ar[Comet.in_play].x = rand() % ((PLAYABLE_MAX - 1) - PLAYABLE_OFFSET) + PLAYABLE_OFFSET;
 8001212:	f005 fa8b 	bl	800672c <rand>
 8001216:	4601      	mov	r1, r0
 8001218:	4b3b      	ldr	r3, [pc, #236]	; (8001308 <spawnComet+0x10c>)
 800121a:	fb83 2301 	smull	r2, r3, r3, r1
 800121e:	115a      	asrs	r2, r3, #5
 8001220:	17cb      	asrs	r3, r1, #31
 8001222:	1ad2      	subs	r2, r2, r3
 8001224:	4613      	mov	r3, r2
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	1aca      	subs	r2, r1, r3
 8001230:	b2d3      	uxtb	r3, r2
 8001232:	4a34      	ldr	r2, [pc, #208]	; (8001304 <spawnComet+0x108>)
 8001234:	f992 2000 	ldrsb.w	r2, [r2]
 8001238:	4610      	mov	r0, r2
 800123a:	3305      	adds	r3, #5
 800123c:	b2d9      	uxtb	r1, r3
 800123e:	4a31      	ldr	r2, [pc, #196]	; (8001304 <spawnComet+0x108>)
 8001240:	0083      	lsls	r3, r0, #2
 8001242:	4413      	add	r3, r2
 8001244:	460a      	mov	r2, r1
 8001246:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[Comet.in_play].y = 0;
 8001248:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <spawnComet+0x108>)
 800124a:	f993 3000 	ldrsb.w	r3, [r3]
 800124e:	4a2d      	ldr	r2, [pc, #180]	; (8001304 <spawnComet+0x108>)
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	2200      	movs	r2, #0
 8001256:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[Comet.in_play].size = rand() % ((MAX_COMET_SIZE + 1) - MIN_COMET_SIZE) + MIN_COMET_SIZE;
 8001258:	f005 fa68 	bl	800672c <rand>
 800125c:	4602      	mov	r2, r0
 800125e:	4b2b      	ldr	r3, [pc, #172]	; (800130c <spawnComet+0x110>)
 8001260:	fb83 3102 	smull	r3, r1, r3, r2
 8001264:	17d3      	asrs	r3, r2, #31
 8001266:	1ac9      	subs	r1, r1, r3
 8001268:	460b      	mov	r3, r1
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	440b      	add	r3, r1
 800126e:	1ad1      	subs	r1, r2, r3
 8001270:	b2cb      	uxtb	r3, r1
 8001272:	3302      	adds	r3, #2
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b23      	ldr	r3, [pc, #140]	; (8001304 <spawnComet+0x108>)
 8001278:	f993 3000 	ldrsb.w	r3, [r3]
 800127c:	b251      	sxtb	r1, r2
 800127e:	4a21      	ldr	r2, [pc, #132]	; (8001304 <spawnComet+0x108>)
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	460a      	mov	r2, r1
 8001286:	70da      	strb	r2, [r3, #3]

        Comet.comet_ar[Comet.in_play].coins = 7 - Comet.comet_ar[Comet.in_play].size;
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <spawnComet+0x108>)
 800128a:	f993 3000 	ldrsb.w	r3, [r3]
 800128e:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <spawnComet+0x108>)
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <spawnComet+0x108>)
 80012a2:	f993 3000 	ldrsb.w	r3, [r3]
 80012a6:	b251      	sxtb	r1, r2
 80012a8:	4a16      	ldr	r2, [pc, #88]	; (8001304 <spawnComet+0x108>)
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	460a      	mov	r2, r1
 80012b0:	711a      	strb	r2, [r3, #4]
        comet_delay = rand() % ((20 + 1) - 10) + 5;
 80012b2:	f005 fa3b 	bl	800672c <rand>
 80012b6:	4601      	mov	r1, r0
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <spawnComet+0x114>)
 80012ba:	fb83 2301 	smull	r2, r3, r3, r1
 80012be:	105a      	asrs	r2, r3, #1
 80012c0:	17cb      	asrs	r3, r1, #31
 80012c2:	1ad2      	subs	r2, r2, r3
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	1aca      	subs	r2, r1, r3
 80012d0:	b2d3      	uxtb	r3, r2
 80012d2:	3305      	adds	r3, #5
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <spawnComet+0x104>)
 80012d8:	701a      	strb	r2, [r3, #0]
        Comet.in_play++;
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <spawnComet+0x108>)
 80012dc:	f993 3000 	ldrsb.w	r3, [r3]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	3301      	adds	r3, #1
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	b25a      	sxtb	r2, r3
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <spawnComet+0x108>)
 80012ea:	701a      	strb	r2, [r3, #0]
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 80012ec:	e006      	b.n	80012fc <spawnComet+0x100>



    }else{
        comet_delay--;
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <spawnComet+0x104>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b02      	ldr	r3, [pc, #8]	; (8001300 <spawnComet+0x104>)
 80012f8:	701a      	strb	r2, [r3, #0]
    }

}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200015a4 	.word	0x200015a4
 8001304:	2000155c 	.word	0x2000155c
 8001308:	76b981db 	.word	0x76b981db
 800130c:	55555556 	.word	0x55555556
 8001310:	2e8ba2e9 	.word	0x2e8ba2e9

08001314 <spawnBullet>:

void spawnBullet(int enemy){
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
    int x_val = SpaceShip.x;
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <spawnBullet+0x94>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
    int y_val = SpaceShip.y - 3;
 8001322:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <spawnBullet+0x94>)
 8001324:	785b      	ldrb	r3, [r3, #1]
 8001326:	3b03      	subs	r3, #3
 8001328:	617b      	str	r3, [r7, #20]
    bullets *am_p;
    if (enemy){
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <spawnBullet+0x22>
        am_p = &enemy_ammo;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <spawnBullet+0x98>)
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	e001      	b.n	800133a <spawnBullet+0x26>
    }else{
        am_p = &ammo;
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <spawnBullet+0x9c>)
 8001338:	613b      	str	r3, [r7, #16]
    }
    if(am_p->in_play < MAX_BULLETS && bullet_delay == 0){
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001340:	2b05      	cmp	r3, #5
 8001342:	dc2a      	bgt.n	800139a <spawnBullet+0x86>
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <spawnBullet+0xa0>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d126      	bne.n	800139a <spawnBullet+0x86>
        if(am_p->enemy){
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	f993 3000 	ldrsb.w	r3, [r3]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <spawnBullet+0x46>
            //x_val = read the input from multiplayer;
            y_val = 3;
 8001356:	2303      	movs	r3, #3
 8001358:	617b      	str	r3, [r7, #20]
        }
        am_p->bullet_ar[am_p->in_play].x = x_val;
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	b2d1      	uxtb	r1, r2
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	460a      	mov	r2, r1
 800136c:	709a      	strb	r2, [r3, #2]
        am_p->bullet_ar[am_p->in_play].y = y_val;
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	b2d1      	uxtb	r1, r2
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	460a      	mov	r2, r1
 8001380:	70da      	strb	r2, [r3, #3]
        am_p->in_play++;
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	3301      	adds	r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	b25a      	sxtb	r2, r3
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	705a      	strb	r2, [r3, #1]
        bullet_delay = MAX_DELAY_BULLETS;
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <spawnBullet+0xa0>)
 8001396:	220a      	movs	r2, #10
 8001398:	701a      	strb	r2, [r3, #0]
    }
}
 800139a:	bf00      	nop
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	2000000c 	.word	0x2000000c
 80013ac:	2000154c 	.word	0x2000154c
 80013b0:	2000153c 	.word	0x2000153c
 80013b4:	2000159d 	.word	0x2000159d

080013b8 <spawnStar>:

void spawnStar(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 80013bc:	4b29      	ldr	r3, [pc, #164]	; (8001464 <spawnStar+0xac>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d145      	bne.n	8001450 <spawnStar+0x98>
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <spawnStar+0xb0>)
 80013c6:	f993 3000 	ldrsb.w	r3, [r3]
 80013ca:	2b09      	cmp	r3, #9
 80013cc:	dc40      	bgt.n	8001450 <spawnStar+0x98>
        Star.star_ar[Star.in_play].x = rand() % ((PLAYABLE_MAX - 1) - PLAYABLE_OFFSET) + PLAYABLE_OFFSET;
 80013ce:	f005 f9ad 	bl	800672c <rand>
 80013d2:	4601      	mov	r1, r0
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <spawnStar+0xb4>)
 80013d6:	fb83 2301 	smull	r2, r3, r3, r1
 80013da:	115a      	asrs	r2, r3, #5
 80013dc:	17cb      	asrs	r3, r1, #31
 80013de:	1ad2      	subs	r2, r2, r3
 80013e0:	4613      	mov	r3, r2
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	4413      	add	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	1aca      	subs	r2, r1, r3
 80013ec:	b2d3      	uxtb	r3, r2
 80013ee:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <spawnStar+0xb0>)
 80013f0:	f992 2000 	ldrsb.w	r2, [r2]
 80013f4:	4610      	mov	r0, r2
 80013f6:	3305      	adds	r3, #5
 80013f8:	b2d9      	uxtb	r1, r3
 80013fa:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <spawnStar+0xb0>)
 80013fc:	0043      	lsls	r3, r0, #1
 80013fe:	4413      	add	r3, r2
 8001400:	460a      	mov	r2, r1
 8001402:	705a      	strb	r2, [r3, #1]
        Star.star_ar[Star.in_play].y = 0;
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <spawnStar+0xb0>)
 8001406:	f993 3000 	ldrsb.w	r3, [r3]
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <spawnStar+0xb0>)
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	2200      	movs	r2, #0
 8001412:	709a      	strb	r2, [r3, #2]
        star_delay = rand() % ((20 + 1) - 10) + 5;
 8001414:	f005 f98a 	bl	800672c <rand>
 8001418:	4601      	mov	r1, r0
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <spawnStar+0xb8>)
 800141c:	fb83 2301 	smull	r2, r3, r3, r1
 8001420:	105a      	asrs	r2, r3, #1
 8001422:	17cb      	asrs	r3, r1, #31
 8001424:	1ad2      	subs	r2, r2, r3
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	1aca      	subs	r2, r1, r3
 8001432:	b2d3      	uxtb	r3, r2
 8001434:	3305      	adds	r3, #5
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <spawnStar+0xac>)
 800143a:	701a      	strb	r2, [r3, #0]
        Star.in_play++;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <spawnStar+0xb0>)
 800143e:	f993 3000 	ldrsb.w	r3, [r3]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	3301      	adds	r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b25a      	sxtb	r2, r3
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <spawnStar+0xb0>)
 800144c:	701a      	strb	r2, [r3, #0]
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 800144e:	e006      	b.n	800145e <spawnStar+0xa6>
    }else{
        star_delay--;
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <spawnStar+0xac>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	3b01      	subs	r3, #1
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b02      	ldr	r3, [pc, #8]	; (8001464 <spawnStar+0xac>)
 800145a:	701a      	strb	r2, [r3, #0]
    }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200015a5 	.word	0x200015a5
 8001468:	20001588 	.word	0x20001588
 800146c:	76b981db 	.word	0x76b981db
 8001470:	2e8ba2e9 	.word	0x2e8ba2e9

08001474 <moveBullets>:

void moveBullets(){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
    for(int i = 0; i < ammo.in_play; i++){
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	e056      	b.n	800152e <moveBullets+0xba>
        for (int j = 0; j < Comet.in_play; j++){
 8001480:	2300      	movs	r3, #0
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	e03c      	b.n	8001500 <moveBullets+0x8c>
            if(ammo.bullet_ar[i].x >= Comet.comet_ar[j].x && ammo.bullet_ar[i].x < Comet.comet_ar[j].x + Comet.comet_ar[j].size){
 8001486:	4a30      	ldr	r2, [pc, #192]	; (8001548 <moveBullets+0xd4>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	789a      	ldrb	r2, [r3, #2]
 8001490:	492e      	ldr	r1, [pc, #184]	; (800154c <moveBullets+0xd8>)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	429a      	cmp	r2, r3
 800149c:	d32d      	bcc.n	80014fa <moveBullets+0x86>
 800149e:	4a2a      	ldr	r2, [pc, #168]	; (8001548 <moveBullets+0xd4>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	789b      	ldrb	r3, [r3, #2]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4a28      	ldr	r2, [pc, #160]	; (800154c <moveBullets+0xd8>)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	785b      	ldrb	r3, [r3, #1]
 80014b4:	4618      	mov	r0, r3
 80014b6:	4a25      	ldr	r2, [pc, #148]	; (800154c <moveBullets+0xd8>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80014c2:	4403      	add	r3, r0
 80014c4:	4299      	cmp	r1, r3
 80014c6:	da18      	bge.n	80014fa <moveBullets+0x86>
                if (ammo.bullet_ar[i].y <= Comet.comet_ar[j].y + Comet.comet_ar[j].size - 1){
 80014c8:	4a20      	ldr	r2, [pc, #128]	; (800154c <moveBullets+0xd8>)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	789b      	ldrb	r3, [r3, #2]
 80014d2:	4619      	mov	r1, r3
 80014d4:	4a1d      	ldr	r2, [pc, #116]	; (800154c <moveBullets+0xd8>)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80014e0:	18ca      	adds	r2, r1, r3
 80014e2:	4919      	ldr	r1, [pc, #100]	; (8001548 <moveBullets+0xd4>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	440b      	add	r3, r1
 80014ea:	78db      	ldrb	r3, [r3, #3]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dd04      	ble.n	80014fa <moveBullets+0x86>
                    //QD << "hit a comet";
                    hitComet(i,j);
 80014f0:	6839      	ldr	r1, [r7, #0]
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 fa10 	bl	8001918 <hitComet>
                    continue;
 80014f8:	bf00      	nop
        for (int j = 0; j < Comet.in_play; j++){
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	3301      	adds	r3, #1
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <moveBullets+0xd8>)
 8001502:	f993 3000 	ldrsb.w	r3, [r3]
 8001506:	461a      	mov	r2, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	4293      	cmp	r3, r2
 800150c:	dbbb      	blt.n	8001486 <moveBullets+0x12>
                }
            }

        }
        ammo.bullet_ar[i].y--;
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <moveBullets+0xd4>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	78db      	ldrb	r3, [r3, #3]
 8001518:	3b01      	subs	r3, #1
 800151a:	b2d9      	uxtb	r1, r3
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <moveBullets+0xd4>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	460a      	mov	r2, r1
 8001526:	70da      	strb	r2, [r3, #3]
    for(int i = 0; i < ammo.in_play; i++){
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3301      	adds	r3, #1
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <moveBullets+0xd4>)
 8001530:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4293      	cmp	r3, r2
 800153a:	dba1      	blt.n	8001480 <moveBullets+0xc>
                ammo.bullet_ar[j].y = ammo.bullet_ar[j+1].y;
            }
            ammo.in_play--;
        }
    }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000153c 	.word	0x2000153c
 800154c:	2000155c 	.word	0x2000155c

08001550 <moveEnemyBullets>:

void moveEnemyBullets(void){
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
    if (!in_multiplayer){
 8001556:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <moveEnemyBullets+0x154>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 809e 	beq.w	800169c <moveEnemyBullets+0x14c>
        //QD << "not multiplayer";  // change to uart debug
        return;
    }
    for(int i = 0; i < enemy_ammo.in_play; i++){
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	e091      	b.n	800168a <moveEnemyBullets+0x13a>
        if(enemy_ammo.bullet_ar[i].x <= SpaceShip.x + SPACESHIP_WIDTH / 2 && enemy_ammo.bullet_ar[i].x >= SpaceShip.x - SPACESHIP_WIDTH / 2){
 8001566:	4a50      	ldr	r2, [pc, #320]	; (80016a8 <moveEnemyBullets+0x158>)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	789b      	ldrb	r3, [r3, #2]
 8001570:	461a      	mov	r2, r3
 8001572:	4b4e      	ldr	r3, [pc, #312]	; (80016ac <moveEnemyBullets+0x15c>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	3302      	adds	r3, #2
 8001578:	429a      	cmp	r2, r3
 800157a:	dc45      	bgt.n	8001608 <moveEnemyBullets+0xb8>
 800157c:	4a4a      	ldr	r2, [pc, #296]	; (80016a8 <moveEnemyBullets+0x158>)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	789b      	ldrb	r3, [r3, #2]
 8001586:	461a      	mov	r2, r3
 8001588:	4b48      	ldr	r3, [pc, #288]	; (80016ac <moveEnemyBullets+0x15c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	3b02      	subs	r3, #2
 800158e:	429a      	cmp	r2, r3
 8001590:	db3a      	blt.n	8001608 <moveEnemyBullets+0xb8>
            if (enemy_ammo.bullet_ar[i].y >= SpaceShip.y - SPACESHIP_HEIGHT / 2 && hit == 0){
 8001592:	4a45      	ldr	r2, [pc, #276]	; (80016a8 <moveEnemyBullets+0x158>)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	78db      	ldrb	r3, [r3, #3]
 800159c:	461a      	mov	r2, r3
 800159e:	4b43      	ldr	r3, [pc, #268]	; (80016ac <moveEnemyBullets+0x15c>)
 80015a0:	785b      	ldrb	r3, [r3, #1]
 80015a2:	3b02      	subs	r3, #2
 80015a4:	429a      	cmp	r2, r3
 80015a6:	db2f      	blt.n	8001608 <moveEnemyBullets+0xb8>
 80015a8:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <moveEnemyBullets+0x160>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d12b      	bne.n	8001608 <moveEnemyBullets+0xb8>
                beenHit();
 80015b0:	f000 fc8e 	bl	8001ed0 <beenHit>
                for(int j = i; j < MAX_BULLETS - 1; j++){
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	e01a      	b.n	80015f0 <moveEnemyBullets+0xa0>
                    enemy_ammo.bullet_ar[j].x = enemy_ammo.bullet_ar[j+1].x;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a3a      	ldr	r2, [pc, #232]	; (80016a8 <moveEnemyBullets+0x158>)
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	7899      	ldrb	r1, [r3, #2]
 80015c6:	4a38      	ldr	r2, [pc, #224]	; (80016a8 <moveEnemyBullets+0x158>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	460a      	mov	r2, r1
 80015d0:	709a      	strb	r2, [r3, #2]
                    enemy_ammo.bullet_ar[j].y = enemy_ammo.bullet_ar[j+1].y;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	3301      	adds	r3, #1
 80015d6:	4a34      	ldr	r2, [pc, #208]	; (80016a8 <moveEnemyBullets+0x158>)
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	78d9      	ldrb	r1, [r3, #3]
 80015de:	4a32      	ldr	r2, [pc, #200]	; (80016a8 <moveEnemyBullets+0x158>)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	460a      	mov	r2, r1
 80015e8:	70da      	strb	r2, [r3, #3]
                for(int j = i; j < MAX_BULLETS - 1; j++){
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	3301      	adds	r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	dde1      	ble.n	80015ba <moveEnemyBullets+0x6a>
                }
                enemy_ammo.in_play--;
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <moveEnemyBullets+0x158>)
 80015f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	3b01      	subs	r3, #1
 8001600:	b2db      	uxtb	r3, r3
 8001602:	b25a      	sxtb	r2, r3
 8001604:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <moveEnemyBullets+0x158>)
 8001606:	705a      	strb	r2, [r3, #1]
            }
        }
        enemy_ammo.bullet_ar[i].y++;
 8001608:	4a27      	ldr	r2, [pc, #156]	; (80016a8 <moveEnemyBullets+0x158>)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	78db      	ldrb	r3, [r3, #3]
 8001612:	3301      	adds	r3, #1
 8001614:	b2d9      	uxtb	r1, r3
 8001616:	4a24      	ldr	r2, [pc, #144]	; (80016a8 <moveEnemyBullets+0x158>)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	460a      	mov	r2, r1
 8001620:	70da      	strb	r2, [r3, #3]
        if (enemy_ammo.bullet_ar[i].y > SCREEN_HEIGHT - 1){
 8001622:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <moveEnemyBullets+0x158>)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	78db      	ldrb	r3, [r3, #3]
 800162c:	2b3b      	cmp	r3, #59	; 0x3b
 800162e:	d929      	bls.n	8001684 <moveEnemyBullets+0x134>
            for(int j = i; j < MAX_BULLETS - 1; j++){
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	e01a      	b.n	800166c <moveEnemyBullets+0x11c>
                enemy_ammo.bullet_ar[j].x = enemy_ammo.bullet_ar[j+1].x;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3301      	adds	r3, #1
 800163a:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <moveEnemyBullets+0x158>)
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	7899      	ldrb	r1, [r3, #2]
 8001642:	4a19      	ldr	r2, [pc, #100]	; (80016a8 <moveEnemyBullets+0x158>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	460a      	mov	r2, r1
 800164c:	709a      	strb	r2, [r3, #2]
                enemy_ammo.bullet_ar[j].y = enemy_ammo.bullet_ar[j+1].y;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3301      	adds	r3, #1
 8001652:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <moveEnemyBullets+0x158>)
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	78d9      	ldrb	r1, [r3, #3]
 800165a:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <moveEnemyBullets+0x158>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	460a      	mov	r2, r1
 8001664:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_BULLETS - 1; j++){
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3301      	adds	r3, #1
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b04      	cmp	r3, #4
 8001670:	dde1      	ble.n	8001636 <moveEnemyBullets+0xe6>
            }
            enemy_ammo.in_play--;
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <moveEnemyBullets+0x158>)
 8001674:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	3b01      	subs	r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	b25a      	sxtb	r2, r3
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <moveEnemyBullets+0x158>)
 8001682:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < enemy_ammo.in_play; i++){
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	3301      	adds	r3, #1
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <moveEnemyBullets+0x158>)
 800168c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001690:	461a      	mov	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4293      	cmp	r3, r2
 8001696:	f6ff af66 	blt.w	8001566 <moveEnemyBullets+0x16>
 800169a:	e000      	b.n	800169e <moveEnemyBullets+0x14e>
        return;
 800169c:	bf00      	nop
        }
    }
}
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000015 	.word	0x20000015
 80016a8:	2000154c 	.word	0x2000154c
 80016ac:	2000000c 	.word	0x2000000c
 80016b0:	2000136c 	.word	0x2000136c

080016b4 <moveComets>:
void moveComets(){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
    for (int i = 0; i<Comet.in_play; i++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e094      	b.n	80017ea <moveComets+0x136>
        for(int j = 0; j < Comet.comet_ar[i].size; j++){
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	e039      	b.n	800173a <moveComets+0x86>
            if(Comet.comet_ar[i].x + j <= SpaceShip.x + SPACESHIP_WIDTH / 2 && Comet.comet_ar[i].x + j >= SpaceShip.x - SPACESHIP_WIDTH / 2){
 80016c6:	4a4f      	ldr	r2, [pc, #316]	; (8001804 <moveComets+0x150>)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	785b      	ldrb	r3, [r3, #1]
 80016d0:	461a      	mov	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	441a      	add	r2, r3
 80016d6:	4b4c      	ldr	r3, [pc, #304]	; (8001808 <moveComets+0x154>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	3302      	adds	r3, #2
 80016dc:	429a      	cmp	r2, r3
 80016de:	dc29      	bgt.n	8001734 <moveComets+0x80>
 80016e0:	4a48      	ldr	r2, [pc, #288]	; (8001804 <moveComets+0x150>)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	785b      	ldrb	r3, [r3, #1]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	441a      	add	r2, r3
 80016f0:	4b45      	ldr	r3, [pc, #276]	; (8001808 <moveComets+0x154>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	3b02      	subs	r3, #2
 80016f6:	429a      	cmp	r2, r3
 80016f8:	db1c      	blt.n	8001734 <moveComets+0x80>
                if (Comet.comet_ar[i].y + Comet.comet_ar[i].size - 1 >= SpaceShip.y - SPACESHIP_HEIGHT / 2 && hit == 0){
 80016fa:	4a42      	ldr	r2, [pc, #264]	; (8001804 <moveComets+0x150>)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	789b      	ldrb	r3, [r3, #2]
 8001704:	4619      	mov	r1, r3
 8001706:	4a3f      	ldr	r2, [pc, #252]	; (8001804 <moveComets+0x150>)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001712:	18ca      	adds	r2, r1, r3
 8001714:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <moveComets+0x154>)
 8001716:	785b      	ldrb	r3, [r3, #1]
 8001718:	3b01      	subs	r3, #1
 800171a:	429a      	cmp	r2, r3
 800171c:	db0a      	blt.n	8001734 <moveComets+0x80>
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <moveComets+0x158>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d106      	bne.n	8001734 <moveComets+0x80>
                    hitComet(420,i);
 8001726:	68f9      	ldr	r1, [r7, #12]
 8001728:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800172c:	f000 f8f4 	bl	8001918 <hitComet>
                    beenHit();
 8001730:	f000 fbce 	bl	8001ed0 <beenHit>
        for(int j = 0; j < Comet.comet_ar[i].size; j++){
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	3301      	adds	r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4a32      	ldr	r2, [pc, #200]	; (8001804 <moveComets+0x150>)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001746:	461a      	mov	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4293      	cmp	r3, r2
 800174c:	dbbb      	blt.n	80016c6 <moveComets+0x12>
                }
            }
        }

        Comet.comet_ar[i].y++;
 800174e:	4a2d      	ldr	r2, [pc, #180]	; (8001804 <moveComets+0x150>)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	789b      	ldrb	r3, [r3, #2]
 8001758:	3301      	adds	r3, #1
 800175a:	b2d9      	uxtb	r1, r3
 800175c:	4a29      	ldr	r2, [pc, #164]	; (8001804 <moveComets+0x150>)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	460a      	mov	r2, r1
 8001766:	709a      	strb	r2, [r3, #2]
        if (Comet.comet_ar[i].y > SCREEN_HEIGHT - 1){
 8001768:	4a26      	ldr	r2, [pc, #152]	; (8001804 <moveComets+0x150>)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	789b      	ldrb	r3, [r3, #2]
 8001772:	2b3b      	cmp	r3, #59	; 0x3b
 8001774:	d936      	bls.n	80017e4 <moveComets+0x130>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	e027      	b.n	80017cc <moveComets+0x118>
                Comet.comet_ar[j].x = Comet.comet_ar[j+1].x;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3301      	adds	r3, #1
 8001780:	4a20      	ldr	r2, [pc, #128]	; (8001804 <moveComets+0x150>)
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	7859      	ldrb	r1, [r3, #1]
 8001788:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <moveComets+0x150>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	460a      	mov	r2, r1
 8001792:	705a      	strb	r2, [r3, #1]
                Comet.comet_ar[j].y = Comet.comet_ar[j+1].y;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	4a1a      	ldr	r2, [pc, #104]	; (8001804 <moveComets+0x150>)
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	7899      	ldrb	r1, [r3, #2]
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <moveComets+0x150>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	460a      	mov	r2, r1
 80017aa:	709a      	strb	r2, [r3, #2]
                Comet.comet_ar[j].size = Comet.comet_ar[j+1].size;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3301      	adds	r3, #1
 80017b0:	4a14      	ldr	r2, [pc, #80]	; (8001804 <moveComets+0x150>)
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <moveComets+0x150>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	460a      	mov	r2, r1
 80017c4:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_COMETS - 1; j++){
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3301      	adds	r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	ddd4      	ble.n	800177c <moveComets+0xc8>
            }
            Comet.in_play--;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <moveComets+0x150>)
 80017d4:	f993 3000 	ldrsb.w	r3, [r3]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	3b01      	subs	r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	b25a      	sxtb	r2, r3
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <moveComets+0x150>)
 80017e2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Comet.in_play; i++){
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3301      	adds	r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <moveComets+0x150>)
 80017ec:	f993 3000 	ldrsb.w	r3, [r3]
 80017f0:	461a      	mov	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4293      	cmp	r3, r2
 80017f6:	f6ff af63 	blt.w	80016c0 <moveComets+0xc>
        }
    }
}
 80017fa:	bf00      	nop
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000155c 	.word	0x2000155c
 8001808:	2000000c 	.word	0x2000000c
 800180c:	2000136c 	.word	0x2000136c

08001810 <moveStars>:

void moveStars(){
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
    for (int i = 0; i<Star.in_play; i++){
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	e040      	b.n	800189e <moveStars+0x8e>

        Star.star_ar[i].y++;
 800181c:	4a27      	ldr	r2, [pc, #156]	; (80018bc <moveStars+0xac>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	789b      	ldrb	r3, [r3, #2]
 8001826:	3301      	adds	r3, #1
 8001828:	b2d9      	uxtb	r1, r3
 800182a:	4a24      	ldr	r2, [pc, #144]	; (80018bc <moveStars+0xac>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	460a      	mov	r2, r1
 8001834:	709a      	strb	r2, [r3, #2]
        if (Star.star_ar[i].y > SCREEN_HEIGHT - 1){
 8001836:	4a21      	ldr	r2, [pc, #132]	; (80018bc <moveStars+0xac>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	789b      	ldrb	r3, [r3, #2]
 8001840:	2b3b      	cmp	r3, #59	; 0x3b
 8001842:	d929      	bls.n	8001898 <moveStars+0x88>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	e01a      	b.n	8001880 <moveStars+0x70>
                Star.star_ar[j].x = Star.star_ar[j+1].x;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <moveStars+0xac>)
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	7859      	ldrb	r1, [r3, #1]
 8001856:	4a19      	ldr	r2, [pc, #100]	; (80018bc <moveStars+0xac>)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	460a      	mov	r2, r1
 8001860:	705a      	strb	r2, [r3, #1]
                Star.star_ar[j].y = Star.star_ar[j+1].y;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	3301      	adds	r3, #1
 8001866:	4a15      	ldr	r2, [pc, #84]	; (80018bc <moveStars+0xac>)
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	7899      	ldrb	r1, [r3, #2]
 800186e:	4a13      	ldr	r2, [pc, #76]	; (80018bc <moveStars+0xac>)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	460a      	mov	r2, r1
 8001878:	709a      	strb	r2, [r3, #2]
            for(int j = i; j < MAX_COMETS - 1; j++){
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b08      	cmp	r3, #8
 8001884:	dde1      	ble.n	800184a <moveStars+0x3a>
            }
            Star.in_play--;
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <moveStars+0xac>)
 8001888:	f993 3000 	ldrsb.w	r3, [r3]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	3b01      	subs	r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	b25a      	sxtb	r2, r3
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <moveStars+0xac>)
 8001896:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Star.in_play; i++){
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3301      	adds	r3, #1
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <moveStars+0xac>)
 80018a0:	f993 3000 	ldrsb.w	r3, [r3]
 80018a4:	461a      	mov	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4293      	cmp	r3, r2
 80018aa:	dbb7      	blt.n	800181c <moveStars+0xc>
        }
    }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20001588 	.word	0x20001588

080018c0 <moveSpaceship>:

void moveSpaceship(int direction){
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
    if(direction < 0){
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da0d      	bge.n	80018ea <moveSpaceship+0x2a>
        SpaceShip.x--;
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <moveSpaceship+0x54>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <moveSpaceship+0x54>)
 80018d8:	701a      	strb	r2, [r3, #0]
        if(SpaceShip.x < SPACESHIP_WIDTH/2) {
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <moveSpaceship+0x54>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d811      	bhi.n	8001906 <moveSpaceship+0x46>
            SpaceShip.x = (SPACESHIP_WIDTH/2);
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <moveSpaceship+0x54>)
 80018e4:	2202      	movs	r2, #2
 80018e6:	701a      	strb	r2, [r3, #0]
        }
        return;
 80018e8:	e00d      	b.n	8001906 <moveSpaceship+0x46>
    }
    SpaceShip.x++;
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <moveSpaceship+0x54>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <moveSpaceship+0x54>)
 80018f4:	701a      	strb	r2, [r3, #0]
    if(SpaceShip.x > SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1) {
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <moveSpaceship+0x54>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b4d      	cmp	r3, #77	; 0x4d
 80018fc:	d904      	bls.n	8001908 <moveSpaceship+0x48>
        SpaceShip.x = SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1;
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <moveSpaceship+0x54>)
 8001900:	224d      	movs	r2, #77	; 0x4d
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e000      	b.n	8001908 <moveSpaceship+0x48>
        return;
 8001906:	bf00      	nop
    }
}
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	2000000c 	.word	0x2000000c

08001918 <hitComet>:

void hitComet(int bul,int com){
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
    money += Comet.comet_ar[com].coins;
 8001922:	4a37      	ldr	r2, [pc, #220]	; (8001a00 <hitComet+0xe8>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800192e:	461a      	mov	r2, r3
 8001930:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <hitComet+0xec>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4413      	add	r3, r2
 8001936:	4a33      	ldr	r2, [pc, #204]	; (8001a04 <hitComet+0xec>)
 8001938:	6013      	str	r3, [r2, #0]
    if(bul != 420){
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001940:	d020      	beq.n	8001984 <hitComet+0x6c>
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e01a      	b.n	800197e <hitComet+0x66>
            ammo.bullet_ar[j].x = ammo.bullet_ar[j+1].x;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3301      	adds	r3, #1
 800194c:	4a2e      	ldr	r2, [pc, #184]	; (8001a08 <hitComet+0xf0>)
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	7899      	ldrb	r1, [r3, #2]
 8001954:	4a2c      	ldr	r2, [pc, #176]	; (8001a08 <hitComet+0xf0>)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	460a      	mov	r2, r1
 800195e:	709a      	strb	r2, [r3, #2]
            ammo.bullet_ar[j].y = ammo.bullet_ar[j+1].y;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3301      	adds	r3, #1
 8001964:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <hitComet+0xf0>)
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	78d9      	ldrb	r1, [r3, #3]
 800196c:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <hitComet+0xf0>)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	460a      	mov	r2, r1
 8001976:	70da      	strb	r2, [r3, #3]
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3301      	adds	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b04      	cmp	r3, #4
 8001982:	dde1      	ble.n	8001948 <hitComet+0x30>
        }
    }

    for(int j = com; j < MAX_COMETS - 1; j++){
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	e027      	b.n	80019da <hitComet+0xc2>
        Comet.comet_ar[j].x = Comet.comet_ar[j+1].x;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3301      	adds	r3, #1
 800198e:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <hitComet+0xe8>)
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	7859      	ldrb	r1, [r3, #1]
 8001996:	4a1a      	ldr	r2, [pc, #104]	; (8001a00 <hitComet+0xe8>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	460a      	mov	r2, r1
 80019a0:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[j].y = Comet.comet_ar[j+1].y;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	3301      	adds	r3, #1
 80019a6:	4a16      	ldr	r2, [pc, #88]	; (8001a00 <hitComet+0xe8>)
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	7899      	ldrb	r1, [r3, #2]
 80019ae:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <hitComet+0xe8>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	460a      	mov	r2, r1
 80019b8:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[j].size = Comet.comet_ar[j+1].size;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3301      	adds	r3, #1
 80019be:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <hitComet+0xe8>)
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <hitComet+0xe8>)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	460a      	mov	r2, r1
 80019d2:	70da      	strb	r2, [r3, #3]
    for(int j = com; j < MAX_COMETS - 1; j++){
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b08      	cmp	r3, #8
 80019de:	ddd4      	ble.n	800198a <hitComet+0x72>
    }
    Comet.in_play--;
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <hitComet+0xe8>)
 80019e2:	f993 3000 	ldrsb.w	r3, [r3]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	b25a      	sxtb	r2, r3
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <hitComet+0xe8>)
 80019f0:	701a      	strb	r2, [r3, #0]
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	2000155c 	.word	0x2000155c
 8001a04:	200015a0 	.word	0x200015a0
 8001a08:	2000153c 	.word	0x2000153c

08001a0c <initAmmo>:

void initAmmo(bullets *am,int enemy){
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
    am->enemy = enemy;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b25a      	sxtb	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	701a      	strb	r2, [r3, #0]
    am->in_play=0;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	705a      	strb	r2, [r3, #1]
    for (int i = 0;i<MAX_BULLETS;i++){
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e00e      	b.n	8001a48 <initAmmo+0x3c>
        am->bullet_ar[i].x = -1;
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	22ff      	movs	r2, #255	; 0xff
 8001a34:	709a      	strb	r2, [r3, #2]
        am->bullet_ar[i].y = -1;
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	22ff      	movs	r2, #255	; 0xff
 8001a40:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_BULLETS;i++){
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3301      	adds	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	dded      	ble.n	8001a2a <initAmmo+0x1e>
    }
}
 8001a4e:	bf00      	nop
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <initComets>:

void initComets(){
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
    Comet.in_play = 0;
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <initComets+0x50>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	e014      	b.n	8001a98 <initComets+0x3c>
        Comet.comet_ar[i].x = -1;
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <initComets+0x50>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	22ff      	movs	r2, #255	; 0xff
 8001a78:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[i].y = -1;
 8001a7a:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <initComets+0x50>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	22ff      	movs	r2, #255	; 0xff
 8001a84:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[i].size = 2;
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <initComets+0x50>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2202      	movs	r2, #2
 8001a90:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_COMETS;i++){
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3301      	adds	r3, #1
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b09      	cmp	r3, #9
 8001a9c:	dde7      	ble.n	8001a6e <initComets+0x12>
    }
}
 8001a9e:	bf00      	nop
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	2000155c 	.word	0x2000155c

08001ab0 <initStars>:

void initStars(){
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
    Star.in_play = 0;
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <initStars+0x44>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	e00e      	b.n	8001ae0 <initStars+0x30>
        Star.star_ar[i].x = -1;
 8001ac2:	4a0c      	ldr	r2, [pc, #48]	; (8001af4 <initStars+0x44>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	22ff      	movs	r2, #255	; 0xff
 8001acc:	705a      	strb	r2, [r3, #1]
        Star.star_ar[i].y = -1;
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <initStars+0x44>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	22ff      	movs	r2, #255	; 0xff
 8001ad8:	709a      	strb	r2, [r3, #2]
    for (int i = 0;i<MAX_COMETS;i++){
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3301      	adds	r3, #1
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b09      	cmp	r3, #9
 8001ae4:	dded      	ble.n	8001ac2 <initStars+0x12>
    }
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	20001588 	.word	0x20001588

08001af8 <displayStars>:


void displayStars(uint8_t game_screen[][SCREEN_HEIGHT]){
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < Star.in_play; i++){
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e016      	b.n	8001b34 <displayStars+0x3c>
        game_screen[Star.star_ar[i].x][Star.star_ar[i].y] = ENC_YELLOW;
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <displayStars+0x58>)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	785b      	ldrb	r3, [r3, #1]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4613      	mov	r3, r2
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	441a      	add	r2, r3
 8001b20:	490b      	ldr	r1, [pc, #44]	; (8001b50 <displayStars+0x58>)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	440b      	add	r3, r1
 8001b28:	789b      	ldrb	r3, [r3, #2]
 8001b2a:	2107      	movs	r1, #7
 8001b2c:	54d1      	strb	r1, [r2, r3]
    for(int i = 0; i < Star.in_play; i++){
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3301      	adds	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <displayStars+0x58>)
 8001b36:	f993 3000 	ldrsb.w	r3, [r3]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	dbe1      	blt.n	8001b06 <displayStars+0xe>
    }
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	20001588 	.word	0x20001588

08001b54 <displayAmmo>:

void displayAmmo(uint8_t game_screen[][SCREEN_HEIGHT]){
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < ammo.in_play; i++){
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	e016      	b.n	8001b90 <displayAmmo+0x3c>
        game_screen[ammo.bullet_ar[i].x][ammo.bullet_ar[i].y] = ENC_RED;
 8001b62:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <displayAmmo+0xa0>)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	789b      	ldrb	r3, [r3, #2]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4613      	mov	r3, r2
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	1a9b      	subs	r3, r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	461a      	mov	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	441a      	add	r2, r3
 8001b7c:	491d      	ldr	r1, [pc, #116]	; (8001bf4 <displayAmmo+0xa0>)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	440b      	add	r3, r1
 8001b84:	78db      	ldrb	r3, [r3, #3]
 8001b86:	2101      	movs	r1, #1
 8001b88:	54d1      	strb	r1, [r2, r3]
    for(int i = 0; i < ammo.in_play; i++){
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <displayAmmo+0xa0>)
 8001b92:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	dbe1      	blt.n	8001b62 <displayAmmo+0xe>
    }
    if(in_multiplayer){
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <displayAmmo+0xa4>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d020      	beq.n	8001be8 <displayAmmo+0x94>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	e016      	b.n	8001bda <displayAmmo+0x86>
            game_screen[enemy_ammo.bullet_ar[i].x][enemy_ammo.bullet_ar[i].y] = ENC_LIGHT_BLUE;
 8001bac:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <displayAmmo+0xa8>)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	789b      	ldrb	r3, [r3, #2]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4613      	mov	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	441a      	add	r2, r3
 8001bc6:	490d      	ldr	r1, [pc, #52]	; (8001bfc <displayAmmo+0xa8>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	440b      	add	r3, r1
 8001bce:	78db      	ldrb	r3, [r3, #3]
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	54d1      	strb	r1, [r2, r3]
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <displayAmmo+0xa8>)
 8001bdc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	4293      	cmp	r3, r2
 8001be6:	dbe1      	blt.n	8001bac <displayAmmo+0x58>
        }
    }
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	2000153c 	.word	0x2000153c
 8001bf8:	20000015 	.word	0x20000015
 8001bfc:	2000154c 	.word	0x2000154c

08001c00 <displayComets>:

void displayComets(uint8_t game_screen[][SCREEN_HEIGHT]){
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < Comet.in_play; i++){
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	e046      	b.n	8001c9c <displayComets+0x9c>
        for (int j = 0; j < Comet.comet_ar[i].size; j++){
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	e036      	b.n	8001c82 <displayComets+0x82>
            int ycord = Comet.comet_ar[i].y + j;
 8001c14:	4a28      	ldr	r2, [pc, #160]	; (8001cb8 <displayComets+0xb8>)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	789b      	ldrb	r3, [r3, #2]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	4413      	add	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
            if(ycord <= SCREEN_HEIGHT - 1){
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b3b      	cmp	r3, #59	; 0x3b
 8001c2a:	dc27      	bgt.n	8001c7c <displayComets+0x7c>
                for (int k = 0; k < Comet.comet_ar[i].size; k++){
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e01a      	b.n	8001c68 <displayComets+0x68>
                    int xcord = Comet.comet_ar[i].x + k;
 8001c32:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <displayComets+0xb8>)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	4413      	add	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
                    if(xcord < SCREEN_WIDTH){
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b4f      	cmp	r3, #79	; 0x4f
 8001c48:	dc0b      	bgt.n	8001c62 <displayComets+0x62>
                        game_screen[xcord][ycord] = ENC_GRAY;
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	1a9b      	subs	r3, r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	461a      	mov	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	441a      	add	r2, r3
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	2208      	movs	r2, #8
 8001c60:	701a      	strb	r2, [r3, #0]
                for (int k = 0; k < Comet.comet_ar[i].size; k++){
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	4a13      	ldr	r2, [pc, #76]	; (8001cb8 <displayComets+0xb8>)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001c74:	461a      	mov	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	dbda      	blt.n	8001c32 <displayComets+0x32>
        for (int j = 0; j < Comet.comet_ar[i].size; j++){
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <displayComets+0xb8>)
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	4293      	cmp	r3, r2
 8001c94:	dbbe      	blt.n	8001c14 <displayComets+0x14>
    for (int i = 0; i < Comet.in_play; i++){
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <displayComets+0xb8>)
 8001c9e:	f993 3000 	ldrsb.w	r3, [r3]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	dbb1      	blt.n	8001c0e <displayComets+0xe>

                }
            }
        }
    }
}
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
 8001cae:	3724      	adds	r7, #36	; 0x24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	2000155c 	.word	0x2000155c

08001cbc <displaySpaceShip>:

void displaySpaceShip(uint8_t game_screen[][SCREEN_HEIGHT]){
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    for (int i = SpaceShip.x - SPACESHIP_WIDTH / 2; i <= SpaceShip.x + SPACESHIP_WIDTH / 2; i++) {
 8001cc4:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <displaySpaceShip+0x108>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	3b02      	subs	r3, #2
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e06d      	b.n	8001daa <displaySpaceShip+0xee>
        for (int j = SpaceShip.y - SPACESHIP_HEIGHT / 2; j <= SpaceShip.y + SPACESHIP_HEIGHT / 2; j++) {
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <displaySpaceShip+0x108>)
 8001cd0:	785b      	ldrb	r3, [r3, #1]
 8001cd2:	3b02      	subs	r3, #2
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	e05f      	b.n	8001d98 <displaySpaceShip+0xdc>
            if (i == SpaceShip.x && j != SpaceShip.y + SPACESHIP_HEIGHT / 2){
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <displaySpaceShip+0x108>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d115      	bne.n	8001d10 <displaySpaceShip+0x54>
 8001ce4:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <displaySpaceShip+0x108>)
 8001ce6:	785b      	ldrb	r3, [r3, #1]
 8001ce8:	3302      	adds	r3, #2
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d00f      	beq.n	8001d10 <displaySpaceShip+0x54>
                game_screen[i][j] = spaceshipCurrentColor;
 8001cf0:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <displaySpaceShip+0x10c>)
 8001cf2:	6819      	ldr	r1, [r3, #0]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	1a9b      	subs	r3, r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	461a      	mov	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	441a      	add	r2, r3
 8001d04:	b2c9      	uxtb	r1, r1
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	4413      	add	r3, r2
 8001d0a:	460a      	mov	r2, r1
 8001d0c:	701a      	strb	r2, [r3, #0]
 8001d0e:	e040      	b.n	8001d92 <displaySpaceShip+0xd6>
            }else if((i == SpaceShip.x - SPACESHIP_WIDTH / 2 || i == SpaceShip.x + SPACESHIP_WIDTH / 2) && j != SpaceShip.y - SPACESHIP_HEIGHT / 2){
 8001d10:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <displaySpaceShip+0x108>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	3b02      	subs	r3, #2
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d005      	beq.n	8001d28 <displaySpaceShip+0x6c>
 8001d1c:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <displaySpaceShip+0x108>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	3302      	adds	r3, #2
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d115      	bne.n	8001d54 <displaySpaceShip+0x98>
 8001d28:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <displaySpaceShip+0x108>)
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	3b02      	subs	r3, #2
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d00f      	beq.n	8001d54 <displaySpaceShip+0x98>
                game_screen[i][j] = spaceshipCurrentColor;
 8001d34:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <displaySpaceShip+0x10c>)
 8001d36:	6819      	ldr	r1, [r3, #0]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	461a      	mov	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	441a      	add	r2, r3
 8001d48:	b2c9      	uxtb	r1, r1
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	460a      	mov	r2, r1
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	e01e      	b.n	8001d92 <displaySpaceShip+0xd6>
            }else if((i == SpaceShip.x + 1 || SpaceShip.x - 1 ) && j == SpaceShip.y - (SPACESHIP_HEIGHT / 2) + 2){
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <displaySpaceShip+0x108>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d003      	beq.n	8001d68 <displaySpaceShip+0xac>
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <displaySpaceShip+0x108>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d014      	beq.n	8001d92 <displaySpaceShip+0xd6>
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <displaySpaceShip+0x108>)
 8001d6a:	785b      	ldrb	r3, [r3, #1]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d10e      	bne.n	8001d92 <displaySpaceShip+0xd6>
                game_screen[i][j] = spaceshipCurrentColor;
 8001d74:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <displaySpaceShip+0x10c>)
 8001d76:	6819      	ldr	r1, [r3, #0]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	461a      	mov	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	441a      	add	r2, r3
 8001d88:	b2c9      	uxtb	r1, r1
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	460a      	mov	r2, r1
 8001d90:	701a      	strb	r2, [r3, #0]
        for (int j = SpaceShip.y - SPACESHIP_HEIGHT / 2; j <= SpaceShip.y + SPACESHIP_HEIGHT / 2; j++) {
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3301      	adds	r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <displaySpaceShip+0x108>)
 8001d9a:	785b      	ldrb	r3, [r3, #1]
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	dd99      	ble.n	8001cd8 <displaySpaceShip+0x1c>
    for (int i = SpaceShip.x - SPACESHIP_WIDTH / 2; i <= SpaceShip.x + SPACESHIP_WIDTH / 2; i++) {
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3301      	adds	r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <displaySpaceShip+0x108>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	3302      	adds	r3, #2
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	dd8b      	ble.n	8001cce <displaySpaceShip+0x12>
            }
        }
    }
}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	2000000c 	.word	0x2000000c
 8001dc8:	20000010 	.word	0x20000010

08001dcc <displayLives>:

void displayLives(uint8_t game_screen[][SCREEN_HEIGHT]){
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < lives; i++){
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	e011      	b.n	8001dfe <displayLives+0x32>
        game_screen[HEARTS_X+HEARTS_OFFSET*i][HEARTS_Y] = ENC_LIGHT_GREEN;
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	3302      	adds	r3, #2
 8001de4:	461a      	mov	r2, r3
 8001de6:	4613      	mov	r3, r2
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	461a      	mov	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	2209      	movs	r2, #9
 8001df6:	709a      	strb	r2, [r3, #2]
    for(int i = 0; i < lives; i++){
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <displayLives+0x4c>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4293      	cmp	r3, r2
 8001e08:	dbe7      	blt.n	8001dda <displayLives+0xe>
    }
}
 8001e0a:	bf00      	nop
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	20000009 	.word	0x20000009

08001e1c <spaceShipHitColorToggle>:

void spaceShipHitColorToggle(){
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
    if(spaceshipCurrentColor == ENC_RED && hit % 10 == 0){
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <spaceShipHitColorToggle+0x7c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d111      	bne.n	8001e4c <spaceShipHitColorToggle+0x30>
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <spaceShipHitColorToggle+0x80>)
 8001e2a:	781a      	ldrb	r2, [r3, #0]
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <spaceShipHitColorToggle+0x84>)
 8001e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e32:	08d9      	lsrs	r1, r3, #3
 8001e34:	460b      	mov	r3, r1
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d103      	bne.n	8001e4c <spaceShipHitColorToggle+0x30>
        spaceshipCurrentColor = ENC_WHITE;
 8001e44:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <spaceShipHitColorToggle+0x7c>)
 8001e46:	220a      	movs	r2, #10
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	e010      	b.n	8001e6e <spaceShipHitColorToggle+0x52>
    }else if(hit % 10 == 0){
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <spaceShipHitColorToggle+0x80>)
 8001e4e:	781a      	ldrb	r2, [r3, #0]
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <spaceShipHitColorToggle+0x84>)
 8001e52:	fba3 1302 	umull	r1, r3, r3, r2
 8001e56:	08d9      	lsrs	r1, r3, #3
 8001e58:	460b      	mov	r3, r1
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <spaceShipHitColorToggle+0x52>
        spaceshipCurrentColor = ENC_RED;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <spaceShipHitColorToggle+0x7c>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
    }
    if(hit < hit_graph_counter){
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <spaceShipHitColorToggle+0x80>)
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <spaceShipHitColorToggle+0x88>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d206      	bcs.n	8001e88 <spaceShipHitColorToggle+0x6c>
        hit++;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <spaceShipHitColorToggle+0x80>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <spaceShipHitColorToggle+0x80>)
 8001e84:	701a      	strb	r2, [r3, #0]
    }else{
        hit = 0;
    }
}
 8001e86:	e002      	b.n	8001e8e <spaceShipHitColorToggle+0x72>
        hit = 0;
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <spaceShipHitColorToggle+0x80>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	20000010 	.word	0x20000010
 8001e9c:	2000136c 	.word	0x2000136c
 8001ea0:	cccccccd 	.word	0xcccccccd
 8001ea4:	20000014 	.word	0x20000014

08001ea8 <delayBullet>:

void delayBullet(){
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
    if (bullet_delay > 0){
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <delayBullet+0x24>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <delayBullet+0x18>
        bullet_delay--;
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <delayBullet+0x24>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <delayBullet+0x24>)
 8001ebe:	701a      	strb	r2, [r3, #0]
    }
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000159d 	.word	0x2000159d

08001ed0 <beenHit>:

void beenHit(){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
    hit = 1;
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <beenHit+0x34>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
    lives--;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <beenHit+0x38>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <beenHit+0x38>)
 8001ee4:	701a      	strb	r2, [r3, #0]
    if(lives <= 0){
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <beenHit+0x38>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d107      	bne.n	8001efe <beenHit+0x2e>
        play = 0;
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <beenHit+0x3c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
        hit = 0;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <beenHit+0x34>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
        initSpaceInvaders();
 8001efa:	f7ff f947 	bl	800118c <initSpaceInvaders>

    }
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000136c 	.word	0x2000136c
 8001f08:	20000009 	.word	0x20000009
 8001f0c:	2000000a 	.word	0x2000000a

08001f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_MspInit+0x44>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_MspInit+0x44>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6193      	str	r3, [r2, #24]
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_MspInit+0x44>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_MspInit+0x44>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a08      	ldr	r2, [pc, #32]	; (8001f54 <HAL_MspInit+0x44>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_MspInit+0x44>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000

08001f58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <HAL_I2C_MspInit+0x7c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d127      	bne.n	8001fca <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_I2C_MspInit+0x80>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	4a16      	ldr	r2, [pc, #88]	; (8001fd8 <HAL_I2C_MspInit+0x80>)
 8001f80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f84:	6153      	str	r3, [r2, #20]
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_I2C_MspInit+0x80>)
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f92:	2303      	movs	r3, #3
 8001f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f96:	2312      	movs	r3, #18
 8001f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4619      	mov	r1, r3
 8001fac:	480b      	ldr	r0, [pc, #44]	; (8001fdc <HAL_I2C_MspInit+0x84>)
 8001fae:	f000 fe8b 	bl	8002cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_I2C_MspInit+0x80>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <HAL_I2C_MspInit+0x80>)
 8001fb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fbc:	61d3      	str	r3, [r2, #28]
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_I2C_MspInit+0x80>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fca:	bf00      	nop
 8001fcc:	3728      	adds	r7, #40	; 0x28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40005800 	.word	0x40005800
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	48001400 	.word	0x48001400

08001fe0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a17      	ldr	r2, [pc, #92]	; (800205c <HAL_SPI_MspInit+0x7c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d128      	bne.n	8002054 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_SPI_MspInit+0x80>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	4a16      	ldr	r2, [pc, #88]	; (8002060 <HAL_SPI_MspInit+0x80>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200c:	61d3      	str	r3, [r2, #28]
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_SPI_MspInit+0x80>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_SPI_MspInit+0x80>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	4a10      	ldr	r2, [pc, #64]	; (8002060 <HAL_SPI_MspInit+0x80>)
 8002020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002024:	6153      	str	r3, [r2, #20]
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_SPI_MspInit+0x80>)
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8002032:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002044:	2305      	movs	r3, #5
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <HAL_SPI_MspInit+0x84>)
 8002050:	f000 fe3a 	bl	8002cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002054:	bf00      	nop
 8002056:	3728      	adds	r7, #40	; 0x28
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40003800 	.word	0x40003800
 8002060:	40021000 	.word	0x40021000
 8002064:	48000400 	.word	0x48000400

08002068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08c      	sub	sp, #48	; 0x30
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2f      	ldr	r2, [pc, #188]	; (8002144 <HAL_UART_MspInit+0xdc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d129      	bne.n	80020de <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_UART_MspInit+0xe0>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4a2e      	ldr	r2, [pc, #184]	; (8002148 <HAL_UART_MspInit+0xe0>)
 8002090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002094:	61d3      	str	r3, [r2, #28]
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <HAL_UART_MspInit+0xe0>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	4b29      	ldr	r3, [pc, #164]	; (8002148 <HAL_UART_MspInit+0xe0>)
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	4a28      	ldr	r2, [pc, #160]	; (8002148 <HAL_UART_MspInit+0xe0>)
 80020a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ac:	6153      	str	r3, [r2, #20]
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_UART_MspInit+0xe0>)
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020ba:	230c      	movs	r3, #12
 80020bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020ca:	2307      	movs	r3, #7
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	4619      	mov	r1, r3
 80020d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d8:	f000 fdf6 	bl	8002cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020dc:	e02d      	b.n	800213a <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1a      	ldr	r2, [pc, #104]	; (800214c <HAL_UART_MspInit+0xe4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d128      	bne.n	800213a <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <HAL_UART_MspInit+0xe0>)
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	4a16      	ldr	r2, [pc, #88]	; (8002148 <HAL_UART_MspInit+0xe0>)
 80020ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f2:	61d3      	str	r3, [r2, #28]
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_UART_MspInit+0xe0>)
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_UART_MspInit+0xe0>)
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	4a10      	ldr	r2, [pc, #64]	; (8002148 <HAL_UART_MspInit+0xe0>)
 8002106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210a:	6153      	str	r3, [r2, #20]
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_UART_MspInit+0xe0>)
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002118:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800211c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800212a:	2307      	movs	r3, #7
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	4619      	mov	r1, r3
 8002134:	4806      	ldr	r0, [pc, #24]	; (8002150 <HAL_UART_MspInit+0xe8>)
 8002136:	f000 fdc7 	bl	8002cc8 <HAL_GPIO_Init>
}
 800213a:	bf00      	nop
 800213c:	3730      	adds	r7, #48	; 0x30
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40004400 	.word	0x40004400
 8002148:	40021000 	.word	0x40021000
 800214c:	40004800 	.word	0x40004800
 8002150:	48000400 	.word	0x48000400

08002154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <NMI_Handler+0x4>

0800215a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215e:	e7fe      	b.n	800215e <HardFault_Handler+0x4>

08002160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <MemManage_Handler+0x4>

08002166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216a:	e7fe      	b.n	800216a <BusFault_Handler+0x4>

0800216c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <UsageFault_Handler+0x4>

08002172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a0:	f000 fc3c 	bl	8002a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 80021ac:	2001      	movs	r0, #1
 80021ae:	f000 ff2d 	bl	800300c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 80021ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021be:	f000 ff25 	bl	800300c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 80021c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021c6:	f000 ff21 	bl	800300c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 80021ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021ce:	f000 ff1d 	bl	800300c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
  return 1;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <_kill>:

int _kill(int pid, int sig)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021f0:	f004 f9dc 	bl	80065ac <__errno>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2216      	movs	r2, #22
 80021f8:	601a      	str	r2, [r3, #0]
  return -1;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <_exit>:

void _exit (int status)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800220e:	f04f 31ff 	mov.w	r1, #4294967295
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ffe7 	bl	80021e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002218:	e7fe      	b.n	8002218 <_exit+0x12>

0800221a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e00a      	b.n	8002242 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800222c:	f3af 8000 	nop.w
 8002230:	4601      	mov	r1, r0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	60ba      	str	r2, [r7, #8]
 8002238:	b2ca      	uxtb	r2, r1
 800223a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3301      	adds	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	429a      	cmp	r2, r3
 8002248:	dbf0      	blt.n	800222c <_read+0x12>
  }

  return len;
 800224a:	687b      	ldr	r3, [r7, #4]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800227c:	605a      	str	r2, [r3, #4]
  return 0;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <_isatty>:

int _isatty(int file)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002294:	2301      	movs	r3, #1
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c4:	4a14      	ldr	r2, [pc, #80]	; (8002318 <_sbrk+0x5c>)
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <_sbrk+0x60>)
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <_sbrk+0x64>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <_sbrk+0x64>)
 80022da:	4a12      	ldr	r2, [pc, #72]	; (8002324 <_sbrk+0x68>)
 80022dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d207      	bcs.n	80022fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ec:	f004 f95e 	bl	80065ac <__errno>
 80022f0:	4603      	mov	r3, r0
 80022f2:	220c      	movs	r2, #12
 80022f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	e009      	b.n	8002310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <_sbrk+0x64>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <_sbrk+0x64>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <_sbrk+0x64>)
 800230c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230e:	68fb      	ldr	r3, [r7, #12]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20004000 	.word	0x20004000
 800231c:	00000400 	.word	0x00000400
 8002320:	200015a8 	.word	0x200015a8
 8002324:	20001650 	.word	0x20001650

08002328 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <SystemInit+0x20>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	4a05      	ldr	r2, [pc, #20]	; (8002348 <SystemInit+0x20>)
 8002334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8002350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002358:	f000 fe28 	bl	8002fac <HAL_GPIO_ReadPin>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d017      	beq.n	8002392 <Displ_Select+0x46>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8002362:	2201      	movs	r2, #1
 8002364:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002368:	480b      	ldr	r0, [pc, #44]	; (8002398 <Displ_Select+0x4c>)
 800236a:	f000 fe37 	bl	8002fdc <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <Displ_Select+0x50>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	490a      	ldr	r1, [pc, #40]	; (800239c <Displ_Select+0x50>)
 8002374:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8002378:	4013      	ands	r3, r2
 800237a:	600b      	str	r3, [r1, #0]
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <Displ_Select+0x50>)
 800237e:	4a07      	ldr	r2, [pc, #28]	; (800239c <Displ_Select+0x50>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8002384:	2200      	movs	r2, #0
 8002386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800238e:	f000 fe25 	bl	8002fdc <HAL_GPIO_WritePin>
		}
	}
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	48000400 	.word	0x48000400
 800239c:	40003800 	.word	0x40003800

080023a0 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6039      	str	r1, [r7, #0]
 80023a8:	4611      	mov	r1, r2
 80023aa:	461a      	mov	r2, r3
 80023ac:	4603      	mov	r3, r0
 80023ae:	71fb      	strb	r3, [r7, #7]
 80023b0:	460b      	mov	r3, r1
 80023b2:	80bb      	strh	r3, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 80023b8:	bf00      	nop
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <Displ_Transmit+0x90>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0fa      	beq.n	80023ba <Displ_Transmit+0x1a>

	Displ_Select();
 80023c4:	f7ff ffc2 	bl	800234c <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d4:	f000 fe02 	bl	8002fdc <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 80023d8:	79bb      	ldrb	r3, [r7, #6]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d016      	beq.n	800240c <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 80023de:	88bb      	ldrh	r3, [r7, #4]
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	e00b      	b.n	8002404 <Displ_Transmit+0x64>
			*data32=__REV16(*data32);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	ba5b      	rev16	r3, r3
 80023f6:	60bb      	str	r3, [r7, #8]
  return result;
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3304      	adds	r3, #4
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d3ef      	bcc.n	80023ec <Displ_Transmit+0x4c>
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <Displ_Transmit+0x90>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8002412:	88ba      	ldrh	r2, [r7, #4]
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
 8002418:	6839      	ldr	r1, [r7, #0]
 800241a:	4806      	ldr	r0, [pc, #24]	; (8002434 <Displ_Transmit+0x94>)
 800241c:	f003 f9c9 	bl	80057b2 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <Displ_Transmit+0x90>)
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000001c 	.word	0x2000001c
 8002434:	200013c4 	.word	0x200013c4

08002438 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8002442:	1df9      	adds	r1, r7, #7
 8002444:	2300      	movs	r3, #0
 8002446:	2201      	movs	r2, #1
 8002448:	2000      	movs	r0, #0
 800244a:	f7ff ffa9 	bl	80023a0 <Displ_Transmit>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	4613      	mov	r3, r2
 8002462:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	b29a      	uxth	r2, r3
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	68f9      	ldr	r1, [r7, #12]
 8002472:	2001      	movs	r0, #1
 8002474:	f7ff ff94 	bl	80023a0 <Displ_Transmit>
 8002478:	e000      	b.n	800247c <Displ_WriteData+0x26>
	if (buff_size==0) return;
 800247a:	bf00      	nop
}
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	Displ_Select();
 8002488:	f7ff ff60 	bl	800234c <Displ_Select>

	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 800248c:	2200      	movs	r2, #0
 800248e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002496:	f000 fda1 	bl	8002fdc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800249a:	2001      	movs	r0, #1
 800249c:	f000 fade 	bl	8002a5c <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 80024a0:	2201      	movs	r2, #1
 80024a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024aa:	f000 fd97 	bl	8002fdc <HAL_GPIO_WritePin>
	HAL_Delay(150);
 80024ae:	2096      	movs	r0, #150	; 0x96
 80024b0:	f000 fad4 	bl	8002a5c <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 80024b4:	203a      	movs	r0, #58	; 0x3a
 80024b6:	f7ff ffbf 	bl	8002438 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 80024ba:	2200      	movs	r2, #0
 80024bc:	2101      	movs	r1, #1
 80024be:	4810      	ldr	r0, [pc, #64]	; (8002500 <ILI9XXX_Init+0x7c>)
 80024c0:	f7ff ffc9 	bl	8002456 <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 80024c4:	20b0      	movs	r0, #176	; 0xb0
 80024c6:	f7ff ffb7 	bl	8002438 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 80024ca:	2200      	movs	r2, #0
 80024cc:	2101      	movs	r1, #1
 80024ce:	480d      	ldr	r0, [pc, #52]	; (8002504 <ILI9XXX_Init+0x80>)
 80024d0:	f7ff ffc1 	bl	8002456 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 80024d4:	20b0      	movs	r0, #176	; 0xb0
 80024d6:	f7ff ffaf 	bl	8002438 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 80024da:	2200      	movs	r2, #0
 80024dc:	2101      	movs	r1, #1
 80024de:	4809      	ldr	r0, [pc, #36]	; (8002504 <ILI9XXX_Init+0x80>)
 80024e0:	f7ff ffb9 	bl	8002456 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 80024e4:	2011      	movs	r0, #17
 80024e6:	f7ff ffa7 	bl	8002438 <Displ_WriteCommand>
	HAL_Delay(120);
 80024ea:	2078      	movs	r0, #120	; 0x78
 80024ec:	f000 fab6 	bl	8002a5c <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 80024f0:	2029      	movs	r0, #41	; 0x29
 80024f2:	f7ff ffa1 	bl	8002438 <Displ_WriteCommand>
	HAL_Delay(5);
 80024f6:	2005      	movs	r0, #5
 80024f8:	f000 fab0 	bl	8002a5c <HAL_Delay>

}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	08007870 	.word	0x08007870
 8002504:	08007874 	.word	0x08007874

08002508 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4604      	mov	r4, r0
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4623      	mov	r3, r4
 8002518:	80fb      	strh	r3, [r7, #6]
 800251a:	4603      	mov	r3, r0
 800251c:	80bb      	strh	r3, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	807b      	strh	r3, [r7, #2]
 8002522:	4613      	mov	r3, r2
 8002524:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	061a      	lsls	r2, r3, #24
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002532:	431a      	orrs	r2, r3
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	b29b      	uxth	r3, r3
 800253a:	4313      	orrs	r3, r2
 800253c:	88fa      	ldrh	r2, [r7, #6]
 800253e:	0a12      	lsrs	r2, r2, #8
 8002540:	b292      	uxth	r2, r2
 8002542:	431a      	orrs	r2, r3
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <Displ_SetAddressWindow+0x90>)
 8002546:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8002548:	202a      	movs	r0, #42	; 0x2a
 800254a:	f7ff ff75 	bl	8002438 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 800254e:	2200      	movs	r2, #0
 8002550:	2104      	movs	r1, #4
 8002552:	4811      	ldr	r0, [pc, #68]	; (8002598 <Displ_SetAddressWindow+0x90>)
 8002554:	f7ff ff7f 	bl	8002456 <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8002558:	883b      	ldrh	r3, [r7, #0]
 800255a:	061a      	lsls	r2, r3, #24
 800255c:	883b      	ldrh	r3, [r7, #0]
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002564:	431a      	orrs	r2, r3
 8002566:	88bb      	ldrh	r3, [r7, #4]
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	b29b      	uxth	r3, r3
 800256c:	4313      	orrs	r3, r2
 800256e:	88ba      	ldrh	r2, [r7, #4]
 8002570:	0a12      	lsrs	r2, r2, #8
 8002572:	b292      	uxth	r2, r2
 8002574:	431a      	orrs	r2, r3
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <Displ_SetAddressWindow+0x90>)
 8002578:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 800257a:	202b      	movs	r0, #43	; 0x2b
 800257c:	f7ff ff5c 	bl	8002438 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8002580:	2200      	movs	r2, #0
 8002582:	2104      	movs	r1, #4
 8002584:	4804      	ldr	r0, [pc, #16]	; (8002598 <Displ_SetAddressWindow+0x90>)
 8002586:	f7ff ff66 	bl	8002456 <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 800258a:	202c      	movs	r0, #44	; 0x2c
 800258c:	f7ff ff54 	bl	8002438 <Displ_WriteCommand>
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}
 8002598:	20001634 	.word	0x20001634

0800259c <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 80025a6:	2201      	movs	r2, #1
 80025a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b0:	f000 fd14 	bl	8002fdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 80025b4:	2201      	movs	r2, #1
 80025b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025ba:	4806      	ldr	r0, [pc, #24]	; (80025d4 <Displ_Init+0x38>)
 80025bc:	f000 fd0e 	bl	8002fdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 80025c0:	f7ff ff60 	bl	8002484 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f806 	bl	80025d8 <Displ_Orientation>
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	48000400 	.word	0x48000400

080025d8 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d837      	bhi.n	8002658 <Displ_Orientation+0x80>
 80025e8:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <Displ_Orientation+0x18>)
 80025ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ee:	bf00      	nop
 80025f0:	08002601 	.word	0x08002601
 80025f4:	08002617 	.word	0x08002617
 80025f8:	0800262d 	.word	0x0800262d
 80025fc:	08002643 	.word	0x08002643
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <Displ_Orientation+0xa0>)
 8002602:	2288      	movs	r2, #136	; 0x88
 8002604:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <Displ_Orientation+0xa4>)
 8002608:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800260c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 800260e:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <Displ_Orientation+0xa8>)
 8002610:	22f0      	movs	r2, #240	; 0xf0
 8002612:	801a      	strh	r2, [r3, #0]
			break;
 8002614:	e020      	b.n	8002658 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8002616:	4b18      	ldr	r3, [pc, #96]	; (8002678 <Displ_Orientation+0xa0>)
 8002618:	22e8      	movs	r2, #232	; 0xe8
 800261a:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <Displ_Orientation+0xa4>)
 800261e:	22f0      	movs	r2, #240	; 0xf0
 8002620:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8002622:	4b17      	ldr	r3, [pc, #92]	; (8002680 <Displ_Orientation+0xa8>)
 8002624:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002628:	801a      	strh	r2, [r3, #0]
			break;
 800262a:	e015      	b.n	8002658 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <Displ_Orientation+0xa0>)
 800262e:	2248      	movs	r2, #72	; 0x48
 8002630:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <Displ_Orientation+0xa4>)
 8002634:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002638:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <Displ_Orientation+0xa8>)
 800263c:	22f0      	movs	r2, #240	; 0xf0
 800263e:	801a      	strh	r2, [r3, #0]
			break;
 8002640:	e00a      	b.n	8002658 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <Displ_Orientation+0xa0>)
 8002644:	2228      	movs	r2, #40	; 0x28
 8002646:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <Displ_Orientation+0xa4>)
 800264a:	22f0      	movs	r2, #240	; 0xf0
 800264c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <Displ_Orientation+0xa8>)
 8002650:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002654:	801a      	strh	r2, [r3, #0]
			break;
 8002656:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8002658:	2036      	movs	r0, #54	; 0x36
 800265a:	f7ff feed 	bl	8002438 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 800265e:	2200      	movs	r2, #0
 8002660:	2101      	movs	r1, #1
 8002662:	4805      	ldr	r0, [pc, #20]	; (8002678 <Displ_Orientation+0xa0>)
 8002664:	f7ff fef7 	bl	8002456 <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8002668:	4a06      	ldr	r2, [pc, #24]	; (8002684 <Displ_Orientation+0xac>)
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	7013      	strb	r3, [r2, #0]
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20001638 	.word	0x20001638
 800267c:	200015b0 	.word	0x200015b0
 8002680:	200015ae 	.word	0x200015ae
 8002684:	200015ac 	.word	0x200015ac

08002688 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b08b      	sub	sp, #44	; 0x2c
 800268c:	af00      	add	r7, sp, #0
 800268e:	4604      	mov	r4, r0
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	461a      	mov	r2, r3
 8002696:	4623      	mov	r3, r4
 8002698:	80fb      	strh	r3, [r7, #6]
 800269a:	4603      	mov	r3, r0
 800269c:	80bb      	strh	r3, [r7, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	807b      	strh	r3, [r7, #2]
 80026a2:	4613      	mov	r3, r2
 80026a4:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	4a4e      	ldr	r2, [pc, #312]	; (80027e4 <Displ_FillArea+0x15c>)
 80026aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80026ae:	4293      	cmp	r3, r2
 80026b0:	f280 8093 	bge.w	80027da <Displ_FillArea+0x152>
 80026b4:	88bb      	ldrh	r3, [r7, #4]
 80026b6:	4a4c      	ldr	r2, [pc, #304]	; (80027e8 <Displ_FillArea+0x160>)
 80026b8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80026bc:	4293      	cmp	r3, r2
 80026be:	f280 808c 	bge.w	80027da <Displ_FillArea+0x152>
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8088 	beq.w	80027da <Displ_FillArea+0x152>
 80026ca:	883b      	ldrh	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8084 	beq.w	80027da <Displ_FillArea+0x152>

	x1=x + w - 1;
 80026d2:	88fa      	ldrh	r2, [r7, #6]
 80026d4:	887b      	ldrh	r3, [r7, #2]
 80026d6:	4413      	add	r3, r2
 80026d8:	3b01      	subs	r3, #1
 80026da:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 80026dc:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <Displ_FillArea+0x15c>)
 80026de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e2:	461a      	mov	r2, r3
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d903      	bls.n	80026f2 <Displ_FillArea+0x6a>
		x1=_width;
 80026ea:	4b3e      	ldr	r3, [pc, #248]	; (80027e4 <Displ_FillArea+0x15c>)
 80026ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026f0:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 80026f2:	88ba      	ldrh	r2, [r7, #4]
 80026f4:	883b      	ldrh	r3, [r7, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	3b01      	subs	r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 80026fc:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <Displ_FillArea+0x160>)
 80026fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002702:	461a      	mov	r2, r3
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	4293      	cmp	r3, r2
 8002708:	d903      	bls.n	8002712 <Displ_FillArea+0x8a>
		y1=_height;
 800270a:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <Displ_FillArea+0x160>)
 800270c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002710:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8002712:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	431a      	orrs	r2, r3
 8002720:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002722:	061b      	lsls	r3, r3, #24
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 8002728:	88bb      	ldrh	r3, [r7, #4]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	3301      	adds	r3, #1
 8002730:	88fa      	ldrh	r2, [r7, #6]
 8002732:	6a39      	ldr	r1, [r7, #32]
 8002734:	1a8a      	subs	r2, r1, r2
 8002736:	3201      	adds	r2, #1
 8002738:	fb02 f303 	mul.w	r3, r2, r3
 800273c:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 800273e:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <Displ_FillArea+0x164>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b1f      	cmp	r3, #31
 8002748:	d804      	bhi.n	8002754 <Displ_FillArea+0xcc>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	3301      	adds	r3, #1
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	e001      	b.n	8002758 <Displ_FillArea+0xd0>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 8002754:	2310      	movs	r3, #16
 8002756:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8002758:	2300      	movs	r3, #0
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
 800275c:	e007      	b.n	800276e <Displ_FillArea+0xe6>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	1d1a      	adds	r2, r3, #4
 8002762:	617a      	str	r2, [r7, #20]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	3301      	adds	r3, #1
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
 800276e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	429a      	cmp	r2, r3
 8002774:	d3f3      	bcc.n	800275e <Displ_FillArea+0xd6>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	b29a      	uxth	r2, r3
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	b29b      	uxth	r3, r3
 800277e:	88b9      	ldrh	r1, [r7, #4]
 8002780:	88f8      	ldrh	r0, [r7, #6]
 8002782:	f7ff fec1 	bl	8002508 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	095b      	lsrs	r3, r3, #5
 800278a:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 800278c:	2300      	movs	r3, #0
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
 8002790:	e009      	b.n	80027a6 <Displ_FillArea+0x11e>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <Displ_FillArea+0x164>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2200      	movs	r2, #0
 8002798:	2140      	movs	r1, #64	; 0x40
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fe5b 	bl	8002456 <Displ_WriteData>
	for  (k=0;k<times;k++) {
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	3301      	adds	r3, #1
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
 80027a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d3f1      	bcc.n	8002792 <Displ_FillArea+0x10a>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <Displ_FillArea+0x164>)
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	005a      	lsls	r2, r3, #1
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	019b      	lsls	r3, r3, #6
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2200      	movs	r2, #0
 80027be:	4619      	mov	r1, r3
 80027c0:	f7ff fe49 	bl	8002456 <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <Displ_FillArea+0x164>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <Displ_FillArea+0x168>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <Displ_FillArea+0x14a>
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <Displ_FillArea+0x16c>)
 80027d0:	e000      	b.n	80027d4 <Displ_FillArea+0x14c>
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <Displ_FillArea+0x168>)
 80027d4:	4a05      	ldr	r2, [pc, #20]	; (80027ec <Displ_FillArea+0x164>)
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	e000      	b.n	80027dc <Displ_FillArea+0x154>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80027da:	bf00      	nop

}
 80027dc:	372c      	adds	r7, #44	; 0x2c
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd90      	pop	{r4, r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200015ae 	.word	0x200015ae
 80027e8:	200015b0 	.word	0x200015b0
 80027ec:	20000020 	.word	0x20000020
 80027f0:	200015b4 	.word	0x200015b4
 80027f4:	200015f4 	.word	0x200015f4

080027f8 <displ_game_screen>:

void displ_game_screen(uint8_t game_screen[][SCREEN_HEIGHT]){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08c      	sub	sp, #48	; 0x30
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	6078      	str	r0, [r7, #4]
	 * -	transfer data to display
	 * -	swap buffers
	 */
	uint32_t k,x1,y1,area,times;

	x1 = SCREEN_WIDTH;
 8002800:	2350      	movs	r3, #80	; 0x50
 8002802:	61bb      	str	r3, [r7, #24]
	y1 = SCREEN_HEIGHT;
 8002804:	233c      	movs	r3, #60	; 0x3c
 8002806:	617b      	str	r3, [r7, #20]
	area = SCREEN_HEIGHT * SCREEN_WIDTH;
 8002808:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800280c:	613b      	str	r3, [r7, #16]

	// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words						// dispBuffer size as 32bit-words
 800280e:	4b3c      	ldr	r3, [pc, #240]	; (8002900 <displ_game_screen+0x108>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60fb      	str	r3, [r7, #12]
	uint32_t color;
	for(int i = 0; i < 240/PIXEL_SIZE; i++){
 8002814:	2300      	movs	r3, #0
 8002816:	623b      	str	r3, [r7, #32]
 8002818:	e06a      	b.n	80028f0 <displ_game_screen+0xf8>
		for(int j = 0; j < 320/PIXEL_SIZE; j++){
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e061      	b.n	80028e4 <displ_game_screen+0xec>
			switch (game_screen[j][i]) {
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	4613      	mov	r3, r2
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	461a      	mov	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	441a      	add	r2, r3
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	4413      	add	r3, r2
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	3b01      	subs	r3, #1
 8002838:	2b09      	cmp	r3, #9
 800283a:	d83d      	bhi.n	80028b8 <displ_game_screen+0xc0>
 800283c:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <displ_game_screen+0x4c>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	0800286d 	.word	0x0800286d
 8002848:	08002875 	.word	0x08002875
 800284c:	0800287d 	.word	0x0800287d
 8002850:	08002883 	.word	0x08002883
 8002854:	0800288b 	.word	0x0800288b
 8002858:	08002891 	.word	0x08002891
 800285c:	08002899 	.word	0x08002899
 8002860:	080028a1 	.word	0x080028a1
 8002864:	080028a9 	.word	0x080028a9
 8002868:	080028b1 	.word	0x080028b1
				case 1:
					color = RED;
 800286c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8002872:	e025      	b.n	80028c0 <displ_game_screen+0xc8>
				case 2:
					color = GREEN;
 8002874:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800287a:	e021      	b.n	80028c0 <displ_game_screen+0xc8>
				case 3:
					color = BLUE;
 800287c:	231f      	movs	r3, #31
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8002880:	e01e      	b.n	80028c0 <displ_game_screen+0xc8>
				case 4:
					color = LIGHT_BLUE;
 8002882:	f24f 73db 	movw	r3, #63451	; 0xf7db
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8002888:	e01a      	b.n	80028c0 <displ_game_screen+0xc8>
				case 5:
					color = BLACK;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800288e:	e017      	b.n	80028c0 <displ_game_screen+0xc8>
				case 6:
					color = DARK_GREY;
 8002890:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8002896:	e013      	b.n	80028c0 <displ_game_screen+0xc8>
				case 7:
					color = YELLOW;
 8002898:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800289e:	e00f      	b.n	80028c0 <displ_game_screen+0xc8>
				case 8:
					color = GREY;
 80028a0:	f249 6396 	movw	r3, #38550	; 0x9696
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80028a6:	e00b      	b.n	80028c0 <displ_game_screen+0xc8>
				case 9:
					color = LIGHT_GREEN;
 80028a8:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80028ae:	e007      	b.n	80028c0 <displ_game_screen+0xc8>
				case 10:
					color = WHITE;
 80028b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80028b6:	e003      	b.n	80028c0 <displ_game_screen+0xc8>
				default:
					color = WHITE;
 80028b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80028be:	bf00      	nop
			}
			Displ_FillArea(j*PIXEL_SIZE,i*PIXEL_SIZE, PIXEL_SIZE, PIXEL_SIZE, color);
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	b298      	uxth	r0, r3
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	b299      	uxth	r1, r3
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2304      	movs	r3, #4
 80028d8:	2204      	movs	r2, #4
 80028da:	f7ff fed5 	bl	8002688 <Displ_FillArea>
		for(int j = 0; j < 320/PIXEL_SIZE; j++){
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3301      	adds	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b4f      	cmp	r3, #79	; 0x4f
 80028e8:	dd9a      	ble.n	8002820 <displ_game_screen+0x28>
	for(int i = 0; i < 240/PIXEL_SIZE; i++){
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	3301      	adds	r3, #1
 80028ee:	623b      	str	r3, [r7, #32]
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	2b3b      	cmp	r3, #59	; 0x3b
 80028f4:	dd91      	ble.n	800281a <displ_game_screen+0x22>
		}
	}


#endif
}
 80028f6:	bf00      	nop
 80028f8:	bf00      	nop
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000020 	.word	0x20000020

08002904 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af02      	add	r7, sp, #8
 800290a:	4603      	mov	r3, r0
 800290c:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <Displ_CLS+0x30>)
 8002910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002914:	b29a      	uxth	r2, r3
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <Displ_CLS+0x34>)
 8002918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800291c:	b299      	uxth	r1, r3
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	460b      	mov	r3, r1
 8002924:	2100      	movs	r1, #0
 8002926:	2000      	movs	r0, #0
 8002928:	f7ff feae 	bl	8002688 <Displ_FillArea>
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200015ae 	.word	0x200015ae
 8002938:	200015b0 	.word	0x200015b0

0800293c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800293c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002974 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002940:	f7ff fcf2 	bl	8002328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002944:	480c      	ldr	r0, [pc, #48]	; (8002978 <LoopForever+0x6>)
  ldr r1, =_edata
 8002946:	490d      	ldr	r1, [pc, #52]	; (800297c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002948:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <LoopForever+0xe>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800294c:	e002      	b.n	8002954 <LoopCopyDataInit>

0800294e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800294e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002952:	3304      	adds	r3, #4

08002954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002958:	d3f9      	bcc.n	800294e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <LoopForever+0x12>)
  ldr r4, =_ebss
 800295c:	4c0a      	ldr	r4, [pc, #40]	; (8002988 <LoopForever+0x16>)
  movs r3, #0
 800295e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002960:	e001      	b.n	8002966 <LoopFillZerobss>

08002962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002964:	3204      	adds	r2, #4

08002966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002968:	d3fb      	bcc.n	8002962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800296a:	f003 fe25 	bl	80065b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800296e:	f7fd febf 	bl	80006f0 <main>

08002972 <LoopForever>:

LoopForever:
    b LoopForever
 8002972:	e7fe      	b.n	8002972 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002974:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800297c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002980:	08007a00 	.word	0x08007a00
  ldr r2, =_sbss
 8002984:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002988:	20001650 	.word	0x20001650

0800298c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800298c:	e7fe      	b.n	800298c <ADC1_IRQHandler>
	...

08002990 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <HAL_Init+0x28>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <HAL_Init+0x28>)
 800299a:	f043 0310 	orr.w	r3, r3, #16
 800299e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a0:	2003      	movs	r0, #3
 80029a2:	f000 f94f 	bl	8002c44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029a6:	200f      	movs	r0, #15
 80029a8:	f000 f808 	bl	80029bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029ac:	f7ff fab0 	bl	8001f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40022000 	.word	0x40022000

080029bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_InitTick+0x54>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_InitTick+0x58>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	4619      	mov	r1, r3
 80029ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 f967 	bl	8002cae <HAL_SYSTICK_Config>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00e      	b.n	8002a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b0f      	cmp	r3, #15
 80029ee:	d80a      	bhi.n	8002a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f0:	2200      	movs	r2, #0
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	f000 f92f 	bl	8002c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029fc:	4a06      	ldr	r2, [pc, #24]	; (8002a18 <HAL_InitTick+0x5c>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e000      	b.n	8002a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20000018 	.word	0x20000018
 8002a14:	20000028 	.word	0x20000028
 8002a18:	20000024 	.word	0x20000024

08002a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_IncTick+0x20>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_IncTick+0x24>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <HAL_IncTick+0x24>)
 8002a2e:	6013      	str	r3, [r2, #0]
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000028 	.word	0x20000028
 8002a40:	2000163c 	.word	0x2000163c

08002a44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return uwTick;  
 8002a48:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <HAL_GetTick+0x14>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	2000163c 	.word	0x2000163c

08002a5c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a64:	f7ff ffee 	bl	8002a44 <HAL_GetTick>
 8002a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d005      	beq.n	8002a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <HAL_Delay+0x44>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002a82:	bf00      	nop
 8002a84:	f7ff ffde 	bl	8002a44 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d8f7      	bhi.n	8002a84 <HAL_Delay+0x28>
  {
  }
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000028 	.word	0x20000028

08002aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad6:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	60d3      	str	r3, [r2, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <__NVIC_GetPriorityGrouping+0x18>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	f003 0307 	and.w	r3, r3, #7
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	db0b      	blt.n	8002b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	f003 021f 	and.w	r2, r3, #31
 8002b20:	4907      	ldr	r1, [pc, #28]	; (8002b40 <__NVIC_EnableIRQ+0x38>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	2001      	movs	r0, #1
 8002b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000e100 	.word	0xe000e100

08002b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	db0a      	blt.n	8002b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	490c      	ldr	r1, [pc, #48]	; (8002b90 <__NVIC_SetPriority+0x4c>)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	0112      	lsls	r2, r2, #4
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	440b      	add	r3, r1
 8002b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b6c:	e00a      	b.n	8002b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4908      	ldr	r1, [pc, #32]	; (8002b94 <__NVIC_SetPriority+0x50>)
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	3b04      	subs	r3, #4
 8002b7c:	0112      	lsls	r2, r2, #4
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	440b      	add	r3, r1
 8002b82:	761a      	strb	r2, [r3, #24]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000e100 	.word	0xe000e100
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f1c3 0307 	rsb	r3, r3, #7
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	bf28      	it	cs
 8002bb6:	2304      	movcs	r3, #4
 8002bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d902      	bls.n	8002bc8 <NVIC_EncodePriority+0x30>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3b03      	subs	r3, #3
 8002bc6:	e000      	b.n	8002bca <NVIC_EncodePriority+0x32>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	401a      	ands	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be0:	f04f 31ff 	mov.w	r1, #4294967295
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	43d9      	mvns	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	4313      	orrs	r3, r2
         );
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	; 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c10:	d301      	bcc.n	8002c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00f      	b.n	8002c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <SysTick_Config+0x40>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1e:	210f      	movs	r1, #15
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
 8002c24:	f7ff ff8e 	bl	8002b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <SysTick_Config+0x40>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2e:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <SysTick_Config+0x40>)
 8002c30:	2207      	movs	r2, #7
 8002c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	e000e010 	.word	0xe000e010

08002c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff29 	bl	8002aa4 <__NVIC_SetPriorityGrouping>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c6c:	f7ff ff3e 	bl	8002aec <__NVIC_GetPriorityGrouping>
 8002c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	6978      	ldr	r0, [r7, #20]
 8002c78:	f7ff ff8e 	bl	8002b98 <NVIC_EncodePriority>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff5d 	bl	8002b44 <__NVIC_SetPriority>
}
 8002c8a:	bf00      	nop
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff31 	bl	8002b08 <__NVIC_EnableIRQ>
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ffa2 	bl	8002c00 <SysTick_Config>
 8002cbc:	4603      	mov	r3, r0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd6:	e14e      	b.n	8002f76 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	2101      	movs	r1, #1
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 8140 	beq.w	8002f70 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d005      	beq.n	8002d08 <HAL_GPIO_Init+0x40>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d130      	bne.n	8002d6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d3e:	2201      	movs	r2, #1
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	f003 0201 	and.w	r2, r3, #1
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d017      	beq.n	8002da6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d123      	bne.n	8002dfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	08da      	lsrs	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3208      	adds	r2, #8
 8002dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	220f      	movs	r2, #15
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	08da      	lsrs	r2, r3, #3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3208      	adds	r2, #8
 8002df4:	6939      	ldr	r1, [r7, #16]
 8002df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2203      	movs	r2, #3
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0203 	and.w	r2, r3, #3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 809a 	beq.w	8002f70 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3c:	4b55      	ldr	r3, [pc, #340]	; (8002f94 <HAL_GPIO_Init+0x2cc>)
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	4a54      	ldr	r2, [pc, #336]	; (8002f94 <HAL_GPIO_Init+0x2cc>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6193      	str	r3, [r2, #24]
 8002e48:	4b52      	ldr	r3, [pc, #328]	; (8002f94 <HAL_GPIO_Init+0x2cc>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e54:	4a50      	ldr	r2, [pc, #320]	; (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	089b      	lsrs	r3, r3, #2
 8002e5a:	3302      	adds	r3, #2
 8002e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	220f      	movs	r2, #15
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e7e:	d013      	beq.n	8002ea8 <HAL_GPIO_Init+0x1e0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a46      	ldr	r2, [pc, #280]	; (8002f9c <HAL_GPIO_Init+0x2d4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00d      	beq.n	8002ea4 <HAL_GPIO_Init+0x1dc>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a45      	ldr	r2, [pc, #276]	; (8002fa0 <HAL_GPIO_Init+0x2d8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d007      	beq.n	8002ea0 <HAL_GPIO_Init+0x1d8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a44      	ldr	r2, [pc, #272]	; (8002fa4 <HAL_GPIO_Init+0x2dc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d101      	bne.n	8002e9c <HAL_GPIO_Init+0x1d4>
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e006      	b.n	8002eaa <HAL_GPIO_Init+0x1e2>
 8002e9c:	2305      	movs	r3, #5
 8002e9e:	e004      	b.n	8002eaa <HAL_GPIO_Init+0x1e2>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e002      	b.n	8002eaa <HAL_GPIO_Init+0x1e2>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_GPIO_Init+0x1e2>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	f002 0203 	and.w	r2, r2, #3
 8002eb0:	0092      	lsls	r2, r2, #2
 8002eb2:	4093      	lsls	r3, r2
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002eba:	4937      	ldr	r1, [pc, #220]	; (8002f98 <HAL_GPIO_Init+0x2d0>)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ec8:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <HAL_GPIO_Init+0x2e0>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002eec:	4a2e      	ldr	r2, [pc, #184]	; (8002fa8 <HAL_GPIO_Init+0x2e0>)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef2:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_GPIO_Init+0x2e0>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f16:	4a24      	ldr	r2, [pc, #144]	; (8002fa8 <HAL_GPIO_Init+0x2e0>)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f1c:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <HAL_GPIO_Init+0x2e0>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f40:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_GPIO_Init+0x2e0>)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f46:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <HAL_GPIO_Init+0x2e0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f6a:	4a0f      	ldr	r2, [pc, #60]	; (8002fa8 <HAL_GPIO_Init+0x2e0>)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3301      	adds	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f47f aea9 	bne.w	8002cd8 <HAL_GPIO_Init+0x10>
  }
}
 8002f86:	bf00      	nop
 8002f88:	bf00      	nop
 8002f8a:	371c      	adds	r7, #28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40010000 	.word	0x40010000
 8002f9c:	48000400 	.word	0x48000400
 8002fa0:	48000800 	.word	0x48000800
 8002fa4:	48000c00 	.word	0x48000c00
 8002fa8:	40010400 	.word	0x40010400

08002fac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	887b      	ldrh	r3, [r7, #2]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	e001      	b.n	8002fce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fec:	787b      	ldrb	r3, [r7, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ff8:	e002      	b.n	8003000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ffa:	887a      	ldrh	r2, [r7, #2]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d006      	beq.n	8003030 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003022:	4a05      	ldr	r2, [pc, #20]	; (8003038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fdb2 	bl	8000b94 <HAL_GPIO_EXTI_Callback>
  }
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40010400 	.word	0x40010400

0800303c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e081      	b.n	8003152 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fe ff78 	bl	8001f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	; 0x24
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800308c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800309c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	e006      	b.n	80030c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d104      	bne.n	80030d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69d9      	ldr	r1, [r3, #28]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1a      	ldr	r2, [r3, #32]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	4608      	mov	r0, r1
 8003166:	4611      	mov	r1, r2
 8003168:	461a      	mov	r2, r3
 800316a:	4603      	mov	r3, r0
 800316c:	817b      	strh	r3, [r7, #10]
 800316e:	460b      	mov	r3, r1
 8003170:	813b      	strh	r3, [r7, #8]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b20      	cmp	r3, #32
 8003180:	f040 80f9 	bne.w	8003376 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_I2C_Mem_Write+0x34>
 800318a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003196:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0ed      	b.n	8003378 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_I2C_Mem_Write+0x4e>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e0e6      	b.n	8003378 <HAL_I2C_Mem_Write+0x21c>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031b2:	f7ff fc47 	bl	8002a44 <HAL_GetTick>
 80031b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2319      	movs	r3, #25
 80031be:	2201      	movs	r2, #1
 80031c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fbcd 	bl	8003964 <I2C_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0d1      	b.n	8003378 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2221      	movs	r2, #33	; 0x21
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2240      	movs	r2, #64	; 0x40
 80031e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a3a      	ldr	r2, [r7, #32]
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031fc:	88f8      	ldrh	r0, [r7, #6]
 80031fe:	893a      	ldrh	r2, [r7, #8]
 8003200:	8979      	ldrh	r1, [r7, #10]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	9301      	str	r3, [sp, #4]
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	4603      	mov	r3, r0
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fadd 	bl	80037cc <I2C_RequestMemoryWrite>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0a9      	b.n	8003378 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	2bff      	cmp	r3, #255	; 0xff
 800322c:	d90e      	bls.n	800324c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	22ff      	movs	r2, #255	; 0xff
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	b2da      	uxtb	r2, r3
 800323a:	8979      	ldrh	r1, [r7, #10]
 800323c:	2300      	movs	r3, #0
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 fd47 	bl	8003cd8 <I2C_TransferConfig>
 800324a:	e00f      	b.n	800326c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325a:	b2da      	uxtb	r2, r3
 800325c:	8979      	ldrh	r1, [r7, #10]
 800325e:	2300      	movs	r3, #0
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fd36 	bl	8003cd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fbc6 	bl	8003a02 <I2C_WaitOnTXISFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e07b      	b.n	8003378 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d034      	beq.n	8003324 <HAL_I2C_Mem_Write+0x1c8>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d130      	bne.n	8003324 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	2200      	movs	r2, #0
 80032ca:	2180      	movs	r1, #128	; 0x80
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fb49 	bl	8003964 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e04d      	b.n	8003378 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2bff      	cmp	r3, #255	; 0xff
 80032e4:	d90e      	bls.n	8003304 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	22ff      	movs	r2, #255	; 0xff
 80032ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	8979      	ldrh	r1, [r7, #10]
 80032f4:	2300      	movs	r3, #0
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fceb 	bl	8003cd8 <I2C_TransferConfig>
 8003302:	e00f      	b.n	8003324 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003312:	b2da      	uxtb	r2, r3
 8003314:	8979      	ldrh	r1, [r7, #10]
 8003316:	2300      	movs	r3, #0
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fcda 	bl	8003cd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d19e      	bne.n	800326c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fbac 	bl	8003a90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e01a      	b.n	8003378 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2220      	movs	r2, #32
 8003348:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_I2C_Mem_Write+0x224>)
 8003356:	400b      	ands	r3, r1
 8003358:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003376:	2302      	movs	r3, #2
  }
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	fe00e800 	.word	0xfe00e800

08003384 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	4608      	mov	r0, r1
 800338e:	4611      	mov	r1, r2
 8003390:	461a      	mov	r2, r3
 8003392:	4603      	mov	r3, r0
 8003394:	817b      	strh	r3, [r7, #10]
 8003396:	460b      	mov	r3, r1
 8003398:	813b      	strh	r3, [r7, #8]
 800339a:	4613      	mov	r3, r2
 800339c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	f040 80fd 	bne.w	80035a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_I2C_Mem_Read+0x34>
 80033b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d105      	bne.n	80033c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0f1      	b.n	80035a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_I2C_Mem_Read+0x4e>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e0ea      	b.n	80035a8 <HAL_I2C_Mem_Read+0x224>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033da:	f7ff fb33 	bl	8002a44 <HAL_GetTick>
 80033de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	2319      	movs	r3, #25
 80033e6:	2201      	movs	r2, #1
 80033e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fab9 	bl	8003964 <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0d5      	b.n	80035a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2222      	movs	r2, #34	; 0x22
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2240      	movs	r2, #64	; 0x40
 8003408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a3a      	ldr	r2, [r7, #32]
 8003416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800341c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003424:	88f8      	ldrh	r0, [r7, #6]
 8003426:	893a      	ldrh	r2, [r7, #8]
 8003428:	8979      	ldrh	r1, [r7, #10]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	4603      	mov	r3, r0
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fa1d 	bl	8003874 <I2C_RequestMemoryRead>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0ad      	b.n	80035a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	2bff      	cmp	r3, #255	; 0xff
 8003454:	d90e      	bls.n	8003474 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	22ff      	movs	r2, #255	; 0xff
 800345a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003460:	b2da      	uxtb	r2, r3
 8003462:	8979      	ldrh	r1, [r7, #10]
 8003464:	4b52      	ldr	r3, [pc, #328]	; (80035b0 <HAL_I2C_Mem_Read+0x22c>)
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 fc33 	bl	8003cd8 <I2C_TransferConfig>
 8003472:	e00f      	b.n	8003494 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003482:	b2da      	uxtb	r2, r3
 8003484:	8979      	ldrh	r1, [r7, #10]
 8003486:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <HAL_I2C_Mem_Read+0x22c>)
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 fc22 	bl	8003cd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	2200      	movs	r2, #0
 800349c:	2104      	movs	r1, #4
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 fa60 	bl	8003964 <I2C_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e07c      	b.n	80035a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d034      	beq.n	8003554 <HAL_I2C_Mem_Read+0x1d0>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d130      	bne.n	8003554 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	2200      	movs	r2, #0
 80034fa:	2180      	movs	r1, #128	; 0x80
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fa31 	bl	8003964 <I2C_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e04d      	b.n	80035a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003510:	b29b      	uxth	r3, r3
 8003512:	2bff      	cmp	r3, #255	; 0xff
 8003514:	d90e      	bls.n	8003534 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	22ff      	movs	r2, #255	; 0xff
 800351a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	b2da      	uxtb	r2, r3
 8003522:	8979      	ldrh	r1, [r7, #10]
 8003524:	2300      	movs	r3, #0
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fbd3 	bl	8003cd8 <I2C_TransferConfig>
 8003532:	e00f      	b.n	8003554 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003542:	b2da      	uxtb	r2, r3
 8003544:	8979      	ldrh	r1, [r7, #10]
 8003546:	2300      	movs	r3, #0
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fbc2 	bl	8003cd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d19a      	bne.n	8003494 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fa94 	bl	8003a90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e01a      	b.n	80035a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2220      	movs	r2, #32
 8003578:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_I2C_Mem_Read+0x230>)
 8003586:	400b      	ands	r3, r1
 8003588:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	80002400 	.word	0x80002400
 80035b4:	fe00e800 	.word	0xfe00e800

080035b8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	460b      	mov	r3, r1
 80035c6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	f040 80f3 	bne.w	80037c0 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80035ea:	2302      	movs	r3, #2
 80035ec:	e0e9      	b.n	80037c2 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_I2C_IsDeviceReady+0x44>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e0e2      	b.n	80037c2 <HAL_I2C_IsDeviceReady+0x20a>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2224      	movs	r2, #36	; 0x24
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d107      	bne.n	800362a <HAL_I2C_IsDeviceReady+0x72>
 800361a:	897b      	ldrh	r3, [r7, #10]
 800361c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003620:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003624:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003628:	e006      	b.n	8003638 <HAL_I2C_IsDeviceReady+0x80>
 800362a:	897b      	ldrh	r3, [r7, #10]
 800362c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003630:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003634:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800363e:	f7ff fa01 	bl	8002a44 <HAL_GetTick>
 8003642:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b20      	cmp	r3, #32
 8003650:	bf0c      	ite	eq
 8003652:	2301      	moveq	r3, #1
 8003654:	2300      	movne	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b10      	cmp	r3, #16
 8003666:	bf0c      	ite	eq
 8003668:	2301      	moveq	r3, #1
 800366a:	2300      	movne	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003670:	e034      	b.n	80036dc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d01a      	beq.n	80036b0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7ff f9e3 	bl	8002a44 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <HAL_I2C_IsDeviceReady+0xd8>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10f      	bne.n	80036b0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	f043 0220 	orr.w	r2, r3, #32
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e088      	b.n	80037c2 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	bf0c      	ite	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	2300      	movne	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80036dc:	7ffb      	ldrb	r3, [r7, #31]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <HAL_I2C_IsDeviceReady+0x130>
 80036e2:	7fbb      	ldrb	r3, [r7, #30]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0c4      	beq.n	8003672 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d01a      	beq.n	800372c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2200      	movs	r2, #0
 80036fe:	2120      	movs	r1, #32
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f92f 	bl	8003964 <I2C_WaitOnFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e058      	b.n	80037c2 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2220      	movs	r2, #32
 8003716:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	e04a      	b.n	80037c2 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2200      	movs	r2, #0
 8003734:	2120      	movs	r1, #32
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f914 	bl	8003964 <I2C_WaitOnFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e03d      	b.n	80037c2 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2210      	movs	r2, #16
 800374c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2220      	movs	r2, #32
 8003754:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	429a      	cmp	r2, r3
 800375c:	d118      	bne.n	8003790 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800376c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2200      	movs	r2, #0
 8003776:	2120      	movs	r1, #32
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f8f3 	bl	8003964 <I2C_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e01c      	b.n	80037c2 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2220      	movs	r2, #32
 800378e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	3301      	adds	r3, #1
 8003794:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	429a      	cmp	r2, r3
 800379c:	f63f af39 	bhi.w	8003612 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
  }
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	4608      	mov	r0, r1
 80037d6:	4611      	mov	r1, r2
 80037d8:	461a      	mov	r2, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	817b      	strh	r3, [r7, #10]
 80037de:	460b      	mov	r3, r1
 80037e0:	813b      	strh	r3, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	8979      	ldrh	r1, [r7, #10]
 80037ec:	4b20      	ldr	r3, [pc, #128]	; (8003870 <I2C_RequestMemoryWrite+0xa4>)
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fa6f 	bl	8003cd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	69b9      	ldr	r1, [r7, #24]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f8ff 	bl	8003a02 <I2C_WaitOnTXISFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e02c      	b.n	8003868 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d105      	bne.n	8003820 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003814:	893b      	ldrh	r3, [r7, #8]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	629a      	str	r2, [r3, #40]	; 0x28
 800381e:	e015      	b.n	800384c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003820:	893b      	ldrh	r3, [r7, #8]
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	b29b      	uxth	r3, r3
 8003826:	b2da      	uxtb	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	69b9      	ldr	r1, [r7, #24]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f8e5 	bl	8003a02 <I2C_WaitOnTXISFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e012      	b.n	8003868 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003842:	893b      	ldrh	r3, [r7, #8]
 8003844:	b2da      	uxtb	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2200      	movs	r2, #0
 8003854:	2180      	movs	r1, #128	; 0x80
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f884 	bl	8003964 <I2C_WaitOnFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	80002000 	.word	0x80002000

08003874 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	4608      	mov	r0, r1
 800387e:	4611      	mov	r1, r2
 8003880:	461a      	mov	r2, r3
 8003882:	4603      	mov	r3, r0
 8003884:	817b      	strh	r3, [r7, #10]
 8003886:	460b      	mov	r3, r1
 8003888:	813b      	strh	r3, [r7, #8]
 800388a:	4613      	mov	r3, r2
 800388c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	8979      	ldrh	r1, [r7, #10]
 8003894:	4b20      	ldr	r3, [pc, #128]	; (8003918 <I2C_RequestMemoryRead+0xa4>)
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2300      	movs	r3, #0
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fa1c 	bl	8003cd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	69b9      	ldr	r1, [r7, #24]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f8ac 	bl	8003a02 <I2C_WaitOnTXISFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e02c      	b.n	800390e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d105      	bne.n	80038c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038ba:	893b      	ldrh	r3, [r7, #8]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28
 80038c4:	e015      	b.n	80038f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038c6:	893b      	ldrh	r3, [r7, #8]
 80038c8:	0a1b      	lsrs	r3, r3, #8
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	69b9      	ldr	r1, [r7, #24]
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f892 	bl	8003a02 <I2C_WaitOnTXISFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e012      	b.n	800390e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038e8:	893b      	ldrh	r3, [r7, #8]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2140      	movs	r1, #64	; 0x40
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f831 	bl	8003964 <I2C_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	80002000 	.word	0x80002000

0800391c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b02      	cmp	r3, #2
 8003930:	d103      	bne.n	800393a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2200      	movs	r2, #0
 8003938:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d007      	beq.n	8003958 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	619a      	str	r2, [r3, #24]
  }
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	4613      	mov	r3, r2
 8003972:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003974:	e031      	b.n	80039da <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d02d      	beq.n	80039da <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397e:	f7ff f861 	bl	8002a44 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d302      	bcc.n	8003994 <I2C_WaitOnFlagUntilTimeout+0x30>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d122      	bne.n	80039da <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4013      	ands	r3, r2
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d113      	bne.n	80039da <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f043 0220 	orr.w	r2, r3, #32
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e00f      	b.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4013      	ands	r3, r2
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	bf0c      	ite	eq
 80039ea:	2301      	moveq	r3, #1
 80039ec:	2300      	movne	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d0be      	beq.n	8003976 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a0e:	e033      	b.n	8003a78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f87f 	bl	8003b18 <I2C_IsErrorOccurred>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e031      	b.n	8003a88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d025      	beq.n	8003a78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2c:	f7ff f80a 	bl	8002a44 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d302      	bcc.n	8003a42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d11a      	bne.n	8003a78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d013      	beq.n	8003a78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e007      	b.n	8003a88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d1c4      	bne.n	8003a10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a9c:	e02f      	b.n	8003afe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f838 	bl	8003b18 <I2C_IsErrorOccurred>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e02d      	b.n	8003b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab2:	f7fe ffc7 	bl	8002a44 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d302      	bcc.n	8003ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d11a      	bne.n	8003afe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	d013      	beq.n	8003afe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	f043 0220 	orr.w	r2, r3, #32
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e007      	b.n	8003b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d1c8      	bne.n	8003a9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d068      	beq.n	8003c16 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2210      	movs	r2, #16
 8003b4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b4c:	e049      	b.n	8003be2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d045      	beq.n	8003be2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b56:	f7fe ff75 	bl	8002a44 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <I2C_IsErrorOccurred+0x54>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d13a      	bne.n	8003be2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b8e:	d121      	bne.n	8003bd4 <I2C_IsErrorOccurred+0xbc>
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b96:	d01d      	beq.n	8003bd4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d01a      	beq.n	8003bd4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bae:	f7fe ff49 	bl	8002a44 <HAL_GetTick>
 8003bb2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bb4:	e00e      	b.n	8003bd4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bb6:	f7fe ff45 	bl	8002a44 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b19      	cmp	r3, #25
 8003bc2:	d907      	bls.n	8003bd4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	f043 0320 	orr.w	r3, r3, #32
 8003bca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003bd2:	e006      	b.n	8003be2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d1e9      	bne.n	8003bb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d003      	beq.n	8003bf8 <I2C_IsErrorOccurred+0xe0>
 8003bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0aa      	beq.n	8003b4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2220      	movs	r2, #32
 8003c06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	f043 0304 	orr.w	r3, r3, #4
 8003c0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00b      	beq.n	8003c40 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	f043 0308 	orr.w	r3, r3, #8
 8003c50:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00b      	beq.n	8003c84 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	f043 0302 	orr.w	r3, r3, #2
 8003c72:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01c      	beq.n	8003cc6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff fe45 	bl	800391c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <I2C_IsErrorOccurred+0x1bc>)
 8003c9e:	400b      	ands	r3, r1
 8003ca0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3728      	adds	r7, #40	; 0x28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	fe00e800 	.word	0xfe00e800

08003cd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	607b      	str	r3, [r7, #4]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	817b      	strh	r3, [r7, #10]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cea:	897b      	ldrh	r3, [r7, #10]
 8003cec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cf0:	7a7b      	ldrb	r3, [r7, #9]
 8003cf2:	041b      	lsls	r3, r3, #16
 8003cf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cf8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	0d5b      	lsrs	r3, r3, #21
 8003d12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <I2C_TransferConfig+0x60>)
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	ea02 0103 	and.w	r1, r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	03ff63ff 	.word	0x03ff63ff

08003d3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	d138      	bne.n	8003dc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e032      	b.n	8003dc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2224      	movs	r2, #36	; 0x24
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0201 	bic.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6819      	ldr	r1, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e000      	b.n	8003dc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d139      	bne.n	8003e5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e033      	b.n	8003e5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2224      	movs	r2, #36	; 0x24
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0201 	bic.w	r2, r2, #1
 8003e14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e7c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d102      	bne.n	8003e92 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f001 b823 	b.w	8004ed8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 817d 	beq.w	80041a2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ea8:	4bbc      	ldr	r3, [pc, #752]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d00c      	beq.n	8003ece <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003eb4:	4bb9      	ldr	r3, [pc, #740]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d15c      	bne.n	8003f7a <HAL_RCC_OscConfig+0x10e>
 8003ec0:	4bb6      	ldr	r3, [pc, #728]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ecc:	d155      	bne.n	8003f7a <HAL_RCC_OscConfig+0x10e>
 8003ece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ed2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003eda:	fa93 f3a3 	rbit	r3, r3
 8003ede:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ee2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee6:	fab3 f383 	clz	r3, r3
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d102      	bne.n	8003f00 <HAL_RCC_OscConfig+0x94>
 8003efa:	4ba8      	ldr	r3, [pc, #672]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	e015      	b.n	8003f2c <HAL_RCC_OscConfig+0xc0>
 8003f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f04:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f08:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003f0c:	fa93 f3a3 	rbit	r3, r3
 8003f10:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f18:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003f1c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003f20:	fa93 f3a3 	rbit	r3, r3
 8003f24:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003f28:	4b9c      	ldr	r3, [pc, #624]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f30:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003f34:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003f38:	fa92 f2a2 	rbit	r2, r2
 8003f3c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003f40:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003f44:	fab2 f282 	clz	r2, r2
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	f042 0220 	orr.w	r2, r2, #32
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	f002 021f 	and.w	r2, r2, #31
 8003f54:	2101      	movs	r1, #1
 8003f56:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 811f 	beq.w	80041a0 <HAL_RCC_OscConfig+0x334>
 8003f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f040 8116 	bne.w	80041a0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f000 bfaf 	b.w	8004ed8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8a:	d106      	bne.n	8003f9a <HAL_RCC_OscConfig+0x12e>
 8003f8c:	4b83      	ldr	r3, [pc, #524]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a82      	ldr	r2, [pc, #520]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	e036      	b.n	8004008 <HAL_RCC_OscConfig+0x19c>
 8003f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x158>
 8003faa:	4b7c      	ldr	r3, [pc, #496]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a7b      	ldr	r2, [pc, #492]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	4b79      	ldr	r3, [pc, #484]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a78      	ldr	r2, [pc, #480]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e021      	b.n	8004008 <HAL_RCC_OscConfig+0x19c>
 8003fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x184>
 8003fd6:	4b71      	ldr	r3, [pc, #452]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a70      	ldr	r2, [pc, #448]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4b6e      	ldr	r3, [pc, #440]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a6d      	ldr	r2, [pc, #436]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e00b      	b.n	8004008 <HAL_RCC_OscConfig+0x19c>
 8003ff0:	4b6a      	ldr	r3, [pc, #424]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a69      	ldr	r2, [pc, #420]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b67      	ldr	r3, [pc, #412]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a66      	ldr	r2, [pc, #408]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8004002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004006:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004008:	4b64      	ldr	r3, [pc, #400]	; (800419c <HAL_RCC_OscConfig+0x330>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	f023 020f 	bic.w	r2, r3, #15
 8004010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004014:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	495f      	ldr	r1, [pc, #380]	; (800419c <HAL_RCC_OscConfig+0x330>)
 800401e:	4313      	orrs	r3, r2
 8004020:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004026:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d059      	beq.n	80040e6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004032:	f7fe fd07 	bl	8002a44 <HAL_GetTick>
 8004036:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403a:	e00a      	b.n	8004052 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800403c:	f7fe fd02 	bl	8002a44 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b64      	cmp	r3, #100	; 0x64
 800404a:	d902      	bls.n	8004052 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	f000 bf43 	b.w	8004ed8 <HAL_RCC_OscConfig+0x106c>
 8004052:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004056:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800405e:	fa93 f3a3 	rbit	r3, r3
 8004062:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004066:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406a:	fab3 f383 	clz	r3, r3
 800406e:	b2db      	uxtb	r3, r3
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d102      	bne.n	8004084 <HAL_RCC_OscConfig+0x218>
 800407e:	4b47      	ldr	r3, [pc, #284]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	e015      	b.n	80040b0 <HAL_RCC_OscConfig+0x244>
 8004084:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004088:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800409c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80040a0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80040a4:	fa93 f3a3 	rbit	r3, r3
 80040a8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80040ac:	4b3b      	ldr	r3, [pc, #236]	; (800419c <HAL_RCC_OscConfig+0x330>)
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040b4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80040b8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80040bc:	fa92 f2a2 	rbit	r2, r2
 80040c0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80040c4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80040c8:	fab2 f282 	clz	r2, r2
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	f042 0220 	orr.w	r2, r2, #32
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	f002 021f 	and.w	r2, r2, #31
 80040d8:	2101      	movs	r1, #1
 80040da:	fa01 f202 	lsl.w	r2, r1, r2
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ab      	beq.n	800403c <HAL_RCC_OscConfig+0x1d0>
 80040e4:	e05d      	b.n	80041a2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e6:	f7fe fcad 	bl	8002a44 <HAL_GetTick>
 80040ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ee:	e00a      	b.n	8004106 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f0:	f7fe fca8 	bl	8002a44 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b64      	cmp	r3, #100	; 0x64
 80040fe:	d902      	bls.n	8004106 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	f000 bee9 	b.w	8004ed8 <HAL_RCC_OscConfig+0x106c>
 8004106:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800410a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004112:	fa93 f3a3 	rbit	r3, r3
 8004116:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800411a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b01      	cmp	r3, #1
 8004130:	d102      	bne.n	8004138 <HAL_RCC_OscConfig+0x2cc>
 8004132:	4b1a      	ldr	r3, [pc, #104]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	e015      	b.n	8004164 <HAL_RCC_OscConfig+0x2f8>
 8004138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800413c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004144:	fa93 f3a3 	rbit	r3, r3
 8004148:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800414c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004150:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004154:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004158:	fa93 f3a3 	rbit	r3, r3
 800415c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004160:	4b0e      	ldr	r3, [pc, #56]	; (800419c <HAL_RCC_OscConfig+0x330>)
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004168:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800416c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004170:	fa92 f2a2 	rbit	r2, r2
 8004174:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004178:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800417c:	fab2 f282 	clz	r2, r2
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	f042 0220 	orr.w	r2, r2, #32
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	f002 021f 	and.w	r2, r2, #31
 800418c:	2101      	movs	r1, #1
 800418e:	fa01 f202 	lsl.w	r2, r1, r2
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1ab      	bne.n	80040f0 <HAL_RCC_OscConfig+0x284>
 8004198:	e003      	b.n	80041a2 <HAL_RCC_OscConfig+0x336>
 800419a:	bf00      	nop
 800419c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 817d 	beq.w	80044b2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80041b8:	4ba6      	ldr	r3, [pc, #664]	; (8004454 <HAL_RCC_OscConfig+0x5e8>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 030c 	and.w	r3, r3, #12
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80041c4:	4ba3      	ldr	r3, [pc, #652]	; (8004454 <HAL_RCC_OscConfig+0x5e8>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 030c 	and.w	r3, r3, #12
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d172      	bne.n	80042b6 <HAL_RCC_OscConfig+0x44a>
 80041d0:	4ba0      	ldr	r3, [pc, #640]	; (8004454 <HAL_RCC_OscConfig+0x5e8>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d16c      	bne.n	80042b6 <HAL_RCC_OscConfig+0x44a>
 80041dc:	2302      	movs	r3, #2
 80041de:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80041ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041f2:	fab3 f383 	clz	r3, r3
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b01      	cmp	r3, #1
 8004204:	d102      	bne.n	800420c <HAL_RCC_OscConfig+0x3a0>
 8004206:	4b93      	ldr	r3, [pc, #588]	; (8004454 <HAL_RCC_OscConfig+0x5e8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	e013      	b.n	8004234 <HAL_RCC_OscConfig+0x3c8>
 800420c:	2302      	movs	r3, #2
 800420e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004216:	fa93 f3a3 	rbit	r3, r3
 800421a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800421e:	2302      	movs	r3, #2
 8004220:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004224:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004228:	fa93 f3a3 	rbit	r3, r3
 800422c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004230:	4b88      	ldr	r3, [pc, #544]	; (8004454 <HAL_RCC_OscConfig+0x5e8>)
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	2202      	movs	r2, #2
 8004236:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800423a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800423e:	fa92 f2a2 	rbit	r2, r2
 8004242:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004246:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800424a:	fab2 f282 	clz	r2, r2
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	f042 0220 	orr.w	r2, r2, #32
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	f002 021f 	and.w	r2, r2, #31
 800425a:	2101      	movs	r1, #1
 800425c:	fa01 f202 	lsl.w	r2, r1, r2
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCC_OscConfig+0x410>
 8004266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d002      	beq.n	800427c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f000 be2e 	b.w	8004ed8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800427c:	4b75      	ldr	r3, [pc, #468]	; (8004454 <HAL_RCC_OscConfig+0x5e8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004288:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	21f8      	movs	r1, #248	; 0xf8
 8004292:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004296:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800429a:	fa91 f1a1 	rbit	r1, r1
 800429e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80042a2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80042a6:	fab1 f181 	clz	r1, r1
 80042aa:	b2c9      	uxtb	r1, r1
 80042ac:	408b      	lsls	r3, r1
 80042ae:	4969      	ldr	r1, [pc, #420]	; (8004454 <HAL_RCC_OscConfig+0x5e8>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042b4:	e0fd      	b.n	80044b2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8088 	beq.w	80043d8 <HAL_RCC_OscConfig+0x56c>
 80042c8:	2301      	movs	r3, #1
 80042ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80042da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042de:	fab3 f383 	clz	r3, r3
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	461a      	mov	r2, r3
 80042f0:	2301      	movs	r3, #1
 80042f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f4:	f7fe fba6 	bl	8002a44 <HAL_GetTick>
 80042f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fc:	e00a      	b.n	8004314 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042fe:	f7fe fba1 	bl	8002a44 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d902      	bls.n	8004314 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	f000 bde2 	b.w	8004ed8 <HAL_RCC_OscConfig+0x106c>
 8004314:	2302      	movs	r3, #2
 8004316:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004326:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432a:	fab3 f383 	clz	r3, r3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d102      	bne.n	8004344 <HAL_RCC_OscConfig+0x4d8>
 800433e:	4b45      	ldr	r3, [pc, #276]	; (8004454 <HAL_RCC_OscConfig+0x5e8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	e013      	b.n	800436c <HAL_RCC_OscConfig+0x500>
 8004344:	2302      	movs	r3, #2
 8004346:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800434e:	fa93 f3a3 	rbit	r3, r3
 8004352:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004356:	2302      	movs	r3, #2
 8004358:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800435c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004368:	4b3a      	ldr	r3, [pc, #232]	; (8004454 <HAL_RCC_OscConfig+0x5e8>)
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	2202      	movs	r2, #2
 800436e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004372:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004376:	fa92 f2a2 	rbit	r2, r2
 800437a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800437e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004382:	fab2 f282 	clz	r2, r2
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	f042 0220 	orr.w	r2, r2, #32
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	f002 021f 	and.w	r2, r2, #31
 8004392:	2101      	movs	r1, #1
 8004394:	fa01 f202 	lsl.w	r2, r1, r2
 8004398:	4013      	ands	r3, r2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0af      	beq.n	80042fe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439e:	4b2d      	ldr	r3, [pc, #180]	; (8004454 <HAL_RCC_OscConfig+0x5e8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	21f8      	movs	r1, #248	; 0xf8
 80043b4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80043bc:	fa91 f1a1 	rbit	r1, r1
 80043c0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80043c4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80043c8:	fab1 f181 	clz	r1, r1
 80043cc:	b2c9      	uxtb	r1, r1
 80043ce:	408b      	lsls	r3, r1
 80043d0:	4920      	ldr	r1, [pc, #128]	; (8004454 <HAL_RCC_OscConfig+0x5e8>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]
 80043d6:	e06c      	b.n	80044b2 <HAL_RCC_OscConfig+0x646>
 80043d8:	2301      	movs	r3, #1
 80043da:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80043ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ee:	fab3 f383 	clz	r3, r3
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	461a      	mov	r2, r3
 8004400:	2300      	movs	r3, #0
 8004402:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fe fb1e 	bl	8002a44 <HAL_GetTick>
 8004408:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440c:	e00a      	b.n	8004424 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800440e:	f7fe fb19 	bl	8002a44 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d902      	bls.n	8004424 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	f000 bd5a 	b.w	8004ed8 <HAL_RCC_OscConfig+0x106c>
 8004424:	2302      	movs	r3, #2
 8004426:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800442e:	fa93 f3a3 	rbit	r3, r3
 8004432:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443a:	fab3 f383 	clz	r3, r3
 800443e:	b2db      	uxtb	r3, r3
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b01      	cmp	r3, #1
 800444c:	d104      	bne.n	8004458 <HAL_RCC_OscConfig+0x5ec>
 800444e:	4b01      	ldr	r3, [pc, #4]	; (8004454 <HAL_RCC_OscConfig+0x5e8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	e015      	b.n	8004480 <HAL_RCC_OscConfig+0x614>
 8004454:	40021000 	.word	0x40021000
 8004458:	2302      	movs	r3, #2
 800445a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004462:	fa93 f3a3 	rbit	r3, r3
 8004466:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800446a:	2302      	movs	r3, #2
 800446c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004470:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004474:	fa93 f3a3 	rbit	r3, r3
 8004478:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800447c:	4bc8      	ldr	r3, [pc, #800]	; (80047a0 <HAL_RCC_OscConfig+0x934>)
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	2202      	movs	r2, #2
 8004482:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004486:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800448a:	fa92 f2a2 	rbit	r2, r2
 800448e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004492:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004496:	fab2 f282 	clz	r2, r2
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	f042 0220 	orr.w	r2, r2, #32
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	f002 021f 	and.w	r2, r2, #31
 80044a6:	2101      	movs	r1, #1
 80044a8:	fa01 f202 	lsl.w	r2, r1, r2
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1ad      	bne.n	800440e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 8110 	beq.w	80046e8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d079      	beq.n	80045cc <HAL_RCC_OscConfig+0x760>
 80044d8:	2301      	movs	r3, #1
 80044da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80044ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ee:	fab3 f383 	clz	r3, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	4bab      	ldr	r3, [pc, #684]	; (80047a4 <HAL_RCC_OscConfig+0x938>)
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	461a      	mov	r2, r3
 80044fe:	2301      	movs	r3, #1
 8004500:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004502:	f7fe fa9f 	bl	8002a44 <HAL_GetTick>
 8004506:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800450a:	e00a      	b.n	8004522 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800450c:	f7fe fa9a 	bl	8002a44 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d902      	bls.n	8004522 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	f000 bcdb 	b.w	8004ed8 <HAL_RCC_OscConfig+0x106c>
 8004522:	2302      	movs	r3, #2
 8004524:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004528:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800452c:	fa93 f3a3 	rbit	r3, r3
 8004530:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004538:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800453c:	2202      	movs	r2, #2
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004544:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	fa93 f2a3 	rbit	r2, r3
 800454e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800455c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004560:	2202      	movs	r2, #2
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	fa93 f2a3 	rbit	r2, r3
 8004572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004576:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800457a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457c:	4b88      	ldr	r3, [pc, #544]	; (80047a0 <HAL_RCC_OscConfig+0x934>)
 800457e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004584:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004588:	2102      	movs	r1, #2
 800458a:	6019      	str	r1, [r3, #0]
 800458c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004590:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	fa93 f1a3 	rbit	r1, r3
 800459a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800459e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80045a2:	6019      	str	r1, [r3, #0]
  return result;
 80045a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	2101      	movs	r1, #1
 80045c0:	fa01 f303 	lsl.w	r3, r1, r3
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0a0      	beq.n	800450c <HAL_RCC_OscConfig+0x6a0>
 80045ca:	e08d      	b.n	80046e8 <HAL_RCC_OscConfig+0x87c>
 80045cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	fa93 f2a3 	rbit	r2, r3
 80045e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045ee:	601a      	str	r2, [r3, #0]
  return result;
 80045f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045fa:	fab3 f383 	clz	r3, r3
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	4b68      	ldr	r3, [pc, #416]	; (80047a4 <HAL_RCC_OscConfig+0x938>)
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	461a      	mov	r2, r3
 800460a:	2300      	movs	r3, #0
 800460c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460e:	f7fe fa19 	bl	8002a44 <HAL_GetTick>
 8004612:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004616:	e00a      	b.n	800462e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004618:	f7fe fa14 	bl	8002a44 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d902      	bls.n	800462e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	f000 bc55 	b.w	8004ed8 <HAL_RCC_OscConfig+0x106c>
 800462e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004632:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004636:	2202      	movs	r2, #2
 8004638:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800463e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	fa93 f2a3 	rbit	r2, r3
 8004648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004656:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800465a:	2202      	movs	r2, #2
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004662:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	fa93 f2a3 	rbit	r2, r3
 800466c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004670:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800467e:	2202      	movs	r2, #2
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	fa93 f2a3 	rbit	r2, r3
 8004690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004694:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004698:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800469a:	4b41      	ldr	r3, [pc, #260]	; (80047a0 <HAL_RCC_OscConfig+0x934>)
 800469c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800469e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80046a6:	2102      	movs	r1, #2
 80046a8:	6019      	str	r1, [r3, #0]
 80046aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	fa93 f1a3 	rbit	r1, r3
 80046b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80046c0:	6019      	str	r1, [r3, #0]
  return result;
 80046c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	fab3 f383 	clz	r3, r3
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2101      	movs	r1, #1
 80046de:	fa01 f303 	lsl.w	r3, r1, r3
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d197      	bne.n	8004618 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 81a1 	beq.w	8004a40 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fe:	2300      	movs	r3, #0
 8004700:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004704:	4b26      	ldr	r3, [pc, #152]	; (80047a0 <HAL_RCC_OscConfig+0x934>)
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d116      	bne.n	800473e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004710:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <HAL_RCC_OscConfig+0x934>)
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	4a22      	ldr	r2, [pc, #136]	; (80047a0 <HAL_RCC_OscConfig+0x934>)
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471a:	61d3      	str	r3, [r2, #28]
 800471c:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <HAL_RCC_OscConfig+0x934>)
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004728:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004732:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004736:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473e:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <HAL_RCC_OscConfig+0x93c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d11a      	bne.n	8004780 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800474a:	4b17      	ldr	r3, [pc, #92]	; (80047a8 <HAL_RCC_OscConfig+0x93c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a16      	ldr	r2, [pc, #88]	; (80047a8 <HAL_RCC_OscConfig+0x93c>)
 8004750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004754:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004756:	f7fe f975 	bl	8002a44 <HAL_GetTick>
 800475a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475e:	e009      	b.n	8004774 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004760:	f7fe f970 	bl	8002a44 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b64      	cmp	r3, #100	; 0x64
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e3b1      	b.n	8004ed8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <HAL_RCC_OscConfig+0x93c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0ef      	beq.n	8004760 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004784:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d10d      	bne.n	80047ac <HAL_RCC_OscConfig+0x940>
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <HAL_RCC_OscConfig+0x934>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	4a02      	ldr	r2, [pc, #8]	; (80047a0 <HAL_RCC_OscConfig+0x934>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6213      	str	r3, [r2, #32]
 800479c:	e03c      	b.n	8004818 <HAL_RCC_OscConfig+0x9ac>
 800479e:	bf00      	nop
 80047a0:	40021000 	.word	0x40021000
 80047a4:	10908120 	.word	0x10908120
 80047a8:	40007000 	.word	0x40007000
 80047ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10c      	bne.n	80047d6 <HAL_RCC_OscConfig+0x96a>
 80047bc:	4bc1      	ldr	r3, [pc, #772]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	4ac0      	ldr	r2, [pc, #768]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	6213      	str	r3, [r2, #32]
 80047c8:	4bbe      	ldr	r3, [pc, #760]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	4abd      	ldr	r2, [pc, #756]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 80047ce:	f023 0304 	bic.w	r3, r3, #4
 80047d2:	6213      	str	r3, [r2, #32]
 80047d4:	e020      	b.n	8004818 <HAL_RCC_OscConfig+0x9ac>
 80047d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	d10c      	bne.n	8004800 <HAL_RCC_OscConfig+0x994>
 80047e6:	4bb7      	ldr	r3, [pc, #732]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	4ab6      	ldr	r2, [pc, #728]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 80047ec:	f043 0304 	orr.w	r3, r3, #4
 80047f0:	6213      	str	r3, [r2, #32]
 80047f2:	4bb4      	ldr	r3, [pc, #720]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	4ab3      	ldr	r2, [pc, #716]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	6213      	str	r3, [r2, #32]
 80047fe:	e00b      	b.n	8004818 <HAL_RCC_OscConfig+0x9ac>
 8004800:	4bb0      	ldr	r3, [pc, #704]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	4aaf      	ldr	r2, [pc, #700]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	6213      	str	r3, [r2, #32]
 800480c:	4bad      	ldr	r3, [pc, #692]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	4aac      	ldr	r2, [pc, #688]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 8004812:	f023 0304 	bic.w	r3, r3, #4
 8004816:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8081 	beq.w	800492c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482a:	f7fe f90b 	bl	8002a44 <HAL_GetTick>
 800482e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004834:	f7fe f906 	bl	8002a44 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f241 3288 	movw	r2, #5000	; 0x1388
 8004844:	4293      	cmp	r3, r2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e345      	b.n	8004ed8 <HAL_RCC_OscConfig+0x106c>
 800484c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004850:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004854:	2202      	movs	r2, #2
 8004856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	fa93 f2a3 	rbit	r2, r3
 8004866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004874:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004878:	2202      	movs	r2, #2
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004880:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	fa93 f2a3 	rbit	r2, r3
 800488a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004892:	601a      	str	r2, [r3, #0]
  return result;
 8004894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004898:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800489c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489e:	fab3 f383 	clz	r3, r3
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f043 0302 	orr.w	r3, r3, #2
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d102      	bne.n	80048b8 <HAL_RCC_OscConfig+0xa4c>
 80048b2:	4b84      	ldr	r3, [pc, #528]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	e013      	b.n	80048e0 <HAL_RCC_OscConfig+0xa74>
 80048b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80048c0:	2202      	movs	r2, #2
 80048c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	fa93 f2a3 	rbit	r2, r3
 80048d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	4b79      	ldr	r3, [pc, #484]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80048e8:	2102      	movs	r1, #2
 80048ea:	6011      	str	r1, [r2, #0]
 80048ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	fa92 f1a2 	rbit	r1, r2
 80048fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048fe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004902:	6011      	str	r1, [r2, #0]
  return result;
 8004904:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004908:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	fab2 f282 	clz	r2, r2
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	f002 021f 	and.w	r2, r2, #31
 800491e:	2101      	movs	r1, #1
 8004920:	fa01 f202 	lsl.w	r2, r1, r2
 8004924:	4013      	ands	r3, r2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d084      	beq.n	8004834 <HAL_RCC_OscConfig+0x9c8>
 800492a:	e07f      	b.n	8004a2c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492c:	f7fe f88a 	bl	8002a44 <HAL_GetTick>
 8004930:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004934:	e00b      	b.n	800494e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f7fe f885 	bl	8002a44 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f241 3288 	movw	r2, #5000	; 0x1388
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e2c4      	b.n	8004ed8 <HAL_RCC_OscConfig+0x106c>
 800494e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004952:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004956:	2202      	movs	r2, #2
 8004958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	fa93 f2a3 	rbit	r2, r3
 8004968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004976:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800497a:	2202      	movs	r2, #2
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004982:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	fa93 f2a3 	rbit	r2, r3
 800498c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004990:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004994:	601a      	str	r2, [r3, #0]
  return result;
 8004996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800499e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a0:	fab3 f383 	clz	r3, r3
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f043 0302 	orr.w	r3, r3, #2
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d102      	bne.n	80049ba <HAL_RCC_OscConfig+0xb4e>
 80049b4:	4b43      	ldr	r3, [pc, #268]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	e013      	b.n	80049e2 <HAL_RCC_OscConfig+0xb76>
 80049ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80049c2:	2202      	movs	r2, #2
 80049c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	fa93 f2a3 	rbit	r2, r3
 80049d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	4b39      	ldr	r3, [pc, #228]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80049ea:	2102      	movs	r1, #2
 80049ec:	6011      	str	r1, [r2, #0]
 80049ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	fa92 f1a2 	rbit	r1, r2
 80049fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a00:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004a04:	6011      	str	r1, [r2, #0]
  return result;
 8004a06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a0a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	fab2 f282 	clz	r2, r2
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	f002 021f 	and.w	r2, r2, #31
 8004a20:	2101      	movs	r1, #1
 8004a22:	fa01 f202 	lsl.w	r2, r1, r2
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d184      	bne.n	8004936 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a2c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d105      	bne.n	8004a40 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a34:	4b23      	ldr	r3, [pc, #140]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	4a22      	ldr	r2, [pc, #136]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 8004a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 8242 	beq.w	8004ed6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a52:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <HAL_RCC_OscConfig+0xc58>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	f000 8213 	beq.w	8004e86 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	f040 8162 	bne.w	8004d36 <HAL_RCC_OscConfig+0xeca>
 8004a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a76:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004a7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a84:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	fa93 f2a3 	rbit	r2, r3
 8004a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a92:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004a96:	601a      	str	r2, [r3, #0]
  return result;
 8004a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004aa0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa2:	fab3 f383 	clz	r3, r3
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004aac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab8:	f7fd ffc4 	bl	8002a44 <HAL_GetTick>
 8004abc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ac0:	e00c      	b.n	8004adc <HAL_RCC_OscConfig+0xc70>
 8004ac2:	bf00      	nop
 8004ac4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac8:	f7fd ffbc 	bl	8002a44 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e1fd      	b.n	8004ed8 <HAL_RCC_OscConfig+0x106c>
 8004adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ae4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	fa93 f2a3 	rbit	r2, r3
 8004af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b00:	601a      	str	r2, [r3, #0]
  return result;
 8004b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b06:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b0c:	fab3 f383 	clz	r3, r3
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d102      	bne.n	8004b26 <HAL_RCC_OscConfig+0xcba>
 8004b20:	4bb0      	ldr	r3, [pc, #704]	; (8004de4 <HAL_RCC_OscConfig+0xf78>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	e027      	b.n	8004b76 <HAL_RCC_OscConfig+0xd0a>
 8004b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b38:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	fa93 f2a3 	rbit	r2, r3
 8004b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b46:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b50:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b5e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	fa93 f2a3 	rbit	r2, r3
 8004b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	4b9c      	ldr	r3, [pc, #624]	; (8004de4 <HAL_RCC_OscConfig+0xf78>)
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b7a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004b7e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b82:	6011      	str	r1, [r2, #0]
 8004b84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b88:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	fa92 f1a2 	rbit	r1, r2
 8004b92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b96:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004b9a:	6011      	str	r1, [r2, #0]
  return result;
 8004b9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ba0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	fab2 f282 	clz	r2, r2
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	f042 0220 	orr.w	r2, r2, #32
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	f002 021f 	and.w	r2, r2, #31
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d182      	bne.n	8004ac8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bc2:	4b88      	ldr	r3, [pc, #544]	; (8004de4 <HAL_RCC_OscConfig+0xf78>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	430b      	orrs	r3, r1
 8004be4:	497f      	ldr	r1, [pc, #508]	; (8004de4 <HAL_RCC_OscConfig+0xf78>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	604b      	str	r3, [r1, #4]
 8004bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bee:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004bf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	fa93 f2a3 	rbit	r2, r3
 8004c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004c0e:	601a      	str	r2, [r3, #0]
  return result;
 8004c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c14:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004c18:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c1a:	fab3 f383 	clz	r3, r3
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c30:	f7fd ff08 	bl	8002a44 <HAL_GetTick>
 8004c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c38:	e009      	b.n	8004c4e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3a:	f7fd ff03 	bl	8002a44 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e144      	b.n	8004ed8 <HAL_RCC_OscConfig+0x106c>
 8004c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c52:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c60:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	fa93 f2a3 	rbit	r2, r3
 8004c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c6e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004c72:	601a      	str	r2, [r3, #0]
  return result;
 8004c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c78:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004c7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c7e:	fab3 f383 	clz	r3, r3
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d102      	bne.n	8004c98 <HAL_RCC_OscConfig+0xe2c>
 8004c92:	4b54      	ldr	r3, [pc, #336]	; (8004de4 <HAL_RCC_OscConfig+0xf78>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	e027      	b.n	8004ce8 <HAL_RCC_OscConfig+0xe7c>
 8004c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c9c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ca0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004caa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	fa93 f2a3 	rbit	r2, r3
 8004cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cb8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004cc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	fa93 f2a3 	rbit	r2, r3
 8004cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cde:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	4b3f      	ldr	r3, [pc, #252]	; (8004de4 <HAL_RCC_OscConfig+0xf78>)
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cec:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004cf0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004cf4:	6011      	str	r1, [r2, #0]
 8004cf6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cfa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	fa92 f1a2 	rbit	r1, r2
 8004d04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d08:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004d0c:	6011      	str	r1, [r2, #0]
  return result;
 8004d0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d12:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	fab2 f282 	clz	r2, r2
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	f042 0220 	orr.w	r2, r2, #32
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	f002 021f 	and.w	r2, r2, #31
 8004d28:	2101      	movs	r1, #1
 8004d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d082      	beq.n	8004c3a <HAL_RCC_OscConfig+0xdce>
 8004d34:	e0cf      	b.n	8004ed6 <HAL_RCC_OscConfig+0x106a>
 8004d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d3a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004d3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d48:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	fa93 f2a3 	rbit	r2, r3
 8004d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d56:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004d5a:	601a      	str	r2, [r3, #0]
  return result;
 8004d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d60:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004d64:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d66:	fab3 f383 	clz	r3, r3
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	461a      	mov	r2, r3
 8004d78:	2300      	movs	r3, #0
 8004d7a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7fd fe62 	bl	8002a44 <HAL_GetTick>
 8004d80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d84:	e009      	b.n	8004d9a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d86:	f7fd fe5d 	bl	8002a44 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e09e      	b.n	8004ed8 <HAL_RCC_OscConfig+0x106c>
 8004d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004da2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	fa93 f2a3 	rbit	r2, r3
 8004db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004dbe:	601a      	str	r2, [r3, #0]
  return result;
 8004dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004dc8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dca:	fab3 f383 	clz	r3, r3
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d104      	bne.n	8004de8 <HAL_RCC_OscConfig+0xf7c>
 8004dde:	4b01      	ldr	r3, [pc, #4]	; (8004de4 <HAL_RCC_OscConfig+0xf78>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	e029      	b.n	8004e38 <HAL_RCC_OscConfig+0xfcc>
 8004de4:	40021000 	.word	0x40021000
 8004de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dfa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	fa93 f2a3 	rbit	r2, r3
 8004e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e08:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e12:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004e16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e20:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	fa93 f2a3 	rbit	r2, r3
 8004e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e2e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	4b2b      	ldr	r3, [pc, #172]	; (8004ee4 <HAL_RCC_OscConfig+0x1078>)
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e3c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004e40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e44:	6011      	str	r1, [r2, #0]
 8004e46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e4a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	fa92 f1a2 	rbit	r1, r2
 8004e54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e58:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004e5c:	6011      	str	r1, [r2, #0]
  return result;
 8004e5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e62:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	fab2 f282 	clz	r2, r2
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	f042 0220 	orr.w	r2, r2, #32
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	f002 021f 	and.w	r2, r2, #31
 8004e78:	2101      	movs	r1, #1
 8004e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d180      	bne.n	8004d86 <HAL_RCC_OscConfig+0xf1a>
 8004e84:	e027      	b.n	8004ed6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e01e      	b.n	8004ed8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e9a:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <HAL_RCC_OscConfig+0x1078>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ea2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004ea6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d10b      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004eba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004ebe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d001      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000

08004ee8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b09e      	sub	sp, #120	; 0x78
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e162      	b.n	80051c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f00:	4b90      	ldr	r3, [pc, #576]	; (8005144 <HAL_RCC_ClockConfig+0x25c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d910      	bls.n	8004f30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0e:	4b8d      	ldr	r3, [pc, #564]	; (8005144 <HAL_RCC_ClockConfig+0x25c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f023 0207 	bic.w	r2, r3, #7
 8004f16:	498b      	ldr	r1, [pc, #556]	; (8005144 <HAL_RCC_ClockConfig+0x25c>)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1e:	4b89      	ldr	r3, [pc, #548]	; (8005144 <HAL_RCC_ClockConfig+0x25c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e14a      	b.n	80051c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f3c:	4b82      	ldr	r3, [pc, #520]	; (8005148 <HAL_RCC_ClockConfig+0x260>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	497f      	ldr	r1, [pc, #508]	; (8005148 <HAL_RCC_ClockConfig+0x260>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 80dc 	beq.w	8005114 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d13c      	bne.n	8004fde <HAL_RCC_ClockConfig+0xf6>
 8004f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f68:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f6c:	fa93 f3a3 	rbit	r3, r3
 8004f70:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f74:	fab3 f383 	clz	r3, r3
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d102      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xa6>
 8004f88:	4b6f      	ldr	r3, [pc, #444]	; (8005148 <HAL_RCC_ClockConfig+0x260>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	e00f      	b.n	8004fae <HAL_RCC_ClockConfig+0xc6>
 8004f8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f96:	fa93 f3a3 	rbit	r3, r3
 8004f9a:	667b      	str	r3, [r7, #100]	; 0x64
 8004f9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fa0:	663b      	str	r3, [r7, #96]	; 0x60
 8004fa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fa4:	fa93 f3a3 	rbit	r3, r3
 8004fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004faa:	4b67      	ldr	r3, [pc, #412]	; (8005148 <HAL_RCC_ClockConfig+0x260>)
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fb2:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fb6:	fa92 f2a2 	rbit	r2, r2
 8004fba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004fbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fbe:	fab2 f282 	clz	r2, r2
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	f042 0220 	orr.w	r2, r2, #32
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	f002 021f 	and.w	r2, r2, #31
 8004fce:	2101      	movs	r1, #1
 8004fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d17b      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e0f3      	b.n	80051c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d13c      	bne.n	8005060 <HAL_RCC_ClockConfig+0x178>
 8004fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fee:	fa93 f3a3 	rbit	r3, r3
 8004ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff6:	fab3 f383 	clz	r3, r3
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b01      	cmp	r3, #1
 8005008:	d102      	bne.n	8005010 <HAL_RCC_ClockConfig+0x128>
 800500a:	4b4f      	ldr	r3, [pc, #316]	; (8005148 <HAL_RCC_ClockConfig+0x260>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	e00f      	b.n	8005030 <HAL_RCC_ClockConfig+0x148>
 8005010:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005014:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005018:	fa93 f3a3 	rbit	r3, r3
 800501c:	647b      	str	r3, [r7, #68]	; 0x44
 800501e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005022:	643b      	str	r3, [r7, #64]	; 0x40
 8005024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005026:	fa93 f3a3 	rbit	r3, r3
 800502a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800502c:	4b46      	ldr	r3, [pc, #280]	; (8005148 <HAL_RCC_ClockConfig+0x260>)
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005034:	63ba      	str	r2, [r7, #56]	; 0x38
 8005036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005038:	fa92 f2a2 	rbit	r2, r2
 800503c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800503e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005040:	fab2 f282 	clz	r2, r2
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	f042 0220 	orr.w	r2, r2, #32
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	f002 021f 	and.w	r2, r2, #31
 8005050:	2101      	movs	r1, #1
 8005052:	fa01 f202 	lsl.w	r2, r1, r2
 8005056:	4013      	ands	r3, r2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d13a      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0b2      	b.n	80051c6 <HAL_RCC_ClockConfig+0x2de>
 8005060:	2302      	movs	r3, #2
 8005062:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	fa93 f3a3 	rbit	r3, r3
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800506c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506e:	fab3 f383 	clz	r3, r3
 8005072:	b2db      	uxtb	r3, r3
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	d102      	bne.n	8005088 <HAL_RCC_ClockConfig+0x1a0>
 8005082:	4b31      	ldr	r3, [pc, #196]	; (8005148 <HAL_RCC_ClockConfig+0x260>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	e00d      	b.n	80050a4 <HAL_RCC_ClockConfig+0x1bc>
 8005088:	2302      	movs	r3, #2
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	fa93 f3a3 	rbit	r3, r3
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
 8005094:	2302      	movs	r3, #2
 8005096:	623b      	str	r3, [r7, #32]
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	fa93 f3a3 	rbit	r3, r3
 800509e:	61fb      	str	r3, [r7, #28]
 80050a0:	4b29      	ldr	r3, [pc, #164]	; (8005148 <HAL_RCC_ClockConfig+0x260>)
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	2202      	movs	r2, #2
 80050a6:	61ba      	str	r2, [r7, #24]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	fa92 f2a2 	rbit	r2, r2
 80050ae:	617a      	str	r2, [r7, #20]
  return result;
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	fab2 f282 	clz	r2, r2
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	f042 0220 	orr.w	r2, r2, #32
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	f002 021f 	and.w	r2, r2, #31
 80050c2:	2101      	movs	r1, #1
 80050c4:	fa01 f202 	lsl.w	r2, r1, r2
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e079      	b.n	80051c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050d2:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <HAL_RCC_ClockConfig+0x260>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f023 0203 	bic.w	r2, r3, #3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	491a      	ldr	r1, [pc, #104]	; (8005148 <HAL_RCC_ClockConfig+0x260>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e4:	f7fd fcae 	bl	8002a44 <HAL_GetTick>
 80050e8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ea:	e00a      	b.n	8005102 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ec:	f7fd fcaa 	bl	8002a44 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e061      	b.n	80051c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005102:	4b11      	ldr	r3, [pc, #68]	; (8005148 <HAL_RCC_ClockConfig+0x260>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f003 020c 	and.w	r2, r3, #12
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	429a      	cmp	r2, r3
 8005112:	d1eb      	bne.n	80050ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005114:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <HAL_RCC_ClockConfig+0x25c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d214      	bcs.n	800514c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005122:	4b08      	ldr	r3, [pc, #32]	; (8005144 <HAL_RCC_ClockConfig+0x25c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f023 0207 	bic.w	r2, r3, #7
 800512a:	4906      	ldr	r1, [pc, #24]	; (8005144 <HAL_RCC_ClockConfig+0x25c>)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	4313      	orrs	r3, r2
 8005130:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005132:	4b04      	ldr	r3, [pc, #16]	; (8005144 <HAL_RCC_ClockConfig+0x25c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d005      	beq.n	800514c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e040      	b.n	80051c6 <HAL_RCC_ClockConfig+0x2de>
 8005144:	40022000 	.word	0x40022000
 8005148:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d008      	beq.n	800516a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005158:	4b1d      	ldr	r3, [pc, #116]	; (80051d0 <HAL_RCC_ClockConfig+0x2e8>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	491a      	ldr	r1, [pc, #104]	; (80051d0 <HAL_RCC_ClockConfig+0x2e8>)
 8005166:	4313      	orrs	r3, r2
 8005168:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d009      	beq.n	800518a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005176:	4b16      	ldr	r3, [pc, #88]	; (80051d0 <HAL_RCC_ClockConfig+0x2e8>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4912      	ldr	r1, [pc, #72]	; (80051d0 <HAL_RCC_ClockConfig+0x2e8>)
 8005186:	4313      	orrs	r3, r2
 8005188:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800518a:	f000 f829 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 800518e:	4601      	mov	r1, r0
 8005190:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <HAL_RCC_ClockConfig+0x2e8>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005198:	22f0      	movs	r2, #240	; 0xf0
 800519a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	fa92 f2a2 	rbit	r2, r2
 80051a2:	60fa      	str	r2, [r7, #12]
  return result;
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	fab2 f282 	clz	r2, r2
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	40d3      	lsrs	r3, r2
 80051ae:	4a09      	ldr	r2, [pc, #36]	; (80051d4 <HAL_RCC_ClockConfig+0x2ec>)
 80051b0:	5cd3      	ldrb	r3, [r2, r3]
 80051b2:	fa21 f303 	lsr.w	r3, r1, r3
 80051b6:	4a08      	ldr	r2, [pc, #32]	; (80051d8 <HAL_RCC_ClockConfig+0x2f0>)
 80051b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80051ba:	4b08      	ldr	r3, [pc, #32]	; (80051dc <HAL_RCC_ClockConfig+0x2f4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fd fbfc 	bl	80029bc <HAL_InitTick>
  
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3778      	adds	r7, #120	; 0x78
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40021000 	.word	0x40021000
 80051d4:	08007878 	.word	0x08007878
 80051d8:	20000018 	.word	0x20000018
 80051dc:	20000024 	.word	0x20000024

080051e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b08b      	sub	sp, #44	; 0x2c
 80051e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	2300      	movs	r3, #0
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	2300      	movs	r3, #0
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80051fa:	4b29      	ldr	r3, [pc, #164]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f003 030c 	and.w	r3, r3, #12
 8005206:	2b04      	cmp	r3, #4
 8005208:	d002      	beq.n	8005210 <HAL_RCC_GetSysClockFreq+0x30>
 800520a:	2b08      	cmp	r3, #8
 800520c:	d003      	beq.n	8005216 <HAL_RCC_GetSysClockFreq+0x36>
 800520e:	e03c      	b.n	800528a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005210:	4b24      	ldr	r3, [pc, #144]	; (80052a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005212:	623b      	str	r3, [r7, #32]
      break;
 8005214:	e03c      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800521c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005220:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	fa92 f2a2 	rbit	r2, r2
 8005228:	607a      	str	r2, [r7, #4]
  return result;
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	fab2 f282 	clz	r2, r2
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	40d3      	lsrs	r3, r2
 8005234:	4a1c      	ldr	r2, [pc, #112]	; (80052a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005236:	5cd3      	ldrb	r3, [r2, r3]
 8005238:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800523a:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	220f      	movs	r2, #15
 8005244:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	fa92 f2a2 	rbit	r2, r2
 800524c:	60fa      	str	r2, [r7, #12]
  return result;
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	fab2 f282 	clz	r2, r2
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	40d3      	lsrs	r3, r2
 8005258:	4a14      	ldr	r2, [pc, #80]	; (80052ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800525a:	5cd3      	ldrb	r3, [r2, r3]
 800525c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d008      	beq.n	800527a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005268:	4a0e      	ldr	r2, [pc, #56]	; (80052a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	fb02 f303 	mul.w	r3, r2, r3
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
 8005278:	e004      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	4a0c      	ldr	r2, [pc, #48]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800527e:	fb02 f303 	mul.w	r3, r2, r3
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	623b      	str	r3, [r7, #32]
      break;
 8005288:	e002      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800528a:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800528c:	623b      	str	r3, [r7, #32]
      break;
 800528e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005290:	6a3b      	ldr	r3, [r7, #32]
}
 8005292:	4618      	mov	r0, r3
 8005294:	372c      	adds	r7, #44	; 0x2c
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40021000 	.word	0x40021000
 80052a4:	007a1200 	.word	0x007a1200
 80052a8:	08007890 	.word	0x08007890
 80052ac:	080078a0 	.word	0x080078a0
 80052b0:	003d0900 	.word	0x003d0900

080052b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b8:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ba:	681b      	ldr	r3, [r3, #0]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000018 	.word	0x20000018

080052cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80052d2:	f7ff ffef 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052d6:	4601      	mov	r1, r0
 80052d8:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80052e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	fa92 f2a2 	rbit	r2, r2
 80052ec:	603a      	str	r2, [r7, #0]
  return result;
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	fab2 f282 	clz	r2, r2
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	40d3      	lsrs	r3, r2
 80052f8:	4a04      	ldr	r2, [pc, #16]	; (800530c <HAL_RCC_GetPCLK1Freq+0x40>)
 80052fa:	5cd3      	ldrb	r3, [r2, r3]
 80052fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40021000 	.word	0x40021000
 800530c:	08007888 	.word	0x08007888

08005310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005316:	f7ff ffcd 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 800531a:	4601      	mov	r1, r0
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005324:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005328:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	fa92 f2a2 	rbit	r2, r2
 8005330:	603a      	str	r2, [r7, #0]
  return result;
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	fab2 f282 	clz	r2, r2
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	40d3      	lsrs	r3, r2
 800533c:	4a04      	ldr	r2, [pc, #16]	; (8005350 <HAL_RCC_GetPCLK2Freq+0x40>)
 800533e:	5cd3      	ldrb	r3, [r2, r3]
 8005340:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40021000 	.word	0x40021000
 8005350:	08007888 	.word	0x08007888

08005354 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b092      	sub	sp, #72	; 0x48
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005364:	2300      	movs	r3, #0
 8005366:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 80d4 	beq.w	8005520 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005378:	4b4e      	ldr	r3, [pc, #312]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10e      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005384:	4b4b      	ldr	r3, [pc, #300]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	4a4a      	ldr	r2, [pc, #296]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538e:	61d3      	str	r3, [r2, #28]
 8005390:	4b48      	ldr	r3, [pc, #288]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800539c:	2301      	movs	r3, #1
 800539e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a2:	4b45      	ldr	r3, [pc, #276]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d118      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053ae:	4b42      	ldr	r3, [pc, #264]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a41      	ldr	r2, [pc, #260]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ba:	f7fd fb43 	bl	8002a44 <HAL_GetTick>
 80053be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c0:	e008      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c2:	f7fd fb3f 	bl	8002a44 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b64      	cmp	r3, #100	; 0x64
 80053ce:	d901      	bls.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e13c      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d4:	4b38      	ldr	r3, [pc, #224]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053e0:	4b34      	ldr	r3, [pc, #208]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 8084 	beq.w	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d07c      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005400:	4b2c      	ldr	r3, [pc, #176]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800540a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800540e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	fa93 f3a3 	rbit	r3, r3
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800541a:	fab3 f383 	clz	r3, r3
 800541e:	b2db      	uxtb	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	4b26      	ldr	r3, [pc, #152]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	461a      	mov	r2, r3
 800542a:	2301      	movs	r3, #1
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005432:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	fa93 f3a3 	rbit	r3, r3
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800543c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800543e:	fab3 f383 	clz	r3, r3
 8005442:	b2db      	uxtb	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	461a      	mov	r2, r3
 800544e:	2300      	movs	r3, #0
 8005450:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005452:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005456:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d04b      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005462:	f7fd faef 	bl	8002a44 <HAL_GetTick>
 8005466:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005468:	e00a      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546a:	f7fd faeb 	bl	8002a44 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	f241 3288 	movw	r2, #5000	; 0x1388
 8005478:	4293      	cmp	r3, r2
 800547a:	d901      	bls.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e0e6      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8005480:	2302      	movs	r3, #2
 8005482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	fa93 f3a3 	rbit	r3, r3
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
 800548c:	2302      	movs	r3, #2
 800548e:	623b      	str	r3, [r7, #32]
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	fa93 f3a3 	rbit	r3, r3
 8005496:	61fb      	str	r3, [r7, #28]
  return result;
 8005498:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800549a:	fab3 f383 	clz	r3, r3
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f043 0302 	orr.w	r3, r3, #2
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d108      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80054ae:	4b01      	ldr	r3, [pc, #4]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	e00d      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80054b4:	40021000 	.word	0x40021000
 80054b8:	40007000 	.word	0x40007000
 80054bc:	10908100 	.word	0x10908100
 80054c0:	2302      	movs	r3, #2
 80054c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	fa93 f3a3 	rbit	r3, r3
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	4b62      	ldr	r3, [pc, #392]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2202      	movs	r2, #2
 80054d2:	613a      	str	r2, [r7, #16]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	fa92 f2a2 	rbit	r2, r2
 80054da:	60fa      	str	r2, [r7, #12]
  return result;
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	fab2 f282 	clz	r2, r2
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	f002 021f 	and.w	r2, r2, #31
 80054ee:	2101      	movs	r1, #1
 80054f0:	fa01 f202 	lsl.w	r2, r1, r2
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0b7      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80054fa:	4b57      	ldr	r3, [pc, #348]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	4954      	ldr	r1, [pc, #336]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005508:	4313      	orrs	r3, r2
 800550a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800550c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005510:	2b01      	cmp	r3, #1
 8005512:	d105      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005514:	4b50      	ldr	r3, [pc, #320]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	4a4f      	ldr	r2, [pc, #316]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800551a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800551e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800552c:	4b4a      	ldr	r3, [pc, #296]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800552e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005530:	f023 0203 	bic.w	r2, r3, #3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	4947      	ldr	r1, [pc, #284]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800553a:	4313      	orrs	r3, r2
 800553c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d008      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800554a:	4b43      	ldr	r3, [pc, #268]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	f023 0210 	bic.w	r2, r3, #16
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	4940      	ldr	r1, [pc, #256]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005558:	4313      	orrs	r3, r2
 800555a:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005568:	4b3b      	ldr	r3, [pc, #236]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	f023 0220 	bic.w	r2, r3, #32
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	4938      	ldr	r1, [pc, #224]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005576:	4313      	orrs	r3, r2
 8005578:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d008      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005586:	4b34      	ldr	r3, [pc, #208]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	4931      	ldr	r1, [pc, #196]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005594:	4313      	orrs	r3, r2
 8005596:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055a4:	4b2c      	ldr	r3, [pc, #176]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	4929      	ldr	r1, [pc, #164]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80055c2:	4b25      	ldr	r3, [pc, #148]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	4922      	ldr	r1, [pc, #136]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d008      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80055e0:	4b1d      	ldr	r3, [pc, #116]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	491a      	ldr	r1, [pc, #104]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80055fe:	4b16      	ldr	r3, [pc, #88]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	4913      	ldr	r1, [pc, #76]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800560c:	4313      	orrs	r3, r2
 800560e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800561c:	4b0e      	ldr	r3, [pc, #56]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	490b      	ldr	r1, [pc, #44]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800562a:	4313      	orrs	r3, r2
 800562c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d008      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800563a:	4b07      	ldr	r3, [pc, #28]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005646:	4904      	ldr	r1, [pc, #16]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005648:	4313      	orrs	r3, r2
 800564a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3748      	adds	r7, #72	; 0x48
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	40021000 	.word	0x40021000

0800565c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e09d      	b.n	80057aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	2b00      	cmp	r3, #0
 8005674:	d108      	bne.n	8005688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800567e:	d009      	beq.n	8005694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	61da      	str	r2, [r3, #28]
 8005686:	e005      	b.n	8005694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fc fc96 	bl	8001fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056d4:	d902      	bls.n	80056dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	e002      	b.n	80056e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80056ea:	d007      	beq.n	80056fc <HAL_SPI_Init+0xa0>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056f4:	d002      	beq.n	80056fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	431a      	orrs	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573e:	ea42 0103 	orr.w	r1, r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005746:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	0c1b      	lsrs	r3, r3, #16
 8005758:	f003 0204 	and.w	r2, r3, #4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005778:	ea42 0103 	orr.w	r1, r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005798:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b088      	sub	sp, #32
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	603b      	str	r3, [r7, #0]
 80057be:	4613      	mov	r3, r2
 80057c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_SPI_Transmit+0x22>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e15f      	b.n	8005a94 <HAL_SPI_Transmit+0x2e2>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057dc:	f7fd f932 	bl	8002a44 <HAL_GetTick>
 80057e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d002      	beq.n	80057f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80057f2:	2302      	movs	r3, #2
 80057f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057f6:	e148      	b.n	8005a8a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_SPI_Transmit+0x52>
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005808:	e13f      	b.n	8005a8a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2203      	movs	r2, #3
 800580e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	88fa      	ldrh	r2, [r7, #6]
 8005822:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	88fa      	ldrh	r2, [r7, #6]
 8005828:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005854:	d10f      	bne.n	8005876 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005864:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005874:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d007      	beq.n	8005894 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005892:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800589c:	d94f      	bls.n	800593e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_SPI_Transmit+0xfa>
 80058a6:	8afb      	ldrh	r3, [r7, #22]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d142      	bne.n	8005932 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	881a      	ldrh	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	1c9a      	adds	r2, r3, #2
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058d0:	e02f      	b.n	8005932 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d112      	bne.n	8005906 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	881a      	ldrh	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	1c9a      	adds	r2, r3, #2
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005904:	e015      	b.n	8005932 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005906:	f7fd f89d 	bl	8002a44 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d803      	bhi.n	800591e <HAL_SPI_Transmit+0x16c>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d102      	bne.n	8005924 <HAL_SPI_Transmit+0x172>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d106      	bne.n	8005932 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005930:	e0ab      	b.n	8005a8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1ca      	bne.n	80058d2 <HAL_SPI_Transmit+0x120>
 800593c:	e080      	b.n	8005a40 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_SPI_Transmit+0x19a>
 8005946:	8afb      	ldrh	r3, [r7, #22]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d174      	bne.n	8005a36 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005950:	b29b      	uxth	r3, r3
 8005952:	2b01      	cmp	r3, #1
 8005954:	d912      	bls.n	800597c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	881a      	ldrh	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	1c9a      	adds	r2, r3, #2
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b02      	subs	r3, #2
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	87da      	strh	r2, [r3, #62]	; 0x3e
 800597a:	e05c      	b.n	8005a36 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	7812      	ldrb	r2, [r2, #0]
 8005988:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80059a2:	e048      	b.n	8005a36 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d12b      	bne.n	8005a0a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d912      	bls.n	80059e2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	881a      	ldrh	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	1c9a      	adds	r2, r3, #2
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b02      	subs	r3, #2
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059e0:	e029      	b.n	8005a36 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	7812      	ldrb	r2, [r2, #0]
 80059ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a08:	e015      	b.n	8005a36 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a0a:	f7fd f81b 	bl	8002a44 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d803      	bhi.n	8005a22 <HAL_SPI_Transmit+0x270>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a20:	d102      	bne.n	8005a28 <HAL_SPI_Transmit+0x276>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005a34:	e029      	b.n	8005a8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1b1      	bne.n	80059a4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 f947 	bl	8005cd8 <SPI_EndRxTxTransaction>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a5e:	2300      	movs	r3, #0
 8005a60:	613b      	str	r3, [r7, #16]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	77fb      	strb	r3, [r7, #31]
 8005a80:	e003      	b.n	8005a8a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a92:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3720      	adds	r7, #32
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005aac:	f7fc ffca 	bl	8002a44 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	4413      	add	r3, r2
 8005aba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005abc:	f7fc ffc2 	bl	8002a44 <HAL_GetTick>
 8005ac0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ac2:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	015b      	lsls	r3, r3, #5
 8005ac8:	0d1b      	lsrs	r3, r3, #20
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	fb02 f303 	mul.w	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ad2:	e054      	b.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d050      	beq.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005adc:	f7fc ffb2 	bl	8002a44 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d902      	bls.n	8005af2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d13d      	bne.n	8005b6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b0a:	d111      	bne.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b14:	d004      	beq.n	8005b20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1e:	d107      	bne.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b38:	d10f      	bne.n	8005b5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e017      	b.n	8005b9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4013      	ands	r3, r2
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	bf0c      	ite	eq
 8005b8e:	2301      	moveq	r3, #1
 8005b90:	2300      	movne	r3, #0
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d19b      	bne.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000018 	.word	0x20000018

08005bac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08a      	sub	sp, #40	; 0x28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005bbe:	f7fc ff41 	bl	8002a44 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	4413      	add	r3, r2
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005bce:	f7fc ff39 	bl	8002a44 <HAL_GetTick>
 8005bd2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005bdc:	4b3d      	ldr	r3, [pc, #244]	; (8005cd4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	00da      	lsls	r2, r3, #3
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	0d1b      	lsrs	r3, r3, #20
 8005bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005bf4:	e060      	b.n	8005cb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bfc:	d107      	bne.n	8005c0e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d104      	bne.n	8005c0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d050      	beq.n	8005cb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c16:	f7fc ff15 	bl	8002a44 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d902      	bls.n	8005c2c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d13d      	bne.n	8005ca8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c44:	d111      	bne.n	8005c6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c4e:	d004      	beq.n	8005c5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c58:	d107      	bne.n	8005c6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c72:	d10f      	bne.n	8005c94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e010      	b.n	8005cca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d196      	bne.n	8005bf6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3728      	adds	r7, #40	; 0x28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000018 	.word	0x20000018

08005cd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f7ff ff5b 	bl	8005bac <SPI_WaitFifoStateUntilTimeout>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d00:	f043 0220 	orr.w	r2, r3, #32
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e027      	b.n	8005d5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2200      	movs	r2, #0
 8005d14:	2180      	movs	r1, #128	; 0x80
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7ff fec0 	bl	8005a9c <SPI_WaitFlagStateUntilTimeout>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d26:	f043 0220 	orr.w	r2, r3, #32
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e014      	b.n	8005d5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f7ff ff34 	bl	8005bac <SPI_WaitFifoStateUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d4e:	f043 0220 	orr.w	r2, r3, #32
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e000      	b.n	8005d5c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e040      	b.n	8005df8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d106      	bne.n	8005d8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7fc f96e 	bl	8002068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2224      	movs	r2, #36	; 0x24
 8005d90:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0201 	bic.w	r2, r2, #1
 8005da0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f8b6 	bl	8005f14 <UART_SetConfig>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e022      	b.n	8005df8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f9e0 	bl	8006180 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fa67 	bl	80062c4 <UART_CheckIdleState>
 8005df6:	4603      	mov	r3, r0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08a      	sub	sp, #40	; 0x28
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d178      	bne.n	8005f0a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_UART_Transmit+0x24>
 8005e1e:	88fb      	ldrh	r3, [r7, #6]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e071      	b.n	8005f0c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2221      	movs	r2, #33	; 0x21
 8005e34:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e36:	f7fc fe05 	bl	8002a44 <HAL_GetTick>
 8005e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	88fa      	ldrh	r2, [r7, #6]
 8005e40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	88fa      	ldrh	r2, [r7, #6]
 8005e48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e54:	d108      	bne.n	8005e68 <HAL_UART_Transmit+0x68>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d104      	bne.n	8005e68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	e003      	b.n	8005e70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e70:	e030      	b.n	8005ed4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2180      	movs	r1, #128	; 0x80
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fac9 	bl	8006414 <UART_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e03c      	b.n	8005f0c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10b      	bne.n	8005eb0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	881a      	ldrh	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea4:	b292      	uxth	r2, r2
 8005ea6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	3302      	adds	r3, #2
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e008      	b.n	8005ec2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	781a      	ldrb	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	b292      	uxth	r2, r2
 8005eba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1c8      	bne.n	8005e72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2140      	movs	r1, #64	; 0x40
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 fa92 	bl	8006414 <UART_WaitOnFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d004      	beq.n	8005f00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e005      	b.n	8005f0c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2220      	movs	r2, #32
 8005f04:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e000      	b.n	8005f0c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005f0a:	2302      	movs	r3, #2
  }
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4b8a      	ldr	r3, [pc, #552]	; (8006168 <UART_SetConfig+0x254>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6812      	ldr	r2, [r2, #0]
 8005f46:	6979      	ldr	r1, [r7, #20]
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a78      	ldr	r2, [pc, #480]	; (800616c <UART_SetConfig+0x258>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d120      	bne.n	8005fd2 <UART_SetConfig+0xbe>
 8005f90:	4b77      	ldr	r3, [pc, #476]	; (8006170 <UART_SetConfig+0x25c>)
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d817      	bhi.n	8005fcc <UART_SetConfig+0xb8>
 8005f9c:	a201      	add	r2, pc, #4	; (adr r2, 8005fa4 <UART_SetConfig+0x90>)
 8005f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa2:	bf00      	nop
 8005fa4:	08005fb5 	.word	0x08005fb5
 8005fa8:	08005fc1 	.word	0x08005fc1
 8005fac:	08005fc7 	.word	0x08005fc7
 8005fb0:	08005fbb 	.word	0x08005fbb
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e01d      	b.n	8005ff6 <UART_SetConfig+0xe2>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	77fb      	strb	r3, [r7, #31]
 8005fbe:	e01a      	b.n	8005ff6 <UART_SetConfig+0xe2>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e017      	b.n	8005ff6 <UART_SetConfig+0xe2>
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	77fb      	strb	r3, [r7, #31]
 8005fca:	e014      	b.n	8005ff6 <UART_SetConfig+0xe2>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e011      	b.n	8005ff6 <UART_SetConfig+0xe2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a67      	ldr	r2, [pc, #412]	; (8006174 <UART_SetConfig+0x260>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d102      	bne.n	8005fe2 <UART_SetConfig+0xce>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	77fb      	strb	r3, [r7, #31]
 8005fe0:	e009      	b.n	8005ff6 <UART_SetConfig+0xe2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a64      	ldr	r2, [pc, #400]	; (8006178 <UART_SetConfig+0x264>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d102      	bne.n	8005ff2 <UART_SetConfig+0xde>
 8005fec:	2300      	movs	r3, #0
 8005fee:	77fb      	strb	r3, [r7, #31]
 8005ff0:	e001      	b.n	8005ff6 <UART_SetConfig+0xe2>
 8005ff2:	2310      	movs	r3, #16
 8005ff4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ffe:	d15a      	bne.n	80060b6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006000:	7ffb      	ldrb	r3, [r7, #31]
 8006002:	2b08      	cmp	r3, #8
 8006004:	d827      	bhi.n	8006056 <UART_SetConfig+0x142>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <UART_SetConfig+0xf8>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	08006031 	.word	0x08006031
 8006010:	08006039 	.word	0x08006039
 8006014:	08006041 	.word	0x08006041
 8006018:	08006057 	.word	0x08006057
 800601c:	08006047 	.word	0x08006047
 8006020:	08006057 	.word	0x08006057
 8006024:	08006057 	.word	0x08006057
 8006028:	08006057 	.word	0x08006057
 800602c:	0800604f 	.word	0x0800604f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006030:	f7ff f94c 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8006034:	61b8      	str	r0, [r7, #24]
        break;
 8006036:	e013      	b.n	8006060 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006038:	f7ff f96a 	bl	8005310 <HAL_RCC_GetPCLK2Freq>
 800603c:	61b8      	str	r0, [r7, #24]
        break;
 800603e:	e00f      	b.n	8006060 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006040:	4b4e      	ldr	r3, [pc, #312]	; (800617c <UART_SetConfig+0x268>)
 8006042:	61bb      	str	r3, [r7, #24]
        break;
 8006044:	e00c      	b.n	8006060 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006046:	f7ff f8cb 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 800604a:	61b8      	str	r0, [r7, #24]
        break;
 800604c:	e008      	b.n	8006060 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006052:	61bb      	str	r3, [r7, #24]
        break;
 8006054:	e004      	b.n	8006060 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	77bb      	strb	r3, [r7, #30]
        break;
 800605e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d074      	beq.n	8006150 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	005a      	lsls	r2, r3, #1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	085b      	lsrs	r3, r3, #1
 8006070:	441a      	add	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	fbb2 f3f3 	udiv	r3, r2, r3
 800607a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b0f      	cmp	r3, #15
 8006080:	d916      	bls.n	80060b0 <UART_SetConfig+0x19c>
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006088:	d212      	bcs.n	80060b0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	b29b      	uxth	r3, r3
 800608e:	f023 030f 	bic.w	r3, r3, #15
 8006092:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	085b      	lsrs	r3, r3, #1
 8006098:	b29b      	uxth	r3, r3
 800609a:	f003 0307 	and.w	r3, r3, #7
 800609e:	b29a      	uxth	r2, r3
 80060a0:	89fb      	ldrh	r3, [r7, #14]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	89fa      	ldrh	r2, [r7, #14]
 80060ac:	60da      	str	r2, [r3, #12]
 80060ae:	e04f      	b.n	8006150 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	77bb      	strb	r3, [r7, #30]
 80060b4:	e04c      	b.n	8006150 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060b6:	7ffb      	ldrb	r3, [r7, #31]
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d828      	bhi.n	800610e <UART_SetConfig+0x1fa>
 80060bc:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <UART_SetConfig+0x1b0>)
 80060be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c2:	bf00      	nop
 80060c4:	080060e9 	.word	0x080060e9
 80060c8:	080060f1 	.word	0x080060f1
 80060cc:	080060f9 	.word	0x080060f9
 80060d0:	0800610f 	.word	0x0800610f
 80060d4:	080060ff 	.word	0x080060ff
 80060d8:	0800610f 	.word	0x0800610f
 80060dc:	0800610f 	.word	0x0800610f
 80060e0:	0800610f 	.word	0x0800610f
 80060e4:	08006107 	.word	0x08006107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e8:	f7ff f8f0 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 80060ec:	61b8      	str	r0, [r7, #24]
        break;
 80060ee:	e013      	b.n	8006118 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f0:	f7ff f90e 	bl	8005310 <HAL_RCC_GetPCLK2Freq>
 80060f4:	61b8      	str	r0, [r7, #24]
        break;
 80060f6:	e00f      	b.n	8006118 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f8:	4b20      	ldr	r3, [pc, #128]	; (800617c <UART_SetConfig+0x268>)
 80060fa:	61bb      	str	r3, [r7, #24]
        break;
 80060fc:	e00c      	b.n	8006118 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060fe:	f7ff f86f 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 8006102:	61b8      	str	r0, [r7, #24]
        break;
 8006104:	e008      	b.n	8006118 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800610a:	61bb      	str	r3, [r7, #24]
        break;
 800610c:	e004      	b.n	8006118 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	77bb      	strb	r3, [r7, #30]
        break;
 8006116:	bf00      	nop
    }

    if (pclk != 0U)
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d018      	beq.n	8006150 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	085a      	lsrs	r2, r3, #1
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	441a      	add	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006130:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	2b0f      	cmp	r3, #15
 8006136:	d909      	bls.n	800614c <UART_SetConfig+0x238>
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613e:	d205      	bcs.n	800614c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	b29a      	uxth	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	60da      	str	r2, [r3, #12]
 800614a:	e001      	b.n	8006150 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800615c:	7fbb      	ldrb	r3, [r7, #30]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	efff69f3 	.word	0xefff69f3
 800616c:	40013800 	.word	0x40013800
 8006170:	40021000 	.word	0x40021000
 8006174:	40004400 	.word	0x40004400
 8006178:	40004800 	.word	0x40004800
 800617c:	007a1200 	.word	0x007a1200

08006180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	f003 0320 	and.w	r3, r3, #32
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01a      	beq.n	8006296 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800627e:	d10a      	bne.n	8006296 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	605a      	str	r2, [r3, #4]
  }
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b098      	sub	sp, #96	; 0x60
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062d4:	f7fc fbb6 	bl	8002a44 <HAL_GetTick>
 80062d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0308 	and.w	r3, r3, #8
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d12e      	bne.n	8006346 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062f0:	2200      	movs	r2, #0
 80062f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f88c 	bl	8006414 <UART_WaitOnFlagUntilTimeout>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d021      	beq.n	8006346 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006316:	653b      	str	r3, [r7, #80]	; 0x50
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006320:	647b      	str	r3, [r7, #68]	; 0x44
 8006322:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800632e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e6      	bne.n	8006302 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e062      	b.n	800640c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b04      	cmp	r3, #4
 8006352:	d149      	bne.n	80063e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800635c:	2200      	movs	r2, #0
 800635e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f856 	bl	8006414 <UART_WaitOnFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d03c      	beq.n	80063e8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	623b      	str	r3, [r7, #32]
   return(result);
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800638c:	633b      	str	r3, [r7, #48]	; 0x30
 800638e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e6      	bne.n	800636e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3308      	adds	r3, #8
 80063a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0301 	bic.w	r3, r3, #1
 80063b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3308      	adds	r3, #8
 80063be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063c0:	61fa      	str	r2, [r7, #28]
 80063c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	69b9      	ldr	r1, [r7, #24]
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	617b      	str	r3, [r7, #20]
   return(result);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e5      	bne.n	80063a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e011      	b.n	800640c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3758      	adds	r7, #88	; 0x58
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	4613      	mov	r3, r2
 8006422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006424:	e049      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642c:	d045      	beq.n	80064ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642e:	f7fc fb09 	bl	8002a44 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	429a      	cmp	r2, r3
 800643c:	d302      	bcc.n	8006444 <UART_WaitOnFlagUntilTimeout+0x30>
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e048      	b.n	80064da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	d031      	beq.n	80064ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b08      	cmp	r3, #8
 8006462:	d110      	bne.n	8006486 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2208      	movs	r2, #8
 800646a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 f838 	bl	80064e2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2208      	movs	r2, #8
 8006476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e029      	b.n	80064da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006494:	d111      	bne.n	80064ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800649e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f81e 	bl	80064e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e00f      	b.n	80064da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69da      	ldr	r2, [r3, #28]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4013      	ands	r3, r2
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	bf0c      	ite	eq
 80064ca:	2301      	moveq	r3, #1
 80064cc:	2300      	movne	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d0a6      	beq.n	8006426 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b095      	sub	sp, #84	; 0x54
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006508:	643b      	str	r3, [r7, #64]	; 0x40
 800650a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800650e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e6      	bne.n	80064ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3308      	adds	r3, #8
 8006522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	61fb      	str	r3, [r7, #28]
   return(result);
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	f023 0301 	bic.w	r3, r3, #1
 8006532:	64bb      	str	r3, [r7, #72]	; 0x48
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3308      	adds	r3, #8
 800653a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800653c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800653e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e5      	bne.n	800651c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006554:	2b01      	cmp	r3, #1
 8006556:	d118      	bne.n	800658a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	60bb      	str	r3, [r7, #8]
   return(result);
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f023 0310 	bic.w	r3, r3, #16
 800656c:	647b      	str	r3, [r7, #68]	; 0x44
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006576:	61bb      	str	r3, [r7, #24]
 8006578:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	6979      	ldr	r1, [r7, #20]
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	613b      	str	r3, [r7, #16]
   return(result);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e6      	bne.n	8006558 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800659e:	bf00      	nop
 80065a0:	3754      	adds	r7, #84	; 0x54
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <__errno>:
 80065ac:	4b01      	ldr	r3, [pc, #4]	; (80065b4 <__errno+0x8>)
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	2000002c 	.word	0x2000002c

080065b8 <__libc_init_array>:
 80065b8:	b570      	push	{r4, r5, r6, lr}
 80065ba:	4d0d      	ldr	r5, [pc, #52]	; (80065f0 <__libc_init_array+0x38>)
 80065bc:	4c0d      	ldr	r4, [pc, #52]	; (80065f4 <__libc_init_array+0x3c>)
 80065be:	1b64      	subs	r4, r4, r5
 80065c0:	10a4      	asrs	r4, r4, #2
 80065c2:	2600      	movs	r6, #0
 80065c4:	42a6      	cmp	r6, r4
 80065c6:	d109      	bne.n	80065dc <__libc_init_array+0x24>
 80065c8:	4d0b      	ldr	r5, [pc, #44]	; (80065f8 <__libc_init_array+0x40>)
 80065ca:	4c0c      	ldr	r4, [pc, #48]	; (80065fc <__libc_init_array+0x44>)
 80065cc:	f001 f8e6 	bl	800779c <_init>
 80065d0:	1b64      	subs	r4, r4, r5
 80065d2:	10a4      	asrs	r4, r4, #2
 80065d4:	2600      	movs	r6, #0
 80065d6:	42a6      	cmp	r6, r4
 80065d8:	d105      	bne.n	80065e6 <__libc_init_array+0x2e>
 80065da:	bd70      	pop	{r4, r5, r6, pc}
 80065dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e0:	4798      	blx	r3
 80065e2:	3601      	adds	r6, #1
 80065e4:	e7ee      	b.n	80065c4 <__libc_init_array+0xc>
 80065e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ea:	4798      	blx	r3
 80065ec:	3601      	adds	r6, #1
 80065ee:	e7f2      	b.n	80065d6 <__libc_init_array+0x1e>
 80065f0:	080079f8 	.word	0x080079f8
 80065f4:	080079f8 	.word	0x080079f8
 80065f8:	080079f8 	.word	0x080079f8
 80065fc:	080079fc 	.word	0x080079fc

08006600 <memset>:
 8006600:	4402      	add	r2, r0
 8006602:	4603      	mov	r3, r0
 8006604:	4293      	cmp	r3, r2
 8006606:	d100      	bne.n	800660a <memset+0xa>
 8006608:	4770      	bx	lr
 800660a:	f803 1b01 	strb.w	r1, [r3], #1
 800660e:	e7f9      	b.n	8006604 <memset+0x4>

08006610 <iprintf>:
 8006610:	b40f      	push	{r0, r1, r2, r3}
 8006612:	4b0a      	ldr	r3, [pc, #40]	; (800663c <iprintf+0x2c>)
 8006614:	b513      	push	{r0, r1, r4, lr}
 8006616:	681c      	ldr	r4, [r3, #0]
 8006618:	b124      	cbz	r4, 8006624 <iprintf+0x14>
 800661a:	69a3      	ldr	r3, [r4, #24]
 800661c:	b913      	cbnz	r3, 8006624 <iprintf+0x14>
 800661e:	4620      	mov	r0, r4
 8006620:	f000 faba 	bl	8006b98 <__sinit>
 8006624:	ab05      	add	r3, sp, #20
 8006626:	9a04      	ldr	r2, [sp, #16]
 8006628:	68a1      	ldr	r1, [r4, #8]
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	4620      	mov	r0, r4
 800662e:	f000 fcdd 	bl	8006fec <_vfiprintf_r>
 8006632:	b002      	add	sp, #8
 8006634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006638:	b004      	add	sp, #16
 800663a:	4770      	bx	lr
 800663c:	2000002c 	.word	0x2000002c

08006640 <_puts_r>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	460e      	mov	r6, r1
 8006644:	4605      	mov	r5, r0
 8006646:	b118      	cbz	r0, 8006650 <_puts_r+0x10>
 8006648:	6983      	ldr	r3, [r0, #24]
 800664a:	b90b      	cbnz	r3, 8006650 <_puts_r+0x10>
 800664c:	f000 faa4 	bl	8006b98 <__sinit>
 8006650:	69ab      	ldr	r3, [r5, #24]
 8006652:	68ac      	ldr	r4, [r5, #8]
 8006654:	b913      	cbnz	r3, 800665c <_puts_r+0x1c>
 8006656:	4628      	mov	r0, r5
 8006658:	f000 fa9e 	bl	8006b98 <__sinit>
 800665c:	4b2c      	ldr	r3, [pc, #176]	; (8006710 <_puts_r+0xd0>)
 800665e:	429c      	cmp	r4, r3
 8006660:	d120      	bne.n	80066a4 <_puts_r+0x64>
 8006662:	686c      	ldr	r4, [r5, #4]
 8006664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006666:	07db      	lsls	r3, r3, #31
 8006668:	d405      	bmi.n	8006676 <_puts_r+0x36>
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	0598      	lsls	r0, r3, #22
 800666e:	d402      	bmi.n	8006676 <_puts_r+0x36>
 8006670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006672:	f000 fb41 	bl	8006cf8 <__retarget_lock_acquire_recursive>
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	0719      	lsls	r1, r3, #28
 800667a:	d51d      	bpl.n	80066b8 <_puts_r+0x78>
 800667c:	6923      	ldr	r3, [r4, #16]
 800667e:	b1db      	cbz	r3, 80066b8 <_puts_r+0x78>
 8006680:	3e01      	subs	r6, #1
 8006682:	68a3      	ldr	r3, [r4, #8]
 8006684:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006688:	3b01      	subs	r3, #1
 800668a:	60a3      	str	r3, [r4, #8]
 800668c:	bb39      	cbnz	r1, 80066de <_puts_r+0x9e>
 800668e:	2b00      	cmp	r3, #0
 8006690:	da38      	bge.n	8006704 <_puts_r+0xc4>
 8006692:	4622      	mov	r2, r4
 8006694:	210a      	movs	r1, #10
 8006696:	4628      	mov	r0, r5
 8006698:	f000 f886 	bl	80067a8 <__swbuf_r>
 800669c:	3001      	adds	r0, #1
 800669e:	d011      	beq.n	80066c4 <_puts_r+0x84>
 80066a0:	250a      	movs	r5, #10
 80066a2:	e011      	b.n	80066c8 <_puts_r+0x88>
 80066a4:	4b1b      	ldr	r3, [pc, #108]	; (8006714 <_puts_r+0xd4>)
 80066a6:	429c      	cmp	r4, r3
 80066a8:	d101      	bne.n	80066ae <_puts_r+0x6e>
 80066aa:	68ac      	ldr	r4, [r5, #8]
 80066ac:	e7da      	b.n	8006664 <_puts_r+0x24>
 80066ae:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <_puts_r+0xd8>)
 80066b0:	429c      	cmp	r4, r3
 80066b2:	bf08      	it	eq
 80066b4:	68ec      	ldreq	r4, [r5, #12]
 80066b6:	e7d5      	b.n	8006664 <_puts_r+0x24>
 80066b8:	4621      	mov	r1, r4
 80066ba:	4628      	mov	r0, r5
 80066bc:	f000 f8c6 	bl	800684c <__swsetup_r>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d0dd      	beq.n	8006680 <_puts_r+0x40>
 80066c4:	f04f 35ff 	mov.w	r5, #4294967295
 80066c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066ca:	07da      	lsls	r2, r3, #31
 80066cc:	d405      	bmi.n	80066da <_puts_r+0x9a>
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	059b      	lsls	r3, r3, #22
 80066d2:	d402      	bmi.n	80066da <_puts_r+0x9a>
 80066d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066d6:	f000 fb10 	bl	8006cfa <__retarget_lock_release_recursive>
 80066da:	4628      	mov	r0, r5
 80066dc:	bd70      	pop	{r4, r5, r6, pc}
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da04      	bge.n	80066ec <_puts_r+0xac>
 80066e2:	69a2      	ldr	r2, [r4, #24]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	dc06      	bgt.n	80066f6 <_puts_r+0xb6>
 80066e8:	290a      	cmp	r1, #10
 80066ea:	d004      	beq.n	80066f6 <_puts_r+0xb6>
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	6022      	str	r2, [r4, #0]
 80066f2:	7019      	strb	r1, [r3, #0]
 80066f4:	e7c5      	b.n	8006682 <_puts_r+0x42>
 80066f6:	4622      	mov	r2, r4
 80066f8:	4628      	mov	r0, r5
 80066fa:	f000 f855 	bl	80067a8 <__swbuf_r>
 80066fe:	3001      	adds	r0, #1
 8006700:	d1bf      	bne.n	8006682 <_puts_r+0x42>
 8006702:	e7df      	b.n	80066c4 <_puts_r+0x84>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	250a      	movs	r5, #10
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	6022      	str	r2, [r4, #0]
 800670c:	701d      	strb	r5, [r3, #0]
 800670e:	e7db      	b.n	80066c8 <_puts_r+0x88>
 8006710:	08007984 	.word	0x08007984
 8006714:	080079a4 	.word	0x080079a4
 8006718:	08007964 	.word	0x08007964

0800671c <puts>:
 800671c:	4b02      	ldr	r3, [pc, #8]	; (8006728 <puts+0xc>)
 800671e:	4601      	mov	r1, r0
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	f7ff bf8d 	b.w	8006640 <_puts_r>
 8006726:	bf00      	nop
 8006728:	2000002c 	.word	0x2000002c

0800672c <rand>:
 800672c:	4b16      	ldr	r3, [pc, #88]	; (8006788 <rand+0x5c>)
 800672e:	b510      	push	{r4, lr}
 8006730:	681c      	ldr	r4, [r3, #0]
 8006732:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006734:	b9b3      	cbnz	r3, 8006764 <rand+0x38>
 8006736:	2018      	movs	r0, #24
 8006738:	f000 fb46 	bl	8006dc8 <malloc>
 800673c:	63a0      	str	r0, [r4, #56]	; 0x38
 800673e:	b928      	cbnz	r0, 800674c <rand+0x20>
 8006740:	4602      	mov	r2, r0
 8006742:	4b12      	ldr	r3, [pc, #72]	; (800678c <rand+0x60>)
 8006744:	4812      	ldr	r0, [pc, #72]	; (8006790 <rand+0x64>)
 8006746:	214e      	movs	r1, #78	; 0x4e
 8006748:	f000 f8ee 	bl	8006928 <__assert_func>
 800674c:	4a11      	ldr	r2, [pc, #68]	; (8006794 <rand+0x68>)
 800674e:	4b12      	ldr	r3, [pc, #72]	; (8006798 <rand+0x6c>)
 8006750:	e9c0 2300 	strd	r2, r3, [r0]
 8006754:	4b11      	ldr	r3, [pc, #68]	; (800679c <rand+0x70>)
 8006756:	6083      	str	r3, [r0, #8]
 8006758:	230b      	movs	r3, #11
 800675a:	8183      	strh	r3, [r0, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	2300      	movs	r3, #0
 8006760:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006764:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006766:	4a0e      	ldr	r2, [pc, #56]	; (80067a0 <rand+0x74>)
 8006768:	6920      	ldr	r0, [r4, #16]
 800676a:	6963      	ldr	r3, [r4, #20]
 800676c:	490d      	ldr	r1, [pc, #52]	; (80067a4 <rand+0x78>)
 800676e:	4342      	muls	r2, r0
 8006770:	fb01 2203 	mla	r2, r1, r3, r2
 8006774:	fba0 0101 	umull	r0, r1, r0, r1
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	eb42 0001 	adc.w	r0, r2, r1
 800677e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006782:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006786:	bd10      	pop	{r4, pc}
 8006788:	2000002c 	.word	0x2000002c
 800678c:	080078b4 	.word	0x080078b4
 8006790:	080078cb 	.word	0x080078cb
 8006794:	abcd330e 	.word	0xabcd330e
 8006798:	e66d1234 	.word	0xe66d1234
 800679c:	0005deec 	.word	0x0005deec
 80067a0:	5851f42d 	.word	0x5851f42d
 80067a4:	4c957f2d 	.word	0x4c957f2d

080067a8 <__swbuf_r>:
 80067a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067aa:	460e      	mov	r6, r1
 80067ac:	4614      	mov	r4, r2
 80067ae:	4605      	mov	r5, r0
 80067b0:	b118      	cbz	r0, 80067ba <__swbuf_r+0x12>
 80067b2:	6983      	ldr	r3, [r0, #24]
 80067b4:	b90b      	cbnz	r3, 80067ba <__swbuf_r+0x12>
 80067b6:	f000 f9ef 	bl	8006b98 <__sinit>
 80067ba:	4b21      	ldr	r3, [pc, #132]	; (8006840 <__swbuf_r+0x98>)
 80067bc:	429c      	cmp	r4, r3
 80067be:	d12b      	bne.n	8006818 <__swbuf_r+0x70>
 80067c0:	686c      	ldr	r4, [r5, #4]
 80067c2:	69a3      	ldr	r3, [r4, #24]
 80067c4:	60a3      	str	r3, [r4, #8]
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	071a      	lsls	r2, r3, #28
 80067ca:	d52f      	bpl.n	800682c <__swbuf_r+0x84>
 80067cc:	6923      	ldr	r3, [r4, #16]
 80067ce:	b36b      	cbz	r3, 800682c <__swbuf_r+0x84>
 80067d0:	6923      	ldr	r3, [r4, #16]
 80067d2:	6820      	ldr	r0, [r4, #0]
 80067d4:	1ac0      	subs	r0, r0, r3
 80067d6:	6963      	ldr	r3, [r4, #20]
 80067d8:	b2f6      	uxtb	r6, r6
 80067da:	4283      	cmp	r3, r0
 80067dc:	4637      	mov	r7, r6
 80067de:	dc04      	bgt.n	80067ea <__swbuf_r+0x42>
 80067e0:	4621      	mov	r1, r4
 80067e2:	4628      	mov	r0, r5
 80067e4:	f000 f944 	bl	8006a70 <_fflush_r>
 80067e8:	bb30      	cbnz	r0, 8006838 <__swbuf_r+0x90>
 80067ea:	68a3      	ldr	r3, [r4, #8]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	60a3      	str	r3, [r4, #8]
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	6022      	str	r2, [r4, #0]
 80067f6:	701e      	strb	r6, [r3, #0]
 80067f8:	6963      	ldr	r3, [r4, #20]
 80067fa:	3001      	adds	r0, #1
 80067fc:	4283      	cmp	r3, r0
 80067fe:	d004      	beq.n	800680a <__swbuf_r+0x62>
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	07db      	lsls	r3, r3, #31
 8006804:	d506      	bpl.n	8006814 <__swbuf_r+0x6c>
 8006806:	2e0a      	cmp	r6, #10
 8006808:	d104      	bne.n	8006814 <__swbuf_r+0x6c>
 800680a:	4621      	mov	r1, r4
 800680c:	4628      	mov	r0, r5
 800680e:	f000 f92f 	bl	8006a70 <_fflush_r>
 8006812:	b988      	cbnz	r0, 8006838 <__swbuf_r+0x90>
 8006814:	4638      	mov	r0, r7
 8006816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <__swbuf_r+0x9c>)
 800681a:	429c      	cmp	r4, r3
 800681c:	d101      	bne.n	8006822 <__swbuf_r+0x7a>
 800681e:	68ac      	ldr	r4, [r5, #8]
 8006820:	e7cf      	b.n	80067c2 <__swbuf_r+0x1a>
 8006822:	4b09      	ldr	r3, [pc, #36]	; (8006848 <__swbuf_r+0xa0>)
 8006824:	429c      	cmp	r4, r3
 8006826:	bf08      	it	eq
 8006828:	68ec      	ldreq	r4, [r5, #12]
 800682a:	e7ca      	b.n	80067c2 <__swbuf_r+0x1a>
 800682c:	4621      	mov	r1, r4
 800682e:	4628      	mov	r0, r5
 8006830:	f000 f80c 	bl	800684c <__swsetup_r>
 8006834:	2800      	cmp	r0, #0
 8006836:	d0cb      	beq.n	80067d0 <__swbuf_r+0x28>
 8006838:	f04f 37ff 	mov.w	r7, #4294967295
 800683c:	e7ea      	b.n	8006814 <__swbuf_r+0x6c>
 800683e:	bf00      	nop
 8006840:	08007984 	.word	0x08007984
 8006844:	080079a4 	.word	0x080079a4
 8006848:	08007964 	.word	0x08007964

0800684c <__swsetup_r>:
 800684c:	4b32      	ldr	r3, [pc, #200]	; (8006918 <__swsetup_r+0xcc>)
 800684e:	b570      	push	{r4, r5, r6, lr}
 8006850:	681d      	ldr	r5, [r3, #0]
 8006852:	4606      	mov	r6, r0
 8006854:	460c      	mov	r4, r1
 8006856:	b125      	cbz	r5, 8006862 <__swsetup_r+0x16>
 8006858:	69ab      	ldr	r3, [r5, #24]
 800685a:	b913      	cbnz	r3, 8006862 <__swsetup_r+0x16>
 800685c:	4628      	mov	r0, r5
 800685e:	f000 f99b 	bl	8006b98 <__sinit>
 8006862:	4b2e      	ldr	r3, [pc, #184]	; (800691c <__swsetup_r+0xd0>)
 8006864:	429c      	cmp	r4, r3
 8006866:	d10f      	bne.n	8006888 <__swsetup_r+0x3c>
 8006868:	686c      	ldr	r4, [r5, #4]
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006870:	0719      	lsls	r1, r3, #28
 8006872:	d42c      	bmi.n	80068ce <__swsetup_r+0x82>
 8006874:	06dd      	lsls	r5, r3, #27
 8006876:	d411      	bmi.n	800689c <__swsetup_r+0x50>
 8006878:	2309      	movs	r3, #9
 800687a:	6033      	str	r3, [r6, #0]
 800687c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006880:	81a3      	strh	r3, [r4, #12]
 8006882:	f04f 30ff 	mov.w	r0, #4294967295
 8006886:	e03e      	b.n	8006906 <__swsetup_r+0xba>
 8006888:	4b25      	ldr	r3, [pc, #148]	; (8006920 <__swsetup_r+0xd4>)
 800688a:	429c      	cmp	r4, r3
 800688c:	d101      	bne.n	8006892 <__swsetup_r+0x46>
 800688e:	68ac      	ldr	r4, [r5, #8]
 8006890:	e7eb      	b.n	800686a <__swsetup_r+0x1e>
 8006892:	4b24      	ldr	r3, [pc, #144]	; (8006924 <__swsetup_r+0xd8>)
 8006894:	429c      	cmp	r4, r3
 8006896:	bf08      	it	eq
 8006898:	68ec      	ldreq	r4, [r5, #12]
 800689a:	e7e6      	b.n	800686a <__swsetup_r+0x1e>
 800689c:	0758      	lsls	r0, r3, #29
 800689e:	d512      	bpl.n	80068c6 <__swsetup_r+0x7a>
 80068a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068a2:	b141      	cbz	r1, 80068b6 <__swsetup_r+0x6a>
 80068a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068a8:	4299      	cmp	r1, r3
 80068aa:	d002      	beq.n	80068b2 <__swsetup_r+0x66>
 80068ac:	4630      	mov	r0, r6
 80068ae:	f000 fa93 	bl	8006dd8 <_free_r>
 80068b2:	2300      	movs	r3, #0
 80068b4:	6363      	str	r3, [r4, #52]	; 0x34
 80068b6:	89a3      	ldrh	r3, [r4, #12]
 80068b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068bc:	81a3      	strh	r3, [r4, #12]
 80068be:	2300      	movs	r3, #0
 80068c0:	6063      	str	r3, [r4, #4]
 80068c2:	6923      	ldr	r3, [r4, #16]
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	f043 0308 	orr.w	r3, r3, #8
 80068cc:	81a3      	strh	r3, [r4, #12]
 80068ce:	6923      	ldr	r3, [r4, #16]
 80068d0:	b94b      	cbnz	r3, 80068e6 <__swsetup_r+0x9a>
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068dc:	d003      	beq.n	80068e6 <__swsetup_r+0x9a>
 80068de:	4621      	mov	r1, r4
 80068e0:	4630      	mov	r0, r6
 80068e2:	f000 fa31 	bl	8006d48 <__smakebuf_r>
 80068e6:	89a0      	ldrh	r0, [r4, #12]
 80068e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068ec:	f010 0301 	ands.w	r3, r0, #1
 80068f0:	d00a      	beq.n	8006908 <__swsetup_r+0xbc>
 80068f2:	2300      	movs	r3, #0
 80068f4:	60a3      	str	r3, [r4, #8]
 80068f6:	6963      	ldr	r3, [r4, #20]
 80068f8:	425b      	negs	r3, r3
 80068fa:	61a3      	str	r3, [r4, #24]
 80068fc:	6923      	ldr	r3, [r4, #16]
 80068fe:	b943      	cbnz	r3, 8006912 <__swsetup_r+0xc6>
 8006900:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006904:	d1ba      	bne.n	800687c <__swsetup_r+0x30>
 8006906:	bd70      	pop	{r4, r5, r6, pc}
 8006908:	0781      	lsls	r1, r0, #30
 800690a:	bf58      	it	pl
 800690c:	6963      	ldrpl	r3, [r4, #20]
 800690e:	60a3      	str	r3, [r4, #8]
 8006910:	e7f4      	b.n	80068fc <__swsetup_r+0xb0>
 8006912:	2000      	movs	r0, #0
 8006914:	e7f7      	b.n	8006906 <__swsetup_r+0xba>
 8006916:	bf00      	nop
 8006918:	2000002c 	.word	0x2000002c
 800691c:	08007984 	.word	0x08007984
 8006920:	080079a4 	.word	0x080079a4
 8006924:	08007964 	.word	0x08007964

08006928 <__assert_func>:
 8006928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800692a:	4614      	mov	r4, r2
 800692c:	461a      	mov	r2, r3
 800692e:	4b09      	ldr	r3, [pc, #36]	; (8006954 <__assert_func+0x2c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4605      	mov	r5, r0
 8006934:	68d8      	ldr	r0, [r3, #12]
 8006936:	b14c      	cbz	r4, 800694c <__assert_func+0x24>
 8006938:	4b07      	ldr	r3, [pc, #28]	; (8006958 <__assert_func+0x30>)
 800693a:	9100      	str	r1, [sp, #0]
 800693c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006940:	4906      	ldr	r1, [pc, #24]	; (800695c <__assert_func+0x34>)
 8006942:	462b      	mov	r3, r5
 8006944:	f000 f9a6 	bl	8006c94 <fiprintf>
 8006948:	f000 fe7a 	bl	8007640 <abort>
 800694c:	4b04      	ldr	r3, [pc, #16]	; (8006960 <__assert_func+0x38>)
 800694e:	461c      	mov	r4, r3
 8006950:	e7f3      	b.n	800693a <__assert_func+0x12>
 8006952:	bf00      	nop
 8006954:	2000002c 	.word	0x2000002c
 8006958:	08007926 	.word	0x08007926
 800695c:	08007933 	.word	0x08007933
 8006960:	08007961 	.word	0x08007961

08006964 <__sflush_r>:
 8006964:	898a      	ldrh	r2, [r1, #12]
 8006966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800696a:	4605      	mov	r5, r0
 800696c:	0710      	lsls	r0, r2, #28
 800696e:	460c      	mov	r4, r1
 8006970:	d458      	bmi.n	8006a24 <__sflush_r+0xc0>
 8006972:	684b      	ldr	r3, [r1, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	dc05      	bgt.n	8006984 <__sflush_r+0x20>
 8006978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800697a:	2b00      	cmp	r3, #0
 800697c:	dc02      	bgt.n	8006984 <__sflush_r+0x20>
 800697e:	2000      	movs	r0, #0
 8006980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006986:	2e00      	cmp	r6, #0
 8006988:	d0f9      	beq.n	800697e <__sflush_r+0x1a>
 800698a:	2300      	movs	r3, #0
 800698c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006990:	682f      	ldr	r7, [r5, #0]
 8006992:	602b      	str	r3, [r5, #0]
 8006994:	d032      	beq.n	80069fc <__sflush_r+0x98>
 8006996:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	075a      	lsls	r2, r3, #29
 800699c:	d505      	bpl.n	80069aa <__sflush_r+0x46>
 800699e:	6863      	ldr	r3, [r4, #4]
 80069a0:	1ac0      	subs	r0, r0, r3
 80069a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069a4:	b10b      	cbz	r3, 80069aa <__sflush_r+0x46>
 80069a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069a8:	1ac0      	subs	r0, r0, r3
 80069aa:	2300      	movs	r3, #0
 80069ac:	4602      	mov	r2, r0
 80069ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069b0:	6a21      	ldr	r1, [r4, #32]
 80069b2:	4628      	mov	r0, r5
 80069b4:	47b0      	blx	r6
 80069b6:	1c43      	adds	r3, r0, #1
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	d106      	bne.n	80069ca <__sflush_r+0x66>
 80069bc:	6829      	ldr	r1, [r5, #0]
 80069be:	291d      	cmp	r1, #29
 80069c0:	d82c      	bhi.n	8006a1c <__sflush_r+0xb8>
 80069c2:	4a2a      	ldr	r2, [pc, #168]	; (8006a6c <__sflush_r+0x108>)
 80069c4:	40ca      	lsrs	r2, r1
 80069c6:	07d6      	lsls	r6, r2, #31
 80069c8:	d528      	bpl.n	8006a1c <__sflush_r+0xb8>
 80069ca:	2200      	movs	r2, #0
 80069cc:	6062      	str	r2, [r4, #4]
 80069ce:	04d9      	lsls	r1, r3, #19
 80069d0:	6922      	ldr	r2, [r4, #16]
 80069d2:	6022      	str	r2, [r4, #0]
 80069d4:	d504      	bpl.n	80069e0 <__sflush_r+0x7c>
 80069d6:	1c42      	adds	r2, r0, #1
 80069d8:	d101      	bne.n	80069de <__sflush_r+0x7a>
 80069da:	682b      	ldr	r3, [r5, #0]
 80069dc:	b903      	cbnz	r3, 80069e0 <__sflush_r+0x7c>
 80069de:	6560      	str	r0, [r4, #84]	; 0x54
 80069e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069e2:	602f      	str	r7, [r5, #0]
 80069e4:	2900      	cmp	r1, #0
 80069e6:	d0ca      	beq.n	800697e <__sflush_r+0x1a>
 80069e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069ec:	4299      	cmp	r1, r3
 80069ee:	d002      	beq.n	80069f6 <__sflush_r+0x92>
 80069f0:	4628      	mov	r0, r5
 80069f2:	f000 f9f1 	bl	8006dd8 <_free_r>
 80069f6:	2000      	movs	r0, #0
 80069f8:	6360      	str	r0, [r4, #52]	; 0x34
 80069fa:	e7c1      	b.n	8006980 <__sflush_r+0x1c>
 80069fc:	6a21      	ldr	r1, [r4, #32]
 80069fe:	2301      	movs	r3, #1
 8006a00:	4628      	mov	r0, r5
 8006a02:	47b0      	blx	r6
 8006a04:	1c41      	adds	r1, r0, #1
 8006a06:	d1c7      	bne.n	8006998 <__sflush_r+0x34>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0c4      	beq.n	8006998 <__sflush_r+0x34>
 8006a0e:	2b1d      	cmp	r3, #29
 8006a10:	d001      	beq.n	8006a16 <__sflush_r+0xb2>
 8006a12:	2b16      	cmp	r3, #22
 8006a14:	d101      	bne.n	8006a1a <__sflush_r+0xb6>
 8006a16:	602f      	str	r7, [r5, #0]
 8006a18:	e7b1      	b.n	800697e <__sflush_r+0x1a>
 8006a1a:	89a3      	ldrh	r3, [r4, #12]
 8006a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a20:	81a3      	strh	r3, [r4, #12]
 8006a22:	e7ad      	b.n	8006980 <__sflush_r+0x1c>
 8006a24:	690f      	ldr	r7, [r1, #16]
 8006a26:	2f00      	cmp	r7, #0
 8006a28:	d0a9      	beq.n	800697e <__sflush_r+0x1a>
 8006a2a:	0793      	lsls	r3, r2, #30
 8006a2c:	680e      	ldr	r6, [r1, #0]
 8006a2e:	bf08      	it	eq
 8006a30:	694b      	ldreq	r3, [r1, #20]
 8006a32:	600f      	str	r7, [r1, #0]
 8006a34:	bf18      	it	ne
 8006a36:	2300      	movne	r3, #0
 8006a38:	eba6 0807 	sub.w	r8, r6, r7
 8006a3c:	608b      	str	r3, [r1, #8]
 8006a3e:	f1b8 0f00 	cmp.w	r8, #0
 8006a42:	dd9c      	ble.n	800697e <__sflush_r+0x1a>
 8006a44:	6a21      	ldr	r1, [r4, #32]
 8006a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a48:	4643      	mov	r3, r8
 8006a4a:	463a      	mov	r2, r7
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	47b0      	blx	r6
 8006a50:	2800      	cmp	r0, #0
 8006a52:	dc06      	bgt.n	8006a62 <__sflush_r+0xfe>
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a5a:	81a3      	strh	r3, [r4, #12]
 8006a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a60:	e78e      	b.n	8006980 <__sflush_r+0x1c>
 8006a62:	4407      	add	r7, r0
 8006a64:	eba8 0800 	sub.w	r8, r8, r0
 8006a68:	e7e9      	b.n	8006a3e <__sflush_r+0xda>
 8006a6a:	bf00      	nop
 8006a6c:	20400001 	.word	0x20400001

08006a70 <_fflush_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	690b      	ldr	r3, [r1, #16]
 8006a74:	4605      	mov	r5, r0
 8006a76:	460c      	mov	r4, r1
 8006a78:	b913      	cbnz	r3, 8006a80 <_fflush_r+0x10>
 8006a7a:	2500      	movs	r5, #0
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
 8006a80:	b118      	cbz	r0, 8006a8a <_fflush_r+0x1a>
 8006a82:	6983      	ldr	r3, [r0, #24]
 8006a84:	b90b      	cbnz	r3, 8006a8a <_fflush_r+0x1a>
 8006a86:	f000 f887 	bl	8006b98 <__sinit>
 8006a8a:	4b14      	ldr	r3, [pc, #80]	; (8006adc <_fflush_r+0x6c>)
 8006a8c:	429c      	cmp	r4, r3
 8006a8e:	d11b      	bne.n	8006ac8 <_fflush_r+0x58>
 8006a90:	686c      	ldr	r4, [r5, #4]
 8006a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0ef      	beq.n	8006a7a <_fflush_r+0xa>
 8006a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a9c:	07d0      	lsls	r0, r2, #31
 8006a9e:	d404      	bmi.n	8006aaa <_fflush_r+0x3a>
 8006aa0:	0599      	lsls	r1, r3, #22
 8006aa2:	d402      	bmi.n	8006aaa <_fflush_r+0x3a>
 8006aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aa6:	f000 f927 	bl	8006cf8 <__retarget_lock_acquire_recursive>
 8006aaa:	4628      	mov	r0, r5
 8006aac:	4621      	mov	r1, r4
 8006aae:	f7ff ff59 	bl	8006964 <__sflush_r>
 8006ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ab4:	07da      	lsls	r2, r3, #31
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	d4e0      	bmi.n	8006a7c <_fflush_r+0xc>
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	059b      	lsls	r3, r3, #22
 8006abe:	d4dd      	bmi.n	8006a7c <_fflush_r+0xc>
 8006ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ac2:	f000 f91a 	bl	8006cfa <__retarget_lock_release_recursive>
 8006ac6:	e7d9      	b.n	8006a7c <_fflush_r+0xc>
 8006ac8:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <_fflush_r+0x70>)
 8006aca:	429c      	cmp	r4, r3
 8006acc:	d101      	bne.n	8006ad2 <_fflush_r+0x62>
 8006ace:	68ac      	ldr	r4, [r5, #8]
 8006ad0:	e7df      	b.n	8006a92 <_fflush_r+0x22>
 8006ad2:	4b04      	ldr	r3, [pc, #16]	; (8006ae4 <_fflush_r+0x74>)
 8006ad4:	429c      	cmp	r4, r3
 8006ad6:	bf08      	it	eq
 8006ad8:	68ec      	ldreq	r4, [r5, #12]
 8006ada:	e7da      	b.n	8006a92 <_fflush_r+0x22>
 8006adc:	08007984 	.word	0x08007984
 8006ae0:	080079a4 	.word	0x080079a4
 8006ae4:	08007964 	.word	0x08007964

08006ae8 <std>:
 8006ae8:	2300      	movs	r3, #0
 8006aea:	b510      	push	{r4, lr}
 8006aec:	4604      	mov	r4, r0
 8006aee:	e9c0 3300 	strd	r3, r3, [r0]
 8006af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006af6:	6083      	str	r3, [r0, #8]
 8006af8:	8181      	strh	r1, [r0, #12]
 8006afa:	6643      	str	r3, [r0, #100]	; 0x64
 8006afc:	81c2      	strh	r2, [r0, #14]
 8006afe:	6183      	str	r3, [r0, #24]
 8006b00:	4619      	mov	r1, r3
 8006b02:	2208      	movs	r2, #8
 8006b04:	305c      	adds	r0, #92	; 0x5c
 8006b06:	f7ff fd7b 	bl	8006600 <memset>
 8006b0a:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <std+0x38>)
 8006b0c:	6263      	str	r3, [r4, #36]	; 0x24
 8006b0e:	4b05      	ldr	r3, [pc, #20]	; (8006b24 <std+0x3c>)
 8006b10:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b12:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <std+0x40>)
 8006b14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b16:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <std+0x44>)
 8006b18:	6224      	str	r4, [r4, #32]
 8006b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8006b1c:	bd10      	pop	{r4, pc}
 8006b1e:	bf00      	nop
 8006b20:	08007595 	.word	0x08007595
 8006b24:	080075b7 	.word	0x080075b7
 8006b28:	080075ef 	.word	0x080075ef
 8006b2c:	08007613 	.word	0x08007613

08006b30 <_cleanup_r>:
 8006b30:	4901      	ldr	r1, [pc, #4]	; (8006b38 <_cleanup_r+0x8>)
 8006b32:	f000 b8c1 	b.w	8006cb8 <_fwalk_reent>
 8006b36:	bf00      	nop
 8006b38:	08006a71 	.word	0x08006a71

08006b3c <__sfmoreglue>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	2268      	movs	r2, #104	; 0x68
 8006b40:	1e4d      	subs	r5, r1, #1
 8006b42:	4355      	muls	r5, r2
 8006b44:	460e      	mov	r6, r1
 8006b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b4a:	f000 f9b1 	bl	8006eb0 <_malloc_r>
 8006b4e:	4604      	mov	r4, r0
 8006b50:	b140      	cbz	r0, 8006b64 <__sfmoreglue+0x28>
 8006b52:	2100      	movs	r1, #0
 8006b54:	e9c0 1600 	strd	r1, r6, [r0]
 8006b58:	300c      	adds	r0, #12
 8006b5a:	60a0      	str	r0, [r4, #8]
 8006b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b60:	f7ff fd4e 	bl	8006600 <memset>
 8006b64:	4620      	mov	r0, r4
 8006b66:	bd70      	pop	{r4, r5, r6, pc}

08006b68 <__sfp_lock_acquire>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__sfp_lock_acquire+0x8>)
 8006b6a:	f000 b8c5 	b.w	8006cf8 <__retarget_lock_acquire_recursive>
 8006b6e:	bf00      	nop
 8006b70:	20001641 	.word	0x20001641

08006b74 <__sfp_lock_release>:
 8006b74:	4801      	ldr	r0, [pc, #4]	; (8006b7c <__sfp_lock_release+0x8>)
 8006b76:	f000 b8c0 	b.w	8006cfa <__retarget_lock_release_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	20001641 	.word	0x20001641

08006b80 <__sinit_lock_acquire>:
 8006b80:	4801      	ldr	r0, [pc, #4]	; (8006b88 <__sinit_lock_acquire+0x8>)
 8006b82:	f000 b8b9 	b.w	8006cf8 <__retarget_lock_acquire_recursive>
 8006b86:	bf00      	nop
 8006b88:	20001642 	.word	0x20001642

08006b8c <__sinit_lock_release>:
 8006b8c:	4801      	ldr	r0, [pc, #4]	; (8006b94 <__sinit_lock_release+0x8>)
 8006b8e:	f000 b8b4 	b.w	8006cfa <__retarget_lock_release_recursive>
 8006b92:	bf00      	nop
 8006b94:	20001642 	.word	0x20001642

08006b98 <__sinit>:
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	f7ff fff0 	bl	8006b80 <__sinit_lock_acquire>
 8006ba0:	69a3      	ldr	r3, [r4, #24]
 8006ba2:	b11b      	cbz	r3, 8006bac <__sinit+0x14>
 8006ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ba8:	f7ff bff0 	b.w	8006b8c <__sinit_lock_release>
 8006bac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bb0:	6523      	str	r3, [r4, #80]	; 0x50
 8006bb2:	4b13      	ldr	r3, [pc, #76]	; (8006c00 <__sinit+0x68>)
 8006bb4:	4a13      	ldr	r2, [pc, #76]	; (8006c04 <__sinit+0x6c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bba:	42a3      	cmp	r3, r4
 8006bbc:	bf04      	itt	eq
 8006bbe:	2301      	moveq	r3, #1
 8006bc0:	61a3      	streq	r3, [r4, #24]
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f000 f820 	bl	8006c08 <__sfp>
 8006bc8:	6060      	str	r0, [r4, #4]
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f000 f81c 	bl	8006c08 <__sfp>
 8006bd0:	60a0      	str	r0, [r4, #8]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 f818 	bl	8006c08 <__sfp>
 8006bd8:	2200      	movs	r2, #0
 8006bda:	60e0      	str	r0, [r4, #12]
 8006bdc:	2104      	movs	r1, #4
 8006bde:	6860      	ldr	r0, [r4, #4]
 8006be0:	f7ff ff82 	bl	8006ae8 <std>
 8006be4:	68a0      	ldr	r0, [r4, #8]
 8006be6:	2201      	movs	r2, #1
 8006be8:	2109      	movs	r1, #9
 8006bea:	f7ff ff7d 	bl	8006ae8 <std>
 8006bee:	68e0      	ldr	r0, [r4, #12]
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	2112      	movs	r1, #18
 8006bf4:	f7ff ff78 	bl	8006ae8 <std>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	61a3      	str	r3, [r4, #24]
 8006bfc:	e7d2      	b.n	8006ba4 <__sinit+0xc>
 8006bfe:	bf00      	nop
 8006c00:	080078b0 	.word	0x080078b0
 8006c04:	08006b31 	.word	0x08006b31

08006c08 <__sfp>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	4607      	mov	r7, r0
 8006c0c:	f7ff ffac 	bl	8006b68 <__sfp_lock_acquire>
 8006c10:	4b1e      	ldr	r3, [pc, #120]	; (8006c8c <__sfp+0x84>)
 8006c12:	681e      	ldr	r6, [r3, #0]
 8006c14:	69b3      	ldr	r3, [r6, #24]
 8006c16:	b913      	cbnz	r3, 8006c1e <__sfp+0x16>
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f7ff ffbd 	bl	8006b98 <__sinit>
 8006c1e:	3648      	adds	r6, #72	; 0x48
 8006c20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	d503      	bpl.n	8006c30 <__sfp+0x28>
 8006c28:	6833      	ldr	r3, [r6, #0]
 8006c2a:	b30b      	cbz	r3, 8006c70 <__sfp+0x68>
 8006c2c:	6836      	ldr	r6, [r6, #0]
 8006c2e:	e7f7      	b.n	8006c20 <__sfp+0x18>
 8006c30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c34:	b9d5      	cbnz	r5, 8006c6c <__sfp+0x64>
 8006c36:	4b16      	ldr	r3, [pc, #88]	; (8006c90 <__sfp+0x88>)
 8006c38:	60e3      	str	r3, [r4, #12]
 8006c3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c3e:	6665      	str	r5, [r4, #100]	; 0x64
 8006c40:	f000 f859 	bl	8006cf6 <__retarget_lock_init_recursive>
 8006c44:	f7ff ff96 	bl	8006b74 <__sfp_lock_release>
 8006c48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c50:	6025      	str	r5, [r4, #0]
 8006c52:	61a5      	str	r5, [r4, #24]
 8006c54:	2208      	movs	r2, #8
 8006c56:	4629      	mov	r1, r5
 8006c58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c5c:	f7ff fcd0 	bl	8006600 <memset>
 8006c60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c68:	4620      	mov	r0, r4
 8006c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c6c:	3468      	adds	r4, #104	; 0x68
 8006c6e:	e7d9      	b.n	8006c24 <__sfp+0x1c>
 8006c70:	2104      	movs	r1, #4
 8006c72:	4638      	mov	r0, r7
 8006c74:	f7ff ff62 	bl	8006b3c <__sfmoreglue>
 8006c78:	4604      	mov	r4, r0
 8006c7a:	6030      	str	r0, [r6, #0]
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d1d5      	bne.n	8006c2c <__sfp+0x24>
 8006c80:	f7ff ff78 	bl	8006b74 <__sfp_lock_release>
 8006c84:	230c      	movs	r3, #12
 8006c86:	603b      	str	r3, [r7, #0]
 8006c88:	e7ee      	b.n	8006c68 <__sfp+0x60>
 8006c8a:	bf00      	nop
 8006c8c:	080078b0 	.word	0x080078b0
 8006c90:	ffff0001 	.word	0xffff0001

08006c94 <fiprintf>:
 8006c94:	b40e      	push	{r1, r2, r3}
 8006c96:	b503      	push	{r0, r1, lr}
 8006c98:	4601      	mov	r1, r0
 8006c9a:	ab03      	add	r3, sp, #12
 8006c9c:	4805      	ldr	r0, [pc, #20]	; (8006cb4 <fiprintf+0x20>)
 8006c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ca2:	6800      	ldr	r0, [r0, #0]
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	f000 f9a1 	bl	8006fec <_vfiprintf_r>
 8006caa:	b002      	add	sp, #8
 8006cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cb0:	b003      	add	sp, #12
 8006cb2:	4770      	bx	lr
 8006cb4:	2000002c 	.word	0x2000002c

08006cb8 <_fwalk_reent>:
 8006cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cbc:	4606      	mov	r6, r0
 8006cbe:	4688      	mov	r8, r1
 8006cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cc4:	2700      	movs	r7, #0
 8006cc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cca:	f1b9 0901 	subs.w	r9, r9, #1
 8006cce:	d505      	bpl.n	8006cdc <_fwalk_reent+0x24>
 8006cd0:	6824      	ldr	r4, [r4, #0]
 8006cd2:	2c00      	cmp	r4, #0
 8006cd4:	d1f7      	bne.n	8006cc6 <_fwalk_reent+0xe>
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cdc:	89ab      	ldrh	r3, [r5, #12]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d907      	bls.n	8006cf2 <_fwalk_reent+0x3a>
 8006ce2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	d003      	beq.n	8006cf2 <_fwalk_reent+0x3a>
 8006cea:	4629      	mov	r1, r5
 8006cec:	4630      	mov	r0, r6
 8006cee:	47c0      	blx	r8
 8006cf0:	4307      	orrs	r7, r0
 8006cf2:	3568      	adds	r5, #104	; 0x68
 8006cf4:	e7e9      	b.n	8006cca <_fwalk_reent+0x12>

08006cf6 <__retarget_lock_init_recursive>:
 8006cf6:	4770      	bx	lr

08006cf8 <__retarget_lock_acquire_recursive>:
 8006cf8:	4770      	bx	lr

08006cfa <__retarget_lock_release_recursive>:
 8006cfa:	4770      	bx	lr

08006cfc <__swhatbuf_r>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	460e      	mov	r6, r1
 8006d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d04:	2900      	cmp	r1, #0
 8006d06:	b096      	sub	sp, #88	; 0x58
 8006d08:	4614      	mov	r4, r2
 8006d0a:	461d      	mov	r5, r3
 8006d0c:	da08      	bge.n	8006d20 <__swhatbuf_r+0x24>
 8006d0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	602a      	str	r2, [r5, #0]
 8006d16:	061a      	lsls	r2, r3, #24
 8006d18:	d410      	bmi.n	8006d3c <__swhatbuf_r+0x40>
 8006d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d1e:	e00e      	b.n	8006d3e <__swhatbuf_r+0x42>
 8006d20:	466a      	mov	r2, sp
 8006d22:	f000 fca5 	bl	8007670 <_fstat_r>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	dbf1      	blt.n	8006d0e <__swhatbuf_r+0x12>
 8006d2a:	9a01      	ldr	r2, [sp, #4]
 8006d2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d34:	425a      	negs	r2, r3
 8006d36:	415a      	adcs	r2, r3
 8006d38:	602a      	str	r2, [r5, #0]
 8006d3a:	e7ee      	b.n	8006d1a <__swhatbuf_r+0x1e>
 8006d3c:	2340      	movs	r3, #64	; 0x40
 8006d3e:	2000      	movs	r0, #0
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	b016      	add	sp, #88	; 0x58
 8006d44:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d48 <__smakebuf_r>:
 8006d48:	898b      	ldrh	r3, [r1, #12]
 8006d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d4c:	079d      	lsls	r5, r3, #30
 8006d4e:	4606      	mov	r6, r0
 8006d50:	460c      	mov	r4, r1
 8006d52:	d507      	bpl.n	8006d64 <__smakebuf_r+0x1c>
 8006d54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	6123      	str	r3, [r4, #16]
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	6163      	str	r3, [r4, #20]
 8006d60:	b002      	add	sp, #8
 8006d62:	bd70      	pop	{r4, r5, r6, pc}
 8006d64:	ab01      	add	r3, sp, #4
 8006d66:	466a      	mov	r2, sp
 8006d68:	f7ff ffc8 	bl	8006cfc <__swhatbuf_r>
 8006d6c:	9900      	ldr	r1, [sp, #0]
 8006d6e:	4605      	mov	r5, r0
 8006d70:	4630      	mov	r0, r6
 8006d72:	f000 f89d 	bl	8006eb0 <_malloc_r>
 8006d76:	b948      	cbnz	r0, 8006d8c <__smakebuf_r+0x44>
 8006d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d7c:	059a      	lsls	r2, r3, #22
 8006d7e:	d4ef      	bmi.n	8006d60 <__smakebuf_r+0x18>
 8006d80:	f023 0303 	bic.w	r3, r3, #3
 8006d84:	f043 0302 	orr.w	r3, r3, #2
 8006d88:	81a3      	strh	r3, [r4, #12]
 8006d8a:	e7e3      	b.n	8006d54 <__smakebuf_r+0xc>
 8006d8c:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <__smakebuf_r+0x7c>)
 8006d8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	6020      	str	r0, [r4, #0]
 8006d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	9b00      	ldr	r3, [sp, #0]
 8006d9c:	6163      	str	r3, [r4, #20]
 8006d9e:	9b01      	ldr	r3, [sp, #4]
 8006da0:	6120      	str	r0, [r4, #16]
 8006da2:	b15b      	cbz	r3, 8006dbc <__smakebuf_r+0x74>
 8006da4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006da8:	4630      	mov	r0, r6
 8006daa:	f000 fc73 	bl	8007694 <_isatty_r>
 8006dae:	b128      	cbz	r0, 8006dbc <__smakebuf_r+0x74>
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	f023 0303 	bic.w	r3, r3, #3
 8006db6:	f043 0301 	orr.w	r3, r3, #1
 8006dba:	81a3      	strh	r3, [r4, #12]
 8006dbc:	89a0      	ldrh	r0, [r4, #12]
 8006dbe:	4305      	orrs	r5, r0
 8006dc0:	81a5      	strh	r5, [r4, #12]
 8006dc2:	e7cd      	b.n	8006d60 <__smakebuf_r+0x18>
 8006dc4:	08006b31 	.word	0x08006b31

08006dc8 <malloc>:
 8006dc8:	4b02      	ldr	r3, [pc, #8]	; (8006dd4 <malloc+0xc>)
 8006dca:	4601      	mov	r1, r0
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	f000 b86f 	b.w	8006eb0 <_malloc_r>
 8006dd2:	bf00      	nop
 8006dd4:	2000002c 	.word	0x2000002c

08006dd8 <_free_r>:
 8006dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dda:	2900      	cmp	r1, #0
 8006ddc:	d044      	beq.n	8006e68 <_free_r+0x90>
 8006dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006de2:	9001      	str	r0, [sp, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f1a1 0404 	sub.w	r4, r1, #4
 8006dea:	bfb8      	it	lt
 8006dec:	18e4      	addlt	r4, r4, r3
 8006dee:	f000 fc73 	bl	80076d8 <__malloc_lock>
 8006df2:	4a1e      	ldr	r2, [pc, #120]	; (8006e6c <_free_r+0x94>)
 8006df4:	9801      	ldr	r0, [sp, #4]
 8006df6:	6813      	ldr	r3, [r2, #0]
 8006df8:	b933      	cbnz	r3, 8006e08 <_free_r+0x30>
 8006dfa:	6063      	str	r3, [r4, #4]
 8006dfc:	6014      	str	r4, [r2, #0]
 8006dfe:	b003      	add	sp, #12
 8006e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e04:	f000 bc6e 	b.w	80076e4 <__malloc_unlock>
 8006e08:	42a3      	cmp	r3, r4
 8006e0a:	d908      	bls.n	8006e1e <_free_r+0x46>
 8006e0c:	6825      	ldr	r5, [r4, #0]
 8006e0e:	1961      	adds	r1, r4, r5
 8006e10:	428b      	cmp	r3, r1
 8006e12:	bf01      	itttt	eq
 8006e14:	6819      	ldreq	r1, [r3, #0]
 8006e16:	685b      	ldreq	r3, [r3, #4]
 8006e18:	1949      	addeq	r1, r1, r5
 8006e1a:	6021      	streq	r1, [r4, #0]
 8006e1c:	e7ed      	b.n	8006dfa <_free_r+0x22>
 8006e1e:	461a      	mov	r2, r3
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	b10b      	cbz	r3, 8006e28 <_free_r+0x50>
 8006e24:	42a3      	cmp	r3, r4
 8006e26:	d9fa      	bls.n	8006e1e <_free_r+0x46>
 8006e28:	6811      	ldr	r1, [r2, #0]
 8006e2a:	1855      	adds	r5, r2, r1
 8006e2c:	42a5      	cmp	r5, r4
 8006e2e:	d10b      	bne.n	8006e48 <_free_r+0x70>
 8006e30:	6824      	ldr	r4, [r4, #0]
 8006e32:	4421      	add	r1, r4
 8006e34:	1854      	adds	r4, r2, r1
 8006e36:	42a3      	cmp	r3, r4
 8006e38:	6011      	str	r1, [r2, #0]
 8006e3a:	d1e0      	bne.n	8006dfe <_free_r+0x26>
 8006e3c:	681c      	ldr	r4, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	6053      	str	r3, [r2, #4]
 8006e42:	4421      	add	r1, r4
 8006e44:	6011      	str	r1, [r2, #0]
 8006e46:	e7da      	b.n	8006dfe <_free_r+0x26>
 8006e48:	d902      	bls.n	8006e50 <_free_r+0x78>
 8006e4a:	230c      	movs	r3, #12
 8006e4c:	6003      	str	r3, [r0, #0]
 8006e4e:	e7d6      	b.n	8006dfe <_free_r+0x26>
 8006e50:	6825      	ldr	r5, [r4, #0]
 8006e52:	1961      	adds	r1, r4, r5
 8006e54:	428b      	cmp	r3, r1
 8006e56:	bf04      	itt	eq
 8006e58:	6819      	ldreq	r1, [r3, #0]
 8006e5a:	685b      	ldreq	r3, [r3, #4]
 8006e5c:	6063      	str	r3, [r4, #4]
 8006e5e:	bf04      	itt	eq
 8006e60:	1949      	addeq	r1, r1, r5
 8006e62:	6021      	streq	r1, [r4, #0]
 8006e64:	6054      	str	r4, [r2, #4]
 8006e66:	e7ca      	b.n	8006dfe <_free_r+0x26>
 8006e68:	b003      	add	sp, #12
 8006e6a:	bd30      	pop	{r4, r5, pc}
 8006e6c:	20001644 	.word	0x20001644

08006e70 <sbrk_aligned>:
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	4e0e      	ldr	r6, [pc, #56]	; (8006eac <sbrk_aligned+0x3c>)
 8006e74:	460c      	mov	r4, r1
 8006e76:	6831      	ldr	r1, [r6, #0]
 8006e78:	4605      	mov	r5, r0
 8006e7a:	b911      	cbnz	r1, 8006e82 <sbrk_aligned+0x12>
 8006e7c:	f000 fb7a 	bl	8007574 <_sbrk_r>
 8006e80:	6030      	str	r0, [r6, #0]
 8006e82:	4621      	mov	r1, r4
 8006e84:	4628      	mov	r0, r5
 8006e86:	f000 fb75 	bl	8007574 <_sbrk_r>
 8006e8a:	1c43      	adds	r3, r0, #1
 8006e8c:	d00a      	beq.n	8006ea4 <sbrk_aligned+0x34>
 8006e8e:	1cc4      	adds	r4, r0, #3
 8006e90:	f024 0403 	bic.w	r4, r4, #3
 8006e94:	42a0      	cmp	r0, r4
 8006e96:	d007      	beq.n	8006ea8 <sbrk_aligned+0x38>
 8006e98:	1a21      	subs	r1, r4, r0
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f000 fb6a 	bl	8007574 <_sbrk_r>
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	d101      	bne.n	8006ea8 <sbrk_aligned+0x38>
 8006ea4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
 8006eac:	20001648 	.word	0x20001648

08006eb0 <_malloc_r>:
 8006eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb4:	1ccd      	adds	r5, r1, #3
 8006eb6:	f025 0503 	bic.w	r5, r5, #3
 8006eba:	3508      	adds	r5, #8
 8006ebc:	2d0c      	cmp	r5, #12
 8006ebe:	bf38      	it	cc
 8006ec0:	250c      	movcc	r5, #12
 8006ec2:	2d00      	cmp	r5, #0
 8006ec4:	4607      	mov	r7, r0
 8006ec6:	db01      	blt.n	8006ecc <_malloc_r+0x1c>
 8006ec8:	42a9      	cmp	r1, r5
 8006eca:	d905      	bls.n	8006ed8 <_malloc_r+0x28>
 8006ecc:	230c      	movs	r3, #12
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	2600      	movs	r6, #0
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed8:	4e2e      	ldr	r6, [pc, #184]	; (8006f94 <_malloc_r+0xe4>)
 8006eda:	f000 fbfd 	bl	80076d8 <__malloc_lock>
 8006ede:	6833      	ldr	r3, [r6, #0]
 8006ee0:	461c      	mov	r4, r3
 8006ee2:	bb34      	cbnz	r4, 8006f32 <_malloc_r+0x82>
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	f7ff ffc2 	bl	8006e70 <sbrk_aligned>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	4604      	mov	r4, r0
 8006ef0:	d14d      	bne.n	8006f8e <_malloc_r+0xde>
 8006ef2:	6834      	ldr	r4, [r6, #0]
 8006ef4:	4626      	mov	r6, r4
 8006ef6:	2e00      	cmp	r6, #0
 8006ef8:	d140      	bne.n	8006f7c <_malloc_r+0xcc>
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	4631      	mov	r1, r6
 8006efe:	4638      	mov	r0, r7
 8006f00:	eb04 0803 	add.w	r8, r4, r3
 8006f04:	f000 fb36 	bl	8007574 <_sbrk_r>
 8006f08:	4580      	cmp	r8, r0
 8006f0a:	d13a      	bne.n	8006f82 <_malloc_r+0xd2>
 8006f0c:	6821      	ldr	r1, [r4, #0]
 8006f0e:	3503      	adds	r5, #3
 8006f10:	1a6d      	subs	r5, r5, r1
 8006f12:	f025 0503 	bic.w	r5, r5, #3
 8006f16:	3508      	adds	r5, #8
 8006f18:	2d0c      	cmp	r5, #12
 8006f1a:	bf38      	it	cc
 8006f1c:	250c      	movcc	r5, #12
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4638      	mov	r0, r7
 8006f22:	f7ff ffa5 	bl	8006e70 <sbrk_aligned>
 8006f26:	3001      	adds	r0, #1
 8006f28:	d02b      	beq.n	8006f82 <_malloc_r+0xd2>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	442b      	add	r3, r5
 8006f2e:	6023      	str	r3, [r4, #0]
 8006f30:	e00e      	b.n	8006f50 <_malloc_r+0xa0>
 8006f32:	6822      	ldr	r2, [r4, #0]
 8006f34:	1b52      	subs	r2, r2, r5
 8006f36:	d41e      	bmi.n	8006f76 <_malloc_r+0xc6>
 8006f38:	2a0b      	cmp	r2, #11
 8006f3a:	d916      	bls.n	8006f6a <_malloc_r+0xba>
 8006f3c:	1961      	adds	r1, r4, r5
 8006f3e:	42a3      	cmp	r3, r4
 8006f40:	6025      	str	r5, [r4, #0]
 8006f42:	bf18      	it	ne
 8006f44:	6059      	strne	r1, [r3, #4]
 8006f46:	6863      	ldr	r3, [r4, #4]
 8006f48:	bf08      	it	eq
 8006f4a:	6031      	streq	r1, [r6, #0]
 8006f4c:	5162      	str	r2, [r4, r5]
 8006f4e:	604b      	str	r3, [r1, #4]
 8006f50:	4638      	mov	r0, r7
 8006f52:	f104 060b 	add.w	r6, r4, #11
 8006f56:	f000 fbc5 	bl	80076e4 <__malloc_unlock>
 8006f5a:	f026 0607 	bic.w	r6, r6, #7
 8006f5e:	1d23      	adds	r3, r4, #4
 8006f60:	1af2      	subs	r2, r6, r3
 8006f62:	d0b6      	beq.n	8006ed2 <_malloc_r+0x22>
 8006f64:	1b9b      	subs	r3, r3, r6
 8006f66:	50a3      	str	r3, [r4, r2]
 8006f68:	e7b3      	b.n	8006ed2 <_malloc_r+0x22>
 8006f6a:	6862      	ldr	r2, [r4, #4]
 8006f6c:	42a3      	cmp	r3, r4
 8006f6e:	bf0c      	ite	eq
 8006f70:	6032      	streq	r2, [r6, #0]
 8006f72:	605a      	strne	r2, [r3, #4]
 8006f74:	e7ec      	b.n	8006f50 <_malloc_r+0xa0>
 8006f76:	4623      	mov	r3, r4
 8006f78:	6864      	ldr	r4, [r4, #4]
 8006f7a:	e7b2      	b.n	8006ee2 <_malloc_r+0x32>
 8006f7c:	4634      	mov	r4, r6
 8006f7e:	6876      	ldr	r6, [r6, #4]
 8006f80:	e7b9      	b.n	8006ef6 <_malloc_r+0x46>
 8006f82:	230c      	movs	r3, #12
 8006f84:	603b      	str	r3, [r7, #0]
 8006f86:	4638      	mov	r0, r7
 8006f88:	f000 fbac 	bl	80076e4 <__malloc_unlock>
 8006f8c:	e7a1      	b.n	8006ed2 <_malloc_r+0x22>
 8006f8e:	6025      	str	r5, [r4, #0]
 8006f90:	e7de      	b.n	8006f50 <_malloc_r+0xa0>
 8006f92:	bf00      	nop
 8006f94:	20001644 	.word	0x20001644

08006f98 <__sfputc_r>:
 8006f98:	6893      	ldr	r3, [r2, #8]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	b410      	push	{r4}
 8006fa0:	6093      	str	r3, [r2, #8]
 8006fa2:	da08      	bge.n	8006fb6 <__sfputc_r+0x1e>
 8006fa4:	6994      	ldr	r4, [r2, #24]
 8006fa6:	42a3      	cmp	r3, r4
 8006fa8:	db01      	blt.n	8006fae <__sfputc_r+0x16>
 8006faa:	290a      	cmp	r1, #10
 8006fac:	d103      	bne.n	8006fb6 <__sfputc_r+0x1e>
 8006fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fb2:	f7ff bbf9 	b.w	80067a8 <__swbuf_r>
 8006fb6:	6813      	ldr	r3, [r2, #0]
 8006fb8:	1c58      	adds	r0, r3, #1
 8006fba:	6010      	str	r0, [r2, #0]
 8006fbc:	7019      	strb	r1, [r3, #0]
 8006fbe:	4608      	mov	r0, r1
 8006fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <__sfputs_r>:
 8006fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc8:	4606      	mov	r6, r0
 8006fca:	460f      	mov	r7, r1
 8006fcc:	4614      	mov	r4, r2
 8006fce:	18d5      	adds	r5, r2, r3
 8006fd0:	42ac      	cmp	r4, r5
 8006fd2:	d101      	bne.n	8006fd8 <__sfputs_r+0x12>
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	e007      	b.n	8006fe8 <__sfputs_r+0x22>
 8006fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fdc:	463a      	mov	r2, r7
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f7ff ffda 	bl	8006f98 <__sfputc_r>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d1f3      	bne.n	8006fd0 <__sfputs_r+0xa>
 8006fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fec <_vfiprintf_r>:
 8006fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff0:	460d      	mov	r5, r1
 8006ff2:	b09d      	sub	sp, #116	; 0x74
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	4698      	mov	r8, r3
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	b118      	cbz	r0, 8007004 <_vfiprintf_r+0x18>
 8006ffc:	6983      	ldr	r3, [r0, #24]
 8006ffe:	b90b      	cbnz	r3, 8007004 <_vfiprintf_r+0x18>
 8007000:	f7ff fdca 	bl	8006b98 <__sinit>
 8007004:	4b89      	ldr	r3, [pc, #548]	; (800722c <_vfiprintf_r+0x240>)
 8007006:	429d      	cmp	r5, r3
 8007008:	d11b      	bne.n	8007042 <_vfiprintf_r+0x56>
 800700a:	6875      	ldr	r5, [r6, #4]
 800700c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800700e:	07d9      	lsls	r1, r3, #31
 8007010:	d405      	bmi.n	800701e <_vfiprintf_r+0x32>
 8007012:	89ab      	ldrh	r3, [r5, #12]
 8007014:	059a      	lsls	r2, r3, #22
 8007016:	d402      	bmi.n	800701e <_vfiprintf_r+0x32>
 8007018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800701a:	f7ff fe6d 	bl	8006cf8 <__retarget_lock_acquire_recursive>
 800701e:	89ab      	ldrh	r3, [r5, #12]
 8007020:	071b      	lsls	r3, r3, #28
 8007022:	d501      	bpl.n	8007028 <_vfiprintf_r+0x3c>
 8007024:	692b      	ldr	r3, [r5, #16]
 8007026:	b9eb      	cbnz	r3, 8007064 <_vfiprintf_r+0x78>
 8007028:	4629      	mov	r1, r5
 800702a:	4630      	mov	r0, r6
 800702c:	f7ff fc0e 	bl	800684c <__swsetup_r>
 8007030:	b1c0      	cbz	r0, 8007064 <_vfiprintf_r+0x78>
 8007032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007034:	07dc      	lsls	r4, r3, #31
 8007036:	d50e      	bpl.n	8007056 <_vfiprintf_r+0x6a>
 8007038:	f04f 30ff 	mov.w	r0, #4294967295
 800703c:	b01d      	add	sp, #116	; 0x74
 800703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007042:	4b7b      	ldr	r3, [pc, #492]	; (8007230 <_vfiprintf_r+0x244>)
 8007044:	429d      	cmp	r5, r3
 8007046:	d101      	bne.n	800704c <_vfiprintf_r+0x60>
 8007048:	68b5      	ldr	r5, [r6, #8]
 800704a:	e7df      	b.n	800700c <_vfiprintf_r+0x20>
 800704c:	4b79      	ldr	r3, [pc, #484]	; (8007234 <_vfiprintf_r+0x248>)
 800704e:	429d      	cmp	r5, r3
 8007050:	bf08      	it	eq
 8007052:	68f5      	ldreq	r5, [r6, #12]
 8007054:	e7da      	b.n	800700c <_vfiprintf_r+0x20>
 8007056:	89ab      	ldrh	r3, [r5, #12]
 8007058:	0598      	lsls	r0, r3, #22
 800705a:	d4ed      	bmi.n	8007038 <_vfiprintf_r+0x4c>
 800705c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800705e:	f7ff fe4c 	bl	8006cfa <__retarget_lock_release_recursive>
 8007062:	e7e9      	b.n	8007038 <_vfiprintf_r+0x4c>
 8007064:	2300      	movs	r3, #0
 8007066:	9309      	str	r3, [sp, #36]	; 0x24
 8007068:	2320      	movs	r3, #32
 800706a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800706e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007072:	2330      	movs	r3, #48	; 0x30
 8007074:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007238 <_vfiprintf_r+0x24c>
 8007078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800707c:	f04f 0901 	mov.w	r9, #1
 8007080:	4623      	mov	r3, r4
 8007082:	469a      	mov	sl, r3
 8007084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007088:	b10a      	cbz	r2, 800708e <_vfiprintf_r+0xa2>
 800708a:	2a25      	cmp	r2, #37	; 0x25
 800708c:	d1f9      	bne.n	8007082 <_vfiprintf_r+0x96>
 800708e:	ebba 0b04 	subs.w	fp, sl, r4
 8007092:	d00b      	beq.n	80070ac <_vfiprintf_r+0xc0>
 8007094:	465b      	mov	r3, fp
 8007096:	4622      	mov	r2, r4
 8007098:	4629      	mov	r1, r5
 800709a:	4630      	mov	r0, r6
 800709c:	f7ff ff93 	bl	8006fc6 <__sfputs_r>
 80070a0:	3001      	adds	r0, #1
 80070a2:	f000 80aa 	beq.w	80071fa <_vfiprintf_r+0x20e>
 80070a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070a8:	445a      	add	r2, fp
 80070aa:	9209      	str	r2, [sp, #36]	; 0x24
 80070ac:	f89a 3000 	ldrb.w	r3, [sl]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 80a2 	beq.w	80071fa <_vfiprintf_r+0x20e>
 80070b6:	2300      	movs	r3, #0
 80070b8:	f04f 32ff 	mov.w	r2, #4294967295
 80070bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070c0:	f10a 0a01 	add.w	sl, sl, #1
 80070c4:	9304      	str	r3, [sp, #16]
 80070c6:	9307      	str	r3, [sp, #28]
 80070c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070cc:	931a      	str	r3, [sp, #104]	; 0x68
 80070ce:	4654      	mov	r4, sl
 80070d0:	2205      	movs	r2, #5
 80070d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d6:	4858      	ldr	r0, [pc, #352]	; (8007238 <_vfiprintf_r+0x24c>)
 80070d8:	f7f9 f87a 	bl	80001d0 <memchr>
 80070dc:	9a04      	ldr	r2, [sp, #16]
 80070de:	b9d8      	cbnz	r0, 8007118 <_vfiprintf_r+0x12c>
 80070e0:	06d1      	lsls	r1, r2, #27
 80070e2:	bf44      	itt	mi
 80070e4:	2320      	movmi	r3, #32
 80070e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ea:	0713      	lsls	r3, r2, #28
 80070ec:	bf44      	itt	mi
 80070ee:	232b      	movmi	r3, #43	; 0x2b
 80070f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070f4:	f89a 3000 	ldrb.w	r3, [sl]
 80070f8:	2b2a      	cmp	r3, #42	; 0x2a
 80070fa:	d015      	beq.n	8007128 <_vfiprintf_r+0x13c>
 80070fc:	9a07      	ldr	r2, [sp, #28]
 80070fe:	4654      	mov	r4, sl
 8007100:	2000      	movs	r0, #0
 8007102:	f04f 0c0a 	mov.w	ip, #10
 8007106:	4621      	mov	r1, r4
 8007108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800710c:	3b30      	subs	r3, #48	; 0x30
 800710e:	2b09      	cmp	r3, #9
 8007110:	d94e      	bls.n	80071b0 <_vfiprintf_r+0x1c4>
 8007112:	b1b0      	cbz	r0, 8007142 <_vfiprintf_r+0x156>
 8007114:	9207      	str	r2, [sp, #28]
 8007116:	e014      	b.n	8007142 <_vfiprintf_r+0x156>
 8007118:	eba0 0308 	sub.w	r3, r0, r8
 800711c:	fa09 f303 	lsl.w	r3, r9, r3
 8007120:	4313      	orrs	r3, r2
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	46a2      	mov	sl, r4
 8007126:	e7d2      	b.n	80070ce <_vfiprintf_r+0xe2>
 8007128:	9b03      	ldr	r3, [sp, #12]
 800712a:	1d19      	adds	r1, r3, #4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	9103      	str	r1, [sp, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	bfbb      	ittet	lt
 8007134:	425b      	neglt	r3, r3
 8007136:	f042 0202 	orrlt.w	r2, r2, #2
 800713a:	9307      	strge	r3, [sp, #28]
 800713c:	9307      	strlt	r3, [sp, #28]
 800713e:	bfb8      	it	lt
 8007140:	9204      	strlt	r2, [sp, #16]
 8007142:	7823      	ldrb	r3, [r4, #0]
 8007144:	2b2e      	cmp	r3, #46	; 0x2e
 8007146:	d10c      	bne.n	8007162 <_vfiprintf_r+0x176>
 8007148:	7863      	ldrb	r3, [r4, #1]
 800714a:	2b2a      	cmp	r3, #42	; 0x2a
 800714c:	d135      	bne.n	80071ba <_vfiprintf_r+0x1ce>
 800714e:	9b03      	ldr	r3, [sp, #12]
 8007150:	1d1a      	adds	r2, r3, #4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	9203      	str	r2, [sp, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	bfb8      	it	lt
 800715a:	f04f 33ff 	movlt.w	r3, #4294967295
 800715e:	3402      	adds	r4, #2
 8007160:	9305      	str	r3, [sp, #20]
 8007162:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007248 <_vfiprintf_r+0x25c>
 8007166:	7821      	ldrb	r1, [r4, #0]
 8007168:	2203      	movs	r2, #3
 800716a:	4650      	mov	r0, sl
 800716c:	f7f9 f830 	bl	80001d0 <memchr>
 8007170:	b140      	cbz	r0, 8007184 <_vfiprintf_r+0x198>
 8007172:	2340      	movs	r3, #64	; 0x40
 8007174:	eba0 000a 	sub.w	r0, r0, sl
 8007178:	fa03 f000 	lsl.w	r0, r3, r0
 800717c:	9b04      	ldr	r3, [sp, #16]
 800717e:	4303      	orrs	r3, r0
 8007180:	3401      	adds	r4, #1
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007188:	482c      	ldr	r0, [pc, #176]	; (800723c <_vfiprintf_r+0x250>)
 800718a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800718e:	2206      	movs	r2, #6
 8007190:	f7f9 f81e 	bl	80001d0 <memchr>
 8007194:	2800      	cmp	r0, #0
 8007196:	d03f      	beq.n	8007218 <_vfiprintf_r+0x22c>
 8007198:	4b29      	ldr	r3, [pc, #164]	; (8007240 <_vfiprintf_r+0x254>)
 800719a:	bb1b      	cbnz	r3, 80071e4 <_vfiprintf_r+0x1f8>
 800719c:	9b03      	ldr	r3, [sp, #12]
 800719e:	3307      	adds	r3, #7
 80071a0:	f023 0307 	bic.w	r3, r3, #7
 80071a4:	3308      	adds	r3, #8
 80071a6:	9303      	str	r3, [sp, #12]
 80071a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071aa:	443b      	add	r3, r7
 80071ac:	9309      	str	r3, [sp, #36]	; 0x24
 80071ae:	e767      	b.n	8007080 <_vfiprintf_r+0x94>
 80071b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80071b4:	460c      	mov	r4, r1
 80071b6:	2001      	movs	r0, #1
 80071b8:	e7a5      	b.n	8007106 <_vfiprintf_r+0x11a>
 80071ba:	2300      	movs	r3, #0
 80071bc:	3401      	adds	r4, #1
 80071be:	9305      	str	r3, [sp, #20]
 80071c0:	4619      	mov	r1, r3
 80071c2:	f04f 0c0a 	mov.w	ip, #10
 80071c6:	4620      	mov	r0, r4
 80071c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071cc:	3a30      	subs	r2, #48	; 0x30
 80071ce:	2a09      	cmp	r2, #9
 80071d0:	d903      	bls.n	80071da <_vfiprintf_r+0x1ee>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0c5      	beq.n	8007162 <_vfiprintf_r+0x176>
 80071d6:	9105      	str	r1, [sp, #20]
 80071d8:	e7c3      	b.n	8007162 <_vfiprintf_r+0x176>
 80071da:	fb0c 2101 	mla	r1, ip, r1, r2
 80071de:	4604      	mov	r4, r0
 80071e0:	2301      	movs	r3, #1
 80071e2:	e7f0      	b.n	80071c6 <_vfiprintf_r+0x1da>
 80071e4:	ab03      	add	r3, sp, #12
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	462a      	mov	r2, r5
 80071ea:	4b16      	ldr	r3, [pc, #88]	; (8007244 <_vfiprintf_r+0x258>)
 80071ec:	a904      	add	r1, sp, #16
 80071ee:	4630      	mov	r0, r6
 80071f0:	f3af 8000 	nop.w
 80071f4:	4607      	mov	r7, r0
 80071f6:	1c78      	adds	r0, r7, #1
 80071f8:	d1d6      	bne.n	80071a8 <_vfiprintf_r+0x1bc>
 80071fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071fc:	07d9      	lsls	r1, r3, #31
 80071fe:	d405      	bmi.n	800720c <_vfiprintf_r+0x220>
 8007200:	89ab      	ldrh	r3, [r5, #12]
 8007202:	059a      	lsls	r2, r3, #22
 8007204:	d402      	bmi.n	800720c <_vfiprintf_r+0x220>
 8007206:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007208:	f7ff fd77 	bl	8006cfa <__retarget_lock_release_recursive>
 800720c:	89ab      	ldrh	r3, [r5, #12]
 800720e:	065b      	lsls	r3, r3, #25
 8007210:	f53f af12 	bmi.w	8007038 <_vfiprintf_r+0x4c>
 8007214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007216:	e711      	b.n	800703c <_vfiprintf_r+0x50>
 8007218:	ab03      	add	r3, sp, #12
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	462a      	mov	r2, r5
 800721e:	4b09      	ldr	r3, [pc, #36]	; (8007244 <_vfiprintf_r+0x258>)
 8007220:	a904      	add	r1, sp, #16
 8007222:	4630      	mov	r0, r6
 8007224:	f000 f880 	bl	8007328 <_printf_i>
 8007228:	e7e4      	b.n	80071f4 <_vfiprintf_r+0x208>
 800722a:	bf00      	nop
 800722c:	08007984 	.word	0x08007984
 8007230:	080079a4 	.word	0x080079a4
 8007234:	08007964 	.word	0x08007964
 8007238:	080079c4 	.word	0x080079c4
 800723c:	080079ce 	.word	0x080079ce
 8007240:	00000000 	.word	0x00000000
 8007244:	08006fc7 	.word	0x08006fc7
 8007248:	080079ca 	.word	0x080079ca

0800724c <_printf_common>:
 800724c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007250:	4616      	mov	r6, r2
 8007252:	4699      	mov	r9, r3
 8007254:	688a      	ldr	r2, [r1, #8]
 8007256:	690b      	ldr	r3, [r1, #16]
 8007258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800725c:	4293      	cmp	r3, r2
 800725e:	bfb8      	it	lt
 8007260:	4613      	movlt	r3, r2
 8007262:	6033      	str	r3, [r6, #0]
 8007264:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007268:	4607      	mov	r7, r0
 800726a:	460c      	mov	r4, r1
 800726c:	b10a      	cbz	r2, 8007272 <_printf_common+0x26>
 800726e:	3301      	adds	r3, #1
 8007270:	6033      	str	r3, [r6, #0]
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	0699      	lsls	r1, r3, #26
 8007276:	bf42      	ittt	mi
 8007278:	6833      	ldrmi	r3, [r6, #0]
 800727a:	3302      	addmi	r3, #2
 800727c:	6033      	strmi	r3, [r6, #0]
 800727e:	6825      	ldr	r5, [r4, #0]
 8007280:	f015 0506 	ands.w	r5, r5, #6
 8007284:	d106      	bne.n	8007294 <_printf_common+0x48>
 8007286:	f104 0a19 	add.w	sl, r4, #25
 800728a:	68e3      	ldr	r3, [r4, #12]
 800728c:	6832      	ldr	r2, [r6, #0]
 800728e:	1a9b      	subs	r3, r3, r2
 8007290:	42ab      	cmp	r3, r5
 8007292:	dc26      	bgt.n	80072e2 <_printf_common+0x96>
 8007294:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007298:	1e13      	subs	r3, r2, #0
 800729a:	6822      	ldr	r2, [r4, #0]
 800729c:	bf18      	it	ne
 800729e:	2301      	movne	r3, #1
 80072a0:	0692      	lsls	r2, r2, #26
 80072a2:	d42b      	bmi.n	80072fc <_printf_common+0xb0>
 80072a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072a8:	4649      	mov	r1, r9
 80072aa:	4638      	mov	r0, r7
 80072ac:	47c0      	blx	r8
 80072ae:	3001      	adds	r0, #1
 80072b0:	d01e      	beq.n	80072f0 <_printf_common+0xa4>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	68e5      	ldr	r5, [r4, #12]
 80072b6:	6832      	ldr	r2, [r6, #0]
 80072b8:	f003 0306 	and.w	r3, r3, #6
 80072bc:	2b04      	cmp	r3, #4
 80072be:	bf08      	it	eq
 80072c0:	1aad      	subeq	r5, r5, r2
 80072c2:	68a3      	ldr	r3, [r4, #8]
 80072c4:	6922      	ldr	r2, [r4, #16]
 80072c6:	bf0c      	ite	eq
 80072c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072cc:	2500      	movne	r5, #0
 80072ce:	4293      	cmp	r3, r2
 80072d0:	bfc4      	itt	gt
 80072d2:	1a9b      	subgt	r3, r3, r2
 80072d4:	18ed      	addgt	r5, r5, r3
 80072d6:	2600      	movs	r6, #0
 80072d8:	341a      	adds	r4, #26
 80072da:	42b5      	cmp	r5, r6
 80072dc:	d11a      	bne.n	8007314 <_printf_common+0xc8>
 80072de:	2000      	movs	r0, #0
 80072e0:	e008      	b.n	80072f4 <_printf_common+0xa8>
 80072e2:	2301      	movs	r3, #1
 80072e4:	4652      	mov	r2, sl
 80072e6:	4649      	mov	r1, r9
 80072e8:	4638      	mov	r0, r7
 80072ea:	47c0      	blx	r8
 80072ec:	3001      	adds	r0, #1
 80072ee:	d103      	bne.n	80072f8 <_printf_common+0xac>
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295
 80072f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f8:	3501      	adds	r5, #1
 80072fa:	e7c6      	b.n	800728a <_printf_common+0x3e>
 80072fc:	18e1      	adds	r1, r4, r3
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	2030      	movs	r0, #48	; 0x30
 8007302:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007306:	4422      	add	r2, r4
 8007308:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800730c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007310:	3302      	adds	r3, #2
 8007312:	e7c7      	b.n	80072a4 <_printf_common+0x58>
 8007314:	2301      	movs	r3, #1
 8007316:	4622      	mov	r2, r4
 8007318:	4649      	mov	r1, r9
 800731a:	4638      	mov	r0, r7
 800731c:	47c0      	blx	r8
 800731e:	3001      	adds	r0, #1
 8007320:	d0e6      	beq.n	80072f0 <_printf_common+0xa4>
 8007322:	3601      	adds	r6, #1
 8007324:	e7d9      	b.n	80072da <_printf_common+0x8e>
	...

08007328 <_printf_i>:
 8007328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800732c:	7e0f      	ldrb	r7, [r1, #24]
 800732e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007330:	2f78      	cmp	r7, #120	; 0x78
 8007332:	4691      	mov	r9, r2
 8007334:	4680      	mov	r8, r0
 8007336:	460c      	mov	r4, r1
 8007338:	469a      	mov	sl, r3
 800733a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800733e:	d807      	bhi.n	8007350 <_printf_i+0x28>
 8007340:	2f62      	cmp	r7, #98	; 0x62
 8007342:	d80a      	bhi.n	800735a <_printf_i+0x32>
 8007344:	2f00      	cmp	r7, #0
 8007346:	f000 80d8 	beq.w	80074fa <_printf_i+0x1d2>
 800734a:	2f58      	cmp	r7, #88	; 0x58
 800734c:	f000 80a3 	beq.w	8007496 <_printf_i+0x16e>
 8007350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007358:	e03a      	b.n	80073d0 <_printf_i+0xa8>
 800735a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800735e:	2b15      	cmp	r3, #21
 8007360:	d8f6      	bhi.n	8007350 <_printf_i+0x28>
 8007362:	a101      	add	r1, pc, #4	; (adr r1, 8007368 <_printf_i+0x40>)
 8007364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007368:	080073c1 	.word	0x080073c1
 800736c:	080073d5 	.word	0x080073d5
 8007370:	08007351 	.word	0x08007351
 8007374:	08007351 	.word	0x08007351
 8007378:	08007351 	.word	0x08007351
 800737c:	08007351 	.word	0x08007351
 8007380:	080073d5 	.word	0x080073d5
 8007384:	08007351 	.word	0x08007351
 8007388:	08007351 	.word	0x08007351
 800738c:	08007351 	.word	0x08007351
 8007390:	08007351 	.word	0x08007351
 8007394:	080074e1 	.word	0x080074e1
 8007398:	08007405 	.word	0x08007405
 800739c:	080074c3 	.word	0x080074c3
 80073a0:	08007351 	.word	0x08007351
 80073a4:	08007351 	.word	0x08007351
 80073a8:	08007503 	.word	0x08007503
 80073ac:	08007351 	.word	0x08007351
 80073b0:	08007405 	.word	0x08007405
 80073b4:	08007351 	.word	0x08007351
 80073b8:	08007351 	.word	0x08007351
 80073bc:	080074cb 	.word	0x080074cb
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	1d1a      	adds	r2, r3, #4
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	602a      	str	r2, [r5, #0]
 80073c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073d0:	2301      	movs	r3, #1
 80073d2:	e0a3      	b.n	800751c <_printf_i+0x1f4>
 80073d4:	6820      	ldr	r0, [r4, #0]
 80073d6:	6829      	ldr	r1, [r5, #0]
 80073d8:	0606      	lsls	r6, r0, #24
 80073da:	f101 0304 	add.w	r3, r1, #4
 80073de:	d50a      	bpl.n	80073f6 <_printf_i+0xce>
 80073e0:	680e      	ldr	r6, [r1, #0]
 80073e2:	602b      	str	r3, [r5, #0]
 80073e4:	2e00      	cmp	r6, #0
 80073e6:	da03      	bge.n	80073f0 <_printf_i+0xc8>
 80073e8:	232d      	movs	r3, #45	; 0x2d
 80073ea:	4276      	negs	r6, r6
 80073ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f0:	485e      	ldr	r0, [pc, #376]	; (800756c <_printf_i+0x244>)
 80073f2:	230a      	movs	r3, #10
 80073f4:	e019      	b.n	800742a <_printf_i+0x102>
 80073f6:	680e      	ldr	r6, [r1, #0]
 80073f8:	602b      	str	r3, [r5, #0]
 80073fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073fe:	bf18      	it	ne
 8007400:	b236      	sxthne	r6, r6
 8007402:	e7ef      	b.n	80073e4 <_printf_i+0xbc>
 8007404:	682b      	ldr	r3, [r5, #0]
 8007406:	6820      	ldr	r0, [r4, #0]
 8007408:	1d19      	adds	r1, r3, #4
 800740a:	6029      	str	r1, [r5, #0]
 800740c:	0601      	lsls	r1, r0, #24
 800740e:	d501      	bpl.n	8007414 <_printf_i+0xec>
 8007410:	681e      	ldr	r6, [r3, #0]
 8007412:	e002      	b.n	800741a <_printf_i+0xf2>
 8007414:	0646      	lsls	r6, r0, #25
 8007416:	d5fb      	bpl.n	8007410 <_printf_i+0xe8>
 8007418:	881e      	ldrh	r6, [r3, #0]
 800741a:	4854      	ldr	r0, [pc, #336]	; (800756c <_printf_i+0x244>)
 800741c:	2f6f      	cmp	r7, #111	; 0x6f
 800741e:	bf0c      	ite	eq
 8007420:	2308      	moveq	r3, #8
 8007422:	230a      	movne	r3, #10
 8007424:	2100      	movs	r1, #0
 8007426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800742a:	6865      	ldr	r5, [r4, #4]
 800742c:	60a5      	str	r5, [r4, #8]
 800742e:	2d00      	cmp	r5, #0
 8007430:	bfa2      	ittt	ge
 8007432:	6821      	ldrge	r1, [r4, #0]
 8007434:	f021 0104 	bicge.w	r1, r1, #4
 8007438:	6021      	strge	r1, [r4, #0]
 800743a:	b90e      	cbnz	r6, 8007440 <_printf_i+0x118>
 800743c:	2d00      	cmp	r5, #0
 800743e:	d04d      	beq.n	80074dc <_printf_i+0x1b4>
 8007440:	4615      	mov	r5, r2
 8007442:	fbb6 f1f3 	udiv	r1, r6, r3
 8007446:	fb03 6711 	mls	r7, r3, r1, r6
 800744a:	5dc7      	ldrb	r7, [r0, r7]
 800744c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007450:	4637      	mov	r7, r6
 8007452:	42bb      	cmp	r3, r7
 8007454:	460e      	mov	r6, r1
 8007456:	d9f4      	bls.n	8007442 <_printf_i+0x11a>
 8007458:	2b08      	cmp	r3, #8
 800745a:	d10b      	bne.n	8007474 <_printf_i+0x14c>
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	07de      	lsls	r6, r3, #31
 8007460:	d508      	bpl.n	8007474 <_printf_i+0x14c>
 8007462:	6923      	ldr	r3, [r4, #16]
 8007464:	6861      	ldr	r1, [r4, #4]
 8007466:	4299      	cmp	r1, r3
 8007468:	bfde      	ittt	le
 800746a:	2330      	movle	r3, #48	; 0x30
 800746c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007470:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007474:	1b52      	subs	r2, r2, r5
 8007476:	6122      	str	r2, [r4, #16]
 8007478:	f8cd a000 	str.w	sl, [sp]
 800747c:	464b      	mov	r3, r9
 800747e:	aa03      	add	r2, sp, #12
 8007480:	4621      	mov	r1, r4
 8007482:	4640      	mov	r0, r8
 8007484:	f7ff fee2 	bl	800724c <_printf_common>
 8007488:	3001      	adds	r0, #1
 800748a:	d14c      	bne.n	8007526 <_printf_i+0x1fe>
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	b004      	add	sp, #16
 8007492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007496:	4835      	ldr	r0, [pc, #212]	; (800756c <_printf_i+0x244>)
 8007498:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800749c:	6829      	ldr	r1, [r5, #0]
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80074a4:	6029      	str	r1, [r5, #0]
 80074a6:	061d      	lsls	r5, r3, #24
 80074a8:	d514      	bpl.n	80074d4 <_printf_i+0x1ac>
 80074aa:	07df      	lsls	r7, r3, #31
 80074ac:	bf44      	itt	mi
 80074ae:	f043 0320 	orrmi.w	r3, r3, #32
 80074b2:	6023      	strmi	r3, [r4, #0]
 80074b4:	b91e      	cbnz	r6, 80074be <_printf_i+0x196>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	f023 0320 	bic.w	r3, r3, #32
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	2310      	movs	r3, #16
 80074c0:	e7b0      	b.n	8007424 <_printf_i+0xfc>
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	f043 0320 	orr.w	r3, r3, #32
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	2378      	movs	r3, #120	; 0x78
 80074cc:	4828      	ldr	r0, [pc, #160]	; (8007570 <_printf_i+0x248>)
 80074ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074d2:	e7e3      	b.n	800749c <_printf_i+0x174>
 80074d4:	0659      	lsls	r1, r3, #25
 80074d6:	bf48      	it	mi
 80074d8:	b2b6      	uxthmi	r6, r6
 80074da:	e7e6      	b.n	80074aa <_printf_i+0x182>
 80074dc:	4615      	mov	r5, r2
 80074de:	e7bb      	b.n	8007458 <_printf_i+0x130>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	6826      	ldr	r6, [r4, #0]
 80074e4:	6961      	ldr	r1, [r4, #20]
 80074e6:	1d18      	adds	r0, r3, #4
 80074e8:	6028      	str	r0, [r5, #0]
 80074ea:	0635      	lsls	r5, r6, #24
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	d501      	bpl.n	80074f4 <_printf_i+0x1cc>
 80074f0:	6019      	str	r1, [r3, #0]
 80074f2:	e002      	b.n	80074fa <_printf_i+0x1d2>
 80074f4:	0670      	lsls	r0, r6, #25
 80074f6:	d5fb      	bpl.n	80074f0 <_printf_i+0x1c8>
 80074f8:	8019      	strh	r1, [r3, #0]
 80074fa:	2300      	movs	r3, #0
 80074fc:	6123      	str	r3, [r4, #16]
 80074fe:	4615      	mov	r5, r2
 8007500:	e7ba      	b.n	8007478 <_printf_i+0x150>
 8007502:	682b      	ldr	r3, [r5, #0]
 8007504:	1d1a      	adds	r2, r3, #4
 8007506:	602a      	str	r2, [r5, #0]
 8007508:	681d      	ldr	r5, [r3, #0]
 800750a:	6862      	ldr	r2, [r4, #4]
 800750c:	2100      	movs	r1, #0
 800750e:	4628      	mov	r0, r5
 8007510:	f7f8 fe5e 	bl	80001d0 <memchr>
 8007514:	b108      	cbz	r0, 800751a <_printf_i+0x1f2>
 8007516:	1b40      	subs	r0, r0, r5
 8007518:	6060      	str	r0, [r4, #4]
 800751a:	6863      	ldr	r3, [r4, #4]
 800751c:	6123      	str	r3, [r4, #16]
 800751e:	2300      	movs	r3, #0
 8007520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007524:	e7a8      	b.n	8007478 <_printf_i+0x150>
 8007526:	6923      	ldr	r3, [r4, #16]
 8007528:	462a      	mov	r2, r5
 800752a:	4649      	mov	r1, r9
 800752c:	4640      	mov	r0, r8
 800752e:	47d0      	blx	sl
 8007530:	3001      	adds	r0, #1
 8007532:	d0ab      	beq.n	800748c <_printf_i+0x164>
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	079b      	lsls	r3, r3, #30
 8007538:	d413      	bmi.n	8007562 <_printf_i+0x23a>
 800753a:	68e0      	ldr	r0, [r4, #12]
 800753c:	9b03      	ldr	r3, [sp, #12]
 800753e:	4298      	cmp	r0, r3
 8007540:	bfb8      	it	lt
 8007542:	4618      	movlt	r0, r3
 8007544:	e7a4      	b.n	8007490 <_printf_i+0x168>
 8007546:	2301      	movs	r3, #1
 8007548:	4632      	mov	r2, r6
 800754a:	4649      	mov	r1, r9
 800754c:	4640      	mov	r0, r8
 800754e:	47d0      	blx	sl
 8007550:	3001      	adds	r0, #1
 8007552:	d09b      	beq.n	800748c <_printf_i+0x164>
 8007554:	3501      	adds	r5, #1
 8007556:	68e3      	ldr	r3, [r4, #12]
 8007558:	9903      	ldr	r1, [sp, #12]
 800755a:	1a5b      	subs	r3, r3, r1
 800755c:	42ab      	cmp	r3, r5
 800755e:	dcf2      	bgt.n	8007546 <_printf_i+0x21e>
 8007560:	e7eb      	b.n	800753a <_printf_i+0x212>
 8007562:	2500      	movs	r5, #0
 8007564:	f104 0619 	add.w	r6, r4, #25
 8007568:	e7f5      	b.n	8007556 <_printf_i+0x22e>
 800756a:	bf00      	nop
 800756c:	080079d5 	.word	0x080079d5
 8007570:	080079e6 	.word	0x080079e6

08007574 <_sbrk_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4d06      	ldr	r5, [pc, #24]	; (8007590 <_sbrk_r+0x1c>)
 8007578:	2300      	movs	r3, #0
 800757a:	4604      	mov	r4, r0
 800757c:	4608      	mov	r0, r1
 800757e:	602b      	str	r3, [r5, #0]
 8007580:	f7fa fe9c 	bl	80022bc <_sbrk>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	d102      	bne.n	800758e <_sbrk_r+0x1a>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	b103      	cbz	r3, 800758e <_sbrk_r+0x1a>
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	2000164c 	.word	0x2000164c

08007594 <__sread>:
 8007594:	b510      	push	{r4, lr}
 8007596:	460c      	mov	r4, r1
 8007598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759c:	f000 f8a8 	bl	80076f0 <_read_r>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	bfab      	itete	ge
 80075a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075a6:	89a3      	ldrhlt	r3, [r4, #12]
 80075a8:	181b      	addge	r3, r3, r0
 80075aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075ae:	bfac      	ite	ge
 80075b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80075b2:	81a3      	strhlt	r3, [r4, #12]
 80075b4:	bd10      	pop	{r4, pc}

080075b6 <__swrite>:
 80075b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ba:	461f      	mov	r7, r3
 80075bc:	898b      	ldrh	r3, [r1, #12]
 80075be:	05db      	lsls	r3, r3, #23
 80075c0:	4605      	mov	r5, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	4616      	mov	r6, r2
 80075c6:	d505      	bpl.n	80075d4 <__swrite+0x1e>
 80075c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075cc:	2302      	movs	r3, #2
 80075ce:	2200      	movs	r2, #0
 80075d0:	f000 f870 	bl	80076b4 <_lseek_r>
 80075d4:	89a3      	ldrh	r3, [r4, #12]
 80075d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075de:	81a3      	strh	r3, [r4, #12]
 80075e0:	4632      	mov	r2, r6
 80075e2:	463b      	mov	r3, r7
 80075e4:	4628      	mov	r0, r5
 80075e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ea:	f000 b817 	b.w	800761c <_write_r>

080075ee <__sseek>:
 80075ee:	b510      	push	{r4, lr}
 80075f0:	460c      	mov	r4, r1
 80075f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f6:	f000 f85d 	bl	80076b4 <_lseek_r>
 80075fa:	1c43      	adds	r3, r0, #1
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	bf15      	itete	ne
 8007600:	6560      	strne	r0, [r4, #84]	; 0x54
 8007602:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007606:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800760a:	81a3      	strheq	r3, [r4, #12]
 800760c:	bf18      	it	ne
 800760e:	81a3      	strhne	r3, [r4, #12]
 8007610:	bd10      	pop	{r4, pc}

08007612 <__sclose>:
 8007612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007616:	f000 b81b 	b.w	8007650 <_close_r>
	...

0800761c <_write_r>:
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	4d07      	ldr	r5, [pc, #28]	; (800763c <_write_r+0x20>)
 8007620:	4604      	mov	r4, r0
 8007622:	4608      	mov	r0, r1
 8007624:	4611      	mov	r1, r2
 8007626:	2200      	movs	r2, #0
 8007628:	602a      	str	r2, [r5, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	f7f8 ff8a 	bl	8000544 <_write>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d102      	bne.n	800763a <_write_r+0x1e>
 8007634:	682b      	ldr	r3, [r5, #0]
 8007636:	b103      	cbz	r3, 800763a <_write_r+0x1e>
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	2000164c 	.word	0x2000164c

08007640 <abort>:
 8007640:	b508      	push	{r3, lr}
 8007642:	2006      	movs	r0, #6
 8007644:	f000 f88e 	bl	8007764 <raise>
 8007648:	2001      	movs	r0, #1
 800764a:	f7fa fddc 	bl	8002206 <_exit>
	...

08007650 <_close_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d06      	ldr	r5, [pc, #24]	; (800766c <_close_r+0x1c>)
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	602b      	str	r3, [r5, #0]
 800765c:	f7fa fdfa 	bl	8002254 <_close>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_close_r+0x1a>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b103      	cbz	r3, 800766a <_close_r+0x1a>
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	2000164c 	.word	0x2000164c

08007670 <_fstat_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4d07      	ldr	r5, [pc, #28]	; (8007690 <_fstat_r+0x20>)
 8007674:	2300      	movs	r3, #0
 8007676:	4604      	mov	r4, r0
 8007678:	4608      	mov	r0, r1
 800767a:	4611      	mov	r1, r2
 800767c:	602b      	str	r3, [r5, #0]
 800767e:	f7fa fdf5 	bl	800226c <_fstat>
 8007682:	1c43      	adds	r3, r0, #1
 8007684:	d102      	bne.n	800768c <_fstat_r+0x1c>
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	b103      	cbz	r3, 800768c <_fstat_r+0x1c>
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	bd38      	pop	{r3, r4, r5, pc}
 800768e:	bf00      	nop
 8007690:	2000164c 	.word	0x2000164c

08007694 <_isatty_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4d06      	ldr	r5, [pc, #24]	; (80076b0 <_isatty_r+0x1c>)
 8007698:	2300      	movs	r3, #0
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	602b      	str	r3, [r5, #0]
 80076a0:	f7fa fdf4 	bl	800228c <_isatty>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_isatty_r+0x1a>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_isatty_r+0x1a>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	2000164c 	.word	0x2000164c

080076b4 <_lseek_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4d07      	ldr	r5, [pc, #28]	; (80076d4 <_lseek_r+0x20>)
 80076b8:	4604      	mov	r4, r0
 80076ba:	4608      	mov	r0, r1
 80076bc:	4611      	mov	r1, r2
 80076be:	2200      	movs	r2, #0
 80076c0:	602a      	str	r2, [r5, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	f7fa fded 	bl	80022a2 <_lseek>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_lseek_r+0x1e>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_lseek_r+0x1e>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	2000164c 	.word	0x2000164c

080076d8 <__malloc_lock>:
 80076d8:	4801      	ldr	r0, [pc, #4]	; (80076e0 <__malloc_lock+0x8>)
 80076da:	f7ff bb0d 	b.w	8006cf8 <__retarget_lock_acquire_recursive>
 80076de:	bf00      	nop
 80076e0:	20001640 	.word	0x20001640

080076e4 <__malloc_unlock>:
 80076e4:	4801      	ldr	r0, [pc, #4]	; (80076ec <__malloc_unlock+0x8>)
 80076e6:	f7ff bb08 	b.w	8006cfa <__retarget_lock_release_recursive>
 80076ea:	bf00      	nop
 80076ec:	20001640 	.word	0x20001640

080076f0 <_read_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4d07      	ldr	r5, [pc, #28]	; (8007710 <_read_r+0x20>)
 80076f4:	4604      	mov	r4, r0
 80076f6:	4608      	mov	r0, r1
 80076f8:	4611      	mov	r1, r2
 80076fa:	2200      	movs	r2, #0
 80076fc:	602a      	str	r2, [r5, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	f7fa fd8b 	bl	800221a <_read>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d102      	bne.n	800770e <_read_r+0x1e>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	b103      	cbz	r3, 800770e <_read_r+0x1e>
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	2000164c 	.word	0x2000164c

08007714 <_raise_r>:
 8007714:	291f      	cmp	r1, #31
 8007716:	b538      	push	{r3, r4, r5, lr}
 8007718:	4604      	mov	r4, r0
 800771a:	460d      	mov	r5, r1
 800771c:	d904      	bls.n	8007728 <_raise_r+0x14>
 800771e:	2316      	movs	r3, #22
 8007720:	6003      	str	r3, [r0, #0]
 8007722:	f04f 30ff 	mov.w	r0, #4294967295
 8007726:	bd38      	pop	{r3, r4, r5, pc}
 8007728:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800772a:	b112      	cbz	r2, 8007732 <_raise_r+0x1e>
 800772c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007730:	b94b      	cbnz	r3, 8007746 <_raise_r+0x32>
 8007732:	4620      	mov	r0, r4
 8007734:	f000 f830 	bl	8007798 <_getpid_r>
 8007738:	462a      	mov	r2, r5
 800773a:	4601      	mov	r1, r0
 800773c:	4620      	mov	r0, r4
 800773e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007742:	f000 b817 	b.w	8007774 <_kill_r>
 8007746:	2b01      	cmp	r3, #1
 8007748:	d00a      	beq.n	8007760 <_raise_r+0x4c>
 800774a:	1c59      	adds	r1, r3, #1
 800774c:	d103      	bne.n	8007756 <_raise_r+0x42>
 800774e:	2316      	movs	r3, #22
 8007750:	6003      	str	r3, [r0, #0]
 8007752:	2001      	movs	r0, #1
 8007754:	e7e7      	b.n	8007726 <_raise_r+0x12>
 8007756:	2400      	movs	r4, #0
 8007758:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800775c:	4628      	mov	r0, r5
 800775e:	4798      	blx	r3
 8007760:	2000      	movs	r0, #0
 8007762:	e7e0      	b.n	8007726 <_raise_r+0x12>

08007764 <raise>:
 8007764:	4b02      	ldr	r3, [pc, #8]	; (8007770 <raise+0xc>)
 8007766:	4601      	mov	r1, r0
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	f7ff bfd3 	b.w	8007714 <_raise_r>
 800776e:	bf00      	nop
 8007770:	2000002c 	.word	0x2000002c

08007774 <_kill_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d07      	ldr	r5, [pc, #28]	; (8007794 <_kill_r+0x20>)
 8007778:	2300      	movs	r3, #0
 800777a:	4604      	mov	r4, r0
 800777c:	4608      	mov	r0, r1
 800777e:	4611      	mov	r1, r2
 8007780:	602b      	str	r3, [r5, #0]
 8007782:	f7fa fd30 	bl	80021e6 <_kill>
 8007786:	1c43      	adds	r3, r0, #1
 8007788:	d102      	bne.n	8007790 <_kill_r+0x1c>
 800778a:	682b      	ldr	r3, [r5, #0]
 800778c:	b103      	cbz	r3, 8007790 <_kill_r+0x1c>
 800778e:	6023      	str	r3, [r4, #0]
 8007790:	bd38      	pop	{r3, r4, r5, pc}
 8007792:	bf00      	nop
 8007794:	2000164c 	.word	0x2000164c

08007798 <_getpid_r>:
 8007798:	f7fa bd1d 	b.w	80021d6 <_getpid>

0800779c <_init>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	bf00      	nop
 80077a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a2:	bc08      	pop	{r3}
 80077a4:	469e      	mov	lr, r3
 80077a6:	4770      	bx	lr

080077a8 <_fini>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	bf00      	nop
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr
