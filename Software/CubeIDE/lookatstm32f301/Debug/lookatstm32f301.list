
lookatstm32f301.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004524  08004524  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004524  08004524  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004524  08004524  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800452c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000070  0800459c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800459c  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e510  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dcb  00000000  00000000  0002e5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00030380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  00030f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016681  00000000  00000000  00031ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe1d  00000000  00000000  00048149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083c47  00000000  00000000  00057f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbbad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003980  00000000  00000000  000dbc00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800442c 	.word	0x0800442c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800442c 	.word	0x0800442c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_write>:
/* USER CODE BEGIN 0 */
#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d003      	beq.n	800028a <_write+0x1a>
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	2b02      	cmp	r3, #2
 8000286:	d015      	beq.n	80002b4 <_write+0x44>
 8000288:	e029      	b.n	80002de <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	b29a      	uxth	r2, r3
 800028e:	f04f 33ff 	mov.w	r3, #4294967295
 8000292:	68b9      	ldr	r1, [r7, #8]
 8000294:	481a      	ldr	r0, [pc, #104]	; (8000300 <_write+0x90>)
 8000296:	f002 fd32 	bl	8002cfe <HAL_UART_Transmit>
 800029a:	4603      	mov	r3, r0
 800029c:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 800029e:	7dfb      	ldrb	r3, [r7, #23]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d024      	beq.n	80002ee <_write+0x7e>
			errno = EIO;
 80002a4:	f003 f902 	bl	80034ac <__errno>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2205      	movs	r2, #5
 80002ac:	601a      	str	r2, [r3, #0]
			return -1;
 80002ae:	f04f 33ff 	mov.w	r3, #4294967295
 80002b2:	e020      	b.n	80002f6 <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	b29a      	uxth	r2, r3
 80002b8:	f04f 33ff 	mov.w	r3, #4294967295
 80002bc:	68b9      	ldr	r1, [r7, #8]
 80002be:	4810      	ldr	r0, [pc, #64]	; (8000300 <_write+0x90>)
 80002c0:	f002 fd1d 	bl	8002cfe <HAL_UART_Transmit>
 80002c4:	4603      	mov	r3, r0
 80002c6:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 80002c8:	7dfb      	ldrb	r3, [r7, #23]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d011      	beq.n	80002f2 <_write+0x82>
			errno = EIO;
 80002ce:	f003 f8ed 	bl	80034ac <__errno>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2205      	movs	r2, #5
 80002d6:	601a      	str	r2, [r3, #0]
			return -1;
 80002d8:	f04f 33ff 	mov.w	r3, #4294967295
 80002dc:	e00b      	b.n	80002f6 <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 80002de:	f003 f8e5 	bl	80034ac <__errno>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2209      	movs	r2, #9
 80002e6:	601a      	str	r2, [r3, #0]
        return -1;
 80002e8:	f04f 33ff 	mov.w	r3, #4294967295
 80002ec:	e003      	b.n	80002f6 <_write+0x86>
        break;
 80002ee:	bf00      	nop
 80002f0:	e000      	b.n	80002f4 <_write+0x84>
        break;
 80002f2:	bf00      	nop
    }
    return len;
 80002f4:	687b      	ldr	r3, [r7, #4]
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	3718      	adds	r7, #24
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	200001cc 	.word	0x200001cc

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000308:	f000 fbe8 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030c:	f000 f814 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000310:	f000 f940 	bl	8000594 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000314:	f000 f860 	bl	80003d8 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000318:	f000 f89e 	bl	8000458 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800031c:	f000 f8da 	bl	80004d4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000320:	f000 f908 	bl	8000534 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000324:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000328:	f000 fc3e 	bl	8000ba8 <HAL_Delay>
	  printf("boop i'm here\n\r");
 800032c:	4801      	ldr	r0, [pc, #4]	; (8000334 <main+0x30>)
 800032e:	f003 f8ef 	bl	8003510 <iprintf>
  {
 8000332:	e7f7      	b.n	8000324 <main+0x20>
 8000334:	08004444 	.word	0x08004444

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b09c      	sub	sp, #112	; 0x70
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000342:	2228      	movs	r2, #40	; 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f003 f8da 	bl	8003500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
 800035a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2230      	movs	r2, #48	; 0x30
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f003 f8cc 	bl	8003500 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000368:	2302      	movs	r3, #2
 800036a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036c:	2301      	movs	r3, #1
 800036e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000370:	2310      	movs	r3, #16
 8000372:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000374:	2300      	movs	r3, #0
 8000376:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800037c:	4618      	mov	r0, r3
 800037e:	f000 ffcd 	bl	800131c <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000388:	f000 f992 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	230f      	movs	r3, #15
 800038e:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000390:	2300      	movs	r3, #0
 8000392:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fff6 	bl	8002398 <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003b2:	f000 f97d 	bl	80006b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80003b6:	2340      	movs	r3, #64	; 0x40
 80003b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4618      	mov	r0, r3
 80003c2:	f002 fa1f 	bl	8002804 <HAL_RCCEx_PeriphCLKConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80003cc:	f000 f970 	bl	80006b0 <Error_Handler>
  }
}
 80003d0:	bf00      	nop
 80003d2:	3770      	adds	r7, #112	; 0x70
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003dc:	4b1b      	ldr	r3, [pc, #108]	; (800044c <MX_I2C2_Init+0x74>)
 80003de:	4a1c      	ldr	r2, [pc, #112]	; (8000450 <MX_I2C2_Init+0x78>)
 80003e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <MX_I2C2_Init+0x74>)
 80003e4:	4a1b      	ldr	r2, [pc, #108]	; (8000454 <MX_I2C2_Init+0x7c>)
 80003e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003e8:	4b18      	ldr	r3, [pc, #96]	; (800044c <MX_I2C2_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <MX_I2C2_Init+0x74>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f4:	4b15      	ldr	r3, [pc, #84]	; (800044c <MX_I2C2_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003fa:	4b14      	ldr	r3, [pc, #80]	; (800044c <MX_I2C2_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000400:	4b12      	ldr	r3, [pc, #72]	; (800044c <MX_I2C2_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000406:	4b11      	ldr	r3, [pc, #68]	; (800044c <MX_I2C2_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <MX_I2C2_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000412:	480e      	ldr	r0, [pc, #56]	; (800044c <MX_I2C2_Init+0x74>)
 8000414:	f000 fe5c 	bl	80010d0 <HAL_I2C_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800041e:	f000 f947 	bl	80006b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000422:	2100      	movs	r1, #0
 8000424:	4809      	ldr	r0, [pc, #36]	; (800044c <MX_I2C2_Init+0x74>)
 8000426:	f000 fee2 	bl	80011ee <HAL_I2CEx_ConfigAnalogFilter>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000430:	f000 f93e 	bl	80006b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000434:	2100      	movs	r1, #0
 8000436:	4805      	ldr	r0, [pc, #20]	; (800044c <MX_I2C2_Init+0x74>)
 8000438:	f000 ff24 	bl	8001284 <HAL_I2CEx_ConfigDigitalFilter>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000442:	f000 f935 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	2000008c 	.word	0x2000008c
 8000450:	40005800 	.word	0x40005800
 8000454:	2000090e 	.word	0x2000090e

08000458 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_SPI2_Init+0x74>)
 800045e:	4a1c      	ldr	r2, [pc, #112]	; (80004d0 <MX_SPI2_Init+0x78>)
 8000460:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <MX_SPI2_Init+0x74>)
 8000464:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000468:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800046a:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_SPI2_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <MX_SPI2_Init+0x74>)
 8000472:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000476:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <MX_SPI2_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800047e:	4b13      	ldr	r3, [pc, #76]	; (80004cc <MX_SPI2_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_SPI2_Init+0x74>)
 8000486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800048a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_SPI2_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_SPI2_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_SPI2_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_SPI2_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_SPI2_Init+0x74>)
 80004a6:	2207      	movs	r2, #7
 80004a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_SPI2_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_SPI2_Init+0x74>)
 80004b2:	2208      	movs	r2, #8
 80004b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_SPI2_Init+0x74>)
 80004b8:	f002 fb28 	bl	8002b0c <HAL_SPI_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80004c2:	f000 f8f5 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200000e0 	.word	0x200000e0
 80004d0:	40003800 	.word	0x40003800

080004d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_USART2_UART_Init+0x58>)
 80004da:	4a15      	ldr	r2, [pc, #84]	; (8000530 <MX_USART2_UART_Init+0x5c>)
 80004dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <MX_USART2_UART_Init+0x58>)
 80004e0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_USART2_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_USART2_UART_Init+0x58>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <MX_USART2_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_USART2_UART_Init+0x58>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <MX_USART2_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_USART2_UART_Init+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <MX_USART2_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_USART2_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_USART2_UART_Init+0x58>)
 8000518:	f002 fba3 	bl	8002c62 <HAL_UART_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000522:	f000 f8c5 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000144 	.word	0x20000144
 8000530:	40004400 	.word	0x40004400

08000534 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <MX_USART3_UART_Init+0x58>)
 800053a:	4a15      	ldr	r2, [pc, #84]	; (8000590 <MX_USART3_UART_Init+0x5c>)
 800053c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <MX_USART3_UART_Init+0x58>)
 8000540:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000544:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_USART3_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <MX_USART3_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_USART3_UART_Init+0x58>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <MX_USART3_UART_Init+0x58>)
 800055a:	220c      	movs	r2, #12
 800055c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <MX_USART3_UART_Init+0x58>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_USART3_UART_Init+0x58>)
 8000566:	2200      	movs	r2, #0
 8000568:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <MX_USART3_UART_Init+0x58>)
 800056c:	2200      	movs	r2, #0
 800056e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <MX_USART3_UART_Init+0x58>)
 8000572:	2200      	movs	r2, #0
 8000574:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000576:	4805      	ldr	r0, [pc, #20]	; (800058c <MX_USART3_UART_Init+0x58>)
 8000578:	f002 fb73 	bl	8002c62 <HAL_UART_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000582:	f000 f895 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200001cc 	.word	0x200001cc
 8000590:	40004800 	.word	0x40004800

08000594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4b3e      	ldr	r3, [pc, #248]	; (80006a4 <MX_GPIO_Init+0x110>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a3d      	ldr	r2, [pc, #244]	; (80006a4 <MX_GPIO_Init+0x110>)
 80005b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b3b      	ldr	r3, [pc, #236]	; (80006a4 <MX_GPIO_Init+0x110>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c2:	4b38      	ldr	r3, [pc, #224]	; (80006a4 <MX_GPIO_Init+0x110>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a37      	ldr	r2, [pc, #220]	; (80006a4 <MX_GPIO_Init+0x110>)
 80005c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b35      	ldr	r3, [pc, #212]	; (80006a4 <MX_GPIO_Init+0x110>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <MX_GPIO_Init+0x110>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a31      	ldr	r2, [pc, #196]	; (80006a4 <MX_GPIO_Init+0x110>)
 80005e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b2f      	ldr	r3, [pc, #188]	; (80006a4 <MX_GPIO_Init+0x110>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <MX_GPIO_Init+0x110>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a2b      	ldr	r2, [pc, #172]	; (80006a4 <MX_GPIO_Init+0x110>)
 80005f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <MX_GPIO_Init+0x110>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_T_CS_GPIO_Port, SPI2_T_CS_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000610:	4825      	ldr	r0, [pc, #148]	; (80006a8 <MX_GPIO_Init+0x114>)
 8000612:	f000 fd45 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI2_CS_Pin|SPI2_RESET_Pin|SPI2_DC_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800061c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000620:	f000 fd3e 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000624:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000630:	2301      	movs	r3, #1
 8000632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	481c      	ldr	r0, [pc, #112]	; (80006ac <MX_GPIO_Init+0x118>)
 800063c:	f000 fbbe 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000640:	2301      	movs	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000644:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800064a:	2301      	movs	r3, #1
 800064c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f000 fbb0 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_T_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_T_CS_Pin;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_T_CS_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <MX_GPIO_Init+0x114>)
 8000676:	f000 fba1 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin SPI2_RESET_Pin SPI2_DC_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI2_RESET_Pin|SPI2_DC_Pin;
 800067a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000696:	f000 fb91 	bl	8000dbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800069a:	bf00      	nop
 800069c:	3728      	adds	r7, #40	; 0x28
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000
 80006a8:	48000400 	.word	0x48000400
 80006ac:	48000800 	.word	0x48000800

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>
	...

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_MspInit+0x44>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <HAL_MspInit+0x44>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6193      	str	r3, [r2, #24]
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <HAL_MspInit+0x44>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_MspInit+0x44>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x44>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	61d3      	str	r3, [r2, #28]
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x44>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a17      	ldr	r2, [pc, #92]	; (8000780 <HAL_I2C_MspInit+0x7c>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d127      	bne.n	8000776 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <HAL_I2C_MspInit+0x80>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a16      	ldr	r2, [pc, #88]	; (8000784 <HAL_I2C_MspInit+0x80>)
 800072c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <HAL_I2C_MspInit+0x80>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800073e:	2303      	movs	r3, #3
 8000740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000742:	2312      	movs	r3, #18
 8000744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800074e:	2304      	movs	r3, #4
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <HAL_I2C_MspInit+0x84>)
 800075a:	f000 fb2f 	bl	8000dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_I2C_MspInit+0x80>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_I2C_MspInit+0x80>)
 8000764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_I2C_MspInit+0x80>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	; 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40005800 	.word	0x40005800
 8000784:	40021000 	.word	0x40021000
 8000788:	48001400 	.word	0x48001400

0800078c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a17      	ldr	r2, [pc, #92]	; (8000808 <HAL_SPI_MspInit+0x7c>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d128      	bne.n	8000800 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b8:	61d3      	str	r3, [r2, #28]
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a10      	ldr	r2, [pc, #64]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d0:	6153      	str	r3, [r2, #20]
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007de:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007f0:	2305      	movs	r3, #5
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <HAL_SPI_MspInit+0x84>)
 80007fc:	f000 fade 	bl	8000dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40003800 	.word	0x40003800
 800080c:	40021000 	.word	0x40021000
 8000810:	48000400 	.word	0x48000400

08000814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a2f      	ldr	r2, [pc, #188]	; (80008f0 <HAL_UART_MspInit+0xdc>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d129      	bne.n	800088a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000836:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <HAL_UART_MspInit+0xe0>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a2e      	ldr	r2, [pc, #184]	; (80008f4 <HAL_UART_MspInit+0xe0>)
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <HAL_UART_MspInit+0xe0>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <HAL_UART_MspInit+0xe0>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <HAL_UART_MspInit+0xe0>)
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	6153      	str	r3, [r2, #20]
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <HAL_UART_MspInit+0xe0>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000866:	230c      	movs	r3, #12
 8000868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000876:	2307      	movs	r3, #7
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f000 fa9a 	bl	8000dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000888:	e02d      	b.n	80008e6 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a1a      	ldr	r2, [pc, #104]	; (80008f8 <HAL_UART_MspInit+0xe4>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d128      	bne.n	80008e6 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0xe0>)
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <HAL_UART_MspInit+0xe0>)
 800089a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800089e:	61d3      	str	r3, [r2, #28]
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_UART_MspInit+0xe0>)
 80008a2:	69db      	ldr	r3, [r3, #28]
 80008a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_UART_MspInit+0xe0>)
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <HAL_UART_MspInit+0xe0>)
 80008b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008b6:	6153      	str	r3, [r2, #20]
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_UART_MspInit+0xe0>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008d6:	2307      	movs	r3, #7
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4806      	ldr	r0, [pc, #24]	; (80008fc <HAL_UART_MspInit+0xe8>)
 80008e2:	f000 fa6b 	bl	8000dbc <HAL_GPIO_Init>
}
 80008e6:	bf00      	nop
 80008e8:	3730      	adds	r7, #48	; 0x30
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40004800 	.word	0x40004800
 80008fc:	48000400 	.word	0x48000400

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f90c 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	e00a      	b.n	800097c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000966:	f3af 8000 	nop.w
 800096a:	4601      	mov	r1, r0
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	60ba      	str	r2, [r7, #8]
 8000972:	b2ca      	uxtb	r2, r1
 8000974:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf0      	blt.n	8000966 <_read+0x12>
	}

return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_close>:
	}
	return len;
}

int _close(int file)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
	return -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b6:	605a      	str	r2, [r3, #4]
	return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_isatty>:

int _isatty(int file)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
	return 1;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	return 0;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f002 fd40 	bl	80034ac <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20004000 	.word	0x20004000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	20000254 	.word	0x20000254
 8000a60:	20000270 	.word	0x20000270

08000a64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a8c:	f7ff ffea 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a92:	490d      	ldr	r1, [pc, #52]	; (8000ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <LoopForever+0xe>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa8:	4c0a      	ldr	r4, [pc, #40]	; (8000ad4 <LoopForever+0x16>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f002 fcff 	bl	80034b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aba:	f7ff fc23 	bl	8000304 <main>

08000abe <LoopForever>:

LoopForever:
    b LoopForever
 8000abe:	e7fe      	b.n	8000abe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ac0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000acc:	0800452c 	.word	0x0800452c
  ldr r2, =_sbss
 8000ad0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ad4:	2000026c 	.word	0x2000026c

08000ad8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC1_IRQHandler>
	...

08000adc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_Init+0x28>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_Init+0x28>)
 8000ae6:	f043 0310 	orr.w	r3, r3, #16
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f931 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af2:	200f      	movs	r0, #15
 8000af4:	f000 f808 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af8:	f7ff fde0 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40022000 	.word	0x40022000

08000b08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_InitTick+0x54>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x58>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f93b 	bl	8000da2 <HAL_SYSTICK_Config>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00e      	b.n	8000b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	d80a      	bhi.n	8000b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f000 f911 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_InitTick+0x5c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000258 	.word	0x20000258

08000b90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000258 	.word	0x20000258

08000ba8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff ffee 	bl	8000b90 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_Delay+0x44>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bce:	bf00      	nop
 8000bd0:	f7ff ffde 	bl	8000b90 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff8e 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff47 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff5c 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff8e 	bl	8000ca8 <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5d 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffb0 	bl	8000d10 <SysTick_Config>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dca:	e14e      	b.n	800106a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f000 8140 	beq.w	8001064 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d005      	beq.n	8000dfc <HAL_GPIO_Init+0x40>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d130      	bne.n	8000e5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e32:	2201      	movs	r2, #1
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	091b      	lsrs	r3, r3, #4
 8000e48:	f003 0201 	and.w	r2, r3, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d017      	beq.n	8000e9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d123      	bne.n	8000eee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3208      	adds	r2, #8
 8000eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	691a      	ldr	r2, [r3, #16]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	08da      	lsrs	r2, r3, #3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3208      	adds	r2, #8
 8000ee8:	6939      	ldr	r1, [r7, #16]
 8000eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0203 	and.w	r2, r3, #3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 809a 	beq.w	8001064 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f30:	4b55      	ldr	r3, [pc, #340]	; (8001088 <HAL_GPIO_Init+0x2cc>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a54      	ldr	r2, [pc, #336]	; (8001088 <HAL_GPIO_Init+0x2cc>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b52      	ldr	r3, [pc, #328]	; (8001088 <HAL_GPIO_Init+0x2cc>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f48:	4a50      	ldr	r2, [pc, #320]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f72:	d013      	beq.n	8000f9c <HAL_GPIO_Init+0x1e0>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a46      	ldr	r2, [pc, #280]	; (8001090 <HAL_GPIO_Init+0x2d4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d00d      	beq.n	8000f98 <HAL_GPIO_Init+0x1dc>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a45      	ldr	r2, [pc, #276]	; (8001094 <HAL_GPIO_Init+0x2d8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d007      	beq.n	8000f94 <HAL_GPIO_Init+0x1d8>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a44      	ldr	r2, [pc, #272]	; (8001098 <HAL_GPIO_Init+0x2dc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d101      	bne.n	8000f90 <HAL_GPIO_Init+0x1d4>
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e006      	b.n	8000f9e <HAL_GPIO_Init+0x1e2>
 8000f90:	2305      	movs	r3, #5
 8000f92:	e004      	b.n	8000f9e <HAL_GPIO_Init+0x1e2>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e002      	b.n	8000f9e <HAL_GPIO_Init+0x1e2>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <HAL_GPIO_Init+0x1e2>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	f002 0203 	and.w	r2, r2, #3
 8000fa4:	0092      	lsls	r2, r2, #2
 8000fa6:	4093      	lsls	r3, r2
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fae:	4937      	ldr	r1, [pc, #220]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbc:	4b37      	ldr	r3, [pc, #220]	; (800109c <HAL_GPIO_Init+0x2e0>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fe0:	4a2e      	ldr	r2, [pc, #184]	; (800109c <HAL_GPIO_Init+0x2e0>)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_GPIO_Init+0x2e0>)
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800100a:	4a24      	ldr	r2, [pc, #144]	; (800109c <HAL_GPIO_Init+0x2e0>)
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <HAL_GPIO_Init+0x2e0>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001034:	4a19      	ldr	r2, [pc, #100]	; (800109c <HAL_GPIO_Init+0x2e0>)
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_GPIO_Init+0x2e0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <HAL_GPIO_Init+0x2e0>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	3301      	adds	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	fa22 f303 	lsr.w	r3, r2, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	f47f aea9 	bne.w	8000dcc <HAL_GPIO_Init+0x10>
  }
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	371c      	adds	r7, #28
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000
 8001090:	48000400 	.word	0x48000400
 8001094:	48000800 	.word	0x48000800
 8001098:	48000c00 	.word	0x48000c00
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e081      	b.n	80011e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d106      	bne.n	80010fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fb04 	bl	8000704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2224      	movs	r2, #36	; 0x24
 8001100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0201 	bic.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001120:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001130:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d107      	bne.n	800114a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	e006      	b.n	8001158 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001156:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d104      	bne.n	800116a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001168:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800118c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691a      	ldr	r2, [r3, #16]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69d9      	ldr	r1, [r3, #28]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1a      	ldr	r2, [r3, #32]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f042 0201 	orr.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2220      	movs	r2, #32
 80011d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b20      	cmp	r3, #32
 8001202:	d138      	bne.n	8001276 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800120a:	2b01      	cmp	r3, #1
 800120c:	d101      	bne.n	8001212 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800120e:	2302      	movs	r3, #2
 8001210:	e032      	b.n	8001278 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2224      	movs	r2, #36	; 0x24
 800121e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0201 	bic.w	r2, r2, #1
 8001230:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001240:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6819      	ldr	r1, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0201 	orr.w	r2, r2, #1
 8001260:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2220      	movs	r2, #32
 8001266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001276:	2302      	movs	r3, #2
  }
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b20      	cmp	r3, #32
 8001298:	d139      	bne.n	800130e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e033      	b.n	8001310 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2224      	movs	r2, #36	; 0x24
 80012b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0201 	bic.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 0201 	orr.w	r2, r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2220      	movs	r2, #32
 80012fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800130e:	2302      	movs	r3, #2
  }
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001322:	af00      	add	r7, sp, #0
 8001324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001328:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800132c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800132e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	f001 b823 	b.w	8002388 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001346:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 817d 	beq.w	8001652 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001358:	4bbc      	ldr	r3, [pc, #752]	; (800164c <HAL_RCC_OscConfig+0x330>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b04      	cmp	r3, #4
 8001362:	d00c      	beq.n	800137e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001364:	4bb9      	ldr	r3, [pc, #740]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b08      	cmp	r3, #8
 800136e:	d15c      	bne.n	800142a <HAL_RCC_OscConfig+0x10e>
 8001370:	4bb6      	ldr	r3, [pc, #728]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800137c:	d155      	bne.n	800142a <HAL_RCC_OscConfig+0x10e>
 800137e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001382:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800138a:	fa93 f3a3 	rbit	r3, r3
 800138e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001392:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001396:	fab3 f383 	clz	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	095b      	lsrs	r3, r3, #5
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d102      	bne.n	80013b0 <HAL_RCC_OscConfig+0x94>
 80013aa:	4ba8      	ldr	r3, [pc, #672]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	e015      	b.n	80013dc <HAL_RCC_OscConfig+0xc0>
 80013b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013bc:	fa93 f3a3 	rbit	r3, r3
 80013c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80013d8:	4b9c      	ldr	r3, [pc, #624]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013e0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80013e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013e8:	fa92 f2a2 	rbit	r2, r2
 80013ec:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80013f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80013f4:	fab2 f282 	clz	r2, r2
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	f042 0220 	orr.w	r2, r2, #32
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	f002 021f 	and.w	r2, r2, #31
 8001404:	2101      	movs	r1, #1
 8001406:	fa01 f202 	lsl.w	r2, r1, r2
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 811f 	beq.w	8001650 <HAL_RCC_OscConfig+0x334>
 8001412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f040 8116 	bne.w	8001650 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	f000 bfaf 	b.w	8002388 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143a:	d106      	bne.n	800144a <HAL_RCC_OscConfig+0x12e>
 800143c:	4b83      	ldr	r3, [pc, #524]	; (800164c <HAL_RCC_OscConfig+0x330>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a82      	ldr	r2, [pc, #520]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	e036      	b.n	80014b8 <HAL_RCC_OscConfig+0x19c>
 800144a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10c      	bne.n	8001474 <HAL_RCC_OscConfig+0x158>
 800145a:	4b7c      	ldr	r3, [pc, #496]	; (800164c <HAL_RCC_OscConfig+0x330>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a7b      	ldr	r2, [pc, #492]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b79      	ldr	r3, [pc, #484]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a78      	ldr	r2, [pc, #480]	; (800164c <HAL_RCC_OscConfig+0x330>)
 800146c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e021      	b.n	80014b8 <HAL_RCC_OscConfig+0x19c>
 8001474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001478:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x184>
 8001486:	4b71      	ldr	r3, [pc, #452]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a70      	ldr	r2, [pc, #448]	; (800164c <HAL_RCC_OscConfig+0x330>)
 800148c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b6e      	ldr	r3, [pc, #440]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a6d      	ldr	r2, [pc, #436]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0x19c>
 80014a0:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a69      	ldr	r2, [pc, #420]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b67      	ldr	r3, [pc, #412]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a66      	ldr	r2, [pc, #408]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014b8:	4b64      	ldr	r3, [pc, #400]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	f023 020f 	bic.w	r2, r3, #15
 80014c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	495f      	ldr	r1, [pc, #380]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d059      	beq.n	8001596 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fb55 	bl	8000b90 <HAL_GetTick>
 80014e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fb50 	bl	8000b90 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b64      	cmp	r3, #100	; 0x64
 80014fa:	d902      	bls.n	8001502 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	f000 bf43 	b.w	8002388 <HAL_RCC_OscConfig+0x106c>
 8001502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001506:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001516:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	fab3 f383 	clz	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	095b      	lsrs	r3, r3, #5
 8001522:	b2db      	uxtb	r3, r3
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d102      	bne.n	8001534 <HAL_RCC_OscConfig+0x218>
 800152e:	4b47      	ldr	r3, [pc, #284]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	e015      	b.n	8001560 <HAL_RCC_OscConfig+0x244>
 8001534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001538:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800154c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001550:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001554:	fa93 f3a3 	rbit	r3, r3
 8001558:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800155c:	4b3b      	ldr	r3, [pc, #236]	; (800164c <HAL_RCC_OscConfig+0x330>)
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001564:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001568:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800156c:	fa92 f2a2 	rbit	r2, r2
 8001570:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001574:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001578:	fab2 f282 	clz	r2, r2
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	f042 0220 	orr.w	r2, r2, #32
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	f002 021f 	and.w	r2, r2, #31
 8001588:	2101      	movs	r1, #1
 800158a:	fa01 f202 	lsl.w	r2, r1, r2
 800158e:	4013      	ands	r3, r2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0ab      	beq.n	80014ec <HAL_RCC_OscConfig+0x1d0>
 8001594:	e05d      	b.n	8001652 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fafb 	bl	8000b90 <HAL_GetTick>
 800159a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	e00a      	b.n	80015b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff faf6 	bl	8000b90 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b64      	cmp	r3, #100	; 0x64
 80015ae:	d902      	bls.n	80015b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	f000 bee9 	b.w	8002388 <HAL_RCC_OscConfig+0x106c>
 80015b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80015ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	095b      	lsrs	r3, r3, #5
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d102      	bne.n	80015e8 <HAL_RCC_OscConfig+0x2cc>
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	e015      	b.n	8001614 <HAL_RCC_OscConfig+0x2f8>
 80015e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80015f4:	fa93 f3a3 	rbit	r3, r3
 80015f8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001600:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001604:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_RCC_OscConfig+0x330>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001618:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800161c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001620:	fa92 f2a2 	rbit	r2, r2
 8001624:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001628:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800162c:	fab2 f282 	clz	r2, r2
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	f042 0220 	orr.w	r2, r2, #32
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	f002 021f 	and.w	r2, r2, #31
 800163c:	2101      	movs	r1, #1
 800163e:	fa01 f202 	lsl.w	r2, r1, r2
 8001642:	4013      	ands	r3, r2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ab      	bne.n	80015a0 <HAL_RCC_OscConfig+0x284>
 8001648:	e003      	b.n	8001652 <HAL_RCC_OscConfig+0x336>
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001656:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 817d 	beq.w	8001962 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001668:	4ba6      	ldr	r3, [pc, #664]	; (8001904 <HAL_RCC_OscConfig+0x5e8>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00b      	beq.n	800168c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001674:	4ba3      	ldr	r3, [pc, #652]	; (8001904 <HAL_RCC_OscConfig+0x5e8>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	2b08      	cmp	r3, #8
 800167e:	d172      	bne.n	8001766 <HAL_RCC_OscConfig+0x44a>
 8001680:	4ba0      	ldr	r3, [pc, #640]	; (8001904 <HAL_RCC_OscConfig+0x5e8>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d16c      	bne.n	8001766 <HAL_RCC_OscConfig+0x44a>
 800168c:	2302      	movs	r3, #2
 800168e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001696:	fa93 f3a3 	rbit	r3, r3
 800169a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800169e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	fab3 f383 	clz	r3, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	095b      	lsrs	r3, r3, #5
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d102      	bne.n	80016bc <HAL_RCC_OscConfig+0x3a0>
 80016b6:	4b93      	ldr	r3, [pc, #588]	; (8001904 <HAL_RCC_OscConfig+0x5e8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	e013      	b.n	80016e4 <HAL_RCC_OscConfig+0x3c8>
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80016c6:	fa93 f3a3 	rbit	r3, r3
 80016ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016ce:	2302      	movs	r3, #2
 80016d0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016e0:	4b88      	ldr	r3, [pc, #544]	; (8001904 <HAL_RCC_OscConfig+0x5e8>)
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	2202      	movs	r2, #2
 80016e6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80016ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016ee:	fa92 f2a2 	rbit	r2, r2
 80016f2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80016f6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80016fa:	fab2 f282 	clz	r2, r2
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	f042 0220 	orr.w	r2, r2, #32
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	f002 021f 	and.w	r2, r2, #31
 800170a:	2101      	movs	r1, #1
 800170c:	fa01 f202 	lsl.w	r2, r1, r2
 8001710:	4013      	ands	r3, r2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00a      	beq.n	800172c <HAL_RCC_OscConfig+0x410>
 8001716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d002      	beq.n	800172c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	f000 be2e 	b.w	8002388 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b75      	ldr	r3, [pc, #468]	; (8001904 <HAL_RCC_OscConfig+0x5e8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001738:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	21f8      	movs	r1, #248	; 0xf8
 8001742:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800174a:	fa91 f1a1 	rbit	r1, r1
 800174e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001752:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001756:	fab1 f181 	clz	r1, r1
 800175a:	b2c9      	uxtb	r1, r1
 800175c:	408b      	lsls	r3, r1
 800175e:	4969      	ldr	r1, [pc, #420]	; (8001904 <HAL_RCC_OscConfig+0x5e8>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001764:	e0fd      	b.n	8001962 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8088 	beq.w	8001888 <HAL_RCC_OscConfig+0x56c>
 8001778:	2301      	movs	r3, #1
 800177a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800178a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001798:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	461a      	mov	r2, r3
 80017a0:	2301      	movs	r3, #1
 80017a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff f9f4 	bl	8000b90 <HAL_GetTick>
 80017a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ae:	f7ff f9ef 	bl	8000b90 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d902      	bls.n	80017c4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	f000 bde2 	b.w	8002388 <HAL_RCC_OscConfig+0x106c>
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80017d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	095b      	lsrs	r3, r3, #5
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d102      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4d8>
 80017ee:	4b45      	ldr	r3, [pc, #276]	; (8001904 <HAL_RCC_OscConfig+0x5e8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	e013      	b.n	800181c <HAL_RCC_OscConfig+0x500>
 80017f4:	2302      	movs	r3, #2
 80017f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800180c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001818:	4b3a      	ldr	r3, [pc, #232]	; (8001904 <HAL_RCC_OscConfig+0x5e8>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	2202      	movs	r2, #2
 800181e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001822:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001826:	fa92 f2a2 	rbit	r2, r2
 800182a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800182e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001832:	fab2 f282 	clz	r2, r2
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	f042 0220 	orr.w	r2, r2, #32
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	f002 021f 	and.w	r2, r2, #31
 8001842:	2101      	movs	r1, #1
 8001844:	fa01 f202 	lsl.w	r2, r1, r2
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0af      	beq.n	80017ae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <HAL_RCC_OscConfig+0x5e8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	21f8      	movs	r1, #248	; 0xf8
 8001864:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800186c:	fa91 f1a1 	rbit	r1, r1
 8001870:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001874:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001878:	fab1 f181 	clz	r1, r1
 800187c:	b2c9      	uxtb	r1, r1
 800187e:	408b      	lsls	r3, r1
 8001880:	4920      	ldr	r1, [pc, #128]	; (8001904 <HAL_RCC_OscConfig+0x5e8>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
 8001886:	e06c      	b.n	8001962 <HAL_RCC_OscConfig+0x646>
 8001888:	2301      	movs	r3, #1
 800188a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800189a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	461a      	mov	r2, r3
 80018b0:	2300      	movs	r3, #0
 80018b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff f96c 	bl	8000b90 <HAL_GetTick>
 80018b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018be:	f7ff f967 	bl	8000b90 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d902      	bls.n	80018d4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	f000 bd5a 	b.w	8002388 <HAL_RCC_OscConfig+0x106c>
 80018d4:	2302      	movs	r3, #2
 80018d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80018e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	fab3 f383 	clz	r3, r3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	095b      	lsrs	r3, r3, #5
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d104      	bne.n	8001908 <HAL_RCC_OscConfig+0x5ec>
 80018fe:	4b01      	ldr	r3, [pc, #4]	; (8001904 <HAL_RCC_OscConfig+0x5e8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	e015      	b.n	8001930 <HAL_RCC_OscConfig+0x614>
 8001904:	40021000 	.word	0x40021000
 8001908:	2302      	movs	r3, #2
 800190a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800191a:	2302      	movs	r3, #2
 800191c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001920:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001924:	fa93 f3a3 	rbit	r3, r3
 8001928:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800192c:	4bc8      	ldr	r3, [pc, #800]	; (8001c50 <HAL_RCC_OscConfig+0x934>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	2202      	movs	r2, #2
 8001932:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001936:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800193a:	fa92 f2a2 	rbit	r2, r2
 800193e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001942:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001946:	fab2 f282 	clz	r2, r2
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	f042 0220 	orr.w	r2, r2, #32
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	f002 021f 	and.w	r2, r2, #31
 8001956:	2101      	movs	r1, #1
 8001958:	fa01 f202 	lsl.w	r2, r1, r2
 800195c:	4013      	ands	r3, r2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1ad      	bne.n	80018be <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 8110 	beq.w	8001b98 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d079      	beq.n	8001a7c <HAL_RCC_OscConfig+0x760>
 8001988:	2301      	movs	r3, #1
 800198a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800199a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	4bab      	ldr	r3, [pc, #684]	; (8001c54 <HAL_RCC_OscConfig+0x938>)
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	461a      	mov	r2, r3
 80019ae:	2301      	movs	r3, #1
 80019b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b2:	f7ff f8ed 	bl	8000b90 <HAL_GetTick>
 80019b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019bc:	f7ff f8e8 	bl	8000b90 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d902      	bls.n	80019d2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	f000 bcdb 	b.w	8002388 <HAL_RCC_OscConfig+0x106c>
 80019d2:	2302      	movs	r3, #2
 80019d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019ec:	2202      	movs	r2, #2
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a10:	2202      	movs	r2, #2
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	fa93 f2a3 	rbit	r2, r3
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2c:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x934>)
 8001a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a38:	2102      	movs	r1, #2
 8001a3a:	6019      	str	r1, [r3, #0]
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	fa93 f1a3 	rbit	r1, r3
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a52:	6019      	str	r1, [r3, #0]
  return result;
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	2101      	movs	r1, #1
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0a0      	beq.n	80019bc <HAL_RCC_OscConfig+0x6a0>
 8001a7a:	e08d      	b.n	8001b98 <HAL_RCC_OscConfig+0x87c>
 8001a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	fa93 f2a3 	rbit	r2, r3
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a9e:	601a      	str	r2, [r3, #0]
  return result;
 8001aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001aa8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_OscConfig+0x938>)
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2300      	movs	r3, #0
 8001abc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7ff f867 	bl	8000b90 <HAL_GetTick>
 8001ac2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7ff f862 	bl	8000b90 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d902      	bls.n	8001ade <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	f000 bc55 	b.w	8002388 <HAL_RCC_OscConfig+0x106c>
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	fa93 f2a3 	rbit	r2, r3
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f2a3 	rbit	r2, r3
 8001b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b2e:	2202      	movs	r2, #2
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f2a3 	rbit	r2, r3
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4a:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <HAL_RCC_OscConfig+0x934>)
 8001b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b56:	2102      	movs	r1, #2
 8001b58:	6019      	str	r1, [r3, #0]
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	fa93 f1a3 	rbit	r1, r3
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b70:	6019      	str	r1, [r3, #0]
  return result;
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d197      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 81a1 	beq.w	8001ef0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb4:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_RCC_OscConfig+0x934>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d116      	bne.n	8001bee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_RCC_OscConfig+0x934>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	4a22      	ldr	r2, [pc, #136]	; (8001c50 <HAL_RCC_OscConfig+0x934>)
 8001bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bca:	61d3      	str	r3, [r2, #28]
 8001bcc:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_RCC_OscConfig+0x934>)
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001be6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_RCC_OscConfig+0x93c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11a      	bne.n	8001c30 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_RCC_OscConfig+0x93c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	; (8001c58 <HAL_RCC_OscConfig+0x93c>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c06:	f7fe ffc3 	bl	8000b90 <HAL_GetTick>
 8001c0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0e:	e009      	b.n	8001c24 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c10:	f7fe ffbe 	bl	8000b90 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b64      	cmp	r3, #100	; 0x64
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e3b1      	b.n	8002388 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_RCC_OscConfig+0x93c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0ef      	beq.n	8001c10 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d10d      	bne.n	8001c5c <HAL_RCC_OscConfig+0x940>
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_RCC_OscConfig+0x934>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4a02      	ldr	r2, [pc, #8]	; (8001c50 <HAL_RCC_OscConfig+0x934>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6213      	str	r3, [r2, #32]
 8001c4c:	e03c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x9ac>
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	10908120 	.word	0x10908120
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10c      	bne.n	8001c86 <HAL_RCC_OscConfig+0x96a>
 8001c6c:	4bc1      	ldr	r3, [pc, #772]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4ac0      	ldr	r2, [pc, #768]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6213      	str	r3, [r2, #32]
 8001c78:	4bbe      	ldr	r3, [pc, #760]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4abd      	ldr	r2, [pc, #756]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001c7e:	f023 0304 	bic.w	r3, r3, #4
 8001c82:	6213      	str	r3, [r2, #32]
 8001c84:	e020      	b.n	8001cc8 <HAL_RCC_OscConfig+0x9ac>
 8001c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x994>
 8001c96:	4bb7      	ldr	r3, [pc, #732]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4ab6      	ldr	r2, [pc, #728]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6213      	str	r3, [r2, #32]
 8001ca2:	4bb4      	ldr	r3, [pc, #720]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4ab3      	ldr	r2, [pc, #716]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	e00b      	b.n	8001cc8 <HAL_RCC_OscConfig+0x9ac>
 8001cb0:	4bb0      	ldr	r3, [pc, #704]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4aaf      	ldr	r2, [pc, #700]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001cb6:	f023 0301 	bic.w	r3, r3, #1
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	4bad      	ldr	r3, [pc, #692]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4aac      	ldr	r2, [pc, #688]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001cc2:	f023 0304 	bic.w	r3, r3, #4
 8001cc6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ccc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 8081 	beq.w	8001ddc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cda:	f7fe ff59 	bl	8000b90 <HAL_GetTick>
 8001cde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7fe ff54 	bl	8000b90 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e345      	b.n	8002388 <HAL_RCC_OscConfig+0x106c>
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d04:	2202      	movs	r2, #2
 8001d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	fa93 f2a3 	rbit	r2, r3
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d28:	2202      	movs	r2, #2
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	fa93 f2a3 	rbit	r2, r3
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d42:	601a      	str	r2, [r3, #0]
  return result;
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d4c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	095b      	lsrs	r3, r3, #5
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d102      	bne.n	8001d68 <HAL_RCC_OscConfig+0xa4c>
 8001d62:	4b84      	ldr	r3, [pc, #528]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	e013      	b.n	8001d90 <HAL_RCC_OscConfig+0xa74>
 8001d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d70:	2202      	movs	r2, #2
 8001d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d78:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	fa93 f2a3 	rbit	r2, r3
 8001d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d86:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	4b79      	ldr	r3, [pc, #484]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d94:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001d98:	2102      	movs	r1, #2
 8001d9a:	6011      	str	r1, [r2, #0]
 8001d9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001da0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	fa92 f1a2 	rbit	r1, r2
 8001daa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001db2:	6011      	str	r1, [r2, #0]
  return result;
 8001db4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	fab2 f282 	clz	r2, r2
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	f002 021f 	and.w	r2, r2, #31
 8001dce:	2101      	movs	r1, #1
 8001dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d084      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x9c8>
 8001dda:	e07f      	b.n	8001edc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ddc:	f7fe fed8 	bl	8000b90 <HAL_GetTick>
 8001de0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de4:	e00b      	b.n	8001dfe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7fe fed3 	bl	8000b90 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e2c4      	b.n	8002388 <HAL_RCC_OscConfig+0x106c>
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e06:	2202      	movs	r2, #2
 8001e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fa93 f2a3 	rbit	r2, r3
 8001e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e40:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e44:	601a      	str	r2, [r3, #0]
  return result;
 8001e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e50:	fab3 f383 	clz	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f043 0302 	orr.w	r3, r3, #2
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d102      	bne.n	8001e6a <HAL_RCC_OscConfig+0xb4e>
 8001e64:	4b43      	ldr	r3, [pc, #268]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	e013      	b.n	8001e92 <HAL_RCC_OscConfig+0xb76>
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e72:	2202      	movs	r2, #2
 8001e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e88:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e96:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	6011      	str	r1, [r2, #0]
 8001e9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ea2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	fa92 f1a2 	rbit	r1, r2
 8001eac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eb0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001eb4:	6011      	str	r1, [r2, #0]
  return result;
 8001eb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eba:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	fab2 f282 	clz	r2, r2
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f002 021f 	and.w	r2, r2, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d184      	bne.n	8001de6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001edc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee4:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	4a22      	ldr	r2, [pc, #136]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 8242 	beq.w	8002386 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f02:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <HAL_RCC_OscConfig+0xc58>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	f000 8213 	beq.w	8002336 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	f040 8162 	bne.w	80021e6 <HAL_RCC_OscConfig+0xeca>
 8001f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f26:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f34:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	fa93 f2a3 	rbit	r2, r3
 8001f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f42:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f46:	601a      	str	r2, [r3, #0]
  return result;
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f50:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	461a      	mov	r2, r3
 8001f64:	2300      	movs	r3, #0
 8001f66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe fe12 	bl	8000b90 <HAL_GetTick>
 8001f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f70:	e00c      	b.n	8001f8c <HAL_RCC_OscConfig+0xc70>
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f78:	f7fe fe0a 	bl	8000b90 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e1fd      	b.n	8002388 <HAL_RCC_OscConfig+0x106c>
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	fa93 f2a3 	rbit	r2, r3
 8001fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fb0:	601a      	str	r2, [r3, #0]
  return result;
 8001fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_OscConfig+0xcba>
 8001fd0:	4bb0      	ldr	r3, [pc, #704]	; (8002294 <HAL_RCC_OscConfig+0xf78>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	e027      	b.n	8002026 <HAL_RCC_OscConfig+0xd0a>
 8001fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fda:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001fde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fe2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	fa93 f2a3 	rbit	r2, r3
 8001ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002000:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	fa93 f2a3 	rbit	r2, r3
 8002018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	4b9c      	ldr	r3, [pc, #624]	; (8002294 <HAL_RCC_OscConfig+0xf78>)
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800202a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800202e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002032:	6011      	str	r1, [r2, #0]
 8002034:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002038:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	fa92 f1a2 	rbit	r1, r2
 8002042:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002046:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800204a:	6011      	str	r1, [r2, #0]
  return result;
 800204c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002050:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f042 0220 	orr.w	r2, r2, #32
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f002 021f 	and.w	r2, r2, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d182      	bne.n	8001f78 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002072:	4b88      	ldr	r3, [pc, #544]	; (8002294 <HAL_RCC_OscConfig+0xf78>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	430b      	orrs	r3, r1
 8002094:	497f      	ldr	r1, [pc, #508]	; (8002294 <HAL_RCC_OscConfig+0xf78>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
 800209a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	fa93 f2a3 	rbit	r2, r3
 80020b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020be:	601a      	str	r2, [r3, #0]
  return result;
 80020c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	461a      	mov	r2, r3
 80020dc:	2301      	movs	r3, #1
 80020de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe fd56 	bl	8000b90 <HAL_GetTick>
 80020e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e8:	e009      	b.n	80020fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe fd51 	bl	8000b90 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e144      	b.n	8002388 <HAL_RCC_OscConfig+0x106c>
 80020fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002102:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002106:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800210a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002110:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	fa93 f2a3 	rbit	r2, r3
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002122:	601a      	str	r2, [r3, #0]
  return result;
 8002124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002128:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800212c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d102      	bne.n	8002148 <HAL_RCC_OscConfig+0xe2c>
 8002142:	4b54      	ldr	r3, [pc, #336]	; (8002294 <HAL_RCC_OscConfig+0xf78>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	e027      	b.n	8002198 <HAL_RCC_OscConfig+0xe7c>
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002150:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	fa93 f2a3 	rbit	r2, r3
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002172:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002176:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	fa93 f2a3 	rbit	r2, r3
 800218a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <HAL_RCC_OscConfig+0xf78>)
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800219c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80021a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021a4:	6011      	str	r1, [r2, #0]
 80021a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021aa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	fa92 f1a2 	rbit	r1, r2
 80021b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021b8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021bc:	6011      	str	r1, [r2, #0]
  return result;
 80021be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	fab2 f282 	clz	r2, r2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	f042 0220 	orr.w	r2, r2, #32
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f002 021f 	and.w	r2, r2, #31
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f202 	lsl.w	r2, r1, r2
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d082      	beq.n	80020ea <HAL_RCC_OscConfig+0xdce>
 80021e4:	e0cf      	b.n	8002386 <HAL_RCC_OscConfig+0x106a>
 80021e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	fa93 f2a3 	rbit	r2, r3
 8002202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002206:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800220a:	601a      	str	r2, [r3, #0]
  return result;
 800220c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002210:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002214:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002220:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	461a      	mov	r2, r3
 8002228:	2300      	movs	r3, #0
 800222a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7fe fcb0 	bl	8000b90 <HAL_GetTick>
 8002230:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002234:	e009      	b.n	800224a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002236:	f7fe fcab 	bl	8000b90 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e09e      	b.n	8002388 <HAL_RCC_OscConfig+0x106c>
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002252:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa93 f2a3 	rbit	r2, r3
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800226e:	601a      	str	r2, [r3, #0]
  return result;
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002278:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d104      	bne.n	8002298 <HAL_RCC_OscConfig+0xf7c>
 800228e:	4b01      	ldr	r3, [pc, #4]	; (8002294 <HAL_RCC_OscConfig+0xf78>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	e029      	b.n	80022e8 <HAL_RCC_OscConfig+0xfcc>
 8002294:	40021000 	.word	0x40021000
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022aa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	fa93 f2a3 	rbit	r2, r3
 80022da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <HAL_RCC_OscConfig+0x1078>)
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ec:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80022f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022f4:	6011      	str	r1, [r2, #0]
 80022f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022fa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	fa92 f1a2 	rbit	r1, r2
 8002304:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002308:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800230c:	6011      	str	r1, [r2, #0]
  return result;
 800230e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002312:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	fab2 f282 	clz	r2, r2
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	f042 0220 	orr.w	r2, r2, #32
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f002 021f 	and.w	r2, r2, #31
 8002328:	2101      	movs	r1, #1
 800232a:	fa01 f202 	lsl.w	r2, r1, r2
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d180      	bne.n	8002236 <HAL_RCC_OscConfig+0xf1a>
 8002334:	e027      	b.n	8002386 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e01e      	b.n	8002388 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_RCC_OscConfig+0x1078>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002352:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002356:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800235a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	429a      	cmp	r2, r3
 8002368:	d10b      	bne.n	8002382 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800236a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800236e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b09e      	sub	sp, #120	; 0x78
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e162      	b.n	8002676 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b0:	4b90      	ldr	r3, [pc, #576]	; (80025f4 <HAL_RCC_ClockConfig+0x25c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d910      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b8d      	ldr	r3, [pc, #564]	; (80025f4 <HAL_RCC_ClockConfig+0x25c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 0207 	bic.w	r2, r3, #7
 80023c6:	498b      	ldr	r1, [pc, #556]	; (80025f4 <HAL_RCC_ClockConfig+0x25c>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b89      	ldr	r3, [pc, #548]	; (80025f4 <HAL_RCC_ClockConfig+0x25c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e14a      	b.n	8002676 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ec:	4b82      	ldr	r3, [pc, #520]	; (80025f8 <HAL_RCC_ClockConfig+0x260>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	497f      	ldr	r1, [pc, #508]	; (80025f8 <HAL_RCC_ClockConfig+0x260>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 80dc 	beq.w	80025c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d13c      	bne.n	800248e <HAL_RCC_ClockConfig+0xf6>
 8002414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002418:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d102      	bne.n	800243e <HAL_RCC_ClockConfig+0xa6>
 8002438:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <HAL_RCC_ClockConfig+0x260>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	e00f      	b.n	800245e <HAL_RCC_ClockConfig+0xc6>
 800243e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002442:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	667b      	str	r3, [r7, #100]	; 0x64
 800244c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002450:	663b      	str	r3, [r7, #96]	; 0x60
 8002452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	65fb      	str	r3, [r7, #92]	; 0x5c
 800245a:	4b67      	ldr	r3, [pc, #412]	; (80025f8 <HAL_RCC_ClockConfig+0x260>)
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002462:	65ba      	str	r2, [r7, #88]	; 0x58
 8002464:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002466:	fa92 f2a2 	rbit	r2, r2
 800246a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800246c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800246e:	fab2 f282 	clz	r2, r2
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	f042 0220 	orr.w	r2, r2, #32
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	f002 021f 	and.w	r2, r2, #31
 800247e:	2101      	movs	r1, #1
 8002480:	fa01 f202 	lsl.w	r2, r1, r2
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d17b      	bne.n	8002582 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e0f3      	b.n	8002676 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d13c      	bne.n	8002510 <HAL_RCC_ClockConfig+0x178>
 8002496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800249a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d102      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x128>
 80024ba:	4b4f      	ldr	r3, [pc, #316]	; (80025f8 <HAL_RCC_ClockConfig+0x260>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	e00f      	b.n	80024e0 <HAL_RCC_ClockConfig+0x148>
 80024c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	647b      	str	r3, [r7, #68]	; 0x44
 80024ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d2:	643b      	str	r3, [r7, #64]	; 0x40
 80024d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024dc:	4b46      	ldr	r3, [pc, #280]	; (80025f8 <HAL_RCC_ClockConfig+0x260>)
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80024e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024e8:	fa92 f2a2 	rbit	r2, r2
 80024ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80024ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024f0:	fab2 f282 	clz	r2, r2
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f042 0220 	orr.w	r2, r2, #32
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	f002 021f 	and.w	r2, r2, #31
 8002500:	2101      	movs	r1, #1
 8002502:	fa01 f202 	lsl.w	r2, r1, r2
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d13a      	bne.n	8002582 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0b2      	b.n	8002676 <HAL_RCC_ClockConfig+0x2de>
 8002510:	2302      	movs	r3, #2
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d102      	bne.n	8002538 <HAL_RCC_ClockConfig+0x1a0>
 8002532:	4b31      	ldr	r3, [pc, #196]	; (80025f8 <HAL_RCC_ClockConfig+0x260>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	e00d      	b.n	8002554 <HAL_RCC_ClockConfig+0x1bc>
 8002538:	2302      	movs	r3, #2
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
 8002544:	2302      	movs	r3, #2
 8002546:	623b      	str	r3, [r7, #32]
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <HAL_RCC_ClockConfig+0x260>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	2202      	movs	r2, #2
 8002556:	61ba      	str	r2, [r7, #24]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	fa92 f2a2 	rbit	r2, r2
 800255e:	617a      	str	r2, [r7, #20]
  return result;
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	fab2 f282 	clz	r2, r2
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f042 0220 	orr.w	r2, r2, #32
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f002 021f 	and.w	r2, r2, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f202 	lsl.w	r2, r1, r2
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e079      	b.n	8002676 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_RCC_ClockConfig+0x260>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f023 0203 	bic.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	491a      	ldr	r1, [pc, #104]	; (80025f8 <HAL_RCC_ClockConfig+0x260>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002594:	f7fe fafc 	bl	8000b90 <HAL_GetTick>
 8002598:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259c:	f7fe faf8 	bl	8000b90 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e061      	b.n	8002676 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_RCC_ClockConfig+0x260>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 020c 	and.w	r2, r3, #12
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d1eb      	bne.n	800259c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_ClockConfig+0x25c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d214      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_RCC_ClockConfig+0x25c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 0207 	bic.w	r2, r3, #7
 80025da:	4906      	ldr	r1, [pc, #24]	; (80025f4 <HAL_RCC_ClockConfig+0x25c>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <HAL_RCC_ClockConfig+0x25c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e040      	b.n	8002676 <HAL_RCC_ClockConfig+0x2de>
 80025f4:	40022000 	.word	0x40022000
 80025f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_RCC_ClockConfig+0x2e8>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	491a      	ldr	r1, [pc, #104]	; (8002680 <HAL_RCC_ClockConfig+0x2e8>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_RCC_ClockConfig+0x2e8>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4912      	ldr	r1, [pc, #72]	; (8002680 <HAL_RCC_ClockConfig+0x2e8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800263a:	f000 f829 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800263e:	4601      	mov	r1, r0
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_RCC_ClockConfig+0x2e8>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002648:	22f0      	movs	r2, #240	; 0xf0
 800264a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	fa92 f2a2 	rbit	r2, r2
 8002652:	60fa      	str	r2, [r7, #12]
  return result;
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	fab2 f282 	clz	r2, r2
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	40d3      	lsrs	r3, r2
 800265e:	4a09      	ldr	r2, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x2ec>)
 8002660:	5cd3      	ldrb	r3, [r2, r3]
 8002662:	fa21 f303 	lsr.w	r3, r1, r3
 8002666:	4a08      	ldr	r2, [pc, #32]	; (8002688 <HAL_RCC_ClockConfig+0x2f0>)
 8002668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_RCC_ClockConfig+0x2f4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fa4a 	bl	8000b08 <HAL_InitTick>
  
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3778      	adds	r7, #120	; 0x78
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	08004454 	.word	0x08004454
 8002688:	20000000 	.word	0x20000000
 800268c:	20000004 	.word	0x20000004

08002690 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002690:	b480      	push	{r7}
 8002692:	b08b      	sub	sp, #44	; 0x2c
 8002694:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80026aa:	4b29      	ldr	r3, [pc, #164]	; (8002750 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d002      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x30>
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d003      	beq.n	80026c6 <HAL_RCC_GetSysClockFreq+0x36>
 80026be:	e03c      	b.n	800273a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026c0:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026c2:	623b      	str	r3, [r7, #32]
      break;
 80026c4:	e03c      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80026cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80026d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	fa92 f2a2 	rbit	r2, r2
 80026d8:	607a      	str	r2, [r7, #4]
  return result;
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	fab2 f282 	clz	r2, r2
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	40d3      	lsrs	r3, r2
 80026e4:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	220f      	movs	r2, #15
 80026f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	fa92 f2a2 	rbit	r2, r2
 80026fc:	60fa      	str	r2, [r7, #12]
  return result;
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	fab2 f282 	clz	r2, r2
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	40d3      	lsrs	r3, r2
 8002708:	4a14      	ldr	r2, [pc, #80]	; (800275c <HAL_RCC_GetSysClockFreq+0xcc>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <HAL_RCC_GetSysClockFreq+0xc4>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
 8002728:	e004      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <HAL_RCC_GetSysClockFreq+0xd0>)
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	623b      	str	r3, [r7, #32]
      break;
 8002738:	e002      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_GetSysClockFreq+0xc4>)
 800273c:	623b      	str	r3, [r7, #32]
      break;
 800273e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002740:	6a3b      	ldr	r3, [r7, #32]
}
 8002742:	4618      	mov	r0, r3
 8002744:	372c      	adds	r7, #44	; 0x2c
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000
 8002754:	007a1200 	.word	0x007a1200
 8002758:	0800446c 	.word	0x0800446c
 800275c:	0800447c 	.word	0x0800447c
 8002760:	003d0900 	.word	0x003d0900

08002764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <HAL_RCC_GetHCLKFreq+0x14>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000000 	.word	0x20000000

0800277c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002782:	f7ff ffef 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 8002786:	4601      	mov	r1, r0
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002790:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002794:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	fa92 f2a2 	rbit	r2, r2
 800279c:	603a      	str	r2, [r7, #0]
  return result;
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	fab2 f282 	clz	r2, r2
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	40d3      	lsrs	r3, r2
 80027a8:	4a04      	ldr	r2, [pc, #16]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80027aa:	5cd3      	ldrb	r3, [r2, r3]
 80027ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	08004464 	.word	0x08004464

080027c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027c6:	f7ff ffcd 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 80027ca:	4601      	mov	r1, r0
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80027d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	fa92 f2a2 	rbit	r2, r2
 80027e0:	603a      	str	r2, [r7, #0]
  return result;
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	fab2 f282 	clz	r2, r2
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	40d3      	lsrs	r3, r2
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <HAL_RCC_GetPCLK2Freq+0x40>)
 80027ee:	5cd3      	ldrb	r3, [r2, r3]
 80027f0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	08004464 	.word	0x08004464

08002804 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b092      	sub	sp, #72	; 0x48
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80d4 	beq.w	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002828:	4b4e      	ldr	r3, [pc, #312]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10e      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002834:	4b4b      	ldr	r3, [pc, #300]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	4a4a      	ldr	r2, [pc, #296]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283e:	61d3      	str	r3, [r2, #28]
 8002840:	4b48      	ldr	r3, [pc, #288]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284c:	2301      	movs	r3, #1
 800284e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002852:	4b45      	ldr	r3, [pc, #276]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d118      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285e:	4b42      	ldr	r3, [pc, #264]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a41      	ldr	r2, [pc, #260]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002868:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286a:	f7fe f991 	bl	8000b90 <HAL_GetTick>
 800286e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	e008      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002872:	f7fe f98d 	bl	8000b90 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b64      	cmp	r3, #100	; 0x64
 800287e:	d901      	bls.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e13c      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	4b38      	ldr	r3, [pc, #224]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002890:	4b34      	ldr	r3, [pc, #208]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002898:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800289a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8084 	beq.w	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d07c      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028b0:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b26      	ldr	r3, [pc, #152]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	461a      	mov	r2, r3
 80028da:	2301      	movs	r3, #1
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	461a      	mov	r2, r3
 80028fe:	2300      	movs	r3, #0
 8002900:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002902:	4a18      	ldr	r2, [pc, #96]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002906:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d04b      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002912:	f7fe f93d 	bl	8000b90 <HAL_GetTick>
 8002916:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002918:	e00a      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291a:	f7fe f939 	bl	8000b90 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f241 3288 	movw	r2, #5000	; 0x1388
 8002928:	4293      	cmp	r3, r2
 800292a:	d901      	bls.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e0e6      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002930:	2302      	movs	r3, #2
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
 800293c:	2302      	movs	r3, #2
 800293e:	623b      	str	r3, [r7, #32]
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	61fb      	str	r3, [r7, #28]
  return result;
 8002948:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d108      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800295e:	4b01      	ldr	r3, [pc, #4]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	e00d      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002964:	40021000 	.word	0x40021000
 8002968:	40007000 	.word	0x40007000
 800296c:	10908100 	.word	0x10908100
 8002970:	2302      	movs	r3, #2
 8002972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	4b62      	ldr	r3, [pc, #392]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2202      	movs	r2, #2
 8002982:	613a      	str	r2, [r7, #16]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	fa92 f2a2 	rbit	r2, r2
 800298a:	60fa      	str	r2, [r7, #12]
  return result;
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	fab2 f282 	clz	r2, r2
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	f002 021f 	and.w	r2, r2, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f202 	lsl.w	r2, r1, r2
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0b7      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029aa:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4954      	ldr	r1, [pc, #336]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c4:	4b50      	ldr	r3, [pc, #320]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	4a4f      	ldr	r2, [pc, #316]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029dc:	4b4a      	ldr	r3, [pc, #296]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	f023 0203 	bic.w	r2, r3, #3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4947      	ldr	r1, [pc, #284]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029fa:	4b43      	ldr	r3, [pc, #268]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f023 0210 	bic.w	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	4940      	ldr	r1, [pc, #256]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a18:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	f023 0220 	bic.w	r2, r3, #32
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	4938      	ldr	r1, [pc, #224]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a36:	4b34      	ldr	r3, [pc, #208]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	4931      	ldr	r1, [pc, #196]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a54:	4b2c      	ldr	r3, [pc, #176]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	4929      	ldr	r1, [pc, #164]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002a72:	4b25      	ldr	r3, [pc, #148]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	4922      	ldr	r1, [pc, #136]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a90:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	491a      	ldr	r1, [pc, #104]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002aae:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	4913      	ldr	r1, [pc, #76]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	490b      	ldr	r1, [pc, #44]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	4904      	ldr	r1, [pc, #16]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3748      	adds	r7, #72	; 0x48
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000

08002b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e09d      	b.n	8002c5a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b2e:	d009      	beq.n	8002b44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
 8002b36:	e005      	b.n	8002b44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fd fe14 	bl	800078c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b84:	d902      	bls.n	8002b8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	e002      	b.n	8002b92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b9a:	d007      	beq.n	8002bac <HAL_SPI_Init+0xa0>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ba4:	d002      	beq.n	8002bac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bee:	ea42 0103 	orr.w	r1, r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	0c1b      	lsrs	r3, r3, #16
 8002c08:	f003 0204 	and.w	r2, r3, #4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c28:	ea42 0103 	orr.w	r1, r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e040      	b.n	8002cf6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d106      	bne.n	8002c8a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7fd fdc5 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2224      	movs	r2, #36	; 0x24
 8002c8e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f8b7 	bl	8002e14 <UART_SetConfig>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e022      	b.n	8002cf6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f9e1 	bl	8003080 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ccc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cdc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0201 	orr.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa68 	bl	80031c4 <UART_CheckIdleState>
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b08a      	sub	sp, #40	; 0x28
 8002d02:	af02      	add	r7, sp, #8
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d178      	bne.n	8002e08 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <HAL_UART_Transmit+0x24>
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e071      	b.n	8002e0a <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2221      	movs	r2, #33	; 0x21
 8002d32:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d34:	f7fd ff2c 	bl	8000b90 <HAL_GetTick>
 8002d38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	88fa      	ldrh	r2, [r7, #6]
 8002d3e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	88fa      	ldrh	r2, [r7, #6]
 8002d46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d52:	d108      	bne.n	8002d66 <HAL_UART_Transmit+0x68>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	e003      	b.n	8002d6e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d6e:	e030      	b.n	8002dd2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2200      	movs	r2, #0
 8002d78:	2180      	movs	r1, #128	; 0x80
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 faca 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d004      	beq.n	8002d90 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e03c      	b.n	8002e0a <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10b      	bne.n	8002dae <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	881a      	ldrh	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002da2:	b292      	uxth	r2, r2
 8002da4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	3302      	adds	r3, #2
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	e008      	b.n	8002dc0 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	781a      	ldrb	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	b292      	uxth	r2, r2
 8002db8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1c8      	bne.n	8002d70 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	2140      	movs	r1, #64	; 0x40
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fa93 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d004      	beq.n	8002dfe <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e005      	b.n	8002e0a <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e000      	b.n	8002e0a <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
  }
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b8a      	ldr	r3, [pc, #552]	; (8003068 <UART_SetConfig+0x254>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6812      	ldr	r2, [r2, #0]
 8002e46:	6979      	ldr	r1, [r7, #20]
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a78      	ldr	r2, [pc, #480]	; (800306c <UART_SetConfig+0x258>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d120      	bne.n	8002ed2 <UART_SetConfig+0xbe>
 8002e90:	4b77      	ldr	r3, [pc, #476]	; (8003070 <UART_SetConfig+0x25c>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d817      	bhi.n	8002ecc <UART_SetConfig+0xb8>
 8002e9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <UART_SetConfig+0x90>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002eb5 	.word	0x08002eb5
 8002ea8:	08002ec1 	.word	0x08002ec1
 8002eac:	08002ec7 	.word	0x08002ec7
 8002eb0:	08002ebb 	.word	0x08002ebb
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	e01d      	b.n	8002ef6 <UART_SetConfig+0xe2>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	77fb      	strb	r3, [r7, #31]
 8002ebe:	e01a      	b.n	8002ef6 <UART_SetConfig+0xe2>
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e017      	b.n	8002ef6 <UART_SetConfig+0xe2>
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	77fb      	strb	r3, [r7, #31]
 8002eca:	e014      	b.n	8002ef6 <UART_SetConfig+0xe2>
 8002ecc:	2310      	movs	r3, #16
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e011      	b.n	8002ef6 <UART_SetConfig+0xe2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a67      	ldr	r2, [pc, #412]	; (8003074 <UART_SetConfig+0x260>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d102      	bne.n	8002ee2 <UART_SetConfig+0xce>
 8002edc:	2300      	movs	r3, #0
 8002ede:	77fb      	strb	r3, [r7, #31]
 8002ee0:	e009      	b.n	8002ef6 <UART_SetConfig+0xe2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a64      	ldr	r2, [pc, #400]	; (8003078 <UART_SetConfig+0x264>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d102      	bne.n	8002ef2 <UART_SetConfig+0xde>
 8002eec:	2300      	movs	r3, #0
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e001      	b.n	8002ef6 <UART_SetConfig+0xe2>
 8002ef2:	2310      	movs	r3, #16
 8002ef4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efe:	d15a      	bne.n	8002fb6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002f00:	7ffb      	ldrb	r3, [r7, #31]
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d827      	bhi.n	8002f56 <UART_SetConfig+0x142>
 8002f06:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <UART_SetConfig+0xf8>)
 8002f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	08002f41 	.word	0x08002f41
 8002f18:	08002f57 	.word	0x08002f57
 8002f1c:	08002f47 	.word	0x08002f47
 8002f20:	08002f57 	.word	0x08002f57
 8002f24:	08002f57 	.word	0x08002f57
 8002f28:	08002f57 	.word	0x08002f57
 8002f2c:	08002f4f 	.word	0x08002f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f30:	f7ff fc24 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8002f34:	61b8      	str	r0, [r7, #24]
        break;
 8002f36:	e013      	b.n	8002f60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f38:	f7ff fc42 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 8002f3c:	61b8      	str	r0, [r7, #24]
        break;
 8002f3e:	e00f      	b.n	8002f60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f40:	4b4e      	ldr	r3, [pc, #312]	; (800307c <UART_SetConfig+0x268>)
 8002f42:	61bb      	str	r3, [r7, #24]
        break;
 8002f44:	e00c      	b.n	8002f60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f46:	f7ff fba3 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8002f4a:	61b8      	str	r0, [r7, #24]
        break;
 8002f4c:	e008      	b.n	8002f60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f52:	61bb      	str	r3, [r7, #24]
        break;
 8002f54:	e004      	b.n	8002f60 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	77bb      	strb	r3, [r7, #30]
        break;
 8002f5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d074      	beq.n	8003050 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	005a      	lsls	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	441a      	add	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	d916      	bls.n	8002fb0 <UART_SetConfig+0x19c>
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f88:	d212      	bcs.n	8002fb0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f023 030f 	bic.w	r3, r3, #15
 8002f92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	89fb      	ldrh	r3, [r7, #14]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	89fa      	ldrh	r2, [r7, #14]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	e04f      	b.n	8003050 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	77bb      	strb	r3, [r7, #30]
 8002fb4:	e04c      	b.n	8003050 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fb6:	7ffb      	ldrb	r3, [r7, #31]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d828      	bhi.n	800300e <UART_SetConfig+0x1fa>
 8002fbc:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <UART_SetConfig+0x1b0>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08002fe9 	.word	0x08002fe9
 8002fc8:	08002ff1 	.word	0x08002ff1
 8002fcc:	08002ff9 	.word	0x08002ff9
 8002fd0:	0800300f 	.word	0x0800300f
 8002fd4:	08002fff 	.word	0x08002fff
 8002fd8:	0800300f 	.word	0x0800300f
 8002fdc:	0800300f 	.word	0x0800300f
 8002fe0:	0800300f 	.word	0x0800300f
 8002fe4:	08003007 	.word	0x08003007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe8:	f7ff fbc8 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8002fec:	61b8      	str	r0, [r7, #24]
        break;
 8002fee:	e013      	b.n	8003018 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff0:	f7ff fbe6 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 8002ff4:	61b8      	str	r0, [r7, #24]
        break;
 8002ff6:	e00f      	b.n	8003018 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ff8:	4b20      	ldr	r3, [pc, #128]	; (800307c <UART_SetConfig+0x268>)
 8002ffa:	61bb      	str	r3, [r7, #24]
        break;
 8002ffc:	e00c      	b.n	8003018 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ffe:	f7ff fb47 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8003002:	61b8      	str	r0, [r7, #24]
        break;
 8003004:	e008      	b.n	8003018 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800300a:	61bb      	str	r3, [r7, #24]
        break;
 800300c:	e004      	b.n	8003018 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	77bb      	strb	r3, [r7, #30]
        break;
 8003016:	bf00      	nop
    }

    if (pclk != 0U)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d018      	beq.n	8003050 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	085a      	lsrs	r2, r3, #1
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	441a      	add	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b0f      	cmp	r3, #15
 8003036:	d909      	bls.n	800304c <UART_SetConfig+0x238>
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303e:	d205      	bcs.n	800304c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	b29a      	uxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	e001      	b.n	8003050 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800305c:	7fbb      	ldrb	r3, [r7, #30]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	efff69f3 	.word	0xefff69f3
 800306c:	40013800 	.word	0x40013800
 8003070:	40021000 	.word	0x40021000
 8003074:	40004400 	.word	0x40004400
 8003078:	40004800 	.word	0x40004800
 800307c:	007a1200 	.word	0x007a1200

08003080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01a      	beq.n	8003196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317e:	d10a      	bne.n	8003196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  }
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b098      	sub	sp, #96	; 0x60
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031d4:	f7fd fcdc 	bl	8000b90 <HAL_GetTick>
 80031d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d12e      	bne.n	8003246 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f0:	2200      	movs	r2, #0
 80031f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f88c 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d021      	beq.n	8003246 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003216:	653b      	str	r3, [r7, #80]	; 0x50
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003220:	647b      	str	r3, [r7, #68]	; 0x44
 8003222:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003224:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003228:	e841 2300 	strex	r3, r2, [r1]
 800322c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800322e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e6      	bne.n	8003202 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e062      	b.n	800330c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b04      	cmp	r3, #4
 8003252:	d149      	bne.n	80032e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003254:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800325c:	2200      	movs	r2, #0
 800325e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f856 	bl	8003314 <UART_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d03c      	beq.n	80032e8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	e853 3f00 	ldrex	r3, [r3]
 800327a:	623b      	str	r3, [r7, #32]
   return(result);
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800328c:	633b      	str	r3, [r7, #48]	; 0x30
 800328e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003294:	e841 2300 	strex	r3, r2, [r1]
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1e6      	bne.n	800326e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3308      	adds	r3, #8
 80032a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	e853 3f00 	ldrex	r3, [r3]
 80032ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3308      	adds	r3, #8
 80032be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032c0:	61fa      	str	r2, [r7, #28]
 80032c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	617b      	str	r3, [r7, #20]
   return(result);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e5      	bne.n	80032a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e011      	b.n	800330c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3758      	adds	r7, #88	; 0x58
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003324:	e049      	b.n	80033ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d045      	beq.n	80033ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fd fc2f 	bl	8000b90 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <UART_WaitOnFlagUntilTimeout+0x30>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e048      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d031      	beq.n	80033ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b08      	cmp	r3, #8
 8003362:	d110      	bne.n	8003386 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2208      	movs	r2, #8
 800336a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f838 	bl	80033e2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2208      	movs	r2, #8
 8003376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e029      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	d111      	bne.n	80033ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800339e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f81e 	bl	80033e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e00f      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4013      	ands	r3, r2
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	bf0c      	ite	eq
 80033ca:	2301      	moveq	r3, #1
 80033cc:	2300      	movne	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d0a6      	beq.n	8003326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b095      	sub	sp, #84	; 0x54
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003408:	643b      	str	r3, [r7, #64]	; 0x40
 800340a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800340e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e6      	bne.n	80033ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3308      	adds	r3, #8
 8003422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	61fb      	str	r3, [r7, #28]
   return(result);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	64bb      	str	r3, [r7, #72]	; 0x48
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3308      	adds	r3, #8
 800343a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800343c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e5      	bne.n	800341c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003454:	2b01      	cmp	r3, #1
 8003456:	d118      	bne.n	800348a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	e853 3f00 	ldrex	r3, [r3]
 8003464:	60bb      	str	r3, [r7, #8]
   return(result);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f023 0310 	bic.w	r3, r3, #16
 800346c:	647b      	str	r3, [r7, #68]	; 0x44
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347a:	6979      	ldr	r1, [r7, #20]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	e841 2300 	strex	r3, r2, [r1]
 8003482:	613b      	str	r3, [r7, #16]
   return(result);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1e6      	bne.n	8003458 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800349e:	bf00      	nop
 80034a0:	3754      	adds	r7, #84	; 0x54
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <__errno>:
 80034ac:	4b01      	ldr	r3, [pc, #4]	; (80034b4 <__errno+0x8>)
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	2000000c 	.word	0x2000000c

080034b8 <__libc_init_array>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	4d0d      	ldr	r5, [pc, #52]	; (80034f0 <__libc_init_array+0x38>)
 80034bc:	4c0d      	ldr	r4, [pc, #52]	; (80034f4 <__libc_init_array+0x3c>)
 80034be:	1b64      	subs	r4, r4, r5
 80034c0:	10a4      	asrs	r4, r4, #2
 80034c2:	2600      	movs	r6, #0
 80034c4:	42a6      	cmp	r6, r4
 80034c6:	d109      	bne.n	80034dc <__libc_init_array+0x24>
 80034c8:	4d0b      	ldr	r5, [pc, #44]	; (80034f8 <__libc_init_array+0x40>)
 80034ca:	4c0c      	ldr	r4, [pc, #48]	; (80034fc <__libc_init_array+0x44>)
 80034cc:	f000 ffae 	bl	800442c <_init>
 80034d0:	1b64      	subs	r4, r4, r5
 80034d2:	10a4      	asrs	r4, r4, #2
 80034d4:	2600      	movs	r6, #0
 80034d6:	42a6      	cmp	r6, r4
 80034d8:	d105      	bne.n	80034e6 <__libc_init_array+0x2e>
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e0:	4798      	blx	r3
 80034e2:	3601      	adds	r6, #1
 80034e4:	e7ee      	b.n	80034c4 <__libc_init_array+0xc>
 80034e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ea:	4798      	blx	r3
 80034ec:	3601      	adds	r6, #1
 80034ee:	e7f2      	b.n	80034d6 <__libc_init_array+0x1e>
 80034f0:	08004524 	.word	0x08004524
 80034f4:	08004524 	.word	0x08004524
 80034f8:	08004524 	.word	0x08004524
 80034fc:	08004528 	.word	0x08004528

08003500 <memset>:
 8003500:	4402      	add	r2, r0
 8003502:	4603      	mov	r3, r0
 8003504:	4293      	cmp	r3, r2
 8003506:	d100      	bne.n	800350a <memset+0xa>
 8003508:	4770      	bx	lr
 800350a:	f803 1b01 	strb.w	r1, [r3], #1
 800350e:	e7f9      	b.n	8003504 <memset+0x4>

08003510 <iprintf>:
 8003510:	b40f      	push	{r0, r1, r2, r3}
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <iprintf+0x2c>)
 8003514:	b513      	push	{r0, r1, r4, lr}
 8003516:	681c      	ldr	r4, [r3, #0]
 8003518:	b124      	cbz	r4, 8003524 <iprintf+0x14>
 800351a:	69a3      	ldr	r3, [r4, #24]
 800351c:	b913      	cbnz	r3, 8003524 <iprintf+0x14>
 800351e:	4620      	mov	r0, r4
 8003520:	f000 f866 	bl	80035f0 <__sinit>
 8003524:	ab05      	add	r3, sp, #20
 8003526:	9a04      	ldr	r2, [sp, #16]
 8003528:	68a1      	ldr	r1, [r4, #8]
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	4620      	mov	r0, r4
 800352e:	f000 f9bd 	bl	80038ac <_vfiprintf_r>
 8003532:	b002      	add	sp, #8
 8003534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003538:	b004      	add	sp, #16
 800353a:	4770      	bx	lr
 800353c:	2000000c 	.word	0x2000000c

08003540 <std>:
 8003540:	2300      	movs	r3, #0
 8003542:	b510      	push	{r4, lr}
 8003544:	4604      	mov	r4, r0
 8003546:	e9c0 3300 	strd	r3, r3, [r0]
 800354a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800354e:	6083      	str	r3, [r0, #8]
 8003550:	8181      	strh	r1, [r0, #12]
 8003552:	6643      	str	r3, [r0, #100]	; 0x64
 8003554:	81c2      	strh	r2, [r0, #14]
 8003556:	6183      	str	r3, [r0, #24]
 8003558:	4619      	mov	r1, r3
 800355a:	2208      	movs	r2, #8
 800355c:	305c      	adds	r0, #92	; 0x5c
 800355e:	f7ff ffcf 	bl	8003500 <memset>
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <std+0x38>)
 8003564:	6263      	str	r3, [r4, #36]	; 0x24
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <std+0x3c>)
 8003568:	62a3      	str	r3, [r4, #40]	; 0x28
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <std+0x40>)
 800356c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <std+0x44>)
 8003570:	6224      	str	r4, [r4, #32]
 8003572:	6323      	str	r3, [r4, #48]	; 0x30
 8003574:	bd10      	pop	{r4, pc}
 8003576:	bf00      	nop
 8003578:	08003e55 	.word	0x08003e55
 800357c:	08003e77 	.word	0x08003e77
 8003580:	08003eaf 	.word	0x08003eaf
 8003584:	08003ed3 	.word	0x08003ed3

08003588 <_cleanup_r>:
 8003588:	4901      	ldr	r1, [pc, #4]	; (8003590 <_cleanup_r+0x8>)
 800358a:	f000 b8af 	b.w	80036ec <_fwalk_reent>
 800358e:	bf00      	nop
 8003590:	080041ad 	.word	0x080041ad

08003594 <__sfmoreglue>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	2268      	movs	r2, #104	; 0x68
 8003598:	1e4d      	subs	r5, r1, #1
 800359a:	4355      	muls	r5, r2
 800359c:	460e      	mov	r6, r1
 800359e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035a2:	f000 f8e5 	bl	8003770 <_malloc_r>
 80035a6:	4604      	mov	r4, r0
 80035a8:	b140      	cbz	r0, 80035bc <__sfmoreglue+0x28>
 80035aa:	2100      	movs	r1, #0
 80035ac:	e9c0 1600 	strd	r1, r6, [r0]
 80035b0:	300c      	adds	r0, #12
 80035b2:	60a0      	str	r0, [r4, #8]
 80035b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035b8:	f7ff ffa2 	bl	8003500 <memset>
 80035bc:	4620      	mov	r0, r4
 80035be:	bd70      	pop	{r4, r5, r6, pc}

080035c0 <__sfp_lock_acquire>:
 80035c0:	4801      	ldr	r0, [pc, #4]	; (80035c8 <__sfp_lock_acquire+0x8>)
 80035c2:	f000 b8b3 	b.w	800372c <__retarget_lock_acquire_recursive>
 80035c6:	bf00      	nop
 80035c8:	2000025d 	.word	0x2000025d

080035cc <__sfp_lock_release>:
 80035cc:	4801      	ldr	r0, [pc, #4]	; (80035d4 <__sfp_lock_release+0x8>)
 80035ce:	f000 b8ae 	b.w	800372e <__retarget_lock_release_recursive>
 80035d2:	bf00      	nop
 80035d4:	2000025d 	.word	0x2000025d

080035d8 <__sinit_lock_acquire>:
 80035d8:	4801      	ldr	r0, [pc, #4]	; (80035e0 <__sinit_lock_acquire+0x8>)
 80035da:	f000 b8a7 	b.w	800372c <__retarget_lock_acquire_recursive>
 80035de:	bf00      	nop
 80035e0:	2000025e 	.word	0x2000025e

080035e4 <__sinit_lock_release>:
 80035e4:	4801      	ldr	r0, [pc, #4]	; (80035ec <__sinit_lock_release+0x8>)
 80035e6:	f000 b8a2 	b.w	800372e <__retarget_lock_release_recursive>
 80035ea:	bf00      	nop
 80035ec:	2000025e 	.word	0x2000025e

080035f0 <__sinit>:
 80035f0:	b510      	push	{r4, lr}
 80035f2:	4604      	mov	r4, r0
 80035f4:	f7ff fff0 	bl	80035d8 <__sinit_lock_acquire>
 80035f8:	69a3      	ldr	r3, [r4, #24]
 80035fa:	b11b      	cbz	r3, 8003604 <__sinit+0x14>
 80035fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003600:	f7ff bff0 	b.w	80035e4 <__sinit_lock_release>
 8003604:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003608:	6523      	str	r3, [r4, #80]	; 0x50
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <__sinit+0x68>)
 800360c:	4a13      	ldr	r2, [pc, #76]	; (800365c <__sinit+0x6c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	62a2      	str	r2, [r4, #40]	; 0x28
 8003612:	42a3      	cmp	r3, r4
 8003614:	bf04      	itt	eq
 8003616:	2301      	moveq	r3, #1
 8003618:	61a3      	streq	r3, [r4, #24]
 800361a:	4620      	mov	r0, r4
 800361c:	f000 f820 	bl	8003660 <__sfp>
 8003620:	6060      	str	r0, [r4, #4]
 8003622:	4620      	mov	r0, r4
 8003624:	f000 f81c 	bl	8003660 <__sfp>
 8003628:	60a0      	str	r0, [r4, #8]
 800362a:	4620      	mov	r0, r4
 800362c:	f000 f818 	bl	8003660 <__sfp>
 8003630:	2200      	movs	r2, #0
 8003632:	60e0      	str	r0, [r4, #12]
 8003634:	2104      	movs	r1, #4
 8003636:	6860      	ldr	r0, [r4, #4]
 8003638:	f7ff ff82 	bl	8003540 <std>
 800363c:	68a0      	ldr	r0, [r4, #8]
 800363e:	2201      	movs	r2, #1
 8003640:	2109      	movs	r1, #9
 8003642:	f7ff ff7d 	bl	8003540 <std>
 8003646:	68e0      	ldr	r0, [r4, #12]
 8003648:	2202      	movs	r2, #2
 800364a:	2112      	movs	r1, #18
 800364c:	f7ff ff78 	bl	8003540 <std>
 8003650:	2301      	movs	r3, #1
 8003652:	61a3      	str	r3, [r4, #24]
 8003654:	e7d2      	b.n	80035fc <__sinit+0xc>
 8003656:	bf00      	nop
 8003658:	0800448c 	.word	0x0800448c
 800365c:	08003589 	.word	0x08003589

08003660 <__sfp>:
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	4607      	mov	r7, r0
 8003664:	f7ff ffac 	bl	80035c0 <__sfp_lock_acquire>
 8003668:	4b1e      	ldr	r3, [pc, #120]	; (80036e4 <__sfp+0x84>)
 800366a:	681e      	ldr	r6, [r3, #0]
 800366c:	69b3      	ldr	r3, [r6, #24]
 800366e:	b913      	cbnz	r3, 8003676 <__sfp+0x16>
 8003670:	4630      	mov	r0, r6
 8003672:	f7ff ffbd 	bl	80035f0 <__sinit>
 8003676:	3648      	adds	r6, #72	; 0x48
 8003678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800367c:	3b01      	subs	r3, #1
 800367e:	d503      	bpl.n	8003688 <__sfp+0x28>
 8003680:	6833      	ldr	r3, [r6, #0]
 8003682:	b30b      	cbz	r3, 80036c8 <__sfp+0x68>
 8003684:	6836      	ldr	r6, [r6, #0]
 8003686:	e7f7      	b.n	8003678 <__sfp+0x18>
 8003688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800368c:	b9d5      	cbnz	r5, 80036c4 <__sfp+0x64>
 800368e:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <__sfp+0x88>)
 8003690:	60e3      	str	r3, [r4, #12]
 8003692:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003696:	6665      	str	r5, [r4, #100]	; 0x64
 8003698:	f000 f847 	bl	800372a <__retarget_lock_init_recursive>
 800369c:	f7ff ff96 	bl	80035cc <__sfp_lock_release>
 80036a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80036a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80036a8:	6025      	str	r5, [r4, #0]
 80036aa:	61a5      	str	r5, [r4, #24]
 80036ac:	2208      	movs	r2, #8
 80036ae:	4629      	mov	r1, r5
 80036b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036b4:	f7ff ff24 	bl	8003500 <memset>
 80036b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036c0:	4620      	mov	r0, r4
 80036c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c4:	3468      	adds	r4, #104	; 0x68
 80036c6:	e7d9      	b.n	800367c <__sfp+0x1c>
 80036c8:	2104      	movs	r1, #4
 80036ca:	4638      	mov	r0, r7
 80036cc:	f7ff ff62 	bl	8003594 <__sfmoreglue>
 80036d0:	4604      	mov	r4, r0
 80036d2:	6030      	str	r0, [r6, #0]
 80036d4:	2800      	cmp	r0, #0
 80036d6:	d1d5      	bne.n	8003684 <__sfp+0x24>
 80036d8:	f7ff ff78 	bl	80035cc <__sfp_lock_release>
 80036dc:	230c      	movs	r3, #12
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	e7ee      	b.n	80036c0 <__sfp+0x60>
 80036e2:	bf00      	nop
 80036e4:	0800448c 	.word	0x0800448c
 80036e8:	ffff0001 	.word	0xffff0001

080036ec <_fwalk_reent>:
 80036ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f0:	4606      	mov	r6, r0
 80036f2:	4688      	mov	r8, r1
 80036f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036f8:	2700      	movs	r7, #0
 80036fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036fe:	f1b9 0901 	subs.w	r9, r9, #1
 8003702:	d505      	bpl.n	8003710 <_fwalk_reent+0x24>
 8003704:	6824      	ldr	r4, [r4, #0]
 8003706:	2c00      	cmp	r4, #0
 8003708:	d1f7      	bne.n	80036fa <_fwalk_reent+0xe>
 800370a:	4638      	mov	r0, r7
 800370c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003710:	89ab      	ldrh	r3, [r5, #12]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d907      	bls.n	8003726 <_fwalk_reent+0x3a>
 8003716:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800371a:	3301      	adds	r3, #1
 800371c:	d003      	beq.n	8003726 <_fwalk_reent+0x3a>
 800371e:	4629      	mov	r1, r5
 8003720:	4630      	mov	r0, r6
 8003722:	47c0      	blx	r8
 8003724:	4307      	orrs	r7, r0
 8003726:	3568      	adds	r5, #104	; 0x68
 8003728:	e7e9      	b.n	80036fe <_fwalk_reent+0x12>

0800372a <__retarget_lock_init_recursive>:
 800372a:	4770      	bx	lr

0800372c <__retarget_lock_acquire_recursive>:
 800372c:	4770      	bx	lr

0800372e <__retarget_lock_release_recursive>:
 800372e:	4770      	bx	lr

08003730 <sbrk_aligned>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	4e0e      	ldr	r6, [pc, #56]	; (800376c <sbrk_aligned+0x3c>)
 8003734:	460c      	mov	r4, r1
 8003736:	6831      	ldr	r1, [r6, #0]
 8003738:	4605      	mov	r5, r0
 800373a:	b911      	cbnz	r1, 8003742 <sbrk_aligned+0x12>
 800373c:	f000 fb7a 	bl	8003e34 <_sbrk_r>
 8003740:	6030      	str	r0, [r6, #0]
 8003742:	4621      	mov	r1, r4
 8003744:	4628      	mov	r0, r5
 8003746:	f000 fb75 	bl	8003e34 <_sbrk_r>
 800374a:	1c43      	adds	r3, r0, #1
 800374c:	d00a      	beq.n	8003764 <sbrk_aligned+0x34>
 800374e:	1cc4      	adds	r4, r0, #3
 8003750:	f024 0403 	bic.w	r4, r4, #3
 8003754:	42a0      	cmp	r0, r4
 8003756:	d007      	beq.n	8003768 <sbrk_aligned+0x38>
 8003758:	1a21      	subs	r1, r4, r0
 800375a:	4628      	mov	r0, r5
 800375c:	f000 fb6a 	bl	8003e34 <_sbrk_r>
 8003760:	3001      	adds	r0, #1
 8003762:	d101      	bne.n	8003768 <sbrk_aligned+0x38>
 8003764:	f04f 34ff 	mov.w	r4, #4294967295
 8003768:	4620      	mov	r0, r4
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	20000264 	.word	0x20000264

08003770 <_malloc_r>:
 8003770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003774:	1ccd      	adds	r5, r1, #3
 8003776:	f025 0503 	bic.w	r5, r5, #3
 800377a:	3508      	adds	r5, #8
 800377c:	2d0c      	cmp	r5, #12
 800377e:	bf38      	it	cc
 8003780:	250c      	movcc	r5, #12
 8003782:	2d00      	cmp	r5, #0
 8003784:	4607      	mov	r7, r0
 8003786:	db01      	blt.n	800378c <_malloc_r+0x1c>
 8003788:	42a9      	cmp	r1, r5
 800378a:	d905      	bls.n	8003798 <_malloc_r+0x28>
 800378c:	230c      	movs	r3, #12
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	2600      	movs	r6, #0
 8003792:	4630      	mov	r0, r6
 8003794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003798:	4e2e      	ldr	r6, [pc, #184]	; (8003854 <_malloc_r+0xe4>)
 800379a:	f000 fdbb 	bl	8004314 <__malloc_lock>
 800379e:	6833      	ldr	r3, [r6, #0]
 80037a0:	461c      	mov	r4, r3
 80037a2:	bb34      	cbnz	r4, 80037f2 <_malloc_r+0x82>
 80037a4:	4629      	mov	r1, r5
 80037a6:	4638      	mov	r0, r7
 80037a8:	f7ff ffc2 	bl	8003730 <sbrk_aligned>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	4604      	mov	r4, r0
 80037b0:	d14d      	bne.n	800384e <_malloc_r+0xde>
 80037b2:	6834      	ldr	r4, [r6, #0]
 80037b4:	4626      	mov	r6, r4
 80037b6:	2e00      	cmp	r6, #0
 80037b8:	d140      	bne.n	800383c <_malloc_r+0xcc>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	4631      	mov	r1, r6
 80037be:	4638      	mov	r0, r7
 80037c0:	eb04 0803 	add.w	r8, r4, r3
 80037c4:	f000 fb36 	bl	8003e34 <_sbrk_r>
 80037c8:	4580      	cmp	r8, r0
 80037ca:	d13a      	bne.n	8003842 <_malloc_r+0xd2>
 80037cc:	6821      	ldr	r1, [r4, #0]
 80037ce:	3503      	adds	r5, #3
 80037d0:	1a6d      	subs	r5, r5, r1
 80037d2:	f025 0503 	bic.w	r5, r5, #3
 80037d6:	3508      	adds	r5, #8
 80037d8:	2d0c      	cmp	r5, #12
 80037da:	bf38      	it	cc
 80037dc:	250c      	movcc	r5, #12
 80037de:	4629      	mov	r1, r5
 80037e0:	4638      	mov	r0, r7
 80037e2:	f7ff ffa5 	bl	8003730 <sbrk_aligned>
 80037e6:	3001      	adds	r0, #1
 80037e8:	d02b      	beq.n	8003842 <_malloc_r+0xd2>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	442b      	add	r3, r5
 80037ee:	6023      	str	r3, [r4, #0]
 80037f0:	e00e      	b.n	8003810 <_malloc_r+0xa0>
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	1b52      	subs	r2, r2, r5
 80037f6:	d41e      	bmi.n	8003836 <_malloc_r+0xc6>
 80037f8:	2a0b      	cmp	r2, #11
 80037fa:	d916      	bls.n	800382a <_malloc_r+0xba>
 80037fc:	1961      	adds	r1, r4, r5
 80037fe:	42a3      	cmp	r3, r4
 8003800:	6025      	str	r5, [r4, #0]
 8003802:	bf18      	it	ne
 8003804:	6059      	strne	r1, [r3, #4]
 8003806:	6863      	ldr	r3, [r4, #4]
 8003808:	bf08      	it	eq
 800380a:	6031      	streq	r1, [r6, #0]
 800380c:	5162      	str	r2, [r4, r5]
 800380e:	604b      	str	r3, [r1, #4]
 8003810:	4638      	mov	r0, r7
 8003812:	f104 060b 	add.w	r6, r4, #11
 8003816:	f000 fd83 	bl	8004320 <__malloc_unlock>
 800381a:	f026 0607 	bic.w	r6, r6, #7
 800381e:	1d23      	adds	r3, r4, #4
 8003820:	1af2      	subs	r2, r6, r3
 8003822:	d0b6      	beq.n	8003792 <_malloc_r+0x22>
 8003824:	1b9b      	subs	r3, r3, r6
 8003826:	50a3      	str	r3, [r4, r2]
 8003828:	e7b3      	b.n	8003792 <_malloc_r+0x22>
 800382a:	6862      	ldr	r2, [r4, #4]
 800382c:	42a3      	cmp	r3, r4
 800382e:	bf0c      	ite	eq
 8003830:	6032      	streq	r2, [r6, #0]
 8003832:	605a      	strne	r2, [r3, #4]
 8003834:	e7ec      	b.n	8003810 <_malloc_r+0xa0>
 8003836:	4623      	mov	r3, r4
 8003838:	6864      	ldr	r4, [r4, #4]
 800383a:	e7b2      	b.n	80037a2 <_malloc_r+0x32>
 800383c:	4634      	mov	r4, r6
 800383e:	6876      	ldr	r6, [r6, #4]
 8003840:	e7b9      	b.n	80037b6 <_malloc_r+0x46>
 8003842:	230c      	movs	r3, #12
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	4638      	mov	r0, r7
 8003848:	f000 fd6a 	bl	8004320 <__malloc_unlock>
 800384c:	e7a1      	b.n	8003792 <_malloc_r+0x22>
 800384e:	6025      	str	r5, [r4, #0]
 8003850:	e7de      	b.n	8003810 <_malloc_r+0xa0>
 8003852:	bf00      	nop
 8003854:	20000260 	.word	0x20000260

08003858 <__sfputc_r>:
 8003858:	6893      	ldr	r3, [r2, #8]
 800385a:	3b01      	subs	r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	b410      	push	{r4}
 8003860:	6093      	str	r3, [r2, #8]
 8003862:	da08      	bge.n	8003876 <__sfputc_r+0x1e>
 8003864:	6994      	ldr	r4, [r2, #24]
 8003866:	42a3      	cmp	r3, r4
 8003868:	db01      	blt.n	800386e <__sfputc_r+0x16>
 800386a:	290a      	cmp	r1, #10
 800386c:	d103      	bne.n	8003876 <__sfputc_r+0x1e>
 800386e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003872:	f000 bb33 	b.w	8003edc <__swbuf_r>
 8003876:	6813      	ldr	r3, [r2, #0]
 8003878:	1c58      	adds	r0, r3, #1
 800387a:	6010      	str	r0, [r2, #0]
 800387c:	7019      	strb	r1, [r3, #0]
 800387e:	4608      	mov	r0, r1
 8003880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003884:	4770      	bx	lr

08003886 <__sfputs_r>:
 8003886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003888:	4606      	mov	r6, r0
 800388a:	460f      	mov	r7, r1
 800388c:	4614      	mov	r4, r2
 800388e:	18d5      	adds	r5, r2, r3
 8003890:	42ac      	cmp	r4, r5
 8003892:	d101      	bne.n	8003898 <__sfputs_r+0x12>
 8003894:	2000      	movs	r0, #0
 8003896:	e007      	b.n	80038a8 <__sfputs_r+0x22>
 8003898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800389c:	463a      	mov	r2, r7
 800389e:	4630      	mov	r0, r6
 80038a0:	f7ff ffda 	bl	8003858 <__sfputc_r>
 80038a4:	1c43      	adds	r3, r0, #1
 80038a6:	d1f3      	bne.n	8003890 <__sfputs_r+0xa>
 80038a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038ac <_vfiprintf_r>:
 80038ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b0:	460d      	mov	r5, r1
 80038b2:	b09d      	sub	sp, #116	; 0x74
 80038b4:	4614      	mov	r4, r2
 80038b6:	4698      	mov	r8, r3
 80038b8:	4606      	mov	r6, r0
 80038ba:	b118      	cbz	r0, 80038c4 <_vfiprintf_r+0x18>
 80038bc:	6983      	ldr	r3, [r0, #24]
 80038be:	b90b      	cbnz	r3, 80038c4 <_vfiprintf_r+0x18>
 80038c0:	f7ff fe96 	bl	80035f0 <__sinit>
 80038c4:	4b89      	ldr	r3, [pc, #548]	; (8003aec <_vfiprintf_r+0x240>)
 80038c6:	429d      	cmp	r5, r3
 80038c8:	d11b      	bne.n	8003902 <_vfiprintf_r+0x56>
 80038ca:	6875      	ldr	r5, [r6, #4]
 80038cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038ce:	07d9      	lsls	r1, r3, #31
 80038d0:	d405      	bmi.n	80038de <_vfiprintf_r+0x32>
 80038d2:	89ab      	ldrh	r3, [r5, #12]
 80038d4:	059a      	lsls	r2, r3, #22
 80038d6:	d402      	bmi.n	80038de <_vfiprintf_r+0x32>
 80038d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038da:	f7ff ff27 	bl	800372c <__retarget_lock_acquire_recursive>
 80038de:	89ab      	ldrh	r3, [r5, #12]
 80038e0:	071b      	lsls	r3, r3, #28
 80038e2:	d501      	bpl.n	80038e8 <_vfiprintf_r+0x3c>
 80038e4:	692b      	ldr	r3, [r5, #16]
 80038e6:	b9eb      	cbnz	r3, 8003924 <_vfiprintf_r+0x78>
 80038e8:	4629      	mov	r1, r5
 80038ea:	4630      	mov	r0, r6
 80038ec:	f000 fb5a 	bl	8003fa4 <__swsetup_r>
 80038f0:	b1c0      	cbz	r0, 8003924 <_vfiprintf_r+0x78>
 80038f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038f4:	07dc      	lsls	r4, r3, #31
 80038f6:	d50e      	bpl.n	8003916 <_vfiprintf_r+0x6a>
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295
 80038fc:	b01d      	add	sp, #116	; 0x74
 80038fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003902:	4b7b      	ldr	r3, [pc, #492]	; (8003af0 <_vfiprintf_r+0x244>)
 8003904:	429d      	cmp	r5, r3
 8003906:	d101      	bne.n	800390c <_vfiprintf_r+0x60>
 8003908:	68b5      	ldr	r5, [r6, #8]
 800390a:	e7df      	b.n	80038cc <_vfiprintf_r+0x20>
 800390c:	4b79      	ldr	r3, [pc, #484]	; (8003af4 <_vfiprintf_r+0x248>)
 800390e:	429d      	cmp	r5, r3
 8003910:	bf08      	it	eq
 8003912:	68f5      	ldreq	r5, [r6, #12]
 8003914:	e7da      	b.n	80038cc <_vfiprintf_r+0x20>
 8003916:	89ab      	ldrh	r3, [r5, #12]
 8003918:	0598      	lsls	r0, r3, #22
 800391a:	d4ed      	bmi.n	80038f8 <_vfiprintf_r+0x4c>
 800391c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800391e:	f7ff ff06 	bl	800372e <__retarget_lock_release_recursive>
 8003922:	e7e9      	b.n	80038f8 <_vfiprintf_r+0x4c>
 8003924:	2300      	movs	r3, #0
 8003926:	9309      	str	r3, [sp, #36]	; 0x24
 8003928:	2320      	movs	r3, #32
 800392a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800392e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003932:	2330      	movs	r3, #48	; 0x30
 8003934:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003af8 <_vfiprintf_r+0x24c>
 8003938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800393c:	f04f 0901 	mov.w	r9, #1
 8003940:	4623      	mov	r3, r4
 8003942:	469a      	mov	sl, r3
 8003944:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003948:	b10a      	cbz	r2, 800394e <_vfiprintf_r+0xa2>
 800394a:	2a25      	cmp	r2, #37	; 0x25
 800394c:	d1f9      	bne.n	8003942 <_vfiprintf_r+0x96>
 800394e:	ebba 0b04 	subs.w	fp, sl, r4
 8003952:	d00b      	beq.n	800396c <_vfiprintf_r+0xc0>
 8003954:	465b      	mov	r3, fp
 8003956:	4622      	mov	r2, r4
 8003958:	4629      	mov	r1, r5
 800395a:	4630      	mov	r0, r6
 800395c:	f7ff ff93 	bl	8003886 <__sfputs_r>
 8003960:	3001      	adds	r0, #1
 8003962:	f000 80aa 	beq.w	8003aba <_vfiprintf_r+0x20e>
 8003966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003968:	445a      	add	r2, fp
 800396a:	9209      	str	r2, [sp, #36]	; 0x24
 800396c:	f89a 3000 	ldrb.w	r3, [sl]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80a2 	beq.w	8003aba <_vfiprintf_r+0x20e>
 8003976:	2300      	movs	r3, #0
 8003978:	f04f 32ff 	mov.w	r2, #4294967295
 800397c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003980:	f10a 0a01 	add.w	sl, sl, #1
 8003984:	9304      	str	r3, [sp, #16]
 8003986:	9307      	str	r3, [sp, #28]
 8003988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800398c:	931a      	str	r3, [sp, #104]	; 0x68
 800398e:	4654      	mov	r4, sl
 8003990:	2205      	movs	r2, #5
 8003992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003996:	4858      	ldr	r0, [pc, #352]	; (8003af8 <_vfiprintf_r+0x24c>)
 8003998:	f7fc fc1a 	bl	80001d0 <memchr>
 800399c:	9a04      	ldr	r2, [sp, #16]
 800399e:	b9d8      	cbnz	r0, 80039d8 <_vfiprintf_r+0x12c>
 80039a0:	06d1      	lsls	r1, r2, #27
 80039a2:	bf44      	itt	mi
 80039a4:	2320      	movmi	r3, #32
 80039a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039aa:	0713      	lsls	r3, r2, #28
 80039ac:	bf44      	itt	mi
 80039ae:	232b      	movmi	r3, #43	; 0x2b
 80039b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039b4:	f89a 3000 	ldrb.w	r3, [sl]
 80039b8:	2b2a      	cmp	r3, #42	; 0x2a
 80039ba:	d015      	beq.n	80039e8 <_vfiprintf_r+0x13c>
 80039bc:	9a07      	ldr	r2, [sp, #28]
 80039be:	4654      	mov	r4, sl
 80039c0:	2000      	movs	r0, #0
 80039c2:	f04f 0c0a 	mov.w	ip, #10
 80039c6:	4621      	mov	r1, r4
 80039c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039cc:	3b30      	subs	r3, #48	; 0x30
 80039ce:	2b09      	cmp	r3, #9
 80039d0:	d94e      	bls.n	8003a70 <_vfiprintf_r+0x1c4>
 80039d2:	b1b0      	cbz	r0, 8003a02 <_vfiprintf_r+0x156>
 80039d4:	9207      	str	r2, [sp, #28]
 80039d6:	e014      	b.n	8003a02 <_vfiprintf_r+0x156>
 80039d8:	eba0 0308 	sub.w	r3, r0, r8
 80039dc:	fa09 f303 	lsl.w	r3, r9, r3
 80039e0:	4313      	orrs	r3, r2
 80039e2:	9304      	str	r3, [sp, #16]
 80039e4:	46a2      	mov	sl, r4
 80039e6:	e7d2      	b.n	800398e <_vfiprintf_r+0xe2>
 80039e8:	9b03      	ldr	r3, [sp, #12]
 80039ea:	1d19      	adds	r1, r3, #4
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	9103      	str	r1, [sp, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bfbb      	ittet	lt
 80039f4:	425b      	neglt	r3, r3
 80039f6:	f042 0202 	orrlt.w	r2, r2, #2
 80039fa:	9307      	strge	r3, [sp, #28]
 80039fc:	9307      	strlt	r3, [sp, #28]
 80039fe:	bfb8      	it	lt
 8003a00:	9204      	strlt	r2, [sp, #16]
 8003a02:	7823      	ldrb	r3, [r4, #0]
 8003a04:	2b2e      	cmp	r3, #46	; 0x2e
 8003a06:	d10c      	bne.n	8003a22 <_vfiprintf_r+0x176>
 8003a08:	7863      	ldrb	r3, [r4, #1]
 8003a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a0c:	d135      	bne.n	8003a7a <_vfiprintf_r+0x1ce>
 8003a0e:	9b03      	ldr	r3, [sp, #12]
 8003a10:	1d1a      	adds	r2, r3, #4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	9203      	str	r2, [sp, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	bfb8      	it	lt
 8003a1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a1e:	3402      	adds	r4, #2
 8003a20:	9305      	str	r3, [sp, #20]
 8003a22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b08 <_vfiprintf_r+0x25c>
 8003a26:	7821      	ldrb	r1, [r4, #0]
 8003a28:	2203      	movs	r2, #3
 8003a2a:	4650      	mov	r0, sl
 8003a2c:	f7fc fbd0 	bl	80001d0 <memchr>
 8003a30:	b140      	cbz	r0, 8003a44 <_vfiprintf_r+0x198>
 8003a32:	2340      	movs	r3, #64	; 0x40
 8003a34:	eba0 000a 	sub.w	r0, r0, sl
 8003a38:	fa03 f000 	lsl.w	r0, r3, r0
 8003a3c:	9b04      	ldr	r3, [sp, #16]
 8003a3e:	4303      	orrs	r3, r0
 8003a40:	3401      	adds	r4, #1
 8003a42:	9304      	str	r3, [sp, #16]
 8003a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a48:	482c      	ldr	r0, [pc, #176]	; (8003afc <_vfiprintf_r+0x250>)
 8003a4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a4e:	2206      	movs	r2, #6
 8003a50:	f7fc fbbe 	bl	80001d0 <memchr>
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d03f      	beq.n	8003ad8 <_vfiprintf_r+0x22c>
 8003a58:	4b29      	ldr	r3, [pc, #164]	; (8003b00 <_vfiprintf_r+0x254>)
 8003a5a:	bb1b      	cbnz	r3, 8003aa4 <_vfiprintf_r+0x1f8>
 8003a5c:	9b03      	ldr	r3, [sp, #12]
 8003a5e:	3307      	adds	r3, #7
 8003a60:	f023 0307 	bic.w	r3, r3, #7
 8003a64:	3308      	adds	r3, #8
 8003a66:	9303      	str	r3, [sp, #12]
 8003a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a6a:	443b      	add	r3, r7
 8003a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a6e:	e767      	b.n	8003940 <_vfiprintf_r+0x94>
 8003a70:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a74:	460c      	mov	r4, r1
 8003a76:	2001      	movs	r0, #1
 8003a78:	e7a5      	b.n	80039c6 <_vfiprintf_r+0x11a>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	3401      	adds	r4, #1
 8003a7e:	9305      	str	r3, [sp, #20]
 8003a80:	4619      	mov	r1, r3
 8003a82:	f04f 0c0a 	mov.w	ip, #10
 8003a86:	4620      	mov	r0, r4
 8003a88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a8c:	3a30      	subs	r2, #48	; 0x30
 8003a8e:	2a09      	cmp	r2, #9
 8003a90:	d903      	bls.n	8003a9a <_vfiprintf_r+0x1ee>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0c5      	beq.n	8003a22 <_vfiprintf_r+0x176>
 8003a96:	9105      	str	r1, [sp, #20]
 8003a98:	e7c3      	b.n	8003a22 <_vfiprintf_r+0x176>
 8003a9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e7f0      	b.n	8003a86 <_vfiprintf_r+0x1da>
 8003aa4:	ab03      	add	r3, sp, #12
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	462a      	mov	r2, r5
 8003aaa:	4b16      	ldr	r3, [pc, #88]	; (8003b04 <_vfiprintf_r+0x258>)
 8003aac:	a904      	add	r1, sp, #16
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f3af 8000 	nop.w
 8003ab4:	4607      	mov	r7, r0
 8003ab6:	1c78      	adds	r0, r7, #1
 8003ab8:	d1d6      	bne.n	8003a68 <_vfiprintf_r+0x1bc>
 8003aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003abc:	07d9      	lsls	r1, r3, #31
 8003abe:	d405      	bmi.n	8003acc <_vfiprintf_r+0x220>
 8003ac0:	89ab      	ldrh	r3, [r5, #12]
 8003ac2:	059a      	lsls	r2, r3, #22
 8003ac4:	d402      	bmi.n	8003acc <_vfiprintf_r+0x220>
 8003ac6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ac8:	f7ff fe31 	bl	800372e <__retarget_lock_release_recursive>
 8003acc:	89ab      	ldrh	r3, [r5, #12]
 8003ace:	065b      	lsls	r3, r3, #25
 8003ad0:	f53f af12 	bmi.w	80038f8 <_vfiprintf_r+0x4c>
 8003ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ad6:	e711      	b.n	80038fc <_vfiprintf_r+0x50>
 8003ad8:	ab03      	add	r3, sp, #12
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	462a      	mov	r2, r5
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <_vfiprintf_r+0x258>)
 8003ae0:	a904      	add	r1, sp, #16
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f000 f880 	bl	8003be8 <_printf_i>
 8003ae8:	e7e4      	b.n	8003ab4 <_vfiprintf_r+0x208>
 8003aea:	bf00      	nop
 8003aec:	080044b0 	.word	0x080044b0
 8003af0:	080044d0 	.word	0x080044d0
 8003af4:	08004490 	.word	0x08004490
 8003af8:	080044f0 	.word	0x080044f0
 8003afc:	080044fa 	.word	0x080044fa
 8003b00:	00000000 	.word	0x00000000
 8003b04:	08003887 	.word	0x08003887
 8003b08:	080044f6 	.word	0x080044f6

08003b0c <_printf_common>:
 8003b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b10:	4616      	mov	r6, r2
 8003b12:	4699      	mov	r9, r3
 8003b14:	688a      	ldr	r2, [r1, #8]
 8003b16:	690b      	ldr	r3, [r1, #16]
 8003b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	bfb8      	it	lt
 8003b20:	4613      	movlt	r3, r2
 8003b22:	6033      	str	r3, [r6, #0]
 8003b24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b28:	4607      	mov	r7, r0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	b10a      	cbz	r2, 8003b32 <_printf_common+0x26>
 8003b2e:	3301      	adds	r3, #1
 8003b30:	6033      	str	r3, [r6, #0]
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	0699      	lsls	r1, r3, #26
 8003b36:	bf42      	ittt	mi
 8003b38:	6833      	ldrmi	r3, [r6, #0]
 8003b3a:	3302      	addmi	r3, #2
 8003b3c:	6033      	strmi	r3, [r6, #0]
 8003b3e:	6825      	ldr	r5, [r4, #0]
 8003b40:	f015 0506 	ands.w	r5, r5, #6
 8003b44:	d106      	bne.n	8003b54 <_printf_common+0x48>
 8003b46:	f104 0a19 	add.w	sl, r4, #25
 8003b4a:	68e3      	ldr	r3, [r4, #12]
 8003b4c:	6832      	ldr	r2, [r6, #0]
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	42ab      	cmp	r3, r5
 8003b52:	dc26      	bgt.n	8003ba2 <_printf_common+0x96>
 8003b54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b58:	1e13      	subs	r3, r2, #0
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	bf18      	it	ne
 8003b5e:	2301      	movne	r3, #1
 8003b60:	0692      	lsls	r2, r2, #26
 8003b62:	d42b      	bmi.n	8003bbc <_printf_common+0xb0>
 8003b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b68:	4649      	mov	r1, r9
 8003b6a:	4638      	mov	r0, r7
 8003b6c:	47c0      	blx	r8
 8003b6e:	3001      	adds	r0, #1
 8003b70:	d01e      	beq.n	8003bb0 <_printf_common+0xa4>
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	68e5      	ldr	r5, [r4, #12]
 8003b76:	6832      	ldr	r2, [r6, #0]
 8003b78:	f003 0306 	and.w	r3, r3, #6
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	bf08      	it	eq
 8003b80:	1aad      	subeq	r5, r5, r2
 8003b82:	68a3      	ldr	r3, [r4, #8]
 8003b84:	6922      	ldr	r2, [r4, #16]
 8003b86:	bf0c      	ite	eq
 8003b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b8c:	2500      	movne	r5, #0
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	bfc4      	itt	gt
 8003b92:	1a9b      	subgt	r3, r3, r2
 8003b94:	18ed      	addgt	r5, r5, r3
 8003b96:	2600      	movs	r6, #0
 8003b98:	341a      	adds	r4, #26
 8003b9a:	42b5      	cmp	r5, r6
 8003b9c:	d11a      	bne.n	8003bd4 <_printf_common+0xc8>
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	e008      	b.n	8003bb4 <_printf_common+0xa8>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	4652      	mov	r2, sl
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	4638      	mov	r0, r7
 8003baa:	47c0      	blx	r8
 8003bac:	3001      	adds	r0, #1
 8003bae:	d103      	bne.n	8003bb8 <_printf_common+0xac>
 8003bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb8:	3501      	adds	r5, #1
 8003bba:	e7c6      	b.n	8003b4a <_printf_common+0x3e>
 8003bbc:	18e1      	adds	r1, r4, r3
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	2030      	movs	r0, #48	; 0x30
 8003bc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bc6:	4422      	add	r2, r4
 8003bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	e7c7      	b.n	8003b64 <_printf_common+0x58>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	4649      	mov	r1, r9
 8003bda:	4638      	mov	r0, r7
 8003bdc:	47c0      	blx	r8
 8003bde:	3001      	adds	r0, #1
 8003be0:	d0e6      	beq.n	8003bb0 <_printf_common+0xa4>
 8003be2:	3601      	adds	r6, #1
 8003be4:	e7d9      	b.n	8003b9a <_printf_common+0x8e>
	...

08003be8 <_printf_i>:
 8003be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bec:	7e0f      	ldrb	r7, [r1, #24]
 8003bee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bf0:	2f78      	cmp	r7, #120	; 0x78
 8003bf2:	4691      	mov	r9, r2
 8003bf4:	4680      	mov	r8, r0
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	469a      	mov	sl, r3
 8003bfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bfe:	d807      	bhi.n	8003c10 <_printf_i+0x28>
 8003c00:	2f62      	cmp	r7, #98	; 0x62
 8003c02:	d80a      	bhi.n	8003c1a <_printf_i+0x32>
 8003c04:	2f00      	cmp	r7, #0
 8003c06:	f000 80d8 	beq.w	8003dba <_printf_i+0x1d2>
 8003c0a:	2f58      	cmp	r7, #88	; 0x58
 8003c0c:	f000 80a3 	beq.w	8003d56 <_printf_i+0x16e>
 8003c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c18:	e03a      	b.n	8003c90 <_printf_i+0xa8>
 8003c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c1e:	2b15      	cmp	r3, #21
 8003c20:	d8f6      	bhi.n	8003c10 <_printf_i+0x28>
 8003c22:	a101      	add	r1, pc, #4	; (adr r1, 8003c28 <_printf_i+0x40>)
 8003c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c28:	08003c81 	.word	0x08003c81
 8003c2c:	08003c95 	.word	0x08003c95
 8003c30:	08003c11 	.word	0x08003c11
 8003c34:	08003c11 	.word	0x08003c11
 8003c38:	08003c11 	.word	0x08003c11
 8003c3c:	08003c11 	.word	0x08003c11
 8003c40:	08003c95 	.word	0x08003c95
 8003c44:	08003c11 	.word	0x08003c11
 8003c48:	08003c11 	.word	0x08003c11
 8003c4c:	08003c11 	.word	0x08003c11
 8003c50:	08003c11 	.word	0x08003c11
 8003c54:	08003da1 	.word	0x08003da1
 8003c58:	08003cc5 	.word	0x08003cc5
 8003c5c:	08003d83 	.word	0x08003d83
 8003c60:	08003c11 	.word	0x08003c11
 8003c64:	08003c11 	.word	0x08003c11
 8003c68:	08003dc3 	.word	0x08003dc3
 8003c6c:	08003c11 	.word	0x08003c11
 8003c70:	08003cc5 	.word	0x08003cc5
 8003c74:	08003c11 	.word	0x08003c11
 8003c78:	08003c11 	.word	0x08003c11
 8003c7c:	08003d8b 	.word	0x08003d8b
 8003c80:	682b      	ldr	r3, [r5, #0]
 8003c82:	1d1a      	adds	r2, r3, #4
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	602a      	str	r2, [r5, #0]
 8003c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0a3      	b.n	8003ddc <_printf_i+0x1f4>
 8003c94:	6820      	ldr	r0, [r4, #0]
 8003c96:	6829      	ldr	r1, [r5, #0]
 8003c98:	0606      	lsls	r6, r0, #24
 8003c9a:	f101 0304 	add.w	r3, r1, #4
 8003c9e:	d50a      	bpl.n	8003cb6 <_printf_i+0xce>
 8003ca0:	680e      	ldr	r6, [r1, #0]
 8003ca2:	602b      	str	r3, [r5, #0]
 8003ca4:	2e00      	cmp	r6, #0
 8003ca6:	da03      	bge.n	8003cb0 <_printf_i+0xc8>
 8003ca8:	232d      	movs	r3, #45	; 0x2d
 8003caa:	4276      	negs	r6, r6
 8003cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cb0:	485e      	ldr	r0, [pc, #376]	; (8003e2c <_printf_i+0x244>)
 8003cb2:	230a      	movs	r3, #10
 8003cb4:	e019      	b.n	8003cea <_printf_i+0x102>
 8003cb6:	680e      	ldr	r6, [r1, #0]
 8003cb8:	602b      	str	r3, [r5, #0]
 8003cba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cbe:	bf18      	it	ne
 8003cc0:	b236      	sxthne	r6, r6
 8003cc2:	e7ef      	b.n	8003ca4 <_printf_i+0xbc>
 8003cc4:	682b      	ldr	r3, [r5, #0]
 8003cc6:	6820      	ldr	r0, [r4, #0]
 8003cc8:	1d19      	adds	r1, r3, #4
 8003cca:	6029      	str	r1, [r5, #0]
 8003ccc:	0601      	lsls	r1, r0, #24
 8003cce:	d501      	bpl.n	8003cd4 <_printf_i+0xec>
 8003cd0:	681e      	ldr	r6, [r3, #0]
 8003cd2:	e002      	b.n	8003cda <_printf_i+0xf2>
 8003cd4:	0646      	lsls	r6, r0, #25
 8003cd6:	d5fb      	bpl.n	8003cd0 <_printf_i+0xe8>
 8003cd8:	881e      	ldrh	r6, [r3, #0]
 8003cda:	4854      	ldr	r0, [pc, #336]	; (8003e2c <_printf_i+0x244>)
 8003cdc:	2f6f      	cmp	r7, #111	; 0x6f
 8003cde:	bf0c      	ite	eq
 8003ce0:	2308      	moveq	r3, #8
 8003ce2:	230a      	movne	r3, #10
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cea:	6865      	ldr	r5, [r4, #4]
 8003cec:	60a5      	str	r5, [r4, #8]
 8003cee:	2d00      	cmp	r5, #0
 8003cf0:	bfa2      	ittt	ge
 8003cf2:	6821      	ldrge	r1, [r4, #0]
 8003cf4:	f021 0104 	bicge.w	r1, r1, #4
 8003cf8:	6021      	strge	r1, [r4, #0]
 8003cfa:	b90e      	cbnz	r6, 8003d00 <_printf_i+0x118>
 8003cfc:	2d00      	cmp	r5, #0
 8003cfe:	d04d      	beq.n	8003d9c <_printf_i+0x1b4>
 8003d00:	4615      	mov	r5, r2
 8003d02:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d06:	fb03 6711 	mls	r7, r3, r1, r6
 8003d0a:	5dc7      	ldrb	r7, [r0, r7]
 8003d0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d10:	4637      	mov	r7, r6
 8003d12:	42bb      	cmp	r3, r7
 8003d14:	460e      	mov	r6, r1
 8003d16:	d9f4      	bls.n	8003d02 <_printf_i+0x11a>
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d10b      	bne.n	8003d34 <_printf_i+0x14c>
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	07de      	lsls	r6, r3, #31
 8003d20:	d508      	bpl.n	8003d34 <_printf_i+0x14c>
 8003d22:	6923      	ldr	r3, [r4, #16]
 8003d24:	6861      	ldr	r1, [r4, #4]
 8003d26:	4299      	cmp	r1, r3
 8003d28:	bfde      	ittt	le
 8003d2a:	2330      	movle	r3, #48	; 0x30
 8003d2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d34:	1b52      	subs	r2, r2, r5
 8003d36:	6122      	str	r2, [r4, #16]
 8003d38:	f8cd a000 	str.w	sl, [sp]
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	aa03      	add	r2, sp, #12
 8003d40:	4621      	mov	r1, r4
 8003d42:	4640      	mov	r0, r8
 8003d44:	f7ff fee2 	bl	8003b0c <_printf_common>
 8003d48:	3001      	adds	r0, #1
 8003d4a:	d14c      	bne.n	8003de6 <_printf_i+0x1fe>
 8003d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d50:	b004      	add	sp, #16
 8003d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d56:	4835      	ldr	r0, [pc, #212]	; (8003e2c <_printf_i+0x244>)
 8003d58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d5c:	6829      	ldr	r1, [r5, #0]
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d64:	6029      	str	r1, [r5, #0]
 8003d66:	061d      	lsls	r5, r3, #24
 8003d68:	d514      	bpl.n	8003d94 <_printf_i+0x1ac>
 8003d6a:	07df      	lsls	r7, r3, #31
 8003d6c:	bf44      	itt	mi
 8003d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d72:	6023      	strmi	r3, [r4, #0]
 8003d74:	b91e      	cbnz	r6, 8003d7e <_printf_i+0x196>
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	f023 0320 	bic.w	r3, r3, #32
 8003d7c:	6023      	str	r3, [r4, #0]
 8003d7e:	2310      	movs	r3, #16
 8003d80:	e7b0      	b.n	8003ce4 <_printf_i+0xfc>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	f043 0320 	orr.w	r3, r3, #32
 8003d88:	6023      	str	r3, [r4, #0]
 8003d8a:	2378      	movs	r3, #120	; 0x78
 8003d8c:	4828      	ldr	r0, [pc, #160]	; (8003e30 <_printf_i+0x248>)
 8003d8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d92:	e7e3      	b.n	8003d5c <_printf_i+0x174>
 8003d94:	0659      	lsls	r1, r3, #25
 8003d96:	bf48      	it	mi
 8003d98:	b2b6      	uxthmi	r6, r6
 8003d9a:	e7e6      	b.n	8003d6a <_printf_i+0x182>
 8003d9c:	4615      	mov	r5, r2
 8003d9e:	e7bb      	b.n	8003d18 <_printf_i+0x130>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	6826      	ldr	r6, [r4, #0]
 8003da4:	6961      	ldr	r1, [r4, #20]
 8003da6:	1d18      	adds	r0, r3, #4
 8003da8:	6028      	str	r0, [r5, #0]
 8003daa:	0635      	lsls	r5, r6, #24
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	d501      	bpl.n	8003db4 <_printf_i+0x1cc>
 8003db0:	6019      	str	r1, [r3, #0]
 8003db2:	e002      	b.n	8003dba <_printf_i+0x1d2>
 8003db4:	0670      	lsls	r0, r6, #25
 8003db6:	d5fb      	bpl.n	8003db0 <_printf_i+0x1c8>
 8003db8:	8019      	strh	r1, [r3, #0]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	6123      	str	r3, [r4, #16]
 8003dbe:	4615      	mov	r5, r2
 8003dc0:	e7ba      	b.n	8003d38 <_printf_i+0x150>
 8003dc2:	682b      	ldr	r3, [r5, #0]
 8003dc4:	1d1a      	adds	r2, r3, #4
 8003dc6:	602a      	str	r2, [r5, #0]
 8003dc8:	681d      	ldr	r5, [r3, #0]
 8003dca:	6862      	ldr	r2, [r4, #4]
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4628      	mov	r0, r5
 8003dd0:	f7fc f9fe 	bl	80001d0 <memchr>
 8003dd4:	b108      	cbz	r0, 8003dda <_printf_i+0x1f2>
 8003dd6:	1b40      	subs	r0, r0, r5
 8003dd8:	6060      	str	r0, [r4, #4]
 8003dda:	6863      	ldr	r3, [r4, #4]
 8003ddc:	6123      	str	r3, [r4, #16]
 8003dde:	2300      	movs	r3, #0
 8003de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003de4:	e7a8      	b.n	8003d38 <_printf_i+0x150>
 8003de6:	6923      	ldr	r3, [r4, #16]
 8003de8:	462a      	mov	r2, r5
 8003dea:	4649      	mov	r1, r9
 8003dec:	4640      	mov	r0, r8
 8003dee:	47d0      	blx	sl
 8003df0:	3001      	adds	r0, #1
 8003df2:	d0ab      	beq.n	8003d4c <_printf_i+0x164>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	079b      	lsls	r3, r3, #30
 8003df8:	d413      	bmi.n	8003e22 <_printf_i+0x23a>
 8003dfa:	68e0      	ldr	r0, [r4, #12]
 8003dfc:	9b03      	ldr	r3, [sp, #12]
 8003dfe:	4298      	cmp	r0, r3
 8003e00:	bfb8      	it	lt
 8003e02:	4618      	movlt	r0, r3
 8003e04:	e7a4      	b.n	8003d50 <_printf_i+0x168>
 8003e06:	2301      	movs	r3, #1
 8003e08:	4632      	mov	r2, r6
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	4640      	mov	r0, r8
 8003e0e:	47d0      	blx	sl
 8003e10:	3001      	adds	r0, #1
 8003e12:	d09b      	beq.n	8003d4c <_printf_i+0x164>
 8003e14:	3501      	adds	r5, #1
 8003e16:	68e3      	ldr	r3, [r4, #12]
 8003e18:	9903      	ldr	r1, [sp, #12]
 8003e1a:	1a5b      	subs	r3, r3, r1
 8003e1c:	42ab      	cmp	r3, r5
 8003e1e:	dcf2      	bgt.n	8003e06 <_printf_i+0x21e>
 8003e20:	e7eb      	b.n	8003dfa <_printf_i+0x212>
 8003e22:	2500      	movs	r5, #0
 8003e24:	f104 0619 	add.w	r6, r4, #25
 8003e28:	e7f5      	b.n	8003e16 <_printf_i+0x22e>
 8003e2a:	bf00      	nop
 8003e2c:	08004501 	.word	0x08004501
 8003e30:	08004512 	.word	0x08004512

08003e34 <_sbrk_r>:
 8003e34:	b538      	push	{r3, r4, r5, lr}
 8003e36:	4d06      	ldr	r5, [pc, #24]	; (8003e50 <_sbrk_r+0x1c>)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	602b      	str	r3, [r5, #0]
 8003e40:	f7fc fdda 	bl	80009f8 <_sbrk>
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	d102      	bne.n	8003e4e <_sbrk_r+0x1a>
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	b103      	cbz	r3, 8003e4e <_sbrk_r+0x1a>
 8003e4c:	6023      	str	r3, [r4, #0]
 8003e4e:	bd38      	pop	{r3, r4, r5, pc}
 8003e50:	20000268 	.word	0x20000268

08003e54 <__sread>:
 8003e54:	b510      	push	{r4, lr}
 8003e56:	460c      	mov	r4, r1
 8003e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e5c:	f000 fab2 	bl	80043c4 <_read_r>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	bfab      	itete	ge
 8003e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e66:	89a3      	ldrhlt	r3, [r4, #12]
 8003e68:	181b      	addge	r3, r3, r0
 8003e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e6e:	bfac      	ite	ge
 8003e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e72:	81a3      	strhlt	r3, [r4, #12]
 8003e74:	bd10      	pop	{r4, pc}

08003e76 <__swrite>:
 8003e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7a:	461f      	mov	r7, r3
 8003e7c:	898b      	ldrh	r3, [r1, #12]
 8003e7e:	05db      	lsls	r3, r3, #23
 8003e80:	4605      	mov	r5, r0
 8003e82:	460c      	mov	r4, r1
 8003e84:	4616      	mov	r6, r2
 8003e86:	d505      	bpl.n	8003e94 <__swrite+0x1e>
 8003e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f000 f9c8 	bl	8004224 <_lseek_r>
 8003e94:	89a3      	ldrh	r3, [r4, #12]
 8003e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e9e:	81a3      	strh	r3, [r4, #12]
 8003ea0:	4632      	mov	r2, r6
 8003ea2:	463b      	mov	r3, r7
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eaa:	f000 b869 	b.w	8003f80 <_write_r>

08003eae <__sseek>:
 8003eae:	b510      	push	{r4, lr}
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb6:	f000 f9b5 	bl	8004224 <_lseek_r>
 8003eba:	1c43      	adds	r3, r0, #1
 8003ebc:	89a3      	ldrh	r3, [r4, #12]
 8003ebe:	bf15      	itete	ne
 8003ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003eca:	81a3      	strheq	r3, [r4, #12]
 8003ecc:	bf18      	it	ne
 8003ece:	81a3      	strhne	r3, [r4, #12]
 8003ed0:	bd10      	pop	{r4, pc}

08003ed2 <__sclose>:
 8003ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed6:	f000 b8d3 	b.w	8004080 <_close_r>
	...

08003edc <__swbuf_r>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	460e      	mov	r6, r1
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	4605      	mov	r5, r0
 8003ee4:	b118      	cbz	r0, 8003eee <__swbuf_r+0x12>
 8003ee6:	6983      	ldr	r3, [r0, #24]
 8003ee8:	b90b      	cbnz	r3, 8003eee <__swbuf_r+0x12>
 8003eea:	f7ff fb81 	bl	80035f0 <__sinit>
 8003eee:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <__swbuf_r+0x98>)
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	d12b      	bne.n	8003f4c <__swbuf_r+0x70>
 8003ef4:	686c      	ldr	r4, [r5, #4]
 8003ef6:	69a3      	ldr	r3, [r4, #24]
 8003ef8:	60a3      	str	r3, [r4, #8]
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	071a      	lsls	r2, r3, #28
 8003efe:	d52f      	bpl.n	8003f60 <__swbuf_r+0x84>
 8003f00:	6923      	ldr	r3, [r4, #16]
 8003f02:	b36b      	cbz	r3, 8003f60 <__swbuf_r+0x84>
 8003f04:	6923      	ldr	r3, [r4, #16]
 8003f06:	6820      	ldr	r0, [r4, #0]
 8003f08:	1ac0      	subs	r0, r0, r3
 8003f0a:	6963      	ldr	r3, [r4, #20]
 8003f0c:	b2f6      	uxtb	r6, r6
 8003f0e:	4283      	cmp	r3, r0
 8003f10:	4637      	mov	r7, r6
 8003f12:	dc04      	bgt.n	8003f1e <__swbuf_r+0x42>
 8003f14:	4621      	mov	r1, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 f948 	bl	80041ac <_fflush_r>
 8003f1c:	bb30      	cbnz	r0, 8003f6c <__swbuf_r+0x90>
 8003f1e:	68a3      	ldr	r3, [r4, #8]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	60a3      	str	r3, [r4, #8]
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	6022      	str	r2, [r4, #0]
 8003f2a:	701e      	strb	r6, [r3, #0]
 8003f2c:	6963      	ldr	r3, [r4, #20]
 8003f2e:	3001      	adds	r0, #1
 8003f30:	4283      	cmp	r3, r0
 8003f32:	d004      	beq.n	8003f3e <__swbuf_r+0x62>
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	07db      	lsls	r3, r3, #31
 8003f38:	d506      	bpl.n	8003f48 <__swbuf_r+0x6c>
 8003f3a:	2e0a      	cmp	r6, #10
 8003f3c:	d104      	bne.n	8003f48 <__swbuf_r+0x6c>
 8003f3e:	4621      	mov	r1, r4
 8003f40:	4628      	mov	r0, r5
 8003f42:	f000 f933 	bl	80041ac <_fflush_r>
 8003f46:	b988      	cbnz	r0, 8003f6c <__swbuf_r+0x90>
 8003f48:	4638      	mov	r0, r7
 8003f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <__swbuf_r+0x9c>)
 8003f4e:	429c      	cmp	r4, r3
 8003f50:	d101      	bne.n	8003f56 <__swbuf_r+0x7a>
 8003f52:	68ac      	ldr	r4, [r5, #8]
 8003f54:	e7cf      	b.n	8003ef6 <__swbuf_r+0x1a>
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <__swbuf_r+0xa0>)
 8003f58:	429c      	cmp	r4, r3
 8003f5a:	bf08      	it	eq
 8003f5c:	68ec      	ldreq	r4, [r5, #12]
 8003f5e:	e7ca      	b.n	8003ef6 <__swbuf_r+0x1a>
 8003f60:	4621      	mov	r1, r4
 8003f62:	4628      	mov	r0, r5
 8003f64:	f000 f81e 	bl	8003fa4 <__swsetup_r>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	d0cb      	beq.n	8003f04 <__swbuf_r+0x28>
 8003f6c:	f04f 37ff 	mov.w	r7, #4294967295
 8003f70:	e7ea      	b.n	8003f48 <__swbuf_r+0x6c>
 8003f72:	bf00      	nop
 8003f74:	080044b0 	.word	0x080044b0
 8003f78:	080044d0 	.word	0x080044d0
 8003f7c:	08004490 	.word	0x08004490

08003f80 <_write_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4d07      	ldr	r5, [pc, #28]	; (8003fa0 <_write_r+0x20>)
 8003f84:	4604      	mov	r4, r0
 8003f86:	4608      	mov	r0, r1
 8003f88:	4611      	mov	r1, r2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	602a      	str	r2, [r5, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f7fc f96e 	bl	8000270 <_write>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_write_r+0x1e>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_write_r+0x1e>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	20000268 	.word	0x20000268

08003fa4 <__swsetup_r>:
 8003fa4:	4b32      	ldr	r3, [pc, #200]	; (8004070 <__swsetup_r+0xcc>)
 8003fa6:	b570      	push	{r4, r5, r6, lr}
 8003fa8:	681d      	ldr	r5, [r3, #0]
 8003faa:	4606      	mov	r6, r0
 8003fac:	460c      	mov	r4, r1
 8003fae:	b125      	cbz	r5, 8003fba <__swsetup_r+0x16>
 8003fb0:	69ab      	ldr	r3, [r5, #24]
 8003fb2:	b913      	cbnz	r3, 8003fba <__swsetup_r+0x16>
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	f7ff fb1b 	bl	80035f0 <__sinit>
 8003fba:	4b2e      	ldr	r3, [pc, #184]	; (8004074 <__swsetup_r+0xd0>)
 8003fbc:	429c      	cmp	r4, r3
 8003fbe:	d10f      	bne.n	8003fe0 <__swsetup_r+0x3c>
 8003fc0:	686c      	ldr	r4, [r5, #4]
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fc8:	0719      	lsls	r1, r3, #28
 8003fca:	d42c      	bmi.n	8004026 <__swsetup_r+0x82>
 8003fcc:	06dd      	lsls	r5, r3, #27
 8003fce:	d411      	bmi.n	8003ff4 <__swsetup_r+0x50>
 8003fd0:	2309      	movs	r3, #9
 8003fd2:	6033      	str	r3, [r6, #0]
 8003fd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fd8:	81a3      	strh	r3, [r4, #12]
 8003fda:	f04f 30ff 	mov.w	r0, #4294967295
 8003fde:	e03e      	b.n	800405e <__swsetup_r+0xba>
 8003fe0:	4b25      	ldr	r3, [pc, #148]	; (8004078 <__swsetup_r+0xd4>)
 8003fe2:	429c      	cmp	r4, r3
 8003fe4:	d101      	bne.n	8003fea <__swsetup_r+0x46>
 8003fe6:	68ac      	ldr	r4, [r5, #8]
 8003fe8:	e7eb      	b.n	8003fc2 <__swsetup_r+0x1e>
 8003fea:	4b24      	ldr	r3, [pc, #144]	; (800407c <__swsetup_r+0xd8>)
 8003fec:	429c      	cmp	r4, r3
 8003fee:	bf08      	it	eq
 8003ff0:	68ec      	ldreq	r4, [r5, #12]
 8003ff2:	e7e6      	b.n	8003fc2 <__swsetup_r+0x1e>
 8003ff4:	0758      	lsls	r0, r3, #29
 8003ff6:	d512      	bpl.n	800401e <__swsetup_r+0x7a>
 8003ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ffa:	b141      	cbz	r1, 800400e <__swsetup_r+0x6a>
 8003ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004000:	4299      	cmp	r1, r3
 8004002:	d002      	beq.n	800400a <__swsetup_r+0x66>
 8004004:	4630      	mov	r0, r6
 8004006:	f000 f991 	bl	800432c <_free_r>
 800400a:	2300      	movs	r3, #0
 800400c:	6363      	str	r3, [r4, #52]	; 0x34
 800400e:	89a3      	ldrh	r3, [r4, #12]
 8004010:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004014:	81a3      	strh	r3, [r4, #12]
 8004016:	2300      	movs	r3, #0
 8004018:	6063      	str	r3, [r4, #4]
 800401a:	6923      	ldr	r3, [r4, #16]
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	f043 0308 	orr.w	r3, r3, #8
 8004024:	81a3      	strh	r3, [r4, #12]
 8004026:	6923      	ldr	r3, [r4, #16]
 8004028:	b94b      	cbnz	r3, 800403e <__swsetup_r+0x9a>
 800402a:	89a3      	ldrh	r3, [r4, #12]
 800402c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004034:	d003      	beq.n	800403e <__swsetup_r+0x9a>
 8004036:	4621      	mov	r1, r4
 8004038:	4630      	mov	r0, r6
 800403a:	f000 f92b 	bl	8004294 <__smakebuf_r>
 800403e:	89a0      	ldrh	r0, [r4, #12]
 8004040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004044:	f010 0301 	ands.w	r3, r0, #1
 8004048:	d00a      	beq.n	8004060 <__swsetup_r+0xbc>
 800404a:	2300      	movs	r3, #0
 800404c:	60a3      	str	r3, [r4, #8]
 800404e:	6963      	ldr	r3, [r4, #20]
 8004050:	425b      	negs	r3, r3
 8004052:	61a3      	str	r3, [r4, #24]
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	b943      	cbnz	r3, 800406a <__swsetup_r+0xc6>
 8004058:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800405c:	d1ba      	bne.n	8003fd4 <__swsetup_r+0x30>
 800405e:	bd70      	pop	{r4, r5, r6, pc}
 8004060:	0781      	lsls	r1, r0, #30
 8004062:	bf58      	it	pl
 8004064:	6963      	ldrpl	r3, [r4, #20]
 8004066:	60a3      	str	r3, [r4, #8]
 8004068:	e7f4      	b.n	8004054 <__swsetup_r+0xb0>
 800406a:	2000      	movs	r0, #0
 800406c:	e7f7      	b.n	800405e <__swsetup_r+0xba>
 800406e:	bf00      	nop
 8004070:	2000000c 	.word	0x2000000c
 8004074:	080044b0 	.word	0x080044b0
 8004078:	080044d0 	.word	0x080044d0
 800407c:	08004490 	.word	0x08004490

08004080 <_close_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4d06      	ldr	r5, [pc, #24]	; (800409c <_close_r+0x1c>)
 8004084:	2300      	movs	r3, #0
 8004086:	4604      	mov	r4, r0
 8004088:	4608      	mov	r0, r1
 800408a:	602b      	str	r3, [r5, #0]
 800408c:	f7fc fc7f 	bl	800098e <_close>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_close_r+0x1a>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_close_r+0x1a>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	20000268 	.word	0x20000268

080040a0 <__sflush_r>:
 80040a0:	898a      	ldrh	r2, [r1, #12]
 80040a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a6:	4605      	mov	r5, r0
 80040a8:	0710      	lsls	r0, r2, #28
 80040aa:	460c      	mov	r4, r1
 80040ac:	d458      	bmi.n	8004160 <__sflush_r+0xc0>
 80040ae:	684b      	ldr	r3, [r1, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	dc05      	bgt.n	80040c0 <__sflush_r+0x20>
 80040b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	dc02      	bgt.n	80040c0 <__sflush_r+0x20>
 80040ba:	2000      	movs	r0, #0
 80040bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040c2:	2e00      	cmp	r6, #0
 80040c4:	d0f9      	beq.n	80040ba <__sflush_r+0x1a>
 80040c6:	2300      	movs	r3, #0
 80040c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040cc:	682f      	ldr	r7, [r5, #0]
 80040ce:	602b      	str	r3, [r5, #0]
 80040d0:	d032      	beq.n	8004138 <__sflush_r+0x98>
 80040d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040d4:	89a3      	ldrh	r3, [r4, #12]
 80040d6:	075a      	lsls	r2, r3, #29
 80040d8:	d505      	bpl.n	80040e6 <__sflush_r+0x46>
 80040da:	6863      	ldr	r3, [r4, #4]
 80040dc:	1ac0      	subs	r0, r0, r3
 80040de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040e0:	b10b      	cbz	r3, 80040e6 <__sflush_r+0x46>
 80040e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040e4:	1ac0      	subs	r0, r0, r3
 80040e6:	2300      	movs	r3, #0
 80040e8:	4602      	mov	r2, r0
 80040ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040ec:	6a21      	ldr	r1, [r4, #32]
 80040ee:	4628      	mov	r0, r5
 80040f0:	47b0      	blx	r6
 80040f2:	1c43      	adds	r3, r0, #1
 80040f4:	89a3      	ldrh	r3, [r4, #12]
 80040f6:	d106      	bne.n	8004106 <__sflush_r+0x66>
 80040f8:	6829      	ldr	r1, [r5, #0]
 80040fa:	291d      	cmp	r1, #29
 80040fc:	d82c      	bhi.n	8004158 <__sflush_r+0xb8>
 80040fe:	4a2a      	ldr	r2, [pc, #168]	; (80041a8 <__sflush_r+0x108>)
 8004100:	40ca      	lsrs	r2, r1
 8004102:	07d6      	lsls	r6, r2, #31
 8004104:	d528      	bpl.n	8004158 <__sflush_r+0xb8>
 8004106:	2200      	movs	r2, #0
 8004108:	6062      	str	r2, [r4, #4]
 800410a:	04d9      	lsls	r1, r3, #19
 800410c:	6922      	ldr	r2, [r4, #16]
 800410e:	6022      	str	r2, [r4, #0]
 8004110:	d504      	bpl.n	800411c <__sflush_r+0x7c>
 8004112:	1c42      	adds	r2, r0, #1
 8004114:	d101      	bne.n	800411a <__sflush_r+0x7a>
 8004116:	682b      	ldr	r3, [r5, #0]
 8004118:	b903      	cbnz	r3, 800411c <__sflush_r+0x7c>
 800411a:	6560      	str	r0, [r4, #84]	; 0x54
 800411c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800411e:	602f      	str	r7, [r5, #0]
 8004120:	2900      	cmp	r1, #0
 8004122:	d0ca      	beq.n	80040ba <__sflush_r+0x1a>
 8004124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004128:	4299      	cmp	r1, r3
 800412a:	d002      	beq.n	8004132 <__sflush_r+0x92>
 800412c:	4628      	mov	r0, r5
 800412e:	f000 f8fd 	bl	800432c <_free_r>
 8004132:	2000      	movs	r0, #0
 8004134:	6360      	str	r0, [r4, #52]	; 0x34
 8004136:	e7c1      	b.n	80040bc <__sflush_r+0x1c>
 8004138:	6a21      	ldr	r1, [r4, #32]
 800413a:	2301      	movs	r3, #1
 800413c:	4628      	mov	r0, r5
 800413e:	47b0      	blx	r6
 8004140:	1c41      	adds	r1, r0, #1
 8004142:	d1c7      	bne.n	80040d4 <__sflush_r+0x34>
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0c4      	beq.n	80040d4 <__sflush_r+0x34>
 800414a:	2b1d      	cmp	r3, #29
 800414c:	d001      	beq.n	8004152 <__sflush_r+0xb2>
 800414e:	2b16      	cmp	r3, #22
 8004150:	d101      	bne.n	8004156 <__sflush_r+0xb6>
 8004152:	602f      	str	r7, [r5, #0]
 8004154:	e7b1      	b.n	80040ba <__sflush_r+0x1a>
 8004156:	89a3      	ldrh	r3, [r4, #12]
 8004158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800415c:	81a3      	strh	r3, [r4, #12]
 800415e:	e7ad      	b.n	80040bc <__sflush_r+0x1c>
 8004160:	690f      	ldr	r7, [r1, #16]
 8004162:	2f00      	cmp	r7, #0
 8004164:	d0a9      	beq.n	80040ba <__sflush_r+0x1a>
 8004166:	0793      	lsls	r3, r2, #30
 8004168:	680e      	ldr	r6, [r1, #0]
 800416a:	bf08      	it	eq
 800416c:	694b      	ldreq	r3, [r1, #20]
 800416e:	600f      	str	r7, [r1, #0]
 8004170:	bf18      	it	ne
 8004172:	2300      	movne	r3, #0
 8004174:	eba6 0807 	sub.w	r8, r6, r7
 8004178:	608b      	str	r3, [r1, #8]
 800417a:	f1b8 0f00 	cmp.w	r8, #0
 800417e:	dd9c      	ble.n	80040ba <__sflush_r+0x1a>
 8004180:	6a21      	ldr	r1, [r4, #32]
 8004182:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004184:	4643      	mov	r3, r8
 8004186:	463a      	mov	r2, r7
 8004188:	4628      	mov	r0, r5
 800418a:	47b0      	blx	r6
 800418c:	2800      	cmp	r0, #0
 800418e:	dc06      	bgt.n	800419e <__sflush_r+0xfe>
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004196:	81a3      	strh	r3, [r4, #12]
 8004198:	f04f 30ff 	mov.w	r0, #4294967295
 800419c:	e78e      	b.n	80040bc <__sflush_r+0x1c>
 800419e:	4407      	add	r7, r0
 80041a0:	eba8 0800 	sub.w	r8, r8, r0
 80041a4:	e7e9      	b.n	800417a <__sflush_r+0xda>
 80041a6:	bf00      	nop
 80041a8:	20400001 	.word	0x20400001

080041ac <_fflush_r>:
 80041ac:	b538      	push	{r3, r4, r5, lr}
 80041ae:	690b      	ldr	r3, [r1, #16]
 80041b0:	4605      	mov	r5, r0
 80041b2:	460c      	mov	r4, r1
 80041b4:	b913      	cbnz	r3, 80041bc <_fflush_r+0x10>
 80041b6:	2500      	movs	r5, #0
 80041b8:	4628      	mov	r0, r5
 80041ba:	bd38      	pop	{r3, r4, r5, pc}
 80041bc:	b118      	cbz	r0, 80041c6 <_fflush_r+0x1a>
 80041be:	6983      	ldr	r3, [r0, #24]
 80041c0:	b90b      	cbnz	r3, 80041c6 <_fflush_r+0x1a>
 80041c2:	f7ff fa15 	bl	80035f0 <__sinit>
 80041c6:	4b14      	ldr	r3, [pc, #80]	; (8004218 <_fflush_r+0x6c>)
 80041c8:	429c      	cmp	r4, r3
 80041ca:	d11b      	bne.n	8004204 <_fflush_r+0x58>
 80041cc:	686c      	ldr	r4, [r5, #4]
 80041ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0ef      	beq.n	80041b6 <_fflush_r+0xa>
 80041d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041d8:	07d0      	lsls	r0, r2, #31
 80041da:	d404      	bmi.n	80041e6 <_fflush_r+0x3a>
 80041dc:	0599      	lsls	r1, r3, #22
 80041de:	d402      	bmi.n	80041e6 <_fflush_r+0x3a>
 80041e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041e2:	f7ff faa3 	bl	800372c <__retarget_lock_acquire_recursive>
 80041e6:	4628      	mov	r0, r5
 80041e8:	4621      	mov	r1, r4
 80041ea:	f7ff ff59 	bl	80040a0 <__sflush_r>
 80041ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041f0:	07da      	lsls	r2, r3, #31
 80041f2:	4605      	mov	r5, r0
 80041f4:	d4e0      	bmi.n	80041b8 <_fflush_r+0xc>
 80041f6:	89a3      	ldrh	r3, [r4, #12]
 80041f8:	059b      	lsls	r3, r3, #22
 80041fa:	d4dd      	bmi.n	80041b8 <_fflush_r+0xc>
 80041fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041fe:	f7ff fa96 	bl	800372e <__retarget_lock_release_recursive>
 8004202:	e7d9      	b.n	80041b8 <_fflush_r+0xc>
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <_fflush_r+0x70>)
 8004206:	429c      	cmp	r4, r3
 8004208:	d101      	bne.n	800420e <_fflush_r+0x62>
 800420a:	68ac      	ldr	r4, [r5, #8]
 800420c:	e7df      	b.n	80041ce <_fflush_r+0x22>
 800420e:	4b04      	ldr	r3, [pc, #16]	; (8004220 <_fflush_r+0x74>)
 8004210:	429c      	cmp	r4, r3
 8004212:	bf08      	it	eq
 8004214:	68ec      	ldreq	r4, [r5, #12]
 8004216:	e7da      	b.n	80041ce <_fflush_r+0x22>
 8004218:	080044b0 	.word	0x080044b0
 800421c:	080044d0 	.word	0x080044d0
 8004220:	08004490 	.word	0x08004490

08004224 <_lseek_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	4d07      	ldr	r5, [pc, #28]	; (8004244 <_lseek_r+0x20>)
 8004228:	4604      	mov	r4, r0
 800422a:	4608      	mov	r0, r1
 800422c:	4611      	mov	r1, r2
 800422e:	2200      	movs	r2, #0
 8004230:	602a      	str	r2, [r5, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	f7fc fbd2 	bl	80009dc <_lseek>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d102      	bne.n	8004242 <_lseek_r+0x1e>
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	b103      	cbz	r3, 8004242 <_lseek_r+0x1e>
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	bd38      	pop	{r3, r4, r5, pc}
 8004244:	20000268 	.word	0x20000268

08004248 <__swhatbuf_r>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	460e      	mov	r6, r1
 800424c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004250:	2900      	cmp	r1, #0
 8004252:	b096      	sub	sp, #88	; 0x58
 8004254:	4614      	mov	r4, r2
 8004256:	461d      	mov	r5, r3
 8004258:	da08      	bge.n	800426c <__swhatbuf_r+0x24>
 800425a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	602a      	str	r2, [r5, #0]
 8004262:	061a      	lsls	r2, r3, #24
 8004264:	d410      	bmi.n	8004288 <__swhatbuf_r+0x40>
 8004266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800426a:	e00e      	b.n	800428a <__swhatbuf_r+0x42>
 800426c:	466a      	mov	r2, sp
 800426e:	f000 f8bb 	bl	80043e8 <_fstat_r>
 8004272:	2800      	cmp	r0, #0
 8004274:	dbf1      	blt.n	800425a <__swhatbuf_r+0x12>
 8004276:	9a01      	ldr	r2, [sp, #4]
 8004278:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800427c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004280:	425a      	negs	r2, r3
 8004282:	415a      	adcs	r2, r3
 8004284:	602a      	str	r2, [r5, #0]
 8004286:	e7ee      	b.n	8004266 <__swhatbuf_r+0x1e>
 8004288:	2340      	movs	r3, #64	; 0x40
 800428a:	2000      	movs	r0, #0
 800428c:	6023      	str	r3, [r4, #0]
 800428e:	b016      	add	sp, #88	; 0x58
 8004290:	bd70      	pop	{r4, r5, r6, pc}
	...

08004294 <__smakebuf_r>:
 8004294:	898b      	ldrh	r3, [r1, #12]
 8004296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004298:	079d      	lsls	r5, r3, #30
 800429a:	4606      	mov	r6, r0
 800429c:	460c      	mov	r4, r1
 800429e:	d507      	bpl.n	80042b0 <__smakebuf_r+0x1c>
 80042a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	6123      	str	r3, [r4, #16]
 80042a8:	2301      	movs	r3, #1
 80042aa:	6163      	str	r3, [r4, #20]
 80042ac:	b002      	add	sp, #8
 80042ae:	bd70      	pop	{r4, r5, r6, pc}
 80042b0:	ab01      	add	r3, sp, #4
 80042b2:	466a      	mov	r2, sp
 80042b4:	f7ff ffc8 	bl	8004248 <__swhatbuf_r>
 80042b8:	9900      	ldr	r1, [sp, #0]
 80042ba:	4605      	mov	r5, r0
 80042bc:	4630      	mov	r0, r6
 80042be:	f7ff fa57 	bl	8003770 <_malloc_r>
 80042c2:	b948      	cbnz	r0, 80042d8 <__smakebuf_r+0x44>
 80042c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042c8:	059a      	lsls	r2, r3, #22
 80042ca:	d4ef      	bmi.n	80042ac <__smakebuf_r+0x18>
 80042cc:	f023 0303 	bic.w	r3, r3, #3
 80042d0:	f043 0302 	orr.w	r3, r3, #2
 80042d4:	81a3      	strh	r3, [r4, #12]
 80042d6:	e7e3      	b.n	80042a0 <__smakebuf_r+0xc>
 80042d8:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <__smakebuf_r+0x7c>)
 80042da:	62b3      	str	r3, [r6, #40]	; 0x28
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	6020      	str	r0, [r4, #0]
 80042e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e4:	81a3      	strh	r3, [r4, #12]
 80042e6:	9b00      	ldr	r3, [sp, #0]
 80042e8:	6163      	str	r3, [r4, #20]
 80042ea:	9b01      	ldr	r3, [sp, #4]
 80042ec:	6120      	str	r0, [r4, #16]
 80042ee:	b15b      	cbz	r3, 8004308 <__smakebuf_r+0x74>
 80042f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042f4:	4630      	mov	r0, r6
 80042f6:	f000 f889 	bl	800440c <_isatty_r>
 80042fa:	b128      	cbz	r0, 8004308 <__smakebuf_r+0x74>
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	f023 0303 	bic.w	r3, r3, #3
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	81a3      	strh	r3, [r4, #12]
 8004308:	89a0      	ldrh	r0, [r4, #12]
 800430a:	4305      	orrs	r5, r0
 800430c:	81a5      	strh	r5, [r4, #12]
 800430e:	e7cd      	b.n	80042ac <__smakebuf_r+0x18>
 8004310:	08003589 	.word	0x08003589

08004314 <__malloc_lock>:
 8004314:	4801      	ldr	r0, [pc, #4]	; (800431c <__malloc_lock+0x8>)
 8004316:	f7ff ba09 	b.w	800372c <__retarget_lock_acquire_recursive>
 800431a:	bf00      	nop
 800431c:	2000025c 	.word	0x2000025c

08004320 <__malloc_unlock>:
 8004320:	4801      	ldr	r0, [pc, #4]	; (8004328 <__malloc_unlock+0x8>)
 8004322:	f7ff ba04 	b.w	800372e <__retarget_lock_release_recursive>
 8004326:	bf00      	nop
 8004328:	2000025c 	.word	0x2000025c

0800432c <_free_r>:
 800432c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800432e:	2900      	cmp	r1, #0
 8004330:	d044      	beq.n	80043bc <_free_r+0x90>
 8004332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004336:	9001      	str	r0, [sp, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	f1a1 0404 	sub.w	r4, r1, #4
 800433e:	bfb8      	it	lt
 8004340:	18e4      	addlt	r4, r4, r3
 8004342:	f7ff ffe7 	bl	8004314 <__malloc_lock>
 8004346:	4a1e      	ldr	r2, [pc, #120]	; (80043c0 <_free_r+0x94>)
 8004348:	9801      	ldr	r0, [sp, #4]
 800434a:	6813      	ldr	r3, [r2, #0]
 800434c:	b933      	cbnz	r3, 800435c <_free_r+0x30>
 800434e:	6063      	str	r3, [r4, #4]
 8004350:	6014      	str	r4, [r2, #0]
 8004352:	b003      	add	sp, #12
 8004354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004358:	f7ff bfe2 	b.w	8004320 <__malloc_unlock>
 800435c:	42a3      	cmp	r3, r4
 800435e:	d908      	bls.n	8004372 <_free_r+0x46>
 8004360:	6825      	ldr	r5, [r4, #0]
 8004362:	1961      	adds	r1, r4, r5
 8004364:	428b      	cmp	r3, r1
 8004366:	bf01      	itttt	eq
 8004368:	6819      	ldreq	r1, [r3, #0]
 800436a:	685b      	ldreq	r3, [r3, #4]
 800436c:	1949      	addeq	r1, r1, r5
 800436e:	6021      	streq	r1, [r4, #0]
 8004370:	e7ed      	b.n	800434e <_free_r+0x22>
 8004372:	461a      	mov	r2, r3
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	b10b      	cbz	r3, 800437c <_free_r+0x50>
 8004378:	42a3      	cmp	r3, r4
 800437a:	d9fa      	bls.n	8004372 <_free_r+0x46>
 800437c:	6811      	ldr	r1, [r2, #0]
 800437e:	1855      	adds	r5, r2, r1
 8004380:	42a5      	cmp	r5, r4
 8004382:	d10b      	bne.n	800439c <_free_r+0x70>
 8004384:	6824      	ldr	r4, [r4, #0]
 8004386:	4421      	add	r1, r4
 8004388:	1854      	adds	r4, r2, r1
 800438a:	42a3      	cmp	r3, r4
 800438c:	6011      	str	r1, [r2, #0]
 800438e:	d1e0      	bne.n	8004352 <_free_r+0x26>
 8004390:	681c      	ldr	r4, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	6053      	str	r3, [r2, #4]
 8004396:	4421      	add	r1, r4
 8004398:	6011      	str	r1, [r2, #0]
 800439a:	e7da      	b.n	8004352 <_free_r+0x26>
 800439c:	d902      	bls.n	80043a4 <_free_r+0x78>
 800439e:	230c      	movs	r3, #12
 80043a0:	6003      	str	r3, [r0, #0]
 80043a2:	e7d6      	b.n	8004352 <_free_r+0x26>
 80043a4:	6825      	ldr	r5, [r4, #0]
 80043a6:	1961      	adds	r1, r4, r5
 80043a8:	428b      	cmp	r3, r1
 80043aa:	bf04      	itt	eq
 80043ac:	6819      	ldreq	r1, [r3, #0]
 80043ae:	685b      	ldreq	r3, [r3, #4]
 80043b0:	6063      	str	r3, [r4, #4]
 80043b2:	bf04      	itt	eq
 80043b4:	1949      	addeq	r1, r1, r5
 80043b6:	6021      	streq	r1, [r4, #0]
 80043b8:	6054      	str	r4, [r2, #4]
 80043ba:	e7ca      	b.n	8004352 <_free_r+0x26>
 80043bc:	b003      	add	sp, #12
 80043be:	bd30      	pop	{r4, r5, pc}
 80043c0:	20000260 	.word	0x20000260

080043c4 <_read_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4d07      	ldr	r5, [pc, #28]	; (80043e4 <_read_r+0x20>)
 80043c8:	4604      	mov	r4, r0
 80043ca:	4608      	mov	r0, r1
 80043cc:	4611      	mov	r1, r2
 80043ce:	2200      	movs	r2, #0
 80043d0:	602a      	str	r2, [r5, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f7fc fabe 	bl	8000954 <_read>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	d102      	bne.n	80043e2 <_read_r+0x1e>
 80043dc:	682b      	ldr	r3, [r5, #0]
 80043de:	b103      	cbz	r3, 80043e2 <_read_r+0x1e>
 80043e0:	6023      	str	r3, [r4, #0]
 80043e2:	bd38      	pop	{r3, r4, r5, pc}
 80043e4:	20000268 	.word	0x20000268

080043e8 <_fstat_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4d07      	ldr	r5, [pc, #28]	; (8004408 <_fstat_r+0x20>)
 80043ec:	2300      	movs	r3, #0
 80043ee:	4604      	mov	r4, r0
 80043f0:	4608      	mov	r0, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	602b      	str	r3, [r5, #0]
 80043f6:	f7fc fad6 	bl	80009a6 <_fstat>
 80043fa:	1c43      	adds	r3, r0, #1
 80043fc:	d102      	bne.n	8004404 <_fstat_r+0x1c>
 80043fe:	682b      	ldr	r3, [r5, #0]
 8004400:	b103      	cbz	r3, 8004404 <_fstat_r+0x1c>
 8004402:	6023      	str	r3, [r4, #0]
 8004404:	bd38      	pop	{r3, r4, r5, pc}
 8004406:	bf00      	nop
 8004408:	20000268 	.word	0x20000268

0800440c <_isatty_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4d06      	ldr	r5, [pc, #24]	; (8004428 <_isatty_r+0x1c>)
 8004410:	2300      	movs	r3, #0
 8004412:	4604      	mov	r4, r0
 8004414:	4608      	mov	r0, r1
 8004416:	602b      	str	r3, [r5, #0]
 8004418:	f7fc fad5 	bl	80009c6 <_isatty>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d102      	bne.n	8004426 <_isatty_r+0x1a>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	b103      	cbz	r3, 8004426 <_isatty_r+0x1a>
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	bd38      	pop	{r3, r4, r5, pc}
 8004428:	20000268 	.word	0x20000268

0800442c <_init>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr

08004438 <_fini>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	bf00      	nop
 800443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443e:	bc08      	pop	{r3}
 8004440:	469e      	mov	lr, r3
 8004442:	4770      	bx	lr
