
PE2_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e88  0800bf9c  0800bf9c  0001bf9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de24  0800de24  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800de24  0800de24  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de24  0800de24  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de24  0800de24  0001de24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de28  0800de28  0001de28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800de2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000293c  200000cc  0800def8  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a08  0800def8  00022a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b39  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003674  00000000  00000000  00035c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  000392b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  0003a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197c3  00000000  00000000  0003b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019440  00000000  00000000  00054b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086617  00000000  00000000  0006df7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4592  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051d0  00000000  00000000  000f45e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf84 	.word	0x0800bf84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	0800bf84 	.word	0x0800bf84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <initBrickbreaker>:
uint8_t loopTester = 0;
uint8_t guardian = 0;
uint8_t guardianTimer = 100;
int toughnessColor[4] = {D_GREEN, GREY, DARK_GREY, BLACK};

void initBrickbreaker() {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
    person.x = SCREEN_WIDTH/2;
 8000286:	4b49      	ldr	r3, [pc, #292]	; (80003ac <initBrickbreaker+0x12c>)
 8000288:	2228      	movs	r2, #40	; 0x28
 800028a:	701a      	strb	r2, [r3, #0]
    person.y = SCREEN_HEIGHT - 5;
 800028c:	4b47      	ldr	r3, [pc, #284]	; (80003ac <initBrickbreaker+0x12c>)
 800028e:	2237      	movs	r2, #55	; 0x37
 8000290:	705a      	strb	r2, [r3, #1]
    ball.x = SCREEN_WIDTH/2;
 8000292:	4b47      	ldr	r3, [pc, #284]	; (80003b0 <initBrickbreaker+0x130>)
 8000294:	2228      	movs	r2, #40	; 0x28
 8000296:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000298:	4b45      	ldr	r3, [pc, #276]	; (80003b0 <initBrickbreaker+0x130>)
 800029a:	2236      	movs	r2, #54	; 0x36
 800029c:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 800029e:	4b44      	ldr	r3, [pc, #272]	; (80003b0 <initBrickbreaker+0x130>)
 80002a0:	2208      	movs	r2, #8
 80002a2:	721a      	strb	r2, [r3, #8]
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e041      	b.n	800032e <initBrickbreaker+0xae>
        for(int j = 0; j < 10; j++) {
 80002aa:	2300      	movs	r3, #0
 80002ac:	60bb      	str	r3, [r7, #8]
 80002ae:	e038      	b.n	8000322 <initBrickbreaker+0xa2>
            bricks[i][j].x = j * 8;
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	00d9      	lsls	r1, r3, #3
 80002b4:	483f      	ldr	r0, [pc, #252]	; (80003b4 <initBrickbreaker+0x134>)
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	4613      	mov	r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	4413      	add	r3, r2
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	68ba      	ldr	r2, [r7, #8]
 80002c2:	4413      	add	r3, r2
 80002c4:	011b      	lsls	r3, r3, #4
 80002c6:	4403      	add	r3, r0
 80002c8:	6019      	str	r1, [r3, #0]
            bricks[i][j].y = i + 8;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	f103 0108 	add.w	r1, r3, #8
 80002d0:	4838      	ldr	r0, [pc, #224]	; (80003b4 <initBrickbreaker+0x134>)
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	4613      	mov	r3, r2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4413      	add	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	4413      	add	r3, r2
 80002e0:	011b      	lsls	r3, r3, #4
 80002e2:	4403      	add	r3, r0
 80002e4:	3304      	adds	r3, #4
 80002e6:	6019      	str	r1, [r3, #0]
            bricks[i][j].visible = 0;
 80002e8:	4932      	ldr	r1, [pc, #200]	; (80003b4 <initBrickbreaker+0x134>)
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	4613      	mov	r3, r2
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	4413      	add	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	68ba      	ldr	r2, [r7, #8]
 80002f6:	4413      	add	r3, r2
 80002f8:	011b      	lsls	r3, r3, #4
 80002fa:	440b      	add	r3, r1
 80002fc:	3308      	adds	r3, #8
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = 1;
 8000302:	492c      	ldr	r1, [pc, #176]	; (80003b4 <initBrickbreaker+0x134>)
 8000304:	68fa      	ldr	r2, [r7, #12]
 8000306:	4613      	mov	r3, r2
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	4413      	add	r3, r2
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	4413      	add	r3, r2
 8000312:	011b      	lsls	r3, r3, #4
 8000314:	440b      	add	r3, r1
 8000316:	330c      	adds	r3, #12
 8000318:	2201      	movs	r2, #1
 800031a:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < 10; j++) {
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	3301      	adds	r3, #1
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	2b09      	cmp	r3, #9
 8000326:	ddc3      	ble.n	80002b0 <initBrickbreaker+0x30>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2b2f      	cmp	r3, #47	; 0x2f
 8000332:	ddba      	ble.n	80002aa <initBrickbreaker+0x2a>
        }
    }

    for (int i = 0; i < BRICK_LINES; i++) {
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	e027      	b.n	800038a <initBrickbreaker+0x10a>
        for(int j = 0; j < 10; j++) {
 800033a:	2300      	movs	r3, #0
 800033c:	603b      	str	r3, [r7, #0]
 800033e:	e01e      	b.n	800037e <initBrickbreaker+0xfe>
            bricks[i][j].visible = 1;
 8000340:	491c      	ldr	r1, [pc, #112]	; (80003b4 <initBrickbreaker+0x134>)
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	4613      	mov	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	4413      	add	r3, r2
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	683a      	ldr	r2, [r7, #0]
 800034e:	4413      	add	r3, r2
 8000350:	011b      	lsls	r3, r3, #4
 8000352:	440b      	add	r3, r1
 8000354:	3308      	adds	r3, #8
 8000356:	2201      	movs	r2, #1
 8000358:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = setBrickToughness();
 800035a:	f001 ff13 	bl	8002184 <setBrickToughness>
 800035e:	4601      	mov	r1, r0
 8000360:	4814      	ldr	r0, [pc, #80]	; (80003b4 <initBrickbreaker+0x134>)
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	4613      	mov	r3, r2
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	4413      	add	r3, r2
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	4413      	add	r3, r2
 8000370:	011b      	lsls	r3, r3, #4
 8000372:	4403      	add	r3, r0
 8000374:	330c      	adds	r3, #12
 8000376:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < 10; j++) {
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	3301      	adds	r3, #1
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b09      	cmp	r3, #9
 8000382:	dddd      	ble.n	8000340 <initBrickbreaker+0xc0>
    for (int i = 0; i < BRICK_LINES; i++) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b09      	cmp	r3, #9
 800038e:	ddd4      	ble.n	800033a <initBrickbreaker+0xba>
        }
    }
    points = 0;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <initBrickbreaker+0x138>)
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
    Displ_CLS(D_GREEN);
 8000396:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800039a:	f005 f81d 	bl	80053d8 <Displ_CLS>
    drawBricks();
 800039e:	f001 ff25 	bl	80021ec <drawBricks>
}
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000030 	.word	0x20000030
 80003b0:	20000034 	.word	0x20000034
 80003b4:	200000e8 	.word	0x200000e8
 80003b8:	20001ee8 	.word	0x20001ee8

080003bc <playBall>:

void playBall() {
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
    if (ball.y == 0) {
 80003c0:	4b3b      	ldr	r3, [pc, #236]	; (80004b0 <playBall+0xf4>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d102      	bne.n	80003ce <playBall+0x12>
        changeDirection(N);
 80003c8:	2000      	movs	r0, #0
 80003ca:	f000 f8eb 	bl	80005a4 <changeDirection>
    }
    if (ball.y == SCREEN_HEIGHT - 6) {
 80003ce:	4b38      	ldr	r3, [pc, #224]	; (80004b0 <playBall+0xf4>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	2b36      	cmp	r3, #54	; 0x36
 80003d4:	d149      	bne.n	800046a <playBall+0xae>
        if (ball.x >= person.x - (BAR_SIZE/2) && ball.x <= person.x + (BAR_SIZE/2)) {
 80003d6:	4b36      	ldr	r3, [pc, #216]	; (80004b0 <playBall+0xf4>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	4b36      	ldr	r3, [pc, #216]	; (80004b4 <playBall+0xf8>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	3b19      	subs	r3, #25
 80003e0:	429a      	cmp	r2, r3
 80003e2:	db0a      	blt.n	80003fa <playBall+0x3e>
 80003e4:	4b32      	ldr	r3, [pc, #200]	; (80004b0 <playBall+0xf4>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	4b32      	ldr	r3, [pc, #200]	; (80004b4 <playBall+0xf8>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	3319      	adds	r3, #25
 80003ee:	429a      	cmp	r2, r3
 80003f0:	dc03      	bgt.n	80003fa <playBall+0x3e>
            changeDirection(S);
 80003f2:	2004      	movs	r0, #4
 80003f4:	f000 f8d6 	bl	80005a4 <changeDirection>
 80003f8:	e037      	b.n	800046a <playBall+0xae>
        } else {
            if (ball.x == person.x - (BAR_SIZE/2) - 1) {
 80003fa:	4b2d      	ldr	r3, [pc, #180]	; (80004b0 <playBall+0xf4>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	4b2d      	ldr	r3, [pc, #180]	; (80004b4 <playBall+0xf8>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	3b1a      	subs	r3, #26
 8000404:	429a      	cmp	r2, r3
 8000406:	d110      	bne.n	800042a <playBall+0x6e>
                if (ball.dir == SE) {
 8000408:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <playBall+0xf4>)
 800040a:	7a1b      	ldrb	r3, [r3, #8]
 800040c:	2b03      	cmp	r3, #3
 800040e:	d103      	bne.n	8000418 <playBall+0x5c>
                    ball.dir = NW;
 8000410:	4b27      	ldr	r3, [pc, #156]	; (80004b0 <playBall+0xf4>)
 8000412:	2207      	movs	r2, #7
 8000414:	721a      	strb	r2, [r3, #8]
 8000416:	e028      	b.n	800046a <playBall+0xae>
                } else {
                    lives1--;
 8000418:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <playBall+0xfc>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	3b01      	subs	r3, #1
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <playBall+0xfc>)
 8000422:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 8000424:	f000 f960 	bl	80006e8 <gameEnd>
 8000428:	e01f      	b.n	800046a <playBall+0xae>
                }
            } else {
                if (ball.x == person.x + (BAR_SIZE/2) + 1) {
 800042a:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <playBall+0xf4>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <playBall+0xf8>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	331a      	adds	r3, #26
 8000434:	429a      	cmp	r2, r3
 8000436:	d110      	bne.n	800045a <playBall+0x9e>
                    if (ball.dir == SW) {
 8000438:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <playBall+0xf4>)
 800043a:	7a1b      	ldrb	r3, [r3, #8]
 800043c:	2b05      	cmp	r3, #5
 800043e:	d103      	bne.n	8000448 <playBall+0x8c>
                        ball.dir = NE;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <playBall+0xf4>)
 8000442:	2201      	movs	r2, #1
 8000444:	721a      	strb	r2, [r3, #8]
 8000446:	e010      	b.n	800046a <playBall+0xae>
                    } else {
                        lives1--;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <playBall+0xfc>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	3b01      	subs	r3, #1
 800044e:	b2da      	uxtb	r2, r3
 8000450:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <playBall+0xfc>)
 8000452:	701a      	strb	r2, [r3, #0]
                        gameEnd();
 8000454:	f000 f948 	bl	80006e8 <gameEnd>
 8000458:	e007      	b.n	800046a <playBall+0xae>
                    }
                } else {
                    lives1--;
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <playBall+0xfc>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	3b01      	subs	r3, #1
 8000460:	b2da      	uxtb	r2, r3
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <playBall+0xfc>)
 8000464:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 8000466:	f000 f93f 	bl	80006e8 <gameEnd>
                }
            }
        }
    }
    if (ball.x == 0) {
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <playBall+0xf4>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d102      	bne.n	8000478 <playBall+0xbc>
        changeDirection(W);
 8000472:	2006      	movs	r0, #6
 8000474:	f000 f896 	bl	80005a4 <changeDirection>
    }
    if (ball.x == SCREEN_WIDTH - 1) {
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <playBall+0xf4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b4f      	cmp	r3, #79	; 0x4f
 800047e:	d102      	bne.n	8000486 <playBall+0xca>
        changeDirection(E);
 8000480:	2002      	movs	r0, #2
 8000482:	f000 f88f 	bl	80005a4 <changeDirection>
    }

    if (guardian == 1) {
 8000486:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <playBall+0x100>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d109      	bne.n	80004a2 <playBall+0xe6>
        if (ball.y == person.y - 2) {
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <playBall+0xf4>)
 8000490:	685a      	ldr	r2, [r3, #4]
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <playBall+0xf8>)
 8000494:	785b      	ldrb	r3, [r3, #1]
 8000496:	3b02      	subs	r3, #2
 8000498:	429a      	cmp	r2, r3
 800049a:	d102      	bne.n	80004a2 <playBall+0xe6>
            changeDirection(S);
 800049c:	2004      	movs	r0, #4
 800049e:	f000 f881 	bl	80005a4 <changeDirection>
        }
    }

    checkBrickHit();
 80004a2:	f000 fa13 	bl	80008cc <checkBrickHit>
    moveBall();
 80004a6:	f000 f80b 	bl	80004c0 <moveBall>
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000034 	.word	0x20000034
 80004b4:	20000030 	.word	0x20000030
 80004b8:	20000002 	.word	0x20000002
 80004bc:	20001eea 	.word	0x20001eea

080004c0 <moveBall>:

void moveBall() {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af02      	add	r7, sp, #8
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80004c6:	4b35      	ldr	r3, [pc, #212]	; (800059c <moveBall+0xdc>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	b298      	uxth	r0, r3
 80004d0:	4b32      	ldr	r3, [pc, #200]	; (800059c <moveBall+0xdc>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	b299      	uxth	r1, r3
 80004da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2304      	movs	r3, #4
 80004e2:	2204      	movs	r2, #4
 80004e4:	f004 fdc4 	bl	8005070 <Displ_FillArea>
    switch (ball.dir) {
 80004e8:	4b2c      	ldr	r3, [pc, #176]	; (800059c <moveBall+0xdc>)
 80004ea:	7a1b      	ldrb	r3, [r3, #8]
 80004ec:	2b08      	cmp	r3, #8
 80004ee:	d84d      	bhi.n	800058c <moveBall+0xcc>
 80004f0:	a201      	add	r2, pc, #4	; (adr r2, 80004f8 <moveBall+0x38>)
 80004f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f6:	bf00      	nop
 80004f8:	0800051d 	.word	0x0800051d
 80004fc:	08000535 	.word	0x08000535
 8000500:	0800058d 	.word	0x0800058d
 8000504:	08000561 	.word	0x08000561
 8000508:	08000529 	.word	0x08000529
 800050c:	08000577 	.word	0x08000577
 8000510:	0800058d 	.word	0x0800058d
 8000514:	0800054b 	.word	0x0800054b
 8000518:	08000595 	.word	0x08000595
    case N:
        ball.y -= 1;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <moveBall+0xdc>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	3b01      	subs	r3, #1
 8000522:	4a1e      	ldr	r2, [pc, #120]	; (800059c <moveBall+0xdc>)
 8000524:	6053      	str	r3, [r2, #4]
        break;
 8000526:	e036      	b.n	8000596 <moveBall+0xd6>
    case S:
        ball.y += 1;
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <moveBall+0xdc>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	3301      	adds	r3, #1
 800052e:	4a1b      	ldr	r2, [pc, #108]	; (800059c <moveBall+0xdc>)
 8000530:	6053      	str	r3, [r2, #4]
        break;
 8000532:	e030      	b.n	8000596 <moveBall+0xd6>
    case NE:
        ball.y -= 1;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <moveBall+0xdc>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	3b01      	subs	r3, #1
 800053a:	4a18      	ldr	r2, [pc, #96]	; (800059c <moveBall+0xdc>)
 800053c:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 800053e:	4b17      	ldr	r3, [pc, #92]	; (800059c <moveBall+0xdc>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	4a15      	ldr	r2, [pc, #84]	; (800059c <moveBall+0xdc>)
 8000546:	6013      	str	r3, [r2, #0]
        break;
 8000548:	e025      	b.n	8000596 <moveBall+0xd6>
    case NW:
        ball.y -= 1;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <moveBall+0xdc>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	3b01      	subs	r3, #1
 8000550:	4a12      	ldr	r2, [pc, #72]	; (800059c <moveBall+0xdc>)
 8000552:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <moveBall+0xdc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	3b01      	subs	r3, #1
 800055a:	4a10      	ldr	r2, [pc, #64]	; (800059c <moveBall+0xdc>)
 800055c:	6013      	str	r3, [r2, #0]
        break;
 800055e:	e01a      	b.n	8000596 <moveBall+0xd6>
    case SE:
        ball.y += 1;
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <moveBall+0xdc>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	4a0d      	ldr	r2, [pc, #52]	; (800059c <moveBall+0xdc>)
 8000568:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <moveBall+0xdc>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	3301      	adds	r3, #1
 8000570:	4a0a      	ldr	r2, [pc, #40]	; (800059c <moveBall+0xdc>)
 8000572:	6013      	str	r3, [r2, #0]
        break;
 8000574:	e00f      	b.n	8000596 <moveBall+0xd6>
    case SW:
        ball.y += 1;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <moveBall+0xdc>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	3301      	adds	r3, #1
 800057c:	4a07      	ldr	r2, [pc, #28]	; (800059c <moveBall+0xdc>)
 800057e:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <moveBall+0xdc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3b01      	subs	r3, #1
 8000586:	4a05      	ldr	r2, [pc, #20]	; (800059c <moveBall+0xdc>)
 8000588:	6013      	str	r3, [r2, #0]
        break;
 800058a:	e004      	b.n	8000596 <moveBall+0xd6>
    case still:
        break;
    default:
        printf("You shouldn't be here\r\n");
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <moveBall+0xe0>)
 800058e:	f00a f9ed 	bl	800a96c <puts>
    }

}
 8000592:	e000      	b.n	8000596 <moveBall+0xd6>
        break;
 8000594:	bf00      	nop
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000034 	.word	0x20000034
 80005a0:	0800bf9c 	.word	0x0800bf9c

080005a4 <changeDirection>:

void changeDirection(directions inDir) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    if (inDir == N) {
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d129      	bne.n	8000608 <changeDirection+0x64>
        switch (ball.dir) {
 80005b4:	4b4a      	ldr	r3, [pc, #296]	; (80006e0 <changeDirection+0x13c>)
 80005b6:	7a1b      	ldrb	r3, [r3, #8]
 80005b8:	2b08      	cmp	r3, #8
 80005ba:	d821      	bhi.n	8000600 <changeDirection+0x5c>
 80005bc:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <changeDirection+0x20>)
 80005be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c2:	bf00      	nop
 80005c4:	080005e9 	.word	0x080005e9
 80005c8:	080005f9 	.word	0x080005f9
 80005cc:	08000601 	.word	0x08000601
 80005d0:	08000601 	.word	0x08000601
 80005d4:	08000601 	.word	0x08000601
 80005d8:	08000601 	.word	0x08000601
 80005dc:	08000601 	.word	0x08000601
 80005e0:	080005f1 	.word	0x080005f1
 80005e4:	0800060d 	.word	0x0800060d
        case N:
            ball.dir = S;
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <changeDirection+0x13c>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	721a      	strb	r2, [r3, #8]
            break;
 80005ee:	e00e      	b.n	800060e <changeDirection+0x6a>
        case NW:
            ball.dir = SW;
 80005f0:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <changeDirection+0x13c>)
 80005f2:	2205      	movs	r2, #5
 80005f4:	721a      	strb	r2, [r3, #8]
            break;
 80005f6:	e00a      	b.n	800060e <changeDirection+0x6a>
        case NE:
            ball.dir = SE;
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <changeDirection+0x13c>)
 80005fa:	2203      	movs	r2, #3
 80005fc:	721a      	strb	r2, [r3, #8]
            break;
 80005fe:	e006      	b.n	800060e <changeDirection+0x6a>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 8000600:	4838      	ldr	r0, [pc, #224]	; (80006e4 <changeDirection+0x140>)
 8000602:	f00a f9b3 	bl	800a96c <puts>
 8000606:	e002      	b.n	800060e <changeDirection+0x6a>
        }
    }
 8000608:	bf00      	nop
 800060a:	e000      	b.n	800060e <changeDirection+0x6a>
            break;
 800060c:	bf00      	nop

    if (inDir == E) {
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d116      	bne.n	8000642 <changeDirection+0x9e>
        switch (ball.dir) {
 8000614:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <changeDirection+0x13c>)
 8000616:	7a1b      	ldrb	r3, [r3, #8]
 8000618:	2b08      	cmp	r3, #8
 800061a:	d014      	beq.n	8000646 <changeDirection+0xa2>
 800061c:	2b08      	cmp	r3, #8
 800061e:	dc0c      	bgt.n	800063a <changeDirection+0x96>
 8000620:	2b01      	cmp	r3, #1
 8000622:	d002      	beq.n	800062a <changeDirection+0x86>
 8000624:	2b03      	cmp	r3, #3
 8000626:	d004      	beq.n	8000632 <changeDirection+0x8e>
 8000628:	e007      	b.n	800063a <changeDirection+0x96>
        case NE:
            ball.dir = NW;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <changeDirection+0x13c>)
 800062c:	2207      	movs	r2, #7
 800062e:	721a      	strb	r2, [r3, #8]
            break;
 8000630:	e00a      	b.n	8000648 <changeDirection+0xa4>
        case SE:
            ball.dir = SW;
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <changeDirection+0x13c>)
 8000634:	2205      	movs	r2, #5
 8000636:	721a      	strb	r2, [r3, #8]
            break;
 8000638:	e006      	b.n	8000648 <changeDirection+0xa4>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 800063a:	482a      	ldr	r0, [pc, #168]	; (80006e4 <changeDirection+0x140>)
 800063c:	f00a f996 	bl	800a96c <puts>
 8000640:	e002      	b.n	8000648 <changeDirection+0xa4>
        }
    }
 8000642:	bf00      	nop
 8000644:	e000      	b.n	8000648 <changeDirection+0xa4>
            break;
 8000646:	bf00      	nop

    if (inDir == S) {
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b04      	cmp	r3, #4
 800064c:	d124      	bne.n	8000698 <changeDirection+0xf4>
        switch (ball.dir) {
 800064e:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <changeDirection+0x13c>)
 8000650:	7a1b      	ldrb	r3, [r3, #8]
 8000652:	3b03      	subs	r3, #3
 8000654:	2b05      	cmp	r3, #5
 8000656:	d81b      	bhi.n	8000690 <changeDirection+0xec>
 8000658:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <changeDirection+0xbc>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000681 	.word	0x08000681
 8000664:	08000679 	.word	0x08000679
 8000668:	08000689 	.word	0x08000689
 800066c:	08000691 	.word	0x08000691
 8000670:	08000691 	.word	0x08000691
 8000674:	0800069d 	.word	0x0800069d
        case S:
            ball.dir = N;
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <changeDirection+0x13c>)
 800067a:	2200      	movs	r2, #0
 800067c:	721a      	strb	r2, [r3, #8]
            break;
 800067e:	e00e      	b.n	800069e <changeDirection+0xfa>
        case SE:
            ball.dir = NE;
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <changeDirection+0x13c>)
 8000682:	2201      	movs	r2, #1
 8000684:	721a      	strb	r2, [r3, #8]
            break;
 8000686:	e00a      	b.n	800069e <changeDirection+0xfa>
        case SW:
            ball.dir = NW;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <changeDirection+0x13c>)
 800068a:	2207      	movs	r2, #7
 800068c:	721a      	strb	r2, [r3, #8]
            break;
 800068e:	e006      	b.n	800069e <changeDirection+0xfa>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 8000690:	4814      	ldr	r0, [pc, #80]	; (80006e4 <changeDirection+0x140>)
 8000692:	f00a f96b 	bl	800a96c <puts>
 8000696:	e002      	b.n	800069e <changeDirection+0xfa>
        }
    }
 8000698:	bf00      	nop
 800069a:	e000      	b.n	800069e <changeDirection+0xfa>
            break;
 800069c:	bf00      	nop

    if (inDir == W) {
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d115      	bne.n	80006d0 <changeDirection+0x12c>
        switch (ball.dir) {
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <changeDirection+0x13c>)
 80006a6:	7a1b      	ldrb	r3, [r3, #8]
 80006a8:	2b08      	cmp	r3, #8
 80006aa:	d013      	beq.n	80006d4 <changeDirection+0x130>
 80006ac:	2b08      	cmp	r3, #8
 80006ae:	dc0b      	bgt.n	80006c8 <changeDirection+0x124>
 80006b0:	2b05      	cmp	r3, #5
 80006b2:	d005      	beq.n	80006c0 <changeDirection+0x11c>
 80006b4:	2b07      	cmp	r3, #7
 80006b6:	d107      	bne.n	80006c8 <changeDirection+0x124>
        case NW:
            ball.dir = NE;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <changeDirection+0x13c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	721a      	strb	r2, [r3, #8]
            break;
 80006be:	e00a      	b.n	80006d6 <changeDirection+0x132>
        case SW:
            ball.dir = SE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <changeDirection+0x13c>)
 80006c2:	2203      	movs	r2, #3
 80006c4:	721a      	strb	r2, [r3, #8]
            break;
 80006c6:	e006      	b.n	80006d6 <changeDirection+0x132>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 80006c8:	4806      	ldr	r0, [pc, #24]	; (80006e4 <changeDirection+0x140>)
 80006ca:	f00a f94f 	bl	800a96c <puts>
        }
    }
}
 80006ce:	e002      	b.n	80006d6 <changeDirection+0x132>
    }
 80006d0:	bf00      	nop
 80006d2:	e000      	b.n	80006d6 <changeDirection+0x132>
            break;
 80006d4:	bf00      	nop
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000034 	.word	0x20000034
 80006e4:	0800bf9c 	.word	0x0800bf9c

080006e8 <gameEnd>:

void gameEnd() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af02      	add	r7, sp, #8
    Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 10, D_GREEN);
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <gameEnd+0x8c>)
 80006f0:	785b      	ldrb	r3, [r3, #1]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	b299      	uxth	r1, r3
 80006fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	230a      	movs	r3, #10
 8000702:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000706:	2000      	movs	r0, #0
 8000708:	f004 fcb2 	bl	8005070 <Displ_FillArea>
    person.x = (SCREEN_WIDTH)/2;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <gameEnd+0x8c>)
 800070e:	2228      	movs	r2, #40	; 0x28
 8000710:	701a      	strb	r2, [r3, #0]
    ball.x = person.x;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <gameEnd+0x8c>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <gameEnd+0x90>)
 800071a:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <gameEnd+0x90>)
 800071e:	2236      	movs	r2, #54	; 0x36
 8000720:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <gameEnd+0x90>)
 8000724:	2208      	movs	r2, #8
 8000726:	721a      	strb	r2, [r3, #8]

    if (lives1 <= 0) {
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <gameEnd+0x94>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d11e      	bne.n	800076e <gameEnd+0x86>
        if (points > highScore) {
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <gameEnd+0x98>)
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <gameEnd+0x9c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d903      	bls.n	8000744 <gameEnd+0x5c>
            highScore = points;
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <gameEnd+0x98>)
 800073e:	781a      	ldrb	r2, [r3, #0]
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <gameEnd+0x9c>)
 8000742:	701a      	strb	r2, [r3, #0]
        }

        start = 0;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <gameEnd+0xa0>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
        points = 0;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <gameEnd+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
        lives1 = 3;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <gameEnd+0x94>)
 8000752:	2203      	movs	r2, #3
 8000754:	701a      	strb	r2, [r3, #0]
        initBrickbreaker();
 8000756:	f7ff fd93 	bl	8000280 <initBrickbreaker>
        HAL_UART_Transmit(&huart2, (uint8_t *)"L", strlen("L"), 300);
 800075a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800075e:	2201      	movs	r2, #1
 8000760:	490a      	ldr	r1, [pc, #40]	; (800078c <gameEnd+0xa4>)
 8000762:	480b      	ldr	r0, [pc, #44]	; (8000790 <gameEnd+0xa8>)
 8000764:	f009 f920 	bl	80099a8 <HAL_UART_Transmit>
        setGameState(loss);
 8000768:	2002      	movs	r0, #2
 800076a:	f003 f819 	bl	80037a0 <setGameState>
    }
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000030 	.word	0x20000030
 8000778:	20000034 	.word	0x20000034
 800077c:	20000002 	.word	0x20000002
 8000780:	20001ee8 	.word	0x20001ee8
 8000784:	20001ee9 	.word	0x20001ee9
 8000788:	20001eef 	.word	0x20001eef
 800078c:	0800bfb4 	.word	0x0800bfb4
 8000790:	20001fec 	.word	0x20001fec

08000794 <lowerBricks>:

void lowerBricks() {
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	e03d      	b.n	800081c <lowerBricks+0x88>
        for (int j = 0; j < 10; j++) {
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	e034      	b.n	8000810 <lowerBricks+0x7c>
            bricks[i + 1][j].visible = bricks[i][j].visible;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	482d      	ldr	r0, [pc, #180]	; (8000860 <lowerBricks+0xcc>)
 80007ac:	68f9      	ldr	r1, [r7, #12]
 80007ae:	460b      	mov	r3, r1
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	440b      	add	r3, r1
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	440b      	add	r3, r1
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	4403      	add	r3, r0
 80007be:	3308      	adds	r3, #8
 80007c0:	6819      	ldr	r1, [r3, #0]
 80007c2:	4827      	ldr	r0, [pc, #156]	; (8000860 <lowerBricks+0xcc>)
 80007c4:	4613      	mov	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	4413      	add	r3, r2
 80007d0:	011b      	lsls	r3, r3, #4
 80007d2:	4403      	add	r3, r0
 80007d4:	3308      	adds	r3, #8
 80007d6:	6019      	str	r1, [r3, #0]
            bricks[i + 1][j].toughness = bricks[i][j].toughness;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	4820      	ldr	r0, [pc, #128]	; (8000860 <lowerBricks+0xcc>)
 80007de:	68f9      	ldr	r1, [r7, #12]
 80007e0:	460b      	mov	r3, r1
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	440b      	add	r3, r1
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	440b      	add	r3, r1
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	4403      	add	r3, r0
 80007f0:	330c      	adds	r3, #12
 80007f2:	6819      	ldr	r1, [r3, #0]
 80007f4:	481a      	ldr	r0, [pc, #104]	; (8000860 <lowerBricks+0xcc>)
 80007f6:	4613      	mov	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4413      	add	r3, r2
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	4413      	add	r3, r2
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	4403      	add	r3, r0
 8000806:	330c      	adds	r3, #12
 8000808:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 10; j++) {
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	3301      	adds	r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	2b09      	cmp	r3, #9
 8000814:	ddc7      	ble.n	80007a6 <lowerBricks+0x12>
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3b01      	subs	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	dabe      	bge.n	80007a0 <lowerBricks+0xc>
        }
    }
    for(int j = 0; j < 10; j++) {
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	e012      	b.n	800084e <lowerBricks+0xba>
        bricks[0][j].visible = 1;
 8000828:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <lowerBricks+0xcc>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	4413      	add	r3, r2
 8000830:	3308      	adds	r3, #8
 8000832:	2201      	movs	r2, #1
 8000834:	601a      	str	r2, [r3, #0]
        bricks[0][j].toughness = setBrickToughness();
 8000836:	f001 fca5 	bl	8002184 <setBrickToughness>
 800083a:	4602      	mov	r2, r0
 800083c:	4908      	ldr	r1, [pc, #32]	; (8000860 <lowerBricks+0xcc>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	011b      	lsls	r3, r3, #4
 8000842:	440b      	add	r3, r1
 8000844:	330c      	adds	r3, #12
 8000846:	601a      	str	r2, [r3, #0]
    for(int j = 0; j < 10; j++) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3301      	adds	r3, #1
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b09      	cmp	r3, #9
 8000852:	dde9      	ble.n	8000828 <lowerBricks+0x94>
    }

    drawBricks();
 8000854:	f001 fcca 	bl	80021ec <drawBricks>
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200000e8 	.word	0x200000e8

08000864 <checkGameOver>:

void checkGameOver() {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
    for (int j = 0; j < 10; j++) {
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	e01c      	b.n	80008aa <checkGameOver+0x46>
        if (bricks[MAX_BRICK_LINES - 1][j].visible == 1) {
 8000870:	4a12      	ldr	r2, [pc, #72]	; (80008bc <checkGameOver+0x58>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	011b      	lsls	r3, r3, #4
 8000876:	4413      	add	r3, r2
 8000878:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 800087c:	3308      	adds	r3, #8
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d10f      	bne.n	80008a4 <checkGameOver+0x40>

            lives1 = 0;
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <checkGameOver+0x5c>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
            ball.x = person.x;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <checkGameOver+0x60>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <checkGameOver+0x64>)
 8000892:	601a      	str	r2, [r3, #0]
            ball.y = SCREEN_HEIGHT - 6;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <checkGameOver+0x64>)
 8000896:	2236      	movs	r2, #54	; 0x36
 8000898:	605a      	str	r2, [r3, #4]
            ball.dir = still;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <checkGameOver+0x64>)
 800089c:	2208      	movs	r2, #8
 800089e:	721a      	strb	r2, [r3, #8]
            gameEnd();
 80008a0:	f7ff ff22 	bl	80006e8 <gameEnd>
    for (int j = 0; j < 10; j++) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3301      	adds	r3, #1
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b09      	cmp	r3, #9
 80008ae:	dddf      	ble.n	8000870 <checkGameOver+0xc>
        }
    }
}
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000e8 	.word	0x200000e8
 80008c0:	20000002 	.word	0x20000002
 80008c4:	20000030 	.word	0x20000030
 80008c8:	20000034 	.word	0x20000034

080008cc <checkBrickHit>:

void checkBrickHit() {
 80008cc:	b5b0      	push	{r4, r5, r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af02      	add	r7, sp, #8
    uint8_t bricksHit = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	71fb      	strb	r3, [r7, #7]
    switch (ball.dir) {
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <checkBrickHit+0x3c>)
 80008d8:	7a1b      	ldrb	r3, [r3, #8]
 80008da:	3b01      	subs	r3, #1
 80008dc:	2b07      	cmp	r3, #7
 80008de:	f201 829d 	bhi.w	8001e1c <checkBrickHit+0x1550>
 80008e2:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <checkBrickHit+0x1c>)
 80008e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e8:	08000e65 	.word	0x08000e65
 80008ec:	08001e1d 	.word	0x08001e1d
 80008f0:	080013bd 	.word	0x080013bd
 80008f4:	08001e1d 	.word	0x08001e1d
 80008f8:	080018f5 	.word	0x080018f5
 80008fc:	08001e1d 	.word	0x08001e1d
 8000900:	0800090d 	.word	0x0800090d
 8000904:	08001e27 	.word	0x08001e27
 8000908:	20000034 	.word	0x20000034
    case NW :
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 800090c:	4bb7      	ldr	r3, [pc, #732]	; (8000bec <checkBrickHit+0x320>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f1a3 0209 	sub.w	r2, r3, #9
 8000914:	4bb5      	ldr	r3, [pc, #724]	; (8000bec <checkBrickHit+0x320>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	da00      	bge.n	800091e <checkBrickHit+0x52>
 800091c:	3307      	adds	r3, #7
 800091e:	10db      	asrs	r3, r3, #3
 8000920:	4618      	mov	r0, r3
 8000922:	49b3      	ldr	r1, [pc, #716]	; (8000bf0 <checkBrickHit+0x324>)
 8000924:	4613      	mov	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4413      	add	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4403      	add	r3, r0
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	440b      	add	r3, r1
 8000932:	3308      	adds	r3, #8
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b01      	cmp	r3, #1
 8000938:	f040 80bc 	bne.w	8000ab4 <checkBrickHit+0x1e8>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 800093c:	4bab      	ldr	r3, [pc, #684]	; (8000bec <checkBrickHit+0x320>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f1a3 0209 	sub.w	r2, r3, #9
 8000944:	4ba9      	ldr	r3, [pc, #676]	; (8000bec <checkBrickHit+0x320>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	da00      	bge.n	800094e <checkBrickHit+0x82>
 800094c:	3307      	adds	r3, #7
 800094e:	10db      	asrs	r3, r3, #3
 8000950:	4619      	mov	r1, r3
 8000952:	48a7      	ldr	r0, [pc, #668]	; (8000bf0 <checkBrickHit+0x324>)
 8000954:	4613      	mov	r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4413      	add	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	440b      	add	r3, r1
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	4403      	add	r3, r0
 8000962:	330c      	adds	r3, #12
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	1e58      	subs	r0, r3, #1
 8000968:	4ca1      	ldr	r4, [pc, #644]	; (8000bf0 <checkBrickHit+0x324>)
 800096a:	4613      	mov	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	440b      	add	r3, r1
 8000974:	011b      	lsls	r3, r3, #4
 8000976:	4423      	add	r3, r4
 8000978:	330c      	adds	r3, #12
 800097a:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 800097c:	4b9b      	ldr	r3, [pc, #620]	; (8000bec <checkBrickHit+0x320>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f1a3 0209 	sub.w	r2, r3, #9
 8000984:	4b99      	ldr	r3, [pc, #612]	; (8000bec <checkBrickHit+0x320>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	da00      	bge.n	800098e <checkBrickHit+0xc2>
 800098c:	3307      	adds	r3, #7
 800098e:	10db      	asrs	r3, r3, #3
 8000990:	4618      	mov	r0, r3
 8000992:	4997      	ldr	r1, [pc, #604]	; (8000bf0 <checkBrickHit+0x324>)
 8000994:	4613      	mov	r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	4413      	add	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4403      	add	r3, r0
 800099e:	011b      	lsls	r3, r3, #4
 80009a0:	440b      	add	r3, r1
 80009a2:	330c      	adds	r3, #12
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	dc31      	bgt.n	8000a0e <checkBrickHit+0x142>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 80009aa:	4b90      	ldr	r3, [pc, #576]	; (8000bec <checkBrickHit+0x320>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f1a3 0209 	sub.w	r2, r3, #9
 80009b2:	4b8e      	ldr	r3, [pc, #568]	; (8000bec <checkBrickHit+0x320>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	da00      	bge.n	80009bc <checkBrickHit+0xf0>
 80009ba:	3307      	adds	r3, #7
 80009bc:	10db      	asrs	r3, r3, #3
 80009be:	4618      	mov	r0, r3
 80009c0:	498b      	ldr	r1, [pc, #556]	; (8000bf0 <checkBrickHit+0x324>)
 80009c2:	4613      	mov	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4403      	add	r3, r0
 80009cc:	011b      	lsls	r3, r3, #4
 80009ce:	440b      	add	r3, r1
 80009d0:	3308      	adds	r3, #8
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
                points++;
 80009d6:	4b87      	ldr	r3, [pc, #540]	; (8000bf4 <checkBrickHit+0x328>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b85      	ldr	r3, [pc, #532]	; (8000bf4 <checkBrickHit+0x328>)
 80009e0:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 80009e2:	4b82      	ldr	r3, [pc, #520]	; (8000bec <checkBrickHit+0x320>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	da00      	bge.n	80009ec <checkBrickHit+0x120>
 80009ea:	3307      	adds	r3, #7
 80009ec:	10db      	asrs	r3, r3, #3
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b7e      	ldr	r3, [pc, #504]	; (8000bec <checkBrickHit+0x320>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	3b09      	subs	r3, #9
 80009f6:	4619      	mov	r1, r3
 80009f8:	4610      	mov	r0, r2
 80009fa:	f001 fa29 	bl	8001e50 <dropPowerUp>
                checkEmptyRow(ball.y - 1 - 8);
 80009fe:	4b7b      	ldr	r3, [pc, #492]	; (8000bec <checkBrickHit+0x320>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	3b09      	subs	r3, #9
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fcb1 	bl	8002370 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 8000a0e:	4b77      	ldr	r3, [pc, #476]	; (8000bec <checkBrickHit+0x320>)
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f1a3 0209 	sub.w	r2, r3, #9
 8000a16:	4b75      	ldr	r3, [pc, #468]	; (8000bec <checkBrickHit+0x320>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	da00      	bge.n	8000a20 <checkBrickHit+0x154>
 8000a1e:	3307      	adds	r3, #7
 8000a20:	10db      	asrs	r3, r3, #3
 8000a22:	4618      	mov	r0, r3
 8000a24:	4972      	ldr	r1, [pc, #456]	; (8000bf0 <checkBrickHit+0x324>)
 8000a26:	4613      	mov	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4403      	add	r3, r0
 8000a30:	011b      	lsls	r3, r3, #4
 8000a32:	440b      	add	r3, r1
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	b298      	uxth	r0, r3
 8000a3c:	4b6b      	ldr	r3, [pc, #428]	; (8000bec <checkBrickHit+0x320>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f1a3 0209 	sub.w	r2, r3, #9
 8000a44:	4b69      	ldr	r3, [pc, #420]	; (8000bec <checkBrickHit+0x320>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	da00      	bge.n	8000a4e <checkBrickHit+0x182>
 8000a4c:	3307      	adds	r3, #7
 8000a4e:	10db      	asrs	r3, r3, #3
 8000a50:	461c      	mov	r4, r3
 8000a52:	4967      	ldr	r1, [pc, #412]	; (8000bf0 <checkBrickHit+0x324>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	4413      	add	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4423      	add	r3, r4
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	440b      	add	r3, r1
 8000a62:	3304      	adds	r3, #4
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	b299      	uxth	r1, r3
 8000a6c:	4b5f      	ldr	r3, [pc, #380]	; (8000bec <checkBrickHit+0x320>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f1a3 0209 	sub.w	r2, r3, #9
 8000a74:	4b5d      	ldr	r3, [pc, #372]	; (8000bec <checkBrickHit+0x320>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	da00      	bge.n	8000a7e <checkBrickHit+0x1b2>
 8000a7c:	3307      	adds	r3, #7
 8000a7e:	10db      	asrs	r3, r3, #3
 8000a80:	461d      	mov	r5, r3
 8000a82:	4c5b      	ldr	r4, [pc, #364]	; (8000bf0 <checkBrickHit+0x324>)
 8000a84:	4613      	mov	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	442b      	add	r3, r5
 8000a8e:	011b      	lsls	r3, r3, #4
 8000a90:	4423      	add	r3, r4
 8000a92:	330c      	adds	r3, #12
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a58      	ldr	r2, [pc, #352]	; (8000bf8 <checkBrickHit+0x32c>)
 8000a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	f004 fae4 	bl	8005070 <Displ_FillArea>
            bricksHit++;
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	71fb      	strb	r3, [r7, #7]
            ball.dir = SW;
 8000aae:	4b4f      	ldr	r3, [pc, #316]	; (8000bec <checkBrickHit+0x320>)
 8000ab0:	2205      	movs	r2, #5
 8000ab2:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 8000ab4:	4b4d      	ldr	r3, [pc, #308]	; (8000bec <checkBrickHit+0x320>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f1a3 0208 	sub.w	r2, r3, #8
 8000abc:	4b4b      	ldr	r3, [pc, #300]	; (8000bec <checkBrickHit+0x320>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	da00      	bge.n	8000ac8 <checkBrickHit+0x1fc>
 8000ac6:	3307      	adds	r3, #7
 8000ac8:	10db      	asrs	r3, r3, #3
 8000aca:	4618      	mov	r0, r3
 8000acc:	4948      	ldr	r1, [pc, #288]	; (8000bf0 <checkBrickHit+0x324>)
 8000ace:	4613      	mov	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	4403      	add	r3, r0
 8000ad8:	011b      	lsls	r3, r3, #4
 8000ada:	440b      	add	r3, r1
 8000adc:	3308      	adds	r3, #8
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	f040 80d8 	bne.w	8000c96 <checkBrickHit+0x3ca>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8000ae6:	4b41      	ldr	r3, [pc, #260]	; (8000bec <checkBrickHit+0x320>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f1a3 0208 	sub.w	r2, r3, #8
 8000aee:	4b3f      	ldr	r3, [pc, #252]	; (8000bec <checkBrickHit+0x320>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	da00      	bge.n	8000afa <checkBrickHit+0x22e>
 8000af8:	3307      	adds	r3, #7
 8000afa:	10db      	asrs	r3, r3, #3
 8000afc:	4619      	mov	r1, r3
 8000afe:	483c      	ldr	r0, [pc, #240]	; (8000bf0 <checkBrickHit+0x324>)
 8000b00:	4613      	mov	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4413      	add	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	440b      	add	r3, r1
 8000b0a:	011b      	lsls	r3, r3, #4
 8000b0c:	4403      	add	r3, r0
 8000b0e:	330c      	adds	r3, #12
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	1e58      	subs	r0, r3, #1
 8000b14:	4c36      	ldr	r4, [pc, #216]	; (8000bf0 <checkBrickHit+0x324>)
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	440b      	add	r3, r1
 8000b20:	011b      	lsls	r3, r3, #4
 8000b22:	4423      	add	r3, r4
 8000b24:	330c      	adds	r3, #12
 8000b26:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8000b28:	4b30      	ldr	r3, [pc, #192]	; (8000bec <checkBrickHit+0x320>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f1a3 0208 	sub.w	r2, r3, #8
 8000b30:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <checkBrickHit+0x320>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	da00      	bge.n	8000b3c <checkBrickHit+0x270>
 8000b3a:	3307      	adds	r3, #7
 8000b3c:	10db      	asrs	r3, r3, #3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	492b      	ldr	r1, [pc, #172]	; (8000bf0 <checkBrickHit+0x324>)
 8000b42:	4613      	mov	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	4403      	add	r3, r0
 8000b4c:	011b      	lsls	r3, r3, #4
 8000b4e:	440b      	add	r3, r1
 8000b50:	330c      	adds	r3, #12
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	dc33      	bgt.n	8000bc0 <checkBrickHit+0x2f4>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <checkBrickHit+0x320>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f1a3 0208 	sub.w	r2, r3, #8
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <checkBrickHit+0x320>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	da00      	bge.n	8000b6c <checkBrickHit+0x2a0>
 8000b6a:	3307      	adds	r3, #7
 8000b6c:	10db      	asrs	r3, r3, #3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	491f      	ldr	r1, [pc, #124]	; (8000bf0 <checkBrickHit+0x324>)
 8000b72:	4613      	mov	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4403      	add	r3, r0
 8000b7c:	011b      	lsls	r3, r3, #4
 8000b7e:	440b      	add	r3, r1
 8000b80:	3308      	adds	r3, #8
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
                points++;
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <checkBrickHit+0x328>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <checkBrickHit+0x328>)
 8000b90:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <checkBrickHit+0x320>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	da00      	bge.n	8000b9e <checkBrickHit+0x2d2>
 8000b9c:	3307      	adds	r3, #7
 8000b9e:	10db      	asrs	r3, r3, #3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <checkBrickHit+0x320>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	3b08      	subs	r3, #8
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4610      	mov	r0, r2
 8000bac:	f001 f950 	bl	8001e50 <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <checkBrickHit+0x320>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	3b08      	subs	r3, #8
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fbd8 	bl	8002370 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <checkBrickHit+0x320>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f1a3 0208 	sub.w	r2, r3, #8
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <checkBrickHit+0x320>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	da00      	bge.n	8000bd4 <checkBrickHit+0x308>
 8000bd2:	3307      	adds	r3, #7
 8000bd4:	10db      	asrs	r3, r3, #3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	4905      	ldr	r1, [pc, #20]	; (8000bf0 <checkBrickHit+0x324>)
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4403      	add	r3, r0
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	440b      	add	r3, r1
 8000be8:	e008      	b.n	8000bfc <checkBrickHit+0x330>
 8000bea:	bf00      	nop
 8000bec:	20000034 	.word	0x20000034
 8000bf0:	200000e8 	.word	0x200000e8
 8000bf4:	20001ee8 	.word	0x20001ee8
 8000bf8:	20000004 	.word	0x20000004
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	b298      	uxth	r0, r3
 8000c04:	4b93      	ldr	r3, [pc, #588]	; (8000e54 <checkBrickHit+0x588>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f1a3 0208 	sub.w	r2, r3, #8
 8000c0c:	4b91      	ldr	r3, [pc, #580]	; (8000e54 <checkBrickHit+0x588>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	da00      	bge.n	8000c18 <checkBrickHit+0x34c>
 8000c16:	3307      	adds	r3, #7
 8000c18:	10db      	asrs	r3, r3, #3
 8000c1a:	461c      	mov	r4, r3
 8000c1c:	498e      	ldr	r1, [pc, #568]	; (8000e58 <checkBrickHit+0x58c>)
 8000c1e:	4613      	mov	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	4423      	add	r3, r4
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	440b      	add	r3, r1
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	b299      	uxth	r1, r3
 8000c36:	4b87      	ldr	r3, [pc, #540]	; (8000e54 <checkBrickHit+0x588>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f1a3 0208 	sub.w	r2, r3, #8
 8000c3e:	4b85      	ldr	r3, [pc, #532]	; (8000e54 <checkBrickHit+0x588>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	da00      	bge.n	8000c4a <checkBrickHit+0x37e>
 8000c48:	3307      	adds	r3, #7
 8000c4a:	10db      	asrs	r3, r3, #3
 8000c4c:	461d      	mov	r5, r3
 8000c4e:	4c82      	ldr	r4, [pc, #520]	; (8000e58 <checkBrickHit+0x58c>)
 8000c50:	4613      	mov	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4413      	add	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	442b      	add	r3, r5
 8000c5a:	011b      	lsls	r3, r3, #4
 8000c5c:	4423      	add	r3, r4
 8000c5e:	330c      	adds	r3, #12
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a7e      	ldr	r2, [pc, #504]	; (8000e5c <checkBrickHit+0x590>)
 8000c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	2220      	movs	r2, #32
 8000c70:	f004 f9fe 	bl	8005070 <Displ_FillArea>
            bricksHit++;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	3301      	adds	r3, #1
 8000c78:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NW) {
 8000c7a:	4b76      	ldr	r3, [pc, #472]	; (8000e54 <checkBrickHit+0x588>)
 8000c7c:	7a1b      	ldrb	r3, [r3, #8]
 8000c7e:	2b07      	cmp	r3, #7
 8000c80:	d102      	bne.n	8000c88 <checkBrickHit+0x3bc>
                ball.dir = NE;
 8000c82:	4b74      	ldr	r3, [pc, #464]	; (8000e54 <checkBrickHit+0x588>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SW) {
 8000c88:	4b72      	ldr	r3, [pc, #456]	; (8000e54 <checkBrickHit+0x588>)
 8000c8a:	7a1b      	ldrb	r3, [r3, #8]
 8000c8c:	2b05      	cmp	r3, #5
 8000c8e:	d102      	bne.n	8000c96 <checkBrickHit+0x3ca>
                ball.dir = SE;
 8000c90:	4b70      	ldr	r3, [pc, #448]	; (8000e54 <checkBrickHit+0x588>)
 8000c92:	2203      	movs	r2, #3
 8000c94:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f041 80c6 	bne.w	8001e2a <checkBrickHit+0x155e>
            if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible == 1) {
 8000c9e:	4b6d      	ldr	r3, [pc, #436]	; (8000e54 <checkBrickHit+0x588>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f1a3 0209 	sub.w	r2, r3, #9
 8000ca6:	4b6b      	ldr	r3, [pc, #428]	; (8000e54 <checkBrickHit+0x588>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	da00      	bge.n	8000cb2 <checkBrickHit+0x3e6>
 8000cb0:	3307      	adds	r3, #7
 8000cb2:	10db      	asrs	r3, r3, #3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	4968      	ldr	r1, [pc, #416]	; (8000e58 <checkBrickHit+0x58c>)
 8000cb8:	4613      	mov	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4403      	add	r3, r0
 8000cc2:	011b      	lsls	r3, r3, #4
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3308      	adds	r3, #8
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	f041 80ad 	bne.w	8001e2a <checkBrickHit+0x155e>
                bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness--;
 8000cd0:	4b60      	ldr	r3, [pc, #384]	; (8000e54 <checkBrickHit+0x588>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f1a3 0209 	sub.w	r2, r3, #9
 8000cd8:	4b5e      	ldr	r3, [pc, #376]	; (8000e54 <checkBrickHit+0x588>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	da00      	bge.n	8000ce4 <checkBrickHit+0x418>
 8000ce2:	3307      	adds	r3, #7
 8000ce4:	10db      	asrs	r3, r3, #3
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	485b      	ldr	r0, [pc, #364]	; (8000e58 <checkBrickHit+0x58c>)
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	440b      	add	r3, r1
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	4403      	add	r3, r0
 8000cf8:	330c      	adds	r3, #12
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	1e58      	subs	r0, r3, #1
 8000cfe:	4c56      	ldr	r4, [pc, #344]	; (8000e58 <checkBrickHit+0x58c>)
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	440b      	add	r3, r1
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	4423      	add	r3, r4
 8000d0e:	330c      	adds	r3, #12
 8000d10:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8000d12:	4b50      	ldr	r3, [pc, #320]	; (8000e54 <checkBrickHit+0x588>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f1a3 0209 	sub.w	r2, r3, #9
 8000d1a:	4b4e      	ldr	r3, [pc, #312]	; (8000e54 <checkBrickHit+0x588>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da00      	bge.n	8000d26 <checkBrickHit+0x45a>
 8000d24:	3307      	adds	r3, #7
 8000d26:	10db      	asrs	r3, r3, #3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	494b      	ldr	r1, [pc, #300]	; (8000e58 <checkBrickHit+0x58c>)
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4403      	add	r3, r0
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	440b      	add	r3, r1
 8000d3a:	330c      	adds	r3, #12
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	dc33      	bgt.n	8000daa <checkBrickHit+0x4de>
                    bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible = 0;
 8000d42:	4b44      	ldr	r3, [pc, #272]	; (8000e54 <checkBrickHit+0x588>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f1a3 0209 	sub.w	r2, r3, #9
 8000d4a:	4b42      	ldr	r3, [pc, #264]	; (8000e54 <checkBrickHit+0x588>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	da00      	bge.n	8000d56 <checkBrickHit+0x48a>
 8000d54:	3307      	adds	r3, #7
 8000d56:	10db      	asrs	r3, r3, #3
 8000d58:	4618      	mov	r0, r3
 8000d5a:	493f      	ldr	r1, [pc, #252]	; (8000e58 <checkBrickHit+0x58c>)
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4403      	add	r3, r0
 8000d66:	011b      	lsls	r3, r3, #4
 8000d68:	440b      	add	r3, r1
 8000d6a:	3308      	adds	r3, #8
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
                    points++;
 8000d70:	4b3b      	ldr	r3, [pc, #236]	; (8000e60 <checkBrickHit+0x594>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <checkBrickHit+0x594>)
 8000d7a:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x - 1)/8, ball.y - 1 - 8);
 8000d7c:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <checkBrickHit+0x588>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	da00      	bge.n	8000d88 <checkBrickHit+0x4bc>
 8000d86:	3307      	adds	r3, #7
 8000d88:	10db      	asrs	r3, r3, #3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b31      	ldr	r3, [pc, #196]	; (8000e54 <checkBrickHit+0x588>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	3b09      	subs	r3, #9
 8000d92:	4619      	mov	r1, r3
 8000d94:	4610      	mov	r0, r2
 8000d96:	f001 f85b 	bl	8001e50 <dropPowerUp>
                    checkEmptyRow(ball.y - 1 - 8);
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <checkBrickHit+0x588>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	3b09      	subs	r3, #9
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f001 fae3 	bl	8002370 <checkEmptyRow>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness]);
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <checkBrickHit+0x588>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f1a3 0209 	sub.w	r2, r3, #9
 8000db2:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <checkBrickHit+0x588>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	da00      	bge.n	8000dbe <checkBrickHit+0x4f2>
 8000dbc:	3307      	adds	r3, #7
 8000dbe:	10db      	asrs	r3, r3, #3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	4925      	ldr	r1, [pc, #148]	; (8000e58 <checkBrickHit+0x58c>)
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4403      	add	r3, r0
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	440b      	add	r3, r1
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	b298      	uxth	r0, r3
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <checkBrickHit+0x588>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f1a3 0209 	sub.w	r2, r3, #9
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <checkBrickHit+0x588>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	da00      	bge.n	8000dee <checkBrickHit+0x522>
 8000dec:	3307      	adds	r3, #7
 8000dee:	10db      	asrs	r3, r3, #3
 8000df0:	461c      	mov	r4, r3
 8000df2:	4919      	ldr	r1, [pc, #100]	; (8000e58 <checkBrickHit+0x58c>)
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4423      	add	r3, r4
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	440b      	add	r3, r1
 8000e02:	3304      	adds	r3, #4
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	b299      	uxth	r1, r3
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <checkBrickHit+0x588>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f1a3 0209 	sub.w	r2, r3, #9
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <checkBrickHit+0x588>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	da00      	bge.n	8000e20 <checkBrickHit+0x554>
 8000e1e:	3307      	adds	r3, #7
 8000e20:	10db      	asrs	r3, r3, #3
 8000e22:	461d      	mov	r5, r3
 8000e24:	4c0c      	ldr	r4, [pc, #48]	; (8000e58 <checkBrickHit+0x58c>)
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	442b      	add	r3, r5
 8000e30:	011b      	lsls	r3, r3, #4
 8000e32:	4423      	add	r3, r4
 8000e34:	330c      	adds	r3, #12
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <checkBrickHit+0x590>)
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2304      	movs	r3, #4
 8000e44:	2220      	movs	r2, #32
 8000e46:	f004 f913 	bl	8005070 <Displ_FillArea>
                ball.dir = SE;
 8000e4a:	4b02      	ldr	r3, [pc, #8]	; (8000e54 <checkBrickHit+0x588>)
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8000e50:	f000 bfeb 	b.w	8001e2a <checkBrickHit+0x155e>
 8000e54:	20000034 	.word	0x20000034
 8000e58:	200000e8 	.word	0x200000e8
 8000e5c:	20000004 	.word	0x20000004
 8000e60:	20001ee8 	.word	0x20001ee8
    case NE:
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 8000e64:	4bb7      	ldr	r3, [pc, #732]	; (8001144 <checkBrickHit+0x878>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f1a3 0209 	sub.w	r2, r3, #9
 8000e6c:	4bb5      	ldr	r3, [pc, #724]	; (8001144 <checkBrickHit+0x878>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	da00      	bge.n	8000e76 <checkBrickHit+0x5aa>
 8000e74:	3307      	adds	r3, #7
 8000e76:	10db      	asrs	r3, r3, #3
 8000e78:	4618      	mov	r0, r3
 8000e7a:	49b3      	ldr	r1, [pc, #716]	; (8001148 <checkBrickHit+0x87c>)
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4403      	add	r3, r0
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	440b      	add	r3, r1
 8000e8a:	3308      	adds	r3, #8
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	f040 80bc 	bne.w	800100c <checkBrickHit+0x740>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000e94:	4bab      	ldr	r3, [pc, #684]	; (8001144 <checkBrickHit+0x878>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f1a3 0209 	sub.w	r2, r3, #9
 8000e9c:	4ba9      	ldr	r3, [pc, #676]	; (8001144 <checkBrickHit+0x878>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	da00      	bge.n	8000ea6 <checkBrickHit+0x5da>
 8000ea4:	3307      	adds	r3, #7
 8000ea6:	10db      	asrs	r3, r3, #3
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	48a7      	ldr	r0, [pc, #668]	; (8001148 <checkBrickHit+0x87c>)
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	440b      	add	r3, r1
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	4403      	add	r3, r0
 8000eba:	330c      	adds	r3, #12
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	1e58      	subs	r0, r3, #1
 8000ec0:	4ca1      	ldr	r4, [pc, #644]	; (8001148 <checkBrickHit+0x87c>)
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	440b      	add	r3, r1
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	4423      	add	r3, r4
 8000ed0:	330c      	adds	r3, #12
 8000ed2:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000ed4:	4b9b      	ldr	r3, [pc, #620]	; (8001144 <checkBrickHit+0x878>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f1a3 0209 	sub.w	r2, r3, #9
 8000edc:	4b99      	ldr	r3, [pc, #612]	; (8001144 <checkBrickHit+0x878>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	da00      	bge.n	8000ee6 <checkBrickHit+0x61a>
 8000ee4:	3307      	adds	r3, #7
 8000ee6:	10db      	asrs	r3, r3, #3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	4997      	ldr	r1, [pc, #604]	; (8001148 <checkBrickHit+0x87c>)
 8000eec:	4613      	mov	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4403      	add	r3, r0
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	440b      	add	r3, r1
 8000efa:	330c      	adds	r3, #12
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	dc31      	bgt.n	8000f66 <checkBrickHit+0x69a>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 8000f02:	4b90      	ldr	r3, [pc, #576]	; (8001144 <checkBrickHit+0x878>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f1a3 0209 	sub.w	r2, r3, #9
 8000f0a:	4b8e      	ldr	r3, [pc, #568]	; (8001144 <checkBrickHit+0x878>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	da00      	bge.n	8000f14 <checkBrickHit+0x648>
 8000f12:	3307      	adds	r3, #7
 8000f14:	10db      	asrs	r3, r3, #3
 8000f16:	4618      	mov	r0, r3
 8000f18:	498b      	ldr	r1, [pc, #556]	; (8001148 <checkBrickHit+0x87c>)
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4403      	add	r3, r0
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	440b      	add	r3, r1
 8000f28:	3308      	adds	r3, #8
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
                points++;
 8000f2e:	4b87      	ldr	r3, [pc, #540]	; (800114c <checkBrickHit+0x880>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b85      	ldr	r3, [pc, #532]	; (800114c <checkBrickHit+0x880>)
 8000f38:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 8000f3a:	4b82      	ldr	r3, [pc, #520]	; (8001144 <checkBrickHit+0x878>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da00      	bge.n	8000f44 <checkBrickHit+0x678>
 8000f42:	3307      	adds	r3, #7
 8000f44:	10db      	asrs	r3, r3, #3
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b7e      	ldr	r3, [pc, #504]	; (8001144 <checkBrickHit+0x878>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	3b09      	subs	r3, #9
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4610      	mov	r0, r2
 8000f52:	f000 ff7d 	bl	8001e50 <dropPowerUp>
                checkEmptyRow(ball.y - 1 - 8);
 8000f56:	4b7b      	ldr	r3, [pc, #492]	; (8001144 <checkBrickHit+0x878>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	3b09      	subs	r3, #9
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 fa05 	bl	8002370 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 8000f66:	4b77      	ldr	r3, [pc, #476]	; (8001144 <checkBrickHit+0x878>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f1a3 0209 	sub.w	r2, r3, #9
 8000f6e:	4b75      	ldr	r3, [pc, #468]	; (8001144 <checkBrickHit+0x878>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	da00      	bge.n	8000f78 <checkBrickHit+0x6ac>
 8000f76:	3307      	adds	r3, #7
 8000f78:	10db      	asrs	r3, r3, #3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	4972      	ldr	r1, [pc, #456]	; (8001148 <checkBrickHit+0x87c>)
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4403      	add	r3, r0
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	440b      	add	r3, r1
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	b298      	uxth	r0, r3
 8000f94:	4b6b      	ldr	r3, [pc, #428]	; (8001144 <checkBrickHit+0x878>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f1a3 0209 	sub.w	r2, r3, #9
 8000f9c:	4b69      	ldr	r3, [pc, #420]	; (8001144 <checkBrickHit+0x878>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	da00      	bge.n	8000fa6 <checkBrickHit+0x6da>
 8000fa4:	3307      	adds	r3, #7
 8000fa6:	10db      	asrs	r3, r3, #3
 8000fa8:	461c      	mov	r4, r3
 8000faa:	4967      	ldr	r1, [pc, #412]	; (8001148 <checkBrickHit+0x87c>)
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4423      	add	r3, r4
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	440b      	add	r3, r1
 8000fba:	3304      	adds	r3, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	b299      	uxth	r1, r3
 8000fc4:	4b5f      	ldr	r3, [pc, #380]	; (8001144 <checkBrickHit+0x878>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f1a3 0209 	sub.w	r2, r3, #9
 8000fcc:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <checkBrickHit+0x878>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	da00      	bge.n	8000fd6 <checkBrickHit+0x70a>
 8000fd4:	3307      	adds	r3, #7
 8000fd6:	10db      	asrs	r3, r3, #3
 8000fd8:	461d      	mov	r5, r3
 8000fda:	4c5b      	ldr	r4, [pc, #364]	; (8001148 <checkBrickHit+0x87c>)
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	442b      	add	r3, r5
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	4423      	add	r3, r4
 8000fea:	330c      	adds	r3, #12
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a58      	ldr	r2, [pc, #352]	; (8001150 <checkBrickHit+0x884>)
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	2220      	movs	r2, #32
 8000ffc:	f004 f838 	bl	8005070 <Displ_FillArea>
            bricksHit++;
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	3301      	adds	r3, #1
 8001004:	71fb      	strb	r3, [r7, #7]
            ball.dir = SE;
 8001006:	4b4f      	ldr	r3, [pc, #316]	; (8001144 <checkBrickHit+0x878>)
 8001008:	2203      	movs	r2, #3
 800100a:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 800100c:	4b4d      	ldr	r3, [pc, #308]	; (8001144 <checkBrickHit+0x878>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f1a3 0208 	sub.w	r2, r3, #8
 8001014:	4b4b      	ldr	r3, [pc, #300]	; (8001144 <checkBrickHit+0x878>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	2b00      	cmp	r3, #0
 800101c:	da00      	bge.n	8001020 <checkBrickHit+0x754>
 800101e:	3307      	adds	r3, #7
 8001020:	10db      	asrs	r3, r3, #3
 8001022:	4618      	mov	r0, r3
 8001024:	4948      	ldr	r1, [pc, #288]	; (8001148 <checkBrickHit+0x87c>)
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4403      	add	r3, r0
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	440b      	add	r3, r1
 8001034:	3308      	adds	r3, #8
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b01      	cmp	r3, #1
 800103a:	f040 80d8 	bne.w	80011ee <checkBrickHit+0x922>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 800103e:	4b41      	ldr	r3, [pc, #260]	; (8001144 <checkBrickHit+0x878>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f1a3 0208 	sub.w	r2, r3, #8
 8001046:	4b3f      	ldr	r3, [pc, #252]	; (8001144 <checkBrickHit+0x878>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	da00      	bge.n	8001052 <checkBrickHit+0x786>
 8001050:	3307      	adds	r3, #7
 8001052:	10db      	asrs	r3, r3, #3
 8001054:	4619      	mov	r1, r3
 8001056:	483c      	ldr	r0, [pc, #240]	; (8001148 <checkBrickHit+0x87c>)
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	440b      	add	r3, r1
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	4403      	add	r3, r0
 8001066:	330c      	adds	r3, #12
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1e58      	subs	r0, r3, #1
 800106c:	4c36      	ldr	r4, [pc, #216]	; (8001148 <checkBrickHit+0x87c>)
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	440b      	add	r3, r1
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	4423      	add	r3, r4
 800107c:	330c      	adds	r3, #12
 800107e:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 8001080:	4b30      	ldr	r3, [pc, #192]	; (8001144 <checkBrickHit+0x878>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f1a3 0208 	sub.w	r2, r3, #8
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <checkBrickHit+0x878>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	da00      	bge.n	8001094 <checkBrickHit+0x7c8>
 8001092:	3307      	adds	r3, #7
 8001094:	10db      	asrs	r3, r3, #3
 8001096:	4618      	mov	r0, r3
 8001098:	492b      	ldr	r1, [pc, #172]	; (8001148 <checkBrickHit+0x87c>)
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4403      	add	r3, r0
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	440b      	add	r3, r1
 80010a8:	330c      	adds	r3, #12
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dc33      	bgt.n	8001118 <checkBrickHit+0x84c>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <checkBrickHit+0x878>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f1a3 0208 	sub.w	r2, r3, #8
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <checkBrickHit+0x878>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	da00      	bge.n	80010c4 <checkBrickHit+0x7f8>
 80010c2:	3307      	adds	r3, #7
 80010c4:	10db      	asrs	r3, r3, #3
 80010c6:	4618      	mov	r0, r3
 80010c8:	491f      	ldr	r1, [pc, #124]	; (8001148 <checkBrickHit+0x87c>)
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4403      	add	r3, r0
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	440b      	add	r3, r1
 80010d8:	3308      	adds	r3, #8
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
                points++;
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <checkBrickHit+0x880>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <checkBrickHit+0x880>)
 80010e8:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <checkBrickHit+0x878>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	da00      	bge.n	80010f6 <checkBrickHit+0x82a>
 80010f4:	3307      	adds	r3, #7
 80010f6:	10db      	asrs	r3, r3, #3
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <checkBrickHit+0x878>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	3b08      	subs	r3, #8
 8001100:	4619      	mov	r1, r3
 8001102:	4610      	mov	r0, r2
 8001104:	f000 fea4 	bl	8001e50 <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <checkBrickHit+0x878>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	3b08      	subs	r3, #8
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f001 f92c 	bl	8002370 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <checkBrickHit+0x878>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f1a3 0208 	sub.w	r2, r3, #8
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <checkBrickHit+0x878>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	da00      	bge.n	800112c <checkBrickHit+0x860>
 800112a:	3307      	adds	r3, #7
 800112c:	10db      	asrs	r3, r3, #3
 800112e:	4618      	mov	r0, r3
 8001130:	4905      	ldr	r1, [pc, #20]	; (8001148 <checkBrickHit+0x87c>)
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4403      	add	r3, r0
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	440b      	add	r3, r1
 8001140:	e008      	b.n	8001154 <checkBrickHit+0x888>
 8001142:	bf00      	nop
 8001144:	20000034 	.word	0x20000034
 8001148:	200000e8 	.word	0x200000e8
 800114c:	20001ee8 	.word	0x20001ee8
 8001150:	20000004 	.word	0x20000004
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	b298      	uxth	r0, r3
 800115c:	4b93      	ldr	r3, [pc, #588]	; (80013ac <checkBrickHit+0xae0>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f1a3 0208 	sub.w	r2, r3, #8
 8001164:	4b91      	ldr	r3, [pc, #580]	; (80013ac <checkBrickHit+0xae0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	da00      	bge.n	8001170 <checkBrickHit+0x8a4>
 800116e:	3307      	adds	r3, #7
 8001170:	10db      	asrs	r3, r3, #3
 8001172:	461c      	mov	r4, r3
 8001174:	498e      	ldr	r1, [pc, #568]	; (80013b0 <checkBrickHit+0xae4>)
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4423      	add	r3, r4
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	440b      	add	r3, r1
 8001184:	3304      	adds	r3, #4
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	b299      	uxth	r1, r3
 800118e:	4b87      	ldr	r3, [pc, #540]	; (80013ac <checkBrickHit+0xae0>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f1a3 0208 	sub.w	r2, r3, #8
 8001196:	4b85      	ldr	r3, [pc, #532]	; (80013ac <checkBrickHit+0xae0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	da00      	bge.n	80011a2 <checkBrickHit+0x8d6>
 80011a0:	3307      	adds	r3, #7
 80011a2:	10db      	asrs	r3, r3, #3
 80011a4:	461d      	mov	r5, r3
 80011a6:	4c82      	ldr	r4, [pc, #520]	; (80013b0 <checkBrickHit+0xae4>)
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	442b      	add	r3, r5
 80011b2:	011b      	lsls	r3, r3, #4
 80011b4:	4423      	add	r3, r4
 80011b6:	330c      	adds	r3, #12
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a7e      	ldr	r2, [pc, #504]	; (80013b4 <checkBrickHit+0xae8>)
 80011bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2304      	movs	r3, #4
 80011c6:	2220      	movs	r2, #32
 80011c8:	f003 ff52 	bl	8005070 <Displ_FillArea>
            bricksHit++;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	3301      	adds	r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NE) {
 80011d2:	4b76      	ldr	r3, [pc, #472]	; (80013ac <checkBrickHit+0xae0>)
 80011d4:	7a1b      	ldrb	r3, [r3, #8]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d102      	bne.n	80011e0 <checkBrickHit+0x914>
                ball.dir = NW;
 80011da:	4b74      	ldr	r3, [pc, #464]	; (80013ac <checkBrickHit+0xae0>)
 80011dc:	2207      	movs	r2, #7
 80011de:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SE) {
 80011e0:	4b72      	ldr	r3, [pc, #456]	; (80013ac <checkBrickHit+0xae0>)
 80011e2:	7a1b      	ldrb	r3, [r3, #8]
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d102      	bne.n	80011ee <checkBrickHit+0x922>
                ball.dir = SW;
 80011e8:	4b70      	ldr	r3, [pc, #448]	; (80013ac <checkBrickHit+0xae0>)
 80011ea:	2205      	movs	r2, #5
 80011ec:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f040 861c 	bne.w	8001e2e <checkBrickHit+0x1562>
            if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible == 1) {
 80011f6:	4b6d      	ldr	r3, [pc, #436]	; (80013ac <checkBrickHit+0xae0>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f1a3 0209 	sub.w	r2, r3, #9
 80011fe:	4b6b      	ldr	r3, [pc, #428]	; (80013ac <checkBrickHit+0xae0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	da00      	bge.n	800120a <checkBrickHit+0x93e>
 8001208:	3307      	adds	r3, #7
 800120a:	10db      	asrs	r3, r3, #3
 800120c:	4618      	mov	r0, r3
 800120e:	4968      	ldr	r1, [pc, #416]	; (80013b0 <checkBrickHit+0xae4>)
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4403      	add	r3, r0
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	440b      	add	r3, r1
 800121e:	3308      	adds	r3, #8
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	f040 8603 	bne.w	8001e2e <checkBrickHit+0x1562>
                bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness--;
 8001228:	4b60      	ldr	r3, [pc, #384]	; (80013ac <checkBrickHit+0xae0>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f1a3 0209 	sub.w	r2, r3, #9
 8001230:	4b5e      	ldr	r3, [pc, #376]	; (80013ac <checkBrickHit+0xae0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	da00      	bge.n	800123c <checkBrickHit+0x970>
 800123a:	3307      	adds	r3, #7
 800123c:	10db      	asrs	r3, r3, #3
 800123e:	4619      	mov	r1, r3
 8001240:	485b      	ldr	r0, [pc, #364]	; (80013b0 <checkBrickHit+0xae4>)
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	440b      	add	r3, r1
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	4403      	add	r3, r0
 8001250:	330c      	adds	r3, #12
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	1e58      	subs	r0, r3, #1
 8001256:	4c56      	ldr	r4, [pc, #344]	; (80013b0 <checkBrickHit+0xae4>)
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	440b      	add	r3, r1
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	4423      	add	r3, r4
 8001266:	330c      	adds	r3, #12
 8001268:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness <= 0) {
 800126a:	4b50      	ldr	r3, [pc, #320]	; (80013ac <checkBrickHit+0xae0>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f1a3 0209 	sub.w	r2, r3, #9
 8001272:	4b4e      	ldr	r3, [pc, #312]	; (80013ac <checkBrickHit+0xae0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	da00      	bge.n	800127e <checkBrickHit+0x9b2>
 800127c:	3307      	adds	r3, #7
 800127e:	10db      	asrs	r3, r3, #3
 8001280:	4618      	mov	r0, r3
 8001282:	494b      	ldr	r1, [pc, #300]	; (80013b0 <checkBrickHit+0xae4>)
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4403      	add	r3, r0
 800128e:	011b      	lsls	r3, r3, #4
 8001290:	440b      	add	r3, r1
 8001292:	330c      	adds	r3, #12
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	dc33      	bgt.n	8001302 <checkBrickHit+0xa36>
                    bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible = 0;
 800129a:	4b44      	ldr	r3, [pc, #272]	; (80013ac <checkBrickHit+0xae0>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f1a3 0209 	sub.w	r2, r3, #9
 80012a2:	4b42      	ldr	r3, [pc, #264]	; (80013ac <checkBrickHit+0xae0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da00      	bge.n	80012ae <checkBrickHit+0x9e2>
 80012ac:	3307      	adds	r3, #7
 80012ae:	10db      	asrs	r3, r3, #3
 80012b0:	4618      	mov	r0, r3
 80012b2:	493f      	ldr	r1, [pc, #252]	; (80013b0 <checkBrickHit+0xae4>)
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4403      	add	r3, r0
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	440b      	add	r3, r1
 80012c2:	3308      	adds	r3, #8
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
                    points++;
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <checkBrickHit+0xaec>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <checkBrickHit+0xaec>)
 80012d2:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x + 1)/8, ball.y - 1 - 8);
 80012d4:	4b35      	ldr	r3, [pc, #212]	; (80013ac <checkBrickHit+0xae0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	da00      	bge.n	80012e0 <checkBrickHit+0xa14>
 80012de:	3307      	adds	r3, #7
 80012e0:	10db      	asrs	r3, r3, #3
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b31      	ldr	r3, [pc, #196]	; (80013ac <checkBrickHit+0xae0>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	3b09      	subs	r3, #9
 80012ea:	4619      	mov	r1, r3
 80012ec:	4610      	mov	r0, r2
 80012ee:	f000 fdaf 	bl	8001e50 <dropPowerUp>
                    checkEmptyRow(ball.y - 1 - 8);
 80012f2:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <checkBrickHit+0xae0>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	3b09      	subs	r3, #9
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 f837 	bl	8002370 <checkEmptyRow>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness]);
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <checkBrickHit+0xae0>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f1a3 0209 	sub.w	r2, r3, #9
 800130a:	4b28      	ldr	r3, [pc, #160]	; (80013ac <checkBrickHit+0xae0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	da00      	bge.n	8001316 <checkBrickHit+0xa4a>
 8001314:	3307      	adds	r3, #7
 8001316:	10db      	asrs	r3, r3, #3
 8001318:	4618      	mov	r0, r3
 800131a:	4925      	ldr	r1, [pc, #148]	; (80013b0 <checkBrickHit+0xae4>)
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4403      	add	r3, r0
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	440b      	add	r3, r1
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	b29b      	uxth	r3, r3
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	b298      	uxth	r0, r3
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <checkBrickHit+0xae0>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f1a3 0209 	sub.w	r2, r3, #9
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <checkBrickHit+0xae0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	da00      	bge.n	8001346 <checkBrickHit+0xa7a>
 8001344:	3307      	adds	r3, #7
 8001346:	10db      	asrs	r3, r3, #3
 8001348:	461c      	mov	r4, r3
 800134a:	4919      	ldr	r1, [pc, #100]	; (80013b0 <checkBrickHit+0xae4>)
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4423      	add	r3, r4
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	440b      	add	r3, r1
 800135a:	3304      	adds	r3, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	b299      	uxth	r1, r3
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <checkBrickHit+0xae0>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f1a3 0209 	sub.w	r2, r3, #9
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <checkBrickHit+0xae0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	da00      	bge.n	8001378 <checkBrickHit+0xaac>
 8001376:	3307      	adds	r3, #7
 8001378:	10db      	asrs	r3, r3, #3
 800137a:	461d      	mov	r5, r3
 800137c:	4c0c      	ldr	r4, [pc, #48]	; (80013b0 <checkBrickHit+0xae4>)
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	442b      	add	r3, r5
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	4423      	add	r3, r4
 800138c:	330c      	adds	r3, #12
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <checkBrickHit+0xae8>)
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	b29b      	uxth	r3, r3
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2304      	movs	r3, #4
 800139c:	2220      	movs	r2, #32
 800139e:	f003 fe67 	bl	8005070 <Displ_FillArea>
                ball.dir = SW;
 80013a2:	4b02      	ldr	r3, [pc, #8]	; (80013ac <checkBrickHit+0xae0>)
 80013a4:	2205      	movs	r2, #5
 80013a6:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 80013a8:	f000 bd41 	b.w	8001e2e <checkBrickHit+0x1562>
 80013ac:	20000034 	.word	0x20000034
 80013b0:	200000e8 	.word	0x200000e8
 80013b4:	20000004 	.word	0x20000004
 80013b8:	20001ee8 	.word	0x20001ee8
    case SE:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 80013bc:	4bb5      	ldr	r3, [pc, #724]	; (8001694 <checkBrickHit+0xdc8>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	1fda      	subs	r2, r3, #7
 80013c2:	4bb4      	ldr	r3, [pc, #720]	; (8001694 <checkBrickHit+0xdc8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da00      	bge.n	80013cc <checkBrickHit+0xb00>
 80013ca:	3307      	adds	r3, #7
 80013cc:	10db      	asrs	r3, r3, #3
 80013ce:	4618      	mov	r0, r3
 80013d0:	49b1      	ldr	r1, [pc, #708]	; (8001698 <checkBrickHit+0xdcc>)
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4403      	add	r3, r0
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	440b      	add	r3, r1
 80013e0:	3308      	adds	r3, #8
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	f040 80b6 	bne.w	8001556 <checkBrickHit+0xc8a>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 80013ea:	4baa      	ldr	r3, [pc, #680]	; (8001694 <checkBrickHit+0xdc8>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	1fda      	subs	r2, r3, #7
 80013f0:	4ba8      	ldr	r3, [pc, #672]	; (8001694 <checkBrickHit+0xdc8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	da00      	bge.n	80013fa <checkBrickHit+0xb2e>
 80013f8:	3307      	adds	r3, #7
 80013fa:	10db      	asrs	r3, r3, #3
 80013fc:	4619      	mov	r1, r3
 80013fe:	48a6      	ldr	r0, [pc, #664]	; (8001698 <checkBrickHit+0xdcc>)
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	440b      	add	r3, r1
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	4403      	add	r3, r0
 800140e:	330c      	adds	r3, #12
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	1e58      	subs	r0, r3, #1
 8001414:	4ca0      	ldr	r4, [pc, #640]	; (8001698 <checkBrickHit+0xdcc>)
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	440b      	add	r3, r1
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	4423      	add	r3, r4
 8001424:	330c      	adds	r3, #12
 8001426:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 8001428:	4b9a      	ldr	r3, [pc, #616]	; (8001694 <checkBrickHit+0xdc8>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	1fda      	subs	r2, r3, #7
 800142e:	4b99      	ldr	r3, [pc, #612]	; (8001694 <checkBrickHit+0xdc8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	da00      	bge.n	8001438 <checkBrickHit+0xb6c>
 8001436:	3307      	adds	r3, #7
 8001438:	10db      	asrs	r3, r3, #3
 800143a:	4618      	mov	r0, r3
 800143c:	4996      	ldr	r1, [pc, #600]	; (8001698 <checkBrickHit+0xdcc>)
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4403      	add	r3, r0
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	440b      	add	r3, r1
 800144c:	330c      	adds	r3, #12
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	dc30      	bgt.n	80014b6 <checkBrickHit+0xbea>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 8001454:	4b8f      	ldr	r3, [pc, #572]	; (8001694 <checkBrickHit+0xdc8>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	1fda      	subs	r2, r3, #7
 800145a:	4b8e      	ldr	r3, [pc, #568]	; (8001694 <checkBrickHit+0xdc8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	da00      	bge.n	8001464 <checkBrickHit+0xb98>
 8001462:	3307      	adds	r3, #7
 8001464:	10db      	asrs	r3, r3, #3
 8001466:	4618      	mov	r0, r3
 8001468:	498b      	ldr	r1, [pc, #556]	; (8001698 <checkBrickHit+0xdcc>)
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4403      	add	r3, r0
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	440b      	add	r3, r1
 8001478:	3308      	adds	r3, #8
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
                points++;
 800147e:	4b87      	ldr	r3, [pc, #540]	; (800169c <checkBrickHit+0xdd0>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b85      	ldr	r3, [pc, #532]	; (800169c <checkBrickHit+0xdd0>)
 8001488:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 800148a:	4b82      	ldr	r3, [pc, #520]	; (8001694 <checkBrickHit+0xdc8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	da00      	bge.n	8001494 <checkBrickHit+0xbc8>
 8001492:	3307      	adds	r3, #7
 8001494:	10db      	asrs	r3, r3, #3
 8001496:	461a      	mov	r2, r3
 8001498:	4b7e      	ldr	r3, [pc, #504]	; (8001694 <checkBrickHit+0xdc8>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	3b07      	subs	r3, #7
 800149e:	4619      	mov	r1, r3
 80014a0:	4610      	mov	r0, r2
 80014a2:	f000 fcd5 	bl	8001e50 <dropPowerUp>
                checkEmptyRow(ball.y + 1 - 8);
 80014a6:	4b7b      	ldr	r3, [pc, #492]	; (8001694 <checkBrickHit+0xdc8>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	3b07      	subs	r3, #7
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 ff5d 	bl	8002370 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 80014b6:	4b77      	ldr	r3, [pc, #476]	; (8001694 <checkBrickHit+0xdc8>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	1fda      	subs	r2, r3, #7
 80014bc:	4b75      	ldr	r3, [pc, #468]	; (8001694 <checkBrickHit+0xdc8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	da00      	bge.n	80014c6 <checkBrickHit+0xbfa>
 80014c4:	3307      	adds	r3, #7
 80014c6:	10db      	asrs	r3, r3, #3
 80014c8:	4618      	mov	r0, r3
 80014ca:	4973      	ldr	r1, [pc, #460]	; (8001698 <checkBrickHit+0xdcc>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4403      	add	r3, r0
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	440b      	add	r3, r1
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	b298      	uxth	r0, r3
 80014e2:	4b6c      	ldr	r3, [pc, #432]	; (8001694 <checkBrickHit+0xdc8>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	1fda      	subs	r2, r3, #7
 80014e8:	4b6a      	ldr	r3, [pc, #424]	; (8001694 <checkBrickHit+0xdc8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da00      	bge.n	80014f2 <checkBrickHit+0xc26>
 80014f0:	3307      	adds	r3, #7
 80014f2:	10db      	asrs	r3, r3, #3
 80014f4:	461c      	mov	r4, r3
 80014f6:	4968      	ldr	r1, [pc, #416]	; (8001698 <checkBrickHit+0xdcc>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4423      	add	r3, r4
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	440b      	add	r3, r1
 8001506:	3304      	adds	r3, #4
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	b299      	uxth	r1, r3
 8001510:	4b60      	ldr	r3, [pc, #384]	; (8001694 <checkBrickHit+0xdc8>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	1fda      	subs	r2, r3, #7
 8001516:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <checkBrickHit+0xdc8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	da00      	bge.n	8001520 <checkBrickHit+0xc54>
 800151e:	3307      	adds	r3, #7
 8001520:	10db      	asrs	r3, r3, #3
 8001522:	461d      	mov	r5, r3
 8001524:	4c5c      	ldr	r4, [pc, #368]	; (8001698 <checkBrickHit+0xdcc>)
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	442b      	add	r3, r5
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	4423      	add	r3, r4
 8001534:	330c      	adds	r3, #12
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a59      	ldr	r2, [pc, #356]	; (80016a0 <checkBrickHit+0xdd4>)
 800153a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153e:	b29b      	uxth	r3, r3
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2304      	movs	r3, #4
 8001544:	2220      	movs	r2, #32
 8001546:	f003 fd93 	bl	8005070 <Displ_FillArea>
            bricksHit++;
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	3301      	adds	r3, #1
 800154e:	71fb      	strb	r3, [r7, #7]
            ball.dir = NE;
 8001550:	4b50      	ldr	r3, [pc, #320]	; (8001694 <checkBrickHit+0xdc8>)
 8001552:	2201      	movs	r2, #1
 8001554:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 8001556:	4b4f      	ldr	r3, [pc, #316]	; (8001694 <checkBrickHit+0xdc8>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f1a3 0208 	sub.w	r2, r3, #8
 800155e:	4b4d      	ldr	r3, [pc, #308]	; (8001694 <checkBrickHit+0xdc8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	da00      	bge.n	800156a <checkBrickHit+0xc9e>
 8001568:	3307      	adds	r3, #7
 800156a:	10db      	asrs	r3, r3, #3
 800156c:	4618      	mov	r0, r3
 800156e:	494a      	ldr	r1, [pc, #296]	; (8001698 <checkBrickHit+0xdcc>)
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4403      	add	r3, r0
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	440b      	add	r3, r1
 800157e:	3308      	adds	r3, #8
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	f040 80d7 	bne.w	8001736 <checkBrickHit+0xe6a>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 8001588:	4b42      	ldr	r3, [pc, #264]	; (8001694 <checkBrickHit+0xdc8>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f1a3 0208 	sub.w	r2, r3, #8
 8001590:	4b40      	ldr	r3, [pc, #256]	; (8001694 <checkBrickHit+0xdc8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	da00      	bge.n	800159c <checkBrickHit+0xcd0>
 800159a:	3307      	adds	r3, #7
 800159c:	10db      	asrs	r3, r3, #3
 800159e:	4619      	mov	r1, r3
 80015a0:	483d      	ldr	r0, [pc, #244]	; (8001698 <checkBrickHit+0xdcc>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	440b      	add	r3, r1
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	4403      	add	r3, r0
 80015b0:	330c      	adds	r3, #12
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	1e58      	subs	r0, r3, #1
 80015b6:	4c38      	ldr	r4, [pc, #224]	; (8001698 <checkBrickHit+0xdcc>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	440b      	add	r3, r1
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	4423      	add	r3, r4
 80015c6:	330c      	adds	r3, #12
 80015c8:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 80015ca:	4b32      	ldr	r3, [pc, #200]	; (8001694 <checkBrickHit+0xdc8>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f1a3 0208 	sub.w	r2, r3, #8
 80015d2:	4b30      	ldr	r3, [pc, #192]	; (8001694 <checkBrickHit+0xdc8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da00      	bge.n	80015de <checkBrickHit+0xd12>
 80015dc:	3307      	adds	r3, #7
 80015de:	10db      	asrs	r3, r3, #3
 80015e0:	4618      	mov	r0, r3
 80015e2:	492d      	ldr	r1, [pc, #180]	; (8001698 <checkBrickHit+0xdcc>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4403      	add	r3, r0
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	440b      	add	r3, r1
 80015f2:	330c      	adds	r3, #12
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	dc33      	bgt.n	8001662 <checkBrickHit+0xd96>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <checkBrickHit+0xdc8>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f1a3 0208 	sub.w	r2, r3, #8
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <checkBrickHit+0xdc8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	da00      	bge.n	800160e <checkBrickHit+0xd42>
 800160c:	3307      	adds	r3, #7
 800160e:	10db      	asrs	r3, r3, #3
 8001610:	4618      	mov	r0, r3
 8001612:	4921      	ldr	r1, [pc, #132]	; (8001698 <checkBrickHit+0xdcc>)
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4403      	add	r3, r0
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	440b      	add	r3, r1
 8001622:	3308      	adds	r3, #8
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
                points++;
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <checkBrickHit+0xdd0>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <checkBrickHit+0xdd0>)
 8001632:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <checkBrickHit+0xdc8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3301      	adds	r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	da00      	bge.n	8001640 <checkBrickHit+0xd74>
 800163e:	3307      	adds	r3, #7
 8001640:	10db      	asrs	r3, r3, #3
 8001642:	461a      	mov	r2, r3
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <checkBrickHit+0xdc8>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	3b08      	subs	r3, #8
 800164a:	4619      	mov	r1, r3
 800164c:	4610      	mov	r0, r2
 800164e:	f000 fbff 	bl	8001e50 <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <checkBrickHit+0xdc8>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	3b08      	subs	r3, #8
 800165a:	b2db      	uxtb	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fe87 	bl	8002370 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <checkBrickHit+0xdc8>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f1a3 0208 	sub.w	r2, r3, #8
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <checkBrickHit+0xdc8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	da00      	bge.n	8001676 <checkBrickHit+0xdaa>
 8001674:	3307      	adds	r3, #7
 8001676:	10db      	asrs	r3, r3, #3
 8001678:	4618      	mov	r0, r3
 800167a:	4907      	ldr	r1, [pc, #28]	; (8001698 <checkBrickHit+0xdcc>)
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4403      	add	r3, r0
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	440b      	add	r3, r1
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	b29b      	uxth	r3, r3
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	b298      	uxth	r0, r3
 8001692:	e007      	b.n	80016a4 <checkBrickHit+0xdd8>
 8001694:	20000034 	.word	0x20000034
 8001698:	200000e8 	.word	0x200000e8
 800169c:	20001ee8 	.word	0x20001ee8
 80016a0:	20000004 	.word	0x20000004
 80016a4:	4b8f      	ldr	r3, [pc, #572]	; (80018e4 <checkBrickHit+0x1018>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f1a3 0208 	sub.w	r2, r3, #8
 80016ac:	4b8d      	ldr	r3, [pc, #564]	; (80018e4 <checkBrickHit+0x1018>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	da00      	bge.n	80016b8 <checkBrickHit+0xdec>
 80016b6:	3307      	adds	r3, #7
 80016b8:	10db      	asrs	r3, r3, #3
 80016ba:	461c      	mov	r4, r3
 80016bc:	498a      	ldr	r1, [pc, #552]	; (80018e8 <checkBrickHit+0x101c>)
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4423      	add	r3, r4
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	440b      	add	r3, r1
 80016cc:	3304      	adds	r3, #4
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	b299      	uxth	r1, r3
 80016d6:	4b83      	ldr	r3, [pc, #524]	; (80018e4 <checkBrickHit+0x1018>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f1a3 0208 	sub.w	r2, r3, #8
 80016de:	4b81      	ldr	r3, [pc, #516]	; (80018e4 <checkBrickHit+0x1018>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	da00      	bge.n	80016ea <checkBrickHit+0xe1e>
 80016e8:	3307      	adds	r3, #7
 80016ea:	10db      	asrs	r3, r3, #3
 80016ec:	461d      	mov	r5, r3
 80016ee:	4c7e      	ldr	r4, [pc, #504]	; (80018e8 <checkBrickHit+0x101c>)
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	442b      	add	r3, r5
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4423      	add	r3, r4
 80016fe:	330c      	adds	r3, #12
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a7a      	ldr	r2, [pc, #488]	; (80018ec <checkBrickHit+0x1020>)
 8001704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001708:	b29b      	uxth	r3, r3
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2304      	movs	r3, #4
 800170e:	2220      	movs	r2, #32
 8001710:	f003 fcae 	bl	8005070 <Displ_FillArea>
            bricksHit++;
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	3301      	adds	r3, #1
 8001718:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SE) {
 800171a:	4b72      	ldr	r3, [pc, #456]	; (80018e4 <checkBrickHit+0x1018>)
 800171c:	7a1b      	ldrb	r3, [r3, #8]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d102      	bne.n	8001728 <checkBrickHit+0xe5c>
                ball.dir = SW;
 8001722:	4b70      	ldr	r3, [pc, #448]	; (80018e4 <checkBrickHit+0x1018>)
 8001724:	2205      	movs	r2, #5
 8001726:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NE) {
 8001728:	4b6e      	ldr	r3, [pc, #440]	; (80018e4 <checkBrickHit+0x1018>)
 800172a:	7a1b      	ldrb	r3, [r3, #8]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d102      	bne.n	8001736 <checkBrickHit+0xe6a>
                ball.dir = NW;
 8001730:	4b6c      	ldr	r3, [pc, #432]	; (80018e4 <checkBrickHit+0x1018>)
 8001732:	2207      	movs	r2, #7
 8001734:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f040 837a 	bne.w	8001e32 <checkBrickHit+0x1566>
            if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible == 1) {
 800173e:	4b69      	ldr	r3, [pc, #420]	; (80018e4 <checkBrickHit+0x1018>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	1fda      	subs	r2, r3, #7
 8001744:	4b67      	ldr	r3, [pc, #412]	; (80018e4 <checkBrickHit+0x1018>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	da00      	bge.n	8001750 <checkBrickHit+0xe84>
 800174e:	3307      	adds	r3, #7
 8001750:	10db      	asrs	r3, r3, #3
 8001752:	4618      	mov	r0, r3
 8001754:	4964      	ldr	r1, [pc, #400]	; (80018e8 <checkBrickHit+0x101c>)
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4403      	add	r3, r0
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	440b      	add	r3, r1
 8001764:	3308      	adds	r3, #8
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	f040 8362 	bne.w	8001e32 <checkBrickHit+0x1566>
                bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness--;
 800176e:	4b5d      	ldr	r3, [pc, #372]	; (80018e4 <checkBrickHit+0x1018>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	1fda      	subs	r2, r3, #7
 8001774:	4b5b      	ldr	r3, [pc, #364]	; (80018e4 <checkBrickHit+0x1018>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	da00      	bge.n	8001780 <checkBrickHit+0xeb4>
 800177e:	3307      	adds	r3, #7
 8001780:	10db      	asrs	r3, r3, #3
 8001782:	4619      	mov	r1, r3
 8001784:	4858      	ldr	r0, [pc, #352]	; (80018e8 <checkBrickHit+0x101c>)
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	440b      	add	r3, r1
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	4403      	add	r3, r0
 8001794:	330c      	adds	r3, #12
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	1e58      	subs	r0, r3, #1
 800179a:	4c53      	ldr	r4, [pc, #332]	; (80018e8 <checkBrickHit+0x101c>)
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	440b      	add	r3, r1
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	4423      	add	r3, r4
 80017aa:	330c      	adds	r3, #12
 80017ac:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness <= 0) {
 80017ae:	4b4d      	ldr	r3, [pc, #308]	; (80018e4 <checkBrickHit+0x1018>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	1fda      	subs	r2, r3, #7
 80017b4:	4b4b      	ldr	r3, [pc, #300]	; (80018e4 <checkBrickHit+0x1018>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	da00      	bge.n	80017c0 <checkBrickHit+0xef4>
 80017be:	3307      	adds	r3, #7
 80017c0:	10db      	asrs	r3, r3, #3
 80017c2:	4618      	mov	r0, r3
 80017c4:	4948      	ldr	r1, [pc, #288]	; (80018e8 <checkBrickHit+0x101c>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4403      	add	r3, r0
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	440b      	add	r3, r1
 80017d4:	330c      	adds	r3, #12
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	dc32      	bgt.n	8001842 <checkBrickHit+0xf76>
                    bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible = 0;
 80017dc:	4b41      	ldr	r3, [pc, #260]	; (80018e4 <checkBrickHit+0x1018>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	1fda      	subs	r2, r3, #7
 80017e2:	4b40      	ldr	r3, [pc, #256]	; (80018e4 <checkBrickHit+0x1018>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	da00      	bge.n	80017ee <checkBrickHit+0xf22>
 80017ec:	3307      	adds	r3, #7
 80017ee:	10db      	asrs	r3, r3, #3
 80017f0:	4618      	mov	r0, r3
 80017f2:	493d      	ldr	r1, [pc, #244]	; (80018e8 <checkBrickHit+0x101c>)
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4403      	add	r3, r0
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	440b      	add	r3, r1
 8001802:	3308      	adds	r3, #8
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
                    points++;
 8001808:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <checkBrickHit+0x1024>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <checkBrickHit+0x1024>)
 8001812:	701a      	strb	r2, [r3, #0]

                    dropPowerUp((ball.x + 1)/8, ball.y - 8 + 1);
 8001814:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <checkBrickHit+0x1018>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	da00      	bge.n	8001820 <checkBrickHit+0xf54>
 800181e:	3307      	adds	r3, #7
 8001820:	10db      	asrs	r3, r3, #3
 8001822:	461a      	mov	r2, r3
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <checkBrickHit+0x1018>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	3b07      	subs	r3, #7
 800182a:	4619      	mov	r1, r3
 800182c:	4610      	mov	r0, r2
 800182e:	f000 fb0f 	bl	8001e50 <dropPowerUp>
                    checkEmptyRow(ball.y + 1 - 8);
 8001832:	4b2c      	ldr	r3, [pc, #176]	; (80018e4 <checkBrickHit+0x1018>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3b07      	subs	r3, #7
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fd97 	bl	8002370 <checkEmptyRow>
                }
                Displ_FillArea(bricks[ball.y - 8 + 1][(ball.x + 1)/8].x*4, bricks[ball.y - 8 + 1][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness]);
 8001842:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <checkBrickHit+0x1018>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	1fda      	subs	r2, r3, #7
 8001848:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <checkBrickHit+0x1018>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	da00      	bge.n	8001854 <checkBrickHit+0xf88>
 8001852:	3307      	adds	r3, #7
 8001854:	10db      	asrs	r3, r3, #3
 8001856:	4618      	mov	r0, r3
 8001858:	4923      	ldr	r1, [pc, #140]	; (80018e8 <checkBrickHit+0x101c>)
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4403      	add	r3, r0
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	440b      	add	r3, r1
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	b298      	uxth	r0, r3
 8001870:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <checkBrickHit+0x1018>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	1fda      	subs	r2, r3, #7
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <checkBrickHit+0x1018>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	da00      	bge.n	8001882 <checkBrickHit+0xfb6>
 8001880:	3307      	adds	r3, #7
 8001882:	10db      	asrs	r3, r3, #3
 8001884:	461c      	mov	r4, r3
 8001886:	4918      	ldr	r1, [pc, #96]	; (80018e8 <checkBrickHit+0x101c>)
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4423      	add	r3, r4
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	440b      	add	r3, r1
 8001896:	3304      	adds	r3, #4
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	b299      	uxth	r1, r3
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <checkBrickHit+0x1018>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	1fda      	subs	r2, r3, #7
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <checkBrickHit+0x1018>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da00      	bge.n	80018b2 <checkBrickHit+0xfe6>
 80018b0:	3307      	adds	r3, #7
 80018b2:	10db      	asrs	r3, r3, #3
 80018b4:	461d      	mov	r5, r3
 80018b6:	4c0c      	ldr	r4, [pc, #48]	; (80018e8 <checkBrickHit+0x101c>)
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	442b      	add	r3, r5
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	4423      	add	r3, r4
 80018c6:	330c      	adds	r3, #12
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <checkBrickHit+0x1020>)
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2304      	movs	r3, #4
 80018d6:	2220      	movs	r2, #32
 80018d8:	f003 fbca 	bl	8005070 <Displ_FillArea>
                ball.dir = NW;
 80018dc:	4b01      	ldr	r3, [pc, #4]	; (80018e4 <checkBrickHit+0x1018>)
 80018de:	2207      	movs	r2, #7
 80018e0:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 80018e2:	e2a6      	b.n	8001e32 <checkBrickHit+0x1566>
 80018e4:	20000034 	.word	0x20000034
 80018e8:	200000e8 	.word	0x200000e8
 80018ec:	20000004 	.word	0x20000004
 80018f0:	20001ee8 	.word	0x20001ee8
    case SW:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 80018f4:	4bb5      	ldr	r3, [pc, #724]	; (8001bcc <checkBrickHit+0x1300>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	1fda      	subs	r2, r3, #7
 80018fa:	4bb4      	ldr	r3, [pc, #720]	; (8001bcc <checkBrickHit+0x1300>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	da00      	bge.n	8001904 <checkBrickHit+0x1038>
 8001902:	3307      	adds	r3, #7
 8001904:	10db      	asrs	r3, r3, #3
 8001906:	4618      	mov	r0, r3
 8001908:	49b1      	ldr	r1, [pc, #708]	; (8001bd0 <checkBrickHit+0x1304>)
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4403      	add	r3, r0
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	440b      	add	r3, r1
 8001918:	3308      	adds	r3, #8
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	f040 80b6 	bne.w	8001a8e <checkBrickHit+0x11c2>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 8001922:	4baa      	ldr	r3, [pc, #680]	; (8001bcc <checkBrickHit+0x1300>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	1fda      	subs	r2, r3, #7
 8001928:	4ba8      	ldr	r3, [pc, #672]	; (8001bcc <checkBrickHit+0x1300>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	da00      	bge.n	8001932 <checkBrickHit+0x1066>
 8001930:	3307      	adds	r3, #7
 8001932:	10db      	asrs	r3, r3, #3
 8001934:	4619      	mov	r1, r3
 8001936:	48a6      	ldr	r0, [pc, #664]	; (8001bd0 <checkBrickHit+0x1304>)
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	440b      	add	r3, r1
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	4403      	add	r3, r0
 8001946:	330c      	adds	r3, #12
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	1e58      	subs	r0, r3, #1
 800194c:	4ca0      	ldr	r4, [pc, #640]	; (8001bd0 <checkBrickHit+0x1304>)
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4423      	add	r3, r4
 800195c:	330c      	adds	r3, #12
 800195e:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 8001960:	4b9a      	ldr	r3, [pc, #616]	; (8001bcc <checkBrickHit+0x1300>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	1fda      	subs	r2, r3, #7
 8001966:	4b99      	ldr	r3, [pc, #612]	; (8001bcc <checkBrickHit+0x1300>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	da00      	bge.n	8001970 <checkBrickHit+0x10a4>
 800196e:	3307      	adds	r3, #7
 8001970:	10db      	asrs	r3, r3, #3
 8001972:	4618      	mov	r0, r3
 8001974:	4996      	ldr	r1, [pc, #600]	; (8001bd0 <checkBrickHit+0x1304>)
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4403      	add	r3, r0
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	440b      	add	r3, r1
 8001984:	330c      	adds	r3, #12
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	dc30      	bgt.n	80019ee <checkBrickHit+0x1122>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 800198c:	4b8f      	ldr	r3, [pc, #572]	; (8001bcc <checkBrickHit+0x1300>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	1fda      	subs	r2, r3, #7
 8001992:	4b8e      	ldr	r3, [pc, #568]	; (8001bcc <checkBrickHit+0x1300>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	da00      	bge.n	800199c <checkBrickHit+0x10d0>
 800199a:	3307      	adds	r3, #7
 800199c:	10db      	asrs	r3, r3, #3
 800199e:	4618      	mov	r0, r3
 80019a0:	498b      	ldr	r1, [pc, #556]	; (8001bd0 <checkBrickHit+0x1304>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4403      	add	r3, r0
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	440b      	add	r3, r1
 80019b0:	3308      	adds	r3, #8
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
                points++;
 80019b6:	4b87      	ldr	r3, [pc, #540]	; (8001bd4 <checkBrickHit+0x1308>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b85      	ldr	r3, [pc, #532]	; (8001bd4 <checkBrickHit+0x1308>)
 80019c0:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 80019c2:	4b82      	ldr	r3, [pc, #520]	; (8001bcc <checkBrickHit+0x1300>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da00      	bge.n	80019cc <checkBrickHit+0x1100>
 80019ca:	3307      	adds	r3, #7
 80019cc:	10db      	asrs	r3, r3, #3
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b7e      	ldr	r3, [pc, #504]	; (8001bcc <checkBrickHit+0x1300>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	3b07      	subs	r3, #7
 80019d6:	4619      	mov	r1, r3
 80019d8:	4610      	mov	r0, r2
 80019da:	f000 fa39 	bl	8001e50 <dropPowerUp>
                checkEmptyRow(ball.y + 1 - 8);
 80019de:	4b7b      	ldr	r3, [pc, #492]	; (8001bcc <checkBrickHit+0x1300>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	3b07      	subs	r3, #7
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fcc1 	bl	8002370 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 80019ee:	4b77      	ldr	r3, [pc, #476]	; (8001bcc <checkBrickHit+0x1300>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	1fda      	subs	r2, r3, #7
 80019f4:	4b75      	ldr	r3, [pc, #468]	; (8001bcc <checkBrickHit+0x1300>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	da00      	bge.n	80019fe <checkBrickHit+0x1132>
 80019fc:	3307      	adds	r3, #7
 80019fe:	10db      	asrs	r3, r3, #3
 8001a00:	4618      	mov	r0, r3
 8001a02:	4973      	ldr	r1, [pc, #460]	; (8001bd0 <checkBrickHit+0x1304>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4403      	add	r3, r0
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	440b      	add	r3, r1
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	b298      	uxth	r0, r3
 8001a1a:	4b6c      	ldr	r3, [pc, #432]	; (8001bcc <checkBrickHit+0x1300>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	1fda      	subs	r2, r3, #7
 8001a20:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <checkBrickHit+0x1300>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	da00      	bge.n	8001a2a <checkBrickHit+0x115e>
 8001a28:	3307      	adds	r3, #7
 8001a2a:	10db      	asrs	r3, r3, #3
 8001a2c:	461c      	mov	r4, r3
 8001a2e:	4968      	ldr	r1, [pc, #416]	; (8001bd0 <checkBrickHit+0x1304>)
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4423      	add	r3, r4
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3304      	adds	r3, #4
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	b299      	uxth	r1, r3
 8001a48:	4b60      	ldr	r3, [pc, #384]	; (8001bcc <checkBrickHit+0x1300>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	1fda      	subs	r2, r3, #7
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	; (8001bcc <checkBrickHit+0x1300>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	da00      	bge.n	8001a58 <checkBrickHit+0x118c>
 8001a56:	3307      	adds	r3, #7
 8001a58:	10db      	asrs	r3, r3, #3
 8001a5a:	461d      	mov	r5, r3
 8001a5c:	4c5c      	ldr	r4, [pc, #368]	; (8001bd0 <checkBrickHit+0x1304>)
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	442b      	add	r3, r5
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	4423      	add	r3, r4
 8001a6c:	330c      	adds	r3, #12
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a59      	ldr	r2, [pc, #356]	; (8001bd8 <checkBrickHit+0x130c>)
 8001a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	f003 faf7 	bl	8005070 <Displ_FillArea>
            bricksHit++;
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	3301      	adds	r3, #1
 8001a86:	71fb      	strb	r3, [r7, #7]
            ball.dir = NW;
 8001a88:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <checkBrickHit+0x1300>)
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 8001a8e:	4b4f      	ldr	r3, [pc, #316]	; (8001bcc <checkBrickHit+0x1300>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f1a3 0208 	sub.w	r2, r3, #8
 8001a96:	4b4d      	ldr	r3, [pc, #308]	; (8001bcc <checkBrickHit+0x1300>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	da00      	bge.n	8001aa2 <checkBrickHit+0x11d6>
 8001aa0:	3307      	adds	r3, #7
 8001aa2:	10db      	asrs	r3, r3, #3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	494a      	ldr	r1, [pc, #296]	; (8001bd0 <checkBrickHit+0x1304>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4403      	add	r3, r0
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3308      	adds	r3, #8
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	f040 80d7 	bne.w	8001c6e <checkBrickHit+0x13a2>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8001ac0:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <checkBrickHit+0x1300>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f1a3 0208 	sub.w	r2, r3, #8
 8001ac8:	4b40      	ldr	r3, [pc, #256]	; (8001bcc <checkBrickHit+0x1300>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da00      	bge.n	8001ad4 <checkBrickHit+0x1208>
 8001ad2:	3307      	adds	r3, #7
 8001ad4:	10db      	asrs	r3, r3, #3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	483d      	ldr	r0, [pc, #244]	; (8001bd0 <checkBrickHit+0x1304>)
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	440b      	add	r3, r1
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	4403      	add	r3, r0
 8001ae8:	330c      	adds	r3, #12
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	1e58      	subs	r0, r3, #1
 8001aee:	4c38      	ldr	r4, [pc, #224]	; (8001bd0 <checkBrickHit+0x1304>)
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	440b      	add	r3, r1
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	4423      	add	r3, r4
 8001afe:	330c      	adds	r3, #12
 8001b00:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8001b02:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <checkBrickHit+0x1300>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f1a3 0208 	sub.w	r2, r3, #8
 8001b0a:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <checkBrickHit+0x1300>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	da00      	bge.n	8001b16 <checkBrickHit+0x124a>
 8001b14:	3307      	adds	r3, #7
 8001b16:	10db      	asrs	r3, r3, #3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	492d      	ldr	r1, [pc, #180]	; (8001bd0 <checkBrickHit+0x1304>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4403      	add	r3, r0
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	440b      	add	r3, r1
 8001b2a:	330c      	adds	r3, #12
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	dc33      	bgt.n	8001b9a <checkBrickHit+0x12ce>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <checkBrickHit+0x1300>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f1a3 0208 	sub.w	r2, r3, #8
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <checkBrickHit+0x1300>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	da00      	bge.n	8001b46 <checkBrickHit+0x127a>
 8001b44:	3307      	adds	r3, #7
 8001b46:	10db      	asrs	r3, r3, #3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	4921      	ldr	r1, [pc, #132]	; (8001bd0 <checkBrickHit+0x1304>)
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4403      	add	r3, r0
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	440b      	add	r3, r1
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
                points++;
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <checkBrickHit+0x1308>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <checkBrickHit+0x1308>)
 8001b6a:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <checkBrickHit+0x1300>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	da00      	bge.n	8001b78 <checkBrickHit+0x12ac>
 8001b76:	3307      	adds	r3, #7
 8001b78:	10db      	asrs	r3, r3, #3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <checkBrickHit+0x1300>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	3b08      	subs	r3, #8
 8001b82:	4619      	mov	r1, r3
 8001b84:	4610      	mov	r0, r2
 8001b86:	f000 f963 	bl	8001e50 <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <checkBrickHit+0x1300>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	3b08      	subs	r3, #8
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 fbeb 	bl	8002370 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <checkBrickHit+0x1300>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f1a3 0208 	sub.w	r2, r3, #8
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <checkBrickHit+0x1300>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	da00      	bge.n	8001bae <checkBrickHit+0x12e2>
 8001bac:	3307      	adds	r3, #7
 8001bae:	10db      	asrs	r3, r3, #3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	4907      	ldr	r1, [pc, #28]	; (8001bd0 <checkBrickHit+0x1304>)
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4403      	add	r3, r0
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	440b      	add	r3, r1
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	b298      	uxth	r0, r3
 8001bca:	e007      	b.n	8001bdc <checkBrickHit+0x1310>
 8001bcc:	20000034 	.word	0x20000034
 8001bd0:	200000e8 	.word	0x200000e8
 8001bd4:	20001ee8 	.word	0x20001ee8
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	4b98      	ldr	r3, [pc, #608]	; (8001e40 <checkBrickHit+0x1574>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f1a3 0208 	sub.w	r2, r3, #8
 8001be4:	4b96      	ldr	r3, [pc, #600]	; (8001e40 <checkBrickHit+0x1574>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da00      	bge.n	8001bf0 <checkBrickHit+0x1324>
 8001bee:	3307      	adds	r3, #7
 8001bf0:	10db      	asrs	r3, r3, #3
 8001bf2:	461c      	mov	r4, r3
 8001bf4:	4993      	ldr	r1, [pc, #588]	; (8001e44 <checkBrickHit+0x1578>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4423      	add	r3, r4
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	440b      	add	r3, r1
 8001c04:	3304      	adds	r3, #4
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	b299      	uxth	r1, r3
 8001c0e:	4b8c      	ldr	r3, [pc, #560]	; (8001e40 <checkBrickHit+0x1574>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f1a3 0208 	sub.w	r2, r3, #8
 8001c16:	4b8a      	ldr	r3, [pc, #552]	; (8001e40 <checkBrickHit+0x1574>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	da00      	bge.n	8001c22 <checkBrickHit+0x1356>
 8001c20:	3307      	adds	r3, #7
 8001c22:	10db      	asrs	r3, r3, #3
 8001c24:	461d      	mov	r5, r3
 8001c26:	4c87      	ldr	r4, [pc, #540]	; (8001e44 <checkBrickHit+0x1578>)
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	442b      	add	r3, r5
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	4423      	add	r3, r4
 8001c36:	330c      	adds	r3, #12
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a83      	ldr	r2, [pc, #524]	; (8001e48 <checkBrickHit+0x157c>)
 8001c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2304      	movs	r3, #4
 8001c46:	2220      	movs	r2, #32
 8001c48:	f003 fa12 	bl	8005070 <Displ_FillArea>
            bricksHit++;
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SW) {
 8001c52:	4b7b      	ldr	r3, [pc, #492]	; (8001e40 <checkBrickHit+0x1574>)
 8001c54:	7a1b      	ldrb	r3, [r3, #8]
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d102      	bne.n	8001c60 <checkBrickHit+0x1394>
                ball.dir = SE;
 8001c5a:	4b79      	ldr	r3, [pc, #484]	; (8001e40 <checkBrickHit+0x1574>)
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NW) {
 8001c60:	4b77      	ldr	r3, [pc, #476]	; (8001e40 <checkBrickHit+0x1574>)
 8001c62:	7a1b      	ldrb	r3, [r3, #8]
 8001c64:	2b07      	cmp	r3, #7
 8001c66:	d102      	bne.n	8001c6e <checkBrickHit+0x13a2>
                ball.dir = NE;
 8001c68:	4b75      	ldr	r3, [pc, #468]	; (8001e40 <checkBrickHit+0x1574>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f040 80e0 	bne.w	8001e36 <checkBrickHit+0x156a>
            if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible == 1) {
 8001c76:	4b72      	ldr	r3, [pc, #456]	; (8001e40 <checkBrickHit+0x1574>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	1fda      	subs	r2, r3, #7
 8001c7c:	4b70      	ldr	r3, [pc, #448]	; (8001e40 <checkBrickHit+0x1574>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	da00      	bge.n	8001c88 <checkBrickHit+0x13bc>
 8001c86:	3307      	adds	r3, #7
 8001c88:	10db      	asrs	r3, r3, #3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	496d      	ldr	r1, [pc, #436]	; (8001e44 <checkBrickHit+0x1578>)
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4403      	add	r3, r0
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3308      	adds	r3, #8
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	f040 80c8 	bne.w	8001e36 <checkBrickHit+0x156a>
                bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness--;
 8001ca6:	4b66      	ldr	r3, [pc, #408]	; (8001e40 <checkBrickHit+0x1574>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	1fda      	subs	r2, r3, #7
 8001cac:	4b64      	ldr	r3, [pc, #400]	; (8001e40 <checkBrickHit+0x1574>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da00      	bge.n	8001cb8 <checkBrickHit+0x13ec>
 8001cb6:	3307      	adds	r3, #7
 8001cb8:	10db      	asrs	r3, r3, #3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4861      	ldr	r0, [pc, #388]	; (8001e44 <checkBrickHit+0x1578>)
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	440b      	add	r3, r1
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	4403      	add	r3, r0
 8001ccc:	330c      	adds	r3, #12
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	1e58      	subs	r0, r3, #1
 8001cd2:	4c5c      	ldr	r4, [pc, #368]	; (8001e44 <checkBrickHit+0x1578>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	440b      	add	r3, r1
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	4423      	add	r3, r4
 8001ce2:	330c      	adds	r3, #12
 8001ce4:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8001ce6:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <checkBrickHit+0x1574>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	1fda      	subs	r2, r3, #7
 8001cec:	4b54      	ldr	r3, [pc, #336]	; (8001e40 <checkBrickHit+0x1574>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	da00      	bge.n	8001cf8 <checkBrickHit+0x142c>
 8001cf6:	3307      	adds	r3, #7
 8001cf8:	10db      	asrs	r3, r3, #3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	4951      	ldr	r1, [pc, #324]	; (8001e44 <checkBrickHit+0x1578>)
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4403      	add	r3, r0
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	440b      	add	r3, r1
 8001d0c:	330c      	adds	r3, #12
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	dc32      	bgt.n	8001d7a <checkBrickHit+0x14ae>
                    bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible = 0;
 8001d14:	4b4a      	ldr	r3, [pc, #296]	; (8001e40 <checkBrickHit+0x1574>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	1fda      	subs	r2, r3, #7
 8001d1a:	4b49      	ldr	r3, [pc, #292]	; (8001e40 <checkBrickHit+0x1574>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da00      	bge.n	8001d26 <checkBrickHit+0x145a>
 8001d24:	3307      	adds	r3, #7
 8001d26:	10db      	asrs	r3, r3, #3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	4946      	ldr	r1, [pc, #280]	; (8001e44 <checkBrickHit+0x1578>)
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4403      	add	r3, r0
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	440b      	add	r3, r1
 8001d3a:	3308      	adds	r3, #8
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
                    points++;
 8001d40:	4b42      	ldr	r3, [pc, #264]	; (8001e4c <checkBrickHit+0x1580>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	3301      	adds	r3, #1
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b40      	ldr	r3, [pc, #256]	; (8001e4c <checkBrickHit+0x1580>)
 8001d4a:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x - 1)/8, ball.y + 1 - 8);
 8001d4c:	4b3c      	ldr	r3, [pc, #240]	; (8001e40 <checkBrickHit+0x1574>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	da00      	bge.n	8001d58 <checkBrickHit+0x148c>
 8001d56:	3307      	adds	r3, #7
 8001d58:	10db      	asrs	r3, r3, #3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <checkBrickHit+0x1574>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	3b07      	subs	r3, #7
 8001d62:	4619      	mov	r1, r3
 8001d64:	4610      	mov	r0, r2
 8001d66:	f000 f873 	bl	8001e50 <dropPowerUp>
                    checkEmptyRow(ball.y + 1 - 8);
 8001d6a:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <checkBrickHit+0x1574>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	3b07      	subs	r3, #7
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fafb 	bl	8002370 <checkEmptyRow>
                }
                ball.dir = NE;
 8001d7a:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <checkBrickHit+0x1574>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	721a      	strb	r2, [r3, #8]
                Displ_FillArea(bricks[ball.y + 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y + 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness]);
 8001d80:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <checkBrickHit+0x1574>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	1fda      	subs	r2, r3, #7
 8001d86:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <checkBrickHit+0x1574>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	da00      	bge.n	8001d92 <checkBrickHit+0x14c6>
 8001d90:	3307      	adds	r3, #7
 8001d92:	10db      	asrs	r3, r3, #3
 8001d94:	4618      	mov	r0, r3
 8001d96:	492b      	ldr	r1, [pc, #172]	; (8001e44 <checkBrickHit+0x1578>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4403      	add	r3, r0
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	440b      	add	r3, r1
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	b298      	uxth	r0, r3
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <checkBrickHit+0x1574>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	1fda      	subs	r2, r3, #7
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <checkBrickHit+0x1574>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	da00      	bge.n	8001dc0 <checkBrickHit+0x14f4>
 8001dbe:	3307      	adds	r3, #7
 8001dc0:	10db      	asrs	r3, r3, #3
 8001dc2:	461c      	mov	r4, r3
 8001dc4:	491f      	ldr	r1, [pc, #124]	; (8001e44 <checkBrickHit+0x1578>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4423      	add	r3, r4
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	b299      	uxth	r1, r3
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <checkBrickHit+0x1574>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	1fda      	subs	r2, r3, #7
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <checkBrickHit+0x1574>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	da00      	bge.n	8001df0 <checkBrickHit+0x1524>
 8001dee:	3307      	adds	r3, #7
 8001df0:	10db      	asrs	r3, r3, #3
 8001df2:	461d      	mov	r5, r3
 8001df4:	4c13      	ldr	r4, [pc, #76]	; (8001e44 <checkBrickHit+0x1578>)
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	442b      	add	r3, r5
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	4423      	add	r3, r4
 8001e04:	330c      	adds	r3, #12
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <checkBrickHit+0x157c>)
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2304      	movs	r3, #4
 8001e14:	2220      	movs	r2, #32
 8001e16:	f003 f92b 	bl	8005070 <Displ_FillArea>
            }
        }
        break;
 8001e1a:	e00c      	b.n	8001e36 <checkBrickHit+0x156a>
    case still:
        break;
    default:
        ball.dir = ball.dir;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <checkBrickHit+0x1574>)
 8001e1e:	7a1a      	ldrb	r2, [r3, #8]
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <checkBrickHit+0x1574>)
 8001e22:	721a      	strb	r2, [r3, #8]
    }
}
 8001e24:	e008      	b.n	8001e38 <checkBrickHit+0x156c>
        break;
 8001e26:	bf00      	nop
 8001e28:	e006      	b.n	8001e38 <checkBrickHit+0x156c>
        break;
 8001e2a:	bf00      	nop
 8001e2c:	e004      	b.n	8001e38 <checkBrickHit+0x156c>
        break;
 8001e2e:	bf00      	nop
 8001e30:	e002      	b.n	8001e38 <checkBrickHit+0x156c>
        break;
 8001e32:	bf00      	nop
 8001e34:	e000      	b.n	8001e38 <checkBrickHit+0x156c>
        break;
 8001e36:	bf00      	nop
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e40:	20000034 	.word	0x20000034
 8001e44:	200000e8 	.word	0x200000e8
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	20001ee8 	.word	0x20001ee8

08001e50 <dropPowerUp>:

void dropPowerUp(int x, int y) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
    uint8_t dropChance = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
    if (guardian == 0) {
 8001e5e:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <dropPowerUp+0x70>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d114      	bne.n	8001e90 <dropPowerUp+0x40>
        srand(HAL_GetTick());
 8001e66:	f003 ff23 	bl	8005cb0 <HAL_GetTick>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f008 fd85 	bl	800a97c <srand>
        dropChance = RANDOM(0, 100);
 8001e72:	f008 fdb1 	bl	800a9d8 <rand>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <dropPowerUp+0x74>)
 8001e7a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e7e:	1111      	asrs	r1, r2, #4
 8001e80:	17da      	asrs	r2, r3, #31
 8001e82:	1a8a      	subs	r2, r1, r2
 8001e84:	2165      	movs	r1, #101	; 0x65
 8001e86:	fb01 f202 	mul.w	r2, r1, r2
 8001e8a:	1a9a      	subs	r2, r3, r2
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	73fb      	strb	r3, [r7, #15]
    }

    if (dropChance <= 10 && dropChance > 0) {
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	2b0a      	cmp	r3, #10
 8001e94:	d805      	bhi.n	8001ea2 <dropPowerUp+0x52>
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <dropPowerUp+0x52>
        guardian = 1;
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <dropPowerUp+0x70>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
    }

    if (dropChance <= 15 && dropChance > 10) {
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d806      	bhi.n	8001eb6 <dropPowerUp+0x66>
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	2b0a      	cmp	r3, #10
 8001eac:	d903      	bls.n	8001eb6 <dropPowerUp+0x66>
        explodeBricks(x, y);
 8001eae:	6839      	ldr	r1, [r7, #0]
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f8cd 	bl	8002050 <explodeBricks>
    }
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20001eea 	.word	0x20001eea
 8001ec4:	288df0cb 	.word	0x288df0cb

08001ec8 <printScreen>:

void printScreen() {
 8001ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eca:	b08b      	sub	sp, #44	; 0x2c
 8001ecc:	af06      	add	r7, sp, #24
    Displ_FillArea(SCREEN_WIDTH*4 - 8 - (3*8), 4, 30, 4, D_GREEN);
 8001ece:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	221e      	movs	r2, #30
 8001ed8:	2104      	movs	r1, #4
 8001eda:	f44f 7090 	mov.w	r0, #288	; 0x120
 8001ede:	f003 f8c7 	bl	8005070 <Displ_FillArea>

    for (int i = 0; i < lives1; i++) {
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	e00f      	b.n	8001f08 <printScreen+0x40>
        Displ_FillArea(SCREEN_WIDTH*4 - 8 - (i*8), 4, 4, 4, D_BLUE);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	b298      	uxth	r0, r3
 8001ef4:	2318      	movs	r3, #24
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2304      	movs	r3, #4
 8001efa:	2204      	movs	r2, #4
 8001efc:	2104      	movs	r1, #4
 8001efe:	f003 f8b7 	bl	8005070 <Displ_FillArea>
    for (int i = 0; i < lives1; i++) {
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3301      	adds	r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <printScreen+0x108>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4293      	cmp	r3, r2
 8001f12:	dbe9      	blt.n	8001ee8 <printScreen+0x20>
    }

    if (guardian == 1) {
 8001f14:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <printScreen+0x10c>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d10e      	bne.n	8001f3a <printScreen+0x72>
        Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, GREY);
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <printScreen+0x110>)
 8001f1e:	785b      	ldrb	r3, [r3, #1]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	b299      	uxth	r1, r3
 8001f28:	f249 6396 	movw	r3, #38550	; 0x9696
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2304      	movs	r3, #4
 8001f30:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f34:	2000      	movs	r0, #0
 8001f36:	f003 f89b 	bl	8005070 <Displ_FillArea>
    }

    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, RED);
 8001f3a:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <printScreen+0x110>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	3b19      	subs	r3, #25
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	b298      	uxth	r0, r3
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <printScreen+0x110>)
 8001f48:	785b      	ldrb	r3, [r3, #1]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	b299      	uxth	r1, r3
 8001f50:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2304      	movs	r3, #4
 8001f58:	22c8      	movs	r2, #200	; 0xc8
 8001f5a:	f003 f889 	bl	8005070 <Displ_FillArea>

    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_BLUE);
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <printScreen+0x114>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	b298      	uxth	r0, r3
 8001f68:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <printScreen+0x114>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	b299      	uxth	r1, r3
 8001f72:	2318      	movs	r3, #24
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2304      	movs	r3, #4
 8001f78:	2204      	movs	r2, #4
 8001f7a:	f003 f879 	bl	8005070 <Displ_FillArea>

    char str[12];
    snprintf(str, 12, "%u", points);
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <printScreen+0x118>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	4638      	mov	r0, r7
 8001f84:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <printScreen+0x11c>)
 8001f86:	210c      	movs	r1, #12
 8001f88:	f008 fd64 	bl	800aa54 <sniprintf>
    Displ_WString(score.x*4, score.y, str, Font16, 1, WHITE, D_GREEN);
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <printScreen+0x120>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	b29c      	uxth	r4, r3
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <printScreen+0x120>)
 8001f98:	785b      	ldrb	r3, [r3, #1]
 8001f9a:	b29d      	uxth	r5, r3
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <printScreen+0x124>)
 8001f9e:	463e      	mov	r6, r7
 8001fa0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001fa4:	9204      	str	r2, [sp, #16]
 8001fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001faa:	9203      	str	r2, [sp, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	9202      	str	r2, [sp, #8]
 8001fb0:	46ec      	mov	ip, sp
 8001fb2:	1d1a      	adds	r2, r3, #4
 8001fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fb8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4632      	mov	r2, r6
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f003 fdb0 	bl	8005b28 <Displ_WString>
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd0:	20000002 	.word	0x20000002
 8001fd4:	20001eea 	.word	0x20001eea
 8001fd8:	20000030 	.word	0x20000030
 8001fdc:	20000034 	.word	0x20000034
 8001fe0:	20001ee8 	.word	0x20001ee8
 8001fe4:	0800bfb8 	.word	0x0800bfb8
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000014 	.word	0x20000014

08001ff0 <checkGuardianTimer>:

void checkGuardianTimer() {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af02      	add	r7, sp, #8
    if (guardian == 1) {
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <checkGuardianTimer+0x54>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d11f      	bne.n	800203e <checkGuardianTimer+0x4e>
        if (guardianTimer <= 0) {
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <checkGuardianTimer+0x58>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d115      	bne.n	8002032 <checkGuardianTimer+0x42>
            guardian = 0;
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <checkGuardianTimer+0x54>)
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
            guardianTimer = 100;
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <checkGuardianTimer+0x58>)
 800200e:	2264      	movs	r2, #100	; 0x64
 8002010:	701a      	strb	r2, [r3, #0]
            Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, D_GREEN);
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <checkGuardianTimer+0x5c>)
 8002014:	785b      	ldrb	r3, [r3, #1]
 8002016:	3b01      	subs	r3, #1
 8002018:	b29b      	uxth	r3, r3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	b299      	uxth	r1, r3
 800201e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	2304      	movs	r3, #4
 8002026:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800202a:	2000      	movs	r0, #0
 800202c:	f003 f820 	bl	8005070 <Displ_FillArea>
        } else {
            guardianTimer--;
        }
    }
}
 8002030:	e005      	b.n	800203e <checkGuardianTimer+0x4e>
            guardianTimer--;
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <checkGuardianTimer+0x58>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	3b01      	subs	r3, #1
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b03      	ldr	r3, [pc, #12]	; (8002048 <checkGuardianTimer+0x58>)
 800203c:	701a      	strb	r2, [r3, #0]
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20001eea 	.word	0x20001eea
 8002048:	20000003 	.word	0x20000003
 800204c:	20000030 	.word	0x20000030

08002050 <explodeBricks>:

void explodeBricks(int x, int y) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af02      	add	r7, sp, #8
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    int ymin = y - 1;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	3b01      	subs	r3, #1
 800205e:	61fb      	str	r3, [r7, #28]
    int xmin = x - 1;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	61bb      	str	r3, [r7, #24]
    int ymax = y + 1;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
    int xmax = x + 1;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3301      	adds	r3, #1
 8002070:	613b      	str	r3, [r7, #16]
    if(y == 0) {
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <explodeBricks+0x2c>
        ymin = y;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	61fb      	str	r3, [r7, #28]
    }
    if(y == MAX_BRICK_LINES) {
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2b30      	cmp	r3, #48	; 0x30
 8002080:	d101      	bne.n	8002086 <explodeBricks+0x36>
        ymax = y;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	617b      	str	r3, [r7, #20]
    }
    if(x == 0) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <explodeBricks+0x40>
        xmin = x;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	61bb      	str	r3, [r7, #24]
    }
    if(x == 10) {
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b0a      	cmp	r3, #10
 8002094:	d101      	bne.n	800209a <explodeBricks+0x4a>
        xmax = x;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	613b      	str	r3, [r7, #16]
    }


    for(int i = ymin; i <= ymax; i++) {
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e063      	b.n	8002168 <explodeBricks+0x118>
        for(int j = xmin; j <= xmax; j++) {
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	e059      	b.n	800215a <explodeBricks+0x10a>
            if(bricks[i][j].visible == 1) {
 80020a6:	4935      	ldr	r1, [pc, #212]	; (800217c <explodeBricks+0x12c>)
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	4413      	add	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	440b      	add	r3, r1
 80020ba:	3308      	adds	r3, #8
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d148      	bne.n	8002154 <explodeBricks+0x104>
                bricks[i][j].toughness = 0;
 80020c2:	492e      	ldr	r1, [pc, #184]	; (800217c <explodeBricks+0x12c>)
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	4413      	add	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	440b      	add	r3, r1
 80020d6:	330c      	adds	r3, #12
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
                bricks[i][j].visible = 0;
 80020dc:	4927      	ldr	r1, [pc, #156]	; (800217c <explodeBricks+0x12c>)
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	4413      	add	r3, r2
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	440b      	add	r3, r1
 80020f0:	3308      	adds	r3, #8
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
                points++;
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <explodeBricks+0x130>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <explodeBricks+0x130>)
 8002100:	701a      	strb	r2, [r3, #0]

                Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, D_GREEN);
 8002102:	491e      	ldr	r1, [pc, #120]	; (800217c <explodeBricks+0x12c>)
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	4413      	add	r3, r2
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	440b      	add	r3, r1
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	b298      	uxth	r0, r3
 800211e:	4917      	ldr	r1, [pc, #92]	; (800217c <explodeBricks+0x12c>)
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	4413      	add	r3, r2
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	440b      	add	r3, r1
 8002132:	3304      	adds	r3, #4
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	b299      	uxth	r1, r3
 800213c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2304      	movs	r3, #4
 8002144:	2220      	movs	r2, #32
 8002146:	f002 ff93 	bl	8005070 <Displ_FillArea>
                checkEmptyRow(i);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	4618      	mov	r0, r3
 8002150:	f000 f90e 	bl	8002370 <checkEmptyRow>
        for(int j = xmin; j <= xmax; j++) {
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	3301      	adds	r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	429a      	cmp	r2, r3
 8002160:	dda1      	ble.n	80020a6 <explodeBricks+0x56>
    for(int i = ymin; i <= ymax; i++) {
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3301      	adds	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	429a      	cmp	r2, r3
 800216e:	dd97      	ble.n	80020a0 <explodeBricks+0x50>
            }
        }
    }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200000e8 	.word	0x200000e8
 8002180:	20001ee8 	.word	0x20001ee8

08002184 <setBrickToughness>:

int setBrickToughness(void) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
    int toughnessPercent;
    int toughness = 1;
 800218a:	2301      	movs	r3, #1
 800218c:	607b      	str	r3, [r7, #4]

    toughnessPercent = RANDOM(0, 100);
 800218e:	f008 fc23 	bl	800a9d8 <rand>
 8002192:	4603      	mov	r3, r0
 8002194:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <setBrickToughness+0x64>)
 8002196:	fb82 1203 	smull	r1, r2, r2, r3
 800219a:	1111      	asrs	r1, r2, #4
 800219c:	17da      	asrs	r2, r3, #31
 800219e:	1a8a      	subs	r2, r1, r2
 80021a0:	2165      	movs	r1, #101	; 0x65
 80021a2:	fb01 f202 	mul.w	r2, r1, r2
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	603b      	str	r3, [r7, #0]

    if(toughnessPercent > 0 && toughnessPercent <= 60) {
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	dd05      	ble.n	80021bc <setBrickToughness+0x38>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b3c      	cmp	r3, #60	; 0x3c
 80021b4:	dc02      	bgt.n	80021bc <setBrickToughness+0x38>
        toughness = 1;
 80021b6:	2301      	movs	r3, #1
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	e010      	b.n	80021de <setBrickToughness+0x5a>
    } else if(toughnessPercent > 60 && toughnessPercent < 90) {
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b3c      	cmp	r3, #60	; 0x3c
 80021c0:	dd05      	ble.n	80021ce <setBrickToughness+0x4a>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b59      	cmp	r3, #89	; 0x59
 80021c6:	dc02      	bgt.n	80021ce <setBrickToughness+0x4a>
        toughness = 2;
 80021c8:	2302      	movs	r3, #2
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	e007      	b.n	80021de <setBrickToughness+0x5a>
    } else if(toughnessPercent > 90 && toughnessPercent < 100) {
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b5a      	cmp	r3, #90	; 0x5a
 80021d2:	dd04      	ble.n	80021de <setBrickToughness+0x5a>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b63      	cmp	r3, #99	; 0x63
 80021d8:	dc01      	bgt.n	80021de <setBrickToughness+0x5a>
        toughness = 3;
 80021da:	2303      	movs	r3, #3
 80021dc:	607b      	str	r3, [r7, #4]
    }

    return toughness;
 80021de:	687b      	ldr	r3, [r7, #4]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	288df0cb 	.word	0x288df0cb

080021ec <drawBricks>:

void drawBricks() {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af02      	add	r7, sp, #8
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	e0b0      	b.n	800235a <drawBricks+0x16e>
        for(int j = 0; j < 10; j++) {
 80021f8:	2300      	movs	r3, #0
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	e0a6      	b.n	800234c <drawBricks+0x160>
            if(bricks[i][j].visible == 1) {
 80021fe:	495b      	ldr	r1, [pc, #364]	; (800236c <drawBricks+0x180>)
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	4413      	add	r3, r2
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	440b      	add	r3, r1
 8002212:	3308      	adds	r3, #8
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	f040 8095 	bne.w	8002346 <drawBricks+0x15a>
                if (bricks[i][j].toughness == 3) {
 800221c:	4953      	ldr	r1, [pc, #332]	; (800236c <drawBricks+0x180>)
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	4413      	add	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	440b      	add	r3, r1
 8002230:	330c      	adds	r3, #12
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b03      	cmp	r3, #3
 8002236:	d122      	bne.n	800227e <drawBricks+0x92>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, BLACK);
 8002238:	494c      	ldr	r1, [pc, #304]	; (800236c <drawBricks+0x180>)
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	4413      	add	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	440b      	add	r3, r1
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	b298      	uxth	r0, r3
 8002254:	4945      	ldr	r1, [pc, #276]	; (800236c <drawBricks+0x180>)
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	4413      	add	r3, r2
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	440b      	add	r3, r1
 8002268:	3304      	adds	r3, #4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	b299      	uxth	r1, r3
 8002272:	2300      	movs	r3, #0
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2304      	movs	r3, #4
 8002278:	2220      	movs	r2, #32
 800227a:	f002 fef9 	bl	8005070 <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 2) {
 800227e:	493b      	ldr	r1, [pc, #236]	; (800236c <drawBricks+0x180>)
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	440b      	add	r3, r1
 8002292:	330c      	adds	r3, #12
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d123      	bne.n	80022e2 <drawBricks+0xf6>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, DARK_GREY);
 800229a:	4934      	ldr	r1, [pc, #208]	; (800236c <drawBricks+0x180>)
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	440b      	add	r3, r1
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	b298      	uxth	r0, r3
 80022b6:	492d      	ldr	r1, [pc, #180]	; (800236c <drawBricks+0x180>)
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	440b      	add	r3, r1
 80022ca:	3304      	adds	r3, #4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	b299      	uxth	r1, r3
 80022d4:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2304      	movs	r3, #4
 80022dc:	2220      	movs	r2, #32
 80022de:	f002 fec7 	bl	8005070 <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 1) {
 80022e2:	4922      	ldr	r1, [pc, #136]	; (800236c <drawBricks+0x180>)
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	440b      	add	r3, r1
 80022f6:	330c      	adds	r3, #12
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d123      	bne.n	8002346 <drawBricks+0x15a>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, GREY);
 80022fe:	491b      	ldr	r1, [pc, #108]	; (800236c <drawBricks+0x180>)
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	4413      	add	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	440b      	add	r3, r1
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	b298      	uxth	r0, r3
 800231a:	4914      	ldr	r1, [pc, #80]	; (800236c <drawBricks+0x180>)
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	4413      	add	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	440b      	add	r3, r1
 800232e:	3304      	adds	r3, #4
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	b299      	uxth	r1, r3
 8002338:	f249 6396 	movw	r3, #38550	; 0x9696
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2304      	movs	r3, #4
 8002340:	2220      	movs	r2, #32
 8002342:	f002 fe95 	bl	8005070 <Displ_FillArea>
        for(int j = 0; j < 10; j++) {
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b09      	cmp	r3, #9
 8002350:	f77f af55 	ble.w	80021fe <drawBricks+0x12>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3301      	adds	r3, #1
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b2f      	cmp	r3, #47	; 0x2f
 800235e:	f77f af4b 	ble.w	80021f8 <drawBricks+0xc>
                }
            }
        }
    }
}
 8002362:	bf00      	nop
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200000e8 	.word	0x200000e8

08002370 <checkEmptyRow>:

void checkEmptyRow(uint8_t row) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
    uint8_t empty = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]

    for(int i = 0; i < 10; i++) {
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	e012      	b.n	80023aa <checkEmptyRow+0x3a>
        if(bricks[row][i].visible > 0) {
 8002384:	79fa      	ldrb	r2, [r7, #7]
 8002386:	4911      	ldr	r1, [pc, #68]	; (80023cc <checkEmptyRow+0x5c>)
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	4413      	add	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	440b      	add	r3, r1
 8002398:	3308      	adds	r3, #8
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	dd01      	ble.n	80023a4 <checkEmptyRow+0x34>
            empty = 1;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
    for(int i = 0; i < 10; i++) {
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	3301      	adds	r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b09      	cmp	r3, #9
 80023ae:	dde9      	ble.n	8002384 <checkEmptyRow+0x14>
        }
    }
    if(empty == 0) {
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <checkEmptyRow+0x54>
        HAL_UART_Transmit(&huart2, (uint8_t *)"O", strlen("O"), 300);
 80023b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80023ba:	2201      	movs	r2, #1
 80023bc:	4904      	ldr	r1, [pc, #16]	; (80023d0 <checkEmptyRow+0x60>)
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <checkEmptyRow+0x64>)
 80023c0:	f007 faf2 	bl	80099a8 <HAL_UART_Transmit>
    }

}
 80023c4:	bf00      	nop
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	200000e8 	.word	0x200000e8
 80023d0:	0800bfbc 	.word	0x0800bfbc
 80023d4:	20001fec 	.word	0x20001fec

080023d8 <_write>:
#include "debug.h"

// Declare external UART handle
extern UART_HandleTypeDef huart3;

int _write(int file, char *ptr, int len) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3b01      	subs	r3, #1
    HAL_StatusTypeDef xStatus;
    switch (file) {
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d814      	bhi.n	8002416 <_write+0x3e>
    case STDOUT_FILENO: /*stdout*/
    case STDERR_FILENO: /*stderr*/
        xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	480f      	ldr	r0, [pc, #60]	; (8002434 <_write+0x5c>)
 80023f8:	f007 fad6 	bl	80099a8 <HAL_UART_Transmit>
 80023fc:	4603      	mov	r3, r0
 80023fe:	75fb      	strb	r3, [r7, #23]
        if (xStatus != HAL_OK) {
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00f      	beq.n	8002426 <_write+0x4e>
            errno = EIO;
 8002406:	f008 f9f9 	bl	800a7fc <__errno>
 800240a:	4603      	mov	r3, r0
 800240c:	2205      	movs	r2, #5
 800240e:	601a      	str	r2, [r3, #0]
            return -1;
 8002410:	f04f 33ff 	mov.w	r3, #4294967295
 8002414:	e009      	b.n	800242a <_write+0x52>
        }
        break;
    default:
        errno = EBADF;
 8002416:	f008 f9f1 	bl	800a7fc <__errno>
 800241a:	4603      	mov	r3, r0
 800241c:	2209      	movs	r2, #9
 800241e:	601a      	str	r2, [r3, #0]
        return -1;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
 8002424:	e001      	b.n	800242a <_write+0x52>
        break;
 8002426:	bf00      	nop
    }
    return len;
 8002428:	687b      	ldr	r3, [r7, #4]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20002074 	.word	0x20002074

08002438 <init>:
ballPoint ball = {(SCREEN_WIDTH)/2, SCREEN_HEIGHT - 6, still};
uint8_t start = 0;
uint8_t delay = BRICK_SPEED;
directions ballDirection = NE;

void init (void) {
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
    choice = 0;
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <init+0x28>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
    if(gamechoice == 1){
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <init+0x2c>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d102      	bne.n	8002450 <init+0x18>
        initSpaceInvaders();
 800244a:	f001 f9b9 	bl	80037c0 <initSpaceInvaders>
    }else if(gamechoice == 2){
        initBrickbreaker();
    }


}
 800244e:	e005      	b.n	800245c <init+0x24>
    }else if(gamechoice == 2){
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <init+0x2c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d101      	bne.n	800245c <init+0x24>
        initBrickbreaker();
 8002458:	f7fd ff12 	bl	8000280 <initBrickbreaker>
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20001eec 	.word	0x20001eec
 8002464:	20001eed 	.word	0x20001eed

08002468 <loop>:

int loop (int key) {
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b085      	sub	sp, #20
 800246c:	af02      	add	r7, sp, #8
 800246e:	6078      	str	r0, [r7, #4]
    updateScreen();
 8002470:	f000 face 	bl	8002a10 <updateScreen>
    if (play == menu){
 8002474:	4b9d      	ldr	r3, [pc, #628]	; (80026ec <loop+0x284>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d104      	bne.n	8002486 <loop+0x1e>
        max_choice = total_games;
 800247c:	4b9c      	ldr	r3, [pc, #624]	; (80026f0 <loop+0x288>)
 800247e:	781a      	ldrb	r2, [r3, #0]
 8002480:	4b9c      	ldr	r3, [pc, #624]	; (80026f4 <loop+0x28c>)
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	e002      	b.n	800248c <loop+0x24>
    }else{
        max_choice = 1;
 8002486:	4b9b      	ldr	r3, [pc, #620]	; (80026f4 <loop+0x28c>)
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
    }
    if(key == left) {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d159      	bne.n	8002546 <loop+0xde>
        if(play < paused){
 8002492:	4b96      	ldr	r3, [pc, #600]	; (80026ec <loop+0x284>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d849      	bhi.n	800252e <loop+0xc6>
        	if(gamechoice == 1){
 800249a:	4b97      	ldr	r3, [pc, #604]	; (80026f8 <loop+0x290>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d104      	bne.n	80024ac <loop+0x44>
        		moveSpaceship(-1);
 80024a2:	f04f 30ff 	mov.w	r0, #4294967295
 80024a6:	f001 fe19 	bl	80040dc <moveSpaceship>
 80024aa:	e040      	b.n	800252e <loop+0xc6>
        	}else if(gamechoice == 2) {
 80024ac:	4b92      	ldr	r3, [pc, #584]	; (80026f8 <loop+0x290>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d13c      	bne.n	800252e <loop+0xc6>
        	    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 80024b4:	4b91      	ldr	r3, [pc, #580]	; (80026fc <loop+0x294>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	3b19      	subs	r3, #25
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	b298      	uxth	r0, r3
 80024c0:	4b8e      	ldr	r3, [pc, #568]	; (80026fc <loop+0x294>)
 80024c2:	785b      	ldrb	r3, [r3, #1]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	b299      	uxth	r1, r3
 80024ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2304      	movs	r3, #4
 80024d2:	22c8      	movs	r2, #200	; 0xc8
 80024d4:	f002 fdcc 	bl	8005070 <Displ_FillArea>
                person.x--;
 80024d8:	4b88      	ldr	r3, [pc, #544]	; (80026fc <loop+0x294>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	3b01      	subs	r3, #1
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b86      	ldr	r3, [pc, #536]	; (80026fc <loop+0x294>)
 80024e2:	701a      	strb	r2, [r3, #0]
                if(person.x < BAR_SIZE/2) {
 80024e4:	4b85      	ldr	r3, [pc, #532]	; (80026fc <loop+0x294>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b18      	cmp	r3, #24
 80024ea:	d803      	bhi.n	80024f4 <loop+0x8c>
                    person.x = (BAR_SIZE/2);
 80024ec:	4b83      	ldr	r3, [pc, #524]	; (80026fc <loop+0x294>)
 80024ee:	2219      	movs	r2, #25
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e01c      	b.n	800252e <loop+0xc6>
                } else {
                    if (ball.dir == still) {
 80024f4:	4b82      	ldr	r3, [pc, #520]	; (8002700 <loop+0x298>)
 80024f6:	7a1b      	ldrb	r3, [r3, #8]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d118      	bne.n	800252e <loop+0xc6>
                        Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80024fc:	4b80      	ldr	r3, [pc, #512]	; (8002700 <loop+0x298>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	b29b      	uxth	r3, r3
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	b298      	uxth	r0, r3
 8002506:	4b7e      	ldr	r3, [pc, #504]	; (8002700 <loop+0x298>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	b29b      	uxth	r3, r3
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	b299      	uxth	r1, r3
 8002510:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2304      	movs	r3, #4
 8002518:	2204      	movs	r2, #4
 800251a:	f002 fda9 	bl	8005070 <Displ_FillArea>
                        ball.x--;
 800251e:	4b78      	ldr	r3, [pc, #480]	; (8002700 <loop+0x298>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3b01      	subs	r3, #1
 8002524:	4a76      	ldr	r2, [pc, #472]	; (8002700 <loop+0x298>)
 8002526:	6013      	str	r3, [r2, #0]
                        ballDirection = NW;
 8002528:	4b76      	ldr	r3, [pc, #472]	; (8002704 <loop+0x29c>)
 800252a:	2207      	movs	r2, #7
 800252c:	701a      	strb	r2, [r3, #0]
                    }
                }
        	}
        }
        if (choice != 0){
 800252e:	4b76      	ldr	r3, [pc, #472]	; (8002708 <loop+0x2a0>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <loop+0xda>
        	choice--;
 8002536:	4b74      	ldr	r3, [pc, #464]	; (8002708 <loop+0x2a0>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	3b01      	subs	r3, #1
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b72      	ldr	r3, [pc, #456]	; (8002708 <loop+0x2a0>)
 8002540:	701a      	strb	r2, [r3, #0]
        }

        key = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
    }
    if(key == right) {
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d159      	bne.n	8002600 <loop+0x198>
    	if(play < paused){
 800254c:	4b67      	ldr	r3, [pc, #412]	; (80026ec <loop+0x284>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d847      	bhi.n	80025e4 <loop+0x17c>
    		if(gamechoice == 1){
 8002554:	4b68      	ldr	r3, [pc, #416]	; (80026f8 <loop+0x290>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d103      	bne.n	8002564 <loop+0xfc>
    			moveSpaceship(1);
 800255c:	2001      	movs	r0, #1
 800255e:	f001 fdbd 	bl	80040dc <moveSpaceship>
 8002562:	e03f      	b.n	80025e4 <loop+0x17c>
    		}else if (gamechoice == 2) {
 8002564:	4b64      	ldr	r3, [pc, #400]	; (80026f8 <loop+0x290>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d13b      	bne.n	80025e4 <loop+0x17c>
    			Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 800256c:	4b63      	ldr	r3, [pc, #396]	; (80026fc <loop+0x294>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	3b19      	subs	r3, #25
 8002572:	b29b      	uxth	r3, r3
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	b298      	uxth	r0, r3
 8002578:	4b60      	ldr	r3, [pc, #384]	; (80026fc <loop+0x294>)
 800257a:	785b      	ldrb	r3, [r3, #1]
 800257c:	b29b      	uxth	r3, r3
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	b299      	uxth	r1, r3
 8002582:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2304      	movs	r3, #4
 800258a:	22c8      	movs	r2, #200	; 0xc8
 800258c:	f002 fd70 	bl	8005070 <Displ_FillArea>
    			person.x++;
 8002590:	4b5a      	ldr	r3, [pc, #360]	; (80026fc <loop+0x294>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	b2da      	uxtb	r2, r3
 8002598:	4b58      	ldr	r3, [pc, #352]	; (80026fc <loop+0x294>)
 800259a:	701a      	strb	r2, [r3, #0]
    			if(person.x > SCREEN_WIDTH - (BAR_SIZE/2) - 1) {
 800259c:	4b57      	ldr	r3, [pc, #348]	; (80026fc <loop+0x294>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b36      	cmp	r3, #54	; 0x36
 80025a2:	d902      	bls.n	80025aa <loop+0x142>
    				person.x = SCREEN_WIDTH - (BAR_SIZE/2) - 1;
 80025a4:	4b55      	ldr	r3, [pc, #340]	; (80026fc <loop+0x294>)
 80025a6:	2236      	movs	r2, #54	; 0x36
 80025a8:	701a      	strb	r2, [r3, #0]
    			}
    			if (ball.dir == still) {
 80025aa:	4b55      	ldr	r3, [pc, #340]	; (8002700 <loop+0x298>)
 80025ac:	7a1b      	ldrb	r3, [r3, #8]
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d118      	bne.n	80025e4 <loop+0x17c>
    				Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80025b2:	4b53      	ldr	r3, [pc, #332]	; (8002700 <loop+0x298>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	b298      	uxth	r0, r3
 80025bc:	4b50      	ldr	r3, [pc, #320]	; (8002700 <loop+0x298>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	b299      	uxth	r1, r3
 80025c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2304      	movs	r3, #4
 80025ce:	2204      	movs	r2, #4
 80025d0:	f002 fd4e 	bl	8005070 <Displ_FillArea>
    				ball.x++;
 80025d4:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <loop+0x298>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	4a49      	ldr	r2, [pc, #292]	; (8002700 <loop+0x298>)
 80025dc:	6013      	str	r3, [r2, #0]
    				ballDirection = NE;
 80025de:	4b49      	ldr	r3, [pc, #292]	; (8002704 <loop+0x29c>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
    			}
    		}
    	}
    	if (choice != max_choice){
 80025e4:	4b48      	ldr	r3, [pc, #288]	; (8002708 <loop+0x2a0>)
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	4b42      	ldr	r3, [pc, #264]	; (80026f4 <loop+0x28c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d005      	beq.n	80025fc <loop+0x194>
    		choice++;
 80025f0:	4b45      	ldr	r3, [pc, #276]	; (8002708 <loop+0x2a0>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	4b43      	ldr	r3, [pc, #268]	; (8002708 <loop+0x2a0>)
 80025fa:	701a      	strb	r2, [r3, #0]
    	}
    	key = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	607b      	str	r3, [r7, #4]
    }
    if(key == down){
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b04      	cmp	r3, #4
 8002604:	f040 80f2 	bne.w	80027ec <loop+0x384>
        if (play == notPlay){
 8002608:	4b38      	ldr	r3, [pc, #224]	; (80026ec <loop+0x284>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d119      	bne.n	8002644 <loop+0x1dc>
        	Displ_FillArea(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, 140, 20, DARK_GREY);
 8002610:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2314      	movs	r3, #20
 8002618:	228c      	movs	r2, #140	; 0x8c
 800261a:	2178      	movs	r1, #120	; 0x78
 800261c:	205a      	movs	r0, #90	; 0x5a
 800261e:	f002 fd27 	bl	8005070 <Displ_FillArea>
            play = inPlay;
 8002622:	4b32      	ldr	r3, [pc, #200]	; (80026ec <loop+0x284>)
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
            if(returnConnection() == 1) {
 8002628:	f001 f846 	bl	80036b8 <returnConnection>
 800262c:	4603      	mov	r3, r0
 800262e:	2b01      	cmp	r3, #1
 8002630:	f040 80da 	bne.w	80027e8 <loop+0x380>
                HAL_UART_Transmit(&huart2, (uint8_t *)"S", strlen("S"), 300);
 8002634:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002638:	2201      	movs	r2, #1
 800263a:	4934      	ldr	r1, [pc, #208]	; (800270c <loop+0x2a4>)
 800263c:	4834      	ldr	r0, [pc, #208]	; (8002710 <loop+0x2a8>)
 800263e:	f007 f9b3 	bl	80099a8 <HAL_UART_Transmit>
 8002642:	e0d1      	b.n	80027e8 <loop+0x380>
            }
        }else if(play == inPlay) {
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <loop+0x284>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d115      	bne.n	8002678 <loop+0x210>
            if (ball.dir == still) {
 800264c:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <loop+0x298>)
 800264e:	7a1b      	ldrb	r3, [r3, #8]
 8002650:	2b08      	cmp	r3, #8
 8002652:	d108      	bne.n	8002666 <loop+0x1fe>
                ball.dir = ballDirection;
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <loop+0x29c>)
 8002656:	781a      	ldrb	r2, [r3, #0]
 8002658:	4b29      	ldr	r3, [pc, #164]	; (8002700 <loop+0x298>)
 800265a:	721a      	strb	r2, [r3, #8]
                start = 1;
 800265c:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <loop+0x2ac>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
                playBall();
 8002662:	f7fd feab 	bl	80003bc <playBall>
            }
            if(!hit){
 8002666:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <loop+0x2b0>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 80bc 	bne.w	80027e8 <loop+0x380>
                spawnBullet(0);
 8002670:	2000      	movs	r0, #0
 8002672:	f001 f9ef 	bl	8003a54 <spawnBullet>
 8002676:	e0b7      	b.n	80027e8 <loop+0x380>
            }
        }else if(play == paused){
 8002678:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <loop+0x284>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d153      	bne.n	8002728 <loop+0x2c0>
            if(choice == 0){
 8002680:	4b21      	ldr	r3, [pc, #132]	; (8002708 <loop+0x2a0>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d114      	bne.n	80026b2 <loop+0x24a>
                if(returnConnection() == 1) {
 8002688:	f001 f816 	bl	80036b8 <returnConnection>
 800268c:	4603      	mov	r3, r0
 800268e:	2b01      	cmp	r3, #1
 8002690:	d106      	bne.n	80026a0 <loop+0x238>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"M", strlen("M"), 300);
 8002692:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002696:	2201      	movs	r2, #1
 8002698:	4920      	ldr	r1, [pc, #128]	; (800271c <loop+0x2b4>)
 800269a:	481d      	ldr	r0, [pc, #116]	; (8002710 <loop+0x2a8>)
 800269c:	f007 f984 	bl	80099a8 <HAL_UART_Transmit>
                }
                play = menu;
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <loop+0x284>)
 80026a2:	2203      	movs	r2, #3
 80026a4:	701a      	strb	r2, [r3, #0]
                gamechoice = 0;
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <loop+0x290>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
                init();
 80026ac:	f7ff fec4 	bl	8002438 <init>
 80026b0:	e09a      	b.n	80027e8 <loop+0x380>
            }
            else if(choice == 1){
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <loop+0x2a0>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d114      	bne.n	80026e4 <loop+0x27c>
            	displayPauseMenu(1);
 80026ba:	2001      	movs	r0, #1
 80026bc:	f000 fd54 	bl	8003168 <displayPauseMenu>
                play = last_state;
 80026c0:	4b17      	ldr	r3, [pc, #92]	; (8002720 <loop+0x2b8>)
 80026c2:	781a      	ldrb	r2, [r3, #0]
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <loop+0x284>)
 80026c6:	701a      	strb	r2, [r3, #0]
                if(returnConnection() == 1) {
 80026c8:	f000 fff6 	bl	80036b8 <returnConnection>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	f040 808a 	bne.w	80027e8 <loop+0x380>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"C", strlen("C"), 300);
 80026d4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80026d8:	2201      	movs	r2, #1
 80026da:	4912      	ldr	r1, [pc, #72]	; (8002724 <loop+0x2bc>)
 80026dc:	480c      	ldr	r0, [pc, #48]	; (8002710 <loop+0x2a8>)
 80026de:	f007 f963 	bl	80099a8 <HAL_UART_Transmit>
 80026e2:	e081      	b.n	80027e8 <loop+0x380>
                }
            }else{
                displayPauseMenu(0);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f000 fd3f 	bl	8003168 <displayPauseMenu>
 80026ea:	e07d      	b.n	80027e8 <loop+0x380>
 80026ec:	2000004a 	.word	0x2000004a
 80026f0:	20000044 	.word	0x20000044
 80026f4:	2000002d 	.word	0x2000002d
 80026f8:	20001eed 	.word	0x20001eed
 80026fc:	20000030 	.word	0x20000030
 8002700:	20000034 	.word	0x20000034
 8002704:	20000041 	.word	0x20000041
 8002708:	20001eec 	.word	0x20001eec
 800270c:	0800bfc0 	.word	0x0800bfc0
 8002710:	20001fec 	.word	0x20001fec
 8002714:	20001eef 	.word	0x20001eef
 8002718:	20001eeb 	.word	0x20001eeb
 800271c:	0800bfc4 	.word	0x0800bfc4
 8002720:	20001eee 	.word	0x20001eee
 8002724:	0800bfc8 	.word	0x0800bfc8
            }

        }else if(play == menu){
 8002728:	4ba9      	ldr	r3, [pc, #676]	; (80029d0 <loop+0x568>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d154      	bne.n	80027da <loop+0x372>
            if(choice == 0){
 8002730:	4ba8      	ldr	r3, [pc, #672]	; (80029d4 <loop+0x56c>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d11b      	bne.n	8002770 <loop+0x308>
                //toggle_multiplayer();
                if(returnConnection() == 0) {
 8002738:	f000 ffbe 	bl	80036b8 <returnConnection>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d107      	bne.n	8002752 <loop+0x2ea>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"?", strlen("?"), 300);
 8002742:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002746:	2201      	movs	r2, #1
 8002748:	49a3      	ldr	r1, [pc, #652]	; (80029d8 <loop+0x570>)
 800274a:	48a4      	ldr	r0, [pc, #656]	; (80029dc <loop+0x574>)
 800274c:	f007 f92c 	bl	80099a8 <HAL_UART_Transmit>
 8002750:	e04a      	b.n	80027e8 <loop+0x380>
                } else if(returnConnection() == 1) {
 8002752:	f000 ffb1 	bl	80036b8 <returnConnection>
 8002756:	4603      	mov	r3, r0
 8002758:	2b01      	cmp	r3, #1
 800275a:	d145      	bne.n	80027e8 <loop+0x380>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"X", strlen("X"), 300);
 800275c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002760:	2201      	movs	r2, #1
 8002762:	499f      	ldr	r1, [pc, #636]	; (80029e0 <loop+0x578>)
 8002764:	489d      	ldr	r0, [pc, #628]	; (80029dc <loop+0x574>)
 8002766:	f007 f91f 	bl	80099a8 <HAL_UART_Transmit>
                    closeConnection();
 800276a:	f000 fffb 	bl	8003764 <closeConnection>
 800276e:	e03b      	b.n	80027e8 <loop+0x380>
                }

            }else if(choice == 1){
 8002770:	4b98      	ldr	r3, [pc, #608]	; (80029d4 <loop+0x56c>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d114      	bne.n	80027a2 <loop+0x33a>
                gamechoice = 2;
 8002778:	4b9a      	ldr	r3, [pc, #616]	; (80029e4 <loop+0x57c>)
 800277a:	2202      	movs	r2, #2
 800277c:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 800277e:	4b94      	ldr	r3, [pc, #592]	; (80029d0 <loop+0x568>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
                if(returnConnection() == 1) {
 8002784:	f000 ff98 	bl	80036b8 <returnConnection>
 8002788:	4603      	mov	r3, r0
 800278a:	2b01      	cmp	r3, #1
 800278c:	d106      	bne.n	800279c <loop+0x334>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"2G", strlen("2G"), 300);
 800278e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002792:	2202      	movs	r2, #2
 8002794:	4994      	ldr	r1, [pc, #592]	; (80029e8 <loop+0x580>)
 8002796:	4891      	ldr	r0, [pc, #580]	; (80029dc <loop+0x574>)
 8002798:	f007 f906 	bl	80099a8 <HAL_UART_Transmit>
                }
                init();
 800279c:	f7ff fe4c 	bl	8002438 <init>
 80027a0:	e022      	b.n	80027e8 <loop+0x380>
            }
            else if(choice == 2){
 80027a2:	4b8c      	ldr	r3, [pc, #560]	; (80029d4 <loop+0x56c>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d114      	bne.n	80027d4 <loop+0x36c>
                gamechoice = 1;
 80027aa:	4b8e      	ldr	r3, [pc, #568]	; (80029e4 <loop+0x57c>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80027b0:	4b87      	ldr	r3, [pc, #540]	; (80029d0 <loop+0x568>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
                if(returnConnection() == 1) {
 80027b6:	f000 ff7f 	bl	80036b8 <returnConnection>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d106      	bne.n	80027ce <loop+0x366>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"1G", strlen("1G"), 300);
 80027c0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80027c4:	2202      	movs	r2, #2
 80027c6:	4989      	ldr	r1, [pc, #548]	; (80029ec <loop+0x584>)
 80027c8:	4884      	ldr	r0, [pc, #528]	; (80029dc <loop+0x574>)
 80027ca:	f007 f8ed 	bl	80099a8 <HAL_UART_Transmit>
                }
                init();
 80027ce:	f7ff fe33 	bl	8002438 <init>
 80027d2:	e009      	b.n	80027e8 <loop+0x380>
            }else{
                displayMenu();
 80027d4:	f000 fd2a 	bl	800322c <displayMenu>
 80027d8:	e006      	b.n	80027e8 <loop+0x380>
            }

        }
        else if(!hit){
 80027da:	4b85      	ldr	r3, [pc, #532]	; (80029f0 <loop+0x588>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <loop+0x380>
            spawnBullet(0);
 80027e2:	2000      	movs	r0, #0
 80027e4:	f001 f936 	bl	8003a54 <spawnBullet>
        }
        key = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	607b      	str	r3, [r7, #4]
    }
    if(key == up && play < 2){
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d11e      	bne.n	8002830 <loop+0x3c8>
 80027f2:	4b77      	ldr	r3, [pc, #476]	; (80029d0 <loop+0x568>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d81a      	bhi.n	8002830 <loop+0x3c8>
    	last_state = play;
 80027fa:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <loop+0x568>)
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	4b7d      	ldr	r3, [pc, #500]	; (80029f4 <loop+0x58c>)
 8002800:	701a      	strb	r2, [r3, #0]
        play = paused;
 8002802:	4b73      	ldr	r3, [pc, #460]	; (80029d0 <loop+0x568>)
 8002804:	2202      	movs	r2, #2
 8002806:	701a      	strb	r2, [r3, #0]
        choice = 1;
 8002808:	4b72      	ldr	r3, [pc, #456]	; (80029d4 <loop+0x56c>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
        last_choice_pause = 40;
 800280e:	4b7a      	ldr	r3, [pc, #488]	; (80029f8 <loop+0x590>)
 8002810:	2228      	movs	r2, #40	; 0x28
 8002812:	701a      	strb	r2, [r3, #0]
        key = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
        if(returnConnection() == 1) {
 8002818:	f000 ff4e 	bl	80036b8 <returnConnection>
 800281c:	4603      	mov	r3, r0
 800281e:	2b01      	cmp	r3, #1
 8002820:	d106      	bne.n	8002830 <loop+0x3c8>
            HAL_UART_Transmit(&huart2, (uint8_t *)"P", strlen("P"), 300);
 8002822:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002826:	2201      	movs	r2, #1
 8002828:	4974      	ldr	r1, [pc, #464]	; (80029fc <loop+0x594>)
 800282a:	486c      	ldr	r0, [pc, #432]	; (80029dc <loop+0x574>)
 800282c:	f007 f8bc 	bl	80099a8 <HAL_UART_Transmit>
        }
    }

    if(play == inPlay){
 8002830:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <loop+0x568>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d132      	bne.n	800289e <loop+0x436>
    	if(gamechoice == 1){
 8002838:	4b6a      	ldr	r3, [pc, #424]	; (80029e4 <loop+0x57c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d10a      	bne.n	8002856 <loop+0x3ee>
    		spawnComet();
 8002840:	f001 f882 	bl	8003948 <spawnComet>
    		delayBullet();
 8002844:	f001 feea 	bl	800461c <delayBullet>
    		moveComets();
 8002848:	f001 fadc 	bl	8003e04 <moveComets>
    		moveBullets();
 800284c:	f001 f9ac 	bl	8003ba8 <moveBullets>
    		moveEnemyBullets();
 8002850:	f001 fa1e 	bl	8003c90 <moveEnemyBullets>
 8002854:	e021      	b.n	800289a <loop+0x432>
    	}else if(gamechoice == 2) {
 8002856:	4b63      	ldr	r3, [pc, #396]	; (80029e4 <loop+0x57c>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d11d      	bne.n	800289a <loop+0x432>
            if (start == 1 && ball.dir != still) {
 800285e:	4b68      	ldr	r3, [pc, #416]	; (8002a00 <loop+0x598>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d115      	bne.n	8002892 <loop+0x42a>
 8002866:	4b67      	ldr	r3, [pc, #412]	; (8002a04 <loop+0x59c>)
 8002868:	7a1b      	ldrb	r3, [r3, #8]
 800286a:	2b08      	cmp	r3, #8
 800286c:	d011      	beq.n	8002892 <loop+0x42a>
                if (delay <= 0) {
 800286e:	4b66      	ldr	r3, [pc, #408]	; (8002a08 <loop+0x5a0>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <loop+0x41a>
                    lowerBricks();
 8002876:	f7fd ff8d 	bl	8000794 <lowerBricks>
                    delay = BRICK_SPEED;
 800287a:	4b63      	ldr	r3, [pc, #396]	; (8002a08 <loop+0x5a0>)
 800287c:	228c      	movs	r2, #140	; 0x8c
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	e005      	b.n	800288e <loop+0x426>
                } else {
                    delay--;
 8002882:	4b61      	ldr	r3, [pc, #388]	; (8002a08 <loop+0x5a0>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	3b01      	subs	r3, #1
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4b5f      	ldr	r3, [pc, #380]	; (8002a08 <loop+0x5a0>)
 800288c:	701a      	strb	r2, [r3, #0]
                }
                checkGameOver();
 800288e:	f7fd ffe9 	bl	8000864 <checkGameOver>
            }
            checkGuardianTimer();
 8002892:	f7ff fbad 	bl	8001ff0 <checkGuardianTimer>
            playBall();
 8002896:	f7fd fd91 	bl	80003bc <playBall>
        }

    	updateScreen();
 800289a:	f000 f8b9 	bl	8002a10 <updateScreen>
    }if(play < paused){
 800289e:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <loop+0x568>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d807      	bhi.n	80028b6 <loop+0x44e>
    	if(gamechoice == 1){
 80028a6:	4b4f      	ldr	r3, [pc, #316]	; (80029e4 <loop+0x57c>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d103      	bne.n	80028b6 <loop+0x44e>
    		spawnStar();
 80028ae:	f001 f923 	bl	8003af8 <spawnStar>
    		moveStars();
 80028b2:	f001 fbb7 	bl	8004024 <moveStars>
    	}

    }


    if (returnConnection() == 1 && returnSignal() == 1) {
 80028b6:	f000 feff 	bl	80036b8 <returnConnection>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b01      	cmp	r3, #1
 80028be:	f040 8081 	bne.w	80029c4 <loop+0x55c>
 80028c2:	f000 fee1 	bl	8003688 <returnSignal>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d17b      	bne.n	80029c4 <loop+0x55c>
        if(gamechoice == 0) {
 80028cc:	4b45      	ldr	r3, [pc, #276]	; (80029e4 <loop+0x57c>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10f      	bne.n	80028f4 <loop+0x48c>
            gamechoice = returnMPGameChoice();
 80028d4:	f000 ff12 	bl	80036fc <returnMPGameChoice>
 80028d8:	4603      	mov	r3, r0
 80028da:	461a      	mov	r2, r3
 80028dc:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <loop+0x57c>)
 80028de:	701a      	strb	r2, [r3, #0]
            printArray();
 80028e0:	f000 fec0 	bl	8003664 <printArray>
            turnOffSignal();
 80028e4:	f000 fedc 	bl	80036a0 <turnOffSignal>
            play = notPlay;
 80028e8:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <loop+0x568>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
            init();
 80028ee:	f7ff fda3 	bl	8002438 <init>
 80028f2:	e067      	b.n	80029c4 <loop+0x55c>
        }else if(play == notPlay && returnMPMenuState() == inPlay){
 80028f4:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <loop+0x568>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <loop+0x4aa>
 80028fc:	f000 ff44 	bl	8003788 <returnMPMenuState>
 8002900:	4603      	mov	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d105      	bne.n	8002912 <loop+0x4aa>
        	play = inPlay;
 8002906:	4b32      	ldr	r3, [pc, #200]	; (80029d0 <loop+0x568>)
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
        	turnOffSignal();
 800290c:	f000 fec8 	bl	80036a0 <turnOffSignal>
 8002910:	e058      	b.n	80029c4 <loop+0x55c>
        }else if (play < 2 && returnMPMenuState() == paused) {
 8002912:	4b2f      	ldr	r3, [pc, #188]	; (80029d0 <loop+0x568>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d814      	bhi.n	8002944 <loop+0x4dc>
 800291a:	f000 ff35 	bl	8003788 <returnMPMenuState>
 800291e:	4603      	mov	r3, r0
 8002920:	2b02      	cmp	r3, #2
 8002922:	d10f      	bne.n	8002944 <loop+0x4dc>
            last_state = play;
 8002924:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <loop+0x568>)
 8002926:	781a      	ldrb	r2, [r3, #0]
 8002928:	4b32      	ldr	r3, [pc, #200]	; (80029f4 <loop+0x58c>)
 800292a:	701a      	strb	r2, [r3, #0]
            play = paused;
 800292c:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <loop+0x568>)
 800292e:	2202      	movs	r2, #2
 8002930:	701a      	strb	r2, [r3, #0]
            choice = 1;
 8002932:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <loop+0x56c>)
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
            last_choice_pause = 40;
 8002938:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <loop+0x590>)
 800293a:	2228      	movs	r2, #40	; 0x28
 800293c:	701a      	strb	r2, [r3, #0]
            turnOffSignal();
 800293e:	f000 feaf 	bl	80036a0 <turnOffSignal>
 8002942:	e03f      	b.n	80029c4 <loop+0x55c>
        }else if (play == paused && returnMPMenuState() == inPlay) {
 8002944:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <loop+0x568>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d119      	bne.n	8002980 <loop+0x518>
 800294c:	f000 ff1c 	bl	8003788 <returnMPMenuState>
 8002950:	4603      	mov	r3, r0
 8002952:	2b01      	cmp	r3, #1
 8002954:	d114      	bne.n	8002980 <loop+0x518>
            printf("play = %d, mpMenu = %d\r\n", play, returnMPMenuState());
 8002956:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <loop+0x568>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461c      	mov	r4, r3
 800295c:	f000 ff14 	bl	8003788 <returnMPMenuState>
 8002960:	4603      	mov	r3, r0
 8002962:	461a      	mov	r2, r3
 8002964:	4621      	mov	r1, r4
 8002966:	4829      	ldr	r0, [pc, #164]	; (8002a0c <loop+0x5a4>)
 8002968:	f007 ff7a 	bl	800a860 <iprintf>
            turnOffSignal();
 800296c:	f000 fe98 	bl	80036a0 <turnOffSignal>
            displayPauseMenu(1);
 8002970:	2001      	movs	r0, #1
 8002972:	f000 fbf9 	bl	8003168 <displayPauseMenu>
            play = last_state;
 8002976:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <loop+0x58c>)
 8002978:	781a      	ldrb	r2, [r3, #0]
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <loop+0x568>)
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	e021      	b.n	80029c4 <loop+0x55c>
        }else if (play == paused && returnMPMenuState() == menu) {
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <loop+0x568>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d10f      	bne.n	80029a8 <loop+0x540>
 8002988:	f000 fefe 	bl	8003788 <returnMPMenuState>
 800298c:	4603      	mov	r3, r0
 800298e:	2b03      	cmp	r3, #3
 8002990:	d10a      	bne.n	80029a8 <loop+0x540>
            turnOffSignal();
 8002992:	f000 fe85 	bl	80036a0 <turnOffSignal>
            play = menu;
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <loop+0x568>)
 8002998:	2203      	movs	r2, #3
 800299a:	701a      	strb	r2, [r3, #0]
            gamechoice = 0;
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <loop+0x57c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
            init();
 80029a2:	f7ff fd49 	bl	8002438 <init>
 80029a6:	e00d      	b.n	80029c4 <loop+0x55c>
        }else if(gamechoice == 1) {
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <loop+0x57c>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d009      	beq.n	80029c4 <loop+0x55c>
            //your code
        }else if (gamechoice == 2) {
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <loop+0x57c>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d105      	bne.n	80029c4 <loop+0x55c>
            lowerBricks();
 80029b8:	f7fd feec 	bl	8000794 <lowerBricks>
            printArray();
 80029bc:	f000 fe52 	bl	8003664 <printArray>
            turnOffSignal();
 80029c0:	f000 fe6e 	bl	80036a0 <turnOffSignal>
        }
    }

    return key;
 80029c4:	687b      	ldr	r3, [r7, #4]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd90      	pop	{r4, r7, pc}
 80029ce:	bf00      	nop
 80029d0:	2000004a 	.word	0x2000004a
 80029d4:	20001eec 	.word	0x20001eec
 80029d8:	0800bfcc 	.word	0x0800bfcc
 80029dc:	20001fec 	.word	0x20001fec
 80029e0:	0800bfd0 	.word	0x0800bfd0
 80029e4:	20001eed 	.word	0x20001eed
 80029e8:	0800bfd4 	.word	0x0800bfd4
 80029ec:	0800bfd8 	.word	0x0800bfd8
 80029f0:	20001eeb 	.word	0x20001eeb
 80029f4:	20001eee 	.word	0x20001eee
 80029f8:	2000002c 	.word	0x2000002c
 80029fc:	0800bfdc 	.word	0x0800bfdc
 8002a00:	20001eef 	.word	0x20001eef
 8002a04:	20000034 	.word	0x20000034
 8002a08:	20000040 	.word	0x20000040
 8002a0c:	0800bfe0 	.word	0x0800bfe0

08002a10 <updateScreen>:


void updateScreen()
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af06      	add	r7, sp, #24
    if (play == menu){
 8002a16:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <updateScreen+0x8c>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d102      	bne.n	8002a24 <updateScreen+0x14>
    	displayMenu();
 8002a1e:	f000 fc05 	bl	800322c <displayMenu>
        return;
 8002a22:	e037      	b.n	8002a94 <updateScreen+0x84>
    }

    if (gamechoice == 1){
 8002a24:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <updateScreen+0x90>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d10c      	bne.n	8002a46 <updateScreen+0x36>
        //hit
        if (hit > 0) {
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <updateScreen+0x94>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <updateScreen+0x28>
            spaceShipHitColorToggle();
 8002a34:	f001 fda8 	bl	8004588 <spaceShipHitColorToggle>
        }

        //spaceship
        displaySpaceShip(RED);
 8002a38:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002a3c:	f001 fd1c 	bl	8004478 <displaySpaceShip>

        //lives
        displayLives();
 8002a40:	f001 fd58 	bl	80044f4 <displayLives>
 8002a44:	e005      	b.n	8002a52 <updateScreen+0x42>
    }else if(gamechoice == 2) {
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <updateScreen+0x90>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d101      	bne.n	8002a52 <updateScreen+0x42>
        printScreen();
 8002a4e:	f7ff fa3b 	bl	8001ec8 <printScreen>
    }

    //start
    if(!play){
 8002a52:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <updateScreen+0x8c>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d115      	bne.n	8002a86 <updateScreen+0x76>
    	Displ_WString(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, "START", Font20, 2, WHITE, DARK_GREY);
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <updateScreen+0x98>)
 8002a5c:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8002a60:	9204      	str	r2, [sp, #16]
 8002a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a66:	9203      	str	r2, [sp, #12]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	9202      	str	r2, [sp, #8]
 8002a6c:	466c      	mov	r4, sp
 8002a6e:	1d1a      	adds	r2, r3, #4
 8002a70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a74:	e884 0003 	stmia.w	r4, {r0, r1}
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a0c      	ldr	r2, [pc, #48]	; (8002aac <updateScreen+0x9c>)
 8002a7c:	2178      	movs	r1, #120	; 0x78
 8002a7e:	205a      	movs	r0, #90	; 0x5a
 8002a80:	f003 f852 	bl	8005b28 <Displ_WString>
 8002a84:	e006      	b.n	8002a94 <updateScreen+0x84>
    }
    else if(play == paused){
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <updateScreen+0x8c>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d102      	bne.n	8002a94 <updateScreen+0x84>
    	displayPauseMenu(0);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f000 fb6a 	bl	8003168 <displayPauseMenu>
    }
}
 8002a94:	3704      	adds	r7, #4
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	2000004a 	.word	0x2000004a
 8002aa0:	20001eed 	.word	0x20001eed
 8002aa4:	20001eeb 	.word	0x20001eeb
 8002aa8:	20000020 	.word	0x20000020
 8002aac:	0800bffc 	.word	0x0800bffc

08002ab0 <read_MPU_mem>:
//        return -1;
//    }
//    return len;
//}

uint8_t read_MPU_mem(uint8_t reg_addr){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af04      	add	r7, sp, #16
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	2364      	movs	r3, #100	; 0x64
 8002ac0:	9302      	str	r3, [sp, #8]
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	f107 030f 	add.w	r3, r7, #15
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	2301      	movs	r3, #1
 8002ace:	21d0      	movs	r1, #208	; 0xd0
 8002ad0:	4807      	ldr	r0, [pc, #28]	; (8002af0 <read_MPU_mem+0x40>)
 8002ad2:	f003 ff9b 	bl	8006a0c <HAL_I2C_Mem_Read>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <read_MPU_mem+0x30>
		return data;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	e003      	b.n	8002ae8 <read_MPU_mem+0x38>
	}
	else{
		printf("mem not read\r\n");
 8002ae0:	4804      	ldr	r0, [pc, #16]	; (8002af4 <read_MPU_mem+0x44>)
 8002ae2:	f007 ff43 	bl	800a96c <puts>
		return 0;
 8002ae6:	2300      	movs	r3, #0
	}
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20001ef0 	.word	0x20001ef0
 8002af4:	0800c004 	.word	0x0800c004

08002af8 <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af04      	add	r7, sp, #16
 8002afe:	4603      	mov	r3, r0
 8002b00:	460a      	mov	r2, r1
 8002b02:	71fb      	strb	r3, [r7, #7]
 8002b04:	4613      	mov	r3, r2
 8002b06:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	2364      	movs	r3, #100	; 0x64
 8002b0e:	9302      	str	r3, [sp, #8]
 8002b10:	2301      	movs	r3, #1
 8002b12:	9301      	str	r3, [sp, #4]
 8002b14:	1dbb      	adds	r3, r7, #6
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	2301      	movs	r3, #1
 8002b1a:	21d1      	movs	r1, #209	; 0xd1
 8002b1c:	4806      	ldr	r0, [pc, #24]	; (8002b38 <write_MPU_mem+0x40>)
 8002b1e:	f003 fe61 	bl	80067e4 <HAL_I2C_Mem_Write>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 8002b28:	4804      	ldr	r0, [pc, #16]	; (8002b3c <write_MPU_mem+0x44>)
 8002b2a:	f007 ff1f 	bl	800a96c <puts>
    }
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20001ef0 	.word	0x20001ef0
 8002b3c:	0800c014 	.word	0x0800c014

08002b40 <read_y_accel>:

void read_y_accel(){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
	uint8_t LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 8002b46:	203e      	movs	r0, #62	; 0x3e
 8002b48:	f7ff ffb2 	bl	8002ab0 <read_MPU_mem>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 8002b50:	203d      	movs	r0, #61	; 0x3d
 8002b52:	f7ff ffad 	bl	8002ab0 <read_MPU_mem>
 8002b56:	4603      	mov	r3, r0
 8002b58:	71bb      	strb	r3, [r7, #6]

	ay = (((int16_t)MSByte << 8) | LSByte);
 8002b5a:	79bb      	ldrb	r3, [r7, #6]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	b21a      	sxth	r2, r3
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	b21b      	sxth	r3, r3
 8002b64:	4313      	orrs	r3, r2
 8002b66:	b21a      	sxth	r2, r3
 8002b68:	4b02      	ldr	r3, [pc, #8]	; (8002b74 <read_y_accel+0x34>)
 8002b6a:	801a      	strh	r2, [r3, #0]

}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	200020fc 	.word	0x200020fc

08002b78 <init_MPU>:

void init_MPU(){
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	206b      	movs	r0, #107	; 0x6b
 8002b80:	f7ff ffba 	bl	8002af8 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 8002b84:	2107      	movs	r1, #7
 8002b86:	2019      	movs	r0, #25
 8002b88:	f7ff ffb6 	bl	8002af8 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	201b      	movs	r0, #27
 8002b90:	f7ff ffb2 	bl	8002af8 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 8002b94:	2100      	movs	r1, #0
 8002b96:	201c      	movs	r0, #28
 8002b98:	f7ff ffae 	bl	8002af8 <write_MPU_mem>
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ba6:	f003 f829 	bl	8005bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002baa:	f000 f86d 	bl	8002c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bae:	f000 f9c3 	bl	8002f38 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bb2:	f000 f9a3 	bl	8002efc <MX_DMA_Init>
  MX_I2C2_Init();
 8002bb6:	f000 f8bd 	bl	8002d34 <MX_I2C2_Init>
  MX_SPI2_Init();
 8002bba:	f000 f8fb 	bl	8002db4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002bbe:	f000 f937 	bl	8002e30 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002bc2:	f000 f96b 	bl	8002e9c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8002bc6:	2064      	movs	r0, #100	; 0x64
 8002bc8:	f003 f87e 	bl	8005cc8 <HAL_Delay>
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 8002bcc:	2364      	movs	r3, #100	; 0x64
 8002bce:	2201      	movs	r2, #1
 8002bd0:	21d0      	movs	r1, #208	; 0xd0
 8002bd2:	4826      	ldr	r0, [pc, #152]	; (8002c6c <main+0xcc>)
 8002bd4:	f004 f834 	bl	8006c40 <HAL_I2C_IsDeviceReady>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d105      	bne.n	8002bea <main+0x4a>
	  printf("succesfully communicated\r\n");
 8002bde:	4824      	ldr	r0, [pc, #144]	; (8002c70 <main+0xd0>)
 8002be0:	f007 fec4 	bl	800a96c <puts>
	  init_MPU();
 8002be4:	f7ff ffc8 	bl	8002b78 <init_MPU>
 8002be8:	e002      	b.n	8002bf0 <main+0x50>
  }
  else{
	  printf("i2C not found\r\n");
 8002bea:	4822      	ldr	r0, [pc, #136]	; (8002c74 <main+0xd4>)
 8002bec:	f007 febe 	bl	800a96c <puts>
  }

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f002 f99b 	bl	8004f2c <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f002 fbee 	bl	80053d8 <Displ_CLS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(100);
 8002bfc:	2064      	movs	r0, #100	; 0x64
 8002bfe:	f003 f863 	bl	8005cc8 <HAL_Delay>

      read_y_accel();
 8002c02:	f7ff ff9d 	bl	8002b40 <read_y_accel>
      if (ay > 2000){
 8002c06:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <main+0xd8>)
 8002c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c0c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002c10:	dd07      	ble.n	8002c22 <main+0x82>
          if(x < 320 - 88){
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <main+0xdc>)
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	2be7      	cmp	r3, #231	; 0xe7
 8002c18:	d810      	bhi.n	8002c3c <main+0x9c>
        	  key = right;
 8002c1a:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <main+0xe0>)
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e00c      	b.n	8002c3c <main+0x9c>
          }
      }
      else if (ay < -2000){
 8002c22:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <main+0xd8>)
 8002c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c28:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8002c2c:	da06      	bge.n	8002c3c <main+0x9c>
          if(x > 0){
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <main+0xdc>)
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <main+0x9c>
        	  key = left;
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <main+0xe0>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
          }
      }
      else{
      }
      key = loop(key);
 8002c3c:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <main+0xe0>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fc11 	bl	8002468 <loop>
 8002c46:	4603      	mov	r3, r0
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <main+0xe0>)
 8002c4c:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ammo.in_play; i++){
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	e002      	b.n	8002c5a <main+0xba>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3301      	adds	r3, #1
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <main+0xe4>)
 8002c5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002c60:	461a      	mov	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4293      	cmp	r3, r2
 8002c66:	dbf5      	blt.n	8002c54 <main+0xb4>
      HAL_Delay(100);
 8002c68:	e7c8      	b.n	8002bfc <main+0x5c>
 8002c6a:	bf00      	nop
 8002c6c:	20001ef0 	.word	0x20001ef0
 8002c70:	0800c028 	.word	0x0800c028
 8002c74:	0800c044 	.word	0x0800c044
 8002c78:	200020fc 	.word	0x200020fc
 8002c7c:	20000042 	.word	0x20000042
 8002c80:	20002104 	.word	0x20002104
 8002c84:	20002174 	.word	0x20002174

08002c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b09c      	sub	sp, #112	; 0x70
 8002c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c92:	2228      	movs	r2, #40	; 0x28
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f007 fdda 	bl	800a850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	2230      	movs	r2, #48	; 0x30
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f007 fdcc 	bl	800a850 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002ccc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f004 fc0c 	bl	80074f4 <HAL_RCC_OscConfig>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002ce2:	f000 fa3b 	bl	800315c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ce6:	230f      	movs	r3, #15
 8002ce8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cea:	2302      	movs	r3, #2
 8002cec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d00:	2102      	movs	r1, #2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f005 fc34 	bl	8008570 <HAL_RCC_ClockConfig>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002d0e:	f000 fa25 	bl	800315c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d12:	2340      	movs	r3, #64	; 0x40
 8002d14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f005 fe5d 	bl	80089dc <HAL_RCCEx_PeriphCLKConfig>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002d28:	f000 fa18 	bl	800315c <Error_Handler>
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	3770      	adds	r7, #112	; 0x70
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <MX_I2C2_Init+0x74>)
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <MX_I2C2_Init+0x78>)
 8002d3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <MX_I2C2_Init+0x74>)
 8002d40:	4a1b      	ldr	r2, [pc, #108]	; (8002db0 <MX_I2C2_Init+0x7c>)
 8002d42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002d44:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <MX_I2C2_Init+0x74>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <MX_I2C2_Init+0x74>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d50:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <MX_I2C2_Init+0x74>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <MX_I2C2_Init+0x74>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <MX_I2C2_Init+0x74>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <MX_I2C2_Init+0x74>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <MX_I2C2_Init+0x74>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002d6e:	480e      	ldr	r0, [pc, #56]	; (8002da8 <MX_I2C2_Init+0x74>)
 8002d70:	f003 fca8 	bl	80066c4 <HAL_I2C_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002d7a:	f000 f9ef 	bl	800315c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4809      	ldr	r0, [pc, #36]	; (8002da8 <MX_I2C2_Init+0x74>)
 8002d82:	f004 fb1f 	bl	80073c4 <HAL_I2CEx_ConfigAnalogFilter>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002d8c:	f000 f9e6 	bl	800315c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002d90:	2100      	movs	r1, #0
 8002d92:	4805      	ldr	r0, [pc, #20]	; (8002da8 <MX_I2C2_Init+0x74>)
 8002d94:	f004 fb61 	bl	800745a <HAL_I2CEx_ConfigDigitalFilter>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002d9e:	f000 f9dd 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20001ef0 	.word	0x20001ef0
 8002dac:	40005800 	.word	0x40005800
 8002db0:	2000090e 	.word	0x2000090e

08002db4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002dba:	4a1c      	ldr	r2, [pc, #112]	; (8002e2c <MX_SPI2_Init+0x78>)
 8002dbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002dc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002dc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002dc6:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dcc:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002dce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002dd2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dd4:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dda:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002e02:	2207      	movs	r2, #7
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002e0e:	2208      	movs	r2, #8
 8002e10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e12:	4805      	ldr	r0, [pc, #20]	; (8002e28 <MX_SPI2_Init+0x74>)
 8002e14:	f005 ff66 	bl	8008ce4 <HAL_SPI_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002e1e:	f000 f99d 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20001f44 	.word	0x20001f44
 8002e2c:	40003800 	.word	0x40003800

08002e30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <MX_USART2_UART_Init+0x64>)
 8002e36:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <MX_USART2_UART_Init+0x68>)
 8002e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <MX_USART2_UART_Init+0x64>)
 8002e3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e42:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <MX_USART2_UART_Init+0x64>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <MX_USART2_UART_Init+0x64>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <MX_USART2_UART_Init+0x64>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <MX_USART2_UART_Init+0x64>)
 8002e56:	220c      	movs	r2, #12
 8002e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <MX_USART2_UART_Init+0x64>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <MX_USART2_UART_Init+0x64>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <MX_USART2_UART_Init+0x64>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <MX_USART2_UART_Init+0x64>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e72:	4808      	ldr	r0, [pc, #32]	; (8002e94 <MX_USART2_UART_Init+0x64>)
 8002e74:	f006 fd4a 	bl	800990c <HAL_UART_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e7e:	f000 f96d 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART2->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <MX_USART2_UART_Init+0x68>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <MX_USART2_UART_Init+0x68>)
 8002e88:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8002e8c:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20001fec 	.word	0x20001fec
 8002e98:	40004400 	.word	0x40004400

08002e9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <MX_USART3_UART_Init+0x58>)
 8002ea2:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <MX_USART3_UART_Init+0x5c>)
 8002ea4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <MX_USART3_UART_Init+0x58>)
 8002ea8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002eac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <MX_USART3_UART_Init+0x58>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <MX_USART3_UART_Init+0x58>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <MX_USART3_UART_Init+0x58>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <MX_USART3_UART_Init+0x58>)
 8002ec2:	220c      	movs	r2, #12
 8002ec4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <MX_USART3_UART_Init+0x58>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <MX_USART3_UART_Init+0x58>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <MX_USART3_UART_Init+0x58>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <MX_USART3_UART_Init+0x58>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ede:	4805      	ldr	r0, [pc, #20]	; (8002ef4 <MX_USART3_UART_Init+0x58>)
 8002ee0:	f006 fd14 	bl	800990c <HAL_UART_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002eea:	f000 f937 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20002074 	.word	0x20002074
 8002ef8:	40004800 	.word	0x40004800

08002efc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <MX_DMA_Init+0x38>)
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <MX_DMA_Init+0x38>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6153      	str	r3, [r2, #20]
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <MX_DMA_Init+0x38>)
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	200f      	movs	r0, #15
 8002f20:	f002 ffd1 	bl	8005ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002f24:	200f      	movs	r0, #15
 8002f26:	f002 ffea 	bl	8005efe <HAL_NVIC_EnableIRQ>

}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000

08002f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3e:	f107 0314 	add.w	r3, r7, #20
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	60da      	str	r2, [r3, #12]
 8002f4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4e:	4b46      	ldr	r3, [pc, #280]	; (8003068 <MX_GPIO_Init+0x130>)
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	4a45      	ldr	r2, [pc, #276]	; (8003068 <MX_GPIO_Init+0x130>)
 8002f54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f58:	6153      	str	r3, [r2, #20]
 8002f5a:	4b43      	ldr	r3, [pc, #268]	; (8003068 <MX_GPIO_Init+0x130>)
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f66:	4b40      	ldr	r3, [pc, #256]	; (8003068 <MX_GPIO_Init+0x130>)
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	4a3f      	ldr	r2, [pc, #252]	; (8003068 <MX_GPIO_Init+0x130>)
 8002f6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f70:	6153      	str	r3, [r2, #20]
 8002f72:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <MX_GPIO_Init+0x130>)
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	; (8003068 <MX_GPIO_Init+0x130>)
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	4a39      	ldr	r2, [pc, #228]	; (8003068 <MX_GPIO_Init+0x130>)
 8002f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f88:	6153      	str	r3, [r2, #20]
 8002f8a:	4b37      	ldr	r3, [pc, #220]	; (8003068 <MX_GPIO_Init+0x130>)
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f96:	4b34      	ldr	r3, [pc, #208]	; (8003068 <MX_GPIO_Init+0x130>)
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	4a33      	ldr	r2, [pc, #204]	; (8003068 <MX_GPIO_Init+0x130>)
 8002f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa0:	6153      	str	r3, [r2, #20]
 8002fa2:	4b31      	ldr	r3, [pc, #196]	; (8003068 <MX_GPIO_Init+0x130>)
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fb4:	482d      	ldr	r0, [pc, #180]	; (800306c <MX_GPIO_Init+0x134>)
 8002fb6:	f003 fb55 	bl	8006664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc4:	f003 fb4e 	bl	8006664 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8002fc8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4824      	ldr	r0, [pc, #144]	; (8003070 <MX_GPIO_Init+0x138>)
 8002fe0:	f003 f9b6 	bl	8006350 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fe8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 8002ff2:	f107 0314 	add.w	r3, r7, #20
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ffc:	f003 f9a8 	bl	8006350 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8003000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003006:	2301      	movs	r3, #1
 8003008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300e:	2300      	movs	r3, #0
 8003010:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	4619      	mov	r1, r3
 8003018:	4814      	ldr	r0, [pc, #80]	; (800306c <MX_GPIO_Init+0x134>)
 800301a:	f003 f999 	bl	8006350 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 800301e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003024:	2301      	movs	r3, #1
 8003026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302c:	2300      	movs	r3, #0
 800302e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003030:	f107 0314 	add.w	r3, r7, #20
 8003034:	4619      	mov	r1, r3
 8003036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800303a:	f003 f989 	bl	8006350 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800303e:	2200      	movs	r2, #0
 8003040:	2100      	movs	r1, #0
 8003042:	2006      	movs	r0, #6
 8003044:	f002 ff3f 	bl	8005ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003048:	2006      	movs	r0, #6
 800304a:	f002 ff58 	bl	8005efe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	2100      	movs	r1, #0
 8003052:	2028      	movs	r0, #40	; 0x28
 8003054:	f002 ff37 	bl	8005ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003058:	2028      	movs	r0, #40	; 0x28
 800305a:	f002 ff50 	bl	8005efe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800305e:	bf00      	nop
 8003060:	3728      	adds	r7, #40	; 0x28
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000
 800306c:	48000400 	.word	0x48000400
 8003070:	48000800 	.word	0x48000800

08003074 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	80fb      	strh	r3, [r7, #6]
    // Get the current time
    uint32_t current_time = HAL_GetTick();
 800307e:	f002 fe17 	bl	8005cb0 <HAL_GetTick>
 8003082:	60f8      	str	r0, [r7, #12]

    // Check if it's been long enough since the last debounce
    if (current_time - debounce_time > DEBOUNCE_DELAY) {
 8003084:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_GPIO_EXTI_Callback+0xc8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b1e      	cmp	r3, #30
 800308e:	d951      	bls.n	8003134 <HAL_GPIO_EXTI_Callback+0xc0>
        // Update debounce time
        debounce_time = current_time;
 8003090:	4a2a      	ldr	r2, [pc, #168]	; (800313c <HAL_GPIO_EXTI_Callback+0xc8>)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6013      	str	r3, [r2, #0]
        // Your button handling code here
        printf("interrupt!\r\n");
 8003096:	482a      	ldr	r0, [pc, #168]	; (8003140 <HAL_GPIO_EXTI_Callback+0xcc>)
 8003098:	f007 fc68 	bl	800a96c <puts>
        if (GPIO_Pin == LEFT_Pin && HAL_GPIO_ReadPin(LEFT_GPIO_Port, GPIO_Pin) == 0) {
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a2:	d10e      	bne.n	80030c2 <HAL_GPIO_EXTI_Callback+0x4e>
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	4619      	mov	r1, r3
 80030a8:	4826      	ldr	r0, [pc, #152]	; (8003144 <HAL_GPIO_EXTI_Callback+0xd0>)
 80030aa:	f003 fac3 	bl	8006634 <HAL_GPIO_ReadPin>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d106      	bne.n	80030c2 <HAL_GPIO_EXTI_Callback+0x4e>
            key = left;
 80030b4:	4b24      	ldr	r3, [pc, #144]	; (8003148 <HAL_GPIO_EXTI_Callback+0xd4>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
            printf("left clicked\r\n");
 80030ba:	4824      	ldr	r0, [pc, #144]	; (800314c <HAL_GPIO_EXTI_Callback+0xd8>)
 80030bc:	f007 fc56 	bl	800a96c <puts>
 80030c0:	e038      	b.n	8003134 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == TOP_Pin && HAL_GPIO_ReadPin(TOP_GPIO_Port, GPIO_Pin) == 0) {
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c8:	d10e      	bne.n	80030e8 <HAL_GPIO_EXTI_Callback+0x74>
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	4619      	mov	r1, r3
 80030ce:	481d      	ldr	r0, [pc, #116]	; (8003144 <HAL_GPIO_EXTI_Callback+0xd0>)
 80030d0:	f003 fab0 	bl	8006634 <HAL_GPIO_ReadPin>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_GPIO_EXTI_Callback+0x74>
            key = up;
 80030da:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_GPIO_EXTI_Callback+0xd4>)
 80030dc:	2202      	movs	r2, #2
 80030de:	701a      	strb	r2, [r3, #0]
            printf("up clicked\r\n");
 80030e0:	481b      	ldr	r0, [pc, #108]	; (8003150 <HAL_GPIO_EXTI_Callback+0xdc>)
 80030e2:	f007 fc43 	bl	800a96c <puts>
 80030e6:	e025      	b.n	8003134 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == RIGHT_Pin && HAL_GPIO_ReadPin(RIGHT_GPIO_Port, GPIO_Pin) == 0) {
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ee:	d10e      	bne.n	800310e <HAL_GPIO_EXTI_Callback+0x9a>
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	4619      	mov	r1, r3
 80030f4:	4813      	ldr	r0, [pc, #76]	; (8003144 <HAL_GPIO_EXTI_Callback+0xd0>)
 80030f6:	f003 fa9d 	bl	8006634 <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <HAL_GPIO_EXTI_Callback+0x9a>
            key = right;
 8003100:	4b11      	ldr	r3, [pc, #68]	; (8003148 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003102:	2203      	movs	r2, #3
 8003104:	701a      	strb	r2, [r3, #0]
            printf("right clicked\r\n");
 8003106:	4813      	ldr	r0, [pc, #76]	; (8003154 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003108:	f007 fc30 	bl	800a96c <puts>
 800310c:	e012      	b.n	8003134 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == MIDDLE_Pin && HAL_GPIO_ReadPin(MIDDLE_GPIO_Port, GPIO_Pin) == 0) {
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d10f      	bne.n	8003134 <HAL_GPIO_EXTI_Callback+0xc0>
 8003114:	88fb      	ldrh	r3, [r7, #6]
 8003116:	4619      	mov	r1, r3
 8003118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800311c:	f003 fa8a 	bl	8006634 <HAL_GPIO_ReadPin>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_GPIO_EXTI_Callback+0xc0>
            key = down;
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003128:	2204      	movs	r2, #4
 800312a:	701a      	strb	r2, [r3, #0]
            printf("down clicked\r\n");
 800312c:	480a      	ldr	r0, [pc, #40]	; (8003158 <HAL_GPIO_EXTI_Callback+0xe4>)
 800312e:	f007 fc1d 	bl	800a96c <puts>
        }
    }
}
 8003132:	e7ff      	b.n	8003134 <HAL_GPIO_EXTI_Callback+0xc0>
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20002100 	.word	0x20002100
 8003140:	0800c054 	.word	0x0800c054
 8003144:	48000800 	.word	0x48000800
 8003148:	20002104 	.word	0x20002104
 800314c:	0800c060 	.word	0x0800c060
 8003150:	0800c070 	.word	0x0800c070
 8003154:	0800c07c 	.word	0x0800c07c
 8003158:	0800c08c 	.word	0x0800c08c

0800315c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003160:	b672      	cpsid	i
}
 8003162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003164:	e7fe      	b.n	8003164 <Error_Handler+0x8>
	...

08003168 <displayPauseMenu>:

void displayMultiplayerIcon(void);
void displayBricksIcon(void);
void displaySpaceIcon(void);

void displayPauseMenu(uint8_t clear){
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af04      	add	r7, sp, #16
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
	uint16_t back_color = GREY;
 8003172:	f249 6396 	movw	r3, #38550	; 0x9696
 8003176:	81fb      	strh	r3, [r7, #14]
	uint16_t continue_color = RED;
 8003178:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800317c:	81bb      	strh	r3, [r7, #12]
	uint16_t triangle_color = WHITE;
 800317e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003182:	817b      	strh	r3, [r7, #10]
	if(choice != last_choice_pause || clear){
 8003184:	4b27      	ldr	r3, [pc, #156]	; (8003224 <displayPauseMenu+0xbc>)
 8003186:	781a      	ldrb	r2, [r3, #0]
 8003188:	4b27      	ldr	r3, [pc, #156]	; (8003228 <displayPauseMenu+0xc0>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d102      	bne.n	8003196 <displayPauseMenu+0x2e>
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d042      	beq.n	800321c <displayPauseMenu+0xb4>
		last_choice_pause = choice;
 8003196:	4b23      	ldr	r3, [pc, #140]	; (8003224 <displayPauseMenu+0xbc>)
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	4b23      	ldr	r3, [pc, #140]	; (8003228 <displayPauseMenu+0xc0>)
 800319c:	701a      	strb	r2, [r3, #0]
		if(choice == 0){
 800319e:	4b21      	ldr	r3, [pc, #132]	; (8003224 <displayPauseMenu+0xbc>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <displayPauseMenu+0x4c>
			back_color = RED;
 80031a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031aa:	81fb      	strh	r3, [r7, #14]
			continue_color = GREY;
 80031ac:	f249 6396 	movw	r3, #38550	; 0x9696
 80031b0:	81bb      	strh	r3, [r7, #12]
 80031b2:	e00b      	b.n	80031cc <displayPauseMenu+0x64>
		}
		else if(clear){
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <displayPauseMenu+0x64>
			back_color = DARK_GREY;
 80031ba:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80031be:	81fb      	strh	r3, [r7, #14]
			continue_color = DARK_GREY;
 80031c0:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80031c4:	81bb      	strh	r3, [r7, #12]
			triangle_color = DARK_GREY;
 80031c6:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80031ca:	817b      	strh	r3, [r7, #10]
		}
		Displ_FillArea(SCREEN_WIDTH * 2 - BUTTON_SIZE - 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, back_color);
 80031cc:	89fb      	ldrh	r3, [r7, #14]
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2340      	movs	r3, #64	; 0x40
 80031d2:	2240      	movs	r2, #64	; 0x40
 80031d4:	2158      	movs	r1, #88	; 0x58
 80031d6:	2054      	movs	r0, #84	; 0x54
 80031d8:	f001 ff4a 	bl	8005070 <Displ_FillArea>
		Displ_FillArea(SCREEN_WIDTH * 2 + 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, continue_color);
 80031dc:	89bb      	ldrh	r3, [r7, #12]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2340      	movs	r3, #64	; 0x40
 80031e2:	2240      	movs	r2, #64	; 0x40
 80031e4:	2158      	movs	r1, #88	; 0x58
 80031e6:	20ac      	movs	r0, #172	; 0xac
 80031e8:	f001 ff42 	bl	8005070 <Displ_FillArea>

		Displ_fillTriangle(SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 + 20 + BUTTON_SIZE - 16, SCREEN_HEIGHT * 2, triangle_color);
 80031ec:	897b      	ldrh	r3, [r7, #10]
 80031ee:	9302      	str	r3, [sp, #8]
 80031f0:	2378      	movs	r3, #120	; 0x78
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	23e4      	movs	r3, #228	; 0xe4
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	2390      	movs	r3, #144	; 0x90
 80031fa:	22b4      	movs	r2, #180	; 0xb4
 80031fc:	2160      	movs	r1, #96	; 0x60
 80031fe:	20b4      	movs	r0, #180	; 0xb4
 8003200:	f002 fa37 	bl	8005672 <Displ_fillTriangle>
		Displ_fillTriangle(SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 - 20 - BUTTON_SIZE + 16, SCREEN_HEIGHT * 2, triangle_color);
 8003204:	897b      	ldrh	r3, [r7, #10]
 8003206:	9302      	str	r3, [sp, #8]
 8003208:	2378      	movs	r3, #120	; 0x78
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	235c      	movs	r3, #92	; 0x5c
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2390      	movs	r3, #144	; 0x90
 8003212:	228c      	movs	r2, #140	; 0x8c
 8003214:	2160      	movs	r1, #96	; 0x60
 8003216:	208c      	movs	r0, #140	; 0x8c
 8003218:	f002 fa2b 	bl	8005672 <Displ_fillTriangle>
	}

}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20001eec 	.word	0x20001eec
 8003228:	2000002c 	.word	0x2000002c

0800322c <displayMenu>:

void displayMenu(){
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b08b      	sub	sp, #44	; 0x2c
 8003230:	af06      	add	r7, sp, #24
	int y_offset = 12;
 8003232:	230c      	movs	r3, #12
 8003234:	60fb      	str	r3, [r7, #12]
	int x_offset = 12;
 8003236:	230c      	movs	r3, #12
 8003238:	60bb      	str	r3, [r7, #8]
	//box around
	if(choice != last_choice_menu){
 800323a:	4b4c      	ldr	r3, [pc, #304]	; (800336c <displayMenu+0x140>)
 800323c:	781a      	ldrb	r2, [r3, #0]
 800323e:	4b4c      	ldr	r3, [pc, #304]	; (8003370 <displayMenu+0x144>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d03d      	beq.n	80032c2 <displayMenu+0x96>
		last_choice_menu =  choice;
 8003246:	4b49      	ldr	r3, [pc, #292]	; (800336c <displayMenu+0x140>)
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	4b49      	ldr	r3, [pc, #292]	; (8003370 <displayMenu+0x144>)
 800324c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	e02e      	b.n	80032b2 <displayMenu+0x86>
			if(i == choice){
 8003254:	4b45      	ldr	r3, [pc, #276]	; (800336c <displayMenu+0x140>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4293      	cmp	r3, r2
 800325e:	d10b      	bne.n	8003278 <displayMenu+0x4c>
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, RED);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	b298      	uxth	r0, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	b299      	uxth	r1, r3
 8003268:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2340      	movs	r3, #64	; 0x40
 8003270:	2240      	movs	r2, #64	; 0x40
 8003272:	f001 fefd 	bl	8005070 <Displ_FillArea>
 8003276:	e00a      	b.n	800328e <displayMenu+0x62>
			}else{
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, GREY);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	b298      	uxth	r0, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	b299      	uxth	r1, r3
 8003280:	f249 6396 	movw	r3, #38550	; 0x9696
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	2340      	movs	r3, #64	; 0x40
 8003288:	2240      	movs	r2, #64	; 0x40
 800328a:	f001 fef1 	bl	8005070 <Displ_FillArea>
			}if((i + 1)% 4 == 0){
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3301      	adds	r3, #1
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <displayMenu+0x7a>
				x_offset = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
				y_offset += BUTTON_SIZE + 12;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	334c      	adds	r3, #76	; 0x4c
 80032a2:	60fb      	str	r3, [r7, #12]
				continue;
 80032a4:	e002      	b.n	80032ac <displayMenu+0x80>
			}
			x_offset += BUTTON_SIZE + 12;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	334c      	adds	r3, #76	; 0x4c
 80032aa:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3301      	adds	r3, #1
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	4b30      	ldr	r3, [pc, #192]	; (8003374 <displayMenu+0x148>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	dc02      	bgt.n	80032c2 <displayMenu+0x96>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b07      	cmp	r3, #7
 80032c0:	ddc8      	ble.n	8003254 <displayMenu+0x28>
		}
	}
    displayMenuIcons();
 80032c2:	f000 f861 	bl	8003388 <displayMenuIcons>

    // text
    switch (choice) {
 80032c6:	4b29      	ldr	r3, [pc, #164]	; (800336c <displayMenu+0x140>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d032      	beq.n	8003334 <displayMenu+0x108>
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	dc46      	bgt.n	8003360 <displayMenu+0x134>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <displayMenu+0xb0>
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d016      	beq.n	8003308 <displayMenu+0xdc>
        break;
    case 2:
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
        break;
    default:
        break;
 80032da:	e041      	b.n	8003360 <displayMenu+0x134>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Multiplayer   ", Font20, 1, WHITE, DARK_GREY);
 80032dc:	4b26      	ldr	r3, [pc, #152]	; (8003378 <displayMenu+0x14c>)
 80032de:	f642 422c 	movw	r2, #11308	; 0x2c2c
 80032e2:	9204      	str	r2, [sp, #16]
 80032e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032e8:	9203      	str	r2, [sp, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	9202      	str	r2, [sp, #8]
 80032ee:	466c      	mov	r4, sp
 80032f0:	1d1a      	adds	r2, r3, #4
 80032f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1f      	ldr	r2, [pc, #124]	; (800337c <displayMenu+0x150>)
 80032fe:	21c8      	movs	r1, #200	; 0xc8
 8003300:	2008      	movs	r0, #8
 8003302:	f002 fc11 	bl	8005b28 <Displ_WString>
        break;
 8003306:	e02c      	b.n	8003362 <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Brick Breaker ", Font20, 1, WHITE, DARK_GREY);
 8003308:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <displayMenu+0x14c>)
 800330a:	f642 422c 	movw	r2, #11308	; 0x2c2c
 800330e:	9204      	str	r2, [sp, #16]
 8003310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003314:	9203      	str	r2, [sp, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	9202      	str	r2, [sp, #8]
 800331a:	466c      	mov	r4, sp
 800331c:	1d1a      	adds	r2, r3, #4
 800331e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003322:	e884 0003 	stmia.w	r4, {r0, r1}
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a15      	ldr	r2, [pc, #84]	; (8003380 <displayMenu+0x154>)
 800332a:	21c8      	movs	r1, #200	; 0xc8
 800332c:	2008      	movs	r0, #8
 800332e:	f002 fbfb 	bl	8005b28 <Displ_WString>
        break;
 8003332:	e016      	b.n	8003362 <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
 8003334:	4b10      	ldr	r3, [pc, #64]	; (8003378 <displayMenu+0x14c>)
 8003336:	f642 422c 	movw	r2, #11308	; 0x2c2c
 800333a:	9204      	str	r2, [sp, #16]
 800333c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003340:	9203      	str	r2, [sp, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	9202      	str	r2, [sp, #8]
 8003346:	466c      	mov	r4, sp
 8003348:	1d1a      	adds	r2, r3, #4
 800334a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800334e:	e884 0003 	stmia.w	r4, {r0, r1}
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <displayMenu+0x158>)
 8003356:	21c8      	movs	r1, #200	; 0xc8
 8003358:	2008      	movs	r0, #8
 800335a:	f002 fbe5 	bl	8005b28 <Displ_WString>
        break;
 800335e:	e000      	b.n	8003362 <displayMenu+0x136>
        break;
 8003360:	bf00      	nop
    }
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	bd90      	pop	{r4, r7, pc}
 800336a:	bf00      	nop
 800336c:	20001eec 	.word	0x20001eec
 8003370:	20000048 	.word	0x20000048
 8003374:	20000044 	.word	0x20000044
 8003378:	20000020 	.word	0x20000020
 800337c:	0800c09c 	.word	0x0800c09c
 8003380:	0800c0ac 	.word	0x0800c0ac
 8003384:	0800c0bc 	.word	0x0800c0bc

08003388 <displayMenuIcons>:

void displayMenuIcons(){
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0

    // multiplayer
	displayMultiplayerIcon();
 800338c:	f000 f806 	bl	800339c <displayMultiplayerIcon>

    // brick
	displayBricksIcon();
 8003390:	f000 f868 	bl	8003464 <displayBricksIcon>

    //spaceinvaders
	displaySpaceIcon();
 8003394:	f000 f890 	bl	80034b8 <displaySpaceIcon>
}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}

0800339c <displayMultiplayerIcon>:

void displayMultiplayerIcon(){
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af02      	add	r7, sp, #8
	if(connected){
 80033a2:	4b2f      	ldr	r3, [pc, #188]	; (8003460 <displayMultiplayerIcon+0xc4>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d023      	beq.n	80033f2 <displayMultiplayerIcon+0x56>
		Displ_FillArea(20, 20, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 80033aa:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2304      	movs	r3, #4
 80033b2:	2230      	movs	r2, #48	; 0x30
 80033b4:	2114      	movs	r1, #20
 80033b6:	2014      	movs	r0, #20
 80033b8:	f001 fe5a 	bl	8005070 <Displ_FillArea>
		Displ_FillArea(20, 12, 4, 8, LIGHT_GREEN);
 80033bc:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	2308      	movs	r3, #8
 80033c4:	2204      	movs	r2, #4
 80033c6:	210c      	movs	r1, #12
 80033c8:	2014      	movs	r0, #20
 80033ca:	f001 fe51 	bl	8005070 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE, 12, 4, 8, LIGHT_GREEN);
 80033ce:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2308      	movs	r3, #8
 80033d6:	2204      	movs	r2, #4
 80033d8:	210c      	movs	r1, #12
 80033da:	2040      	movs	r0, #64	; 0x40
 80033dc:	f001 fe48 	bl	8005070 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE/2 + 8, 24, 8, BUTTON_SIZE - 24, LIGHT_GREEN);
 80033e0:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	2328      	movs	r3, #40	; 0x28
 80033e8:	2208      	movs	r2, #8
 80033ea:	2118      	movs	r1, #24
 80033ec:	2028      	movs	r0, #40	; 0x28
 80033ee:	f001 fe3f 	bl	8005070 <Displ_FillArea>
	}
	Displ_FillArea(20, BUTTON_SIZE, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 80033f2:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2304      	movs	r3, #4
 80033fa:	2230      	movs	r2, #48	; 0x30
 80033fc:	2140      	movs	r1, #64	; 0x40
 80033fe:	2014      	movs	r0, #20
 8003400:	f001 fe36 	bl	8005070 <Displ_FillArea>
	Displ_FillArea(20, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8003404:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	2308      	movs	r3, #8
 800340c:	2204      	movs	r2, #4
 800340e:	2144      	movs	r1, #68	; 0x44
 8003410:	2014      	movs	r0, #20
 8003412:	f001 fe2d 	bl	8005070 <Displ_FillArea>
	Displ_FillArea(BUTTON_SIZE, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8003416:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2308      	movs	r3, #8
 800341e:	2204      	movs	r2, #4
 8003420:	2144      	movs	r1, #68	; 0x44
 8003422:	2040      	movs	r0, #64	; 0x40
 8003424:	f001 fe24 	bl	8005070 <Displ_FillArea>
	if(!connected){
 8003428:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <displayMultiplayerIcon+0xc4>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d112      	bne.n	8003456 <displayMultiplayerIcon+0xba>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 8003430:	2318      	movs	r3, #24
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	e00c      	b.n	8003450 <displayMultiplayerIcon+0xb4>
			Displ_FillArea(BUTTON_SIZE/2 + 8, k, 8, 4, LIGHT_GREEN);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	b299      	uxth	r1, r3
 800343a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2304      	movs	r3, #4
 8003442:	2208      	movs	r2, #8
 8003444:	2028      	movs	r0, #40	; 0x28
 8003446:	f001 fe13 	bl	8005070 <Displ_FillArea>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3308      	adds	r3, #8
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b3f      	cmp	r3, #63	; 0x3f
 8003454:	ddef      	ble.n	8003436 <displayMultiplayerIcon+0x9a>
		}
	}
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20002105 	.word	0x20002105

08003464 <displayBricksIcon>:

void displayBricksIcon(){
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af02      	add	r7, sp, #8
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE, 20, 4, LIGHT_GREEN);
 800346a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2304      	movs	r3, #4
 8003472:	2214      	movs	r2, #20
 8003474:	2140      	movs	r1, #64	; 0x40
 8003476:	2068      	movs	r0, #104	; 0x68
 8003478:	f001 fdfa 	bl	8005070 <Displ_FillArea>
	Displ_FillArea(28+BUTTON_SIZE, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 800347c:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	2340      	movs	r3, #64	; 0x40
 8003484:	2204      	movs	r2, #4
 8003486:	210c      	movs	r1, #12
 8003488:	205c      	movs	r0, #92	; 0x5c
 800348a:	f001 fdf1 	bl	8005070 <Displ_FillArea>
	Displ_FillArea((8+BUTTON_SIZE)*2, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 800348e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2340      	movs	r3, #64	; 0x40
 8003496:	2204      	movs	r2, #4
 8003498:	210c      	movs	r1, #12
 800349a:	2090      	movs	r0, #144	; 0x90
 800349c:	f001 fde8 	bl	8005070 <Displ_FillArea>
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE - 20, 4, 4, LIGHT_GREEN);
 80034a0:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2304      	movs	r3, #4
 80034a8:	2204      	movs	r2, #4
 80034aa:	212c      	movs	r1, #44	; 0x2c
 80034ac:	2068      	movs	r0, #104	; 0x68
 80034ae:	f001 fddf 	bl	8005070 <Displ_FillArea>
}
 80034b2:	bf00      	nop
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <displaySpaceIcon>:

void displaySpaceIcon(){
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af02      	add	r7, sp, #8
	Displ_FillArea((BUTTON_SIZE+12)*3 - 48, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 80034be:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	2310      	movs	r3, #16
 80034c6:	2204      	movs	r2, #4
 80034c8:	2134      	movs	r1, #52	; 0x34
 80034ca:	20b4      	movs	r0, #180	; 0xb4
 80034cc:	f001 fdd0 	bl	8005070 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 32, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 80034d0:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2310      	movs	r3, #16
 80034d8:	2204      	movs	r2, #4
 80034da:	2134      	movs	r1, #52	; 0x34
 80034dc:	20c4      	movs	r0, #196	; 0xc4
 80034de:	f001 fdc7 	bl	8005070 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 44, BUTTON_SIZE -8, 12, 4, LIGHT_GREEN);
 80034e2:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	2304      	movs	r3, #4
 80034ea:	220c      	movs	r2, #12
 80034ec:	2138      	movs	r1, #56	; 0x38
 80034ee:	20b8      	movs	r0, #184	; 0xb8
 80034f0:	f001 fdbe 	bl	8005070 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 40, BUTTON_SIZE -16, 4, 16, LIGHT_GREEN);
 80034f4:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2310      	movs	r3, #16
 80034fc:	2204      	movs	r2, #4
 80034fe:	2130      	movs	r1, #48	; 0x30
 8003500:	20bc      	movs	r0, #188	; 0xbc
 8003502:	f001 fdb5 	bl	8005070 <Displ_FillArea>

	Displ_FillArea((BUTTON_SIZE+12)*3 - 36, BUTTON_SIZE -40, 12, 12, LIGHT_GREEN);
 8003506:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	230c      	movs	r3, #12
 800350e:	220c      	movs	r2, #12
 8003510:	2118      	movs	r1, #24
 8003512:	20c0      	movs	r0, #192	; 0xc0
 8003514:	f001 fdac 	bl	8005070 <Displ_FillArea>
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <addCharacterToArray>:
        check_availability();
    }

}

void addCharacterToArray(char c) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
    char filler[2];
    filler[0] = c;
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	733b      	strb	r3, [r7, #12]
    filler[1] = '\0';
 800352e:	2300      	movs	r3, #0
 8003530:	737b      	strb	r3, [r7, #13]

    strcat(characterArray, filler);
 8003532:	f107 030c 	add.w	r3, r7, #12
 8003536:	4619      	mov	r1, r3
 8003538:	4842      	ldr	r0, [pc, #264]	; (8003644 <addCharacterToArray+0x124>)
 800353a:	f007 fabf 	bl	800aabc <strcat>
    //printf("%c\r\n", c);

    if(c == 'O' && mp == enabled) {
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	2b4f      	cmp	r3, #79	; 0x4f
 8003542:	d109      	bne.n	8003558 <addCharacterToArray+0x38>
 8003544:	4b40      	ldr	r3, [pc, #256]	; (8003648 <addCharacterToArray+0x128>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <addCharacterToArray+0x38>
        inSignal = 1;
 800354c:	4b3f      	ldr	r3, [pc, #252]	; (800364c <addCharacterToArray+0x12c>)
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]
        printArray();
 8003552:	f000 f887 	bl	8003664 <printArray>
        mpMenuState = 3;
        printArray();
    }else if(c == 'L') {
        mpGameState = win;
    }
}
 8003556:	e071      	b.n	800363c <addCharacterToArray+0x11c>
    }else if(c == '?') {
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	2b3f      	cmp	r3, #63	; 0x3f
 800355c:	d10f      	bne.n	800357e <addCharacterToArray+0x5e>
        HAL_UART_Transmit(&huart2, (uint8_t *)"!", strlen("!"), 300);
 800355e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003562:	2201      	movs	r2, #1
 8003564:	493a      	ldr	r1, [pc, #232]	; (8003650 <addCharacterToArray+0x130>)
 8003566:	483b      	ldr	r0, [pc, #236]	; (8003654 <addCharacterToArray+0x134>)
 8003568:	f006 fa1e 	bl	80099a8 <HAL_UART_Transmit>
        printArray();
 800356c:	f000 f87a 	bl	8003664 <printArray>
        connected = 1;
 8003570:	4b39      	ldr	r3, [pc, #228]	; (8003658 <addCharacterToArray+0x138>)
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
        mp = enabled;
 8003576:	4b34      	ldr	r3, [pc, #208]	; (8003648 <addCharacterToArray+0x128>)
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
}
 800357c:	e05e      	b.n	800363c <addCharacterToArray+0x11c>
    }else if(c == '!') {
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	2b21      	cmp	r3, #33	; 0x21
 8003582:	d108      	bne.n	8003596 <addCharacterToArray+0x76>
        connected = 1;
 8003584:	4b34      	ldr	r3, [pc, #208]	; (8003658 <addCharacterToArray+0x138>)
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]
        mp = enabled;
 800358a:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <addCharacterToArray+0x128>)
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
        printArray();
 8003590:	f000 f868 	bl	8003664 <printArray>
}
 8003594:	e052      	b.n	800363c <addCharacterToArray+0x11c>
    }else if(c == 'G') {
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	2b47      	cmp	r3, #71	; 0x47
 800359a:	d107      	bne.n	80035ac <addCharacterToArray+0x8c>
        inSignal = 1;
 800359c:	4b2b      	ldr	r3, [pc, #172]	; (800364c <addCharacterToArray+0x12c>)
 800359e:	2201      	movs	r2, #1
 80035a0:	701a      	strb	r2, [r3, #0]
        setMPGameChoice();
 80035a2:	f000 f895 	bl	80036d0 <setMPGameChoice>
        printArray();
 80035a6:	f000 f85d 	bl	8003664 <printArray>
}
 80035aa:	e047      	b.n	800363c <addCharacterToArray+0x11c>
    }else if(c == 'B') {
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	2b42      	cmp	r3, #66	; 0x42
 80035b0:	d102      	bne.n	80035b8 <addCharacterToArray+0x98>
        setCoord();
 80035b2:	f000 f8af 	bl	8003714 <setCoord>
}
 80035b6:	e041      	b.n	800363c <addCharacterToArray+0x11c>
    }else if(c == 'S'){
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	2b53      	cmp	r3, #83	; 0x53
 80035bc:	d108      	bne.n	80035d0 <addCharacterToArray+0xb0>
        inSignal = 1;
 80035be:	4b23      	ldr	r3, [pc, #140]	; (800364c <addCharacterToArray+0x12c>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
    	mpMenuState = 1;
 80035c4:	4b25      	ldr	r3, [pc, #148]	; (800365c <addCharacterToArray+0x13c>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
    	printArray();
 80035ca:	f000 f84b 	bl	8003664 <printArray>
}
 80035ce:	e035      	b.n	800363c <addCharacterToArray+0x11c>
    }else if(c == 'X') {
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	2b58      	cmp	r3, #88	; 0x58
 80035d4:	d108      	bne.n	80035e8 <addCharacterToArray+0xc8>
       connected = 0;
 80035d6:	4b20      	ldr	r3, [pc, #128]	; (8003658 <addCharacterToArray+0x138>)
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
       mp = disabled;
 80035dc:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <addCharacterToArray+0x128>)
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
       printArray();
 80035e2:	f000 f83f 	bl	8003664 <printArray>
}
 80035e6:	e029      	b.n	800363c <addCharacterToArray+0x11c>
    }else if(c == 'P') {
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	2b50      	cmp	r3, #80	; 0x50
 80035ec:	d108      	bne.n	8003600 <addCharacterToArray+0xe0>
        inSignal = 1;
 80035ee:	4b17      	ldr	r3, [pc, #92]	; (800364c <addCharacterToArray+0x12c>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	701a      	strb	r2, [r3, #0]
        mpMenuState = 2;
 80035f4:	4b19      	ldr	r3, [pc, #100]	; (800365c <addCharacterToArray+0x13c>)
 80035f6:	2202      	movs	r2, #2
 80035f8:	701a      	strb	r2, [r3, #0]
        printArray();
 80035fa:	f000 f833 	bl	8003664 <printArray>
}
 80035fe:	e01d      	b.n	800363c <addCharacterToArray+0x11c>
    }else if(c == 'C') {
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	2b43      	cmp	r3, #67	; 0x43
 8003604:	d108      	bne.n	8003618 <addCharacterToArray+0xf8>
        inSignal = 1;
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <addCharacterToArray+0x12c>)
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]
        mpMenuState = 1;
 800360c:	4b13      	ldr	r3, [pc, #76]	; (800365c <addCharacterToArray+0x13c>)
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
        printArray();
 8003612:	f000 f827 	bl	8003664 <printArray>
}
 8003616:	e011      	b.n	800363c <addCharacterToArray+0x11c>
    }else if(c == 'M') {
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	2b4d      	cmp	r3, #77	; 0x4d
 800361c:	d108      	bne.n	8003630 <addCharacterToArray+0x110>
        inSignal = 1;
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <addCharacterToArray+0x12c>)
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
        mpMenuState = 3;
 8003624:	4b0d      	ldr	r3, [pc, #52]	; (800365c <addCharacterToArray+0x13c>)
 8003626:	2203      	movs	r2, #3
 8003628:	701a      	strb	r2, [r3, #0]
        printArray();
 800362a:	f000 f81b 	bl	8003664 <printArray>
}
 800362e:	e005      	b.n	800363c <addCharacterToArray+0x11c>
    }else if(c == 'L') {
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	2b4c      	cmp	r3, #76	; 0x4c
 8003634:	d102      	bne.n	800363c <addCharacterToArray+0x11c>
        mpGameState = win;
 8003636:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <addCharacterToArray+0x140>)
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
}
 800363c:	bf00      	nop
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20002108 	.word	0x20002108
 8003648:	20002106 	.word	0x20002106
 800364c:	2000216c 	.word	0x2000216c
 8003650:	0800c0d0 	.word	0x0800c0d0
 8003654:	20001fec 	.word	0x20001fec
 8003658:	20002105 	.word	0x20002105
 800365c:	2000216f 	.word	0x2000216f
 8003660:	2000216e 	.word	0x2000216e

08003664 <printArray>:

void printArray() {
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
    printf("%s\r\n", characterArray);
 8003668:	4905      	ldr	r1, [pc, #20]	; (8003680 <printArray+0x1c>)
 800366a:	4806      	ldr	r0, [pc, #24]	; (8003684 <printArray+0x20>)
 800366c:	f007 f8f8 	bl	800a860 <iprintf>
    memset(characterArray, '\0', sizeof(characterArray));
 8003670:	2264      	movs	r2, #100	; 0x64
 8003672:	2100      	movs	r1, #0
 8003674:	4802      	ldr	r0, [pc, #8]	; (8003680 <printArray+0x1c>)
 8003676:	f007 f8eb 	bl	800a850 <memset>
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20002108 	.word	0x20002108
 8003684:	0800c0d4 	.word	0x0800c0d4

08003688 <returnSignal>:

int returnSignal() {
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
    return inSignal;
 800368c:	4b03      	ldr	r3, [pc, #12]	; (800369c <returnSignal+0x14>)
 800368e:	781b      	ldrb	r3, [r3, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	2000216c 	.word	0x2000216c

080036a0 <turnOffSignal>:

void turnOffSignal() {
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
    inSignal = 0;
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <turnOffSignal+0x14>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	701a      	strb	r2, [r3, #0]
}
 80036aa:	bf00      	nop
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	2000216c 	.word	0x2000216c

080036b8 <returnConnection>:

int returnConnection() {
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
    return connected;
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <returnConnection+0x14>)
 80036be:	781b      	ldrb	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20002105 	.word	0x20002105

080036d0 <setMPGameChoice>:

void setMPGameChoice() {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
    mpGameChoice = characterArray[0] - '0';
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <setMPGameChoice+0x20>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	3b30      	subs	r3, #48	; 0x30
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <setMPGameChoice+0x24>)
 80036de:	701a      	strb	r2, [r3, #0]
    printf("%d\r\n", mpGameChoice);
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <setMPGameChoice+0x24>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	4619      	mov	r1, r3
 80036e6:	4804      	ldr	r0, [pc, #16]	; (80036f8 <setMPGameChoice+0x28>)
 80036e8:	f007 f8ba 	bl	800a860 <iprintf>
}
 80036ec:	bf00      	nop
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20002108 	.word	0x20002108
 80036f4:	2000216d 	.word	0x2000216d
 80036f8:	0800c0dc 	.word	0x0800c0dc

080036fc <returnMPGameChoice>:

uint8_t returnMPGameChoice() {
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
    return mpGameChoice;
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <returnMPGameChoice+0x14>)
 8003702:	781b      	ldrb	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	2000216d 	.word	0x2000216d

08003714 <setCoord>:

uint8_t returnCoord() {
    return x_coord;
}

void setCoord() {
 8003714:	b580      	push	{r7, lr}
 8003716:	b09a      	sub	sp, #104	; 0x68
 8003718:	af00      	add	r7, sp, #0
    char buffer[100];
    strncpy(buffer, characterArray, strlen(characterArray) - 2);
 800371a:	4810      	ldr	r0, [pc, #64]	; (800375c <setCoord+0x48>)
 800371c:	f7fc fd58 	bl	80001d0 <strlen>
 8003720:	4603      	mov	r3, r0
 8003722:	1e9a      	subs	r2, r3, #2
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	490d      	ldr	r1, [pc, #52]	; (800375c <setCoord+0x48>)
 8003728:	4618      	mov	r0, r3
 800372a:	f007 f9d6 	bl	800aada <strncpy>
    buffer[strlen(characterArray) - 1] = '\0';
 800372e:	480b      	ldr	r0, [pc, #44]	; (800375c <setCoord+0x48>)
 8003730:	f7fc fd4e 	bl	80001d0 <strlen>
 8003734:	4603      	mov	r3, r0
 8003736:	3b01      	subs	r3, #1
 8003738:	3368      	adds	r3, #104	; 0x68
 800373a:	443b      	add	r3, r7
 800373c:	2200      	movs	r2, #0
 800373e:	f803 2c64 	strb.w	r2, [r3, #-100]

    x_coord = (uint8_t)atoi(buffer);
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	4618      	mov	r0, r3
 8003746:	f007 f854 	bl	800a7f2 <atoi>
 800374a:	4603      	mov	r3, r0
 800374c:	b2da      	uxtb	r2, r3
 800374e:	4b04      	ldr	r3, [pc, #16]	; (8003760 <setCoord+0x4c>)
 8003750:	701a      	strb	r2, [r3, #0]
}
 8003752:	bf00      	nop
 8003754:	3768      	adds	r7, #104	; 0x68
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20002108 	.word	0x20002108
 8003760:	20002170 	.word	0x20002170

08003764 <closeConnection>:

void closeConnection() {
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
    connected = 0;
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <closeConnection+0x1c>)
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
    mp = disabled;
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <closeConnection+0x20>)
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20002105 	.word	0x20002105
 8003784:	20002106 	.word	0x20002106

08003788 <returnMPMenuState>:

uint8_t returnMPMenuState() {
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
    return mpMenuState;
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <returnMPMenuState+0x14>)
 800378e:	781b      	ldrb	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	2000216f 	.word	0x2000216f

080037a0 <setGameState>:

void setGameState(GameState state) {
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	71fb      	strb	r3, [r7, #7]
    mpGameState = state;
 80037aa:	4a04      	ldr	r2, [pc, #16]	; (80037bc <setGameState+0x1c>)
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	7013      	strb	r3, [r2, #0]
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	2000216e 	.word	0x2000216e

080037c0 <initSpaceInvaders>:
 * initialises ammo by clearing all values using initAmmo()
 * initialises comets by clearing all values using initComets()
 * initialises stars by clearing all values using initStars()
 *
 */
void initSpaceInvaders(){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
    money = 0;
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <initSpaceInvaders+0x6c>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
    lives = 3;
 80037ca:	4b19      	ldr	r3, [pc, #100]	; (8003830 <initSpaceInvaders+0x70>)
 80037cc:	2203      	movs	r2, #3
 80037ce:	701a      	strb	r2, [r3, #0]

    Displ_CLS(DARK_GREY);
 80037d0:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80037d4:	f001 fe00 	bl	80053d8 <Displ_CLS>
    // Seed the random number generator
    srand(HAL_GetTick());
 80037d8:	f002 fa6a 	bl	8005cb0 <HAL_GetTick>
 80037dc:	4603      	mov	r3, r0
 80037de:	4618      	mov	r0, r3
 80037e0:	f007 f8cc 	bl	800a97c <srand>
    comet_delay = RANDOM(5,20);
 80037e4:	f007 f8f8 	bl	800a9d8 <rand>
 80037e8:	4603      	mov	r3, r0
 80037ea:	425a      	negs	r2, r3
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	f002 020f 	and.w	r2, r2, #15
 80037f4:	bf58      	it	pl
 80037f6:	4253      	negpl	r3, r2
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	3305      	adds	r3, #5
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <initSpaceInvaders+0x74>)
 8003800:	701a      	strb	r2, [r3, #0]
    initSpaceShip();
 8003802:	f000 f81f 	bl	8003844 <initSpaceShip>
    initAmmo(&ammo,0);
 8003806:	2100      	movs	r1, #0
 8003808:	480b      	ldr	r0, [pc, #44]	; (8003838 <initSpaceInvaders+0x78>)
 800380a:	f000 f827 	bl	800385c <initAmmo>
    if(in_multiplayer){
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <initSpaceInvaders+0x7c>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <initSpaceInvaders+0x5e>
        initAmmo(&enemy_ammo,1);
 8003816:	2101      	movs	r1, #1
 8003818:	4809      	ldr	r0, [pc, #36]	; (8003840 <initSpaceInvaders+0x80>)
 800381a:	f000 f81f 	bl	800385c <initAmmo>
    }
    initComets();
 800381e:	f000 f845 	bl	80038ac <initComets>
    initStars();
 8003822:	f000 f86d 	bl	8003900 <initStars>
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200021d8 	.word	0x200021d8
 8003830:	20000049 	.word	0x20000049
 8003834:	200021dc 	.word	0x200021dc
 8003838:	20002174 	.word	0x20002174
 800383c:	20000051 	.word	0x20000051
 8003840:	20002184 	.word	0x20002184

08003844 <initSpaceShip>:

void initSpaceShip(){
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
    SpaceShip.x = SCREEN_WIDTH/2;
 8003848:	4b03      	ldr	r3, [pc, #12]	; (8003858 <initSpaceShip+0x14>)
 800384a:	2228      	movs	r2, #40	; 0x28
 800384c:	701a      	strb	r2, [r3, #0]
}
 800384e:	bf00      	nop
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	2000004c 	.word	0x2000004c

0800385c <initAmmo>:

void initAmmo(bullets *am,int enemy){
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
    am->enemy = enemy;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	b25a      	sxtb	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	701a      	strb	r2, [r3, #0]
    am->in_play=0;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	705a      	strb	r2, [r3, #1]
    for (int i = 0;i<MAX_BULLETS;i++){
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	e00e      	b.n	8003898 <initAmmo+0x3c>
        am->bullet_ar[i].x = -1;
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4413      	add	r3, r2
 8003882:	22ff      	movs	r2, #255	; 0xff
 8003884:	709a      	strb	r2, [r3, #2]
        am->bullet_ar[i].y = -1;
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	22ff      	movs	r2, #255	; 0xff
 8003890:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_BULLETS;i++){
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3301      	adds	r3, #1
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b05      	cmp	r3, #5
 800389c:	dded      	ble.n	800387a <initAmmo+0x1e>
    }
}
 800389e:	bf00      	nop
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <initComets>:

void initComets(){
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
    Comet.in_play = 0;
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <initComets+0x50>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 80038b8:	2300      	movs	r3, #0
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	e014      	b.n	80038e8 <initComets+0x3c>
        COMET_X(i) = -1;
 80038be:	4a0f      	ldr	r2, [pc, #60]	; (80038fc <initComets+0x50>)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	22ff      	movs	r2, #255	; 0xff
 80038c8:	705a      	strb	r2, [r3, #1]
        COMET_Y(i) = -1;
 80038ca:	4a0c      	ldr	r2, [pc, #48]	; (80038fc <initComets+0x50>)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	22ff      	movs	r2, #255	; 0xff
 80038d4:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(i) = 2;
 80038d6:	4a09      	ldr	r2, [pc, #36]	; (80038fc <initComets+0x50>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	2202      	movs	r2, #2
 80038e0:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_COMETS;i++){
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3301      	adds	r3, #1
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b09      	cmp	r3, #9
 80038ec:	dde7      	ble.n	80038be <initComets+0x12>
    }
}
 80038ee:	bf00      	nop
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	20002194 	.word	0x20002194

08003900 <initStars>:

void initStars(){
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
    Star.in_play = 0;
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <initStars+0x44>)
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 800390c:	2300      	movs	r3, #0
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	e00e      	b.n	8003930 <initStars+0x30>
    	STAR_X(i) = -1;
 8003912:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <initStars+0x44>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4413      	add	r3, r2
 800391a:	22ff      	movs	r2, #255	; 0xff
 800391c:	705a      	strb	r2, [r3, #1]
    	STAR_Y(i) = -1;
 800391e:	4a09      	ldr	r2, [pc, #36]	; (8003944 <initStars+0x44>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	22ff      	movs	r2, #255	; 0xff
 8003928:	709a      	strb	r2, [r3, #2]
    for (int i = 0;i<MAX_COMETS;i++){
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3301      	adds	r3, #1
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b09      	cmp	r3, #9
 8003934:	dded      	ble.n	8003912 <initStars+0x12>
    }
}
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	200021c0 	.word	0x200021c0

08003948 <spawnComet>:

void spawnComet(){
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 800394c:	4b3d      	ldr	r3, [pc, #244]	; (8003a44 <spawnComet+0xfc>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d16e      	bne.n	8003a32 <spawnComet+0xea>
 8003954:	4b3c      	ldr	r3, [pc, #240]	; (8003a48 <spawnComet+0x100>)
 8003956:	f993 3000 	ldrsb.w	r3, [r3]
 800395a:	2b09      	cmp	r3, #9
 800395c:	dc69      	bgt.n	8003a32 <spawnComet+0xea>
    	COMET_X(Comet.in_play) = RANDOM(PLAYABLE_OFFSET, PLAYABLE_MAX);
 800395e:	f007 f83b 	bl	800a9d8 <rand>
 8003962:	4602      	mov	r2, r0
 8003964:	4b39      	ldr	r3, [pc, #228]	; (8003a4c <spawnComet+0x104>)
 8003966:	fb83 1302 	smull	r1, r3, r3, r2
 800396a:	4413      	add	r3, r2
 800396c:	1199      	asrs	r1, r3, #6
 800396e:	17d3      	asrs	r3, r2, #31
 8003970:	1ac9      	subs	r1, r1, r3
 8003972:	460b      	mov	r3, r1
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	440b      	add	r3, r1
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	1a5b      	subs	r3, r3, r1
 800397c:	1ad1      	subs	r1, r2, r3
 800397e:	b2cb      	uxtb	r3, r1
 8003980:	4a31      	ldr	r2, [pc, #196]	; (8003a48 <spawnComet+0x100>)
 8003982:	f992 2000 	ldrsb.w	r2, [r2]
 8003986:	4610      	mov	r0, r2
 8003988:	3305      	adds	r3, #5
 800398a:	b2d9      	uxtb	r1, r3
 800398c:	4a2e      	ldr	r2, [pc, #184]	; (8003a48 <spawnComet+0x100>)
 800398e:	0083      	lsls	r3, r0, #2
 8003990:	4413      	add	r3, r2
 8003992:	460a      	mov	r2, r1
 8003994:	705a      	strb	r2, [r3, #1]
    	COMET_Y(Comet.in_play) = 0;
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <spawnComet+0x100>)
 8003998:	f993 3000 	ldrsb.w	r3, [r3]
 800399c:	4a2a      	ldr	r2, [pc, #168]	; (8003a48 <spawnComet+0x100>)
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	2200      	movs	r2, #0
 80039a4:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(Comet.in_play) = RANDOM(MIN_COMET_SIZE,MAX_COMET_SIZE);
 80039a6:	f007 f817 	bl	800a9d8 <rand>
 80039aa:	4602      	mov	r2, r0
 80039ac:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <spawnComet+0x108>)
 80039ae:	fb83 3102 	smull	r3, r1, r3, r2
 80039b2:	17d3      	asrs	r3, r2, #31
 80039b4:	1ac9      	subs	r1, r1, r3
 80039b6:	460b      	mov	r3, r1
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	440b      	add	r3, r1
 80039bc:	1ad1      	subs	r1, r2, r3
 80039be:	b2cb      	uxtb	r3, r1
 80039c0:	3302      	adds	r3, #2
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <spawnComet+0x100>)
 80039c6:	f993 3000 	ldrsb.w	r3, [r3]
 80039ca:	b251      	sxtb	r1, r2
 80039cc:	4a1e      	ldr	r2, [pc, #120]	; (8003a48 <spawnComet+0x100>)
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	460a      	mov	r2, r1
 80039d4:	70da      	strb	r2, [r3, #3]

        COMET_COINS(Comet.in_play) = 7 - COMET_SIZE(Comet.in_play);
 80039d6:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <spawnComet+0x100>)
 80039d8:	f993 3000 	ldrsb.w	r3, [r3]
 80039dc:	4a1a      	ldr	r2, [pc, #104]	; (8003a48 <spawnComet+0x100>)
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f1c3 0307 	rsb	r3, r3, #7
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <spawnComet+0x100>)
 80039f0:	f993 3000 	ldrsb.w	r3, [r3]
 80039f4:	b251      	sxtb	r1, r2
 80039f6:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <spawnComet+0x100>)
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	460a      	mov	r2, r1
 80039fe:	711a      	strb	r2, [r3, #4]
        comet_delay = RANDOM(5,20);
 8003a00:	f006 ffea 	bl	800a9d8 <rand>
 8003a04:	4603      	mov	r3, r0
 8003a06:	425a      	negs	r2, r3
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	f002 020f 	and.w	r2, r2, #15
 8003a10:	bf58      	it	pl
 8003a12:	4253      	negpl	r3, r2
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	3305      	adds	r3, #5
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <spawnComet+0xfc>)
 8003a1c:	701a      	strb	r2, [r3, #0]
        Comet.in_play++;
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <spawnComet+0x100>)
 8003a20:	f993 3000 	ldrsb.w	r3, [r3]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	3301      	adds	r3, #1
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	b25a      	sxtb	r2, r3
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <spawnComet+0x100>)
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	e006      	b.n	8003a40 <spawnComet+0xf8>
    }else{
        comet_delay--;
 8003a32:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <spawnComet+0xfc>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <spawnComet+0xfc>)
 8003a3c:	701a      	strb	r2, [r3, #0]
    }

}
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	200021dc 	.word	0x200021dc
 8003a48:	20002194 	.word	0x20002194
 8003a4c:	e6c2b449 	.word	0xe6c2b449
 8003a50:	55555556 	.word	0x55555556

08003a54 <spawnBullet>:

void spawnBullet(int enemy){
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
    int x_val = SpaceShip.x;
 8003a5c:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <spawnBullet+0x94>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]
    int y_val = SpaceShip.y - 3;
 8003a62:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <spawnBullet+0x94>)
 8003a64:	785b      	ldrb	r3, [r3, #1]
 8003a66:	3b03      	subs	r3, #3
 8003a68:	617b      	str	r3, [r7, #20]
    bullets *am_p;
    if (enemy){
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <spawnBullet+0x22>
        am_p = &enemy_ammo;
 8003a70:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <spawnBullet+0x98>)
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	e001      	b.n	8003a7a <spawnBullet+0x26>
    }else{
        am_p = &ammo;
 8003a76:	4b1e      	ldr	r3, [pc, #120]	; (8003af0 <spawnBullet+0x9c>)
 8003a78:	613b      	str	r3, [r7, #16]
    }
    if(am_p->in_play < MAX_BULLETS && bullet_delay == 0){
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	dc2a      	bgt.n	8003ada <spawnBullet+0x86>
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <spawnBullet+0xa0>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d126      	bne.n	8003ada <spawnBullet+0x86>
        if(am_p->enemy){
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <spawnBullet+0x46>
            //x_val = read the input from multiplayer;
            y_val = 3;
 8003a96:	2303      	movs	r3, #3
 8003a98:	617b      	str	r3, [r7, #20]
        }
        am_p->bullet_ar[am_p->in_play].x = x_val;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	b2d1      	uxtb	r1, r2
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	460a      	mov	r2, r1
 8003aac:	709a      	strb	r2, [r3, #2]
        am_p->bullet_ar[am_p->in_play].y = y_val;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	b2d1      	uxtb	r1, r2
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	4413      	add	r3, r2
 8003abe:	460a      	mov	r2, r1
 8003ac0:	70da      	strb	r2, [r3, #3]
        am_p->in_play++;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	b25a      	sxtb	r2, r3
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	705a      	strb	r2, [r3, #1]
        bullet_delay = MAX_DELAY_BULLETS;
 8003ad4:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <spawnBullet+0xa0>)
 8003ad6:	220a      	movs	r2, #10
 8003ad8:	701a      	strb	r2, [r3, #0]
    }
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	2000004c 	.word	0x2000004c
 8003aec:	20002184 	.word	0x20002184
 8003af0:	20002174 	.word	0x20002174
 8003af4:	200021d5 	.word	0x200021d5

08003af8 <spawnStar>:

void spawnStar(){
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 8003afc:	4b27      	ldr	r3, [pc, #156]	; (8003b9c <spawnStar+0xa4>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d141      	bne.n	8003b88 <spawnStar+0x90>
 8003b04:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <spawnStar+0xa8>)
 8003b06:	f993 3000 	ldrsb.w	r3, [r3]
 8003b0a:	2b09      	cmp	r3, #9
 8003b0c:	dc3c      	bgt.n	8003b88 <spawnStar+0x90>
    	STAR_X(Star.in_play) = RANDOM(PLAYABLE_OFFSET,PLAYABLE_MAX);
 8003b0e:	f006 ff63 	bl	800a9d8 <rand>
 8003b12:	4602      	mov	r2, r0
 8003b14:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <spawnStar+0xac>)
 8003b16:	fb83 1302 	smull	r1, r3, r3, r2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	1199      	asrs	r1, r3, #6
 8003b1e:	17d3      	asrs	r3, r2, #31
 8003b20:	1ac9      	subs	r1, r1, r3
 8003b22:	460b      	mov	r3, r1
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	440b      	add	r3, r1
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	1a5b      	subs	r3, r3, r1
 8003b2c:	1ad1      	subs	r1, r2, r3
 8003b2e:	b2cb      	uxtb	r3, r1
 8003b30:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <spawnStar+0xa8>)
 8003b32:	f992 2000 	ldrsb.w	r2, [r2]
 8003b36:	4610      	mov	r0, r2
 8003b38:	3305      	adds	r3, #5
 8003b3a:	b2d9      	uxtb	r1, r3
 8003b3c:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <spawnStar+0xa8>)
 8003b3e:	0043      	lsls	r3, r0, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	460a      	mov	r2, r1
 8003b44:	705a      	strb	r2, [r3, #1]
    	STAR_Y(Star.in_play) = 0;
 8003b46:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <spawnStar+0xa8>)
 8003b48:	f993 3000 	ldrsb.w	r3, [r3]
 8003b4c:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <spawnStar+0xa8>)
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	4413      	add	r3, r2
 8003b52:	2200      	movs	r2, #0
 8003b54:	709a      	strb	r2, [r3, #2]
        star_delay = RANDOM(5,20);
 8003b56:	f006 ff3f 	bl	800a9d8 <rand>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	425a      	negs	r2, r3
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	f002 020f 	and.w	r2, r2, #15
 8003b66:	bf58      	it	pl
 8003b68:	4253      	negpl	r3, r2
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	3305      	adds	r3, #5
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <spawnStar+0xa4>)
 8003b72:	701a      	strb	r2, [r3, #0]
        Star.in_play++;
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <spawnStar+0xa8>)
 8003b76:	f993 3000 	ldrsb.w	r3, [r3]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	b25a      	sxtb	r2, r3
 8003b82:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <spawnStar+0xa8>)
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	e006      	b.n	8003b96 <spawnStar+0x9e>
    }else{
        star_delay--;
 8003b88:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <spawnStar+0xa4>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	4b02      	ldr	r3, [pc, #8]	; (8003b9c <spawnStar+0xa4>)
 8003b92:	701a      	strb	r2, [r3, #0]
    }
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200021dd 	.word	0x200021dd
 8003ba0:	200021c0 	.word	0x200021c0
 8003ba4:	e6c2b449 	.word	0xe6c2b449

08003ba8 <moveBullets>:

void moveBullets(){
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
	displayAmmo(DARK_GREY);
 8003bae:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003bb2:	f000 fbc7 	bl	8004344 <displayAmmo>
	for(int i = 0; i < ammo.in_play; i++){
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	e056      	b.n	8003c6a <moveBullets+0xc2>
		for (int j = 0; j < Comet.in_play; j++){
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	e03c      	b.n	8003c3c <moveBullets+0x94>
			if(AMMO_X(i) >= COMET_X(j) && AMMO_X(i) < COMET_X(j) + COMET_SIZE(j)){
 8003bc2:	4a31      	ldr	r2, [pc, #196]	; (8003c88 <moveBullets+0xe0>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4413      	add	r3, r2
 8003bca:	789a      	ldrb	r2, [r3, #2]
 8003bcc:	492f      	ldr	r1, [pc, #188]	; (8003c8c <moveBullets+0xe4>)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	785b      	ldrb	r3, [r3, #1]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d32d      	bcc.n	8003c36 <moveBullets+0x8e>
 8003bda:	4a2b      	ldr	r2, [pc, #172]	; (8003c88 <moveBullets+0xe0>)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	789b      	ldrb	r3, [r3, #2]
 8003be4:	4619      	mov	r1, r3
 8003be6:	4a29      	ldr	r2, [pc, #164]	; (8003c8c <moveBullets+0xe4>)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	785b      	ldrb	r3, [r3, #1]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	4a26      	ldr	r2, [pc, #152]	; (8003c8c <moveBullets+0xe4>)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003bfe:	4403      	add	r3, r0
 8003c00:	4299      	cmp	r1, r3
 8003c02:	da18      	bge.n	8003c36 <moveBullets+0x8e>
				if (AMMO_Y(i) <= COMET_Y(j) + COMET_SIZE(j) - 1){
 8003c04:	4a21      	ldr	r2, [pc, #132]	; (8003c8c <moveBullets+0xe4>)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	789b      	ldrb	r3, [r3, #2]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <moveBullets+0xe4>)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003c1c:	18ca      	adds	r2, r1, r3
 8003c1e:	491a      	ldr	r1, [pc, #104]	; (8003c88 <moveBullets+0xe0>)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	440b      	add	r3, r1
 8003c26:	78db      	ldrb	r3, [r3, #3]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	dd04      	ble.n	8003c36 <moveBullets+0x8e>
					hitComet(i,j);
 8003c2c:	6839      	ldr	r1, [r7, #0]
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fab8 	bl	80041a4 <hitComet>
					continue;
 8003c34:	bf00      	nop
		for (int j = 0; j < Comet.in_play; j++){
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <moveBullets+0xe4>)
 8003c3e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c42:	461a      	mov	r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	4293      	cmp	r3, r2
 8003c48:	dbbb      	blt.n	8003bc2 <moveBullets+0x1a>
				}
			}

		}
		AMMO_Y(i)--;
 8003c4a:	4a0f      	ldr	r2, [pc, #60]	; (8003c88 <moveBullets+0xe0>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4413      	add	r3, r2
 8003c52:	78db      	ldrb	r3, [r3, #3]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b2d9      	uxtb	r1, r3
 8003c58:	4a0b      	ldr	r2, [pc, #44]	; (8003c88 <moveBullets+0xe0>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	4413      	add	r3, r2
 8003c60:	460a      	mov	r2, r1
 8003c62:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < ammo.in_play; i++){
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3301      	adds	r3, #1
 8003c68:	607b      	str	r3, [r7, #4]
 8003c6a:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <moveBullets+0xe0>)
 8003c6c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003c70:	461a      	mov	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4293      	cmp	r3, r2
 8003c76:	dba1      	blt.n	8003bbc <moveBullets+0x14>
				AMMO_Y(j) = AMMO_Y(j+1);
			}
			ammo.in_play--;
		}
	}
	displayAmmo(RED);
 8003c78:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003c7c:	f000 fb62 	bl	8004344 <displayAmmo>
}
 8003c80:	bf00      	nop
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20002174 	.word	0x20002174
 8003c8c:	20002194 	.word	0x20002194

08003c90 <moveEnemyBullets>:

void moveEnemyBullets(void){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
    if (!in_multiplayer){
 8003c96:	4b57      	ldr	r3, [pc, #348]	; (8003df4 <moveEnemyBullets+0x164>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80a6 	beq.w	8003dec <moveEnemyBullets+0x15c>
        //QD << "not multiplayer";  // change to uart debug
        return;
    }
    displayAmmo(DARK_GREY);
 8003ca0:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003ca4:	f000 fb4e 	bl	8004344 <displayAmmo>
    for(int i = 0; i < enemy_ammo.in_play; i++){
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	e091      	b.n	8003dd2 <moveEnemyBullets+0x142>
        if(E_AMMO_X(i) <= SPACESHIP_X_BOUND(+) && E_AMMO_X(i) >= SPACESHIP_X_BOUND(-)){
 8003cae:	4a52      	ldr	r2, [pc, #328]	; (8003df8 <moveEnemyBullets+0x168>)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	4413      	add	r3, r2
 8003cb6:	789b      	ldrb	r3, [r3, #2]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4b50      	ldr	r3, [pc, #320]	; (8003dfc <moveEnemyBullets+0x16c>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	3302      	adds	r3, #2
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	dc45      	bgt.n	8003d50 <moveEnemyBullets+0xc0>
 8003cc4:	4a4c      	ldr	r2, [pc, #304]	; (8003df8 <moveEnemyBullets+0x168>)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	789b      	ldrb	r3, [r3, #2]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4b4a      	ldr	r3, [pc, #296]	; (8003dfc <moveEnemyBullets+0x16c>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	3b02      	subs	r3, #2
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	db3a      	blt.n	8003d50 <moveEnemyBullets+0xc0>
            if (E_AMMO_Y(i) >= SPACESHIP_Y_BOUND && hit == 0){
 8003cda:	4a47      	ldr	r2, [pc, #284]	; (8003df8 <moveEnemyBullets+0x168>)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	78db      	ldrb	r3, [r3, #3]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b45      	ldr	r3, [pc, #276]	; (8003dfc <moveEnemyBullets+0x16c>)
 8003ce8:	785b      	ldrb	r3, [r3, #1]
 8003cea:	3b02      	subs	r3, #2
 8003cec:	429a      	cmp	r2, r3
 8003cee:	db2f      	blt.n	8003d50 <moveEnemyBullets+0xc0>
 8003cf0:	4b43      	ldr	r3, [pc, #268]	; (8003e00 <moveEnemyBullets+0x170>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d12b      	bne.n	8003d50 <moveEnemyBullets+0xc0>
                beenHit();
 8003cf8:	f000 fca4 	bl	8004644 <beenHit>
                for(int j = i; j < MAX_BULLETS - 1; j++){
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	e01a      	b.n	8003d38 <moveEnemyBullets+0xa8>
                	E_AMMO_X(j) = E_AMMO_X(j+1);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	3301      	adds	r3, #1
 8003d06:	4a3c      	ldr	r2, [pc, #240]	; (8003df8 <moveEnemyBullets+0x168>)
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	4413      	add	r3, r2
 8003d0c:	7899      	ldrb	r1, [r3, #2]
 8003d0e:	4a3a      	ldr	r2, [pc, #232]	; (8003df8 <moveEnemyBullets+0x168>)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	460a      	mov	r2, r1
 8003d18:	709a      	strb	r2, [r3, #2]
                	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	4a36      	ldr	r2, [pc, #216]	; (8003df8 <moveEnemyBullets+0x168>)
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	78d9      	ldrb	r1, [r3, #3]
 8003d26:	4a34      	ldr	r2, [pc, #208]	; (8003df8 <moveEnemyBullets+0x168>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4413      	add	r3, r2
 8003d2e:	460a      	mov	r2, r1
 8003d30:	70da      	strb	r2, [r3, #3]
                for(int j = i; j < MAX_BULLETS - 1; j++){
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	3301      	adds	r3, #1
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	dde1      	ble.n	8003d02 <moveEnemyBullets+0x72>
                }
                enemy_ammo.in_play--;
 8003d3e:	4b2e      	ldr	r3, [pc, #184]	; (8003df8 <moveEnemyBullets+0x168>)
 8003d40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	b25a      	sxtb	r2, r3
 8003d4c:	4b2a      	ldr	r3, [pc, #168]	; (8003df8 <moveEnemyBullets+0x168>)
 8003d4e:	705a      	strb	r2, [r3, #1]
            }
        }
        E_AMMO_Y(i)++;
 8003d50:	4a29      	ldr	r2, [pc, #164]	; (8003df8 <moveEnemyBullets+0x168>)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	78db      	ldrb	r3, [r3, #3]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	b2d9      	uxtb	r1, r3
 8003d5e:	4a26      	ldr	r2, [pc, #152]	; (8003df8 <moveEnemyBullets+0x168>)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	4413      	add	r3, r2
 8003d66:	460a      	mov	r2, r1
 8003d68:	70da      	strb	r2, [r3, #3]
        if (E_AMMO_Y(i) > SCREEN_HEIGHT - 1){
 8003d6a:	4a23      	ldr	r2, [pc, #140]	; (8003df8 <moveEnemyBullets+0x168>)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4413      	add	r3, r2
 8003d72:	78db      	ldrb	r3, [r3, #3]
 8003d74:	2b3b      	cmp	r3, #59	; 0x3b
 8003d76:	d929      	bls.n	8003dcc <moveEnemyBullets+0x13c>
            for(int j = i; j < MAX_BULLETS - 1; j++){
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	e01a      	b.n	8003db4 <moveEnemyBullets+0x124>
            	E_AMMO_X(j) = E_AMMO_X(j+1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3301      	adds	r3, #1
 8003d82:	4a1d      	ldr	r2, [pc, #116]	; (8003df8 <moveEnemyBullets+0x168>)
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4413      	add	r3, r2
 8003d88:	7899      	ldrb	r1, [r3, #2]
 8003d8a:	4a1b      	ldr	r2, [pc, #108]	; (8003df8 <moveEnemyBullets+0x168>)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	4413      	add	r3, r2
 8003d92:	460a      	mov	r2, r1
 8003d94:	709a      	strb	r2, [r3, #2]
            	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <moveEnemyBullets+0x168>)
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	4413      	add	r3, r2
 8003da0:	78d9      	ldrb	r1, [r3, #3]
 8003da2:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <moveEnemyBullets+0x168>)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	4413      	add	r3, r2
 8003daa:	460a      	mov	r2, r1
 8003dac:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_BULLETS - 1; j++){
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3301      	adds	r3, #1
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	dde1      	ble.n	8003d7e <moveEnemyBullets+0xee>
            }
            enemy_ammo.in_play--;
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <moveEnemyBullets+0x168>)
 8003dbc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	b25a      	sxtb	r2, r3
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <moveEnemyBullets+0x168>)
 8003dca:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < enemy_ammo.in_play; i++){
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <moveEnemyBullets+0x168>)
 8003dd4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	f6ff af66 	blt.w	8003cae <moveEnemyBullets+0x1e>
        }
    }
    displayAmmo(LIGHT_BLUE);
 8003de2:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003de6:	f000 faad 	bl	8004344 <displayAmmo>
 8003dea:	e000      	b.n	8003dee <moveEnemyBullets+0x15e>
        return;
 8003dec:	bf00      	nop
}
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000051 	.word	0x20000051
 8003df8:	20002184 	.word	0x20002184
 8003dfc:	2000004c 	.word	0x2000004c
 8003e00:	20001eeb 	.word	0x20001eeb

08003e04 <moveComets>:

void moveComets(){
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
	displayComets(DARK_GREY);
 8003e0a:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003e0e:	f000 faf3 	bl	80043f8 <displayComets>
	for (int i = 0; i<Comet.in_play; i++){
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	e0eb      	b.n	8003ff0 <moveComets+0x1ec>
		for(int j = 0; j < COMET_SIZE(i); j++){
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	e05b      	b.n	8003ed6 <moveComets+0xd2>
			if(COMET_X(i) + j <= SPACESHIP_X_BOUND(+) && COMET_X(i) + j >= SPACESHIP_X_BOUND(-)){
 8003e1e:	4a7c      	ldr	r2, [pc, #496]	; (8004010 <moveComets+0x20c>)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	785b      	ldrb	r3, [r3, #1]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	441a      	add	r2, r3
 8003e2e:	4b79      	ldr	r3, [pc, #484]	; (8004014 <moveComets+0x210>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	3302      	adds	r3, #2
 8003e34:	429a      	cmp	r2, r3
 8003e36:	dc4b      	bgt.n	8003ed0 <moveComets+0xcc>
 8003e38:	4a75      	ldr	r2, [pc, #468]	; (8004010 <moveComets+0x20c>)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	785b      	ldrb	r3, [r3, #1]
 8003e42:	461a      	mov	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	441a      	add	r2, r3
 8003e48:	4b72      	ldr	r3, [pc, #456]	; (8004014 <moveComets+0x210>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	3b02      	subs	r3, #2
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	db3e      	blt.n	8003ed0 <moveComets+0xcc>
				if(powerUp == 2 && COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND){
 8003e52:	4b71      	ldr	r3, [pc, #452]	; (8004018 <moveComets+0x214>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d11d      	bne.n	8003e96 <moveComets+0x92>
 8003e5a:	4a6d      	ldr	r2, [pc, #436]	; (8004010 <moveComets+0x20c>)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	789b      	ldrb	r3, [r3, #2]
 8003e64:	4619      	mov	r1, r3
 8003e66:	4a6a      	ldr	r2, [pc, #424]	; (8004010 <moveComets+0x20c>)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003e72:	18ca      	adds	r2, r1, r3
 8003e74:	4b67      	ldr	r3, [pc, #412]	; (8004014 <moveComets+0x210>)
 8003e76:	785b      	ldrb	r3, [r3, #1]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	db0b      	blt.n	8003e96 <moveComets+0x92>
					hitComet(420,i);
 8003e7e:	68f9      	ldr	r1, [r7, #12]
 8003e80:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003e84:	f000 f98e 	bl	80041a4 <hitComet>
					displayPowerup(DARK_GREY);
 8003e88:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003e8c:	f000 fc3e 	bl	800470c <displayPowerup>
					powerUp = 0;
 8003e90:	4b61      	ldr	r3, [pc, #388]	; (8004018 <moveComets+0x214>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	701a      	strb	r2, [r3, #0]
				}
                if (COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND && hit == 0){
 8003e96:	4a5e      	ldr	r2, [pc, #376]	; (8004010 <moveComets+0x20c>)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	789b      	ldrb	r3, [r3, #2]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4a5b      	ldr	r2, [pc, #364]	; (8004010 <moveComets+0x20c>)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003eae:	18ca      	adds	r2, r1, r3
 8003eb0:	4b58      	ldr	r3, [pc, #352]	; (8004014 <moveComets+0x210>)
 8003eb2:	785b      	ldrb	r3, [r3, #1]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	db0a      	blt.n	8003ed0 <moveComets+0xcc>
 8003eba:	4b58      	ldr	r3, [pc, #352]	; (800401c <moveComets+0x218>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <moveComets+0xcc>
                    hitComet(420,i);
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003ec8:	f000 f96c 	bl	80041a4 <hitComet>
                    beenHit();
 8003ecc:	f000 fbba 	bl	8004644 <beenHit>
		for(int j = 0; j < COMET_SIZE(i); j++){
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	4a4e      	ldr	r2, [pc, #312]	; (8004010 <moveComets+0x20c>)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	db99      	blt.n	8003e1e <moveComets+0x1a>
                }
            }
        }
        if(powerUp == 1 && SpaceShip.x >= COMET_X(i) && SpaceShip.x <= COMET_X(i) + COMET_SIZE(i)){
 8003eea:	4b4b      	ldr	r3, [pc, #300]	; (8004018 <moveComets+0x214>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d130      	bne.n	8003f54 <moveComets+0x150>
 8003ef2:	4b48      	ldr	r3, [pc, #288]	; (8004014 <moveComets+0x210>)
 8003ef4:	781a      	ldrb	r2, [r3, #0]
 8003ef6:	4946      	ldr	r1, [pc, #280]	; (8004010 <moveComets+0x20c>)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	785b      	ldrb	r3, [r3, #1]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d327      	bcc.n	8003f54 <moveComets+0x150>
 8003f04:	4b43      	ldr	r3, [pc, #268]	; (8004014 <moveComets+0x210>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4a41      	ldr	r2, [pc, #260]	; (8004010 <moveComets+0x20c>)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	785b      	ldrb	r3, [r3, #1]
 8003f14:	4618      	mov	r0, r3
 8003f16:	4a3e      	ldr	r2, [pc, #248]	; (8004010 <moveComets+0x20c>)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003f22:	4403      	add	r3, r0
 8003f24:	4299      	cmp	r1, r3
 8003f26:	dc15      	bgt.n	8003f54 <moveComets+0x150>
        	hitComet(420,i);
 8003f28:	68f9      	ldr	r1, [r7, #12]
 8003f2a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003f2e:	f000 f939 	bl	80041a4 <hitComet>
        	if(powerUp_delay == 0){
 8003f32:	4b3b      	ldr	r3, [pc, #236]	; (8004020 <moveComets+0x21c>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <moveComets+0x144>
        		displayPowerup(DARK_GREY);
 8003f3a:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003f3e:	f000 fbe5 	bl	800470c <displayPowerup>
        		powerUp = 0;
 8003f42:	4b35      	ldr	r3, [pc, #212]	; (8004018 <moveComets+0x214>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	701a      	strb	r2, [r3, #0]

        	}
        	powerUp_delay--;
 8003f48:	4b35      	ldr	r3, [pc, #212]	; (8004020 <moveComets+0x21c>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	4b33      	ldr	r3, [pc, #204]	; (8004020 <moveComets+0x21c>)
 8003f52:	701a      	strb	r2, [r3, #0]
        }
        COMET_Y(i)++;
 8003f54:	4a2e      	ldr	r2, [pc, #184]	; (8004010 <moveComets+0x20c>)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	789b      	ldrb	r3, [r3, #2]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	b2d9      	uxtb	r1, r3
 8003f62:	4a2b      	ldr	r2, [pc, #172]	; (8004010 <moveComets+0x20c>)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	460a      	mov	r2, r1
 8003f6c:	709a      	strb	r2, [r3, #2]
        if (COMET_Y(i) > SCREEN_HEIGHT - 1){
 8003f6e:	4a28      	ldr	r2, [pc, #160]	; (8004010 <moveComets+0x20c>)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	789b      	ldrb	r3, [r3, #2]
 8003f78:	2b3b      	cmp	r3, #59	; 0x3b
 8003f7a:	d936      	bls.n	8003fea <moveComets+0x1e6>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	607b      	str	r3, [r7, #4]
 8003f80:	e027      	b.n	8003fd2 <moveComets+0x1ce>
            	COMET_X(j) = COMET_X(j+1);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3301      	adds	r3, #1
 8003f86:	4a22      	ldr	r2, [pc, #136]	; (8004010 <moveComets+0x20c>)
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	7859      	ldrb	r1, [r3, #1]
 8003f8e:	4a20      	ldr	r2, [pc, #128]	; (8004010 <moveComets+0x20c>)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	460a      	mov	r2, r1
 8003f98:	705a      	strb	r2, [r3, #1]
            	COMET_Y(j) = COMET_Y(j+1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	4a1c      	ldr	r2, [pc, #112]	; (8004010 <moveComets+0x20c>)
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	7899      	ldrb	r1, [r3, #2]
 8003fa6:	4a1a      	ldr	r2, [pc, #104]	; (8004010 <moveComets+0x20c>)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	460a      	mov	r2, r1
 8003fb0:	709a      	strb	r2, [r3, #2]
                COMET_SIZE(j) = COMET_SIZE(j+1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	4a16      	ldr	r2, [pc, #88]	; (8004010 <moveComets+0x20c>)
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003fc0:	4a13      	ldr	r2, [pc, #76]	; (8004010 <moveComets+0x20c>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	460a      	mov	r2, r1
 8003fca:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	ddd4      	ble.n	8003f82 <moveComets+0x17e>
            }
            Comet.in_play--;
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <moveComets+0x20c>)
 8003fda:	f993 3000 	ldrsb.w	r3, [r3]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	b25a      	sxtb	r2, r3
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <moveComets+0x20c>)
 8003fe8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<Comet.in_play; i++){
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3301      	adds	r3, #1
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	4b07      	ldr	r3, [pc, #28]	; (8004010 <moveComets+0x20c>)
 8003ff2:	f993 3000 	ldrsb.w	r3, [r3]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	f6ff af0c 	blt.w	8003e18 <moveComets+0x14>
        }
    }
    displayComets(GREY);
 8004000:	f249 6096 	movw	r0, #38550	; 0x9696
 8004004:	f000 f9f8 	bl	80043f8 <displayComets>
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20002194 	.word	0x20002194
 8004014:	2000004c 	.word	0x2000004c
 8004018:	200021de 	.word	0x200021de
 800401c:	20001eeb 	.word	0x20001eeb
 8004020:	200021df 	.word	0x200021df

08004024 <moveStars>:

void moveStars(){
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
	displayStars(DARK_GREY);
 800402a:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800402e:	f000 f959 	bl	80042e4 <displayStars>
    for (int i = 0; i<Star.in_play; i++){
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
 8004036:	e040      	b.n	80040ba <moveStars+0x96>
    	STAR_Y(i)++;
 8004038:	4a27      	ldr	r2, [pc, #156]	; (80040d8 <moveStars+0xb4>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4413      	add	r3, r2
 8004040:	789b      	ldrb	r3, [r3, #2]
 8004042:	3301      	adds	r3, #1
 8004044:	b2d9      	uxtb	r1, r3
 8004046:	4a24      	ldr	r2, [pc, #144]	; (80040d8 <moveStars+0xb4>)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	4413      	add	r3, r2
 800404e:	460a      	mov	r2, r1
 8004050:	709a      	strb	r2, [r3, #2]
        if (STAR_Y(i) > SCREEN_HEIGHT - 4){
 8004052:	4a21      	ldr	r2, [pc, #132]	; (80040d8 <moveStars+0xb4>)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	4413      	add	r3, r2
 800405a:	789b      	ldrb	r3, [r3, #2]
 800405c:	2b38      	cmp	r3, #56	; 0x38
 800405e:	d929      	bls.n	80040b4 <moveStars+0x90>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	e01a      	b.n	800409c <moveStars+0x78>
            	STAR_X(j) = STAR_X(j+1);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	3301      	adds	r3, #1
 800406a:	4a1b      	ldr	r2, [pc, #108]	; (80040d8 <moveStars+0xb4>)
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	7859      	ldrb	r1, [r3, #1]
 8004072:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <moveStars+0xb4>)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	460a      	mov	r2, r1
 800407c:	705a      	strb	r2, [r3, #1]
            	STAR_Y(j) = STAR_Y(j+1);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	3301      	adds	r3, #1
 8004082:	4a15      	ldr	r2, [pc, #84]	; (80040d8 <moveStars+0xb4>)
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	7899      	ldrb	r1, [r3, #2]
 800408a:	4a13      	ldr	r2, [pc, #76]	; (80040d8 <moveStars+0xb4>)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4413      	add	r3, r2
 8004092:	460a      	mov	r2, r1
 8004094:	709a      	strb	r2, [r3, #2]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	3301      	adds	r3, #1
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b08      	cmp	r3, #8
 80040a0:	dde1      	ble.n	8004066 <moveStars+0x42>
            }
            Star.in_play--;
 80040a2:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <moveStars+0xb4>)
 80040a4:	f993 3000 	ldrsb.w	r3, [r3]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	b25a      	sxtb	r2, r3
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <moveStars+0xb4>)
 80040b2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Star.in_play; i++){
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3301      	adds	r3, #1
 80040b8:	607b      	str	r3, [r7, #4]
 80040ba:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <moveStars+0xb4>)
 80040bc:	f993 3000 	ldrsb.w	r3, [r3]
 80040c0:	461a      	mov	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4293      	cmp	r3, r2
 80040c6:	dbb7      	blt.n	8004038 <moveStars+0x14>
        }
    }
    displayStars(YELLOW);
 80040c8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80040cc:	f000 f90a 	bl	80042e4 <displayStars>
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	200021c0 	.word	0x200021c0

080040dc <moveSpaceship>:

void moveSpaceship(int direction){
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
	displaySpaceShip(DARK_GREY);
 80040e4:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80040e8:	f000 f9c6 	bl	8004478 <displaySpaceShip>
	if(powerUp > 0){
 80040ec:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <moveSpaceship+0xbc>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <moveSpaceship+0x20>
		displayPowerup(DARK_GREY);
 80040f4:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80040f8:	f000 fb08 	bl	800470c <displayPowerup>
	}
    if(direction < 0){
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	da22      	bge.n	8004148 <moveSpaceship+0x6c>
        SpaceShip.x--;
 8004102:	4b26      	ldr	r3, [pc, #152]	; (800419c <moveSpaceship+0xc0>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	3b01      	subs	r3, #1
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4b24      	ldr	r3, [pc, #144]	; (800419c <moveSpaceship+0xc0>)
 800410c:	701a      	strb	r2, [r3, #0]
        if(SpaceShip.x < SPACESHIP_WIDTH/2) {
 800410e:	4b23      	ldr	r3, [pc, #140]	; (800419c <moveSpaceship+0xc0>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d802      	bhi.n	800411c <moveSpaceship+0x40>
        	SpaceShip.x = (SPACESHIP_WIDTH/2);
 8004116:	4b21      	ldr	r3, [pc, #132]	; (800419c <moveSpaceship+0xc0>)
 8004118:	2202      	movs	r2, #2
 800411a:	701a      	strb	r2, [r3, #0]
        }
        displaySpaceShip(spaceshipCurrentColor);
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <moveSpaceship+0xc4>)
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f000 f9a9 	bl	8004478 <displaySpaceShip>
        if(powerUp == 1){
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <moveSpaceship+0xbc>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d103      	bne.n	8004136 <moveSpaceship+0x5a>
        	displayPowerup(RED);
 800412e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004132:	f000 faeb 	bl	800470c <displayPowerup>
        }
        if(powerUp == 2){
 8004136:	4b18      	ldr	r3, [pc, #96]	; (8004198 <moveSpaceship+0xbc>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d127      	bne.n	800418e <moveSpaceship+0xb2>
        	displayPowerup(LIGHT_BLUE);
 800413e:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8004142:	f000 fae3 	bl	800470c <displayPowerup>
        }
        return;
 8004146:	e022      	b.n	800418e <moveSpaceship+0xb2>
    }
    SpaceShip.x++;
 8004148:	4b14      	ldr	r3, [pc, #80]	; (800419c <moveSpaceship+0xc0>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	b2da      	uxtb	r2, r3
 8004150:	4b12      	ldr	r3, [pc, #72]	; (800419c <moveSpaceship+0xc0>)
 8004152:	701a      	strb	r2, [r3, #0]
    if(SpaceShip.x > SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1) {
 8004154:	4b11      	ldr	r3, [pc, #68]	; (800419c <moveSpaceship+0xc0>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b4d      	cmp	r3, #77	; 0x4d
 800415a:	d902      	bls.n	8004162 <moveSpaceship+0x86>
    	SpaceShip.x = SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1;
 800415c:	4b0f      	ldr	r3, [pc, #60]	; (800419c <moveSpaceship+0xc0>)
 800415e:	224d      	movs	r2, #77	; 0x4d
 8004160:	701a      	strb	r2, [r3, #0]
    }
    displaySpaceShip(spaceshipCurrentColor);
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <moveSpaceship+0xc4>)
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f986 	bl	8004478 <displaySpaceShip>
    if(powerUp == 1){
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <moveSpaceship+0xbc>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d103      	bne.n	800417c <moveSpaceship+0xa0>
    	displayPowerup(RED);
 8004174:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004178:	f000 fac8 	bl	800470c <displayPowerup>
    }
	if(powerUp == 2){
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <moveSpaceship+0xbc>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d105      	bne.n	8004190 <moveSpaceship+0xb4>
		displayPowerup(LIGHT_BLUE);
 8004184:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8004188:	f000 fac0 	bl	800470c <displayPowerup>
 800418c:	e000      	b.n	8004190 <moveSpaceship+0xb4>
        return;
 800418e:	bf00      	nop
	}
}
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	200021de 	.word	0x200021de
 800419c:	2000004c 	.word	0x2000004c
 80041a0:	2000004e 	.word	0x2000004e

080041a4 <hitComet>:

void hitComet(int bul,int com){
 80041a4:	b590      	push	{r4, r7, lr}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
    money += COMET_COINS(com);
 80041ae:	4a4a      	ldr	r2, [pc, #296]	; (80042d8 <hitComet+0x134>)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80041ba:	461a      	mov	r2, r3
 80041bc:	4b47      	ldr	r3, [pc, #284]	; (80042dc <hitComet+0x138>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4413      	add	r3, r2
 80041c2:	4a46      	ldr	r2, [pc, #280]	; (80042dc <hitComet+0x138>)
 80041c4:	6013      	str	r3, [r2, #0]
    Displ_FillArea(COMET_X(com) * 4, COMET_Y(com) * 4, COMET_SIZE(com) * 4, COMET_SIZE(com) * 4, DARK_GREY);
 80041c6:	4a44      	ldr	r2, [pc, #272]	; (80042d8 <hitComet+0x134>)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	785b      	ldrb	r3, [r3, #1]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	b298      	uxth	r0, r3
 80041d6:	4a40      	ldr	r2, [pc, #256]	; (80042d8 <hitComet+0x134>)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	789b      	ldrb	r3, [r3, #2]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	b299      	uxth	r1, r3
 80041e6:	4a3c      	ldr	r2, [pc, #240]	; (80042d8 <hitComet+0x134>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	4c37      	ldr	r4, [pc, #220]	; (80042d8 <hitComet+0x134>)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4423      	add	r3, r4
 8004200:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004204:	b29b      	uxth	r3, r3
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	b29b      	uxth	r3, r3
 800420a:	f642 442c 	movw	r4, #11308	; 0x2c2c
 800420e:	9400      	str	r4, [sp, #0]
 8004210:	f000 ff2e 	bl	8005070 <Displ_FillArea>
    if(bul != 420){
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800421a:	d022      	beq.n	8004262 <hitComet+0xbe>
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e01a      	b.n	8004258 <hitComet+0xb4>
        	AMMO_X(j)= AMMO_X(j+1);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3301      	adds	r3, #1
 8004226:	4a2e      	ldr	r2, [pc, #184]	; (80042e0 <hitComet+0x13c>)
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	4413      	add	r3, r2
 800422c:	7899      	ldrb	r1, [r3, #2]
 800422e:	4a2c      	ldr	r2, [pc, #176]	; (80042e0 <hitComet+0x13c>)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	4413      	add	r3, r2
 8004236:	460a      	mov	r2, r1
 8004238:	709a      	strb	r2, [r3, #2]
        	AMMO_Y(j) = AMMO_Y(j+1);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3301      	adds	r3, #1
 800423e:	4a28      	ldr	r2, [pc, #160]	; (80042e0 <hitComet+0x13c>)
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	4413      	add	r3, r2
 8004244:	78d9      	ldrb	r1, [r3, #3]
 8004246:	4a26      	ldr	r2, [pc, #152]	; (80042e0 <hitComet+0x13c>)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4413      	add	r3, r2
 800424e:	460a      	mov	r2, r1
 8004250:	70da      	strb	r2, [r3, #3]
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3301      	adds	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b04      	cmp	r3, #4
 800425c:	dde1      	ble.n	8004222 <hitComet+0x7e>
        }
        powerups();
 800425e:	f000 fa11 	bl	8004684 <powerups>
    }

    for(int j = com; j < MAX_COMETS - 1; j++){
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	e027      	b.n	80042b8 <hitComet+0x114>
    	COMET_X(j) = COMET_X(j+1);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	3301      	adds	r3, #1
 800426c:	4a1a      	ldr	r2, [pc, #104]	; (80042d8 <hitComet+0x134>)
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	7859      	ldrb	r1, [r3, #1]
 8004274:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <hitComet+0x134>)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	460a      	mov	r2, r1
 800427e:	705a      	strb	r2, [r3, #1]
    	COMET_Y(j) = COMET_Y(j+1);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	3301      	adds	r3, #1
 8004284:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <hitComet+0x134>)
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	7899      	ldrb	r1, [r3, #2]
 800428c:	4a12      	ldr	r2, [pc, #72]	; (80042d8 <hitComet+0x134>)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	460a      	mov	r2, r1
 8004296:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(j) = COMET_SIZE(j+1);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	3301      	adds	r3, #1
 800429c:	4a0e      	ldr	r2, [pc, #56]	; (80042d8 <hitComet+0x134>)
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80042a6:	4a0c      	ldr	r2, [pc, #48]	; (80042d8 <hitComet+0x134>)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	460a      	mov	r2, r1
 80042b0:	70da      	strb	r2, [r3, #3]
    for(int j = com; j < MAX_COMETS - 1; j++){
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	3301      	adds	r3, #1
 80042b6:	60bb      	str	r3, [r7, #8]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	ddd4      	ble.n	8004268 <hitComet+0xc4>
    }
    Comet.in_play--;
 80042be:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <hitComet+0x134>)
 80042c0:	f993 3000 	ldrsb.w	r3, [r3]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	b25a      	sxtb	r2, r3
 80042cc:	4b02      	ldr	r3, [pc, #8]	; (80042d8 <hitComet+0x134>)
 80042ce:	701a      	strb	r2, [r3, #0]
}
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd90      	pop	{r4, r7, pc}
 80042d8:	20002194 	.word	0x20002194
 80042dc:	200021d8 	.word	0x200021d8
 80042e0:	20002174 	.word	0x20002174

080042e4 <displayStars>:




void displayStars(uint16_t color){
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	4603      	mov	r3, r0
 80042ec:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < Star.in_play; i++){
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	e018      	b.n	8004326 <displayStars+0x42>
    	Displ_FillArea(STAR_X(i)* 4, STAR_Y(i) * 4, 4, 4, color);
 80042f4:	4a12      	ldr	r2, [pc, #72]	; (8004340 <displayStars+0x5c>)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	4413      	add	r3, r2
 80042fc:	785b      	ldrb	r3, [r3, #1]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	b298      	uxth	r0, r3
 8004304:	4a0e      	ldr	r2, [pc, #56]	; (8004340 <displayStars+0x5c>)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4413      	add	r3, r2
 800430c:	789b      	ldrb	r3, [r3, #2]
 800430e:	b29b      	uxth	r3, r3
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	b299      	uxth	r1, r3
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	2304      	movs	r3, #4
 800431a:	2204      	movs	r2, #4
 800431c:	f000 fea8 	bl	8005070 <Displ_FillArea>
    for(int i = 0; i < Star.in_play; i++){
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3301      	adds	r3, #1
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	4b06      	ldr	r3, [pc, #24]	; (8004340 <displayStars+0x5c>)
 8004328:	f993 3000 	ldrsb.w	r3, [r3]
 800432c:	461a      	mov	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4293      	cmp	r3, r2
 8004332:	dbdf      	blt.n	80042f4 <displayStars+0x10>
    }
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200021c0 	.word	0x200021c0

08004344 <displayAmmo>:

void displayAmmo(uint16_t color){
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af02      	add	r7, sp, #8
 800434a:	4603      	mov	r3, r0
 800434c:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < ammo.in_play; i++){
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	e018      	b.n	8004386 <displayAmmo+0x42>
    	Displ_FillArea(AMMO_X(i) * 4, AMMO_Y(i) * 4, 4, 4, color);
 8004354:	4a25      	ldr	r2, [pc, #148]	; (80043ec <displayAmmo+0xa8>)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	4413      	add	r3, r2
 800435c:	789b      	ldrb	r3, [r3, #2]
 800435e:	b29b      	uxth	r3, r3
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	b298      	uxth	r0, r3
 8004364:	4a21      	ldr	r2, [pc, #132]	; (80043ec <displayAmmo+0xa8>)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	78db      	ldrb	r3, [r3, #3]
 800436e:	b29b      	uxth	r3, r3
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	b299      	uxth	r1, r3
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	2304      	movs	r3, #4
 800437a:	2204      	movs	r2, #4
 800437c:	f000 fe78 	bl	8005070 <Displ_FillArea>
    for(int i = 0; i < ammo.in_play; i++){
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3301      	adds	r3, #1
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	4b19      	ldr	r3, [pc, #100]	; (80043ec <displayAmmo+0xa8>)
 8004388:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800438c:	461a      	mov	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4293      	cmp	r3, r2
 8004392:	dbdf      	blt.n	8004354 <displayAmmo+0x10>
    }
    if(in_multiplayer){
 8004394:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <displayAmmo+0xac>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d023      	beq.n	80043e4 <displayAmmo+0xa0>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 800439c:	2300      	movs	r3, #0
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	e019      	b.n	80043d6 <displayAmmo+0x92>
            Displ_FillArea(E_AMMO_X(i) * 4, E_AMMO_Y(i) * 4, 4, 4, LIGHT_BLUE);
 80043a2:	4a14      	ldr	r2, [pc, #80]	; (80043f4 <displayAmmo+0xb0>)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	4413      	add	r3, r2
 80043aa:	789b      	ldrb	r3, [r3, #2]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	b298      	uxth	r0, r3
 80043b2:	4a10      	ldr	r2, [pc, #64]	; (80043f4 <displayAmmo+0xb0>)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4413      	add	r3, r2
 80043ba:	78db      	ldrb	r3, [r3, #3]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	b299      	uxth	r1, r3
 80043c2:	f24f 73db 	movw	r3, #63451	; 0xf7db
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	2304      	movs	r3, #4
 80043ca:	2204      	movs	r2, #4
 80043cc:	f000 fe50 	bl	8005070 <Displ_FillArea>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	3301      	adds	r3, #1
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <displayAmmo+0xb0>)
 80043d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80043dc:	461a      	mov	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4293      	cmp	r3, r2
 80043e2:	dbde      	blt.n	80043a2 <displayAmmo+0x5e>
        }
    }
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20002174 	.word	0x20002174
 80043f0:	20000051 	.word	0x20000051
 80043f4:	20002184 	.word	0x20002184

080043f8 <displayComets>:

void displayComets(uint16_t color){
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	4603      	mov	r3, r0
 8004400:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < Comet.in_play; i++){
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e029      	b.n	800445c <displayComets+0x64>
        Displ_FillArea(COMET_X(i) * 4, COMET_Y(i)  * 4, COMET_SIZE(i) * 4, COMET_SIZE(i) * 4, color);
 8004408:	4a1a      	ldr	r2, [pc, #104]	; (8004474 <displayComets+0x7c>)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	b29b      	uxth	r3, r3
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	b298      	uxth	r0, r3
 8004418:	4a16      	ldr	r2, [pc, #88]	; (8004474 <displayComets+0x7c>)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	789b      	ldrb	r3, [r3, #2]
 8004422:	b29b      	uxth	r3, r3
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	b299      	uxth	r1, r3
 8004428:	4a12      	ldr	r2, [pc, #72]	; (8004474 <displayComets+0x7c>)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004434:	b29b      	uxth	r3, r3
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	b29a      	uxth	r2, r3
 800443a:	4c0e      	ldr	r4, [pc, #56]	; (8004474 <displayComets+0x7c>)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4423      	add	r3, r4
 8004442:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004446:	b29b      	uxth	r3, r3
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	b29c      	uxth	r4, r3
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	4623      	mov	r3, r4
 8004452:	f000 fe0d 	bl	8005070 <Displ_FillArea>
    for (int i = 0; i < Comet.in_play; i++){
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3301      	adds	r3, #1
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <displayComets+0x7c>)
 800445e:	f993 3000 	ldrsb.w	r3, [r3]
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4293      	cmp	r3, r2
 8004468:	dbce      	blt.n	8004408 <displayComets+0x10>
    }
}
 800446a:	bf00      	nop
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	bd90      	pop	{r4, r7, pc}
 8004474:	20002194 	.word	0x20002194

08004478 <displaySpaceShip>:

void displaySpaceShip(uint16_t color){
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af02      	add	r7, sp, #8
 800447e:	4603      	mov	r3, r0
 8004480:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(SpaceShip.x*4 - 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8004482:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <displaySpaceShip+0x78>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	3b02      	subs	r3, #2
 8004488:	b29b      	uxth	r3, r3
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	b298      	uxth	r0, r3
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	2310      	movs	r3, #16
 8004494:	2204      	movs	r2, #4
 8004496:	21d8      	movs	r1, #216	; 0xd8
 8004498:	f000 fdea 	bl	8005070 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 + 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 800449c:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <displaySpaceShip+0x78>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	3302      	adds	r3, #2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	b298      	uxth	r0, r3
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	2310      	movs	r3, #16
 80044ae:	2204      	movs	r2, #4
 80044b0:	21d8      	movs	r1, #216	; 0xd8
 80044b2:	f000 fddd 	bl	8005070 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 - 4, SCREEN_HEIGHT*4 -20, 12, 4, color);
 80044b6:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <displaySpaceShip+0x78>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29b      	uxth	r3, r3
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	b298      	uxth	r0, r3
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	2304      	movs	r3, #4
 80044c8:	220c      	movs	r2, #12
 80044ca:	21dc      	movs	r1, #220	; 0xdc
 80044cc:	f000 fdd0 	bl	8005070 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4, SCREEN_HEIGHT*4 -28, 4, 16, color);
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <displaySpaceShip+0x78>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	b298      	uxth	r0, r3
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	2310      	movs	r3, #16
 80044e0:	2204      	movs	r2, #4
 80044e2:	21d4      	movs	r1, #212	; 0xd4
 80044e4:	f000 fdc4 	bl	8005070 <Displ_FillArea>

}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	2000004c 	.word	0x2000004c

080044f4 <displayLives>:

void displayLives(){
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af02      	add	r7, sp, #8
    for(int i = 0; i < lives; i++){
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	e013      	b.n	8004528 <displayLives+0x34>
    	Displ_FillArea(HEARTS_X+HEARTS_OFFSET*i, HEARTS_Y, 4, 4, LIGHT_GREEN);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	b29b      	uxth	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	0052      	lsls	r2, r2, #1
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	b29b      	uxth	r3, r3
 800450e:	3308      	adds	r3, #8
 8004510:	b298      	uxth	r0, r3
 8004512:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	2304      	movs	r3, #4
 800451a:	2204      	movs	r2, #4
 800451c:	2108      	movs	r1, #8
 800451e:	f000 fda7 	bl	8005070 <Displ_FillArea>
    for(int i = 0; i < lives; i++){
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3301      	adds	r3, #1
 8004526:	607b      	str	r3, [r7, #4]
 8004528:	4b16      	ldr	r3, [pc, #88]	; (8004584 <displayLives+0x90>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4293      	cmp	r3, r2
 8004532:	dbe5      	blt.n	8004500 <displayLives+0xc>
    }
    if(lives < 3){
 8004534:	4b13      	ldr	r3, [pc, #76]	; (8004584 <displayLives+0x90>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d81f      	bhi.n	800457c <displayLives+0x88>
    	for(int i = 0; i < 3 - lives; i++){
 800453c:	2300      	movs	r3, #0
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	e015      	b.n	800456e <displayLives+0x7a>
    		Displ_FillArea(HEARTS_X+HEARTS_OFFSET*(3-i), HEARTS_Y, 4, 4, DARK_GREY);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	f1c3 0303 	rsb	r3, r3, #3
 8004548:	b29b      	uxth	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	0052      	lsls	r2, r2, #1
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	b29b      	uxth	r3, r3
 8004554:	3308      	adds	r3, #8
 8004556:	b298      	uxth	r0, r3
 8004558:	f642 432c 	movw	r3, #11308	; 0x2c2c
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2304      	movs	r3, #4
 8004560:	2204      	movs	r2, #4
 8004562:	2108      	movs	r1, #8
 8004564:	f000 fd84 	bl	8005070 <Displ_FillArea>
    	for(int i = 0; i < 3 - lives; i++){
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	3301      	adds	r3, #1
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <displayLives+0x90>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	f1c3 0303 	rsb	r3, r3, #3
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	dbe2      	blt.n	8004542 <displayLives+0x4e>
    	}
    }
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	20000049 	.word	0x20000049

08004588 <spaceShipHitColorToggle>:


void spaceShipHitColorToggle(){
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
    if(spaceshipCurrentColor == RED && hit % 10 == 0){
 800458c:	4b1f      	ldr	r3, [pc, #124]	; (800460c <spaceShipHitColorToggle+0x84>)
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8004594:	d112      	bne.n	80045bc <spaceShipHitColorToggle+0x34>
 8004596:	4b1e      	ldr	r3, [pc, #120]	; (8004610 <spaceShipHitColorToggle+0x88>)
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <spaceShipHitColorToggle+0x8c>)
 800459c:	fba3 1302 	umull	r1, r3, r3, r2
 80045a0:	08d9      	lsrs	r1, r3, #3
 80045a2:	460b      	mov	r3, r1
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d104      	bne.n	80045bc <spaceShipHitColorToggle+0x34>
        spaceshipCurrentColor = WHITE;
 80045b2:	4b16      	ldr	r3, [pc, #88]	; (800460c <spaceShipHitColorToggle+0x84>)
 80045b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045b8:	801a      	strh	r2, [r3, #0]
 80045ba:	e011      	b.n	80045e0 <spaceShipHitColorToggle+0x58>
    }else if(hit % 10 == 0){
 80045bc:	4b14      	ldr	r3, [pc, #80]	; (8004610 <spaceShipHitColorToggle+0x88>)
 80045be:	781a      	ldrb	r2, [r3, #0]
 80045c0:	4b14      	ldr	r3, [pc, #80]	; (8004614 <spaceShipHitColorToggle+0x8c>)
 80045c2:	fba3 1302 	umull	r1, r3, r3, r2
 80045c6:	08d9      	lsrs	r1, r3, #3
 80045c8:	460b      	mov	r3, r1
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d103      	bne.n	80045e0 <spaceShipHitColorToggle+0x58>
        spaceshipCurrentColor = RED;
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <spaceShipHitColorToggle+0x84>)
 80045da:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80045de:	801a      	strh	r2, [r3, #0]
    }
    if(hit < hit_graph_counter){
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <spaceShipHitColorToggle+0x88>)
 80045e2:	781a      	ldrb	r2, [r3, #0]
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <spaceShipHitColorToggle+0x90>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d206      	bcs.n	80045fa <spaceShipHitColorToggle+0x72>
        hit++;
 80045ec:	4b08      	ldr	r3, [pc, #32]	; (8004610 <spaceShipHitColorToggle+0x88>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <spaceShipHitColorToggle+0x88>)
 80045f6:	701a      	strb	r2, [r3, #0]
    }else{
        hit = 0;
    }
}
 80045f8:	e002      	b.n	8004600 <spaceShipHitColorToggle+0x78>
        hit = 0;
 80045fa:	4b05      	ldr	r3, [pc, #20]	; (8004610 <spaceShipHitColorToggle+0x88>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	701a      	strb	r2, [r3, #0]
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	2000004e 	.word	0x2000004e
 8004610:	20001eeb 	.word	0x20001eeb
 8004614:	cccccccd 	.word	0xcccccccd
 8004618:	20000050 	.word	0x20000050

0800461c <delayBullet>:

void delayBullet(){
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
    if (bullet_delay > 0){
 8004620:	4b07      	ldr	r3, [pc, #28]	; (8004640 <delayBullet+0x24>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <delayBullet+0x18>
        bullet_delay--;
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <delayBullet+0x24>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	3b01      	subs	r3, #1
 800462e:	b2da      	uxtb	r2, r3
 8004630:	4b03      	ldr	r3, [pc, #12]	; (8004640 <delayBullet+0x24>)
 8004632:	701a      	strb	r2, [r3, #0]
    }
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	200021d5 	.word	0x200021d5

08004644 <beenHit>:

void beenHit(){
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
    hit = 1;
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <beenHit+0x34>)
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
    lives--;
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <beenHit+0x38>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	3b01      	subs	r3, #1
 8004654:	b2da      	uxtb	r2, r3
 8004656:	4b09      	ldr	r3, [pc, #36]	; (800467c <beenHit+0x38>)
 8004658:	701a      	strb	r2, [r3, #0]
    if(lives <= 0){
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <beenHit+0x38>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d107      	bne.n	8004672 <beenHit+0x2e>
        play = 0;
 8004662:	4b07      	ldr	r3, [pc, #28]	; (8004680 <beenHit+0x3c>)
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
        hit = 0;
 8004668:	4b03      	ldr	r3, [pc, #12]	; (8004678 <beenHit+0x34>)
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
        initSpaceInvaders();
 800466e:	f7ff f8a7 	bl	80037c0 <initSpaceInvaders>

    }
}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20001eeb 	.word	0x20001eeb
 800467c:	20000049 	.word	0x20000049
 8004680:	2000004a 	.word	0x2000004a

08004684 <powerups>:
            star_delay--;
        }
    }
}

void powerups(){
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
    uint8_t powerupornot = RANDOM(0,3);
 800468a:	f006 f9a5 	bl	800a9d8 <rand>
 800468e:	4603      	mov	r3, r0
 8004690:	425a      	negs	r2, r3
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	f002 0203 	and.w	r2, r2, #3
 800469a:	bf58      	it	pl
 800469c:	4253      	negpl	r3, r2
 800469e:	71fb      	strb	r3, [r7, #7]
    if(powerUp == 0 && powerupornot == 0){
 80046a0:	4b17      	ldr	r3, [pc, #92]	; (8004700 <powerups+0x7c>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d127      	bne.n	80046f8 <powerups+0x74>
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d124      	bne.n	80046f8 <powerups+0x74>
        powerUp = RANDOM(1,3);
 80046ae:	f006 f993 	bl	800a9d8 <rand>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4b13      	ldr	r3, [pc, #76]	; (8004704 <powerups+0x80>)
 80046b6:	fb83 3102 	smull	r3, r1, r3, r2
 80046ba:	17d3      	asrs	r3, r2, #31
 80046bc:	1ac9      	subs	r1, r1, r3
 80046be:	460b      	mov	r3, r1
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	440b      	add	r3, r1
 80046c4:	1ad1      	subs	r1, r2, r3
 80046c6:	b2cb      	uxtb	r3, r1
 80046c8:	3301      	adds	r3, #1
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <powerups+0x7c>)
 80046ce:	701a      	strb	r2, [r3, #0]
        if(powerUp == 1){
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <powerups+0x7c>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d104      	bne.n	80046e2 <powerups+0x5e>
        	displayPowerup(RED);
 80046d8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80046dc:	f000 f816 	bl	800470c <displayPowerup>
 80046e0:	e007      	b.n	80046f2 <powerups+0x6e>
        }
        else if(powerUp == 2){
 80046e2:	4b07      	ldr	r3, [pc, #28]	; (8004700 <powerups+0x7c>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d103      	bne.n	80046f2 <powerups+0x6e>
        	displayPowerup(LIGHT_BLUE);
 80046ea:	f24f 70db 	movw	r0, #63451	; 0xf7db
 80046ee:	f000 f80d 	bl	800470c <displayPowerup>
        }
        powerUp_delay = MAX_DELAY_POWERUP;
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <powerups+0x84>)
 80046f4:	2205      	movs	r2, #5
 80046f6:	701a      	strb	r2, [r3, #0]
    }
}
 80046f8:	bf00      	nop
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	200021de 	.word	0x200021de
 8004704:	55555556 	.word	0x55555556
 8004708:	200021df 	.word	0x200021df

0800470c <displayPowerup>:

void displayPowerup(uint16_t color){
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af02      	add	r7, sp, #8
 8004712:	4603      	mov	r3, r0
 8004714:	80fb      	strh	r3, [r7, #6]

    if(powerUp == 1){
 8004716:	4b1d      	ldr	r3, [pc, #116]	; (800478c <displayPowerup+0x80>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d11a      	bne.n	8004754 <displayPowerup+0x48>
		Displ_FillArea(SpaceShip.x * 4, 0, 4, 180, color);
 800471e:	4b1c      	ldr	r3, [pc, #112]	; (8004790 <displayPowerup+0x84>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	b298      	uxth	r0, r3
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	23b4      	movs	r3, #180	; 0xb4
 800472e:	2204      	movs	r2, #4
 8004730:	2100      	movs	r1, #0
 8004732:	f000 fc9d 	bl	8005070 <Displ_FillArea>
		Displ_FillArea(SpaceShip.x * 4 + 1, 180, 2, 30, color);
 8004736:	4b16      	ldr	r3, [pc, #88]	; (8004790 <displayPowerup+0x84>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	b29b      	uxth	r3, r3
 8004740:	3301      	adds	r3, #1
 8004742:	b298      	uxth	r0, r3
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	231e      	movs	r3, #30
 800474a:	2202      	movs	r2, #2
 800474c:	21b4      	movs	r1, #180	; 0xb4
 800474e:	f000 fc8f 	bl	8005070 <Displ_FillArea>
    }
    else if(powerUp == 2){
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
    }
}
 8004752:	e017      	b.n	8004784 <displayPowerup+0x78>
    else if(powerUp == 2){
 8004754:	4b0d      	ldr	r3, [pc, #52]	; (800478c <displayPowerup+0x80>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d113      	bne.n	8004784 <displayPowerup+0x78>
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
 800475c:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <displayPowerup+0x84>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	b29b      	uxth	r3, r3
 8004766:	3301      	adds	r3, #1
 8004768:	b29b      	uxth	r3, r3
 800476a:	b218      	sxth	r0, r3
 800476c:	4b08      	ldr	r3, [pc, #32]	; (8004790 <displayPowerup+0x84>)
 800476e:	785b      	ldrb	r3, [r3, #1]
 8004770:	b29b      	uxth	r3, r3
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	b29b      	uxth	r3, r3
 8004776:	3302      	adds	r3, #2
 8004778:	b29b      	uxth	r3, r3
 800477a:	b219      	sxth	r1, r3
 800477c:	88fb      	ldrh	r3, [r7, #6]
 800477e:	220e      	movs	r2, #14
 8004780:	f000 fd56 	bl	8005230 <Displ_drawCircle>
}
 8004784:	bf00      	nop
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	200021de 	.word	0x200021de
 8004790:	2000004c 	.word	0x2000004c

08004794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800479a:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <HAL_MspInit+0x44>)
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <HAL_MspInit+0x44>)
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	6193      	str	r3, [r2, #24]
 80047a6:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <HAL_MspInit+0x44>)
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	607b      	str	r3, [r7, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <HAL_MspInit+0x44>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <HAL_MspInit+0x44>)
 80047b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047bc:	61d3      	str	r3, [r2, #28]
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <HAL_MspInit+0x44>)
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40021000 	.word	0x40021000

080047dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	; 0x28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e4:	f107 0314 	add.w	r3, r7, #20
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	605a      	str	r2, [r3, #4]
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a17      	ldr	r2, [pc, #92]	; (8004858 <HAL_I2C_MspInit+0x7c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d127      	bne.n	800484e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80047fe:	4b17      	ldr	r3, [pc, #92]	; (800485c <HAL_I2C_MspInit+0x80>)
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	4a16      	ldr	r2, [pc, #88]	; (800485c <HAL_I2C_MspInit+0x80>)
 8004804:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004808:	6153      	str	r3, [r2, #20]
 800480a:	4b14      	ldr	r3, [pc, #80]	; (800485c <HAL_I2C_MspInit+0x80>)
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004812:	613b      	str	r3, [r7, #16]
 8004814:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004816:	2303      	movs	r3, #3
 8004818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800481a:	2312      	movs	r3, #18
 800481c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800481e:	2301      	movs	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004822:	2303      	movs	r3, #3
 8004824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004826:	2304      	movs	r3, #4
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800482a:	f107 0314 	add.w	r3, r7, #20
 800482e:	4619      	mov	r1, r3
 8004830:	480b      	ldr	r0, [pc, #44]	; (8004860 <HAL_I2C_MspInit+0x84>)
 8004832:	f001 fd8d 	bl	8006350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004836:	4b09      	ldr	r3, [pc, #36]	; (800485c <HAL_I2C_MspInit+0x80>)
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	4a08      	ldr	r2, [pc, #32]	; (800485c <HAL_I2C_MspInit+0x80>)
 800483c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004840:	61d3      	str	r3, [r2, #28]
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <HAL_I2C_MspInit+0x80>)
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800484e:	bf00      	nop
 8004850:	3728      	adds	r7, #40	; 0x28
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40005800 	.word	0x40005800
 800485c:	40021000 	.word	0x40021000
 8004860:	48001400 	.word	0x48001400

08004864 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	; 0x28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800486c:	f107 0314 	add.w	r3, r7, #20
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	605a      	str	r2, [r3, #4]
 8004876:	609a      	str	r2, [r3, #8]
 8004878:	60da      	str	r2, [r3, #12]
 800487a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a2e      	ldr	r2, [pc, #184]	; (800493c <HAL_SPI_MspInit+0xd8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d156      	bne.n	8004934 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004886:	4b2e      	ldr	r3, [pc, #184]	; (8004940 <HAL_SPI_MspInit+0xdc>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	4a2d      	ldr	r2, [pc, #180]	; (8004940 <HAL_SPI_MspInit+0xdc>)
 800488c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004890:	61d3      	str	r3, [r2, #28]
 8004892:	4b2b      	ldr	r3, [pc, #172]	; (8004940 <HAL_SPI_MspInit+0xdc>)
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800489e:	4b28      	ldr	r3, [pc, #160]	; (8004940 <HAL_SPI_MspInit+0xdc>)
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	4a27      	ldr	r2, [pc, #156]	; (8004940 <HAL_SPI_MspInit+0xdc>)
 80048a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a8:	6153      	str	r3, [r2, #20]
 80048aa:	4b25      	ldr	r3, [pc, #148]	; (8004940 <HAL_SPI_MspInit+0xdc>)
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80048b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80048ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048bc:	2302      	movs	r3, #2
 80048be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048c4:	2303      	movs	r3, #3
 80048c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048c8:	2305      	movs	r3, #5
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048cc:	f107 0314 	add.w	r3, r7, #20
 80048d0:	4619      	mov	r1, r3
 80048d2:	481c      	ldr	r0, [pc, #112]	; (8004944 <HAL_SPI_MspInit+0xe0>)
 80048d4:	f001 fd3c 	bl	8006350 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80048d8:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <HAL_SPI_MspInit+0xe4>)
 80048da:	4a1c      	ldr	r2, [pc, #112]	; (800494c <HAL_SPI_MspInit+0xe8>)
 80048dc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048de:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <HAL_SPI_MspInit+0xe4>)
 80048e0:	2210      	movs	r2, #16
 80048e2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048e4:	4b18      	ldr	r3, [pc, #96]	; (8004948 <HAL_SPI_MspInit+0xe4>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048ea:	4b17      	ldr	r3, [pc, #92]	; (8004948 <HAL_SPI_MspInit+0xe4>)
 80048ec:	2280      	movs	r2, #128	; 0x80
 80048ee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048f0:	4b15      	ldr	r3, [pc, #84]	; (8004948 <HAL_SPI_MspInit+0xe4>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048f6:	4b14      	ldr	r3, [pc, #80]	; (8004948 <HAL_SPI_MspInit+0xe4>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80048fc:	4b12      	ldr	r3, [pc, #72]	; (8004948 <HAL_SPI_MspInit+0xe4>)
 80048fe:	2200      	movs	r2, #0
 8004900:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004902:	4b11      	ldr	r3, [pc, #68]	; (8004948 <HAL_SPI_MspInit+0xe4>)
 8004904:	2200      	movs	r2, #0
 8004906:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004908:	480f      	ldr	r0, [pc, #60]	; (8004948 <HAL_SPI_MspInit+0xe4>)
 800490a:	f001 fb12 	bl	8005f32 <HAL_DMA_Init>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8004914:	f7fe fc22 	bl	800315c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a0b      	ldr	r2, [pc, #44]	; (8004948 <HAL_SPI_MspInit+0xe4>)
 800491c:	655a      	str	r2, [r3, #84]	; 0x54
 800491e:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <HAL_SPI_MspInit+0xe4>)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004924:	2200      	movs	r2, #0
 8004926:	2100      	movs	r1, #0
 8004928:	2024      	movs	r0, #36	; 0x24
 800492a:	f001 facc 	bl	8005ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800492e:	2024      	movs	r0, #36	; 0x24
 8004930:	f001 fae5 	bl	8005efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004934:	bf00      	nop
 8004936:	3728      	adds	r7, #40	; 0x28
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40003800 	.word	0x40003800
 8004940:	40021000 	.word	0x40021000
 8004944:	48000400 	.word	0x48000400
 8004948:	20001fa8 	.word	0x20001fa8
 800494c:	40020058 	.word	0x40020058

08004950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08c      	sub	sp, #48	; 0x30
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004958:	f107 031c 	add.w	r3, r7, #28
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a33      	ldr	r2, [pc, #204]	; (8004a3c <HAL_UART_MspInit+0xec>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d131      	bne.n	80049d6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004972:	4b33      	ldr	r3, [pc, #204]	; (8004a40 <HAL_UART_MspInit+0xf0>)
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	4a32      	ldr	r2, [pc, #200]	; (8004a40 <HAL_UART_MspInit+0xf0>)
 8004978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800497c:	61d3      	str	r3, [r2, #28]
 800497e:	4b30      	ldr	r3, [pc, #192]	; (8004a40 <HAL_UART_MspInit+0xf0>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498a:	4b2d      	ldr	r3, [pc, #180]	; (8004a40 <HAL_UART_MspInit+0xf0>)
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	4a2c      	ldr	r2, [pc, #176]	; (8004a40 <HAL_UART_MspInit+0xf0>)
 8004990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004994:	6153      	str	r3, [r2, #20]
 8004996:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <HAL_UART_MspInit+0xf0>)
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80049a2:	230c      	movs	r3, #12
 80049a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a6:	2302      	movs	r3, #2
 80049a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049ae:	2303      	movs	r3, #3
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049b2:	2307      	movs	r3, #7
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049b6:	f107 031c 	add.w	r3, r7, #28
 80049ba:	4619      	mov	r1, r3
 80049bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049c0:	f001 fcc6 	bl	8006350 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80049c4:	2200      	movs	r2, #0
 80049c6:	2100      	movs	r1, #0
 80049c8:	2026      	movs	r0, #38	; 0x26
 80049ca:	f001 fa7c 	bl	8005ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80049ce:	2026      	movs	r0, #38	; 0x26
 80049d0:	f001 fa95 	bl	8005efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80049d4:	e02d      	b.n	8004a32 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1a      	ldr	r2, [pc, #104]	; (8004a44 <HAL_UART_MspInit+0xf4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d128      	bne.n	8004a32 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80049e0:	4b17      	ldr	r3, [pc, #92]	; (8004a40 <HAL_UART_MspInit+0xf0>)
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <HAL_UART_MspInit+0xf0>)
 80049e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ea:	61d3      	str	r3, [r2, #28]
 80049ec:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <HAL_UART_MspInit+0xf0>)
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049f8:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <HAL_UART_MspInit+0xf0>)
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	4a10      	ldr	r2, [pc, #64]	; (8004a40 <HAL_UART_MspInit+0xf0>)
 80049fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a02:	6153      	str	r3, [r2, #20]
 8004a04:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <HAL_UART_MspInit+0xf0>)
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004a10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a16:	2302      	movs	r3, #2
 8004a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a22:	2307      	movs	r3, #7
 8004a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a26:	f107 031c 	add.w	r3, r7, #28
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4806      	ldr	r0, [pc, #24]	; (8004a48 <HAL_UART_MspInit+0xf8>)
 8004a2e:	f001 fc8f 	bl	8006350 <HAL_GPIO_Init>
}
 8004a32:	bf00      	nop
 8004a34:	3730      	adds	r7, #48	; 0x30
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40004400 	.word	0x40004400
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40004800 	.word	0x40004800
 8004a48:	48000400 	.word	0x48000400

08004a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a50:	e7fe      	b.n	8004a50 <NMI_Handler+0x4>

08004a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a52:	b480      	push	{r7}
 8004a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a56:	e7fe      	b.n	8004a56 <HardFault_Handler+0x4>

08004a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a5c:	e7fe      	b.n	8004a5c <MemManage_Handler+0x4>

08004a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a62:	e7fe      	b.n	8004a62 <BusFault_Handler+0x4>

08004a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a68:	e7fe      	b.n	8004a68 <UsageFault_Handler+0x4>

08004a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a6e:	bf00      	nop
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a7c:	bf00      	nop
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a86:	b480      	push	{r7}
 8004a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a98:	f001 f8f6 	bl	8005c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a9c:	bf00      	nop
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	f001 fdf5 	bl	8006694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004aaa:	bf00      	nop
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004ab4:	4802      	ldr	r0, [pc, #8]	; (8004ac0 <DMA1_Channel5_IRQHandler+0x10>)
 8004ab6:	f001 fb59 	bl	800616c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004aba:	bf00      	nop
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20001fa8 	.word	0x20001fa8

08004ac4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004ac8:	4802      	ldr	r0, [pc, #8]	; (8004ad4 <SPI2_IRQHandler+0x10>)
 8004aca:	f004 fc1b 	bl	8009304 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20001f44 	.word	0x20001f44

08004ad8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char ch;
    uint16_t number;

    uint32_t isrflags = READ_REG(huart2.Instance->ISR);
 8004ade:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <USART2_IRQHandler+0x50>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	60fb      	str	r3, [r7, #12]
    uint32_t crlits = READ_REG(huart2.Instance->CR1);
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <USART2_IRQHandler+0x50>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60bb      	str	r3, [r7, #8]

    if (((isrflags & USART_ISR_RXNE) != RESET) && ((crlits & USART_CR1_RXNEIE) != RESET)) {
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d010      	beq.n	8004b1a <USART2_IRQHandler+0x42>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <USART2_IRQHandler+0x42>
        huart2.Instance->ISR;
 8004b02:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <USART2_IRQHandler+0x50>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69db      	ldr	r3, [r3, #28]
        //number = huart2.Instance->RDR;
        ch = huart2.Instance->RDR;
 8004b08:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <USART2_IRQHandler+0x50>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	71fb      	strb	r3, [r7, #7]
        //printf("%ul\r\n", number);
        //printf("%c\r\n", ch);
        addCharacterToArray(ch);
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fe fd03 	bl	8003520 <addCharacterToArray>
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b1a:	4803      	ldr	r0, [pc, #12]	; (8004b28 <USART2_IRQHandler+0x50>)
 8004b1c:	f004 ffce 	bl	8009abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20001fec 	.word	0x20001fec

08004b2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 8004b30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004b34:	f001 fdae 	bl	8006694 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8004b38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004b3c:	f001 fdaa 	bl	8006694 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8004b40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004b44:	f001 fda6 	bl	8006694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004b48:	bf00      	nop
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return 1;
 8004b50:	2301      	movs	r3, #1
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <_kill>:

int _kill(int pid, int sig)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b66:	f005 fe49 	bl	800a7fc <__errno>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2216      	movs	r2, #22
 8004b6e:	601a      	str	r2, [r3, #0]
  return -1;
 8004b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <_exit>:

void _exit (int status)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b84:	f04f 31ff 	mov.w	r1, #4294967295
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff ffe7 	bl	8004b5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b8e:	e7fe      	b.n	8004b8e <_exit+0x12>

08004b90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	e00a      	b.n	8004bb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ba2:	f3af 8000 	nop.w
 8004ba6:	4601      	mov	r1, r0
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	60ba      	str	r2, [r7, #8]
 8004bae:	b2ca      	uxtb	r2, r1
 8004bb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	dbf0      	blt.n	8004ba2 <_read+0x12>
  }

  return len;
 8004bc0:	687b      	ldr	r3, [r7, #4]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <_close>:
  }
  return len;
}

int _close(int file)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bf2:	605a      	str	r2, [r3, #4]
  return 0;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <_isatty>:

int _isatty(int file)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c0a:	2301      	movs	r3, #1
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
	...

08004c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c3c:	4a14      	ldr	r2, [pc, #80]	; (8004c90 <_sbrk+0x5c>)
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <_sbrk+0x60>)
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c48:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <_sbrk+0x64>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d102      	bne.n	8004c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c50:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <_sbrk+0x64>)
 8004c52:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <_sbrk+0x68>)
 8004c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c56:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <_sbrk+0x64>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d207      	bcs.n	8004c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c64:	f005 fdca 	bl	800a7fc <__errno>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	220c      	movs	r2, #12
 8004c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c72:	e009      	b.n	8004c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c74:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <_sbrk+0x64>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c7a:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <_sbrk+0x64>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4413      	add	r3, r2
 8004c82:	4a05      	ldr	r2, [pc, #20]	; (8004c98 <_sbrk+0x64>)
 8004c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c86:	68fb      	ldr	r3, [r7, #12]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	20004000 	.word	0x20004000
 8004c94:	00000400 	.word	0x00000400
 8004c98:	200021e0 	.word	0x200021e0
 8004c9c:	20002a08 	.word	0x20002a08

08004ca0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <SystemInit+0x20>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	4a05      	ldr	r2, [pc, #20]	; (8004cc0 <SystemInit+0x20>)
 8004cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	e000ed00 	.word	0xe000ed00

08004cc4 <Displ_Select>:

/******************************************
 * @brief   enable display, disabling touch
 *          device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
    if (TOUCH_SPI==DISPL_SPI){                                                      // if SPI port shared (display <-> touch)
        if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {                   // if display not yet selected
 8004cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cd0:	f001 fcb0 	bl	8006634 <HAL_GPIO_ReadPin>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d017      	beq.n	8004d0a <Displ_Select+0x46>
            HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ce0:	480b      	ldr	r0, [pc, #44]	; (8004d10 <Displ_Select+0x4c>)
 8004ce2:	f001 fcbf 	bl	8006664 <HAL_GPIO_WritePin>
            SET_DISPL_SPI_BAUDRATE;                                                 //change SPI port speed as per display needs
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <Displ_Select+0x50>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	490a      	ldr	r1, [pc, #40]	; (8004d14 <Displ_Select+0x50>)
 8004cec:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	600b      	str	r3, [r1, #0]
 8004cf4:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <Displ_Select+0x50>)
 8004cf6:	4a07      	ldr	r2, [pc, #28]	; (8004d14 <Displ_Select+0x50>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d06:	f001 fcad 	bl	8006664 <HAL_GPIO_WritePin>
        }
    }
}
 8004d0a:	bf00      	nop
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	48000400 	.word	0x48000400
 8004d14:	40003800 	.word	0x40003800

08004d18 <Displ_Transmit>:
 * @PARAM   DC_Status   indicates if sending command or data
 *          data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6039      	str	r1, [r7, #0]
 8004d20:	4611      	mov	r1, r2
 8004d22:	461a      	mov	r2, r3
 8004d24:	4603      	mov	r3, r0
 8004d26:	71fb      	strb	r3, [r7, #7]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	80bb      	strh	r3, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	71bb      	strb	r3, [r7, #6]

    while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8004d30:	bf00      	nop
 8004d32:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <Displ_Transmit+0xa8>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0fa      	beq.n	8004d32 <Displ_Transmit+0x1a>

    Displ_Select();
 8004d3c:	f7ff ffc2 	bl	8004cc4 <Displ_Select>
    HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d4c:	f001 fc8a 	bl	8006664 <HAL_GPIO_WritePin>

    if (isTouchGFXBuffer){
 8004d50:	79bb      	ldrb	r3, [r7, #6]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d016      	beq.n	8004d84 <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
        uint32_t *limit=(uint32_t*)(data+dataSize);
 8004d56:	88bb      	ldrh	r3, [r7, #4]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	e00b      	b.n	8004d7c <Displ_Transmit+0x64>
            *data32=__REV16(*data32);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	ba5b      	rev16	r3, r3
 8004d6e:	60bb      	str	r3, [r7, #8]
  return result;
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	601a      	str	r2, [r3, #0]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d3ef      	bcc.n	8004d64 <Displ_Transmit+0x4c>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
        Displ_SpiAvailable=0;
        HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
        if (dataSize<DISPL_DMA_CUTOFF) {
 8004d84:	88bb      	ldrh	r3, [r7, #4]
 8004d86:	2b13      	cmp	r3, #19
 8004d88:	d80d      	bhi.n	8004da6 <Displ_Transmit+0x8e>
#endif //DISPLAY_SPI_DMA_MODE
            Displ_SpiAvailable=0;
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <Displ_Transmit+0xa8>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8004d90:	88ba      	ldrh	r2, [r7, #4]
 8004d92:	f04f 33ff 	mov.w	r3, #4294967295
 8004d96:	6839      	ldr	r1, [r7, #0]
 8004d98:	480a      	ldr	r0, [pc, #40]	; (8004dc4 <Displ_Transmit+0xac>)
 8004d9a:	f004 f84e 	bl	8008e3a <HAL_SPI_Transmit>
            Displ_SpiAvailable=1;
 8004d9e:	4b08      	ldr	r3, [pc, #32]	; (8004dc0 <Displ_Transmit+0xa8>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	701a      	strb	r2, [r3, #0]
            Displ_SpiAvailable=0;
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
        }
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
    }
 8004da4:	e008      	b.n	8004db8 <Displ_Transmit+0xa0>
            Displ_SpiAvailable=0;
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <Displ_Transmit+0xa8>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8004dac:	88bb      	ldrh	r3, [r7, #4]
 8004dae:	461a      	mov	r2, r3
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	4804      	ldr	r0, [pc, #16]	; (8004dc4 <Displ_Transmit+0xac>)
 8004db4:	f004 f9b6 	bl	8009124 <HAL_SPI_Transmit_DMA>
    }
 8004db8:	bf00      	nop
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20000058 	.word	0x20000058
 8004dc4:	20001f44 	.word	0x20001f44

08004dc8 <Displ_WriteCommand>:


/**********************************
 * @BRIEF   transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	71fb      	strb	r3, [r7, #7]
    Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8004dd2:	1df9      	adds	r1, r7, #7
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f7ff ff9d 	bl	8004d18 <Displ_Transmit>
}
 8004dde:	bf00      	nop
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <Displ_WriteData>:
 * @BRIEF   transmit a set of data in a SPI_DATA format
 * @PARAM   data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	4613      	mov	r3, r2
 8004df2:	71fb      	strb	r3, [r7, #7]
    if (buff_size==0) return;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <Displ_WriteData+0x24>
    Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	68f9      	ldr	r1, [r7, #12]
 8004e02:	2001      	movs	r0, #1
 8004e04:	f7ff ff88 	bl	8004d18 <Displ_Transmit>
 8004e08:	e000      	b.n	8004e0c <Displ_WriteData+0x26>
    if (buff_size==0) return;
 8004e0a:	bf00      	nop
}
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <ILI9XXX_Init>:


/**********************************
 * @brief   ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
    Displ_Select();
 8004e18:	f7ff ff54 	bl	8004cc4 <Displ_Select>

    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e26:	f001 fc1d 	bl	8006664 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	f000 ff4c 	bl	8005cc8 <HAL_Delay>
    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8004e30:	2201      	movs	r2, #1
 8004e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e3a:	f001 fc13 	bl	8006664 <HAL_GPIO_WritePin>
    HAL_Delay(150);
 8004e3e:	2096      	movs	r0, #150	; 0x96
 8004e40:	f000 ff42 	bl	8005cc8 <HAL_Delay>
        Displ_WriteData(data,3);
    #endif
*/


    Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8004e44:	203a      	movs	r0, #58	; 0x3a
 8004e46:	f7ff ffbf 	bl	8004dc8 <Displ_WriteCommand>
#ifdef Z_RGB666
    Displ_WriteData((uint8_t *)"\x66",1,0);     // RGB666
#endif
#ifdef Z_RGB565
    Displ_WriteData((uint8_t *)"\x55",1,0);     // RGB565
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	4810      	ldr	r0, [pc, #64]	; (8004e90 <ILI9XXX_Init+0x7c>)
 8004e50:	f7ff ffc9 	bl	8004de6 <Displ_WriteData>
#endif
    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004e54:	20b0      	movs	r0, #176	; 0xb0
 8004e56:	f7ff ffb7 	bl	8004dc8 <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	480d      	ldr	r0, [pc, #52]	; (8004e94 <ILI9XXX_Init+0x80>)
 8004e60:	f7ff ffc1 	bl	8004de6 <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004e64:	20b0      	movs	r0, #176	; 0xb0
 8004e66:	f7ff ffaf 	bl	8004dc8 <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	4809      	ldr	r0, [pc, #36]	; (8004e94 <ILI9XXX_Init+0x80>)
 8004e70:	f7ff ffb9 	bl	8004de6 <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8004e74:	2011      	movs	r0, #17
 8004e76:	f7ff ffa7 	bl	8004dc8 <Displ_WriteCommand>
    HAL_Delay(120);
 8004e7a:	2078      	movs	r0, #120	; 0x78
 8004e7c:	f000 ff24 	bl	8005cc8 <HAL_Delay>

    Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8004e80:	2029      	movs	r0, #41	; 0x29
 8004e82:	f7ff ffa1 	bl	8004dc8 <Displ_WriteCommand>
    HAL_Delay(5);
 8004e86:	2005      	movs	r0, #5
 8004e88:	f000 ff1e 	bl	8005cc8 <HAL_Delay>

}
 8004e8c:	bf00      	nop
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	0800c0e4 	.word	0x0800c0e4
 8004e94:	0800c0e8 	.word	0x0800c0e8

08004e98 <Displ_SetAddressWindow>:
 *          information
 * @param  x1,y1,x2,y2 top left and bottom
 *                     right corner of the area
 *                     to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	80fb      	strh	r3, [r7, #6]
 8004eaa:	4603      	mov	r3, r0
 8004eac:	80bb      	strh	r3, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	807b      	strh	r3, [r7, #2]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	803b      	strh	r3, [r7, #0]
    static uint8_t data[4];

    ((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8004eb6:	887b      	ldrh	r3, [r7, #2]
 8004eb8:	061a      	lsls	r2, r3, #24
 8004eba:	887b      	ldrh	r3, [r7, #2]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	88fb      	ldrh	r3, [r7, #6]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	0a12      	lsrs	r2, r2, #8
 8004ed0:	b292      	uxth	r2, r2
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <Displ_SetAddressWindow+0x90>)
 8004ed6:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8004ed8:	202a      	movs	r0, #42	; 0x2a
 8004eda:	f7ff ff75 	bl	8004dc8 <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2104      	movs	r1, #4
 8004ee2:	4811      	ldr	r0, [pc, #68]	; (8004f28 <Displ_SetAddressWindow+0x90>)
 8004ee4:	f7ff ff7f 	bl	8004de6 <Displ_WriteData>

    ((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8004ee8:	883b      	ldrh	r3, [r7, #0]
 8004eea:	061a      	lsls	r2, r3, #24
 8004eec:	883b      	ldrh	r3, [r7, #0]
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	88bb      	ldrh	r3, [r7, #4]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	4313      	orrs	r3, r2
 8004efe:	88ba      	ldrh	r2, [r7, #4]
 8004f00:	0a12      	lsrs	r2, r2, #8
 8004f02:	b292      	uxth	r2, r2
 8004f04:	431a      	orrs	r2, r3
 8004f06:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <Displ_SetAddressWindow+0x90>)
 8004f08:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8004f0a:	202b      	movs	r0, #43	; 0x2b
 8004f0c:	f7ff ff5c 	bl	8004dc8 <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8004f10:	2200      	movs	r2, #0
 8004f12:	2104      	movs	r1, #4
 8004f14:	4804      	ldr	r0, [pc, #16]	; (8004f28 <Displ_SetAddressWindow+0x90>)
 8004f16:	f7ff ff66 	bl	8004de6 <Displ_WriteData>
    Displ_WriteCommand(ILI9XXX_MEMWR);
 8004f1a:	202c      	movs	r0, #44	; 0x2c
 8004f1c:	f7ff ff54 	bl	8004dc8 <Displ_WriteCommand>
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd90      	pop	{r4, r7, pc}
 8004f28:	200029ec 	.word	0x200029ec

08004f2c <Displ_Init>:

/*****************************************************
 * @brief               first display initialization.
 * @param   orientation display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
    if (TOUCH_SPI==DISPL_SPI){                                                  // if touch and display share the same SPI port
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);      // unselect display (will be selected at writing time)
 8004f36:	2201      	movs	r2, #1
 8004f38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f40:	f001 fb90 	bl	8006664 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch (will be selected at writing time)
 8004f44:	2201      	movs	r2, #1
 8004f46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f4a:	4806      	ldr	r0, [pc, #24]	; (8004f64 <Displ_Init+0x38>)
 8004f4c:	f001 fb8a 	bl	8006664 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
        SET_DISPL_SPI_BAUDRATE;
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);    // select touch
        SET_TOUCH_SPI_BAUDRATE;
    }
    ILI9XXX_Init();
 8004f50:	f7ff ff60 	bl	8004e14 <ILI9XXX_Init>
    Displ_Orientation(orientation);
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f806 	bl	8004f68 <Displ_Orientation>
}
 8004f5c:	bf00      	nop
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	48000400 	.word	0x48000400

08004f68 <Displ_Orientation>:

/**********************************************
 * @brief       set orientation of the display
 * @param   m   orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	71fb      	strb	r3, [r7, #7]
    static uint8_t data[1];
    switch(orientation) {
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d837      	bhi.n	8004fe8 <Displ_Orientation+0x80>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <Displ_Orientation+0x18>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004f91 	.word	0x08004f91
 8004f84:	08004fa7 	.word	0x08004fa7
 8004f88:	08004fbd 	.word	0x08004fbd
 8004f8c:	08004fd3 	.word	0x08004fd3
        case Displ_Orientat_0:
            data[0]=ILI9XXX_MADCTL_0DEG;
 8004f90:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <Displ_Orientation+0xa0>)
 8004f92:	2288      	movs	r2, #136	; 0x88
 8004f94:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8004f96:	4b1d      	ldr	r3, [pc, #116]	; (800500c <Displ_Orientation+0xa4>)
 8004f98:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f9c:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 8004f9e:	4b1c      	ldr	r3, [pc, #112]	; (8005010 <Displ_Orientation+0xa8>)
 8004fa0:	22f0      	movs	r2, #240	; 0xf0
 8004fa2:	801a      	strh	r2, [r3, #0]
            break;
 8004fa4:	e020      	b.n	8004fe8 <Displ_Orientation+0x80>
        case Displ_Orientat_90:
            data[0]=ILI9XXX_MADCTL_90DEG;
 8004fa6:	4b18      	ldr	r3, [pc, #96]	; (8005008 <Displ_Orientation+0xa0>)
 8004fa8:	22e8      	movs	r2, #232	; 0xe8
 8004faa:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 8004fac:	4b17      	ldr	r3, [pc, #92]	; (800500c <Displ_Orientation+0xa4>)
 8004fae:	22f0      	movs	r2, #240	; 0xf0
 8004fb0:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 8004fb2:	4b17      	ldr	r3, [pc, #92]	; (8005010 <Displ_Orientation+0xa8>)
 8004fb4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004fb8:	801a      	strh	r2, [r3, #0]
            break;
 8004fba:	e015      	b.n	8004fe8 <Displ_Orientation+0x80>
        case Displ_Orientat_180:
            data[0]=ILI9XXX_MADCTL_180DEG;
 8004fbc:	4b12      	ldr	r3, [pc, #72]	; (8005008 <Displ_Orientation+0xa0>)
 8004fbe:	2248      	movs	r2, #72	; 0x48
 8004fc0:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8004fc2:	4b12      	ldr	r3, [pc, #72]	; (800500c <Displ_Orientation+0xa4>)
 8004fc4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004fc8:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 8004fca:	4b11      	ldr	r3, [pc, #68]	; (8005010 <Displ_Orientation+0xa8>)
 8004fcc:	22f0      	movs	r2, #240	; 0xf0
 8004fce:	801a      	strh	r2, [r3, #0]
            break;
 8004fd0:	e00a      	b.n	8004fe8 <Displ_Orientation+0x80>
        case Displ_Orientat_270:
            data[0]=ILI9XXX_MADCTL_270DEG;
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	; (8005008 <Displ_Orientation+0xa0>)
 8004fd4:	2228      	movs	r2, #40	; 0x28
 8004fd6:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	; (800500c <Displ_Orientation+0xa4>)
 8004fda:	22f0      	movs	r2, #240	; 0xf0
 8004fdc:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <Displ_Orientation+0xa8>)
 8004fe0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004fe4:	801a      	strh	r2, [r3, #0]
            break;
 8004fe6:	bf00      	nop
    }
    Displ_WriteCommand(ILI9XXX_MADCTL);
 8004fe8:	2036      	movs	r0, #54	; 0x36
 8004fea:	f7ff feed 	bl	8004dc8 <Displ_WriteCommand>
    Displ_WriteData(data,1,0);
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	4805      	ldr	r0, [pc, #20]	; (8005008 <Displ_Orientation+0xa0>)
 8004ff4:	f7ff fef7 	bl	8004de6 <Displ_WriteData>
    current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8004ff8:	4a06      	ldr	r2, [pc, #24]	; (8005014 <Displ_Orientation+0xac>)
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	7013      	strb	r3, [r2, #0]
}
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	200029f0 	.word	0x200029f0
 800500c:	200021e8 	.word	0x200021e8
 8005010:	200021e6 	.word	0x200021e6
 8005014:	200021e4 	.word	0x200021e4

08005018 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a05      	ldr	r2, [pc, #20]	; (800503c <HAL_SPI_ErrorCallback+0x24>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d102      	bne.n	8005030 <HAL_SPI_ErrorCallback+0x18>
        Displ_SpiAvailable=1;
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_SPI_ErrorCallback+0x28>)
 800502c:	2201      	movs	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]
    }
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	40003800 	.word	0x40003800
 8005040:	20000058 	.word	0x20000058

08005044 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a05      	ldr	r2, [pc, #20]	; (8005068 <HAL_SPI_TxCpltCallback+0x24>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d102      	bne.n	800505c <HAL_SPI_TxCpltCallback+0x18>
        Displ_SpiAvailable=1;
 8005056:	4b05      	ldr	r3, [pc, #20]	; (800506c <HAL_SPI_TxCpltCallback+0x28>)
 8005058:	2201      	movs	r2, #1
 800505a:	701a      	strb	r2, [r3, #0]
    #ifdef DISPLAY_USING_TOUCHGFX
        DisplayDriver_TransferCompleteCallback();
    #endif

    }
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40003800 	.word	0x40003800
 800506c:	20000058 	.word	0x20000058

08005070 <Displ_FillArea>:
/*****************************
 * @brief   fill a rectangle with a color
 * @param   x, y    top left corner of the rectangle
 *          w, h    width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8005070:	b590      	push	{r4, r7, lr}
 8005072:	b08b      	sub	sp, #44	; 0x2c
 8005074:	af00      	add	r7, sp, #0
 8005076:	4604      	mov	r4, r0
 8005078:	4608      	mov	r0, r1
 800507a:	4611      	mov	r1, r2
 800507c:	461a      	mov	r2, r3
 800507e:	4623      	mov	r3, r4
 8005080:	80fb      	strh	r3, [r7, #6]
 8005082:	4603      	mov	r3, r0
 8005084:	80bb      	strh	r3, [r7, #4]
 8005086:	460b      	mov	r3, r1
 8005088:	807b      	strh	r3, [r7, #2]
 800508a:	4613      	mov	r3, r2
 800508c:	803b      	strh	r3, [r7, #0]
 * -    swap buffers
 */

    uint32_t k,x1,y1,area,times;

    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	4a4f      	ldr	r2, [pc, #316]	; (80051d0 <Displ_FillArea+0x160>)
 8005092:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005096:	4293      	cmp	r3, r2
 8005098:	f280 8096 	bge.w	80051c8 <Displ_FillArea+0x158>
 800509c:	88bb      	ldrh	r3, [r7, #4]
 800509e:	4a4d      	ldr	r2, [pc, #308]	; (80051d4 <Displ_FillArea+0x164>)
 80050a0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80050a4:	4293      	cmp	r3, r2
 80050a6:	f280 808f 	bge.w	80051c8 <Displ_FillArea+0x158>
 80050aa:	887b      	ldrh	r3, [r7, #2]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 808b 	beq.w	80051c8 <Displ_FillArea+0x158>
 80050b2:	883b      	ldrh	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8087 	beq.w	80051c8 <Displ_FillArea+0x158>

    x1=x + w - 1;
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	887b      	ldrh	r3, [r7, #2]
 80050be:	4413      	add	r3, r2
 80050c0:	3b01      	subs	r3, #1
 80050c2:	623b      	str	r3, [r7, #32]
    if (x1 > _width) {
 80050c4:	4b42      	ldr	r3, [pc, #264]	; (80051d0 <Displ_FillArea+0x160>)
 80050c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050ca:	461a      	mov	r2, r3
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d903      	bls.n	80050da <Displ_FillArea+0x6a>
        x1=_width;
 80050d2:	4b3f      	ldr	r3, [pc, #252]	; (80051d0 <Displ_FillArea+0x160>)
 80050d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050d8:	623b      	str	r3, [r7, #32]
    }

    y1=y + h - 1;
 80050da:	88ba      	ldrh	r2, [r7, #4]
 80050dc:	883b      	ldrh	r3, [r7, #0]
 80050de:	4413      	add	r3, r2
 80050e0:	3b01      	subs	r3, #1
 80050e2:	61fb      	str	r3, [r7, #28]
    if (y1 > _height) {
 80050e4:	4b3b      	ldr	r3, [pc, #236]	; (80051d4 <Displ_FillArea+0x164>)
 80050e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050ea:	461a      	mov	r2, r3
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d903      	bls.n	80050fa <Displ_FillArea+0x8a>
        y1=_height;
 80050f2:	4b38      	ldr	r3, [pc, #224]	; (80051d4 <Displ_FillArea+0x164>)
 80050f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050f8:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

    uint32_t data32;

    data32=(color>>8) | (color<<8) | (color<<24);   // supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 80050fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80050fc:	0a1b      	lsrs	r3, r3, #8
 80050fe:	b29b      	uxth	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	431a      	orrs	r2, r3
 8005108:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800510a:	061b      	lsls	r3, r3, #24
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
    area=((y1-y+1)*(x1-x+1));                       // area to fill in 16bit pixels
 8005110:	88bb      	ldrh	r3, [r7, #4]
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	3301      	adds	r3, #1
 8005118:	88fa      	ldrh	r2, [r7, #6]
 800511a:	6a39      	ldr	r1, [r7, #32]
 800511c:	1a8a      	subs	r2, r1, r2
 800511e:	3201      	adds	r2, #1
 8005120:	fb02 f303 	mul.w	r3, r2, r3
 8005124:	60fb      	str	r3, [r7, #12]
    uint32_t *buf32Pos=(uint32_t *)dispBuffer;      //dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8005126:	4b2c      	ldr	r3, [pc, #176]	; (80051d8 <Displ_FillArea+0x168>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	617b      	str	r3, [r7, #20]
    if (area<(SIZEBUF>>1))                          // if area is smaller than dispBuffer
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005132:	d204      	bcs.n	800513e <Displ_FillArea+0xce>
        times=(area>>1)+1;                          // number of times data32 has to be loaded into buffer
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	085b      	lsrs	r3, r3, #1
 8005138:	3301      	adds	r3, #1
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	e002      	b.n	8005144 <Displ_FillArea+0xd4>
    else
        times=(SIZEBUF>>2);                         // dispBuffer size as 32bit-words
 800513e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005142:	61bb      	str	r3, [r7, #24]
    for (k = 0; k < times; k++)
 8005144:	2300      	movs	r3, #0
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
 8005148:	e007      	b.n	800515a <Displ_FillArea+0xea>
        *(buf32Pos++)=data32;                       // loads buffer moving 32bit-words
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	1d1a      	adds	r2, r3, #4
 800514e:	617a      	str	r2, [r7, #20]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	601a      	str	r2, [r3, #0]
    for (k = 0; k < times; k++)
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	3301      	adds	r3, #1
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
 800515a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	429a      	cmp	r2, r3
 8005160:	d3f3      	bcc.n	800514a <Displ_FillArea+0xda>
    }
    datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
    Displ_SetAddressWindow(x, y, x1, y1);
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	b29a      	uxth	r2, r3
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	b29b      	uxth	r3, r3
 800516a:	88b9      	ldrh	r1, [r7, #4]
 800516c:	88f8      	ldrh	r0, [r7, #6]
 800516e:	f7ff fe93 	bl	8004e98 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
    times=(area>>(BUFLEVEL-1));                     //how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	0a5b      	lsrs	r3, r3, #9
 8005176:	61bb      	str	r3, [r7, #24]
    for  (k=0;k<times;k++) {
 8005178:	2300      	movs	r3, #0
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
 800517c:	e00a      	b.n	8005194 <Displ_FillArea+0x124>
        Displ_WriteData(dispBuffer,SIZEBUF,0);
 800517e:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <Displ_FillArea+0x168>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2200      	movs	r2, #0
 8005184:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff fe2c 	bl	8004de6 <Displ_WriteData>
    for  (k=0;k<times;k++) {
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	3301      	adds	r3, #1
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
 8005194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	429a      	cmp	r2, r3
 800519a:	d3f0      	bcc.n	800517e <Displ_FillArea+0x10e>
    }
    Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 800519c:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <Displ_FillArea+0x168>)
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	005a      	lsls	r2, r3, #1
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	029b      	lsls	r3, r3, #10
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2200      	movs	r2, #0
 80051ac:	4619      	mov	r1, r3
 80051ae:	f7ff fe1a 	bl	8004de6 <Displ_WriteData>
    }
    Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80051b2:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <Displ_FillArea+0x168>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a09      	ldr	r2, [pc, #36]	; (80051dc <Displ_FillArea+0x16c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d101      	bne.n	80051c0 <Displ_FillArea+0x150>
 80051bc:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <Displ_FillArea+0x170>)
 80051be:	e000      	b.n	80051c2 <Displ_FillArea+0x152>
 80051c0:	4b06      	ldr	r3, [pc, #24]	; (80051dc <Displ_FillArea+0x16c>)
 80051c2:	4a05      	ldr	r2, [pc, #20]	; (80051d8 <Displ_FillArea+0x168>)
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	e000      	b.n	80051ca <Displ_FillArea+0x15a>
    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80051c8:	bf00      	nop

}
 80051ca:	372c      	adds	r7, #44	; 0x2c
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd90      	pop	{r4, r7, pc}
 80051d0:	200021e6 	.word	0x200021e6
 80051d4:	200021e8 	.word	0x200021e8
 80051d8:	2000005c 	.word	0x2000005c
 80051dc:	200021ec 	.word	0x200021ec
 80051e0:	200025ec 	.word	0x200025ec

080051e4 <Displ_Pixel>:
/***********************
 * @brief   print a single pixel
 * @params  x, y    pixel position on display
 *          color   ... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	4603      	mov	r3, r0
 80051ec:	80fb      	strh	r3, [r7, #6]
 80051ee:	460b      	mov	r3, r1
 80051f0:	80bb      	strh	r3, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80051f6:	88fb      	ldrh	r3, [r7, #6]
 80051f8:	4a0b      	ldr	r2, [pc, #44]	; (8005228 <Displ_Pixel+0x44>)
 80051fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80051fe:	4293      	cmp	r3, r2
 8005200:	da0e      	bge.n	8005220 <Displ_Pixel+0x3c>
 8005202:	88bb      	ldrh	r3, [r7, #4]
 8005204:	4a09      	ldr	r2, [pc, #36]	; (800522c <Displ_Pixel+0x48>)
 8005206:	f9b2 2000 	ldrsh.w	r2, [r2]
 800520a:	4293      	cmp	r3, r2
 800520c:	da08      	bge.n	8005220 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 800520e:	88b9      	ldrh	r1, [r7, #4]
 8005210:	88f8      	ldrh	r0, [r7, #6]
 8005212:	887b      	ldrh	r3, [r7, #2]
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	2301      	movs	r3, #1
 8005218:	2201      	movs	r2, #1
 800521a:	f7ff ff29 	bl	8005070 <Displ_FillArea>
 800521e:	e000      	b.n	8005222 <Displ_Pixel+0x3e>
        return;
 8005220:	bf00      	nop

}
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	200021e6 	.word	0x200021e6
 800522c:	200021e8 	.word	0x200021e8

08005230 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	4604      	mov	r4, r0
 8005238:	4608      	mov	r0, r1
 800523a:	4611      	mov	r1, r2
 800523c:	461a      	mov	r2, r3
 800523e:	4623      	mov	r3, r4
 8005240:	80fb      	strh	r3, [r7, #6]
 8005242:	4603      	mov	r3, r0
 8005244:	80bb      	strh	r3, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	807b      	strh	r3, [r7, #2]
 800524a:	4613      	mov	r3, r2
 800524c:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800524e:	887b      	ldrh	r3, [r7, #2]
 8005250:	f1c3 0301 	rsb	r3, r3, #1
 8005254:	b29b      	uxth	r3, r3
 8005256:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005258:	2301      	movs	r3, #1
 800525a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800525c:	887b      	ldrh	r3, [r7, #2]
 800525e:	461a      	mov	r2, r3
 8005260:	03d2      	lsls	r2, r2, #15
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	b29b      	uxth	r3, r3
 8005268:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800526e:	887b      	ldrh	r3, [r7, #2]
 8005270:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8005272:	88f8      	ldrh	r0, [r7, #6]
 8005274:	88ba      	ldrh	r2, [r7, #4]
 8005276:	887b      	ldrh	r3, [r7, #2]
 8005278:	4413      	add	r3, r2
 800527a:	b29b      	uxth	r3, r3
 800527c:	883a      	ldrh	r2, [r7, #0]
 800527e:	4619      	mov	r1, r3
 8005280:	f7ff ffb0 	bl	80051e4 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8005284:	88f8      	ldrh	r0, [r7, #6]
 8005286:	88ba      	ldrh	r2, [r7, #4]
 8005288:	887b      	ldrh	r3, [r7, #2]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	b29b      	uxth	r3, r3
 800528e:	883a      	ldrh	r2, [r7, #0]
 8005290:	4619      	mov	r1, r3
 8005292:	f7ff ffa7 	bl	80051e4 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8005296:	88fa      	ldrh	r2, [r7, #6]
 8005298:	887b      	ldrh	r3, [r7, #2]
 800529a:	4413      	add	r3, r2
 800529c:	b29b      	uxth	r3, r3
 800529e:	88b9      	ldrh	r1, [r7, #4]
 80052a0:	883a      	ldrh	r2, [r7, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff ff9e 	bl	80051e4 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 80052a8:	88fa      	ldrh	r2, [r7, #6]
 80052aa:	887b      	ldrh	r3, [r7, #2]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	88b9      	ldrh	r1, [r7, #4]
 80052b2:	883a      	ldrh	r2, [r7, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff ff95 	bl	80051e4 <Displ_Pixel>

    while (x<y) {
 80052ba:	e081      	b.n	80053c0 <Displ_drawCircle+0x190>
        if (f >= 0) {
 80052bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	db0e      	blt.n	80052e2 <Displ_drawCircle+0xb2>
            y--;
 80052c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80052d0:	8a7b      	ldrh	r3, [r7, #18]
 80052d2:	3302      	adds	r3, #2
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80052d8:	8afa      	ldrh	r2, [r7, #22]
 80052da:	8a7b      	ldrh	r3, [r7, #18]
 80052dc:	4413      	add	r3, r2
 80052de:	b29b      	uxth	r3, r3
 80052e0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80052e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3301      	adds	r3, #1
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80052ee:	8abb      	ldrh	r3, [r7, #20]
 80052f0:	3302      	adds	r3, #2
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80052f6:	8afa      	ldrh	r2, [r7, #22]
 80052f8:	8abb      	ldrh	r3, [r7, #20]
 80052fa:	4413      	add	r3, r2
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8005300:	88fa      	ldrh	r2, [r7, #6]
 8005302:	8a3b      	ldrh	r3, [r7, #16]
 8005304:	4413      	add	r3, r2
 8005306:	b298      	uxth	r0, r3
 8005308:	88ba      	ldrh	r2, [r7, #4]
 800530a:	89fb      	ldrh	r3, [r7, #14]
 800530c:	4413      	add	r3, r2
 800530e:	b29b      	uxth	r3, r3
 8005310:	883a      	ldrh	r2, [r7, #0]
 8005312:	4619      	mov	r1, r3
 8005314:	f7ff ff66 	bl	80051e4 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8005318:	88fa      	ldrh	r2, [r7, #6]
 800531a:	8a3b      	ldrh	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	b298      	uxth	r0, r3
 8005320:	88ba      	ldrh	r2, [r7, #4]
 8005322:	89fb      	ldrh	r3, [r7, #14]
 8005324:	4413      	add	r3, r2
 8005326:	b29b      	uxth	r3, r3
 8005328:	883a      	ldrh	r2, [r7, #0]
 800532a:	4619      	mov	r1, r3
 800532c:	f7ff ff5a 	bl	80051e4 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8005330:	88fa      	ldrh	r2, [r7, #6]
 8005332:	8a3b      	ldrh	r3, [r7, #16]
 8005334:	4413      	add	r3, r2
 8005336:	b298      	uxth	r0, r3
 8005338:	88ba      	ldrh	r2, [r7, #4]
 800533a:	89fb      	ldrh	r3, [r7, #14]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	b29b      	uxth	r3, r3
 8005340:	883a      	ldrh	r2, [r7, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	f7ff ff4e 	bl	80051e4 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8005348:	88fa      	ldrh	r2, [r7, #6]
 800534a:	8a3b      	ldrh	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	b298      	uxth	r0, r3
 8005350:	88ba      	ldrh	r2, [r7, #4]
 8005352:	89fb      	ldrh	r3, [r7, #14]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	b29b      	uxth	r3, r3
 8005358:	883a      	ldrh	r2, [r7, #0]
 800535a:	4619      	mov	r1, r3
 800535c:	f7ff ff42 	bl	80051e4 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8005360:	88fa      	ldrh	r2, [r7, #6]
 8005362:	89fb      	ldrh	r3, [r7, #14]
 8005364:	4413      	add	r3, r2
 8005366:	b298      	uxth	r0, r3
 8005368:	88ba      	ldrh	r2, [r7, #4]
 800536a:	8a3b      	ldrh	r3, [r7, #16]
 800536c:	4413      	add	r3, r2
 800536e:	b29b      	uxth	r3, r3
 8005370:	883a      	ldrh	r2, [r7, #0]
 8005372:	4619      	mov	r1, r3
 8005374:	f7ff ff36 	bl	80051e4 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8005378:	88fa      	ldrh	r2, [r7, #6]
 800537a:	89fb      	ldrh	r3, [r7, #14]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	b298      	uxth	r0, r3
 8005380:	88ba      	ldrh	r2, [r7, #4]
 8005382:	8a3b      	ldrh	r3, [r7, #16]
 8005384:	4413      	add	r3, r2
 8005386:	b29b      	uxth	r3, r3
 8005388:	883a      	ldrh	r2, [r7, #0]
 800538a:	4619      	mov	r1, r3
 800538c:	f7ff ff2a 	bl	80051e4 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8005390:	88fa      	ldrh	r2, [r7, #6]
 8005392:	89fb      	ldrh	r3, [r7, #14]
 8005394:	4413      	add	r3, r2
 8005396:	b298      	uxth	r0, r3
 8005398:	88ba      	ldrh	r2, [r7, #4]
 800539a:	8a3b      	ldrh	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	b29b      	uxth	r3, r3
 80053a0:	883a      	ldrh	r2, [r7, #0]
 80053a2:	4619      	mov	r1, r3
 80053a4:	f7ff ff1e 	bl	80051e4 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 80053a8:	88fa      	ldrh	r2, [r7, #6]
 80053aa:	89fb      	ldrh	r3, [r7, #14]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	b298      	uxth	r0, r3
 80053b0:	88ba      	ldrh	r2, [r7, #4]
 80053b2:	8a3b      	ldrh	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	883a      	ldrh	r2, [r7, #0]
 80053ba:	4619      	mov	r1, r3
 80053bc:	f7ff ff12 	bl	80051e4 <Displ_Pixel>
    while (x<y) {
 80053c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80053c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	f6ff af77 	blt.w	80052bc <Displ_drawCircle+0x8c>
    }
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd90      	pop	{r4, r7, pc}

080053d8 <Displ_CLS>:

/*****************
 * @brief   clear display with a color.
 * @param   bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af02      	add	r7, sp, #8
 80053de:	4603      	mov	r3, r0
 80053e0:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(0, 0, _width, _height, bgcolor);
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <Displ_CLS+0x30>)
 80053e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	4b08      	ldr	r3, [pc, #32]	; (800540c <Displ_CLS+0x34>)
 80053ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053f0:	b299      	uxth	r1, r3
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	460b      	mov	r3, r1
 80053f8:	2100      	movs	r1, #0
 80053fa:	2000      	movs	r0, #0
 80053fc:	f7ff fe38 	bl	8005070 <Displ_FillArea>
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	200021e6 	.word	0x200021e6
 800540c:	200021e8 	.word	0x200021e8

08005410 <Displ_Line>:

/************************************************************************
 * @brief   draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8005410:	b590      	push	{r4, r7, lr}
 8005412:	b08b      	sub	sp, #44	; 0x2c
 8005414:	af02      	add	r7, sp, #8
 8005416:	4604      	mov	r4, r0
 8005418:	4608      	mov	r0, r1
 800541a:	4611      	mov	r1, r2
 800541c:	461a      	mov	r2, r3
 800541e:	4623      	mov	r3, r4
 8005420:	80fb      	strh	r3, [r7, #6]
 8005422:	4603      	mov	r3, r0
 8005424:	80bb      	strh	r3, [r7, #4]
 8005426:	460b      	mov	r3, r1
 8005428:	807b      	strh	r3, [r7, #2]
 800542a:	4613      	mov	r3, r2
 800542c:	803b      	strh	r3, [r7, #0]
    int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 800542e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005432:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005436:	429a      	cmp	r2, r3
 8005438:	d123      	bne.n	8005482 <Displ_Line+0x72>
        if (y1>y0){
 800543a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800543e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005442:	429a      	cmp	r2, r3
 8005444:	dd0e      	ble.n	8005464 <Displ_Line+0x54>
            Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8005446:	88f8      	ldrh	r0, [r7, #6]
 8005448:	88b9      	ldrh	r1, [r7, #4]
 800544a:	883a      	ldrh	r2, [r7, #0]
 800544c:	88bb      	ldrh	r3, [r7, #4]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	b29b      	uxth	r3, r3
 8005452:	3301      	adds	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	4613      	mov	r3, r2
 800545c:	2201      	movs	r2, #1
 800545e:	f7ff fe07 	bl	8005070 <Displ_FillArea>
        }
        else {
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
        }
        return;
 8005462:	e103      	b.n	800566c <Displ_Line+0x25c>
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8005464:	88f8      	ldrh	r0, [r7, #6]
 8005466:	8839      	ldrh	r1, [r7, #0]
 8005468:	88ba      	ldrh	r2, [r7, #4]
 800546a:	883b      	ldrh	r3, [r7, #0]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	b29b      	uxth	r3, r3
 8005470:	3301      	adds	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	2201      	movs	r2, #1
 800547c:	f7ff fdf8 	bl	8005070 <Displ_FillArea>
        return;
 8005480:	e0f4      	b.n	800566c <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8005482:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005486:	f9b7 3000 	ldrsh.w	r3, [r7]
 800548a:	429a      	cmp	r2, r3
 800548c:	d121      	bne.n	80054d2 <Displ_Line+0xc2>
        if (x1>x0)
 800548e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005496:	429a      	cmp	r2, r3
 8005498:	dd0d      	ble.n	80054b6 <Displ_Line+0xa6>
            Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 800549a:	88f8      	ldrh	r0, [r7, #6]
 800549c:	88b9      	ldrh	r1, [r7, #4]
 800549e:	887a      	ldrh	r2, [r7, #2]
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3301      	adds	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	2301      	movs	r3, #1
 80054b0:	f7ff fdde 	bl	8005070 <Displ_FillArea>
        else
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
        return;
 80054b4:	e0da      	b.n	800566c <Displ_Line+0x25c>
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 80054b6:	8878      	ldrh	r0, [r7, #2]
 80054b8:	8839      	ldrh	r1, [r7, #0]
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	887b      	ldrh	r3, [r7, #2]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3301      	adds	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	2301      	movs	r3, #1
 80054cc:	f7ff fdd0 	bl	8005070 <Displ_FillArea>
        return;
 80054d0:	e0cc      	b.n	800566c <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 80054d2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80054d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054da:	429a      	cmp	r2, r3
 80054dc:	dd05      	ble.n	80054ea <Displ_Line+0xda>
 80054de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80054e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054e6:	1ad2      	subs	r2, r2, r3
 80054e8:	e004      	b.n	80054f4 <Displ_Line+0xe4>
 80054ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80054ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80054f2:	1ad2      	subs	r2, r2, r3
 80054f4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80054f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054fc:	4299      	cmp	r1, r3
 80054fe:	dd05      	ble.n	800550c <Displ_Line+0xfc>
 8005500:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005508:	1acb      	subs	r3, r1, r3
 800550a:	e004      	b.n	8005516 <Displ_Line+0x106>
 800550c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8005510:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005514:	1acb      	subs	r3, r1, r3
 8005516:	429a      	cmp	r2, r3
 8005518:	bfcc      	ite	gt
 800551a:	2301      	movgt	r3, #1
 800551c:	2300      	movle	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8005522:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	827b      	strh	r3, [r7, #18]
 800552e:	88bb      	ldrh	r3, [r7, #4]
 8005530:	80fb      	strh	r3, [r7, #6]
 8005532:	8a7b      	ldrh	r3, [r7, #18]
 8005534:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8005536:	887b      	ldrh	r3, [r7, #2]
 8005538:	823b      	strh	r3, [r7, #16]
 800553a:	883b      	ldrh	r3, [r7, #0]
 800553c:	807b      	strh	r3, [r7, #2]
 800553e:	8a3b      	ldrh	r3, [r7, #16]
 8005540:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8005542:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005546:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800554a:	429a      	cmp	r2, r3
 800554c:	dd0b      	ble.n	8005566 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	81fb      	strh	r3, [r7, #14]
 8005552:	887b      	ldrh	r3, [r7, #2]
 8005554:	80fb      	strh	r3, [r7, #6]
 8005556:	89fb      	ldrh	r3, [r7, #14]
 8005558:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 800555a:	88bb      	ldrh	r3, [r7, #4]
 800555c:	81bb      	strh	r3, [r7, #12]
 800555e:	883b      	ldrh	r3, [r7, #0]
 8005560:	80bb      	strh	r3, [r7, #4]
 8005562:	89bb      	ldrh	r3, [r7, #12]
 8005564:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8005566:	887a      	ldrh	r2, [r7, #2]
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	b29b      	uxth	r3, r3
 800556e:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8005570:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005574:	105b      	asrs	r3, r3, #1
 8005576:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8005578:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800557c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005580:	429a      	cmp	r2, r3
 8005582:	da07      	bge.n	8005594 <Displ_Line+0x184>
        dy = y1-y0;
 8005584:	883a      	ldrh	r2, [r7, #0]
 8005586:	88bb      	ldrh	r3, [r7, #4]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	b29b      	uxth	r3, r3
 800558c:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 800558e:	2301      	movs	r3, #1
 8005590:	837b      	strh	r3, [r7, #26]
 8005592:	e007      	b.n	80055a4 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8005594:	88ba      	ldrh	r2, [r7, #4]
 8005596:	883b      	ldrh	r3, [r7, #0]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	b29b      	uxth	r3, r3
 800559c:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 800559e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055a2:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 80055a4:	2300      	movs	r3, #0
 80055a6:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	83bb      	strh	r3, [r7, #28]
 80055ac:	e03a      	b.n	8005624 <Displ_Line+0x214>
        l++;
 80055ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3301      	adds	r3, #1
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 80055ba:	8b3a      	ldrh	r2, [r7, #24]
 80055bc:	8afb      	ldrh	r3, [r7, #22]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 80055c4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	da25      	bge.n	8005618 <Displ_Line+0x208>
            if (steep) {
 80055cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d009      	beq.n	80055e8 <Displ_Line+0x1d8>
                Displ_FillArea(y0, x0, 1, l, color);
 80055d4:	88b8      	ldrh	r0, [r7, #4]
 80055d6:	88f9      	ldrh	r1, [r7, #6]
 80055d8:	8bfa      	ldrh	r2, [r7, #30]
 80055da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	4613      	mov	r3, r2
 80055e0:	2201      	movs	r2, #1
 80055e2:	f7ff fd45 	bl	8005070 <Displ_FillArea>
 80055e6:	e007      	b.n	80055f8 <Displ_Line+0x1e8>
            } else {
                Displ_FillArea(x0, y0, l, 1, color);
 80055e8:	88f8      	ldrh	r0, [r7, #6]
 80055ea:	88b9      	ldrh	r1, [r7, #4]
 80055ec:	8bfa      	ldrh	r2, [r7, #30]
 80055ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	2301      	movs	r3, #1
 80055f4:	f7ff fd3c 	bl	8005070 <Displ_FillArea>
            }
            y0 += ystep;
 80055f8:	88ba      	ldrh	r2, [r7, #4]
 80055fa:	8b7b      	ldrh	r3, [r7, #26]
 80055fc:	4413      	add	r3, r2
 80055fe:	b29b      	uxth	r3, r3
 8005600:	80bb      	strh	r3, [r7, #4]
            l=0;
 8005602:	2300      	movs	r3, #0
 8005604:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8005606:	8bbb      	ldrh	r3, [r7, #28]
 8005608:	3301      	adds	r3, #1
 800560a:	b29b      	uxth	r3, r3
 800560c:	80fb      	strh	r3, [r7, #6]
            err += dx;
 800560e:	8b3a      	ldrh	r2, [r7, #24]
 8005610:	897b      	ldrh	r3, [r7, #10]
 8005612:	4413      	add	r3, r2
 8005614:	b29b      	uxth	r3, r3
 8005616:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8005618:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800561c:	b29b      	uxth	r3, r3
 800561e:	3301      	adds	r3, #1
 8005620:	b29b      	uxth	r3, r3
 8005622:	83bb      	strh	r3, [r7, #28]
 8005624:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005628:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800562c:	429a      	cmp	r2, r3
 800562e:	ddbe      	ble.n	80055ae <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8005630:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d019      	beq.n	800566c <Displ_Line+0x25c>
        if (steep) {
 8005638:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00b      	beq.n	8005658 <Displ_Line+0x248>
            Displ_FillArea(y0, x0, 1, l-1, color);
 8005640:	88b8      	ldrh	r0, [r7, #4]
 8005642:	88f9      	ldrh	r1, [r7, #6]
 8005644:	8bfb      	ldrh	r3, [r7, #30]
 8005646:	3b01      	subs	r3, #1
 8005648:	b29a      	uxth	r2, r3
 800564a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	4613      	mov	r3, r2
 8005650:	2201      	movs	r2, #1
 8005652:	f7ff fd0d 	bl	8005070 <Displ_FillArea>
 8005656:	e009      	b.n	800566c <Displ_Line+0x25c>
        } else {
            Displ_FillArea(x0, y0, l-1,1, color);
 8005658:	88f8      	ldrh	r0, [r7, #6]
 800565a:	88b9      	ldrh	r1, [r7, #4]
 800565c:	8bfb      	ldrh	r3, [r7, #30]
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	2301      	movs	r3, #1
 8005668:	f7ff fd02 	bl	8005070 <Displ_FillArea>
        }
    }
}
 800566c:	3724      	adds	r7, #36	; 0x24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd90      	pop	{r4, r7, pc}

08005672 <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8005672:	b590      	push	{r4, r7, lr}
 8005674:	b091      	sub	sp, #68	; 0x44
 8005676:	af02      	add	r7, sp, #8
 8005678:	4604      	mov	r4, r0
 800567a:	4608      	mov	r0, r1
 800567c:	4611      	mov	r1, r2
 800567e:	461a      	mov	r2, r3
 8005680:	4623      	mov	r3, r4
 8005682:	80fb      	strh	r3, [r7, #6]
 8005684:	4603      	mov	r3, r0
 8005686:	80bb      	strh	r3, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	807b      	strh	r3, [r7, #2]
 800568c:	4613      	mov	r3, r2
 800568e:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8005690:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005694:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005698:	429a      	cmp	r2, r3
 800569a:	dd0b      	ble.n	80056b4 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 800569c:	88bb      	ldrh	r3, [r7, #4]
 800569e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80056a0:	883b      	ldrh	r3, [r7, #0]
 80056a2:	80bb      	strh	r3, [r7, #4]
 80056a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056a6:	803b      	strh	r3, [r7, #0]
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80056ac:	887b      	ldrh	r3, [r7, #2]
 80056ae:	80fb      	strh	r3, [r7, #6]
 80056b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056b2:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 80056b4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80056b8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80056bc:	429a      	cmp	r2, r3
 80056be:	dd0f      	ble.n	80056e0 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 80056c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80056c4:	847b      	strh	r3, [r7, #34]	; 0x22
 80056c6:	883b      	ldrh	r3, [r7, #0]
 80056c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80056cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056ce:	803b      	strh	r3, [r7, #0]
 80056d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056d4:	843b      	strh	r3, [r7, #32]
 80056d6:	887b      	ldrh	r3, [r7, #2]
 80056d8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80056dc:	8c3b      	ldrh	r3, [r7, #32]
 80056de:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80056e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80056e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	dd0b      	ble.n	8005704 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80056ec:	88bb      	ldrh	r3, [r7, #4]
 80056ee:	83fb      	strh	r3, [r7, #30]
 80056f0:	883b      	ldrh	r3, [r7, #0]
 80056f2:	80bb      	strh	r3, [r7, #4]
 80056f4:	8bfb      	ldrh	r3, [r7, #30]
 80056f6:	803b      	strh	r3, [r7, #0]
 80056f8:	88fb      	ldrh	r3, [r7, #6]
 80056fa:	83bb      	strh	r3, [r7, #28]
 80056fc:	887b      	ldrh	r3, [r7, #2]
 80056fe:	80fb      	strh	r3, [r7, #6]
 8005700:	8bbb      	ldrh	r3, [r7, #28]
 8005702:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8005704:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005708:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800570c:	429a      	cmp	r2, r3
 800570e:	d136      	bne.n	800577e <Displ_fillTriangle+0x10c>
        a = b = x0;
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005714:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005716:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8005718:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800571c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005720:	429a      	cmp	r2, r3
 8005722:	da02      	bge.n	800572a <Displ_fillTriangle+0xb8>
 8005724:	887b      	ldrh	r3, [r7, #2]
 8005726:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005728:	e007      	b.n	800573a <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 800572a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800572e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005732:	429a      	cmp	r2, r3
 8005734:	dd01      	ble.n	800573a <Displ_fillTriangle+0xc8>
 8005736:	887b      	ldrh	r3, [r7, #2]
 8005738:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 800573a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800573e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005742:	429a      	cmp	r2, r3
 8005744:	da03      	bge.n	800574e <Displ_fillTriangle+0xdc>
 8005746:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800574a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800574c:	e008      	b.n	8005760 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 800574e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005752:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005756:	429a      	cmp	r2, r3
 8005758:	dd02      	ble.n	8005760 <Displ_fillTriangle+0xee>
 800575a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800575e:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8005760:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005764:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005768:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800576c:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005770:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	4623      	mov	r3, r4
 8005778:	f7ff fe4a 	bl	8005410 <Displ_Line>
        return;
 800577c:	e0d2      	b.n	8005924 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 800577e:	887a      	ldrh	r2, [r7, #2]
 8005780:	88fb      	ldrh	r3, [r7, #6]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	b29b      	uxth	r3, r3
 8005786:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8005788:	883a      	ldrh	r2, [r7, #0]
 800578a:	88bb      	ldrh	r3, [r7, #4]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	b29b      	uxth	r3, r3
 8005790:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8005792:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	b29b      	uxth	r3, r3
 800579c:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800579e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80057a2:	88bb      	ldrh	r3, [r7, #4]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 80057aa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80057ae:	887b      	ldrh	r3, [r7, #2]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 80057b6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80057ba:	883b      	ldrh	r3, [r7, #0]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	b29b      	uxth	r3, r3
 80057c0:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 80057c2:	2300      	movs	r3, #0
 80057c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80057ca:	f9b7 2000 	ldrsh.w	r2, [r7]
 80057ce:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d102      	bne.n	80057dc <Displ_fillTriangle+0x16a>
 80057d6:	883b      	ldrh	r3, [r7, #0]
 80057d8:	863b      	strh	r3, [r7, #48]	; 0x30
 80057da:	e003      	b.n	80057e4 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 80057dc:	883b      	ldrh	r3, [r7, #0]
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 80057e4:	88bb      	ldrh	r3, [r7, #4]
 80057e6:	867b      	strh	r3, [r7, #50]	; 0x32
 80057e8:	e03d      	b.n	8005866 <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 80057ea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80057ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	4413      	add	r3, r2
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 80057fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005804:	fb92 f3f3 	sdiv	r3, r2, r3
 8005808:	b29a      	uxth	r2, r3
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	4413      	add	r3, r2
 800580e:	b29b      	uxth	r3, r3
 8005810:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8005812:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005818:	4413      	add	r3, r2
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 800581c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005822:	4413      	add	r3, r2
 8005824:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005826:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800582a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800582e:	429a      	cmp	r2, r3
 8005830:	dd05      	ble.n	800583e <Displ_fillTriangle+0x1cc>
 8005832:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005834:	81bb      	strh	r3, [r7, #12]
 8005836:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005838:	86fb      	strh	r3, [r7, #54]	; 0x36
 800583a:	89bb      	ldrh	r3, [r7, #12]
 800583c:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 800583e:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005842:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005846:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800584a:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800584e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	4623      	mov	r3, r4
 8005856:	f7ff fddb 	bl	8005410 <Displ_Line>
    for(y=y0; y<=last; y++) {
 800585a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800585e:	b29b      	uxth	r3, r3
 8005860:	3301      	adds	r3, #1
 8005862:	b29b      	uxth	r3, r3
 8005864:	867b      	strh	r3, [r7, #50]	; 0x32
 8005866:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800586a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800586e:	429a      	cmp	r2, r3
 8005870:	ddbb      	ble.n	80057ea <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8005872:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005876:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800587a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800587e:	1a8a      	subs	r2, r1, r2
 8005880:	fb02 f303 	mul.w	r3, r2, r3
 8005884:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8005886:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800588a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800588e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005892:	1a8a      	subs	r2, r1, r2
 8005894:	fb02 f303 	mul.w	r3, r2, r3
 8005898:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 800589a:	e03d      	b.n	8005918 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 800589c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80058a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	887b      	ldrh	r3, [r7, #2]
 80058aa:	4413      	add	r3, r2
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 80058b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80058b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	88fb      	ldrh	r3, [r7, #6]
 80058be:	4413      	add	r3, r2
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 80058c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80058c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ca:	4413      	add	r3, r2
 80058cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80058ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80058d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d4:	4413      	add	r3, r2
 80058d6:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80058d8:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80058dc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80058e0:	429a      	cmp	r2, r3
 80058e2:	dd05      	ble.n	80058f0 <Displ_fillTriangle+0x27e>
 80058e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058e6:	81fb      	strh	r3, [r7, #14]
 80058e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058ea:	86fb      	strh	r3, [r7, #54]	; 0x36
 80058ec:	89fb      	ldrh	r3, [r7, #14]
 80058ee:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 80058f0:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 80058f4:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80058f8:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80058fc:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005900:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	4623      	mov	r3, r4
 8005908:	f7ff fd82 	bl	8005410 <Displ_Line>
    for(; y<=y2; y++) {
 800590c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005910:	b29b      	uxth	r3, r3
 8005912:	3301      	adds	r3, #1
 8005914:	b29b      	uxth	r3, r3
 8005916:	867b      	strh	r3, [r7, #50]	; 0x32
 8005918:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800591c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005920:	429a      	cmp	r2, r3
 8005922:	ddbb      	ble.n	800589c <Displ_fillTriangle+0x22a>
    }
}
 8005924:	373c      	adds	r7, #60	; 0x3c
 8005926:	46bd      	mov	sp, r7
 8005928:	bd90      	pop	{r4, r7, pc}
	...

0800592c <Displ_WChar>:
 * @brief   display one character on the display
 * @param   x,y: top left corner of the character to be printed
 *          ch, font, color, bgcolor: as per parameter name
 *          size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 800592c:	b082      	sub	sp, #8
 800592e:	b590      	push	{r4, r7, lr}
 8005930:	b08d      	sub	sp, #52	; 0x34
 8005932:	af00      	add	r7, sp, #0
 8005934:	647b      	str	r3, [r7, #68]	; 0x44
 8005936:	4603      	mov	r3, r0
 8005938:	80fb      	strh	r3, [r7, #6]
 800593a:	460b      	mov	r3, r1
 800593c:	80bb      	strh	r3, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
    uint8_t wsize=font.Width; //printing char width
 8005942:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005946:	76fb      	strb	r3, [r7, #27]

    if (size==2)
 8005948:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800594c:	2b02      	cmp	r3, #2
 800594e:	d102      	bne.n	8005956 <Displ_WChar+0x2a>
        wsize<<= 1;
 8005950:	7efb      	ldrb	r3, [r7, #27]
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	76fb      	strb	r3, [r7, #27]
    bufSize=0;
 8005956:	2300      	movs	r3, #0
 8005958:	623b      	str	r3, [r7, #32]
    bytes=font.Height * font.Size ;
 800595a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800595e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8005962:	fb02 f303 	mul.w	r3, r2, r3
 8005966:	617b      	str	r3, [r7, #20]
    pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8005968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	3b20      	subs	r3, #32
 800596e:	4619      	mov	r1, r3
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	fb01 f303 	mul.w	r3, r1, r3
 8005976:	4413      	add	r3, r2
 8005978:	613b      	str	r3, [r7, #16]
    switch (font.Size) {
 800597a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800597e:	2b02      	cmp	r3, #2
 8005980:	d005      	beq.n	800598e <Displ_WChar+0x62>
 8005982:	2b03      	cmp	r3, #3
 8005984:	d107      	bne.n	8005996 <Displ_WChar+0x6a>
        case 3:
            mask=0x800000;
 8005986:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800598a:	61fb      	str	r3, [r7, #28]
            break;
 800598c:	e005      	b.n	800599a <Displ_WChar+0x6e>
        case 2:
            mask=0x8000;
 800598e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005992:	61fb      	str	r3, [r7, #28]
            break;
 8005994:	e001      	b.n	800599a <Displ_WChar+0x6e>
        default:
            mask=0x80;
 8005996:	2380      	movs	r3, #128	; 0x80
 8005998:	61fb      	str	r3, [r7, #28]
    }

#ifdef Z_RGB565

    uint16_t color1, bgcolor1;
    uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 800599a:	4b60      	ldr	r3, [pc, #384]	; (8005b1c <Displ_WChar+0x1f0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]

    color1 = ((color & 0xFF)<<8 | (color >> 8));            //swapping byte endian: STM32 is little endian, ST7735 is big endian
 80059a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	b21a      	sxth	r2, r3
 80059a8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80059ac:	0a1b      	lsrs	r3, r3, #8
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	b21b      	sxth	r3, r3
 80059b2:	4313      	orrs	r3, r2
 80059b4:	b21b      	sxth	r3, r3
 80059b6:	817b      	strh	r3, [r7, #10]
    bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));      //swapping byte endian: STM32 is little endian, ST7735 is big endian
 80059b8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	b21a      	sxth	r2, r3
 80059c0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80059c4:	0a1b      	lsrs	r3, r3, #8
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	b21b      	sxth	r3, r3
 80059ca:	4313      	orrs	r3, r2
 80059cc:	b21b      	sxth	r3, r3
 80059ce:	813b      	strh	r3, [r7, #8]

    for(i = 0; i < (bytes); i+=font.Size){
 80059d0:	2300      	movs	r3, #0
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d4:	e06f      	b.n	8005ab6 <Displ_WChar+0x18a>
        b=0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	62bb      	str	r3, [r7, #40]	; 0x28
        switch (font.Size) {
 80059da:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d015      	beq.n	8005a0e <Displ_WChar+0xe2>
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d120      	bne.n	8005a28 <Displ_WChar+0xfc>
            case 3:
                b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ea:	4413      	add	r3, r2
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	041a      	lsls	r2, r3, #16
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f2:	3301      	adds	r3, #1
 80059f4:	6939      	ldr	r1, [r7, #16]
 80059f6:	440b      	add	r3, r1
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	4313      	orrs	r3, r2
 80059fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a00:	3202      	adds	r2, #2
 8005a02:	6939      	ldr	r1, [r7, #16]
 8005a04:	440a      	add	r2, r1
 8005a06:	7812      	ldrb	r2, [r2, #0]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8005a0c:	e011      	b.n	8005a32 <Displ_WChar+0x106>
            case 2:
                b=pos[i]<<8 | pos[i+1];
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	4413      	add	r3, r2
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a1a:	3201      	adds	r2, #1
 8005a1c:	6939      	ldr	r1, [r7, #16]
 8005a1e:	440a      	add	r2, r1
 8005a20:	7812      	ldrb	r2, [r2, #0]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8005a26:	e004      	b.n	8005a32 <Displ_WChar+0x106>
            default:
                b=pos[i];
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	4413      	add	r3, r2
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        for(j = 0; j < font.Width; j++) {
 8005a32:	2300      	movs	r3, #0
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
 8005a36:	e032      	b.n	8005a9e <Displ_WChar+0x172>
            if((b << j) & mask)  {
 8005a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	409a      	lsls	r2, r3
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4013      	ands	r3, r2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d014      	beq.n	8005a70 <Displ_WChar+0x144>
                dispBuffer16[bufSize++] = color1;
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	623a      	str	r2, [r7, #32]
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	897a      	ldrh	r2, [r7, #10]
 8005a54:	801a      	strh	r2, [r3, #0]
                if (size==2){
 8005a56:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d11c      	bne.n	8005a98 <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = color1;
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	623a      	str	r2, [r7, #32]
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	897a      	ldrh	r2, [r7, #10]
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	e013      	b.n	8005a98 <Displ_WChar+0x16c>
                }
            } else {
                dispBuffer16[bufSize++] = bgcolor1;
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	623a      	str	r2, [r7, #32]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	893a      	ldrh	r2, [r7, #8]
 8005a7e:	801a      	strh	r2, [r3, #0]
                if (size==2) {
 8005a80:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d107      	bne.n	8005a98 <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = bgcolor1;
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	623a      	str	r2, [r7, #32]
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	893a      	ldrh	r2, [r7, #8]
 8005a96:	801a      	strh	r2, [r3, #0]
        for(j = 0; j < font.Width; j++) {
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d3c6      	bcc.n	8005a38 <Displ_WChar+0x10c>
    for(i = 0; i < (bytes); i+=font.Size){
 8005aaa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005aae:	461a      	mov	r2, r3
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	4413      	add	r3, r2
 8005ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d38b      	bcc.n	80059d6 <Displ_WChar+0xaa>
                }
            }
        }
    }
    bufSize<<=1;
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	623b      	str	r3, [r7, #32]
            }
        }
    }
#endif

    Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8005ac4:	7efb      	ldrb	r3, [r7, #27]
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	88fb      	ldrh	r3, [r7, #6]
 8005aca:	4413      	add	r3, r2
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29c      	uxth	r4, r3
 8005ad2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005ad6:	88bb      	ldrh	r3, [r7, #4]
 8005ad8:	4413      	add	r3, r2
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	88b9      	ldrh	r1, [r7, #4]
 8005ae2:	88f8      	ldrh	r0, [r7, #6]
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	f7ff f9d7 	bl	8004e98 <Displ_SetAddressWindow>
    Displ_WriteData(dispBuffer,bufSize,0);
 8005aea:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <Displ_WChar+0x1f0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2200      	movs	r2, #0
 8005af0:	6a39      	ldr	r1, [r7, #32]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff f977 	bl	8004de6 <Displ_WriteData>
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8005af8:	4b08      	ldr	r3, [pc, #32]	; (8005b1c <Displ_WChar+0x1f0>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a08      	ldr	r2, [pc, #32]	; (8005b20 <Displ_WChar+0x1f4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d101      	bne.n	8005b06 <Displ_WChar+0x1da>
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <Displ_WChar+0x1f8>)
 8005b04:	e000      	b.n	8005b08 <Displ_WChar+0x1dc>
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <Displ_WChar+0x1f4>)
 8005b08:	4a04      	ldr	r2, [pc, #16]	; (8005b1c <Displ_WChar+0x1f0>)
 8005b0a:	6013      	str	r3, [r2, #0]

}
 8005b0c:	bf00      	nop
 8005b0e:	3734      	adds	r7, #52	; 0x34
 8005b10:	46bd      	mov	sp, r7
 8005b12:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005b16:	b002      	add	sp, #8
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	2000005c 	.word	0x2000005c
 8005b20:	200021ec 	.word	0x200021ec
 8005b24:	200025ec 	.word	0x200025ec

08005b28 <Displ_WString>:
 *          font    to bu used
 *          size    1 (normal), 2 (double width)
 *          color   font color
 *          bgcolor background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005b28:	b082      	sub	sp, #8
 8005b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b2c:	b08b      	sub	sp, #44	; 0x2c
 8005b2e:	af06      	add	r7, sp, #24
 8005b30:	603a      	str	r2, [r7, #0]
 8005b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b34:	4603      	mov	r3, r0
 8005b36:	80fb      	strh	r3, [r7, #6]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	80bb      	strh	r3, [r7, #4]
    uint16_t delta=font.Width;
 8005b3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005b3e:	81fb      	strh	r3, [r7, #14]
    if (size>1)
 8005b40:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d922      	bls.n	8005b8e <Displ_WString+0x66>
        delta<<=1;
 8005b48:	89fb      	ldrh	r3, [r7, #14]
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8005b4e:	e01e      	b.n	8005b8e <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781a      	ldrb	r2, [r3, #0]
 8005b54:	88bd      	ldrh	r5, [r7, #4]
 8005b56:	88fc      	ldrh	r4, [r7, #6]
 8005b58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b5c:	9304      	str	r3, [sp, #16]
 8005b5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b60:	9303      	str	r3, [sp, #12]
 8005b62:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005b66:	9302      	str	r3, [sp, #8]
 8005b68:	466e      	mov	r6, sp
 8005b6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005b72:	e886 0003 	stmia.w	r6, {r0, r1}
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	4629      	mov	r1, r5
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	f7ff fed6 	bl	800592c <Displ_WChar>
        x += delta;
 8005b80:	88fa      	ldrh	r2, [r7, #6]
 8005b82:	89fb      	ldrh	r3, [r7, #14]
 8005b84:	4413      	add	r3, r2
 8005b86:	80fb      	strh	r3, [r7, #6]
        str++;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	603b      	str	r3, [r7, #0]
    while(*str) {
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1dc      	bne.n	8005b50 <Displ_WString+0x28>
    }
}
 8005b96:	bf00      	nop
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005ba2:	b002      	add	sp, #8
 8005ba4:	4770      	bx	lr
	...

08005ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005be0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005bac:	f7ff f878 	bl	8004ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005bb0:	480c      	ldr	r0, [pc, #48]	; (8005be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005bb2:	490d      	ldr	r1, [pc, #52]	; (8005be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005bb4:	4a0d      	ldr	r2, [pc, #52]	; (8005bec <LoopForever+0xe>)
  movs r3, #0
 8005bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005bb8:	e002      	b.n	8005bc0 <LoopCopyDataInit>

08005bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005bbe:	3304      	adds	r3, #4

08005bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005bc4:	d3f9      	bcc.n	8005bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	; (8005bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005bc8:	4c0a      	ldr	r4, [pc, #40]	; (8005bf4 <LoopForever+0x16>)
  movs r3, #0
 8005bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005bcc:	e001      	b.n	8005bd2 <LoopFillZerobss>

08005bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005bd0:	3204      	adds	r2, #4

08005bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005bd4:	d3fb      	bcc.n	8005bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005bd6:	f004 fe17 	bl	800a808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005bda:	f7fc ffe1 	bl	8002ba0 <main>

08005bde <LoopForever>:

LoopForever:
    b LoopForever
 8005bde:	e7fe      	b.n	8005bde <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005be0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005be8:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8005bec:	0800de2c 	.word	0x0800de2c
  ldr r2, =_sbss
 8005bf0:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8005bf4:	20002a08 	.word	0x20002a08

08005bf8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005bf8:	e7fe      	b.n	8005bf8 <ADC1_IRQHandler>
	...

08005bfc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c00:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <HAL_Init+0x28>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a07      	ldr	r2, [pc, #28]	; (8005c24 <HAL_Init+0x28>)
 8005c06:	f043 0310 	orr.w	r3, r3, #16
 8005c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c0c:	2003      	movs	r0, #3
 8005c0e:	f000 f94f 	bl	8005eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005c12:	200f      	movs	r0, #15
 8005c14:	f000 f808 	bl	8005c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005c18:	f7fe fdbc 	bl	8004794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40022000 	.word	0x40022000

08005c28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005c30:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <HAL_InitTick+0x54>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <HAL_InitTick+0x58>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 f967 	bl	8005f1a <HAL_SYSTICK_Config>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e00e      	b.n	8005c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b0f      	cmp	r3, #15
 8005c5a:	d80a      	bhi.n	8005c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	f000 f92f 	bl	8005ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c68:	4a06      	ldr	r2, [pc, #24]	; (8005c84 <HAL_InitTick+0x5c>)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e000      	b.n	8005c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000054 	.word	0x20000054
 8005c80:	20000064 	.word	0x20000064
 8005c84:	20000060 	.word	0x20000060

08005c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <HAL_IncTick+0x20>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <HAL_IncTick+0x24>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4413      	add	r3, r2
 8005c98:	4a04      	ldr	r2, [pc, #16]	; (8005cac <HAL_IncTick+0x24>)
 8005c9a:	6013      	str	r3, [r2, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	20000064 	.word	0x20000064
 8005cac:	200029f4 	.word	0x200029f4

08005cb0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  return uwTick;  
 8005cb4:	4b03      	ldr	r3, [pc, #12]	; (8005cc4 <HAL_GetTick+0x14>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	200029f4 	.word	0x200029f4

08005cc8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005cd0:	f7ff ffee 	bl	8005cb0 <HAL_GetTick>
 8005cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d005      	beq.n	8005cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ce2:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <HAL_Delay+0x44>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4413      	add	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005cee:	bf00      	nop
 8005cf0:	f7ff ffde 	bl	8005cb0 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d8f7      	bhi.n	8005cf0 <HAL_Delay+0x28>
  {
  }
}
 8005d00:	bf00      	nop
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000064 	.word	0x20000064

08005d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d20:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <__NVIC_SetPriorityGrouping+0x44>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d42:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <__NVIC_SetPriorityGrouping+0x44>)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	60d3      	str	r3, [r2, #12]
}
 8005d48:	bf00      	nop
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	e000ed00 	.word	0xe000ed00

08005d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d5c:	4b04      	ldr	r3, [pc, #16]	; (8005d70 <__NVIC_GetPriorityGrouping+0x18>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	0a1b      	lsrs	r3, r3, #8
 8005d62:	f003 0307 	and.w	r3, r3, #7
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	e000ed00 	.word	0xe000ed00

08005d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	db0b      	blt.n	8005d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d86:	79fb      	ldrb	r3, [r7, #7]
 8005d88:	f003 021f 	and.w	r2, r3, #31
 8005d8c:	4907      	ldr	r1, [pc, #28]	; (8005dac <__NVIC_EnableIRQ+0x38>)
 8005d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d92:	095b      	lsrs	r3, r3, #5
 8005d94:	2001      	movs	r0, #1
 8005d96:	fa00 f202 	lsl.w	r2, r0, r2
 8005d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	e000e100 	.word	0xe000e100

08005db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	6039      	str	r1, [r7, #0]
 8005dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	db0a      	blt.n	8005dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	490c      	ldr	r1, [pc, #48]	; (8005dfc <__NVIC_SetPriority+0x4c>)
 8005dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dce:	0112      	lsls	r2, r2, #4
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	440b      	add	r3, r1
 8005dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dd8:	e00a      	b.n	8005df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	4908      	ldr	r1, [pc, #32]	; (8005e00 <__NVIC_SetPriority+0x50>)
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	3b04      	subs	r3, #4
 8005de8:	0112      	lsls	r2, r2, #4
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	440b      	add	r3, r1
 8005dee:	761a      	strb	r2, [r3, #24]
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	e000e100 	.word	0xe000e100
 8005e00:	e000ed00 	.word	0xe000ed00

08005e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b089      	sub	sp, #36	; 0x24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f1c3 0307 	rsb	r3, r3, #7
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	bf28      	it	cs
 8005e22:	2304      	movcs	r3, #4
 8005e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	3304      	adds	r3, #4
 8005e2a:	2b06      	cmp	r3, #6
 8005e2c:	d902      	bls.n	8005e34 <NVIC_EncodePriority+0x30>
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	3b03      	subs	r3, #3
 8005e32:	e000      	b.n	8005e36 <NVIC_EncodePriority+0x32>
 8005e34:	2300      	movs	r3, #0
 8005e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e38:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	43da      	mvns	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	401a      	ands	r2, r3
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	fa01 f303 	lsl.w	r3, r1, r3
 8005e56:	43d9      	mvns	r1, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e5c:	4313      	orrs	r3, r2
         );
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3724      	adds	r7, #36	; 0x24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
	...

08005e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e7c:	d301      	bcc.n	8005e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e00f      	b.n	8005ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e82:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <SysTick_Config+0x40>)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e8a:	210f      	movs	r1, #15
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e90:	f7ff ff8e 	bl	8005db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <SysTick_Config+0x40>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e9a:	4b04      	ldr	r3, [pc, #16]	; (8005eac <SysTick_Config+0x40>)
 8005e9c:	2207      	movs	r2, #7
 8005e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	e000e010 	.word	0xe000e010

08005eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff ff29 	bl	8005d10 <__NVIC_SetPriorityGrouping>
}
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b086      	sub	sp, #24
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	4603      	mov	r3, r0
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ed8:	f7ff ff3e 	bl	8005d58 <__NVIC_GetPriorityGrouping>
 8005edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	6978      	ldr	r0, [r7, #20]
 8005ee4:	f7ff ff8e 	bl	8005e04 <NVIC_EncodePriority>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eee:	4611      	mov	r1, r2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff ff5d 	bl	8005db0 <__NVIC_SetPriority>
}
 8005ef6:	bf00      	nop
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	4603      	mov	r3, r0
 8005f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff ff31 	bl	8005d74 <__NVIC_EnableIRQ>
}
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff ffa2 	bl	8005e6c <SysTick_Config>
 8005f28:	4603      	mov	r3, r0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e037      	b.n	8005fb8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005f5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005f62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f9b8 	bl	8006310 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}  
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_DMA_Start_IT+0x20>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e04a      	b.n	8006076 <HAL_DMA_Start_IT+0xb6>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d13a      	bne.n	8006068 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0201 	bic.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 f94b 	bl	80062b2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	2b00      	cmp	r3, #0
 8006022:	d008      	beq.n	8006036 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 020e 	orr.w	r2, r2, #14
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	e00f      	b.n	8006056 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 020a 	orr.w	r2, r2, #10
 8006044:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0204 	bic.w	r2, r2, #4
 8006054:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0201 	orr.w	r2, r2, #1
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	e005      	b.n	8006074 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006070:	2302      	movs	r3, #2
 8006072:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8006074:	7dfb      	ldrb	r3, [r7, #23]
} 
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800608c:	2b02      	cmp	r3, #2
 800608e:	d008      	beq.n	80060a2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2204      	movs	r2, #4
 8006094:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e020      	b.n	80060e4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 020e 	bic.w	r2, r2, #14
 80060b0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0201 	bic.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	2101      	movs	r1, #1
 80060cc:	fa01 f202 	lsl.w	r2, r1, r2
 80060d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006102:	2b02      	cmp	r3, #2
 8006104:	d005      	beq.n	8006112 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2204      	movs	r2, #4
 800610a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
 8006110:	e027      	b.n	8006162 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 020e 	bic.w	r2, r2, #14
 8006120:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0201 	bic.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613a:	2101      	movs	r1, #1
 800613c:	fa01 f202 	lsl.w	r2, r1, r2
 8006140:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	4798      	blx	r3
    } 
  }
  return status;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006188:	2204      	movs	r2, #4
 800618a:	409a      	lsls	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4013      	ands	r3, r2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d024      	beq.n	80061de <HAL_DMA_IRQHandler+0x72>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01f      	beq.n	80061de <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0320 	and.w	r3, r3, #32
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d107      	bne.n	80061bc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0204 	bic.w	r2, r2, #4
 80061ba:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c4:	2104      	movs	r1, #4
 80061c6:	fa01 f202 	lsl.w	r2, r1, r2
 80061ca:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d06a      	beq.n	80062aa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80061dc:	e065      	b.n	80062aa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	2202      	movs	r2, #2
 80061e4:	409a      	lsls	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4013      	ands	r3, r2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d02c      	beq.n	8006248 <HAL_DMA_IRQHandler+0xdc>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d027      	beq.n	8006248 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0320 	and.w	r3, r3, #32
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10b      	bne.n	800621e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 020a 	bic.w	r2, r2, #10
 8006214:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006226:	2102      	movs	r1, #2
 8006228:	fa01 f202 	lsl.w	r2, r1, r2
 800622c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	2b00      	cmp	r3, #0
 800623c:	d035      	beq.n	80062aa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006246:	e030      	b.n	80062aa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624c:	2208      	movs	r2, #8
 800624e:	409a      	lsls	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4013      	ands	r3, r2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d028      	beq.n	80062aa <HAL_DMA_IRQHandler+0x13e>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d023      	beq.n	80062aa <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 020e 	bic.w	r2, r2, #14
 8006270:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627a:	2101      	movs	r1, #1
 800627c:	fa01 f202 	lsl.w	r2, r1, r2
 8006280:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	2b00      	cmp	r3, #0
 800629e:	d004      	beq.n	80062aa <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	4798      	blx	r3
    }
  }
}  
 80062a8:	e7ff      	b.n	80062aa <HAL_DMA_IRQHandler+0x13e>
 80062aa:	bf00      	nop
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b085      	sub	sp, #20
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
 80062be:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c8:	2101      	movs	r1, #1
 80062ca:	fa01 f202 	lsl.w	r2, r1, r2
 80062ce:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d108      	bne.n	80062f2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80062f0:	e007      	b.n	8006302 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	60da      	str	r2, [r3, #12]
}
 8006302:	bf00      	nop
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	4b09      	ldr	r3, [pc, #36]	; (8006344 <DMA_CalcBaseAndBitshift+0x34>)
 8006320:	4413      	add	r3, r2
 8006322:	4a09      	ldr	r2, [pc, #36]	; (8006348 <DMA_CalcBaseAndBitshift+0x38>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	091b      	lsrs	r3, r3, #4
 800632a:	009a      	lsls	r2, r3, #2
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a06      	ldr	r2, [pc, #24]	; (800634c <DMA_CalcBaseAndBitshift+0x3c>)
 8006334:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	bffdfff8 	.word	0xbffdfff8
 8006348:	cccccccd 	.word	0xcccccccd
 800634c:	40020000 	.word	0x40020000

08006350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800635a:	2300      	movs	r3, #0
 800635c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800635e:	e14e      	b.n	80065fe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	2101      	movs	r1, #1
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	fa01 f303 	lsl.w	r3, r1, r3
 800636c:	4013      	ands	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 8140 	beq.w	80065f8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f003 0303 	and.w	r3, r3, #3
 8006380:	2b01      	cmp	r3, #1
 8006382:	d005      	beq.n	8006390 <HAL_GPIO_Init+0x40>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f003 0303 	and.w	r3, r3, #3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d130      	bne.n	80063f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	2203      	movs	r2, #3
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	43db      	mvns	r3, r3
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4013      	ands	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063c6:	2201      	movs	r2, #1
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	fa02 f303 	lsl.w	r3, r2, r3
 80063ce:	43db      	mvns	r3, r3
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4013      	ands	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	091b      	lsrs	r3, r3, #4
 80063dc:	f003 0201 	and.w	r2, r3, #1
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	fa02 f303 	lsl.w	r3, r2, r3
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d017      	beq.n	800642e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	2203      	movs	r2, #3
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	43db      	mvns	r3, r3
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4013      	ands	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d123      	bne.n	8006482 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	08da      	lsrs	r2, r3, #3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3208      	adds	r2, #8
 8006442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006446:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	220f      	movs	r2, #15
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	43db      	mvns	r3, r3
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4013      	ands	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	691a      	ldr	r2, [r3, #16]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	fa02 f303 	lsl.w	r3, r2, r3
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	08da      	lsrs	r2, r3, #3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3208      	adds	r2, #8
 800647c:	6939      	ldr	r1, [r7, #16]
 800647e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	2203      	movs	r2, #3
 800648e:	fa02 f303 	lsl.w	r3, r2, r3
 8006492:	43db      	mvns	r3, r3
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4013      	ands	r3, r2
 8006498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f003 0203 	and.w	r2, r3, #3
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	fa02 f303 	lsl.w	r3, r2, r3
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 809a 	beq.w	80065f8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064c4:	4b55      	ldr	r3, [pc, #340]	; (800661c <HAL_GPIO_Init+0x2cc>)
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	4a54      	ldr	r2, [pc, #336]	; (800661c <HAL_GPIO_Init+0x2cc>)
 80064ca:	f043 0301 	orr.w	r3, r3, #1
 80064ce:	6193      	str	r3, [r2, #24]
 80064d0:	4b52      	ldr	r3, [pc, #328]	; (800661c <HAL_GPIO_Init+0x2cc>)
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	60bb      	str	r3, [r7, #8]
 80064da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80064dc:	4a50      	ldr	r2, [pc, #320]	; (8006620 <HAL_GPIO_Init+0x2d0>)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	089b      	lsrs	r3, r3, #2
 80064e2:	3302      	adds	r3, #2
 80064e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f003 0303 	and.w	r3, r3, #3
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	220f      	movs	r2, #15
 80064f4:	fa02 f303 	lsl.w	r3, r2, r3
 80064f8:	43db      	mvns	r3, r3
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4013      	ands	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006506:	d013      	beq.n	8006530 <HAL_GPIO_Init+0x1e0>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a46      	ldr	r2, [pc, #280]	; (8006624 <HAL_GPIO_Init+0x2d4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00d      	beq.n	800652c <HAL_GPIO_Init+0x1dc>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a45      	ldr	r2, [pc, #276]	; (8006628 <HAL_GPIO_Init+0x2d8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d007      	beq.n	8006528 <HAL_GPIO_Init+0x1d8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a44      	ldr	r2, [pc, #272]	; (800662c <HAL_GPIO_Init+0x2dc>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d101      	bne.n	8006524 <HAL_GPIO_Init+0x1d4>
 8006520:	2303      	movs	r3, #3
 8006522:	e006      	b.n	8006532 <HAL_GPIO_Init+0x1e2>
 8006524:	2305      	movs	r3, #5
 8006526:	e004      	b.n	8006532 <HAL_GPIO_Init+0x1e2>
 8006528:	2302      	movs	r3, #2
 800652a:	e002      	b.n	8006532 <HAL_GPIO_Init+0x1e2>
 800652c:	2301      	movs	r3, #1
 800652e:	e000      	b.n	8006532 <HAL_GPIO_Init+0x1e2>
 8006530:	2300      	movs	r3, #0
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	f002 0203 	and.w	r2, r2, #3
 8006538:	0092      	lsls	r2, r2, #2
 800653a:	4093      	lsls	r3, r2
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006542:	4937      	ldr	r1, [pc, #220]	; (8006620 <HAL_GPIO_Init+0x2d0>)
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	089b      	lsrs	r3, r3, #2
 8006548:	3302      	adds	r3, #2
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006550:	4b37      	ldr	r3, [pc, #220]	; (8006630 <HAL_GPIO_Init+0x2e0>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	43db      	mvns	r3, r3
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4013      	ands	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4313      	orrs	r3, r2
 8006572:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006574:	4a2e      	ldr	r2, [pc, #184]	; (8006630 <HAL_GPIO_Init+0x2e0>)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800657a:	4b2d      	ldr	r3, [pc, #180]	; (8006630 <HAL_GPIO_Init+0x2e0>)
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	43db      	mvns	r3, r3
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4013      	ands	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800659e:	4a24      	ldr	r2, [pc, #144]	; (8006630 <HAL_GPIO_Init+0x2e0>)
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065a4:	4b22      	ldr	r3, [pc, #136]	; (8006630 <HAL_GPIO_Init+0x2e0>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	43db      	mvns	r3, r3
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4013      	ands	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80065c8:	4a19      	ldr	r2, [pc, #100]	; (8006630 <HAL_GPIO_Init+0x2e0>)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065ce:	4b18      	ldr	r3, [pc, #96]	; (8006630 <HAL_GPIO_Init+0x2e0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	43db      	mvns	r3, r3
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4013      	ands	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80065f2:	4a0f      	ldr	r2, [pc, #60]	; (8006630 <HAL_GPIO_Init+0x2e0>)
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	3301      	adds	r3, #1
 80065fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	fa22 f303 	lsr.w	r3, r2, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	f47f aea9 	bne.w	8006360 <HAL_GPIO_Init+0x10>
  }
}
 800660e:	bf00      	nop
 8006610:	bf00      	nop
 8006612:	371c      	adds	r7, #28
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	40021000 	.word	0x40021000
 8006620:	40010000 	.word	0x40010000
 8006624:	48000400 	.word	0x48000400
 8006628:	48000800 	.word	0x48000800
 800662c:	48000c00 	.word	0x48000c00
 8006630:	40010400 	.word	0x40010400

08006634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	887b      	ldrh	r3, [r7, #2]
 8006646:	4013      	ands	r3, r2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800664c:	2301      	movs	r3, #1
 800664e:	73fb      	strb	r3, [r7, #15]
 8006650:	e001      	b.n	8006656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006652:	2300      	movs	r3, #0
 8006654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006656:	7bfb      	ldrb	r3, [r7, #15]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	807b      	strh	r3, [r7, #2]
 8006670:	4613      	mov	r3, r2
 8006672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006674:	787b      	ldrb	r3, [r7, #1]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800667a:	887a      	ldrh	r2, [r7, #2]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006680:	e002      	b.n	8006688 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006682:	887a      	ldrh	r2, [r7, #2]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800669e:	4b08      	ldr	r3, [pc, #32]	; (80066c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066a0:	695a      	ldr	r2, [r3, #20]
 80066a2:	88fb      	ldrh	r3, [r7, #6]
 80066a4:	4013      	ands	r3, r2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d006      	beq.n	80066b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066aa:	4a05      	ldr	r2, [pc, #20]	; (80066c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066ac:	88fb      	ldrh	r3, [r7, #6]
 80066ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fc fcde 	bl	8003074 <HAL_GPIO_EXTI_Callback>
  }
}
 80066b8:	bf00      	nop
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40010400 	.word	0x40010400

080066c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e081      	b.n	80067da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fe f876 	bl	80047dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2224      	movs	r2, #36	; 0x24
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0201 	bic.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006714:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006724:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d107      	bne.n	800673e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800673a:	609a      	str	r2, [r3, #8]
 800673c:	e006      	b.n	800674c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800674a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	2b02      	cmp	r3, #2
 8006752:	d104      	bne.n	800675e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800675c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6812      	ldr	r2, [r2, #0]
 8006768:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800676c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006770:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006780:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69d9      	ldr	r1, [r3, #28]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1a      	ldr	r2, [r3, #32]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0201 	orr.w	r2, r2, #1
 80067ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	4608      	mov	r0, r1
 80067ee:	4611      	mov	r1, r2
 80067f0:	461a      	mov	r2, r3
 80067f2:	4603      	mov	r3, r0
 80067f4:	817b      	strh	r3, [r7, #10]
 80067f6:	460b      	mov	r3, r1
 80067f8:	813b      	strh	r3, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b20      	cmp	r3, #32
 8006808:	f040 80f9 	bne.w	80069fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <HAL_I2C_Mem_Write+0x34>
 8006812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	d105      	bne.n	8006824 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800681e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e0ed      	b.n	8006a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_I2C_Mem_Write+0x4e>
 800682e:	2302      	movs	r3, #2
 8006830:	e0e6      	b.n	8006a00 <HAL_I2C_Mem_Write+0x21c>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800683a:	f7ff fa39 	bl	8005cb0 <HAL_GetTick>
 800683e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	2319      	movs	r3, #25
 8006846:	2201      	movs	r2, #1
 8006848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 fbcd 	bl	8006fec <I2C_WaitOnFlagUntilTimeout>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e0d1      	b.n	8006a00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2221      	movs	r2, #33	; 0x21
 8006860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2240      	movs	r2, #64	; 0x40
 8006868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a3a      	ldr	r2, [r7, #32]
 8006876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800687c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006884:	88f8      	ldrh	r0, [r7, #6]
 8006886:	893a      	ldrh	r2, [r7, #8]
 8006888:	8979      	ldrh	r1, [r7, #10]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	4603      	mov	r3, r0
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 fadd 	bl	8006e54 <I2C_RequestMemoryWrite>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e0a9      	b.n	8006a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2bff      	cmp	r3, #255	; 0xff
 80068b4:	d90e      	bls.n	80068d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	22ff      	movs	r2, #255	; 0xff
 80068ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	8979      	ldrh	r1, [r7, #10]
 80068c4:	2300      	movs	r3, #0
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 fd47 	bl	8007360 <I2C_TransferConfig>
 80068d2:	e00f      	b.n	80068f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	8979      	ldrh	r1, [r7, #10]
 80068e6:	2300      	movs	r3, #0
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 fd36 	bl	8007360 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fbc6 	bl	800708a <I2C_WaitOnTXISFlagUntilTimeout>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e07b      	b.n	8006a00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	781a      	ldrb	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006922:	b29b      	uxth	r3, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d034      	beq.n	80069ac <HAL_I2C_Mem_Write+0x1c8>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006946:	2b00      	cmp	r3, #0
 8006948:	d130      	bne.n	80069ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006950:	2200      	movs	r2, #0
 8006952:	2180      	movs	r1, #128	; 0x80
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 fb49 	bl	8006fec <I2C_WaitOnFlagUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e04d      	b.n	8006a00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006968:	b29b      	uxth	r3, r3
 800696a:	2bff      	cmp	r3, #255	; 0xff
 800696c:	d90e      	bls.n	800698c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	22ff      	movs	r2, #255	; 0xff
 8006972:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006978:	b2da      	uxtb	r2, r3
 800697a:	8979      	ldrh	r1, [r7, #10]
 800697c:	2300      	movs	r3, #0
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 fceb 	bl	8007360 <I2C_TransferConfig>
 800698a:	e00f      	b.n	80069ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006990:	b29a      	uxth	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699a:	b2da      	uxtb	r2, r3
 800699c:	8979      	ldrh	r1, [r7, #10]
 800699e:	2300      	movs	r3, #0
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 fcda 	bl	8007360 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d19e      	bne.n	80068f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 fbac 	bl	8007118 <I2C_WaitOnSTOPFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e01a      	b.n	8006a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2220      	movs	r2, #32
 80069d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6859      	ldr	r1, [r3, #4]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <HAL_I2C_Mem_Write+0x224>)
 80069de:	400b      	ands	r3, r1
 80069e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e000      	b.n	8006a00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80069fe:	2302      	movs	r3, #2
  }
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	fe00e800 	.word	0xfe00e800

08006a0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	4608      	mov	r0, r1
 8006a16:	4611      	mov	r1, r2
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	817b      	strh	r3, [r7, #10]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	813b      	strh	r3, [r7, #8]
 8006a22:	4613      	mov	r3, r2
 8006a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	f040 80fd 	bne.w	8006c2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <HAL_I2C_Mem_Read+0x34>
 8006a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d105      	bne.n	8006a4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e0f1      	b.n	8006c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_I2C_Mem_Read+0x4e>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e0ea      	b.n	8006c30 <HAL_I2C_Mem_Read+0x224>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a62:	f7ff f925 	bl	8005cb0 <HAL_GetTick>
 8006a66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	2319      	movs	r3, #25
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 fab9 	bl	8006fec <I2C_WaitOnFlagUntilTimeout>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e0d5      	b.n	8006c30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2222      	movs	r2, #34	; 0x22
 8006a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2240      	movs	r2, #64	; 0x40
 8006a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a3a      	ldr	r2, [r7, #32]
 8006a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aac:	88f8      	ldrh	r0, [r7, #6]
 8006aae:	893a      	ldrh	r2, [r7, #8]
 8006ab0:	8979      	ldrh	r1, [r7, #10]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	9301      	str	r3, [sp, #4]
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	4603      	mov	r3, r0
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 fa1d 	bl	8006efc <I2C_RequestMemoryRead>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0ad      	b.n	8006c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2bff      	cmp	r3, #255	; 0xff
 8006adc:	d90e      	bls.n	8006afc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	22ff      	movs	r2, #255	; 0xff
 8006ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	8979      	ldrh	r1, [r7, #10]
 8006aec:	4b52      	ldr	r3, [pc, #328]	; (8006c38 <HAL_I2C_Mem_Read+0x22c>)
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fc33 	bl	8007360 <I2C_TransferConfig>
 8006afa:	e00f      	b.n	8006b1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	8979      	ldrh	r1, [r7, #10]
 8006b0e:	4b4a      	ldr	r3, [pc, #296]	; (8006c38 <HAL_I2C_Mem_Read+0x22c>)
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 fc22 	bl	8007360 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	2200      	movs	r2, #0
 8006b24:	2104      	movs	r1, #4
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 fa60 	bl	8006fec <I2C_WaitOnFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e07c      	b.n	8006c30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	b2d2      	uxtb	r2, r2
 8006b42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d034      	beq.n	8006bdc <HAL_I2C_Mem_Read+0x1d0>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d130      	bne.n	8006bdc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b80:	2200      	movs	r2, #0
 8006b82:	2180      	movs	r1, #128	; 0x80
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 fa31 	bl	8006fec <I2C_WaitOnFlagUntilTimeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e04d      	b.n	8006c30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2bff      	cmp	r3, #255	; 0xff
 8006b9c:	d90e      	bls.n	8006bbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	22ff      	movs	r2, #255	; 0xff
 8006ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	8979      	ldrh	r1, [r7, #10]
 8006bac:	2300      	movs	r3, #0
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 fbd3 	bl	8007360 <I2C_TransferConfig>
 8006bba:	e00f      	b.n	8006bdc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	8979      	ldrh	r1, [r7, #10]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 fbc2 	bl	8007360 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d19a      	bne.n	8006b1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 fa94 	bl	8007118 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e01a      	b.n	8006c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6859      	ldr	r1, [r3, #4]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <HAL_I2C_Mem_Read+0x230>)
 8006c0e:	400b      	ands	r3, r1
 8006c10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e000      	b.n	8006c30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006c2e:	2302      	movs	r3, #2
  }
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	80002400 	.word	0x80002400
 8006c3c:	fe00e800 	.word	0xfe00e800

08006c40 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	607a      	str	r2, [r7, #4]
 8006c4a:	603b      	str	r3, [r7, #0]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006c50:	2300      	movs	r3, #0
 8006c52:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b20      	cmp	r3, #32
 8006c5e:	f040 80f3 	bne.w	8006e48 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c70:	d101      	bne.n	8006c76 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006c72:	2302      	movs	r3, #2
 8006c74:	e0e9      	b.n	8006e4a <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d101      	bne.n	8006c84 <HAL_I2C_IsDeviceReady+0x44>
 8006c80:	2302      	movs	r3, #2
 8006c82:	e0e2      	b.n	8006e4a <HAL_I2C_IsDeviceReady+0x20a>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2224      	movs	r2, #36	; 0x24
 8006c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d107      	bne.n	8006cb2 <HAL_I2C_IsDeviceReady+0x72>
 8006ca2:	897b      	ldrh	r3, [r7, #10]
 8006ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006cb0:	e006      	b.n	8006cc0 <HAL_I2C_IsDeviceReady+0x80>
 8006cb2:	897b      	ldrh	r3, [r7, #10]
 8006cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cbc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	6812      	ldr	r2, [r2, #0]
 8006cc4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006cc6:	f7fe fff3 	bl	8005cb0 <HAL_GetTick>
 8006cca:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	bf0c      	ite	eq
 8006cda:	2301      	moveq	r3, #1
 8006cdc:	2300      	movne	r3, #0
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	f003 0310 	and.w	r3, r3, #16
 8006cec:	2b10      	cmp	r3, #16
 8006cee:	bf0c      	ite	eq
 8006cf0:	2301      	moveq	r3, #1
 8006cf2:	2300      	movne	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006cf8:	e034      	b.n	8006d64 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d00:	d01a      	beq.n	8006d38 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d02:	f7fe ffd5 	bl	8005cb0 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d302      	bcc.n	8006d18 <HAL_I2C_IsDeviceReady+0xd8>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10f      	bne.n	8006d38 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d24:	f043 0220 	orr.w	r2, r3, #32
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e088      	b.n	8006e4a <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b20      	cmp	r3, #32
 8006d44:	bf0c      	ite	eq
 8006d46:	2301      	moveq	r3, #1
 8006d48:	2300      	movne	r3, #0
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	2b10      	cmp	r3, #16
 8006d5a:	bf0c      	ite	eq
 8006d5c:	2301      	moveq	r3, #1
 8006d5e:	2300      	movne	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006d64:	7ffb      	ldrb	r3, [r7, #31]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d102      	bne.n	8006d70 <HAL_I2C_IsDeviceReady+0x130>
 8006d6a:	7fbb      	ldrb	r3, [r7, #30]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0c4      	beq.n	8006cfa <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	f003 0310 	and.w	r3, r3, #16
 8006d7a:	2b10      	cmp	r3, #16
 8006d7c:	d01a      	beq.n	8006db4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2200      	movs	r2, #0
 8006d86:	2120      	movs	r1, #32
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 f92f 	bl	8006fec <I2C_WaitOnFlagUntilTimeout>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e058      	b.n	8006e4a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e04a      	b.n	8006e4a <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2120      	movs	r1, #32
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 f914 	bl	8006fec <I2C_WaitOnFlagUntilTimeout>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e03d      	b.n	8006e4a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2210      	movs	r2, #16
 8006dd4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d118      	bne.n	8006e18 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006df4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2120      	movs	r1, #32
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 f8f3 	bl	8006fec <I2C_WaitOnFlagUntilTimeout>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e01c      	b.n	8006e4a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2220      	movs	r2, #32
 8006e16:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	f63f af39 	bhi.w	8006c9a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e34:	f043 0220 	orr.w	r2, r3, #32
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e000      	b.n	8006e4a <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8006e48:	2302      	movs	r3, #2
  }
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3720      	adds	r7, #32
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af02      	add	r7, sp, #8
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	4611      	mov	r1, r2
 8006e60:	461a      	mov	r2, r3
 8006e62:	4603      	mov	r3, r0
 8006e64:	817b      	strh	r3, [r7, #10]
 8006e66:	460b      	mov	r3, r1
 8006e68:	813b      	strh	r3, [r7, #8]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e6e:	88fb      	ldrh	r3, [r7, #6]
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	8979      	ldrh	r1, [r7, #10]
 8006e74:	4b20      	ldr	r3, [pc, #128]	; (8006ef8 <I2C_RequestMemoryWrite+0xa4>)
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 fa6f 	bl	8007360 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	69b9      	ldr	r1, [r7, #24]
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 f8ff 	bl	800708a <I2C_WaitOnTXISFlagUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e02c      	b.n	8006ef0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e96:	88fb      	ldrh	r3, [r7, #6]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d105      	bne.n	8006ea8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e9c:	893b      	ldrh	r3, [r7, #8]
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	629a      	str	r2, [r3, #40]	; 0x28
 8006ea6:	e015      	b.n	8006ed4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ea8:	893b      	ldrh	r3, [r7, #8]
 8006eaa:	0a1b      	lsrs	r3, r3, #8
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	69b9      	ldr	r1, [r7, #24]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 f8e5 	bl	800708a <I2C_WaitOnTXISFlagUntilTimeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e012      	b.n	8006ef0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006eca:	893b      	ldrh	r3, [r7, #8]
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	2200      	movs	r2, #0
 8006edc:	2180      	movs	r1, #128	; 0x80
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 f884 	bl	8006fec <I2C_WaitOnFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	80002000 	.word	0x80002000

08006efc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af02      	add	r7, sp, #8
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	4608      	mov	r0, r1
 8006f06:	4611      	mov	r1, r2
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	817b      	strh	r3, [r7, #10]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	813b      	strh	r3, [r7, #8]
 8006f12:	4613      	mov	r3, r2
 8006f14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	8979      	ldrh	r1, [r7, #10]
 8006f1c:	4b20      	ldr	r3, [pc, #128]	; (8006fa0 <I2C_RequestMemoryRead+0xa4>)
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	2300      	movs	r3, #0
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f000 fa1c 	bl	8007360 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f28:	69fa      	ldr	r2, [r7, #28]
 8006f2a:	69b9      	ldr	r1, [r7, #24]
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 f8ac 	bl	800708a <I2C_WaitOnTXISFlagUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e02c      	b.n	8006f96 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f3c:	88fb      	ldrh	r3, [r7, #6]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d105      	bne.n	8006f4e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f42:	893b      	ldrh	r3, [r7, #8]
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	629a      	str	r2, [r3, #40]	; 0x28
 8006f4c:	e015      	b.n	8006f7a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f4e:	893b      	ldrh	r3, [r7, #8]
 8006f50:	0a1b      	lsrs	r3, r3, #8
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f5c:	69fa      	ldr	r2, [r7, #28]
 8006f5e:	69b9      	ldr	r1, [r7, #24]
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 f892 	bl	800708a <I2C_WaitOnTXISFlagUntilTimeout>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e012      	b.n	8006f96 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f70:	893b      	ldrh	r3, [r7, #8]
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2200      	movs	r2, #0
 8006f82:	2140      	movs	r1, #64	; 0x40
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 f831 	bl	8006fec <I2C_WaitOnFlagUntilTimeout>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e000      	b.n	8006f96 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	80002000 	.word	0x80002000

08006fa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d103      	bne.n	8006fc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d007      	beq.n	8006fe0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	699a      	ldr	r2, [r3, #24]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f042 0201 	orr.w	r2, r2, #1
 8006fde:	619a      	str	r2, [r3, #24]
  }
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	603b      	str	r3, [r7, #0]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ffc:	e031      	b.n	8007062 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007004:	d02d      	beq.n	8007062 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007006:	f7fe fe53 	bl	8005cb0 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d302      	bcc.n	800701c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d122      	bne.n	8007062 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699a      	ldr	r2, [r3, #24]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	4013      	ands	r3, r2
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	429a      	cmp	r2, r3
 800702a:	bf0c      	ite	eq
 800702c:	2301      	moveq	r3, #1
 800702e:	2300      	movne	r3, #0
 8007030:	b2db      	uxtb	r3, r3
 8007032:	461a      	mov	r2, r3
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	429a      	cmp	r2, r3
 8007038:	d113      	bne.n	8007062 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703e:	f043 0220 	orr.w	r2, r3, #32
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2220      	movs	r2, #32
 800704a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e00f      	b.n	8007082 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	699a      	ldr	r2, [r3, #24]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4013      	ands	r3, r2
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	429a      	cmp	r2, r3
 8007070:	bf0c      	ite	eq
 8007072:	2301      	moveq	r3, #1
 8007074:	2300      	movne	r3, #0
 8007076:	b2db      	uxtb	r3, r3
 8007078:	461a      	mov	r2, r3
 800707a:	79fb      	ldrb	r3, [r7, #7]
 800707c:	429a      	cmp	r2, r3
 800707e:	d0be      	beq.n	8006ffe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007096:	e033      	b.n	8007100 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	68b9      	ldr	r1, [r7, #8]
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 f87f 	bl	80071a0 <I2C_IsErrorOccurred>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e031      	b.n	8007110 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b2:	d025      	beq.n	8007100 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070b4:	f7fe fdfc 	bl	8005cb0 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d302      	bcc.n	80070ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d11a      	bne.n	8007100 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d013      	beq.n	8007100 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070dc:	f043 0220 	orr.w	r2, r3, #32
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e007      	b.n	8007110 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b02      	cmp	r3, #2
 800710c:	d1c4      	bne.n	8007098 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007124:	e02f      	b.n	8007186 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	68b9      	ldr	r1, [r7, #8]
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f838 	bl	80071a0 <I2C_IsErrorOccurred>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e02d      	b.n	8007196 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800713a:	f7fe fdb9 	bl	8005cb0 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	429a      	cmp	r2, r3
 8007148:	d302      	bcc.n	8007150 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d11a      	bne.n	8007186 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b20      	cmp	r3, #32
 800715c:	d013      	beq.n	8007186 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007162:	f043 0220 	orr.w	r2, r3, #32
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e007      	b.n	8007196 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b20      	cmp	r3, #32
 8007192:	d1c8      	bne.n	8007126 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	; 0x28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	f003 0310 	and.w	r3, r3, #16
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d068      	beq.n	800729e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2210      	movs	r2, #16
 80071d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80071d4:	e049      	b.n	800726a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071dc:	d045      	beq.n	800726a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80071de:	f7fe fd67 	bl	8005cb0 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d302      	bcc.n	80071f4 <I2C_IsErrorOccurred+0x54>
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d13a      	bne.n	800726a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007206:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007216:	d121      	bne.n	800725c <I2C_IsErrorOccurred+0xbc>
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800721e:	d01d      	beq.n	800725c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007220:	7cfb      	ldrb	r3, [r7, #19]
 8007222:	2b20      	cmp	r3, #32
 8007224:	d01a      	beq.n	800725c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007234:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007236:	f7fe fd3b 	bl	8005cb0 <HAL_GetTick>
 800723a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800723c:	e00e      	b.n	800725c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800723e:	f7fe fd37 	bl	8005cb0 <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	2b19      	cmp	r3, #25
 800724a:	d907      	bls.n	800725c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	f043 0320 	orr.w	r3, r3, #32
 8007252:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800725a:	e006      	b.n	800726a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b20      	cmp	r3, #32
 8007268:	d1e9      	bne.n	800723e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	f003 0320 	and.w	r3, r3, #32
 8007274:	2b20      	cmp	r3, #32
 8007276:	d003      	beq.n	8007280 <I2C_IsErrorOccurred+0xe0>
 8007278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0aa      	beq.n	80071d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007284:	2b00      	cmp	r3, #0
 8007286:	d103      	bne.n	8007290 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2220      	movs	r2, #32
 800728e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	f043 0304 	orr.w	r3, r3, #4
 8007296:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	f043 0301 	orr.w	r3, r3, #1
 80072b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00b      	beq.n	80072ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	f043 0308 	orr.w	r3, r3, #8
 80072d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	f043 0302 	orr.w	r3, r3, #2
 80072fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007304:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800730c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007310:	2b00      	cmp	r3, #0
 8007312:	d01c      	beq.n	800734e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f7ff fe45 	bl	8006fa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6859      	ldr	r1, [r3, #4]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	4b0d      	ldr	r3, [pc, #52]	; (800735c <I2C_IsErrorOccurred+0x1bc>)
 8007326:	400b      	ands	r3, r1
 8007328:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	431a      	orrs	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2220      	movs	r2, #32
 800733a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800734e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007352:	4618      	mov	r0, r3
 8007354:	3728      	adds	r7, #40	; 0x28
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	fe00e800 	.word	0xfe00e800

08007360 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	607b      	str	r3, [r7, #4]
 800736a:	460b      	mov	r3, r1
 800736c:	817b      	strh	r3, [r7, #10]
 800736e:	4613      	mov	r3, r2
 8007370:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007372:	897b      	ldrh	r3, [r7, #10]
 8007374:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007378:	7a7b      	ldrb	r3, [r7, #9]
 800737a:	041b      	lsls	r3, r3, #16
 800737c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007380:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	4313      	orrs	r3, r2
 800738a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800738e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	0d5b      	lsrs	r3, r3, #21
 800739a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800739e:	4b08      	ldr	r3, [pc, #32]	; (80073c0 <I2C_TransferConfig+0x60>)
 80073a0:	430b      	orrs	r3, r1
 80073a2:	43db      	mvns	r3, r3
 80073a4:	ea02 0103 	and.w	r1, r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80073b2:	bf00      	nop
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	03ff63ff 	.word	0x03ff63ff

080073c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b20      	cmp	r3, #32
 80073d8:	d138      	bne.n	800744c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d101      	bne.n	80073e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e032      	b.n	800744e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2224      	movs	r2, #36	; 0x24
 80073f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0201 	bic.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007416:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6819      	ldr	r1, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0201 	orr.w	r2, r2, #1
 8007436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2220      	movs	r2, #32
 800743c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	e000      	b.n	800744e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800744c:	2302      	movs	r3, #2
  }
}
 800744e:	4618      	mov	r0, r3
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800745a:	b480      	push	{r7}
 800745c:	b085      	sub	sp, #20
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b20      	cmp	r3, #32
 800746e:	d139      	bne.n	80074e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007476:	2b01      	cmp	r3, #1
 8007478:	d101      	bne.n	800747e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800747a:	2302      	movs	r3, #2
 800747c:	e033      	b.n	80074e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2224      	movs	r2, #36	; 0x24
 800748a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0201 	bic.w	r2, r2, #1
 800749c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80074ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	021b      	lsls	r3, r3, #8
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f042 0201 	orr.w	r2, r2, #1
 80074ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	e000      	b.n	80074e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80074e4:	2302      	movs	r3, #2
  }
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
	...

080074f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007504:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800750a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d102      	bne.n	800751a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	f001 b823 	b.w	8008560 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800751a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800751e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 817d 	beq.w	800782a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007530:	4bbc      	ldr	r3, [pc, #752]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f003 030c 	and.w	r3, r3, #12
 8007538:	2b04      	cmp	r3, #4
 800753a:	d00c      	beq.n	8007556 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800753c:	4bb9      	ldr	r3, [pc, #740]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f003 030c 	and.w	r3, r3, #12
 8007544:	2b08      	cmp	r3, #8
 8007546:	d15c      	bne.n	8007602 <HAL_RCC_OscConfig+0x10e>
 8007548:	4bb6      	ldr	r3, [pc, #728]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007554:	d155      	bne.n	8007602 <HAL_RCC_OscConfig+0x10e>
 8007556:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800755a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800755e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007562:	fa93 f3a3 	rbit	r3, r3
 8007566:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800756a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800756e:	fab3 f383 	clz	r3, r3
 8007572:	b2db      	uxtb	r3, r3
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f043 0301 	orr.w	r3, r3, #1
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b01      	cmp	r3, #1
 8007580:	d102      	bne.n	8007588 <HAL_RCC_OscConfig+0x94>
 8007582:	4ba8      	ldr	r3, [pc, #672]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	e015      	b.n	80075b4 <HAL_RCC_OscConfig+0xc0>
 8007588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800758c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007590:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007594:	fa93 f3a3 	rbit	r3, r3
 8007598:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800759c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075a0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80075a4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80075a8:	fa93 f3a3 	rbit	r3, r3
 80075ac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80075b0:	4b9c      	ldr	r3, [pc, #624]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80075b8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80075bc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80075c0:	fa92 f2a2 	rbit	r2, r2
 80075c4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80075c8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80075cc:	fab2 f282 	clz	r2, r2
 80075d0:	b2d2      	uxtb	r2, r2
 80075d2:	f042 0220 	orr.w	r2, r2, #32
 80075d6:	b2d2      	uxtb	r2, r2
 80075d8:	f002 021f 	and.w	r2, r2, #31
 80075dc:	2101      	movs	r1, #1
 80075de:	fa01 f202 	lsl.w	r2, r1, r2
 80075e2:	4013      	ands	r3, r2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 811f 	beq.w	8007828 <HAL_RCC_OscConfig+0x334>
 80075ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f040 8116 	bne.w	8007828 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	f000 bfaf 	b.w	8008560 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007606:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007612:	d106      	bne.n	8007622 <HAL_RCC_OscConfig+0x12e>
 8007614:	4b83      	ldr	r3, [pc, #524]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a82      	ldr	r2, [pc, #520]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 800761a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	e036      	b.n	8007690 <HAL_RCC_OscConfig+0x19c>
 8007622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10c      	bne.n	800764c <HAL_RCC_OscConfig+0x158>
 8007632:	4b7c      	ldr	r3, [pc, #496]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a7b      	ldr	r2, [pc, #492]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 8007638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	4b79      	ldr	r3, [pc, #484]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a78      	ldr	r2, [pc, #480]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 8007644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007648:	6013      	str	r3, [r2, #0]
 800764a:	e021      	b.n	8007690 <HAL_RCC_OscConfig+0x19c>
 800764c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007650:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800765c:	d10c      	bne.n	8007678 <HAL_RCC_OscConfig+0x184>
 800765e:	4b71      	ldr	r3, [pc, #452]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a70      	ldr	r2, [pc, #448]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 8007664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	4b6e      	ldr	r3, [pc, #440]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a6d      	ldr	r2, [pc, #436]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 8007670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	e00b      	b.n	8007690 <HAL_RCC_OscConfig+0x19c>
 8007678:	4b6a      	ldr	r3, [pc, #424]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a69      	ldr	r2, [pc, #420]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 800767e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	4b67      	ldr	r3, [pc, #412]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a66      	ldr	r2, [pc, #408]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 800768a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800768e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007690:	4b64      	ldr	r3, [pc, #400]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	f023 020f 	bic.w	r2, r3, #15
 8007698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800769c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	495f      	ldr	r1, [pc, #380]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d059      	beq.n	800776e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ba:	f7fe faf9 	bl	8005cb0 <HAL_GetTick>
 80076be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076c2:	e00a      	b.n	80076da <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076c4:	f7fe faf4 	bl	8005cb0 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	2b64      	cmp	r3, #100	; 0x64
 80076d2:	d902      	bls.n	80076da <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	f000 bf43 	b.w	8008560 <HAL_RCC_OscConfig+0x106c>
 80076da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076de:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80076e6:	fa93 f3a3 	rbit	r3, r3
 80076ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80076ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076f2:	fab3 f383 	clz	r3, r3
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	095b      	lsrs	r3, r3, #5
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	f043 0301 	orr.w	r3, r3, #1
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b01      	cmp	r3, #1
 8007704:	d102      	bne.n	800770c <HAL_RCC_OscConfig+0x218>
 8007706:	4b47      	ldr	r3, [pc, #284]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	e015      	b.n	8007738 <HAL_RCC_OscConfig+0x244>
 800770c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007710:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007714:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007718:	fa93 f3a3 	rbit	r3, r3
 800771c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007720:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007724:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007728:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800772c:	fa93 f3a3 	rbit	r3, r3
 8007730:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007734:	4b3b      	ldr	r3, [pc, #236]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800773c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007740:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007744:	fa92 f2a2 	rbit	r2, r2
 8007748:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800774c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007750:	fab2 f282 	clz	r2, r2
 8007754:	b2d2      	uxtb	r2, r2
 8007756:	f042 0220 	orr.w	r2, r2, #32
 800775a:	b2d2      	uxtb	r2, r2
 800775c:	f002 021f 	and.w	r2, r2, #31
 8007760:	2101      	movs	r1, #1
 8007762:	fa01 f202 	lsl.w	r2, r1, r2
 8007766:	4013      	ands	r3, r2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0ab      	beq.n	80076c4 <HAL_RCC_OscConfig+0x1d0>
 800776c:	e05d      	b.n	800782a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800776e:	f7fe fa9f 	bl	8005cb0 <HAL_GetTick>
 8007772:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007776:	e00a      	b.n	800778e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007778:	f7fe fa9a 	bl	8005cb0 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b64      	cmp	r3, #100	; 0x64
 8007786:	d902      	bls.n	800778e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	f000 bee9 	b.w	8008560 <HAL_RCC_OscConfig+0x106c>
 800778e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007792:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007796:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800779a:	fa93 f3a3 	rbit	r3, r3
 800779e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80077a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077a6:	fab3 f383 	clz	r3, r3
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	095b      	lsrs	r3, r3, #5
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f043 0301 	orr.w	r3, r3, #1
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d102      	bne.n	80077c0 <HAL_RCC_OscConfig+0x2cc>
 80077ba:	4b1a      	ldr	r3, [pc, #104]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	e015      	b.n	80077ec <HAL_RCC_OscConfig+0x2f8>
 80077c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077c4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80077cc:	fa93 f3a3 	rbit	r3, r3
 80077d0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80077d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077d8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80077dc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80077e0:	fa93 f3a3 	rbit	r3, r3
 80077e4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80077e8:	4b0e      	ldr	r3, [pc, #56]	; (8007824 <HAL_RCC_OscConfig+0x330>)
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80077f0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80077f4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80077f8:	fa92 f2a2 	rbit	r2, r2
 80077fc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007800:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007804:	fab2 f282 	clz	r2, r2
 8007808:	b2d2      	uxtb	r2, r2
 800780a:	f042 0220 	orr.w	r2, r2, #32
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	f002 021f 	and.w	r2, r2, #31
 8007814:	2101      	movs	r1, #1
 8007816:	fa01 f202 	lsl.w	r2, r1, r2
 800781a:	4013      	ands	r3, r2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1ab      	bne.n	8007778 <HAL_RCC_OscConfig+0x284>
 8007820:	e003      	b.n	800782a <HAL_RCC_OscConfig+0x336>
 8007822:	bf00      	nop
 8007824:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800782a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800782e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 817d 	beq.w	8007b3a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007840:	4ba6      	ldr	r3, [pc, #664]	; (8007adc <HAL_RCC_OscConfig+0x5e8>)
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f003 030c 	and.w	r3, r3, #12
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800784c:	4ba3      	ldr	r3, [pc, #652]	; (8007adc <HAL_RCC_OscConfig+0x5e8>)
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f003 030c 	and.w	r3, r3, #12
 8007854:	2b08      	cmp	r3, #8
 8007856:	d172      	bne.n	800793e <HAL_RCC_OscConfig+0x44a>
 8007858:	4ba0      	ldr	r3, [pc, #640]	; (8007adc <HAL_RCC_OscConfig+0x5e8>)
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d16c      	bne.n	800793e <HAL_RCC_OscConfig+0x44a>
 8007864:	2302      	movs	r3, #2
 8007866:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800786a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800786e:	fa93 f3a3 	rbit	r3, r3
 8007872:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007876:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800787a:	fab3 f383 	clz	r3, r3
 800787e:	b2db      	uxtb	r3, r3
 8007880:	095b      	lsrs	r3, r3, #5
 8007882:	b2db      	uxtb	r3, r3
 8007884:	f043 0301 	orr.w	r3, r3, #1
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b01      	cmp	r3, #1
 800788c:	d102      	bne.n	8007894 <HAL_RCC_OscConfig+0x3a0>
 800788e:	4b93      	ldr	r3, [pc, #588]	; (8007adc <HAL_RCC_OscConfig+0x5e8>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	e013      	b.n	80078bc <HAL_RCC_OscConfig+0x3c8>
 8007894:	2302      	movs	r3, #2
 8007896:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800789a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800789e:	fa93 f3a3 	rbit	r3, r3
 80078a2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80078a6:	2302      	movs	r3, #2
 80078a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80078ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80078b0:	fa93 f3a3 	rbit	r3, r3
 80078b4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80078b8:	4b88      	ldr	r3, [pc, #544]	; (8007adc <HAL_RCC_OscConfig+0x5e8>)
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	2202      	movs	r2, #2
 80078be:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80078c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80078c6:	fa92 f2a2 	rbit	r2, r2
 80078ca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80078ce:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80078d2:	fab2 f282 	clz	r2, r2
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	f042 0220 	orr.w	r2, r2, #32
 80078dc:	b2d2      	uxtb	r2, r2
 80078de:	f002 021f 	and.w	r2, r2, #31
 80078e2:	2101      	movs	r1, #1
 80078e4:	fa01 f202 	lsl.w	r2, r1, r2
 80078e8:	4013      	ands	r3, r2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <HAL_RCC_OscConfig+0x410>
 80078ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d002      	beq.n	8007904 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	f000 be2e 	b.w	8008560 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007904:	4b75      	ldr	r3, [pc, #468]	; (8007adc <HAL_RCC_OscConfig+0x5e8>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800790c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	21f8      	movs	r1, #248	; 0xf8
 800791a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800791e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007922:	fa91 f1a1 	rbit	r1, r1
 8007926:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800792a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800792e:	fab1 f181 	clz	r1, r1
 8007932:	b2c9      	uxtb	r1, r1
 8007934:	408b      	lsls	r3, r1
 8007936:	4969      	ldr	r1, [pc, #420]	; (8007adc <HAL_RCC_OscConfig+0x5e8>)
 8007938:	4313      	orrs	r3, r2
 800793a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800793c:	e0fd      	b.n	8007b3a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800793e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 8088 	beq.w	8007a60 <HAL_RCC_OscConfig+0x56c>
 8007950:	2301      	movs	r3, #1
 8007952:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007956:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800795a:	fa93 f3a3 	rbit	r3, r3
 800795e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007962:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007966:	fab3 f383 	clz	r3, r3
 800796a:	b2db      	uxtb	r3, r3
 800796c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007970:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	461a      	mov	r2, r3
 8007978:	2301      	movs	r3, #1
 800797a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800797c:	f7fe f998 	bl	8005cb0 <HAL_GetTick>
 8007980:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007984:	e00a      	b.n	800799c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007986:	f7fe f993 	bl	8005cb0 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	2b02      	cmp	r3, #2
 8007994:	d902      	bls.n	800799c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	f000 bde2 	b.w	8008560 <HAL_RCC_OscConfig+0x106c>
 800799c:	2302      	movs	r3, #2
 800799e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80079a6:	fa93 f3a3 	rbit	r3, r3
 80079aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80079ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079b2:	fab3 f383 	clz	r3, r3
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	095b      	lsrs	r3, r3, #5
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	f043 0301 	orr.w	r3, r3, #1
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d102      	bne.n	80079cc <HAL_RCC_OscConfig+0x4d8>
 80079c6:	4b45      	ldr	r3, [pc, #276]	; (8007adc <HAL_RCC_OscConfig+0x5e8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	e013      	b.n	80079f4 <HAL_RCC_OscConfig+0x500>
 80079cc:	2302      	movs	r3, #2
 80079ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80079d6:	fa93 f3a3 	rbit	r3, r3
 80079da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80079de:	2302      	movs	r3, #2
 80079e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80079e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80079e8:	fa93 f3a3 	rbit	r3, r3
 80079ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80079f0:	4b3a      	ldr	r3, [pc, #232]	; (8007adc <HAL_RCC_OscConfig+0x5e8>)
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	2202      	movs	r2, #2
 80079f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80079fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80079fe:	fa92 f2a2 	rbit	r2, r2
 8007a02:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007a06:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007a0a:	fab2 f282 	clz	r2, r2
 8007a0e:	b2d2      	uxtb	r2, r2
 8007a10:	f042 0220 	orr.w	r2, r2, #32
 8007a14:	b2d2      	uxtb	r2, r2
 8007a16:	f002 021f 	and.w	r2, r2, #31
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8007a20:	4013      	ands	r3, r2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0af      	beq.n	8007986 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a26:	4b2d      	ldr	r3, [pc, #180]	; (8007adc <HAL_RCC_OscConfig+0x5e8>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	21f8      	movs	r1, #248	; 0xf8
 8007a3c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a40:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007a44:	fa91 f1a1 	rbit	r1, r1
 8007a48:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007a4c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007a50:	fab1 f181 	clz	r1, r1
 8007a54:	b2c9      	uxtb	r1, r1
 8007a56:	408b      	lsls	r3, r1
 8007a58:	4920      	ldr	r1, [pc, #128]	; (8007adc <HAL_RCC_OscConfig+0x5e8>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	600b      	str	r3, [r1, #0]
 8007a5e:	e06c      	b.n	8007b3a <HAL_RCC_OscConfig+0x646>
 8007a60:	2301      	movs	r3, #1
 8007a62:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007a6a:	fa93 f3a3 	rbit	r3, r3
 8007a6e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007a72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a76:	fab3 f383 	clz	r3, r3
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007a80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	461a      	mov	r2, r3
 8007a88:	2300      	movs	r3, #0
 8007a8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a8c:	f7fe f910 	bl	8005cb0 <HAL_GetTick>
 8007a90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a94:	e00a      	b.n	8007aac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a96:	f7fe f90b 	bl	8005cb0 <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d902      	bls.n	8007aac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	f000 bd5a 	b.w	8008560 <HAL_RCC_OscConfig+0x106c>
 8007aac:	2302      	movs	r3, #2
 8007aae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ab2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ab6:	fa93 f3a3 	rbit	r3, r3
 8007aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8007abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ac2:	fab3 f383 	clz	r3, r3
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	095b      	lsrs	r3, r3, #5
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	f043 0301 	orr.w	r3, r3, #1
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d104      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x5ec>
 8007ad6:	4b01      	ldr	r3, [pc, #4]	; (8007adc <HAL_RCC_OscConfig+0x5e8>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	e015      	b.n	8007b08 <HAL_RCC_OscConfig+0x614>
 8007adc:	40021000 	.word	0x40021000
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007aea:	fa93 f3a3 	rbit	r3, r3
 8007aee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007af2:	2302      	movs	r3, #2
 8007af4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007af8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007afc:	fa93 f3a3 	rbit	r3, r3
 8007b00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007b04:	4bc8      	ldr	r3, [pc, #800]	; (8007e28 <HAL_RCC_OscConfig+0x934>)
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	2202      	movs	r2, #2
 8007b0a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007b0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007b12:	fa92 f2a2 	rbit	r2, r2
 8007b16:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007b1a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007b1e:	fab2 f282 	clz	r2, r2
 8007b22:	b2d2      	uxtb	r2, r2
 8007b24:	f042 0220 	orr.w	r2, r2, #32
 8007b28:	b2d2      	uxtb	r2, r2
 8007b2a:	f002 021f 	and.w	r2, r2, #31
 8007b2e:	2101      	movs	r1, #1
 8007b30:	fa01 f202 	lsl.w	r2, r1, r2
 8007b34:	4013      	ands	r3, r2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1ad      	bne.n	8007a96 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0308 	and.w	r3, r3, #8
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 8110 	beq.w	8007d70 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d079      	beq.n	8007c54 <HAL_RCC_OscConfig+0x760>
 8007b60:	2301      	movs	r3, #1
 8007b62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b6a:	fa93 f3a3 	rbit	r3, r3
 8007b6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b76:	fab3 f383 	clz	r3, r3
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	4bab      	ldr	r3, [pc, #684]	; (8007e2c <HAL_RCC_OscConfig+0x938>)
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	461a      	mov	r2, r3
 8007b86:	2301      	movs	r3, #1
 8007b88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b8a:	f7fe f891 	bl	8005cb0 <HAL_GetTick>
 8007b8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b92:	e00a      	b.n	8007baa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b94:	f7fe f88c 	bl	8005cb0 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d902      	bls.n	8007baa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	f000 bcdb 	b.w	8008560 <HAL_RCC_OscConfig+0x106c>
 8007baa:	2302      	movs	r3, #2
 8007bac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007bb4:	fa93 f3a3 	rbit	r3, r3
 8007bb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bc0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	fa93 f2a3 	rbit	r2, r3
 8007bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be8:	2202      	movs	r2, #2
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	fa93 f2a3 	rbit	r2, r3
 8007bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007c02:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c04:	4b88      	ldr	r3, [pc, #544]	; (8007e28 <HAL_RCC_OscConfig+0x934>)
 8007c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007c10:	2102      	movs	r1, #2
 8007c12:	6019      	str	r1, [r3, #0]
 8007c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	fa93 f1a3 	rbit	r1, r3
 8007c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007c2a:	6019      	str	r1, [r3, #0]
  return result;
 8007c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	fab3 f383 	clz	r3, r3
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	f003 031f 	and.w	r3, r3, #31
 8007c46:	2101      	movs	r1, #1
 8007c48:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d0a0      	beq.n	8007b94 <HAL_RCC_OscConfig+0x6a0>
 8007c52:	e08d      	b.n	8007d70 <HAL_RCC_OscConfig+0x87c>
 8007c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	fa93 f2a3 	rbit	r2, r3
 8007c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c76:	601a      	str	r2, [r3, #0]
  return result;
 8007c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c80:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c82:	fab3 f383 	clz	r3, r3
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	461a      	mov	r2, r3
 8007c8a:	4b68      	ldr	r3, [pc, #416]	; (8007e2c <HAL_RCC_OscConfig+0x938>)
 8007c8c:	4413      	add	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	461a      	mov	r2, r3
 8007c92:	2300      	movs	r3, #0
 8007c94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c96:	f7fe f80b 	bl	8005cb0 <HAL_GetTick>
 8007c9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c9e:	e00a      	b.n	8007cb6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ca0:	f7fe f806 	bl	8005cb0 <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d902      	bls.n	8007cb6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	f000 bc55 	b.w	8008560 <HAL_RCC_OscConfig+0x106c>
 8007cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	fa93 f2a3 	rbit	r2, r3
 8007cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cd4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	fa93 f2a3 	rbit	r2, r3
 8007cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d06:	2202      	movs	r2, #2
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	fa93 f2a3 	rbit	r2, r3
 8007d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007d20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d22:	4b41      	ldr	r3, [pc, #260]	; (8007e28 <HAL_RCC_OscConfig+0x934>)
 8007d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007d2e:	2102      	movs	r1, #2
 8007d30:	6019      	str	r1, [r3, #0]
 8007d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	fa93 f1a3 	rbit	r1, r3
 8007d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d44:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007d48:	6019      	str	r1, [r3, #0]
  return result;
 8007d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d4e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	fab3 f383 	clz	r3, r3
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f003 031f 	and.w	r3, r3, #31
 8007d64:	2101      	movs	r1, #1
 8007d66:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d197      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 81a1 	beq.w	80080c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d86:	2300      	movs	r3, #0
 8007d88:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d8c:	4b26      	ldr	r3, [pc, #152]	; (8007e28 <HAL_RCC_OscConfig+0x934>)
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d116      	bne.n	8007dc6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d98:	4b23      	ldr	r3, [pc, #140]	; (8007e28 <HAL_RCC_OscConfig+0x934>)
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	4a22      	ldr	r2, [pc, #136]	; (8007e28 <HAL_RCC_OscConfig+0x934>)
 8007d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007da2:	61d3      	str	r3, [r2, #28]
 8007da4:	4b20      	ldr	r3, [pc, #128]	; (8007e28 <HAL_RCC_OscConfig+0x934>)
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007db0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007dbe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dc6:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <HAL_RCC_OscConfig+0x93c>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d11a      	bne.n	8007e08 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007dd2:	4b17      	ldr	r3, [pc, #92]	; (8007e30 <HAL_RCC_OscConfig+0x93c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a16      	ldr	r2, [pc, #88]	; (8007e30 <HAL_RCC_OscConfig+0x93c>)
 8007dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ddc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007dde:	f7fd ff67 	bl	8005cb0 <HAL_GetTick>
 8007de2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007de6:	e009      	b.n	8007dfc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007de8:	f7fd ff62 	bl	8005cb0 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	2b64      	cmp	r3, #100	; 0x64
 8007df6:	d901      	bls.n	8007dfc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e3b1      	b.n	8008560 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dfc:	4b0c      	ldr	r3, [pc, #48]	; (8007e30 <HAL_RCC_OscConfig+0x93c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0ef      	beq.n	8007de8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d10d      	bne.n	8007e34 <HAL_RCC_OscConfig+0x940>
 8007e18:	4b03      	ldr	r3, [pc, #12]	; (8007e28 <HAL_RCC_OscConfig+0x934>)
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	4a02      	ldr	r2, [pc, #8]	; (8007e28 <HAL_RCC_OscConfig+0x934>)
 8007e1e:	f043 0301 	orr.w	r3, r3, #1
 8007e22:	6213      	str	r3, [r2, #32]
 8007e24:	e03c      	b.n	8007ea0 <HAL_RCC_OscConfig+0x9ac>
 8007e26:	bf00      	nop
 8007e28:	40021000 	.word	0x40021000
 8007e2c:	10908120 	.word	0x10908120
 8007e30:	40007000 	.word	0x40007000
 8007e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10c      	bne.n	8007e5e <HAL_RCC_OscConfig+0x96a>
 8007e44:	4bc1      	ldr	r3, [pc, #772]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	4ac0      	ldr	r2, [pc, #768]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8007e4a:	f023 0301 	bic.w	r3, r3, #1
 8007e4e:	6213      	str	r3, [r2, #32]
 8007e50:	4bbe      	ldr	r3, [pc, #760]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8007e52:	6a1b      	ldr	r3, [r3, #32]
 8007e54:	4abd      	ldr	r2, [pc, #756]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8007e56:	f023 0304 	bic.w	r3, r3, #4
 8007e5a:	6213      	str	r3, [r2, #32]
 8007e5c:	e020      	b.n	8007ea0 <HAL_RCC_OscConfig+0x9ac>
 8007e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	d10c      	bne.n	8007e88 <HAL_RCC_OscConfig+0x994>
 8007e6e:	4bb7      	ldr	r3, [pc, #732]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	4ab6      	ldr	r2, [pc, #728]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8007e74:	f043 0304 	orr.w	r3, r3, #4
 8007e78:	6213      	str	r3, [r2, #32]
 8007e7a:	4bb4      	ldr	r3, [pc, #720]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	4ab3      	ldr	r2, [pc, #716]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8007e80:	f043 0301 	orr.w	r3, r3, #1
 8007e84:	6213      	str	r3, [r2, #32]
 8007e86:	e00b      	b.n	8007ea0 <HAL_RCC_OscConfig+0x9ac>
 8007e88:	4bb0      	ldr	r3, [pc, #704]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	4aaf      	ldr	r2, [pc, #700]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8007e8e:	f023 0301 	bic.w	r3, r3, #1
 8007e92:	6213      	str	r3, [r2, #32]
 8007e94:	4bad      	ldr	r3, [pc, #692]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	4aac      	ldr	r2, [pc, #688]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8007e9a:	f023 0304 	bic.w	r3, r3, #4
 8007e9e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 8081 	beq.w	8007fb4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eb2:	f7fd fefd 	bl	8005cb0 <HAL_GetTick>
 8007eb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eba:	e00b      	b.n	8007ed4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ebc:	f7fd fef8 	bl	8005cb0 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d901      	bls.n	8007ed4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e345      	b.n	8008560 <HAL_RCC_OscConfig+0x106c>
 8007ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ed8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007edc:	2202      	movs	r2, #2
 8007ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ee4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	fa93 f2a3 	rbit	r2, r3
 8007eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ef2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007efc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f00:	2202      	movs	r2, #2
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	fa93 f2a3 	rbit	r2, r3
 8007f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f16:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007f1a:	601a      	str	r2, [r3, #0]
  return result;
 8007f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f20:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007f24:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f26:	fab3 f383 	clz	r3, r3
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	095b      	lsrs	r3, r3, #5
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	f043 0302 	orr.w	r3, r3, #2
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d102      	bne.n	8007f40 <HAL_RCC_OscConfig+0xa4c>
 8007f3a:	4b84      	ldr	r3, [pc, #528]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	e013      	b.n	8007f68 <HAL_RCC_OscConfig+0xa74>
 8007f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f44:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007f48:	2202      	movs	r2, #2
 8007f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	fa93 f2a3 	rbit	r2, r3
 8007f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f5e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	4b79      	ldr	r3, [pc, #484]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f6c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007f70:	2102      	movs	r1, #2
 8007f72:	6011      	str	r1, [r2, #0]
 8007f74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f78:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	fa92 f1a2 	rbit	r1, r2
 8007f82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f86:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007f8a:	6011      	str	r1, [r2, #0]
  return result;
 8007f8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f90:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007f94:	6812      	ldr	r2, [r2, #0]
 8007f96:	fab2 f282 	clz	r2, r2
 8007f9a:	b2d2      	uxtb	r2, r2
 8007f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fa0:	b2d2      	uxtb	r2, r2
 8007fa2:	f002 021f 	and.w	r2, r2, #31
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8007fac:	4013      	ands	r3, r2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d084      	beq.n	8007ebc <HAL_RCC_OscConfig+0x9c8>
 8007fb2:	e07f      	b.n	80080b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fb4:	f7fd fe7c 	bl	8005cb0 <HAL_GetTick>
 8007fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fbc:	e00b      	b.n	8007fd6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fbe:	f7fd fe77 	bl	8005cb0 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e2c4      	b.n	8008560 <HAL_RCC_OscConfig+0x106c>
 8007fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fda:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007fde:	2202      	movs	r2, #2
 8007fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fe6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	fa93 f2a3 	rbit	r2, r3
 8007ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ff4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ffe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008002:	2202      	movs	r2, #2
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800800a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	fa93 f2a3 	rbit	r2, r3
 8008014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008018:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800801c:	601a      	str	r2, [r3, #0]
  return result;
 800801e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008022:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008026:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008028:	fab3 f383 	clz	r3, r3
 800802c:	b2db      	uxtb	r3, r3
 800802e:	095b      	lsrs	r3, r3, #5
 8008030:	b2db      	uxtb	r3, r3
 8008032:	f043 0302 	orr.w	r3, r3, #2
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b02      	cmp	r3, #2
 800803a:	d102      	bne.n	8008042 <HAL_RCC_OscConfig+0xb4e>
 800803c:	4b43      	ldr	r3, [pc, #268]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	e013      	b.n	800806a <HAL_RCC_OscConfig+0xb76>
 8008042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008046:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800804a:	2202      	movs	r2, #2
 800804c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800804e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008052:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	fa93 f2a3 	rbit	r2, r3
 800805c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008060:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	4b39      	ldr	r3, [pc, #228]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800806e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8008072:	2102      	movs	r1, #2
 8008074:	6011      	str	r1, [r2, #0]
 8008076:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800807a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800807e:	6812      	ldr	r2, [r2, #0]
 8008080:	fa92 f1a2 	rbit	r1, r2
 8008084:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008088:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800808c:	6011      	str	r1, [r2, #0]
  return result;
 800808e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008092:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008096:	6812      	ldr	r2, [r2, #0]
 8008098:	fab2 f282 	clz	r2, r2
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	f002 021f 	and.w	r2, r2, #31
 80080a8:	2101      	movs	r1, #1
 80080aa:	fa01 f202 	lsl.w	r2, r1, r2
 80080ae:	4013      	ands	r3, r2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d184      	bne.n	8007fbe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80080b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d105      	bne.n	80080c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080bc:	4b23      	ldr	r3, [pc, #140]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 80080be:	69db      	ldr	r3, [r3, #28]
 80080c0:	4a22      	ldr	r2, [pc, #136]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 80080c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 8242 	beq.w	800855e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80080da:	4b1c      	ldr	r3, [pc, #112]	; (800814c <HAL_RCC_OscConfig+0xc58>)
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f003 030c 	and.w	r3, r3, #12
 80080e2:	2b08      	cmp	r3, #8
 80080e4:	f000 8213 	beq.w	800850e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	f040 8162 	bne.w	80083be <HAL_RCC_OscConfig+0xeca>
 80080fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008102:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800810c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	fa93 f2a3 	rbit	r2, r3
 8008116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800811a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800811e:	601a      	str	r2, [r3, #0]
  return result;
 8008120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008124:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008128:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800812a:	fab3 f383 	clz	r3, r3
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008134:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	461a      	mov	r2, r3
 800813c:	2300      	movs	r3, #0
 800813e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008140:	f7fd fdb6 	bl	8005cb0 <HAL_GetTick>
 8008144:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008148:	e00c      	b.n	8008164 <HAL_RCC_OscConfig+0xc70>
 800814a:	bf00      	nop
 800814c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008150:	f7fd fdae 	bl	8005cb0 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	d901      	bls.n	8008164 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e1fd      	b.n	8008560 <HAL_RCC_OscConfig+0x106c>
 8008164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008168:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800816c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008176:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	fa93 f2a3 	rbit	r2, r3
 8008180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008184:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008188:	601a      	str	r2, [r3, #0]
  return result;
 800818a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800818e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008192:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008194:	fab3 f383 	clz	r3, r3
 8008198:	b2db      	uxtb	r3, r3
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f043 0301 	orr.w	r3, r3, #1
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d102      	bne.n	80081ae <HAL_RCC_OscConfig+0xcba>
 80081a8:	4bb0      	ldr	r3, [pc, #704]	; (800846c <HAL_RCC_OscConfig+0xf78>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	e027      	b.n	80081fe <HAL_RCC_OscConfig+0xd0a>
 80081ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80081b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	fa93 f2a3 	rbit	r2, r3
 80081ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081d8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80081dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	fa93 f2a3 	rbit	r2, r3
 80081f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	4b9c      	ldr	r3, [pc, #624]	; (800846c <HAL_RCC_OscConfig+0xf78>)
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008202:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008206:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800820a:	6011      	str	r1, [r2, #0]
 800820c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008210:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008214:	6812      	ldr	r2, [r2, #0]
 8008216:	fa92 f1a2 	rbit	r1, r2
 800821a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800821e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008222:	6011      	str	r1, [r2, #0]
  return result;
 8008224:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008228:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800822c:	6812      	ldr	r2, [r2, #0]
 800822e:	fab2 f282 	clz	r2, r2
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	f042 0220 	orr.w	r2, r2, #32
 8008238:	b2d2      	uxtb	r2, r2
 800823a:	f002 021f 	and.w	r2, r2, #31
 800823e:	2101      	movs	r1, #1
 8008240:	fa01 f202 	lsl.w	r2, r1, r2
 8008244:	4013      	ands	r3, r2
 8008246:	2b00      	cmp	r3, #0
 8008248:	d182      	bne.n	8008150 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800824a:	4b88      	ldr	r3, [pc, #544]	; (800846c <HAL_RCC_OscConfig+0xf78>)
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008256:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800825e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	430b      	orrs	r3, r1
 800826c:	497f      	ldr	r1, [pc, #508]	; (800846c <HAL_RCC_OscConfig+0xf78>)
 800826e:	4313      	orrs	r3, r2
 8008270:	604b      	str	r3, [r1, #4]
 8008272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008276:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800827a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800827e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008284:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	fa93 f2a3 	rbit	r2, r3
 800828e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008292:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008296:	601a      	str	r2, [r3, #0]
  return result;
 8008298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800829c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80082a0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082a2:	fab3 f383 	clz	r3, r3
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80082ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	461a      	mov	r2, r3
 80082b4:	2301      	movs	r3, #1
 80082b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082b8:	f7fd fcfa 	bl	8005cb0 <HAL_GetTick>
 80082bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80082c0:	e009      	b.n	80082d6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082c2:	f7fd fcf5 	bl	8005cb0 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d901      	bls.n	80082d6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e144      	b.n	8008560 <HAL_RCC_OscConfig+0x106c>
 80082d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082da:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80082de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80082e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082e8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	fa93 f2a3 	rbit	r2, r3
 80082f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082f6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80082fa:	601a      	str	r2, [r3, #0]
  return result;
 80082fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008300:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008304:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008306:	fab3 f383 	clz	r3, r3
 800830a:	b2db      	uxtb	r3, r3
 800830c:	095b      	lsrs	r3, r3, #5
 800830e:	b2db      	uxtb	r3, r3
 8008310:	f043 0301 	orr.w	r3, r3, #1
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b01      	cmp	r3, #1
 8008318:	d102      	bne.n	8008320 <HAL_RCC_OscConfig+0xe2c>
 800831a:	4b54      	ldr	r3, [pc, #336]	; (800846c <HAL_RCC_OscConfig+0xf78>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	e027      	b.n	8008370 <HAL_RCC_OscConfig+0xe7c>
 8008320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008324:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008328:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800832c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800832e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008332:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	fa93 f2a3 	rbit	r2, r3
 800833c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008340:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800834a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800834e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008358:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	fa93 f2a3 	rbit	r2, r3
 8008362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008366:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	4b3f      	ldr	r3, [pc, #252]	; (800846c <HAL_RCC_OscConfig+0xf78>)
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008374:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8008378:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800837c:	6011      	str	r1, [r2, #0]
 800837e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008382:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8008386:	6812      	ldr	r2, [r2, #0]
 8008388:	fa92 f1a2 	rbit	r1, r2
 800838c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008390:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008394:	6011      	str	r1, [r2, #0]
  return result;
 8008396:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800839a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800839e:	6812      	ldr	r2, [r2, #0]
 80083a0:	fab2 f282 	clz	r2, r2
 80083a4:	b2d2      	uxtb	r2, r2
 80083a6:	f042 0220 	orr.w	r2, r2, #32
 80083aa:	b2d2      	uxtb	r2, r2
 80083ac:	f002 021f 	and.w	r2, r2, #31
 80083b0:	2101      	movs	r1, #1
 80083b2:	fa01 f202 	lsl.w	r2, r1, r2
 80083b6:	4013      	ands	r3, r2
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d082      	beq.n	80082c2 <HAL_RCC_OscConfig+0xdce>
 80083bc:	e0cf      	b.n	800855e <HAL_RCC_OscConfig+0x106a>
 80083be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083c2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80083c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80083ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083d0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	fa93 f2a3 	rbit	r2, r3
 80083da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083de:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80083e2:	601a      	str	r2, [r3, #0]
  return result;
 80083e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083e8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80083ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083ee:	fab3 f383 	clz	r3, r3
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80083f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	461a      	mov	r2, r3
 8008400:	2300      	movs	r3, #0
 8008402:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008404:	f7fd fc54 	bl	8005cb0 <HAL_GetTick>
 8008408:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800840c:	e009      	b.n	8008422 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800840e:	f7fd fc4f 	bl	8005cb0 <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	2b02      	cmp	r3, #2
 800841c:	d901      	bls.n	8008422 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e09e      	b.n	8008560 <HAL_RCC_OscConfig+0x106c>
 8008422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008426:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800842a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800842e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008434:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	fa93 f2a3 	rbit	r2, r3
 800843e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008442:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008446:	601a      	str	r2, [r3, #0]
  return result;
 8008448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800844c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008450:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008452:	fab3 f383 	clz	r3, r3
 8008456:	b2db      	uxtb	r3, r3
 8008458:	095b      	lsrs	r3, r3, #5
 800845a:	b2db      	uxtb	r3, r3
 800845c:	f043 0301 	orr.w	r3, r3, #1
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b01      	cmp	r3, #1
 8008464:	d104      	bne.n	8008470 <HAL_RCC_OscConfig+0xf7c>
 8008466:	4b01      	ldr	r3, [pc, #4]	; (800846c <HAL_RCC_OscConfig+0xf78>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	e029      	b.n	80084c0 <HAL_RCC_OscConfig+0xfcc>
 800846c:	40021000 	.word	0x40021000
 8008470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008474:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800847c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800847e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008482:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	fa93 f2a3 	rbit	r2, r3
 800848c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008490:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800849a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800849e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084a8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	fa93 f2a3 	rbit	r2, r3
 80084b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084b6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	4b2b      	ldr	r3, [pc, #172]	; (800856c <HAL_RCC_OscConfig+0x1078>)
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80084c4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80084c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80084cc:	6011      	str	r1, [r2, #0]
 80084ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80084d2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	fa92 f1a2 	rbit	r1, r2
 80084dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80084e0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80084e4:	6011      	str	r1, [r2, #0]
  return result;
 80084e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80084ea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80084ee:	6812      	ldr	r2, [r2, #0]
 80084f0:	fab2 f282 	clz	r2, r2
 80084f4:	b2d2      	uxtb	r2, r2
 80084f6:	f042 0220 	orr.w	r2, r2, #32
 80084fa:	b2d2      	uxtb	r2, r2
 80084fc:	f002 021f 	and.w	r2, r2, #31
 8008500:	2101      	movs	r1, #1
 8008502:	fa01 f202 	lsl.w	r2, r1, r2
 8008506:	4013      	ands	r3, r2
 8008508:	2b00      	cmp	r3, #0
 800850a:	d180      	bne.n	800840e <HAL_RCC_OscConfig+0xf1a>
 800850c:	e027      	b.n	800855e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800850e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d101      	bne.n	8008522 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e01e      	b.n	8008560 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008522:	4b12      	ldr	r3, [pc, #72]	; (800856c <HAL_RCC_OscConfig+0x1078>)
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800852a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800852e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008536:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	429a      	cmp	r2, r3
 8008540:	d10b      	bne.n	800855a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008542:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008546:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800854a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800854e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008556:	429a      	cmp	r2, r3
 8008558:	d001      	beq.n	800855e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e000      	b.n	8008560 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	40021000 	.word	0x40021000

08008570 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b09e      	sub	sp, #120	; 0x78
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e162      	b.n	800884e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008588:	4b90      	ldr	r3, [pc, #576]	; (80087cc <HAL_RCC_ClockConfig+0x25c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d910      	bls.n	80085b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008596:	4b8d      	ldr	r3, [pc, #564]	; (80087cc <HAL_RCC_ClockConfig+0x25c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f023 0207 	bic.w	r2, r3, #7
 800859e:	498b      	ldr	r1, [pc, #556]	; (80087cc <HAL_RCC_ClockConfig+0x25c>)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085a6:	4b89      	ldr	r3, [pc, #548]	; (80087cc <HAL_RCC_ClockConfig+0x25c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0307 	and.w	r3, r3, #7
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d001      	beq.n	80085b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e14a      	b.n	800884e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0302 	and.w	r3, r3, #2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d008      	beq.n	80085d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085c4:	4b82      	ldr	r3, [pc, #520]	; (80087d0 <HAL_RCC_ClockConfig+0x260>)
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	497f      	ldr	r1, [pc, #508]	; (80087d0 <HAL_RCC_ClockConfig+0x260>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 80dc 	beq.w	800879c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d13c      	bne.n	8008666 <HAL_RCC_ClockConfig+0xf6>
 80085ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085f4:	fa93 f3a3 	rbit	r3, r3
 80085f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80085fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085fc:	fab3 f383 	clz	r3, r3
 8008600:	b2db      	uxtb	r3, r3
 8008602:	095b      	lsrs	r3, r3, #5
 8008604:	b2db      	uxtb	r3, r3
 8008606:	f043 0301 	orr.w	r3, r3, #1
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b01      	cmp	r3, #1
 800860e:	d102      	bne.n	8008616 <HAL_RCC_ClockConfig+0xa6>
 8008610:	4b6f      	ldr	r3, [pc, #444]	; (80087d0 <HAL_RCC_ClockConfig+0x260>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	e00f      	b.n	8008636 <HAL_RCC_ClockConfig+0xc6>
 8008616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800861a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800861c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800861e:	fa93 f3a3 	rbit	r3, r3
 8008622:	667b      	str	r3, [r7, #100]	; 0x64
 8008624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008628:	663b      	str	r3, [r7, #96]	; 0x60
 800862a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800862c:	fa93 f3a3 	rbit	r3, r3
 8008630:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008632:	4b67      	ldr	r3, [pc, #412]	; (80087d0 <HAL_RCC_ClockConfig+0x260>)
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800863a:	65ba      	str	r2, [r7, #88]	; 0x58
 800863c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800863e:	fa92 f2a2 	rbit	r2, r2
 8008642:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008646:	fab2 f282 	clz	r2, r2
 800864a:	b2d2      	uxtb	r2, r2
 800864c:	f042 0220 	orr.w	r2, r2, #32
 8008650:	b2d2      	uxtb	r2, r2
 8008652:	f002 021f 	and.w	r2, r2, #31
 8008656:	2101      	movs	r1, #1
 8008658:	fa01 f202 	lsl.w	r2, r1, r2
 800865c:	4013      	ands	r3, r2
 800865e:	2b00      	cmp	r3, #0
 8008660:	d17b      	bne.n	800875a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e0f3      	b.n	800884e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2b02      	cmp	r3, #2
 800866c:	d13c      	bne.n	80086e8 <HAL_RCC_ClockConfig+0x178>
 800866e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008672:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008676:	fa93 f3a3 	rbit	r3, r3
 800867a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800867c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800867e:	fab3 f383 	clz	r3, r3
 8008682:	b2db      	uxtb	r3, r3
 8008684:	095b      	lsrs	r3, r3, #5
 8008686:	b2db      	uxtb	r3, r3
 8008688:	f043 0301 	orr.w	r3, r3, #1
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b01      	cmp	r3, #1
 8008690:	d102      	bne.n	8008698 <HAL_RCC_ClockConfig+0x128>
 8008692:	4b4f      	ldr	r3, [pc, #316]	; (80087d0 <HAL_RCC_ClockConfig+0x260>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	e00f      	b.n	80086b8 <HAL_RCC_ClockConfig+0x148>
 8008698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800869c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800869e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086a0:	fa93 f3a3 	rbit	r3, r3
 80086a4:	647b      	str	r3, [r7, #68]	; 0x44
 80086a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086aa:	643b      	str	r3, [r7, #64]	; 0x40
 80086ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ae:	fa93 f3a3 	rbit	r3, r3
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b4:	4b46      	ldr	r3, [pc, #280]	; (80087d0 <HAL_RCC_ClockConfig+0x260>)
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80086bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80086be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086c0:	fa92 f2a2 	rbit	r2, r2
 80086c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80086c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086c8:	fab2 f282 	clz	r2, r2
 80086cc:	b2d2      	uxtb	r2, r2
 80086ce:	f042 0220 	orr.w	r2, r2, #32
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	f002 021f 	and.w	r2, r2, #31
 80086d8:	2101      	movs	r1, #1
 80086da:	fa01 f202 	lsl.w	r2, r1, r2
 80086de:	4013      	ands	r3, r2
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d13a      	bne.n	800875a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e0b2      	b.n	800884e <HAL_RCC_ClockConfig+0x2de>
 80086e8:	2302      	movs	r3, #2
 80086ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ee:	fa93 f3a3 	rbit	r3, r3
 80086f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80086f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086f6:	fab3 f383 	clz	r3, r3
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	095b      	lsrs	r3, r3, #5
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	f043 0301 	orr.w	r3, r3, #1
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b01      	cmp	r3, #1
 8008708:	d102      	bne.n	8008710 <HAL_RCC_ClockConfig+0x1a0>
 800870a:	4b31      	ldr	r3, [pc, #196]	; (80087d0 <HAL_RCC_ClockConfig+0x260>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	e00d      	b.n	800872c <HAL_RCC_ClockConfig+0x1bc>
 8008710:	2302      	movs	r3, #2
 8008712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	fa93 f3a3 	rbit	r3, r3
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
 800871c:	2302      	movs	r3, #2
 800871e:	623b      	str	r3, [r7, #32]
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	fa93 f3a3 	rbit	r3, r3
 8008726:	61fb      	str	r3, [r7, #28]
 8008728:	4b29      	ldr	r3, [pc, #164]	; (80087d0 <HAL_RCC_ClockConfig+0x260>)
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	2202      	movs	r2, #2
 800872e:	61ba      	str	r2, [r7, #24]
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	fa92 f2a2 	rbit	r2, r2
 8008736:	617a      	str	r2, [r7, #20]
  return result;
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	fab2 f282 	clz	r2, r2
 800873e:	b2d2      	uxtb	r2, r2
 8008740:	f042 0220 	orr.w	r2, r2, #32
 8008744:	b2d2      	uxtb	r2, r2
 8008746:	f002 021f 	and.w	r2, r2, #31
 800874a:	2101      	movs	r1, #1
 800874c:	fa01 f202 	lsl.w	r2, r1, r2
 8008750:	4013      	ands	r3, r2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e079      	b.n	800884e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800875a:	4b1d      	ldr	r3, [pc, #116]	; (80087d0 <HAL_RCC_ClockConfig+0x260>)
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f023 0203 	bic.w	r2, r3, #3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	491a      	ldr	r1, [pc, #104]	; (80087d0 <HAL_RCC_ClockConfig+0x260>)
 8008768:	4313      	orrs	r3, r2
 800876a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800876c:	f7fd faa0 	bl	8005cb0 <HAL_GetTick>
 8008770:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008772:	e00a      	b.n	800878a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008774:	f7fd fa9c 	bl	8005cb0 <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008782:	4293      	cmp	r3, r2
 8008784:	d901      	bls.n	800878a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e061      	b.n	800884e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800878a:	4b11      	ldr	r3, [pc, #68]	; (80087d0 <HAL_RCC_ClockConfig+0x260>)
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f003 020c 	and.w	r2, r3, #12
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	429a      	cmp	r2, r3
 800879a:	d1eb      	bne.n	8008774 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800879c:	4b0b      	ldr	r3, [pc, #44]	; (80087cc <HAL_RCC_ClockConfig+0x25c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0307 	and.w	r3, r3, #7
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d214      	bcs.n	80087d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087aa:	4b08      	ldr	r3, [pc, #32]	; (80087cc <HAL_RCC_ClockConfig+0x25c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f023 0207 	bic.w	r2, r3, #7
 80087b2:	4906      	ldr	r1, [pc, #24]	; (80087cc <HAL_RCC_ClockConfig+0x25c>)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ba:	4b04      	ldr	r3, [pc, #16]	; (80087cc <HAL_RCC_ClockConfig+0x25c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d005      	beq.n	80087d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e040      	b.n	800884e <HAL_RCC_ClockConfig+0x2de>
 80087cc:	40022000 	.word	0x40022000
 80087d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d008      	beq.n	80087f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087e0:	4b1d      	ldr	r3, [pc, #116]	; (8008858 <HAL_RCC_ClockConfig+0x2e8>)
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	491a      	ldr	r1, [pc, #104]	; (8008858 <HAL_RCC_ClockConfig+0x2e8>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0308 	and.w	r3, r3, #8
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d009      	beq.n	8008812 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087fe:	4b16      	ldr	r3, [pc, #88]	; (8008858 <HAL_RCC_ClockConfig+0x2e8>)
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	4912      	ldr	r1, [pc, #72]	; (8008858 <HAL_RCC_ClockConfig+0x2e8>)
 800880e:	4313      	orrs	r3, r2
 8008810:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008812:	f000 f829 	bl	8008868 <HAL_RCC_GetSysClockFreq>
 8008816:	4601      	mov	r1, r0
 8008818:	4b0f      	ldr	r3, [pc, #60]	; (8008858 <HAL_RCC_ClockConfig+0x2e8>)
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008820:	22f0      	movs	r2, #240	; 0xf0
 8008822:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	fa92 f2a2 	rbit	r2, r2
 800882a:	60fa      	str	r2, [r7, #12]
  return result;
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	fab2 f282 	clz	r2, r2
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	40d3      	lsrs	r3, r2
 8008836:	4a09      	ldr	r2, [pc, #36]	; (800885c <HAL_RCC_ClockConfig+0x2ec>)
 8008838:	5cd3      	ldrb	r3, [r2, r3]
 800883a:	fa21 f303 	lsr.w	r3, r1, r3
 800883e:	4a08      	ldr	r2, [pc, #32]	; (8008860 <HAL_RCC_ClockConfig+0x2f0>)
 8008840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008842:	4b08      	ldr	r3, [pc, #32]	; (8008864 <HAL_RCC_ClockConfig+0x2f4>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4618      	mov	r0, r3
 8008848:	f7fd f9ee 	bl	8005c28 <HAL_InitTick>
  
  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3778      	adds	r7, #120	; 0x78
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	40021000 	.word	0x40021000
 800885c:	0800dba4 	.word	0x0800dba4
 8008860:	20000054 	.word	0x20000054
 8008864:	20000060 	.word	0x20000060

08008868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008868:	b480      	push	{r7}
 800886a:	b08b      	sub	sp, #44	; 0x2c
 800886c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	61fb      	str	r3, [r7, #28]
 8008872:	2300      	movs	r3, #0
 8008874:	61bb      	str	r3, [r7, #24]
 8008876:	2300      	movs	r3, #0
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
 800887a:	2300      	movs	r3, #0
 800887c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008882:	4b29      	ldr	r3, [pc, #164]	; (8008928 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	f003 030c 	and.w	r3, r3, #12
 800888e:	2b04      	cmp	r3, #4
 8008890:	d002      	beq.n	8008898 <HAL_RCC_GetSysClockFreq+0x30>
 8008892:	2b08      	cmp	r3, #8
 8008894:	d003      	beq.n	800889e <HAL_RCC_GetSysClockFreq+0x36>
 8008896:	e03c      	b.n	8008912 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008898:	4b24      	ldr	r3, [pc, #144]	; (800892c <HAL_RCC_GetSysClockFreq+0xc4>)
 800889a:	623b      	str	r3, [r7, #32]
      break;
 800889c:	e03c      	b.n	8008918 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80088a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80088a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	fa92 f2a2 	rbit	r2, r2
 80088b0:	607a      	str	r2, [r7, #4]
  return result;
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	fab2 f282 	clz	r2, r2
 80088b8:	b2d2      	uxtb	r2, r2
 80088ba:	40d3      	lsrs	r3, r2
 80088bc:	4a1c      	ldr	r2, [pc, #112]	; (8008930 <HAL_RCC_GetSysClockFreq+0xc8>)
 80088be:	5cd3      	ldrb	r3, [r2, r3]
 80088c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80088c2:	4b19      	ldr	r3, [pc, #100]	; (8008928 <HAL_RCC_GetSysClockFreq+0xc0>)
 80088c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c6:	f003 030f 	and.w	r3, r3, #15
 80088ca:	220f      	movs	r2, #15
 80088cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	fa92 f2a2 	rbit	r2, r2
 80088d4:	60fa      	str	r2, [r7, #12]
  return result;
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	fab2 f282 	clz	r2, r2
 80088dc:	b2d2      	uxtb	r2, r2
 80088de:	40d3      	lsrs	r3, r2
 80088e0:	4a14      	ldr	r2, [pc, #80]	; (8008934 <HAL_RCC_GetSysClockFreq+0xcc>)
 80088e2:	5cd3      	ldrb	r3, [r2, r3]
 80088e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d008      	beq.n	8008902 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80088f0:	4a0e      	ldr	r2, [pc, #56]	; (800892c <HAL_RCC_GetSysClockFreq+0xc4>)
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	fb02 f303 	mul.w	r3, r2, r3
 80088fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008900:	e004      	b.n	800890c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	4a0c      	ldr	r2, [pc, #48]	; (8008938 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008906:	fb02 f303 	mul.w	r3, r2, r3
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	623b      	str	r3, [r7, #32]
      break;
 8008910:	e002      	b.n	8008918 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008912:	4b06      	ldr	r3, [pc, #24]	; (800892c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008914:	623b      	str	r3, [r7, #32]
      break;
 8008916:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008918:	6a3b      	ldr	r3, [r7, #32]
}
 800891a:	4618      	mov	r0, r3
 800891c:	372c      	adds	r7, #44	; 0x2c
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	40021000 	.word	0x40021000
 800892c:	007a1200 	.word	0x007a1200
 8008930:	0800dbbc 	.word	0x0800dbbc
 8008934:	0800dbcc 	.word	0x0800dbcc
 8008938:	003d0900 	.word	0x003d0900

0800893c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008940:	4b03      	ldr	r3, [pc, #12]	; (8008950 <HAL_RCC_GetHCLKFreq+0x14>)
 8008942:	681b      	ldr	r3, [r3, #0]
}
 8008944:	4618      	mov	r0, r3
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	20000054 	.word	0x20000054

08008954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800895a:	f7ff ffef 	bl	800893c <HAL_RCC_GetHCLKFreq>
 800895e:	4601      	mov	r1, r0
 8008960:	4b0b      	ldr	r3, [pc, #44]	; (8008990 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008968:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800896c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	fa92 f2a2 	rbit	r2, r2
 8008974:	603a      	str	r2, [r7, #0]
  return result;
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	fab2 f282 	clz	r2, r2
 800897c:	b2d2      	uxtb	r2, r2
 800897e:	40d3      	lsrs	r3, r2
 8008980:	4a04      	ldr	r2, [pc, #16]	; (8008994 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008982:	5cd3      	ldrb	r3, [r2, r3]
 8008984:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	40021000 	.word	0x40021000
 8008994:	0800dbb4 	.word	0x0800dbb4

08008998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800899e:	f7ff ffcd 	bl	800893c <HAL_RCC_GetHCLKFreq>
 80089a2:	4601      	mov	r1, r0
 80089a4:	4b0b      	ldr	r3, [pc, #44]	; (80089d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80089ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80089b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	fa92 f2a2 	rbit	r2, r2
 80089b8:	603a      	str	r2, [r7, #0]
  return result;
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	fab2 f282 	clz	r2, r2
 80089c0:	b2d2      	uxtb	r2, r2
 80089c2:	40d3      	lsrs	r3, r2
 80089c4:	4a04      	ldr	r2, [pc, #16]	; (80089d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80089c6:	5cd3      	ldrb	r3, [r2, r3]
 80089c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	40021000 	.word	0x40021000
 80089d8:	0800dbb4 	.word	0x0800dbb4

080089dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b092      	sub	sp, #72	; 0x48
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80089e8:	2300      	movs	r3, #0
 80089ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80089ec:	2300      	movs	r3, #0
 80089ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 80d4 	beq.w	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a00:	4b4e      	ldr	r3, [pc, #312]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10e      	bne.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a0c:	4b4b      	ldr	r3, [pc, #300]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a0e:	69db      	ldr	r3, [r3, #28]
 8008a10:	4a4a      	ldr	r2, [pc, #296]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a16:	61d3      	str	r3, [r2, #28]
 8008a18:	4b48      	ldr	r3, [pc, #288]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a20:	60bb      	str	r3, [r7, #8]
 8008a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a24:	2301      	movs	r3, #1
 8008a26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a2a:	4b45      	ldr	r3, [pc, #276]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d118      	bne.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a36:	4b42      	ldr	r3, [pc, #264]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a41      	ldr	r2, [pc, #260]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a42:	f7fd f935 	bl	8005cb0 <HAL_GetTick>
 8008a46:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a48:	e008      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a4a:	f7fd f931 	bl	8005cb0 <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	2b64      	cmp	r3, #100	; 0x64
 8008a56:	d901      	bls.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e13c      	b.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a5c:	4b38      	ldr	r3, [pc, #224]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d0f0      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008a68:	4b34      	ldr	r3, [pc, #208]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 8084 	beq.w	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d07c      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a88:	4b2c      	ldr	r3, [pc, #176]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9a:	fa93 f3a3 	rbit	r3, r3
 8008a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008aa2:	fab3 f383 	clz	r3, r3
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	4b26      	ldr	r3, [pc, #152]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	6013      	str	r3, [r2, #0]
 8008ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008aba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	fa93 f3a3 	rbit	r3, r3
 8008ac2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ac6:	fab3 f383 	clz	r3, r3
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	461a      	mov	r2, r3
 8008ace:	4b1d      	ldr	r3, [pc, #116]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008ad0:	4413      	add	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008ada:	4a18      	ldr	r2, [pc, #96]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ade:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d04b      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aea:	f7fd f8e1 	bl	8005cb0 <HAL_GetTick>
 8008aee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008af0:	e00a      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008af2:	f7fd f8dd 	bl	8005cb0 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d901      	bls.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e0e6      	b.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8008b08:	2302      	movs	r3, #2
 8008b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0e:	fa93 f3a3 	rbit	r3, r3
 8008b12:	627b      	str	r3, [r7, #36]	; 0x24
 8008b14:	2302      	movs	r3, #2
 8008b16:	623b      	str	r3, [r7, #32]
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	fa93 f3a3 	rbit	r3, r3
 8008b1e:	61fb      	str	r3, [r7, #28]
  return result;
 8008b20:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b22:	fab3 f383 	clz	r3, r3
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	095b      	lsrs	r3, r3, #5
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	f043 0302 	orr.w	r3, r3, #2
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d108      	bne.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008b36:	4b01      	ldr	r3, [pc, #4]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	e00d      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008b3c:	40021000 	.word	0x40021000
 8008b40:	40007000 	.word	0x40007000
 8008b44:	10908100 	.word	0x10908100
 8008b48:	2302      	movs	r3, #2
 8008b4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	fa93 f3a3 	rbit	r3, r3
 8008b52:	617b      	str	r3, [r7, #20]
 8008b54:	4b62      	ldr	r3, [pc, #392]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	2202      	movs	r2, #2
 8008b5a:	613a      	str	r2, [r7, #16]
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	fa92 f2a2 	rbit	r2, r2
 8008b62:	60fa      	str	r2, [r7, #12]
  return result;
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	fab2 f282 	clz	r2, r2
 8008b6a:	b2d2      	uxtb	r2, r2
 8008b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b70:	b2d2      	uxtb	r2, r2
 8008b72:	f002 021f 	and.w	r2, r2, #31
 8008b76:	2101      	movs	r1, #1
 8008b78:	fa01 f202 	lsl.w	r2, r1, r2
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0b7      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008b82:	4b57      	ldr	r3, [pc, #348]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	4954      	ldr	r1, [pc, #336]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008b94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d105      	bne.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b9c:	4b50      	ldr	r3, [pc, #320]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	4a4f      	ldr	r2, [pc, #316]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ba6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d008      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008bb4:	4b4a      	ldr	r3, [pc, #296]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb8:	f023 0203 	bic.w	r2, r3, #3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	4947      	ldr	r1, [pc, #284]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0320 	and.w	r3, r3, #32
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d008      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008bd2:	4b43      	ldr	r3, [pc, #268]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	f023 0210 	bic.w	r2, r3, #16
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	4940      	ldr	r1, [pc, #256]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008be0:	4313      	orrs	r3, r2
 8008be2:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d008      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008bf0:	4b3b      	ldr	r3, [pc, #236]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf4:	f023 0220 	bic.w	r2, r3, #32
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	4938      	ldr	r1, [pc, #224]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d008      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008c0e:	4b34      	ldr	r3, [pc, #208]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c12:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	4931      	ldr	r1, [pc, #196]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d008      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c2c:	4b2c      	ldr	r3, [pc, #176]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	69db      	ldr	r3, [r3, #28]
 8008c38:	4929      	ldr	r1, [pc, #164]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d008      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8008c4a:	4b25      	ldr	r3, [pc, #148]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	4922      	ldr	r1, [pc, #136]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d008      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008c68:	4b1d      	ldr	r3, [pc, #116]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	491a      	ldr	r1, [pc, #104]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d008      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008c86:	4b16      	ldr	r3, [pc, #88]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c92:	4913      	ldr	r1, [pc, #76]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c94:	4313      	orrs	r3, r2
 8008c96:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d008      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8008ca4:	4b0e      	ldr	r3, [pc, #56]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb0:	490b      	ldr	r1, [pc, #44]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d008      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8008cc2:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cce:	4904      	ldr	r1, [pc, #16]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3748      	adds	r7, #72	; 0x48
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	40021000 	.word	0x40021000

08008ce4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e09d      	b.n	8008e32 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d108      	bne.n	8008d10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d06:	d009      	beq.n	8008d1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	61da      	str	r2, [r3, #28]
 8008d0e:	e005      	b.n	8008d1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d106      	bne.n	8008d3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7fb fd94 	bl	8004864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d5c:	d902      	bls.n	8008d64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60fb      	str	r3, [r7, #12]
 8008d62:	e002      	b.n	8008d6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008d72:	d007      	beq.n	8008d84 <HAL_SPI_Init+0xa0>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d7c:	d002      	beq.n	8008d84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008d94:	431a      	orrs	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	431a      	orrs	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	431a      	orrs	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008db2:	431a      	orrs	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	69db      	ldr	r3, [r3, #28]
 8008db8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc6:	ea42 0103 	orr.w	r1, r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	430a      	orrs	r2, r1
 8008dd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	0c1b      	lsrs	r3, r3, #16
 8008de0:	f003 0204 	and.w	r2, r3, #4
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de8:	f003 0310 	and.w	r3, r3, #16
 8008dec:	431a      	orrs	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df2:	f003 0308 	and.w	r3, r3, #8
 8008df6:	431a      	orrs	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008e00:	ea42 0103 	orr.w	r1, r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	69da      	ldr	r2, [r3, #28]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b088      	sub	sp, #32
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	60f8      	str	r0, [r7, #12]
 8008e42:	60b9      	str	r1, [r7, #8]
 8008e44:	603b      	str	r3, [r7, #0]
 8008e46:	4613      	mov	r3, r2
 8008e48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d101      	bne.n	8008e5c <HAL_SPI_Transmit+0x22>
 8008e58:	2302      	movs	r3, #2
 8008e5a:	e15f      	b.n	800911c <HAL_SPI_Transmit+0x2e2>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e64:	f7fc ff24 	bl	8005cb0 <HAL_GetTick>
 8008e68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008e6a:	88fb      	ldrh	r3, [r7, #6]
 8008e6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d002      	beq.n	8008e80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008e7e:	e148      	b.n	8009112 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <HAL_SPI_Transmit+0x52>
 8008e86:	88fb      	ldrh	r3, [r7, #6]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d102      	bne.n	8008e92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008e90:	e13f      	b.n	8009112 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2203      	movs	r2, #3
 8008e96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	88fa      	ldrh	r2, [r7, #6]
 8008eaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	88fa      	ldrh	r2, [r7, #6]
 8008eb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008edc:	d10f      	bne.n	8008efe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008eec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008efc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f08:	2b40      	cmp	r3, #64	; 0x40
 8008f0a:	d007      	beq.n	8008f1c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f24:	d94f      	bls.n	8008fc6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d002      	beq.n	8008f34 <HAL_SPI_Transmit+0xfa>
 8008f2e:	8afb      	ldrh	r3, [r7, #22]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d142      	bne.n	8008fba <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	881a      	ldrh	r2, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f44:	1c9a      	adds	r2, r3, #2
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	3b01      	subs	r3, #1
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008f58:	e02f      	b.n	8008fba <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d112      	bne.n	8008f8e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6c:	881a      	ldrh	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f78:	1c9a      	adds	r2, r3, #2
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	3b01      	subs	r3, #1
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f8c:	e015      	b.n	8008fba <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f8e:	f7fc fe8f 	bl	8005cb0 <HAL_GetTick>
 8008f92:	4602      	mov	r2, r0
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d803      	bhi.n	8008fa6 <HAL_SPI_Transmit+0x16c>
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa4:	d102      	bne.n	8008fac <HAL_SPI_Transmit+0x172>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d106      	bne.n	8008fba <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008fb8:	e0ab      	b.n	8009112 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1ca      	bne.n	8008f5a <HAL_SPI_Transmit+0x120>
 8008fc4:	e080      	b.n	80090c8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d002      	beq.n	8008fd4 <HAL_SPI_Transmit+0x19a>
 8008fce:	8afb      	ldrh	r3, [r7, #22]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d174      	bne.n	80090be <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d912      	bls.n	8009004 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe2:	881a      	ldrh	r2, [r3, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fee:	1c9a      	adds	r2, r3, #2
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	3b02      	subs	r3, #2
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009002:	e05c      	b.n	80090be <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	330c      	adds	r3, #12
 800900e:	7812      	ldrb	r2, [r2, #0]
 8009010:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009020:	b29b      	uxth	r3, r3
 8009022:	3b01      	subs	r3, #1
 8009024:	b29a      	uxth	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800902a:	e048      	b.n	80090be <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f003 0302 	and.w	r3, r3, #2
 8009036:	2b02      	cmp	r3, #2
 8009038:	d12b      	bne.n	8009092 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800903e:	b29b      	uxth	r3, r3
 8009040:	2b01      	cmp	r3, #1
 8009042:	d912      	bls.n	800906a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009048:	881a      	ldrh	r2, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009054:	1c9a      	adds	r2, r3, #2
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800905e:	b29b      	uxth	r3, r3
 8009060:	3b02      	subs	r3, #2
 8009062:	b29a      	uxth	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009068:	e029      	b.n	80090be <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	330c      	adds	r3, #12
 8009074:	7812      	ldrb	r2, [r2, #0]
 8009076:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907c:	1c5a      	adds	r2, r3, #1
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009086:	b29b      	uxth	r3, r3
 8009088:	3b01      	subs	r3, #1
 800908a:	b29a      	uxth	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009090:	e015      	b.n	80090be <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009092:	f7fc fe0d 	bl	8005cb0 <HAL_GetTick>
 8009096:	4602      	mov	r2, r0
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d803      	bhi.n	80090aa <HAL_SPI_Transmit+0x270>
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a8:	d102      	bne.n	80090b0 <HAL_SPI_Transmit+0x276>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d106      	bne.n	80090be <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80090bc:	e029      	b.n	8009112 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1b1      	bne.n	800902c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090c8:	69ba      	ldr	r2, [r7, #24]
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 fbd7 	bl	8009880 <SPI_EndRxTxTransaction>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2220      	movs	r2, #32
 80090dc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10a      	bne.n	80090fc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090e6:	2300      	movs	r3, #0
 80090e8:	613b      	str	r3, [r7, #16]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	613b      	str	r3, [r7, #16]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	613b      	str	r3, [r7, #16]
 80090fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	77fb      	strb	r3, [r7, #31]
 8009108:	e003      	b.n	8009112 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800911a:	7ffb      	ldrb	r3, [r7, #31]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3720      	adds	r7, #32
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	4613      	mov	r3, r2
 8009130:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800913c:	2b01      	cmp	r3, #1
 800913e:	d101      	bne.n	8009144 <HAL_SPI_Transmit_DMA+0x20>
 8009140:	2302      	movs	r3, #2
 8009142:	e0d4      	b.n	80092ee <HAL_SPI_Transmit_DMA+0x1ca>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b01      	cmp	r3, #1
 8009156:	d002      	beq.n	800915e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009158:	2302      	movs	r3, #2
 800915a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800915c:	e0c2      	b.n	80092e4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d002      	beq.n	800916a <HAL_SPI_Transmit_DMA+0x46>
 8009164:	88fb      	ldrh	r3, [r7, #6]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d102      	bne.n	8009170 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800916e:	e0b9      	b.n	80092e4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2203      	movs	r2, #3
 8009174:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	88fa      	ldrh	r2, [r7, #6]
 8009188:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	88fa      	ldrh	r2, [r7, #6]
 800918e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091ba:	d10f      	bne.n	80091dc <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e0:	4a45      	ldr	r2, [pc, #276]	; (80092f8 <HAL_SPI_Transmit_DMA+0x1d4>)
 80091e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e8:	4a44      	ldr	r2, [pc, #272]	; (80092fc <HAL_SPI_Transmit_DMA+0x1d8>)
 80091ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f0:	4a43      	ldr	r2, [pc, #268]	; (8009300 <HAL_SPI_Transmit_DMA+0x1dc>)
 80091f2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f8:	2200      	movs	r2, #0
 80091fa:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800920a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009214:	d82d      	bhi.n	8009272 <HAL_SPI_Transmit_DMA+0x14e>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009220:	d127      	bne.n	8009272 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009226:	b29b      	uxth	r3, r3
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10f      	bne.n	8009250 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	685a      	ldr	r2, [r3, #4]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800923e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009244:	b29b      	uxth	r3, r3
 8009246:	085b      	lsrs	r3, r3, #1
 8009248:	b29a      	uxth	r2, r3
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800924e:	e010      	b.n	8009272 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	685a      	ldr	r2, [r3, #4]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800925e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009264:	b29b      	uxth	r3, r3
 8009266:	085b      	lsrs	r3, r3, #1
 8009268:	b29b      	uxth	r3, r3
 800926a:	3301      	adds	r3, #1
 800926c:	b29a      	uxth	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927a:	4619      	mov	r1, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	330c      	adds	r3, #12
 8009282:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009288:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800928a:	f7fc fe99 	bl	8005fc0 <HAL_DMA_Start_IT>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d008      	beq.n	80092a6 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009298:	f043 0210 	orr.w	r2, r3, #16
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	75fb      	strb	r3, [r7, #23]

    goto error;
 80092a4:	e01e      	b.n	80092e4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b0:	2b40      	cmp	r3, #64	; 0x40
 80092b2:	d007      	beq.n	80092c4 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092c2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0220 	orr.w	r2, r2, #32
 80092d2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	685a      	ldr	r2, [r3, #4]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f042 0202 	orr.w	r2, r2, #2
 80092e2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	080095bf 	.word	0x080095bf
 80092fc:	08009519 	.word	0x08009519
 8009300:	080095db 	.word	0x080095db

08009304 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	099b      	lsrs	r3, r3, #6
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10f      	bne.n	8009348 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	099b      	lsrs	r3, r3, #6
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d004      	beq.n	8009348 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	4798      	blx	r3
    return;
 8009346:	e0d7      	b.n	80094f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	085b      	lsrs	r3, r3, #1
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00a      	beq.n	800936a <HAL_SPI_IRQHandler+0x66>
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	09db      	lsrs	r3, r3, #7
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	2b00      	cmp	r3, #0
 800935e:	d004      	beq.n	800936a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	4798      	blx	r3
    return;
 8009368:	e0c6      	b.n	80094f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	095b      	lsrs	r3, r3, #5
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10c      	bne.n	8009390 <HAL_SPI_IRQHandler+0x8c>
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	099b      	lsrs	r3, r3, #6
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d106      	bne.n	8009390 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	0a1b      	lsrs	r3, r3, #8
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 80b4 	beq.w	80094f8 <HAL_SPI_IRQHandler+0x1f4>
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	095b      	lsrs	r3, r3, #5
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 80ad 	beq.w	80094f8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	099b      	lsrs	r3, r3, #6
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d023      	beq.n	80093f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	d011      	beq.n	80093da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093ba:	f043 0204 	orr.w	r2, r3, #4
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093c2:	2300      	movs	r3, #0
 80093c4:	617b      	str	r3, [r7, #20]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	617b      	str	r3, [r7, #20]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	617b      	str	r3, [r7, #20]
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	e00b      	b.n	80093f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093da:	2300      	movs	r3, #0
 80093dc:	613b      	str	r3, [r7, #16]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	613b      	str	r3, [r7, #16]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	613b      	str	r3, [r7, #16]
 80093ee:	693b      	ldr	r3, [r7, #16]
        return;
 80093f0:	e082      	b.n	80094f8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	095b      	lsrs	r3, r3, #5
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d014      	beq.n	8009428 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009402:	f043 0201 	orr.w	r2, r3, #1
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800940a:	2300      	movs	r3, #0
 800940c:	60fb      	str	r3, [r7, #12]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	0a1b      	lsrs	r3, r3, #8
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00c      	beq.n	800944e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009438:	f043 0208 	orr.w	r2, r3, #8
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009440:	2300      	movs	r3, #0
 8009442:	60bb      	str	r3, [r7, #8]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	60bb      	str	r3, [r7, #8]
 800944c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009452:	2b00      	cmp	r3, #0
 8009454:	d04f      	beq.n	80094f6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009464:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	f003 0302 	and.w	r3, r3, #2
 8009474:	2b00      	cmp	r3, #0
 8009476:	d104      	bne.n	8009482 <HAL_SPI_IRQHandler+0x17e>
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b00      	cmp	r3, #0
 8009480:	d034      	beq.n	80094ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f022 0203 	bic.w	r2, r2, #3
 8009490:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009496:	2b00      	cmp	r3, #0
 8009498:	d011      	beq.n	80094be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800949e:	4a18      	ldr	r2, [pc, #96]	; (8009500 <HAL_SPI_IRQHandler+0x1fc>)
 80094a0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fc fe22 	bl	80060f0 <HAL_DMA_Abort_IT>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d016      	beq.n	80094f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ca:	4a0d      	ldr	r2, [pc, #52]	; (8009500 <HAL_SPI_IRQHandler+0x1fc>)
 80094cc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fc fe0c 	bl	80060f0 <HAL_DMA_Abort_IT>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00a      	beq.n	80094f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80094ea:	e003      	b.n	80094f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7fb fd93 	bl	8005018 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80094f2:	e000      	b.n	80094f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80094f4:	bf00      	nop
    return;
 80094f6:	bf00      	nop
  }
}
 80094f8:	3720      	adds	r7, #32
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	0800961b 	.word	0x0800961b

08009504 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009524:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009526:	f7fc fbc3 	bl	8005cb0 <HAL_GetTick>
 800952a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0320 	and.w	r3, r3, #32
 8009536:	2b20      	cmp	r3, #32
 8009538:	d03b      	beq.n	80095b2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f022 0220 	bic.w	r2, r2, #32
 8009548:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f022 0202 	bic.w	r2, r2, #2
 8009558:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	2164      	movs	r1, #100	; 0x64
 800955e:	6978      	ldr	r0, [r7, #20]
 8009560:	f000 f98e 	bl	8009880 <SPI_EndRxTxTransaction>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d005      	beq.n	8009576 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800956e:	f043 0220 	orr.w	r2, r3, #32
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10a      	bne.n	8009594 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800957e:	2300      	movs	r3, #0
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	60fb      	str	r3, [r7, #12]
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	60fb      	str	r3, [r7, #12]
 8009592:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	2200      	movs	r2, #0
 8009598:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80095aa:	6978      	ldr	r0, [r7, #20]
 80095ac:	f7fb fd34 	bl	8005018 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80095b0:	e002      	b.n	80095b8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80095b2:	6978      	ldr	r0, [r7, #20]
 80095b4:	f7fb fd46 	bl	8005044 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f7ff ff99 	bl	8009504 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80095d2:	bf00      	nop
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 0203 	bic.w	r2, r2, #3
 80095f6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095fc:	f043 0210 	orr.w	r2, r3, #16
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7fb fd03 	bl	8005018 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009612:	bf00      	nop
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f7fb fcee 	bl	8005018 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800963c:	bf00      	nop
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b088      	sub	sp, #32
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	603b      	str	r3, [r7, #0]
 8009650:	4613      	mov	r3, r2
 8009652:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009654:	f7fc fb2c 	bl	8005cb0 <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	1a9b      	subs	r3, r3, r2
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	4413      	add	r3, r2
 8009662:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009664:	f7fc fb24 	bl	8005cb0 <HAL_GetTick>
 8009668:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800966a:	4b39      	ldr	r3, [pc, #228]	; (8009750 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	015b      	lsls	r3, r3, #5
 8009670:	0d1b      	lsrs	r3, r3, #20
 8009672:	69fa      	ldr	r2, [r7, #28]
 8009674:	fb02 f303 	mul.w	r3, r2, r3
 8009678:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800967a:	e054      	b.n	8009726 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009682:	d050      	beq.n	8009726 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009684:	f7fc fb14 	bl	8005cb0 <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	69fa      	ldr	r2, [r7, #28]
 8009690:	429a      	cmp	r2, r3
 8009692:	d902      	bls.n	800969a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d13d      	bne.n	8009716 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80096a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096b2:	d111      	bne.n	80096d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096bc:	d004      	beq.n	80096c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096c6:	d107      	bne.n	80096d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096e0:	d10f      	bne.n	8009702 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096f0:	601a      	str	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009700:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009712:	2303      	movs	r3, #3
 8009714:	e017      	b.n	8009746 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800971c:	2300      	movs	r3, #0
 800971e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	3b01      	subs	r3, #1
 8009724:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	689a      	ldr	r2, [r3, #8]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	4013      	ands	r3, r2
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	429a      	cmp	r2, r3
 8009734:	bf0c      	ite	eq
 8009736:	2301      	moveq	r3, #1
 8009738:	2300      	movne	r3, #0
 800973a:	b2db      	uxtb	r3, r3
 800973c:	461a      	mov	r2, r3
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	429a      	cmp	r2, r3
 8009742:	d19b      	bne.n	800967c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3720      	adds	r7, #32
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	20000054 	.word	0x20000054

08009754 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b08a      	sub	sp, #40	; 0x28
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009766:	f7fc faa3 	bl	8005cb0 <HAL_GetTick>
 800976a:	4602      	mov	r2, r0
 800976c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976e:	1a9b      	subs	r3, r3, r2
 8009770:	683a      	ldr	r2, [r7, #0]
 8009772:	4413      	add	r3, r2
 8009774:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009776:	f7fc fa9b 	bl	8005cb0 <HAL_GetTick>
 800977a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	330c      	adds	r3, #12
 8009782:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009784:	4b3d      	ldr	r3, [pc, #244]	; (800987c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	4613      	mov	r3, r2
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	4413      	add	r3, r2
 800978e:	00da      	lsls	r2, r3, #3
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	0d1b      	lsrs	r3, r3, #20
 8009794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009796:	fb02 f303 	mul.w	r3, r2, r3
 800979a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800979c:	e060      	b.n	8009860 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80097a4:	d107      	bne.n	80097b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d104      	bne.n	80097b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097bc:	d050      	beq.n	8009860 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80097be:	f7fc fa77 	bl	8005cb0 <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d902      	bls.n	80097d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80097ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d13d      	bne.n	8009850 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80097e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097ec:	d111      	bne.n	8009812 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097f6:	d004      	beq.n	8009802 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009800:	d107      	bne.n	8009812 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009810:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800981a:	d10f      	bne.n	800983c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800983a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e010      	b.n	8009872 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009856:	2300      	movs	r3, #0
 8009858:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	3b01      	subs	r3, #1
 800985e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689a      	ldr	r2, [r3, #8]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	4013      	ands	r3, r2
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	429a      	cmp	r2, r3
 800986e:	d196      	bne.n	800979e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3728      	adds	r7, #40	; 0x28
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	20000054 	.word	0x20000054

08009880 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af02      	add	r7, sp, #8
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2200      	movs	r2, #0
 8009894:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f7ff ff5b 	bl	8009754 <SPI_WaitFifoStateUntilTimeout>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d007      	beq.n	80098b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098a8:	f043 0220 	orr.w	r2, r3, #32
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e027      	b.n	8009904 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2200      	movs	r2, #0
 80098bc:	2180      	movs	r1, #128	; 0x80
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f7ff fec0 	bl	8009644 <SPI_WaitFlagStateUntilTimeout>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d007      	beq.n	80098da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098ce:	f043 0220 	orr.w	r2, r3, #32
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e014      	b.n	8009904 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f7ff ff34 	bl	8009754 <SPI_WaitFifoStateUntilTimeout>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d007      	beq.n	8009902 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098f6:	f043 0220 	orr.w	r2, r3, #32
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e000      	b.n	8009904 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e040      	b.n	80099a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009922:	2b00      	cmp	r3, #0
 8009924:	d106      	bne.n	8009934 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7fb f80e 	bl	8004950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2224      	movs	r2, #36	; 0x24
 8009938:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f022 0201 	bic.w	r2, r2, #1
 8009948:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fbbc 	bl	800a0c8 <UART_SetConfig>
 8009950:	4603      	mov	r3, r0
 8009952:	2b01      	cmp	r3, #1
 8009954:	d101      	bne.n	800995a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e022      	b.n	80099a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995e:	2b00      	cmp	r3, #0
 8009960:	d002      	beq.n	8009968 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fce6 	bl	800a334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	689a      	ldr	r2, [r3, #8]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f042 0201 	orr.w	r2, r2, #1
 8009996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fd6d 	bl	800a478 <UART_CheckIdleState>
 800999e:	4603      	mov	r3, r0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08a      	sub	sp, #40	; 0x28
 80099ac:	af02      	add	r7, sp, #8
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	4613      	mov	r3, r2
 80099b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099bc:	2b20      	cmp	r3, #32
 80099be:	d178      	bne.n	8009ab2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d002      	beq.n	80099cc <HAL_UART_Transmit+0x24>
 80099c6:	88fb      	ldrh	r3, [r7, #6]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d101      	bne.n	80099d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	e071      	b.n	8009ab4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2221      	movs	r2, #33	; 0x21
 80099dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099de:	f7fc f967 	bl	8005cb0 <HAL_GetTick>
 80099e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	88fa      	ldrh	r2, [r7, #6]
 80099e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	88fa      	ldrh	r2, [r7, #6]
 80099f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099fc:	d108      	bne.n	8009a10 <HAL_UART_Transmit+0x68>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d104      	bne.n	8009a10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	61bb      	str	r3, [r7, #24]
 8009a0e:	e003      	b.n	8009a18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a14:	2300      	movs	r3, #0
 8009a16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a18:	e030      	b.n	8009a7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2200      	movs	r2, #0
 8009a22:	2180      	movs	r1, #128	; 0x80
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f000 fdcf 	bl	800a5c8 <UART_WaitOnFlagUntilTimeout>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d004      	beq.n	8009a3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2220      	movs	r2, #32
 8009a34:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e03c      	b.n	8009ab4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10b      	bne.n	8009a58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	881a      	ldrh	r2, [r3, #0]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a4c:	b292      	uxth	r2, r2
 8009a4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	3302      	adds	r3, #2
 8009a54:	61bb      	str	r3, [r7, #24]
 8009a56:	e008      	b.n	8009a6a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	781a      	ldrb	r2, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	b292      	uxth	r2, r2
 8009a62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	3301      	adds	r3, #1
 8009a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	3b01      	subs	r3, #1
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1c8      	bne.n	8009a1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	2140      	movs	r1, #64	; 0x40
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 fd98 	bl	800a5c8 <UART_WaitOnFlagUntilTimeout>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d004      	beq.n	8009aa8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e005      	b.n	8009ab4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2220      	movs	r2, #32
 8009aac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	e000      	b.n	8009ab4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009ab2:	2302      	movs	r3, #2
  }
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3720      	adds	r7, #32
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b0ba      	sub	sp, #232	; 0xe8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	69db      	ldr	r3, [r3, #28]
 8009aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009ae2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009ae6:	f640 030f 	movw	r3, #2063	; 0x80f
 8009aea:	4013      	ands	r3, r2
 8009aec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009af0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d115      	bne.n	8009b24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009afc:	f003 0320 	and.w	r3, r3, #32
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00f      	beq.n	8009b24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b08:	f003 0320 	and.w	r3, r3, #32
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d009      	beq.n	8009b24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 82ab 	beq.w	800a070 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	4798      	blx	r3
      }
      return;
 8009b22:	e2a5      	b.n	800a070 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f000 8117 	beq.w	8009d5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d106      	bne.n	8009b48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009b3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009b3e:	4b85      	ldr	r3, [pc, #532]	; (8009d54 <HAL_UART_IRQHandler+0x298>)
 8009b40:	4013      	ands	r3, r2
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 810a 	beq.w	8009d5c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d011      	beq.n	8009b78 <HAL_UART_IRQHandler+0xbc>
 8009b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00b      	beq.n	8009b78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2201      	movs	r2, #1
 8009b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b6e:	f043 0201 	orr.w	r2, r3, #1
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b7c:	f003 0302 	and.w	r3, r3, #2
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d011      	beq.n	8009ba8 <HAL_UART_IRQHandler+0xec>
 8009b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00b      	beq.n	8009ba8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2202      	movs	r2, #2
 8009b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b9e:	f043 0204 	orr.w	r2, r3, #4
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d011      	beq.n	8009bd8 <HAL_UART_IRQHandler+0x11c>
 8009bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bb8:	f003 0301 	and.w	r3, r3, #1
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00b      	beq.n	8009bd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2204      	movs	r2, #4
 8009bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bce:	f043 0202 	orr.w	r2, r3, #2
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bdc:	f003 0308 	and.w	r3, r3, #8
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d017      	beq.n	8009c14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009be8:	f003 0320 	and.w	r3, r3, #32
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d105      	bne.n	8009bfc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bf4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00b      	beq.n	8009c14 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2208      	movs	r2, #8
 8009c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c0a:	f043 0208 	orr.w	r2, r3, #8
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d012      	beq.n	8009c46 <HAL_UART_IRQHandler+0x18a>
 8009c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00c      	beq.n	8009c46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c3c:	f043 0220 	orr.w	r2, r3, #32
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f000 8211 	beq.w	800a074 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c56:	f003 0320 	and.w	r3, r3, #32
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00d      	beq.n	8009c7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c62:	f003 0320 	and.w	r3, r3, #32
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d007      	beq.n	8009c7a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c8e:	2b40      	cmp	r3, #64	; 0x40
 8009c90:	d005      	beq.n	8009c9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d04f      	beq.n	8009d3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fcf9 	bl	800a696 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cae:	2b40      	cmp	r3, #64	; 0x40
 8009cb0:	d141      	bne.n	8009d36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3308      	adds	r3, #8
 8009cb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cc0:	e853 3f00 	ldrex	r3, [r3]
 8009cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3308      	adds	r3, #8
 8009cda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009cde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009cea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009cee:	e841 2300 	strex	r3, r2, [r1]
 8009cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1d9      	bne.n	8009cb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d013      	beq.n	8009d2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d0a:	4a13      	ldr	r2, [pc, #76]	; (8009d58 <HAL_UART_IRQHandler+0x29c>)
 8009d0c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fc f9ec 	bl	80060f0 <HAL_DMA_Abort_IT>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d017      	beq.n	8009d4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009d28:	4610      	mov	r0, r2
 8009d2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d2c:	e00f      	b.n	8009d4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f9b4 	bl	800a09c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d34:	e00b      	b.n	8009d4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f9b0 	bl	800a09c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d3c:	e007      	b.n	8009d4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f9ac 	bl	800a09c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009d4c:	e192      	b.n	800a074 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d4e:	bf00      	nop
    return;
 8009d50:	e190      	b.n	800a074 <HAL_UART_IRQHandler+0x5b8>
 8009d52:	bf00      	nop
 8009d54:	04000120 	.word	0x04000120
 8009d58:	0800a75f 	.word	0x0800a75f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	f040 814b 	bne.w	8009ffc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d6a:	f003 0310 	and.w	r3, r3, #16
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f000 8144 	beq.w	8009ffc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d78:	f003 0310 	and.w	r3, r3, #16
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 813d 	beq.w	8009ffc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2210      	movs	r2, #16
 8009d88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d94:	2b40      	cmp	r3, #64	; 0x40
 8009d96:	f040 80b5 	bne.w	8009f04 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009da6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f000 8164 	beq.w	800a078 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	f080 815c 	bcs.w	800a078 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009dc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	2b20      	cmp	r3, #32
 8009dd2:	f000 8086 	beq.w	8009ee2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009de2:	e853 3f00 	ldrex	r3, [r3]
 8009de6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009df2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e04:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009e0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e10:	e841 2300 	strex	r3, r2, [r1]
 8009e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1da      	bne.n	8009dd6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3308      	adds	r3, #8
 8009e26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e2a:	e853 3f00 	ldrex	r3, [r3]
 8009e2e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009e30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e32:	f023 0301 	bic.w	r3, r3, #1
 8009e36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3308      	adds	r3, #8
 8009e40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009e44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009e48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e50:	e841 2300 	strex	r3, r2, [r1]
 8009e54:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1e1      	bne.n	8009e20 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3308      	adds	r3, #8
 8009e62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e66:	e853 3f00 	ldrex	r3, [r3]
 8009e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3308      	adds	r3, #8
 8009e7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009e80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e88:	e841 2300 	strex	r3, r2, [r1]
 8009e8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1e3      	bne.n	8009e5c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2220      	movs	r2, #32
 8009e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eaa:	e853 3f00 	ldrex	r3, [r3]
 8009eae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eb2:	f023 0310 	bic.w	r3, r3, #16
 8009eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ec4:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ec6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009eca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ecc:	e841 2300 	strex	r3, r2, [r1]
 8009ed0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1e4      	bne.n	8009ea2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fc f8ce 	bl	800607e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	4619      	mov	r1, r3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f8d7 	bl	800a0b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f02:	e0b9      	b.n	800a078 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f000 80ab 	beq.w	800a07c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8009f26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 80a6 	beq.w	800a07c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f38:	e853 3f00 	ldrex	r3, [r3]
 8009f3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f52:	647b      	str	r3, [r7, #68]	; 0x44
 8009f54:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f5a:	e841 2300 	strex	r3, r2, [r1]
 8009f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1e4      	bne.n	8009f30 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	3308      	adds	r3, #8
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	e853 3f00 	ldrex	r3, [r3]
 8009f74:	623b      	str	r3, [r7, #32]
   return(result);
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	f023 0301 	bic.w	r3, r3, #1
 8009f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3308      	adds	r3, #8
 8009f86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009f8a:	633a      	str	r2, [r7, #48]	; 0x30
 8009f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f92:	e841 2300 	strex	r3, r2, [r1]
 8009f96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1e3      	bne.n	8009f66 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	e853 3f00 	ldrex	r3, [r3]
 8009fbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f023 0310 	bic.w	r3, r3, #16
 8009fc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009fd4:	61fb      	str	r3, [r7, #28]
 8009fd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd8:	69b9      	ldr	r1, [r7, #24]
 8009fda:	69fa      	ldr	r2, [r7, #28]
 8009fdc:	e841 2300 	strex	r3, r2, [r1]
 8009fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1e4      	bne.n	8009fb2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2202      	movs	r2, #2
 8009fec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009fee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f85b 	bl	800a0b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ffa:	e03f      	b.n	800a07c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00e      	beq.n	800a026 <HAL_UART_IRQHandler+0x56a>
 800a008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a00c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a010:	2b00      	cmp	r3, #0
 800a012:	d008      	beq.n	800a026 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a01c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fbdd 	bl	800a7de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a024:	e02d      	b.n	800a082 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a02a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00e      	beq.n	800a050 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d008      	beq.n	800a050 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a042:	2b00      	cmp	r3, #0
 800a044:	d01c      	beq.n	800a080 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	4798      	blx	r3
    }
    return;
 800a04e:	e017      	b.n	800a080 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d012      	beq.n	800a082 <HAL_UART_IRQHandler+0x5c6>
 800a05c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00c      	beq.n	800a082 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fb8e 	bl	800a78a <UART_EndTransmit_IT>
    return;
 800a06e:	e008      	b.n	800a082 <HAL_UART_IRQHandler+0x5c6>
      return;
 800a070:	bf00      	nop
 800a072:	e006      	b.n	800a082 <HAL_UART_IRQHandler+0x5c6>
    return;
 800a074:	bf00      	nop
 800a076:	e004      	b.n	800a082 <HAL_UART_IRQHandler+0x5c6>
      return;
 800a078:	bf00      	nop
 800a07a:	e002      	b.n	800a082 <HAL_UART_IRQHandler+0x5c6>
      return;
 800a07c:	bf00      	nop
 800a07e:	e000      	b.n	800a082 <HAL_UART_IRQHandler+0x5c6>
    return;
 800a080:	bf00      	nop
  }

}
 800a082:	37e8      	adds	r7, #232	; 0xe8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b088      	sub	sp, #32
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	431a      	orrs	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	69db      	ldr	r3, [r3, #28]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	4b8a      	ldr	r3, [pc, #552]	; (800a31c <UART_SetConfig+0x254>)
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	6812      	ldr	r2, [r2, #0]
 800a0fa:	6979      	ldr	r1, [r7, #20]
 800a0fc:	430b      	orrs	r3, r1
 800a0fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	68da      	ldr	r2, [r3, #12]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	430a      	orrs	r2, r1
 800a114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a1b      	ldr	r3, [r3, #32]
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	4313      	orrs	r3, r2
 800a124:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	430a      	orrs	r2, r1
 800a138:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a78      	ldr	r2, [pc, #480]	; (800a320 <UART_SetConfig+0x258>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d120      	bne.n	800a186 <UART_SetConfig+0xbe>
 800a144:	4b77      	ldr	r3, [pc, #476]	; (800a324 <UART_SetConfig+0x25c>)
 800a146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a148:	f003 0303 	and.w	r3, r3, #3
 800a14c:	2b03      	cmp	r3, #3
 800a14e:	d817      	bhi.n	800a180 <UART_SetConfig+0xb8>
 800a150:	a201      	add	r2, pc, #4	; (adr r2, 800a158 <UART_SetConfig+0x90>)
 800a152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a156:	bf00      	nop
 800a158:	0800a169 	.word	0x0800a169
 800a15c:	0800a175 	.word	0x0800a175
 800a160:	0800a17b 	.word	0x0800a17b
 800a164:	0800a16f 	.word	0x0800a16f
 800a168:	2300      	movs	r3, #0
 800a16a:	77fb      	strb	r3, [r7, #31]
 800a16c:	e01d      	b.n	800a1aa <UART_SetConfig+0xe2>
 800a16e:	2302      	movs	r3, #2
 800a170:	77fb      	strb	r3, [r7, #31]
 800a172:	e01a      	b.n	800a1aa <UART_SetConfig+0xe2>
 800a174:	2304      	movs	r3, #4
 800a176:	77fb      	strb	r3, [r7, #31]
 800a178:	e017      	b.n	800a1aa <UART_SetConfig+0xe2>
 800a17a:	2308      	movs	r3, #8
 800a17c:	77fb      	strb	r3, [r7, #31]
 800a17e:	e014      	b.n	800a1aa <UART_SetConfig+0xe2>
 800a180:	2310      	movs	r3, #16
 800a182:	77fb      	strb	r3, [r7, #31]
 800a184:	e011      	b.n	800a1aa <UART_SetConfig+0xe2>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a67      	ldr	r2, [pc, #412]	; (800a328 <UART_SetConfig+0x260>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d102      	bne.n	800a196 <UART_SetConfig+0xce>
 800a190:	2300      	movs	r3, #0
 800a192:	77fb      	strb	r3, [r7, #31]
 800a194:	e009      	b.n	800a1aa <UART_SetConfig+0xe2>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a64      	ldr	r2, [pc, #400]	; (800a32c <UART_SetConfig+0x264>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d102      	bne.n	800a1a6 <UART_SetConfig+0xde>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	77fb      	strb	r3, [r7, #31]
 800a1a4:	e001      	b.n	800a1aa <UART_SetConfig+0xe2>
 800a1a6:	2310      	movs	r3, #16
 800a1a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	69db      	ldr	r3, [r3, #28]
 800a1ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1b2:	d15a      	bne.n	800a26a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800a1b4:	7ffb      	ldrb	r3, [r7, #31]
 800a1b6:	2b08      	cmp	r3, #8
 800a1b8:	d827      	bhi.n	800a20a <UART_SetConfig+0x142>
 800a1ba:	a201      	add	r2, pc, #4	; (adr r2, 800a1c0 <UART_SetConfig+0xf8>)
 800a1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c0:	0800a1e5 	.word	0x0800a1e5
 800a1c4:	0800a1ed 	.word	0x0800a1ed
 800a1c8:	0800a1f5 	.word	0x0800a1f5
 800a1cc:	0800a20b 	.word	0x0800a20b
 800a1d0:	0800a1fb 	.word	0x0800a1fb
 800a1d4:	0800a20b 	.word	0x0800a20b
 800a1d8:	0800a20b 	.word	0x0800a20b
 800a1dc:	0800a20b 	.word	0x0800a20b
 800a1e0:	0800a203 	.word	0x0800a203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1e4:	f7fe fbb6 	bl	8008954 <HAL_RCC_GetPCLK1Freq>
 800a1e8:	61b8      	str	r0, [r7, #24]
        break;
 800a1ea:	e013      	b.n	800a214 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1ec:	f7fe fbd4 	bl	8008998 <HAL_RCC_GetPCLK2Freq>
 800a1f0:	61b8      	str	r0, [r7, #24]
        break;
 800a1f2:	e00f      	b.n	800a214 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1f4:	4b4e      	ldr	r3, [pc, #312]	; (800a330 <UART_SetConfig+0x268>)
 800a1f6:	61bb      	str	r3, [r7, #24]
        break;
 800a1f8:	e00c      	b.n	800a214 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1fa:	f7fe fb35 	bl	8008868 <HAL_RCC_GetSysClockFreq>
 800a1fe:	61b8      	str	r0, [r7, #24]
        break;
 800a200:	e008      	b.n	800a214 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a206:	61bb      	str	r3, [r7, #24]
        break;
 800a208:	e004      	b.n	800a214 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800a20a:	2300      	movs	r3, #0
 800a20c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	77bb      	strb	r3, [r7, #30]
        break;
 800a212:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d074      	beq.n	800a304 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	005a      	lsls	r2, r3, #1
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	085b      	lsrs	r3, r3, #1
 800a224:	441a      	add	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a22e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	2b0f      	cmp	r3, #15
 800a234:	d916      	bls.n	800a264 <UART_SetConfig+0x19c>
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a23c:	d212      	bcs.n	800a264 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	b29b      	uxth	r3, r3
 800a242:	f023 030f 	bic.w	r3, r3, #15
 800a246:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	085b      	lsrs	r3, r3, #1
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	f003 0307 	and.w	r3, r3, #7
 800a252:	b29a      	uxth	r2, r3
 800a254:	89fb      	ldrh	r3, [r7, #14]
 800a256:	4313      	orrs	r3, r2
 800a258:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	89fa      	ldrh	r2, [r7, #14]
 800a260:	60da      	str	r2, [r3, #12]
 800a262:	e04f      	b.n	800a304 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	77bb      	strb	r3, [r7, #30]
 800a268:	e04c      	b.n	800a304 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a26a:	7ffb      	ldrb	r3, [r7, #31]
 800a26c:	2b08      	cmp	r3, #8
 800a26e:	d828      	bhi.n	800a2c2 <UART_SetConfig+0x1fa>
 800a270:	a201      	add	r2, pc, #4	; (adr r2, 800a278 <UART_SetConfig+0x1b0>)
 800a272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a276:	bf00      	nop
 800a278:	0800a29d 	.word	0x0800a29d
 800a27c:	0800a2a5 	.word	0x0800a2a5
 800a280:	0800a2ad 	.word	0x0800a2ad
 800a284:	0800a2c3 	.word	0x0800a2c3
 800a288:	0800a2b3 	.word	0x0800a2b3
 800a28c:	0800a2c3 	.word	0x0800a2c3
 800a290:	0800a2c3 	.word	0x0800a2c3
 800a294:	0800a2c3 	.word	0x0800a2c3
 800a298:	0800a2bb 	.word	0x0800a2bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a29c:	f7fe fb5a 	bl	8008954 <HAL_RCC_GetPCLK1Freq>
 800a2a0:	61b8      	str	r0, [r7, #24]
        break;
 800a2a2:	e013      	b.n	800a2cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2a4:	f7fe fb78 	bl	8008998 <HAL_RCC_GetPCLK2Freq>
 800a2a8:	61b8      	str	r0, [r7, #24]
        break;
 800a2aa:	e00f      	b.n	800a2cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2ac:	4b20      	ldr	r3, [pc, #128]	; (800a330 <UART_SetConfig+0x268>)
 800a2ae:	61bb      	str	r3, [r7, #24]
        break;
 800a2b0:	e00c      	b.n	800a2cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2b2:	f7fe fad9 	bl	8008868 <HAL_RCC_GetSysClockFreq>
 800a2b6:	61b8      	str	r0, [r7, #24]
        break;
 800a2b8:	e008      	b.n	800a2cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2be:	61bb      	str	r3, [r7, #24]
        break;
 800a2c0:	e004      	b.n	800a2cc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	77bb      	strb	r3, [r7, #30]
        break;
 800a2ca:	bf00      	nop
    }

    if (pclk != 0U)
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d018      	beq.n	800a304 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	085a      	lsrs	r2, r3, #1
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	441a      	add	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	2b0f      	cmp	r3, #15
 800a2ea:	d909      	bls.n	800a300 <UART_SetConfig+0x238>
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2f2:	d205      	bcs.n	800a300 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	60da      	str	r2, [r3, #12]
 800a2fe:	e001      	b.n	800a304 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a310:	7fbb      	ldrb	r3, [r7, #30]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3720      	adds	r7, #32
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	efff69f3 	.word	0xefff69f3
 800a320:	40013800 	.word	0x40013800
 800a324:	40021000 	.word	0x40021000
 800a328:	40004400 	.word	0x40004400
 800a32c:	40004800 	.word	0x40004800
 800a330:	007a1200 	.word	0x007a1200

0800a334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00a      	beq.n	800a35e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a362:	f003 0302 	and.w	r3, r3, #2
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00a      	beq.n	800a380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	430a      	orrs	r2, r1
 800a37e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a384:	f003 0304 	and.w	r3, r3, #4
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00a      	beq.n	800a3a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	f003 0308 	and.w	r3, r3, #8
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00a      	beq.n	800a3c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	430a      	orrs	r2, r1
 800a3c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c8:	f003 0310 	and.w	r3, r3, #16
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00a      	beq.n	800a3e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	f003 0320 	and.w	r3, r3, #32
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00a      	beq.n	800a408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	430a      	orrs	r2, r1
 800a406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a410:	2b00      	cmp	r3, #0
 800a412:	d01a      	beq.n	800a44a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a432:	d10a      	bne.n	800a44a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	605a      	str	r2, [r3, #4]
  }
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b098      	sub	sp, #96	; 0x60
 800a47c:	af02      	add	r7, sp, #8
 800a47e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a488:	f7fb fc12 	bl	8005cb0 <HAL_GetTick>
 800a48c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 0308 	and.w	r3, r3, #8
 800a498:	2b08      	cmp	r3, #8
 800a49a:	d12e      	bne.n	800a4fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a49c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f88c 	bl	800a5c8 <UART_WaitOnFlagUntilTimeout>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d021      	beq.n	800a4fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4be:	e853 3f00 	ldrex	r3, [r3]
 800a4c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4ca:	653b      	str	r3, [r7, #80]	; 0x50
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a4d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4dc:	e841 2300 	strex	r3, r2, [r1]
 800a4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1e6      	bne.n	800a4b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2220      	movs	r2, #32
 800a4ec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e062      	b.n	800a5c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0304 	and.w	r3, r3, #4
 800a504:	2b04      	cmp	r3, #4
 800a506:	d149      	bne.n	800a59c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a510:	2200      	movs	r2, #0
 800a512:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f856 	bl	800a5c8 <UART_WaitOnFlagUntilTimeout>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d03c      	beq.n	800a59c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	e853 3f00 	ldrex	r3, [r3]
 800a52e:	623b      	str	r3, [r7, #32]
   return(result);
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a536:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	461a      	mov	r2, r3
 800a53e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a540:	633b      	str	r3, [r7, #48]	; 0x30
 800a542:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a548:	e841 2300 	strex	r3, r2, [r1]
 800a54c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1e6      	bne.n	800a522 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3308      	adds	r3, #8
 800a55a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	e853 3f00 	ldrex	r3, [r3]
 800a562:	60fb      	str	r3, [r7, #12]
   return(result);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f023 0301 	bic.w	r3, r3, #1
 800a56a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	3308      	adds	r3, #8
 800a572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a574:	61fa      	str	r2, [r7, #28]
 800a576:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a578:	69b9      	ldr	r1, [r7, #24]
 800a57a:	69fa      	ldr	r2, [r7, #28]
 800a57c:	e841 2300 	strex	r3, r2, [r1]
 800a580:	617b      	str	r3, [r7, #20]
   return(result);
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1e5      	bne.n	800a554 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2220      	movs	r2, #32
 800a58c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a598:	2303      	movs	r3, #3
 800a59a:	e011      	b.n	800a5c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2220      	movs	r2, #32
 800a5a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3758      	adds	r7, #88	; 0x58
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	603b      	str	r3, [r7, #0]
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5d8:	e049      	b.n	800a66e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e0:	d045      	beq.n	800a66e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5e2:	f7fb fb65 	bl	8005cb0 <HAL_GetTick>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	69ba      	ldr	r2, [r7, #24]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d302      	bcc.n	800a5f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e048      	b.n	800a68e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 0304 	and.w	r3, r3, #4
 800a606:	2b00      	cmp	r3, #0
 800a608:	d031      	beq.n	800a66e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	69db      	ldr	r3, [r3, #28]
 800a610:	f003 0308 	and.w	r3, r3, #8
 800a614:	2b08      	cmp	r3, #8
 800a616:	d110      	bne.n	800a63a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2208      	movs	r2, #8
 800a61e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f000 f838 	bl	800a696 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2208      	movs	r2, #8
 800a62a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	e029      	b.n	800a68e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	69db      	ldr	r3, [r3, #28]
 800a640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a648:	d111      	bne.n	800a66e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f000 f81e 	bl	800a696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2220      	movs	r2, #32
 800a65e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e00f      	b.n	800a68e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	69da      	ldr	r2, [r3, #28]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	4013      	ands	r3, r2
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	bf0c      	ite	eq
 800a67e:	2301      	moveq	r3, #1
 800a680:	2300      	movne	r3, #0
 800a682:	b2db      	uxtb	r3, r3
 800a684:	461a      	mov	r2, r3
 800a686:	79fb      	ldrb	r3, [r7, #7]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d0a6      	beq.n	800a5da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a696:	b480      	push	{r7}
 800a698:	b095      	sub	sp, #84	; 0x54
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a6:	e853 3f00 	ldrex	r3, [r3]
 800a6aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6bc:	643b      	str	r3, [r7, #64]	; 0x40
 800a6be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a6c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6c4:	e841 2300 	strex	r3, r2, [r1]
 800a6c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d1e6      	bne.n	800a69e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	3308      	adds	r3, #8
 800a6d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	e853 3f00 	ldrex	r3, [r3]
 800a6de:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	f023 0301 	bic.w	r3, r3, #1
 800a6e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	3308      	adds	r3, #8
 800a6ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a6f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6f8:	e841 2300 	strex	r3, r2, [r1]
 800a6fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e5      	bne.n	800a6d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d118      	bne.n	800a73e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	e853 3f00 	ldrex	r3, [r3]
 800a718:	60bb      	str	r3, [r7, #8]
   return(result);
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	f023 0310 	bic.w	r3, r3, #16
 800a720:	647b      	str	r3, [r7, #68]	; 0x44
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	461a      	mov	r2, r3
 800a728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a72a:	61bb      	str	r3, [r7, #24]
 800a72c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72e:	6979      	ldr	r1, [r7, #20]
 800a730:	69ba      	ldr	r2, [r7, #24]
 800a732:	e841 2300 	strex	r3, r2, [r1]
 800a736:	613b      	str	r3, [r7, #16]
   return(result);
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1e6      	bne.n	800a70c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2220      	movs	r2, #32
 800a742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a752:	bf00      	nop
 800a754:	3754      	adds	r7, #84	; 0x54
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f7ff fc8d 	bl	800a09c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a782:	bf00      	nop
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b088      	sub	sp, #32
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	e853 3f00 	ldrex	r3, [r3]
 800a79e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7a6:	61fb      	str	r3, [r7, #28]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	61bb      	str	r3, [r7, #24]
 800a7b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b4:	6979      	ldr	r1, [r7, #20]
 800a7b6:	69ba      	ldr	r2, [r7, #24]
 800a7b8:	e841 2300 	strex	r3, r2, [r1]
 800a7bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1e6      	bne.n	800a792 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f7ff fc59 	bl	800a088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7d6:	bf00      	nop
 800a7d8:	3720      	adds	r7, #32
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b083      	sub	sp, #12
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7e6:	bf00      	nop
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <atoi>:
 800a7f2:	220a      	movs	r2, #10
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	f000 ba05 	b.w	800ac04 <strtol>
	...

0800a7fc <__errno>:
 800a7fc:	4b01      	ldr	r3, [pc, #4]	; (800a804 <__errno+0x8>)
 800a7fe:	6818      	ldr	r0, [r3, #0]
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	20000068 	.word	0x20000068

0800a808 <__libc_init_array>:
 800a808:	b570      	push	{r4, r5, r6, lr}
 800a80a:	4d0d      	ldr	r5, [pc, #52]	; (800a840 <__libc_init_array+0x38>)
 800a80c:	4c0d      	ldr	r4, [pc, #52]	; (800a844 <__libc_init_array+0x3c>)
 800a80e:	1b64      	subs	r4, r4, r5
 800a810:	10a4      	asrs	r4, r4, #2
 800a812:	2600      	movs	r6, #0
 800a814:	42a6      	cmp	r6, r4
 800a816:	d109      	bne.n	800a82c <__libc_init_array+0x24>
 800a818:	4d0b      	ldr	r5, [pc, #44]	; (800a848 <__libc_init_array+0x40>)
 800a81a:	4c0c      	ldr	r4, [pc, #48]	; (800a84c <__libc_init_array+0x44>)
 800a81c:	f001 fbb2 	bl	800bf84 <_init>
 800a820:	1b64      	subs	r4, r4, r5
 800a822:	10a4      	asrs	r4, r4, #2
 800a824:	2600      	movs	r6, #0
 800a826:	42a6      	cmp	r6, r4
 800a828:	d105      	bne.n	800a836 <__libc_init_array+0x2e>
 800a82a:	bd70      	pop	{r4, r5, r6, pc}
 800a82c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a830:	4798      	blx	r3
 800a832:	3601      	adds	r6, #1
 800a834:	e7ee      	b.n	800a814 <__libc_init_array+0xc>
 800a836:	f855 3b04 	ldr.w	r3, [r5], #4
 800a83a:	4798      	blx	r3
 800a83c:	3601      	adds	r6, #1
 800a83e:	e7f2      	b.n	800a826 <__libc_init_array+0x1e>
 800a840:	0800de24 	.word	0x0800de24
 800a844:	0800de24 	.word	0x0800de24
 800a848:	0800de24 	.word	0x0800de24
 800a84c:	0800de28 	.word	0x0800de28

0800a850 <memset>:
 800a850:	4402      	add	r2, r0
 800a852:	4603      	mov	r3, r0
 800a854:	4293      	cmp	r3, r2
 800a856:	d100      	bne.n	800a85a <memset+0xa>
 800a858:	4770      	bx	lr
 800a85a:	f803 1b01 	strb.w	r1, [r3], #1
 800a85e:	e7f9      	b.n	800a854 <memset+0x4>

0800a860 <iprintf>:
 800a860:	b40f      	push	{r0, r1, r2, r3}
 800a862:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <iprintf+0x2c>)
 800a864:	b513      	push	{r0, r1, r4, lr}
 800a866:	681c      	ldr	r4, [r3, #0]
 800a868:	b124      	cbz	r4, 800a874 <iprintf+0x14>
 800a86a:	69a3      	ldr	r3, [r4, #24]
 800a86c:	b913      	cbnz	r3, 800a874 <iprintf+0x14>
 800a86e:	4620      	mov	r0, r4
 800a870:	f000 fbca 	bl	800b008 <__sinit>
 800a874:	ab05      	add	r3, sp, #20
 800a876:	9a04      	ldr	r2, [sp, #16]
 800a878:	68a1      	ldr	r1, [r4, #8]
 800a87a:	9301      	str	r3, [sp, #4]
 800a87c:	4620      	mov	r0, r4
 800a87e:	f000 ff49 	bl	800b714 <_vfiprintf_r>
 800a882:	b002      	add	sp, #8
 800a884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a888:	b004      	add	sp, #16
 800a88a:	4770      	bx	lr
 800a88c:	20000068 	.word	0x20000068

0800a890 <_puts_r>:
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	460e      	mov	r6, r1
 800a894:	4605      	mov	r5, r0
 800a896:	b118      	cbz	r0, 800a8a0 <_puts_r+0x10>
 800a898:	6983      	ldr	r3, [r0, #24]
 800a89a:	b90b      	cbnz	r3, 800a8a0 <_puts_r+0x10>
 800a89c:	f000 fbb4 	bl	800b008 <__sinit>
 800a8a0:	69ab      	ldr	r3, [r5, #24]
 800a8a2:	68ac      	ldr	r4, [r5, #8]
 800a8a4:	b913      	cbnz	r3, 800a8ac <_puts_r+0x1c>
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	f000 fbae 	bl	800b008 <__sinit>
 800a8ac:	4b2c      	ldr	r3, [pc, #176]	; (800a960 <_puts_r+0xd0>)
 800a8ae:	429c      	cmp	r4, r3
 800a8b0:	d120      	bne.n	800a8f4 <_puts_r+0x64>
 800a8b2:	686c      	ldr	r4, [r5, #4]
 800a8b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8b6:	07db      	lsls	r3, r3, #31
 800a8b8:	d405      	bmi.n	800a8c6 <_puts_r+0x36>
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	0598      	lsls	r0, r3, #22
 800a8be:	d402      	bmi.n	800a8c6 <_puts_r+0x36>
 800a8c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8c2:	f000 fc51 	bl	800b168 <__retarget_lock_acquire_recursive>
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	0719      	lsls	r1, r3, #28
 800a8ca:	d51d      	bpl.n	800a908 <_puts_r+0x78>
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	b1db      	cbz	r3, 800a908 <_puts_r+0x78>
 800a8d0:	3e01      	subs	r6, #1
 800a8d2:	68a3      	ldr	r3, [r4, #8]
 800a8d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	60a3      	str	r3, [r4, #8]
 800a8dc:	bb39      	cbnz	r1, 800a92e <_puts_r+0x9e>
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	da38      	bge.n	800a954 <_puts_r+0xc4>
 800a8e2:	4622      	mov	r2, r4
 800a8e4:	210a      	movs	r1, #10
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	f000 f996 	bl	800ac18 <__swbuf_r>
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	d011      	beq.n	800a914 <_puts_r+0x84>
 800a8f0:	250a      	movs	r5, #10
 800a8f2:	e011      	b.n	800a918 <_puts_r+0x88>
 800a8f4:	4b1b      	ldr	r3, [pc, #108]	; (800a964 <_puts_r+0xd4>)
 800a8f6:	429c      	cmp	r4, r3
 800a8f8:	d101      	bne.n	800a8fe <_puts_r+0x6e>
 800a8fa:	68ac      	ldr	r4, [r5, #8]
 800a8fc:	e7da      	b.n	800a8b4 <_puts_r+0x24>
 800a8fe:	4b1a      	ldr	r3, [pc, #104]	; (800a968 <_puts_r+0xd8>)
 800a900:	429c      	cmp	r4, r3
 800a902:	bf08      	it	eq
 800a904:	68ec      	ldreq	r4, [r5, #12]
 800a906:	e7d5      	b.n	800a8b4 <_puts_r+0x24>
 800a908:	4621      	mov	r1, r4
 800a90a:	4628      	mov	r0, r5
 800a90c:	f000 f9d6 	bl	800acbc <__swsetup_r>
 800a910:	2800      	cmp	r0, #0
 800a912:	d0dd      	beq.n	800a8d0 <_puts_r+0x40>
 800a914:	f04f 35ff 	mov.w	r5, #4294967295
 800a918:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a91a:	07da      	lsls	r2, r3, #31
 800a91c:	d405      	bmi.n	800a92a <_puts_r+0x9a>
 800a91e:	89a3      	ldrh	r3, [r4, #12]
 800a920:	059b      	lsls	r3, r3, #22
 800a922:	d402      	bmi.n	800a92a <_puts_r+0x9a>
 800a924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a926:	f000 fc20 	bl	800b16a <__retarget_lock_release_recursive>
 800a92a:	4628      	mov	r0, r5
 800a92c:	bd70      	pop	{r4, r5, r6, pc}
 800a92e:	2b00      	cmp	r3, #0
 800a930:	da04      	bge.n	800a93c <_puts_r+0xac>
 800a932:	69a2      	ldr	r2, [r4, #24]
 800a934:	429a      	cmp	r2, r3
 800a936:	dc06      	bgt.n	800a946 <_puts_r+0xb6>
 800a938:	290a      	cmp	r1, #10
 800a93a:	d004      	beq.n	800a946 <_puts_r+0xb6>
 800a93c:	6823      	ldr	r3, [r4, #0]
 800a93e:	1c5a      	adds	r2, r3, #1
 800a940:	6022      	str	r2, [r4, #0]
 800a942:	7019      	strb	r1, [r3, #0]
 800a944:	e7c5      	b.n	800a8d2 <_puts_r+0x42>
 800a946:	4622      	mov	r2, r4
 800a948:	4628      	mov	r0, r5
 800a94a:	f000 f965 	bl	800ac18 <__swbuf_r>
 800a94e:	3001      	adds	r0, #1
 800a950:	d1bf      	bne.n	800a8d2 <_puts_r+0x42>
 800a952:	e7df      	b.n	800a914 <_puts_r+0x84>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	250a      	movs	r5, #10
 800a958:	1c5a      	adds	r2, r3, #1
 800a95a:	6022      	str	r2, [r4, #0]
 800a95c:	701d      	strb	r5, [r3, #0]
 800a95e:	e7db      	b.n	800a918 <_puts_r+0x88>
 800a960:	0800ddb0 	.word	0x0800ddb0
 800a964:	0800ddd0 	.word	0x0800ddd0
 800a968:	0800dd90 	.word	0x0800dd90

0800a96c <puts>:
 800a96c:	4b02      	ldr	r3, [pc, #8]	; (800a978 <puts+0xc>)
 800a96e:	4601      	mov	r1, r0
 800a970:	6818      	ldr	r0, [r3, #0]
 800a972:	f7ff bf8d 	b.w	800a890 <_puts_r>
 800a976:	bf00      	nop
 800a978:	20000068 	.word	0x20000068

0800a97c <srand>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	4b10      	ldr	r3, [pc, #64]	; (800a9c0 <srand+0x44>)
 800a980:	681d      	ldr	r5, [r3, #0]
 800a982:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a984:	4604      	mov	r4, r0
 800a986:	b9b3      	cbnz	r3, 800a9b6 <srand+0x3a>
 800a988:	2018      	movs	r0, #24
 800a98a:	f000 fc55 	bl	800b238 <malloc>
 800a98e:	4602      	mov	r2, r0
 800a990:	63a8      	str	r0, [r5, #56]	; 0x38
 800a992:	b920      	cbnz	r0, 800a99e <srand+0x22>
 800a994:	4b0b      	ldr	r3, [pc, #44]	; (800a9c4 <srand+0x48>)
 800a996:	480c      	ldr	r0, [pc, #48]	; (800a9c8 <srand+0x4c>)
 800a998:	2142      	movs	r1, #66	; 0x42
 800a99a:	f000 f9fd 	bl	800ad98 <__assert_func>
 800a99e:	490b      	ldr	r1, [pc, #44]	; (800a9cc <srand+0x50>)
 800a9a0:	4b0b      	ldr	r3, [pc, #44]	; (800a9d0 <srand+0x54>)
 800a9a2:	e9c0 1300 	strd	r1, r3, [r0]
 800a9a6:	4b0b      	ldr	r3, [pc, #44]	; (800a9d4 <srand+0x58>)
 800a9a8:	6083      	str	r3, [r0, #8]
 800a9aa:	230b      	movs	r3, #11
 800a9ac:	8183      	strh	r3, [r0, #12]
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	2001      	movs	r0, #1
 800a9b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a9b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	611c      	str	r4, [r3, #16]
 800a9bc:	615a      	str	r2, [r3, #20]
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	20000068 	.word	0x20000068
 800a9c4:	0800dbe0 	.word	0x0800dbe0
 800a9c8:	0800dbf7 	.word	0x0800dbf7
 800a9cc:	abcd330e 	.word	0xabcd330e
 800a9d0:	e66d1234 	.word	0xe66d1234
 800a9d4:	0005deec 	.word	0x0005deec

0800a9d8 <rand>:
 800a9d8:	4b16      	ldr	r3, [pc, #88]	; (800aa34 <rand+0x5c>)
 800a9da:	b510      	push	{r4, lr}
 800a9dc:	681c      	ldr	r4, [r3, #0]
 800a9de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a9e0:	b9b3      	cbnz	r3, 800aa10 <rand+0x38>
 800a9e2:	2018      	movs	r0, #24
 800a9e4:	f000 fc28 	bl	800b238 <malloc>
 800a9e8:	63a0      	str	r0, [r4, #56]	; 0x38
 800a9ea:	b928      	cbnz	r0, 800a9f8 <rand+0x20>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	4b12      	ldr	r3, [pc, #72]	; (800aa38 <rand+0x60>)
 800a9f0:	4812      	ldr	r0, [pc, #72]	; (800aa3c <rand+0x64>)
 800a9f2:	214e      	movs	r1, #78	; 0x4e
 800a9f4:	f000 f9d0 	bl	800ad98 <__assert_func>
 800a9f8:	4a11      	ldr	r2, [pc, #68]	; (800aa40 <rand+0x68>)
 800a9fa:	4b12      	ldr	r3, [pc, #72]	; (800aa44 <rand+0x6c>)
 800a9fc:	e9c0 2300 	strd	r2, r3, [r0]
 800aa00:	4b11      	ldr	r3, [pc, #68]	; (800aa48 <rand+0x70>)
 800aa02:	6083      	str	r3, [r0, #8]
 800aa04:	230b      	movs	r3, #11
 800aa06:	8183      	strh	r3, [r0, #12]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800aa10:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800aa12:	4a0e      	ldr	r2, [pc, #56]	; (800aa4c <rand+0x74>)
 800aa14:	6920      	ldr	r0, [r4, #16]
 800aa16:	6963      	ldr	r3, [r4, #20]
 800aa18:	490d      	ldr	r1, [pc, #52]	; (800aa50 <rand+0x78>)
 800aa1a:	4342      	muls	r2, r0
 800aa1c:	fb01 2203 	mla	r2, r1, r3, r2
 800aa20:	fba0 0101 	umull	r0, r1, r0, r1
 800aa24:	1c43      	adds	r3, r0, #1
 800aa26:	eb42 0001 	adc.w	r0, r2, r1
 800aa2a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800aa2e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800aa32:	bd10      	pop	{r4, pc}
 800aa34:	20000068 	.word	0x20000068
 800aa38:	0800dbe0 	.word	0x0800dbe0
 800aa3c:	0800dbf7 	.word	0x0800dbf7
 800aa40:	abcd330e 	.word	0xabcd330e
 800aa44:	e66d1234 	.word	0xe66d1234
 800aa48:	0005deec 	.word	0x0005deec
 800aa4c:	5851f42d 	.word	0x5851f42d
 800aa50:	4c957f2d 	.word	0x4c957f2d

0800aa54 <sniprintf>:
 800aa54:	b40c      	push	{r2, r3}
 800aa56:	b530      	push	{r4, r5, lr}
 800aa58:	4b17      	ldr	r3, [pc, #92]	; (800aab8 <sniprintf+0x64>)
 800aa5a:	1e0c      	subs	r4, r1, #0
 800aa5c:	681d      	ldr	r5, [r3, #0]
 800aa5e:	b09d      	sub	sp, #116	; 0x74
 800aa60:	da08      	bge.n	800aa74 <sniprintf+0x20>
 800aa62:	238b      	movs	r3, #139	; 0x8b
 800aa64:	602b      	str	r3, [r5, #0]
 800aa66:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6a:	b01d      	add	sp, #116	; 0x74
 800aa6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa70:	b002      	add	sp, #8
 800aa72:	4770      	bx	lr
 800aa74:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aa78:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa7c:	bf14      	ite	ne
 800aa7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aa82:	4623      	moveq	r3, r4
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	9307      	str	r3, [sp, #28]
 800aa88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa8c:	9002      	str	r0, [sp, #8]
 800aa8e:	9006      	str	r0, [sp, #24]
 800aa90:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa96:	ab21      	add	r3, sp, #132	; 0x84
 800aa98:	a902      	add	r1, sp, #8
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	9301      	str	r3, [sp, #4]
 800aa9e:	f000 fd0f 	bl	800b4c0 <_svfiprintf_r>
 800aaa2:	1c43      	adds	r3, r0, #1
 800aaa4:	bfbc      	itt	lt
 800aaa6:	238b      	movlt	r3, #139	; 0x8b
 800aaa8:	602b      	strlt	r3, [r5, #0]
 800aaaa:	2c00      	cmp	r4, #0
 800aaac:	d0dd      	beq.n	800aa6a <sniprintf+0x16>
 800aaae:	9b02      	ldr	r3, [sp, #8]
 800aab0:	2200      	movs	r2, #0
 800aab2:	701a      	strb	r2, [r3, #0]
 800aab4:	e7d9      	b.n	800aa6a <sniprintf+0x16>
 800aab6:	bf00      	nop
 800aab8:	20000068 	.word	0x20000068

0800aabc <strcat>:
 800aabc:	b510      	push	{r4, lr}
 800aabe:	4602      	mov	r2, r0
 800aac0:	7814      	ldrb	r4, [r2, #0]
 800aac2:	4613      	mov	r3, r2
 800aac4:	3201      	adds	r2, #1
 800aac6:	2c00      	cmp	r4, #0
 800aac8:	d1fa      	bne.n	800aac0 <strcat+0x4>
 800aaca:	3b01      	subs	r3, #1
 800aacc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aad0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aad4:	2a00      	cmp	r2, #0
 800aad6:	d1f9      	bne.n	800aacc <strcat+0x10>
 800aad8:	bd10      	pop	{r4, pc}

0800aada <strncpy>:
 800aada:	b510      	push	{r4, lr}
 800aadc:	3901      	subs	r1, #1
 800aade:	4603      	mov	r3, r0
 800aae0:	b132      	cbz	r2, 800aaf0 <strncpy+0x16>
 800aae2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aae6:	f803 4b01 	strb.w	r4, [r3], #1
 800aaea:	3a01      	subs	r2, #1
 800aaec:	2c00      	cmp	r4, #0
 800aaee:	d1f7      	bne.n	800aae0 <strncpy+0x6>
 800aaf0:	441a      	add	r2, r3
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d100      	bne.n	800aafa <strncpy+0x20>
 800aaf8:	bd10      	pop	{r4, pc}
 800aafa:	f803 1b01 	strb.w	r1, [r3], #1
 800aafe:	e7f9      	b.n	800aaf4 <strncpy+0x1a>

0800ab00 <_strtol_l.constprop.0>:
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab06:	d001      	beq.n	800ab0c <_strtol_l.constprop.0+0xc>
 800ab08:	2b24      	cmp	r3, #36	; 0x24
 800ab0a:	d906      	bls.n	800ab1a <_strtol_l.constprop.0+0x1a>
 800ab0c:	f7ff fe76 	bl	800a7fc <__errno>
 800ab10:	2316      	movs	r3, #22
 800ab12:	6003      	str	r3, [r0, #0]
 800ab14:	2000      	movs	r0, #0
 800ab16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac00 <_strtol_l.constprop.0+0x100>
 800ab1e:	460d      	mov	r5, r1
 800ab20:	462e      	mov	r6, r5
 800ab22:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab26:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ab2a:	f017 0708 	ands.w	r7, r7, #8
 800ab2e:	d1f7      	bne.n	800ab20 <_strtol_l.constprop.0+0x20>
 800ab30:	2c2d      	cmp	r4, #45	; 0x2d
 800ab32:	d132      	bne.n	800ab9a <_strtol_l.constprop.0+0x9a>
 800ab34:	782c      	ldrb	r4, [r5, #0]
 800ab36:	2701      	movs	r7, #1
 800ab38:	1cb5      	adds	r5, r6, #2
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d05b      	beq.n	800abf6 <_strtol_l.constprop.0+0xf6>
 800ab3e:	2b10      	cmp	r3, #16
 800ab40:	d109      	bne.n	800ab56 <_strtol_l.constprop.0+0x56>
 800ab42:	2c30      	cmp	r4, #48	; 0x30
 800ab44:	d107      	bne.n	800ab56 <_strtol_l.constprop.0+0x56>
 800ab46:	782c      	ldrb	r4, [r5, #0]
 800ab48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ab4c:	2c58      	cmp	r4, #88	; 0x58
 800ab4e:	d14d      	bne.n	800abec <_strtol_l.constprop.0+0xec>
 800ab50:	786c      	ldrb	r4, [r5, #1]
 800ab52:	2310      	movs	r3, #16
 800ab54:	3502      	adds	r5, #2
 800ab56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ab5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab5e:	f04f 0c00 	mov.w	ip, #0
 800ab62:	fbb8 f9f3 	udiv	r9, r8, r3
 800ab66:	4666      	mov	r6, ip
 800ab68:	fb03 8a19 	mls	sl, r3, r9, r8
 800ab6c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ab70:	f1be 0f09 	cmp.w	lr, #9
 800ab74:	d816      	bhi.n	800aba4 <_strtol_l.constprop.0+0xa4>
 800ab76:	4674      	mov	r4, lr
 800ab78:	42a3      	cmp	r3, r4
 800ab7a:	dd24      	ble.n	800abc6 <_strtol_l.constprop.0+0xc6>
 800ab7c:	f1bc 0f00 	cmp.w	ip, #0
 800ab80:	db1e      	blt.n	800abc0 <_strtol_l.constprop.0+0xc0>
 800ab82:	45b1      	cmp	r9, r6
 800ab84:	d31c      	bcc.n	800abc0 <_strtol_l.constprop.0+0xc0>
 800ab86:	d101      	bne.n	800ab8c <_strtol_l.constprop.0+0x8c>
 800ab88:	45a2      	cmp	sl, r4
 800ab8a:	db19      	blt.n	800abc0 <_strtol_l.constprop.0+0xc0>
 800ab8c:	fb06 4603 	mla	r6, r6, r3, r4
 800ab90:	f04f 0c01 	mov.w	ip, #1
 800ab94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab98:	e7e8      	b.n	800ab6c <_strtol_l.constprop.0+0x6c>
 800ab9a:	2c2b      	cmp	r4, #43	; 0x2b
 800ab9c:	bf04      	itt	eq
 800ab9e:	782c      	ldrbeq	r4, [r5, #0]
 800aba0:	1cb5      	addeq	r5, r6, #2
 800aba2:	e7ca      	b.n	800ab3a <_strtol_l.constprop.0+0x3a>
 800aba4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800aba8:	f1be 0f19 	cmp.w	lr, #25
 800abac:	d801      	bhi.n	800abb2 <_strtol_l.constprop.0+0xb2>
 800abae:	3c37      	subs	r4, #55	; 0x37
 800abb0:	e7e2      	b.n	800ab78 <_strtol_l.constprop.0+0x78>
 800abb2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800abb6:	f1be 0f19 	cmp.w	lr, #25
 800abba:	d804      	bhi.n	800abc6 <_strtol_l.constprop.0+0xc6>
 800abbc:	3c57      	subs	r4, #87	; 0x57
 800abbe:	e7db      	b.n	800ab78 <_strtol_l.constprop.0+0x78>
 800abc0:	f04f 3cff 	mov.w	ip, #4294967295
 800abc4:	e7e6      	b.n	800ab94 <_strtol_l.constprop.0+0x94>
 800abc6:	f1bc 0f00 	cmp.w	ip, #0
 800abca:	da05      	bge.n	800abd8 <_strtol_l.constprop.0+0xd8>
 800abcc:	2322      	movs	r3, #34	; 0x22
 800abce:	6003      	str	r3, [r0, #0]
 800abd0:	4646      	mov	r6, r8
 800abd2:	b942      	cbnz	r2, 800abe6 <_strtol_l.constprop.0+0xe6>
 800abd4:	4630      	mov	r0, r6
 800abd6:	e79e      	b.n	800ab16 <_strtol_l.constprop.0+0x16>
 800abd8:	b107      	cbz	r7, 800abdc <_strtol_l.constprop.0+0xdc>
 800abda:	4276      	negs	r6, r6
 800abdc:	2a00      	cmp	r2, #0
 800abde:	d0f9      	beq.n	800abd4 <_strtol_l.constprop.0+0xd4>
 800abe0:	f1bc 0f00 	cmp.w	ip, #0
 800abe4:	d000      	beq.n	800abe8 <_strtol_l.constprop.0+0xe8>
 800abe6:	1e69      	subs	r1, r5, #1
 800abe8:	6011      	str	r1, [r2, #0]
 800abea:	e7f3      	b.n	800abd4 <_strtol_l.constprop.0+0xd4>
 800abec:	2430      	movs	r4, #48	; 0x30
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1b1      	bne.n	800ab56 <_strtol_l.constprop.0+0x56>
 800abf2:	2308      	movs	r3, #8
 800abf4:	e7af      	b.n	800ab56 <_strtol_l.constprop.0+0x56>
 800abf6:	2c30      	cmp	r4, #48	; 0x30
 800abf8:	d0a5      	beq.n	800ab46 <_strtol_l.constprop.0+0x46>
 800abfa:	230a      	movs	r3, #10
 800abfc:	e7ab      	b.n	800ab56 <_strtol_l.constprop.0+0x56>
 800abfe:	bf00      	nop
 800ac00:	0800dc8f 	.word	0x0800dc8f

0800ac04 <strtol>:
 800ac04:	4613      	mov	r3, r2
 800ac06:	460a      	mov	r2, r1
 800ac08:	4601      	mov	r1, r0
 800ac0a:	4802      	ldr	r0, [pc, #8]	; (800ac14 <strtol+0x10>)
 800ac0c:	6800      	ldr	r0, [r0, #0]
 800ac0e:	f7ff bf77 	b.w	800ab00 <_strtol_l.constprop.0>
 800ac12:	bf00      	nop
 800ac14:	20000068 	.word	0x20000068

0800ac18 <__swbuf_r>:
 800ac18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1a:	460e      	mov	r6, r1
 800ac1c:	4614      	mov	r4, r2
 800ac1e:	4605      	mov	r5, r0
 800ac20:	b118      	cbz	r0, 800ac2a <__swbuf_r+0x12>
 800ac22:	6983      	ldr	r3, [r0, #24]
 800ac24:	b90b      	cbnz	r3, 800ac2a <__swbuf_r+0x12>
 800ac26:	f000 f9ef 	bl	800b008 <__sinit>
 800ac2a:	4b21      	ldr	r3, [pc, #132]	; (800acb0 <__swbuf_r+0x98>)
 800ac2c:	429c      	cmp	r4, r3
 800ac2e:	d12b      	bne.n	800ac88 <__swbuf_r+0x70>
 800ac30:	686c      	ldr	r4, [r5, #4]
 800ac32:	69a3      	ldr	r3, [r4, #24]
 800ac34:	60a3      	str	r3, [r4, #8]
 800ac36:	89a3      	ldrh	r3, [r4, #12]
 800ac38:	071a      	lsls	r2, r3, #28
 800ac3a:	d52f      	bpl.n	800ac9c <__swbuf_r+0x84>
 800ac3c:	6923      	ldr	r3, [r4, #16]
 800ac3e:	b36b      	cbz	r3, 800ac9c <__swbuf_r+0x84>
 800ac40:	6923      	ldr	r3, [r4, #16]
 800ac42:	6820      	ldr	r0, [r4, #0]
 800ac44:	1ac0      	subs	r0, r0, r3
 800ac46:	6963      	ldr	r3, [r4, #20]
 800ac48:	b2f6      	uxtb	r6, r6
 800ac4a:	4283      	cmp	r3, r0
 800ac4c:	4637      	mov	r7, r6
 800ac4e:	dc04      	bgt.n	800ac5a <__swbuf_r+0x42>
 800ac50:	4621      	mov	r1, r4
 800ac52:	4628      	mov	r0, r5
 800ac54:	f000 f944 	bl	800aee0 <_fflush_r>
 800ac58:	bb30      	cbnz	r0, 800aca8 <__swbuf_r+0x90>
 800ac5a:	68a3      	ldr	r3, [r4, #8]
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	60a3      	str	r3, [r4, #8]
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	1c5a      	adds	r2, r3, #1
 800ac64:	6022      	str	r2, [r4, #0]
 800ac66:	701e      	strb	r6, [r3, #0]
 800ac68:	6963      	ldr	r3, [r4, #20]
 800ac6a:	3001      	adds	r0, #1
 800ac6c:	4283      	cmp	r3, r0
 800ac6e:	d004      	beq.n	800ac7a <__swbuf_r+0x62>
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	07db      	lsls	r3, r3, #31
 800ac74:	d506      	bpl.n	800ac84 <__swbuf_r+0x6c>
 800ac76:	2e0a      	cmp	r6, #10
 800ac78:	d104      	bne.n	800ac84 <__swbuf_r+0x6c>
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	f000 f92f 	bl	800aee0 <_fflush_r>
 800ac82:	b988      	cbnz	r0, 800aca8 <__swbuf_r+0x90>
 800ac84:	4638      	mov	r0, r7
 800ac86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac88:	4b0a      	ldr	r3, [pc, #40]	; (800acb4 <__swbuf_r+0x9c>)
 800ac8a:	429c      	cmp	r4, r3
 800ac8c:	d101      	bne.n	800ac92 <__swbuf_r+0x7a>
 800ac8e:	68ac      	ldr	r4, [r5, #8]
 800ac90:	e7cf      	b.n	800ac32 <__swbuf_r+0x1a>
 800ac92:	4b09      	ldr	r3, [pc, #36]	; (800acb8 <__swbuf_r+0xa0>)
 800ac94:	429c      	cmp	r4, r3
 800ac96:	bf08      	it	eq
 800ac98:	68ec      	ldreq	r4, [r5, #12]
 800ac9a:	e7ca      	b.n	800ac32 <__swbuf_r+0x1a>
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f000 f80c 	bl	800acbc <__swsetup_r>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d0cb      	beq.n	800ac40 <__swbuf_r+0x28>
 800aca8:	f04f 37ff 	mov.w	r7, #4294967295
 800acac:	e7ea      	b.n	800ac84 <__swbuf_r+0x6c>
 800acae:	bf00      	nop
 800acb0:	0800ddb0 	.word	0x0800ddb0
 800acb4:	0800ddd0 	.word	0x0800ddd0
 800acb8:	0800dd90 	.word	0x0800dd90

0800acbc <__swsetup_r>:
 800acbc:	4b32      	ldr	r3, [pc, #200]	; (800ad88 <__swsetup_r+0xcc>)
 800acbe:	b570      	push	{r4, r5, r6, lr}
 800acc0:	681d      	ldr	r5, [r3, #0]
 800acc2:	4606      	mov	r6, r0
 800acc4:	460c      	mov	r4, r1
 800acc6:	b125      	cbz	r5, 800acd2 <__swsetup_r+0x16>
 800acc8:	69ab      	ldr	r3, [r5, #24]
 800acca:	b913      	cbnz	r3, 800acd2 <__swsetup_r+0x16>
 800accc:	4628      	mov	r0, r5
 800acce:	f000 f99b 	bl	800b008 <__sinit>
 800acd2:	4b2e      	ldr	r3, [pc, #184]	; (800ad8c <__swsetup_r+0xd0>)
 800acd4:	429c      	cmp	r4, r3
 800acd6:	d10f      	bne.n	800acf8 <__swsetup_r+0x3c>
 800acd8:	686c      	ldr	r4, [r5, #4]
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ace0:	0719      	lsls	r1, r3, #28
 800ace2:	d42c      	bmi.n	800ad3e <__swsetup_r+0x82>
 800ace4:	06dd      	lsls	r5, r3, #27
 800ace6:	d411      	bmi.n	800ad0c <__swsetup_r+0x50>
 800ace8:	2309      	movs	r3, #9
 800acea:	6033      	str	r3, [r6, #0]
 800acec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800acf0:	81a3      	strh	r3, [r4, #12]
 800acf2:	f04f 30ff 	mov.w	r0, #4294967295
 800acf6:	e03e      	b.n	800ad76 <__swsetup_r+0xba>
 800acf8:	4b25      	ldr	r3, [pc, #148]	; (800ad90 <__swsetup_r+0xd4>)
 800acfa:	429c      	cmp	r4, r3
 800acfc:	d101      	bne.n	800ad02 <__swsetup_r+0x46>
 800acfe:	68ac      	ldr	r4, [r5, #8]
 800ad00:	e7eb      	b.n	800acda <__swsetup_r+0x1e>
 800ad02:	4b24      	ldr	r3, [pc, #144]	; (800ad94 <__swsetup_r+0xd8>)
 800ad04:	429c      	cmp	r4, r3
 800ad06:	bf08      	it	eq
 800ad08:	68ec      	ldreq	r4, [r5, #12]
 800ad0a:	e7e6      	b.n	800acda <__swsetup_r+0x1e>
 800ad0c:	0758      	lsls	r0, r3, #29
 800ad0e:	d512      	bpl.n	800ad36 <__swsetup_r+0x7a>
 800ad10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad12:	b141      	cbz	r1, 800ad26 <__swsetup_r+0x6a>
 800ad14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad18:	4299      	cmp	r1, r3
 800ad1a:	d002      	beq.n	800ad22 <__swsetup_r+0x66>
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f000 fa93 	bl	800b248 <_free_r>
 800ad22:	2300      	movs	r3, #0
 800ad24:	6363      	str	r3, [r4, #52]	; 0x34
 800ad26:	89a3      	ldrh	r3, [r4, #12]
 800ad28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad2c:	81a3      	strh	r3, [r4, #12]
 800ad2e:	2300      	movs	r3, #0
 800ad30:	6063      	str	r3, [r4, #4]
 800ad32:	6923      	ldr	r3, [r4, #16]
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	89a3      	ldrh	r3, [r4, #12]
 800ad38:	f043 0308 	orr.w	r3, r3, #8
 800ad3c:	81a3      	strh	r3, [r4, #12]
 800ad3e:	6923      	ldr	r3, [r4, #16]
 800ad40:	b94b      	cbnz	r3, 800ad56 <__swsetup_r+0x9a>
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad4c:	d003      	beq.n	800ad56 <__swsetup_r+0x9a>
 800ad4e:	4621      	mov	r1, r4
 800ad50:	4630      	mov	r0, r6
 800ad52:	f000 fa31 	bl	800b1b8 <__smakebuf_r>
 800ad56:	89a0      	ldrh	r0, [r4, #12]
 800ad58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad5c:	f010 0301 	ands.w	r3, r0, #1
 800ad60:	d00a      	beq.n	800ad78 <__swsetup_r+0xbc>
 800ad62:	2300      	movs	r3, #0
 800ad64:	60a3      	str	r3, [r4, #8]
 800ad66:	6963      	ldr	r3, [r4, #20]
 800ad68:	425b      	negs	r3, r3
 800ad6a:	61a3      	str	r3, [r4, #24]
 800ad6c:	6923      	ldr	r3, [r4, #16]
 800ad6e:	b943      	cbnz	r3, 800ad82 <__swsetup_r+0xc6>
 800ad70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad74:	d1ba      	bne.n	800acec <__swsetup_r+0x30>
 800ad76:	bd70      	pop	{r4, r5, r6, pc}
 800ad78:	0781      	lsls	r1, r0, #30
 800ad7a:	bf58      	it	pl
 800ad7c:	6963      	ldrpl	r3, [r4, #20]
 800ad7e:	60a3      	str	r3, [r4, #8]
 800ad80:	e7f4      	b.n	800ad6c <__swsetup_r+0xb0>
 800ad82:	2000      	movs	r0, #0
 800ad84:	e7f7      	b.n	800ad76 <__swsetup_r+0xba>
 800ad86:	bf00      	nop
 800ad88:	20000068 	.word	0x20000068
 800ad8c:	0800ddb0 	.word	0x0800ddb0
 800ad90:	0800ddd0 	.word	0x0800ddd0
 800ad94:	0800dd90 	.word	0x0800dd90

0800ad98 <__assert_func>:
 800ad98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad9a:	4614      	mov	r4, r2
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <__assert_func+0x2c>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4605      	mov	r5, r0
 800ada4:	68d8      	ldr	r0, [r3, #12]
 800ada6:	b14c      	cbz	r4, 800adbc <__assert_func+0x24>
 800ada8:	4b07      	ldr	r3, [pc, #28]	; (800adc8 <__assert_func+0x30>)
 800adaa:	9100      	str	r1, [sp, #0]
 800adac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adb0:	4906      	ldr	r1, [pc, #24]	; (800adcc <__assert_func+0x34>)
 800adb2:	462b      	mov	r3, r5
 800adb4:	f000 f9a6 	bl	800b104 <fiprintf>
 800adb8:	f000 ffd6 	bl	800bd68 <abort>
 800adbc:	4b04      	ldr	r3, [pc, #16]	; (800add0 <__assert_func+0x38>)
 800adbe:	461c      	mov	r4, r3
 800adc0:	e7f3      	b.n	800adaa <__assert_func+0x12>
 800adc2:	bf00      	nop
 800adc4:	20000068 	.word	0x20000068
 800adc8:	0800dc52 	.word	0x0800dc52
 800adcc:	0800dc5f 	.word	0x0800dc5f
 800add0:	0800dc8d 	.word	0x0800dc8d

0800add4 <__sflush_r>:
 800add4:	898a      	ldrh	r2, [r1, #12]
 800add6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adda:	4605      	mov	r5, r0
 800addc:	0710      	lsls	r0, r2, #28
 800adde:	460c      	mov	r4, r1
 800ade0:	d458      	bmi.n	800ae94 <__sflush_r+0xc0>
 800ade2:	684b      	ldr	r3, [r1, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	dc05      	bgt.n	800adf4 <__sflush_r+0x20>
 800ade8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800adea:	2b00      	cmp	r3, #0
 800adec:	dc02      	bgt.n	800adf4 <__sflush_r+0x20>
 800adee:	2000      	movs	r0, #0
 800adf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adf6:	2e00      	cmp	r6, #0
 800adf8:	d0f9      	beq.n	800adee <__sflush_r+0x1a>
 800adfa:	2300      	movs	r3, #0
 800adfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae00:	682f      	ldr	r7, [r5, #0]
 800ae02:	602b      	str	r3, [r5, #0]
 800ae04:	d032      	beq.n	800ae6c <__sflush_r+0x98>
 800ae06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	075a      	lsls	r2, r3, #29
 800ae0c:	d505      	bpl.n	800ae1a <__sflush_r+0x46>
 800ae0e:	6863      	ldr	r3, [r4, #4]
 800ae10:	1ac0      	subs	r0, r0, r3
 800ae12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae14:	b10b      	cbz	r3, 800ae1a <__sflush_r+0x46>
 800ae16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae18:	1ac0      	subs	r0, r0, r3
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae20:	6a21      	ldr	r1, [r4, #32]
 800ae22:	4628      	mov	r0, r5
 800ae24:	47b0      	blx	r6
 800ae26:	1c43      	adds	r3, r0, #1
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	d106      	bne.n	800ae3a <__sflush_r+0x66>
 800ae2c:	6829      	ldr	r1, [r5, #0]
 800ae2e:	291d      	cmp	r1, #29
 800ae30:	d82c      	bhi.n	800ae8c <__sflush_r+0xb8>
 800ae32:	4a2a      	ldr	r2, [pc, #168]	; (800aedc <__sflush_r+0x108>)
 800ae34:	40ca      	lsrs	r2, r1
 800ae36:	07d6      	lsls	r6, r2, #31
 800ae38:	d528      	bpl.n	800ae8c <__sflush_r+0xb8>
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	6062      	str	r2, [r4, #4]
 800ae3e:	04d9      	lsls	r1, r3, #19
 800ae40:	6922      	ldr	r2, [r4, #16]
 800ae42:	6022      	str	r2, [r4, #0]
 800ae44:	d504      	bpl.n	800ae50 <__sflush_r+0x7c>
 800ae46:	1c42      	adds	r2, r0, #1
 800ae48:	d101      	bne.n	800ae4e <__sflush_r+0x7a>
 800ae4a:	682b      	ldr	r3, [r5, #0]
 800ae4c:	b903      	cbnz	r3, 800ae50 <__sflush_r+0x7c>
 800ae4e:	6560      	str	r0, [r4, #84]	; 0x54
 800ae50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae52:	602f      	str	r7, [r5, #0]
 800ae54:	2900      	cmp	r1, #0
 800ae56:	d0ca      	beq.n	800adee <__sflush_r+0x1a>
 800ae58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae5c:	4299      	cmp	r1, r3
 800ae5e:	d002      	beq.n	800ae66 <__sflush_r+0x92>
 800ae60:	4628      	mov	r0, r5
 800ae62:	f000 f9f1 	bl	800b248 <_free_r>
 800ae66:	2000      	movs	r0, #0
 800ae68:	6360      	str	r0, [r4, #52]	; 0x34
 800ae6a:	e7c1      	b.n	800adf0 <__sflush_r+0x1c>
 800ae6c:	6a21      	ldr	r1, [r4, #32]
 800ae6e:	2301      	movs	r3, #1
 800ae70:	4628      	mov	r0, r5
 800ae72:	47b0      	blx	r6
 800ae74:	1c41      	adds	r1, r0, #1
 800ae76:	d1c7      	bne.n	800ae08 <__sflush_r+0x34>
 800ae78:	682b      	ldr	r3, [r5, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d0c4      	beq.n	800ae08 <__sflush_r+0x34>
 800ae7e:	2b1d      	cmp	r3, #29
 800ae80:	d001      	beq.n	800ae86 <__sflush_r+0xb2>
 800ae82:	2b16      	cmp	r3, #22
 800ae84:	d101      	bne.n	800ae8a <__sflush_r+0xb6>
 800ae86:	602f      	str	r7, [r5, #0]
 800ae88:	e7b1      	b.n	800adee <__sflush_r+0x1a>
 800ae8a:	89a3      	ldrh	r3, [r4, #12]
 800ae8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae90:	81a3      	strh	r3, [r4, #12]
 800ae92:	e7ad      	b.n	800adf0 <__sflush_r+0x1c>
 800ae94:	690f      	ldr	r7, [r1, #16]
 800ae96:	2f00      	cmp	r7, #0
 800ae98:	d0a9      	beq.n	800adee <__sflush_r+0x1a>
 800ae9a:	0793      	lsls	r3, r2, #30
 800ae9c:	680e      	ldr	r6, [r1, #0]
 800ae9e:	bf08      	it	eq
 800aea0:	694b      	ldreq	r3, [r1, #20]
 800aea2:	600f      	str	r7, [r1, #0]
 800aea4:	bf18      	it	ne
 800aea6:	2300      	movne	r3, #0
 800aea8:	eba6 0807 	sub.w	r8, r6, r7
 800aeac:	608b      	str	r3, [r1, #8]
 800aeae:	f1b8 0f00 	cmp.w	r8, #0
 800aeb2:	dd9c      	ble.n	800adee <__sflush_r+0x1a>
 800aeb4:	6a21      	ldr	r1, [r4, #32]
 800aeb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aeb8:	4643      	mov	r3, r8
 800aeba:	463a      	mov	r2, r7
 800aebc:	4628      	mov	r0, r5
 800aebe:	47b0      	blx	r6
 800aec0:	2800      	cmp	r0, #0
 800aec2:	dc06      	bgt.n	800aed2 <__sflush_r+0xfe>
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeca:	81a3      	strh	r3, [r4, #12]
 800aecc:	f04f 30ff 	mov.w	r0, #4294967295
 800aed0:	e78e      	b.n	800adf0 <__sflush_r+0x1c>
 800aed2:	4407      	add	r7, r0
 800aed4:	eba8 0800 	sub.w	r8, r8, r0
 800aed8:	e7e9      	b.n	800aeae <__sflush_r+0xda>
 800aeda:	bf00      	nop
 800aedc:	20400001 	.word	0x20400001

0800aee0 <_fflush_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	690b      	ldr	r3, [r1, #16]
 800aee4:	4605      	mov	r5, r0
 800aee6:	460c      	mov	r4, r1
 800aee8:	b913      	cbnz	r3, 800aef0 <_fflush_r+0x10>
 800aeea:	2500      	movs	r5, #0
 800aeec:	4628      	mov	r0, r5
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	b118      	cbz	r0, 800aefa <_fflush_r+0x1a>
 800aef2:	6983      	ldr	r3, [r0, #24]
 800aef4:	b90b      	cbnz	r3, 800aefa <_fflush_r+0x1a>
 800aef6:	f000 f887 	bl	800b008 <__sinit>
 800aefa:	4b14      	ldr	r3, [pc, #80]	; (800af4c <_fflush_r+0x6c>)
 800aefc:	429c      	cmp	r4, r3
 800aefe:	d11b      	bne.n	800af38 <_fflush_r+0x58>
 800af00:	686c      	ldr	r4, [r5, #4]
 800af02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d0ef      	beq.n	800aeea <_fflush_r+0xa>
 800af0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af0c:	07d0      	lsls	r0, r2, #31
 800af0e:	d404      	bmi.n	800af1a <_fflush_r+0x3a>
 800af10:	0599      	lsls	r1, r3, #22
 800af12:	d402      	bmi.n	800af1a <_fflush_r+0x3a>
 800af14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af16:	f000 f927 	bl	800b168 <__retarget_lock_acquire_recursive>
 800af1a:	4628      	mov	r0, r5
 800af1c:	4621      	mov	r1, r4
 800af1e:	f7ff ff59 	bl	800add4 <__sflush_r>
 800af22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af24:	07da      	lsls	r2, r3, #31
 800af26:	4605      	mov	r5, r0
 800af28:	d4e0      	bmi.n	800aeec <_fflush_r+0xc>
 800af2a:	89a3      	ldrh	r3, [r4, #12]
 800af2c:	059b      	lsls	r3, r3, #22
 800af2e:	d4dd      	bmi.n	800aeec <_fflush_r+0xc>
 800af30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af32:	f000 f91a 	bl	800b16a <__retarget_lock_release_recursive>
 800af36:	e7d9      	b.n	800aeec <_fflush_r+0xc>
 800af38:	4b05      	ldr	r3, [pc, #20]	; (800af50 <_fflush_r+0x70>)
 800af3a:	429c      	cmp	r4, r3
 800af3c:	d101      	bne.n	800af42 <_fflush_r+0x62>
 800af3e:	68ac      	ldr	r4, [r5, #8]
 800af40:	e7df      	b.n	800af02 <_fflush_r+0x22>
 800af42:	4b04      	ldr	r3, [pc, #16]	; (800af54 <_fflush_r+0x74>)
 800af44:	429c      	cmp	r4, r3
 800af46:	bf08      	it	eq
 800af48:	68ec      	ldreq	r4, [r5, #12]
 800af4a:	e7da      	b.n	800af02 <_fflush_r+0x22>
 800af4c:	0800ddb0 	.word	0x0800ddb0
 800af50:	0800ddd0 	.word	0x0800ddd0
 800af54:	0800dd90 	.word	0x0800dd90

0800af58 <std>:
 800af58:	2300      	movs	r3, #0
 800af5a:	b510      	push	{r4, lr}
 800af5c:	4604      	mov	r4, r0
 800af5e:	e9c0 3300 	strd	r3, r3, [r0]
 800af62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af66:	6083      	str	r3, [r0, #8]
 800af68:	8181      	strh	r1, [r0, #12]
 800af6a:	6643      	str	r3, [r0, #100]	; 0x64
 800af6c:	81c2      	strh	r2, [r0, #14]
 800af6e:	6183      	str	r3, [r0, #24]
 800af70:	4619      	mov	r1, r3
 800af72:	2208      	movs	r2, #8
 800af74:	305c      	adds	r0, #92	; 0x5c
 800af76:	f7ff fc6b 	bl	800a850 <memset>
 800af7a:	4b05      	ldr	r3, [pc, #20]	; (800af90 <std+0x38>)
 800af7c:	6263      	str	r3, [r4, #36]	; 0x24
 800af7e:	4b05      	ldr	r3, [pc, #20]	; (800af94 <std+0x3c>)
 800af80:	62a3      	str	r3, [r4, #40]	; 0x28
 800af82:	4b05      	ldr	r3, [pc, #20]	; (800af98 <std+0x40>)
 800af84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af86:	4b05      	ldr	r3, [pc, #20]	; (800af9c <std+0x44>)
 800af88:	6224      	str	r4, [r4, #32]
 800af8a:	6323      	str	r3, [r4, #48]	; 0x30
 800af8c:	bd10      	pop	{r4, pc}
 800af8e:	bf00      	nop
 800af90:	0800bcbd 	.word	0x0800bcbd
 800af94:	0800bcdf 	.word	0x0800bcdf
 800af98:	0800bd17 	.word	0x0800bd17
 800af9c:	0800bd3b 	.word	0x0800bd3b

0800afa0 <_cleanup_r>:
 800afa0:	4901      	ldr	r1, [pc, #4]	; (800afa8 <_cleanup_r+0x8>)
 800afa2:	f000 b8c1 	b.w	800b128 <_fwalk_reent>
 800afa6:	bf00      	nop
 800afa8:	0800aee1 	.word	0x0800aee1

0800afac <__sfmoreglue>:
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	2268      	movs	r2, #104	; 0x68
 800afb0:	1e4d      	subs	r5, r1, #1
 800afb2:	4355      	muls	r5, r2
 800afb4:	460e      	mov	r6, r1
 800afb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afba:	f000 f9b1 	bl	800b320 <_malloc_r>
 800afbe:	4604      	mov	r4, r0
 800afc0:	b140      	cbz	r0, 800afd4 <__sfmoreglue+0x28>
 800afc2:	2100      	movs	r1, #0
 800afc4:	e9c0 1600 	strd	r1, r6, [r0]
 800afc8:	300c      	adds	r0, #12
 800afca:	60a0      	str	r0, [r4, #8]
 800afcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800afd0:	f7ff fc3e 	bl	800a850 <memset>
 800afd4:	4620      	mov	r0, r4
 800afd6:	bd70      	pop	{r4, r5, r6, pc}

0800afd8 <__sfp_lock_acquire>:
 800afd8:	4801      	ldr	r0, [pc, #4]	; (800afe0 <__sfp_lock_acquire+0x8>)
 800afda:	f000 b8c5 	b.w	800b168 <__retarget_lock_acquire_recursive>
 800afde:	bf00      	nop
 800afe0:	200029f9 	.word	0x200029f9

0800afe4 <__sfp_lock_release>:
 800afe4:	4801      	ldr	r0, [pc, #4]	; (800afec <__sfp_lock_release+0x8>)
 800afe6:	f000 b8c0 	b.w	800b16a <__retarget_lock_release_recursive>
 800afea:	bf00      	nop
 800afec:	200029f9 	.word	0x200029f9

0800aff0 <__sinit_lock_acquire>:
 800aff0:	4801      	ldr	r0, [pc, #4]	; (800aff8 <__sinit_lock_acquire+0x8>)
 800aff2:	f000 b8b9 	b.w	800b168 <__retarget_lock_acquire_recursive>
 800aff6:	bf00      	nop
 800aff8:	200029fa 	.word	0x200029fa

0800affc <__sinit_lock_release>:
 800affc:	4801      	ldr	r0, [pc, #4]	; (800b004 <__sinit_lock_release+0x8>)
 800affe:	f000 b8b4 	b.w	800b16a <__retarget_lock_release_recursive>
 800b002:	bf00      	nop
 800b004:	200029fa 	.word	0x200029fa

0800b008 <__sinit>:
 800b008:	b510      	push	{r4, lr}
 800b00a:	4604      	mov	r4, r0
 800b00c:	f7ff fff0 	bl	800aff0 <__sinit_lock_acquire>
 800b010:	69a3      	ldr	r3, [r4, #24]
 800b012:	b11b      	cbz	r3, 800b01c <__sinit+0x14>
 800b014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b018:	f7ff bff0 	b.w	800affc <__sinit_lock_release>
 800b01c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b020:	6523      	str	r3, [r4, #80]	; 0x50
 800b022:	4b13      	ldr	r3, [pc, #76]	; (800b070 <__sinit+0x68>)
 800b024:	4a13      	ldr	r2, [pc, #76]	; (800b074 <__sinit+0x6c>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	62a2      	str	r2, [r4, #40]	; 0x28
 800b02a:	42a3      	cmp	r3, r4
 800b02c:	bf04      	itt	eq
 800b02e:	2301      	moveq	r3, #1
 800b030:	61a3      	streq	r3, [r4, #24]
 800b032:	4620      	mov	r0, r4
 800b034:	f000 f820 	bl	800b078 <__sfp>
 800b038:	6060      	str	r0, [r4, #4]
 800b03a:	4620      	mov	r0, r4
 800b03c:	f000 f81c 	bl	800b078 <__sfp>
 800b040:	60a0      	str	r0, [r4, #8]
 800b042:	4620      	mov	r0, r4
 800b044:	f000 f818 	bl	800b078 <__sfp>
 800b048:	2200      	movs	r2, #0
 800b04a:	60e0      	str	r0, [r4, #12]
 800b04c:	2104      	movs	r1, #4
 800b04e:	6860      	ldr	r0, [r4, #4]
 800b050:	f7ff ff82 	bl	800af58 <std>
 800b054:	68a0      	ldr	r0, [r4, #8]
 800b056:	2201      	movs	r2, #1
 800b058:	2109      	movs	r1, #9
 800b05a:	f7ff ff7d 	bl	800af58 <std>
 800b05e:	68e0      	ldr	r0, [r4, #12]
 800b060:	2202      	movs	r2, #2
 800b062:	2112      	movs	r1, #18
 800b064:	f7ff ff78 	bl	800af58 <std>
 800b068:	2301      	movs	r3, #1
 800b06a:	61a3      	str	r3, [r4, #24]
 800b06c:	e7d2      	b.n	800b014 <__sinit+0xc>
 800b06e:	bf00      	nop
 800b070:	0800dbdc 	.word	0x0800dbdc
 800b074:	0800afa1 	.word	0x0800afa1

0800b078 <__sfp>:
 800b078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07a:	4607      	mov	r7, r0
 800b07c:	f7ff ffac 	bl	800afd8 <__sfp_lock_acquire>
 800b080:	4b1e      	ldr	r3, [pc, #120]	; (800b0fc <__sfp+0x84>)
 800b082:	681e      	ldr	r6, [r3, #0]
 800b084:	69b3      	ldr	r3, [r6, #24]
 800b086:	b913      	cbnz	r3, 800b08e <__sfp+0x16>
 800b088:	4630      	mov	r0, r6
 800b08a:	f7ff ffbd 	bl	800b008 <__sinit>
 800b08e:	3648      	adds	r6, #72	; 0x48
 800b090:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b094:	3b01      	subs	r3, #1
 800b096:	d503      	bpl.n	800b0a0 <__sfp+0x28>
 800b098:	6833      	ldr	r3, [r6, #0]
 800b09a:	b30b      	cbz	r3, 800b0e0 <__sfp+0x68>
 800b09c:	6836      	ldr	r6, [r6, #0]
 800b09e:	e7f7      	b.n	800b090 <__sfp+0x18>
 800b0a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0a4:	b9d5      	cbnz	r5, 800b0dc <__sfp+0x64>
 800b0a6:	4b16      	ldr	r3, [pc, #88]	; (800b100 <__sfp+0x88>)
 800b0a8:	60e3      	str	r3, [r4, #12]
 800b0aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0ae:	6665      	str	r5, [r4, #100]	; 0x64
 800b0b0:	f000 f859 	bl	800b166 <__retarget_lock_init_recursive>
 800b0b4:	f7ff ff96 	bl	800afe4 <__sfp_lock_release>
 800b0b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0c0:	6025      	str	r5, [r4, #0]
 800b0c2:	61a5      	str	r5, [r4, #24]
 800b0c4:	2208      	movs	r2, #8
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0cc:	f7ff fbc0 	bl	800a850 <memset>
 800b0d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b0d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0d8:	4620      	mov	r0, r4
 800b0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0dc:	3468      	adds	r4, #104	; 0x68
 800b0de:	e7d9      	b.n	800b094 <__sfp+0x1c>
 800b0e0:	2104      	movs	r1, #4
 800b0e2:	4638      	mov	r0, r7
 800b0e4:	f7ff ff62 	bl	800afac <__sfmoreglue>
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	6030      	str	r0, [r6, #0]
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d1d5      	bne.n	800b09c <__sfp+0x24>
 800b0f0:	f7ff ff78 	bl	800afe4 <__sfp_lock_release>
 800b0f4:	230c      	movs	r3, #12
 800b0f6:	603b      	str	r3, [r7, #0]
 800b0f8:	e7ee      	b.n	800b0d8 <__sfp+0x60>
 800b0fa:	bf00      	nop
 800b0fc:	0800dbdc 	.word	0x0800dbdc
 800b100:	ffff0001 	.word	0xffff0001

0800b104 <fiprintf>:
 800b104:	b40e      	push	{r1, r2, r3}
 800b106:	b503      	push	{r0, r1, lr}
 800b108:	4601      	mov	r1, r0
 800b10a:	ab03      	add	r3, sp, #12
 800b10c:	4805      	ldr	r0, [pc, #20]	; (800b124 <fiprintf+0x20>)
 800b10e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b112:	6800      	ldr	r0, [r0, #0]
 800b114:	9301      	str	r3, [sp, #4]
 800b116:	f000 fafd 	bl	800b714 <_vfiprintf_r>
 800b11a:	b002      	add	sp, #8
 800b11c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b120:	b003      	add	sp, #12
 800b122:	4770      	bx	lr
 800b124:	20000068 	.word	0x20000068

0800b128 <_fwalk_reent>:
 800b128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b12c:	4606      	mov	r6, r0
 800b12e:	4688      	mov	r8, r1
 800b130:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b134:	2700      	movs	r7, #0
 800b136:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b13a:	f1b9 0901 	subs.w	r9, r9, #1
 800b13e:	d505      	bpl.n	800b14c <_fwalk_reent+0x24>
 800b140:	6824      	ldr	r4, [r4, #0]
 800b142:	2c00      	cmp	r4, #0
 800b144:	d1f7      	bne.n	800b136 <_fwalk_reent+0xe>
 800b146:	4638      	mov	r0, r7
 800b148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b14c:	89ab      	ldrh	r3, [r5, #12]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d907      	bls.n	800b162 <_fwalk_reent+0x3a>
 800b152:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b156:	3301      	adds	r3, #1
 800b158:	d003      	beq.n	800b162 <_fwalk_reent+0x3a>
 800b15a:	4629      	mov	r1, r5
 800b15c:	4630      	mov	r0, r6
 800b15e:	47c0      	blx	r8
 800b160:	4307      	orrs	r7, r0
 800b162:	3568      	adds	r5, #104	; 0x68
 800b164:	e7e9      	b.n	800b13a <_fwalk_reent+0x12>

0800b166 <__retarget_lock_init_recursive>:
 800b166:	4770      	bx	lr

0800b168 <__retarget_lock_acquire_recursive>:
 800b168:	4770      	bx	lr

0800b16a <__retarget_lock_release_recursive>:
 800b16a:	4770      	bx	lr

0800b16c <__swhatbuf_r>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	460e      	mov	r6, r1
 800b170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b174:	2900      	cmp	r1, #0
 800b176:	b096      	sub	sp, #88	; 0x58
 800b178:	4614      	mov	r4, r2
 800b17a:	461d      	mov	r5, r3
 800b17c:	da08      	bge.n	800b190 <__swhatbuf_r+0x24>
 800b17e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	602a      	str	r2, [r5, #0]
 800b186:	061a      	lsls	r2, r3, #24
 800b188:	d410      	bmi.n	800b1ac <__swhatbuf_r+0x40>
 800b18a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b18e:	e00e      	b.n	800b1ae <__swhatbuf_r+0x42>
 800b190:	466a      	mov	r2, sp
 800b192:	f000 fe01 	bl	800bd98 <_fstat_r>
 800b196:	2800      	cmp	r0, #0
 800b198:	dbf1      	blt.n	800b17e <__swhatbuf_r+0x12>
 800b19a:	9a01      	ldr	r2, [sp, #4]
 800b19c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1a4:	425a      	negs	r2, r3
 800b1a6:	415a      	adcs	r2, r3
 800b1a8:	602a      	str	r2, [r5, #0]
 800b1aa:	e7ee      	b.n	800b18a <__swhatbuf_r+0x1e>
 800b1ac:	2340      	movs	r3, #64	; 0x40
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	b016      	add	sp, #88	; 0x58
 800b1b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b1b8 <__smakebuf_r>:
 800b1b8:	898b      	ldrh	r3, [r1, #12]
 800b1ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1bc:	079d      	lsls	r5, r3, #30
 800b1be:	4606      	mov	r6, r0
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	d507      	bpl.n	800b1d4 <__smakebuf_r+0x1c>
 800b1c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1c8:	6023      	str	r3, [r4, #0]
 800b1ca:	6123      	str	r3, [r4, #16]
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	6163      	str	r3, [r4, #20]
 800b1d0:	b002      	add	sp, #8
 800b1d2:	bd70      	pop	{r4, r5, r6, pc}
 800b1d4:	ab01      	add	r3, sp, #4
 800b1d6:	466a      	mov	r2, sp
 800b1d8:	f7ff ffc8 	bl	800b16c <__swhatbuf_r>
 800b1dc:	9900      	ldr	r1, [sp, #0]
 800b1de:	4605      	mov	r5, r0
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f000 f89d 	bl	800b320 <_malloc_r>
 800b1e6:	b948      	cbnz	r0, 800b1fc <__smakebuf_r+0x44>
 800b1e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ec:	059a      	lsls	r2, r3, #22
 800b1ee:	d4ef      	bmi.n	800b1d0 <__smakebuf_r+0x18>
 800b1f0:	f023 0303 	bic.w	r3, r3, #3
 800b1f4:	f043 0302 	orr.w	r3, r3, #2
 800b1f8:	81a3      	strh	r3, [r4, #12]
 800b1fa:	e7e3      	b.n	800b1c4 <__smakebuf_r+0xc>
 800b1fc:	4b0d      	ldr	r3, [pc, #52]	; (800b234 <__smakebuf_r+0x7c>)
 800b1fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800b200:	89a3      	ldrh	r3, [r4, #12]
 800b202:	6020      	str	r0, [r4, #0]
 800b204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b208:	81a3      	strh	r3, [r4, #12]
 800b20a:	9b00      	ldr	r3, [sp, #0]
 800b20c:	6163      	str	r3, [r4, #20]
 800b20e:	9b01      	ldr	r3, [sp, #4]
 800b210:	6120      	str	r0, [r4, #16]
 800b212:	b15b      	cbz	r3, 800b22c <__smakebuf_r+0x74>
 800b214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b218:	4630      	mov	r0, r6
 800b21a:	f000 fdcf 	bl	800bdbc <_isatty_r>
 800b21e:	b128      	cbz	r0, 800b22c <__smakebuf_r+0x74>
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	f023 0303 	bic.w	r3, r3, #3
 800b226:	f043 0301 	orr.w	r3, r3, #1
 800b22a:	81a3      	strh	r3, [r4, #12]
 800b22c:	89a0      	ldrh	r0, [r4, #12]
 800b22e:	4305      	orrs	r5, r0
 800b230:	81a5      	strh	r5, [r4, #12]
 800b232:	e7cd      	b.n	800b1d0 <__smakebuf_r+0x18>
 800b234:	0800afa1 	.word	0x0800afa1

0800b238 <malloc>:
 800b238:	4b02      	ldr	r3, [pc, #8]	; (800b244 <malloc+0xc>)
 800b23a:	4601      	mov	r1, r0
 800b23c:	6818      	ldr	r0, [r3, #0]
 800b23e:	f000 b86f 	b.w	800b320 <_malloc_r>
 800b242:	bf00      	nop
 800b244:	20000068 	.word	0x20000068

0800b248 <_free_r>:
 800b248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b24a:	2900      	cmp	r1, #0
 800b24c:	d044      	beq.n	800b2d8 <_free_r+0x90>
 800b24e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b252:	9001      	str	r0, [sp, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	f1a1 0404 	sub.w	r4, r1, #4
 800b25a:	bfb8      	it	lt
 800b25c:	18e4      	addlt	r4, r4, r3
 800b25e:	f000 fdf7 	bl	800be50 <__malloc_lock>
 800b262:	4a1e      	ldr	r2, [pc, #120]	; (800b2dc <_free_r+0x94>)
 800b264:	9801      	ldr	r0, [sp, #4]
 800b266:	6813      	ldr	r3, [r2, #0]
 800b268:	b933      	cbnz	r3, 800b278 <_free_r+0x30>
 800b26a:	6063      	str	r3, [r4, #4]
 800b26c:	6014      	str	r4, [r2, #0]
 800b26e:	b003      	add	sp, #12
 800b270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b274:	f000 bdf2 	b.w	800be5c <__malloc_unlock>
 800b278:	42a3      	cmp	r3, r4
 800b27a:	d908      	bls.n	800b28e <_free_r+0x46>
 800b27c:	6825      	ldr	r5, [r4, #0]
 800b27e:	1961      	adds	r1, r4, r5
 800b280:	428b      	cmp	r3, r1
 800b282:	bf01      	itttt	eq
 800b284:	6819      	ldreq	r1, [r3, #0]
 800b286:	685b      	ldreq	r3, [r3, #4]
 800b288:	1949      	addeq	r1, r1, r5
 800b28a:	6021      	streq	r1, [r4, #0]
 800b28c:	e7ed      	b.n	800b26a <_free_r+0x22>
 800b28e:	461a      	mov	r2, r3
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	b10b      	cbz	r3, 800b298 <_free_r+0x50>
 800b294:	42a3      	cmp	r3, r4
 800b296:	d9fa      	bls.n	800b28e <_free_r+0x46>
 800b298:	6811      	ldr	r1, [r2, #0]
 800b29a:	1855      	adds	r5, r2, r1
 800b29c:	42a5      	cmp	r5, r4
 800b29e:	d10b      	bne.n	800b2b8 <_free_r+0x70>
 800b2a0:	6824      	ldr	r4, [r4, #0]
 800b2a2:	4421      	add	r1, r4
 800b2a4:	1854      	adds	r4, r2, r1
 800b2a6:	42a3      	cmp	r3, r4
 800b2a8:	6011      	str	r1, [r2, #0]
 800b2aa:	d1e0      	bne.n	800b26e <_free_r+0x26>
 800b2ac:	681c      	ldr	r4, [r3, #0]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	6053      	str	r3, [r2, #4]
 800b2b2:	4421      	add	r1, r4
 800b2b4:	6011      	str	r1, [r2, #0]
 800b2b6:	e7da      	b.n	800b26e <_free_r+0x26>
 800b2b8:	d902      	bls.n	800b2c0 <_free_r+0x78>
 800b2ba:	230c      	movs	r3, #12
 800b2bc:	6003      	str	r3, [r0, #0]
 800b2be:	e7d6      	b.n	800b26e <_free_r+0x26>
 800b2c0:	6825      	ldr	r5, [r4, #0]
 800b2c2:	1961      	adds	r1, r4, r5
 800b2c4:	428b      	cmp	r3, r1
 800b2c6:	bf04      	itt	eq
 800b2c8:	6819      	ldreq	r1, [r3, #0]
 800b2ca:	685b      	ldreq	r3, [r3, #4]
 800b2cc:	6063      	str	r3, [r4, #4]
 800b2ce:	bf04      	itt	eq
 800b2d0:	1949      	addeq	r1, r1, r5
 800b2d2:	6021      	streq	r1, [r4, #0]
 800b2d4:	6054      	str	r4, [r2, #4]
 800b2d6:	e7ca      	b.n	800b26e <_free_r+0x26>
 800b2d8:	b003      	add	sp, #12
 800b2da:	bd30      	pop	{r4, r5, pc}
 800b2dc:	200029fc 	.word	0x200029fc

0800b2e0 <sbrk_aligned>:
 800b2e0:	b570      	push	{r4, r5, r6, lr}
 800b2e2:	4e0e      	ldr	r6, [pc, #56]	; (800b31c <sbrk_aligned+0x3c>)
 800b2e4:	460c      	mov	r4, r1
 800b2e6:	6831      	ldr	r1, [r6, #0]
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	b911      	cbnz	r1, 800b2f2 <sbrk_aligned+0x12>
 800b2ec:	f000 fcd6 	bl	800bc9c <_sbrk_r>
 800b2f0:	6030      	str	r0, [r6, #0]
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	f000 fcd1 	bl	800bc9c <_sbrk_r>
 800b2fa:	1c43      	adds	r3, r0, #1
 800b2fc:	d00a      	beq.n	800b314 <sbrk_aligned+0x34>
 800b2fe:	1cc4      	adds	r4, r0, #3
 800b300:	f024 0403 	bic.w	r4, r4, #3
 800b304:	42a0      	cmp	r0, r4
 800b306:	d007      	beq.n	800b318 <sbrk_aligned+0x38>
 800b308:	1a21      	subs	r1, r4, r0
 800b30a:	4628      	mov	r0, r5
 800b30c:	f000 fcc6 	bl	800bc9c <_sbrk_r>
 800b310:	3001      	adds	r0, #1
 800b312:	d101      	bne.n	800b318 <sbrk_aligned+0x38>
 800b314:	f04f 34ff 	mov.w	r4, #4294967295
 800b318:	4620      	mov	r0, r4
 800b31a:	bd70      	pop	{r4, r5, r6, pc}
 800b31c:	20002a00 	.word	0x20002a00

0800b320 <_malloc_r>:
 800b320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b324:	1ccd      	adds	r5, r1, #3
 800b326:	f025 0503 	bic.w	r5, r5, #3
 800b32a:	3508      	adds	r5, #8
 800b32c:	2d0c      	cmp	r5, #12
 800b32e:	bf38      	it	cc
 800b330:	250c      	movcc	r5, #12
 800b332:	2d00      	cmp	r5, #0
 800b334:	4607      	mov	r7, r0
 800b336:	db01      	blt.n	800b33c <_malloc_r+0x1c>
 800b338:	42a9      	cmp	r1, r5
 800b33a:	d905      	bls.n	800b348 <_malloc_r+0x28>
 800b33c:	230c      	movs	r3, #12
 800b33e:	603b      	str	r3, [r7, #0]
 800b340:	2600      	movs	r6, #0
 800b342:	4630      	mov	r0, r6
 800b344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b348:	4e2e      	ldr	r6, [pc, #184]	; (800b404 <_malloc_r+0xe4>)
 800b34a:	f000 fd81 	bl	800be50 <__malloc_lock>
 800b34e:	6833      	ldr	r3, [r6, #0]
 800b350:	461c      	mov	r4, r3
 800b352:	bb34      	cbnz	r4, 800b3a2 <_malloc_r+0x82>
 800b354:	4629      	mov	r1, r5
 800b356:	4638      	mov	r0, r7
 800b358:	f7ff ffc2 	bl	800b2e0 <sbrk_aligned>
 800b35c:	1c43      	adds	r3, r0, #1
 800b35e:	4604      	mov	r4, r0
 800b360:	d14d      	bne.n	800b3fe <_malloc_r+0xde>
 800b362:	6834      	ldr	r4, [r6, #0]
 800b364:	4626      	mov	r6, r4
 800b366:	2e00      	cmp	r6, #0
 800b368:	d140      	bne.n	800b3ec <_malloc_r+0xcc>
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	4631      	mov	r1, r6
 800b36e:	4638      	mov	r0, r7
 800b370:	eb04 0803 	add.w	r8, r4, r3
 800b374:	f000 fc92 	bl	800bc9c <_sbrk_r>
 800b378:	4580      	cmp	r8, r0
 800b37a:	d13a      	bne.n	800b3f2 <_malloc_r+0xd2>
 800b37c:	6821      	ldr	r1, [r4, #0]
 800b37e:	3503      	adds	r5, #3
 800b380:	1a6d      	subs	r5, r5, r1
 800b382:	f025 0503 	bic.w	r5, r5, #3
 800b386:	3508      	adds	r5, #8
 800b388:	2d0c      	cmp	r5, #12
 800b38a:	bf38      	it	cc
 800b38c:	250c      	movcc	r5, #12
 800b38e:	4629      	mov	r1, r5
 800b390:	4638      	mov	r0, r7
 800b392:	f7ff ffa5 	bl	800b2e0 <sbrk_aligned>
 800b396:	3001      	adds	r0, #1
 800b398:	d02b      	beq.n	800b3f2 <_malloc_r+0xd2>
 800b39a:	6823      	ldr	r3, [r4, #0]
 800b39c:	442b      	add	r3, r5
 800b39e:	6023      	str	r3, [r4, #0]
 800b3a0:	e00e      	b.n	800b3c0 <_malloc_r+0xa0>
 800b3a2:	6822      	ldr	r2, [r4, #0]
 800b3a4:	1b52      	subs	r2, r2, r5
 800b3a6:	d41e      	bmi.n	800b3e6 <_malloc_r+0xc6>
 800b3a8:	2a0b      	cmp	r2, #11
 800b3aa:	d916      	bls.n	800b3da <_malloc_r+0xba>
 800b3ac:	1961      	adds	r1, r4, r5
 800b3ae:	42a3      	cmp	r3, r4
 800b3b0:	6025      	str	r5, [r4, #0]
 800b3b2:	bf18      	it	ne
 800b3b4:	6059      	strne	r1, [r3, #4]
 800b3b6:	6863      	ldr	r3, [r4, #4]
 800b3b8:	bf08      	it	eq
 800b3ba:	6031      	streq	r1, [r6, #0]
 800b3bc:	5162      	str	r2, [r4, r5]
 800b3be:	604b      	str	r3, [r1, #4]
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	f104 060b 	add.w	r6, r4, #11
 800b3c6:	f000 fd49 	bl	800be5c <__malloc_unlock>
 800b3ca:	f026 0607 	bic.w	r6, r6, #7
 800b3ce:	1d23      	adds	r3, r4, #4
 800b3d0:	1af2      	subs	r2, r6, r3
 800b3d2:	d0b6      	beq.n	800b342 <_malloc_r+0x22>
 800b3d4:	1b9b      	subs	r3, r3, r6
 800b3d6:	50a3      	str	r3, [r4, r2]
 800b3d8:	e7b3      	b.n	800b342 <_malloc_r+0x22>
 800b3da:	6862      	ldr	r2, [r4, #4]
 800b3dc:	42a3      	cmp	r3, r4
 800b3de:	bf0c      	ite	eq
 800b3e0:	6032      	streq	r2, [r6, #0]
 800b3e2:	605a      	strne	r2, [r3, #4]
 800b3e4:	e7ec      	b.n	800b3c0 <_malloc_r+0xa0>
 800b3e6:	4623      	mov	r3, r4
 800b3e8:	6864      	ldr	r4, [r4, #4]
 800b3ea:	e7b2      	b.n	800b352 <_malloc_r+0x32>
 800b3ec:	4634      	mov	r4, r6
 800b3ee:	6876      	ldr	r6, [r6, #4]
 800b3f0:	e7b9      	b.n	800b366 <_malloc_r+0x46>
 800b3f2:	230c      	movs	r3, #12
 800b3f4:	603b      	str	r3, [r7, #0]
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	f000 fd30 	bl	800be5c <__malloc_unlock>
 800b3fc:	e7a1      	b.n	800b342 <_malloc_r+0x22>
 800b3fe:	6025      	str	r5, [r4, #0]
 800b400:	e7de      	b.n	800b3c0 <_malloc_r+0xa0>
 800b402:	bf00      	nop
 800b404:	200029fc 	.word	0x200029fc

0800b408 <__ssputs_r>:
 800b408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b40c:	688e      	ldr	r6, [r1, #8]
 800b40e:	429e      	cmp	r6, r3
 800b410:	4682      	mov	sl, r0
 800b412:	460c      	mov	r4, r1
 800b414:	4690      	mov	r8, r2
 800b416:	461f      	mov	r7, r3
 800b418:	d838      	bhi.n	800b48c <__ssputs_r+0x84>
 800b41a:	898a      	ldrh	r2, [r1, #12]
 800b41c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b420:	d032      	beq.n	800b488 <__ssputs_r+0x80>
 800b422:	6825      	ldr	r5, [r4, #0]
 800b424:	6909      	ldr	r1, [r1, #16]
 800b426:	eba5 0901 	sub.w	r9, r5, r1
 800b42a:	6965      	ldr	r5, [r4, #20]
 800b42c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b430:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b434:	3301      	adds	r3, #1
 800b436:	444b      	add	r3, r9
 800b438:	106d      	asrs	r5, r5, #1
 800b43a:	429d      	cmp	r5, r3
 800b43c:	bf38      	it	cc
 800b43e:	461d      	movcc	r5, r3
 800b440:	0553      	lsls	r3, r2, #21
 800b442:	d531      	bpl.n	800b4a8 <__ssputs_r+0xa0>
 800b444:	4629      	mov	r1, r5
 800b446:	f7ff ff6b 	bl	800b320 <_malloc_r>
 800b44a:	4606      	mov	r6, r0
 800b44c:	b950      	cbnz	r0, 800b464 <__ssputs_r+0x5c>
 800b44e:	230c      	movs	r3, #12
 800b450:	f8ca 3000 	str.w	r3, [sl]
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b45a:	81a3      	strh	r3, [r4, #12]
 800b45c:	f04f 30ff 	mov.w	r0, #4294967295
 800b460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b464:	6921      	ldr	r1, [r4, #16]
 800b466:	464a      	mov	r2, r9
 800b468:	f000 fcca 	bl	800be00 <memcpy>
 800b46c:	89a3      	ldrh	r3, [r4, #12]
 800b46e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b476:	81a3      	strh	r3, [r4, #12]
 800b478:	6126      	str	r6, [r4, #16]
 800b47a:	6165      	str	r5, [r4, #20]
 800b47c:	444e      	add	r6, r9
 800b47e:	eba5 0509 	sub.w	r5, r5, r9
 800b482:	6026      	str	r6, [r4, #0]
 800b484:	60a5      	str	r5, [r4, #8]
 800b486:	463e      	mov	r6, r7
 800b488:	42be      	cmp	r6, r7
 800b48a:	d900      	bls.n	800b48e <__ssputs_r+0x86>
 800b48c:	463e      	mov	r6, r7
 800b48e:	6820      	ldr	r0, [r4, #0]
 800b490:	4632      	mov	r2, r6
 800b492:	4641      	mov	r1, r8
 800b494:	f000 fcc2 	bl	800be1c <memmove>
 800b498:	68a3      	ldr	r3, [r4, #8]
 800b49a:	1b9b      	subs	r3, r3, r6
 800b49c:	60a3      	str	r3, [r4, #8]
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	4433      	add	r3, r6
 800b4a2:	6023      	str	r3, [r4, #0]
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	e7db      	b.n	800b460 <__ssputs_r+0x58>
 800b4a8:	462a      	mov	r2, r5
 800b4aa:	f000 fcdd 	bl	800be68 <_realloc_r>
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d1e1      	bne.n	800b478 <__ssputs_r+0x70>
 800b4b4:	6921      	ldr	r1, [r4, #16]
 800b4b6:	4650      	mov	r0, sl
 800b4b8:	f7ff fec6 	bl	800b248 <_free_r>
 800b4bc:	e7c7      	b.n	800b44e <__ssputs_r+0x46>
	...

0800b4c0 <_svfiprintf_r>:
 800b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	4698      	mov	r8, r3
 800b4c6:	898b      	ldrh	r3, [r1, #12]
 800b4c8:	061b      	lsls	r3, r3, #24
 800b4ca:	b09d      	sub	sp, #116	; 0x74
 800b4cc:	4607      	mov	r7, r0
 800b4ce:	460d      	mov	r5, r1
 800b4d0:	4614      	mov	r4, r2
 800b4d2:	d50e      	bpl.n	800b4f2 <_svfiprintf_r+0x32>
 800b4d4:	690b      	ldr	r3, [r1, #16]
 800b4d6:	b963      	cbnz	r3, 800b4f2 <_svfiprintf_r+0x32>
 800b4d8:	2140      	movs	r1, #64	; 0x40
 800b4da:	f7ff ff21 	bl	800b320 <_malloc_r>
 800b4de:	6028      	str	r0, [r5, #0]
 800b4e0:	6128      	str	r0, [r5, #16]
 800b4e2:	b920      	cbnz	r0, 800b4ee <_svfiprintf_r+0x2e>
 800b4e4:	230c      	movs	r3, #12
 800b4e6:	603b      	str	r3, [r7, #0]
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ec:	e0d1      	b.n	800b692 <_svfiprintf_r+0x1d2>
 800b4ee:	2340      	movs	r3, #64	; 0x40
 800b4f0:	616b      	str	r3, [r5, #20]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f6:	2320      	movs	r3, #32
 800b4f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b500:	2330      	movs	r3, #48	; 0x30
 800b502:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b6ac <_svfiprintf_r+0x1ec>
 800b506:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b50a:	f04f 0901 	mov.w	r9, #1
 800b50e:	4623      	mov	r3, r4
 800b510:	469a      	mov	sl, r3
 800b512:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b516:	b10a      	cbz	r2, 800b51c <_svfiprintf_r+0x5c>
 800b518:	2a25      	cmp	r2, #37	; 0x25
 800b51a:	d1f9      	bne.n	800b510 <_svfiprintf_r+0x50>
 800b51c:	ebba 0b04 	subs.w	fp, sl, r4
 800b520:	d00b      	beq.n	800b53a <_svfiprintf_r+0x7a>
 800b522:	465b      	mov	r3, fp
 800b524:	4622      	mov	r2, r4
 800b526:	4629      	mov	r1, r5
 800b528:	4638      	mov	r0, r7
 800b52a:	f7ff ff6d 	bl	800b408 <__ssputs_r>
 800b52e:	3001      	adds	r0, #1
 800b530:	f000 80aa 	beq.w	800b688 <_svfiprintf_r+0x1c8>
 800b534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b536:	445a      	add	r2, fp
 800b538:	9209      	str	r2, [sp, #36]	; 0x24
 800b53a:	f89a 3000 	ldrb.w	r3, [sl]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f000 80a2 	beq.w	800b688 <_svfiprintf_r+0x1c8>
 800b544:	2300      	movs	r3, #0
 800b546:	f04f 32ff 	mov.w	r2, #4294967295
 800b54a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b54e:	f10a 0a01 	add.w	sl, sl, #1
 800b552:	9304      	str	r3, [sp, #16]
 800b554:	9307      	str	r3, [sp, #28]
 800b556:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b55a:	931a      	str	r3, [sp, #104]	; 0x68
 800b55c:	4654      	mov	r4, sl
 800b55e:	2205      	movs	r2, #5
 800b560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b564:	4851      	ldr	r0, [pc, #324]	; (800b6ac <_svfiprintf_r+0x1ec>)
 800b566:	f7f4 fe3b 	bl	80001e0 <memchr>
 800b56a:	9a04      	ldr	r2, [sp, #16]
 800b56c:	b9d8      	cbnz	r0, 800b5a6 <_svfiprintf_r+0xe6>
 800b56e:	06d0      	lsls	r0, r2, #27
 800b570:	bf44      	itt	mi
 800b572:	2320      	movmi	r3, #32
 800b574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b578:	0711      	lsls	r1, r2, #28
 800b57a:	bf44      	itt	mi
 800b57c:	232b      	movmi	r3, #43	; 0x2b
 800b57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b582:	f89a 3000 	ldrb.w	r3, [sl]
 800b586:	2b2a      	cmp	r3, #42	; 0x2a
 800b588:	d015      	beq.n	800b5b6 <_svfiprintf_r+0xf6>
 800b58a:	9a07      	ldr	r2, [sp, #28]
 800b58c:	4654      	mov	r4, sl
 800b58e:	2000      	movs	r0, #0
 800b590:	f04f 0c0a 	mov.w	ip, #10
 800b594:	4621      	mov	r1, r4
 800b596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b59a:	3b30      	subs	r3, #48	; 0x30
 800b59c:	2b09      	cmp	r3, #9
 800b59e:	d94e      	bls.n	800b63e <_svfiprintf_r+0x17e>
 800b5a0:	b1b0      	cbz	r0, 800b5d0 <_svfiprintf_r+0x110>
 800b5a2:	9207      	str	r2, [sp, #28]
 800b5a4:	e014      	b.n	800b5d0 <_svfiprintf_r+0x110>
 800b5a6:	eba0 0308 	sub.w	r3, r0, r8
 800b5aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	9304      	str	r3, [sp, #16]
 800b5b2:	46a2      	mov	sl, r4
 800b5b4:	e7d2      	b.n	800b55c <_svfiprintf_r+0x9c>
 800b5b6:	9b03      	ldr	r3, [sp, #12]
 800b5b8:	1d19      	adds	r1, r3, #4
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	9103      	str	r1, [sp, #12]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	bfbb      	ittet	lt
 800b5c2:	425b      	neglt	r3, r3
 800b5c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b5c8:	9307      	strge	r3, [sp, #28]
 800b5ca:	9307      	strlt	r3, [sp, #28]
 800b5cc:	bfb8      	it	lt
 800b5ce:	9204      	strlt	r2, [sp, #16]
 800b5d0:	7823      	ldrb	r3, [r4, #0]
 800b5d2:	2b2e      	cmp	r3, #46	; 0x2e
 800b5d4:	d10c      	bne.n	800b5f0 <_svfiprintf_r+0x130>
 800b5d6:	7863      	ldrb	r3, [r4, #1]
 800b5d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b5da:	d135      	bne.n	800b648 <_svfiprintf_r+0x188>
 800b5dc:	9b03      	ldr	r3, [sp, #12]
 800b5de:	1d1a      	adds	r2, r3, #4
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	9203      	str	r2, [sp, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	bfb8      	it	lt
 800b5e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5ec:	3402      	adds	r4, #2
 800b5ee:	9305      	str	r3, [sp, #20]
 800b5f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b6bc <_svfiprintf_r+0x1fc>
 800b5f4:	7821      	ldrb	r1, [r4, #0]
 800b5f6:	2203      	movs	r2, #3
 800b5f8:	4650      	mov	r0, sl
 800b5fa:	f7f4 fdf1 	bl	80001e0 <memchr>
 800b5fe:	b140      	cbz	r0, 800b612 <_svfiprintf_r+0x152>
 800b600:	2340      	movs	r3, #64	; 0x40
 800b602:	eba0 000a 	sub.w	r0, r0, sl
 800b606:	fa03 f000 	lsl.w	r0, r3, r0
 800b60a:	9b04      	ldr	r3, [sp, #16]
 800b60c:	4303      	orrs	r3, r0
 800b60e:	3401      	adds	r4, #1
 800b610:	9304      	str	r3, [sp, #16]
 800b612:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b616:	4826      	ldr	r0, [pc, #152]	; (800b6b0 <_svfiprintf_r+0x1f0>)
 800b618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b61c:	2206      	movs	r2, #6
 800b61e:	f7f4 fddf 	bl	80001e0 <memchr>
 800b622:	2800      	cmp	r0, #0
 800b624:	d038      	beq.n	800b698 <_svfiprintf_r+0x1d8>
 800b626:	4b23      	ldr	r3, [pc, #140]	; (800b6b4 <_svfiprintf_r+0x1f4>)
 800b628:	bb1b      	cbnz	r3, 800b672 <_svfiprintf_r+0x1b2>
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	3307      	adds	r3, #7
 800b62e:	f023 0307 	bic.w	r3, r3, #7
 800b632:	3308      	adds	r3, #8
 800b634:	9303      	str	r3, [sp, #12]
 800b636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b638:	4433      	add	r3, r6
 800b63a:	9309      	str	r3, [sp, #36]	; 0x24
 800b63c:	e767      	b.n	800b50e <_svfiprintf_r+0x4e>
 800b63e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b642:	460c      	mov	r4, r1
 800b644:	2001      	movs	r0, #1
 800b646:	e7a5      	b.n	800b594 <_svfiprintf_r+0xd4>
 800b648:	2300      	movs	r3, #0
 800b64a:	3401      	adds	r4, #1
 800b64c:	9305      	str	r3, [sp, #20]
 800b64e:	4619      	mov	r1, r3
 800b650:	f04f 0c0a 	mov.w	ip, #10
 800b654:	4620      	mov	r0, r4
 800b656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b65a:	3a30      	subs	r2, #48	; 0x30
 800b65c:	2a09      	cmp	r2, #9
 800b65e:	d903      	bls.n	800b668 <_svfiprintf_r+0x1a8>
 800b660:	2b00      	cmp	r3, #0
 800b662:	d0c5      	beq.n	800b5f0 <_svfiprintf_r+0x130>
 800b664:	9105      	str	r1, [sp, #20]
 800b666:	e7c3      	b.n	800b5f0 <_svfiprintf_r+0x130>
 800b668:	fb0c 2101 	mla	r1, ip, r1, r2
 800b66c:	4604      	mov	r4, r0
 800b66e:	2301      	movs	r3, #1
 800b670:	e7f0      	b.n	800b654 <_svfiprintf_r+0x194>
 800b672:	ab03      	add	r3, sp, #12
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	462a      	mov	r2, r5
 800b678:	4b0f      	ldr	r3, [pc, #60]	; (800b6b8 <_svfiprintf_r+0x1f8>)
 800b67a:	a904      	add	r1, sp, #16
 800b67c:	4638      	mov	r0, r7
 800b67e:	f3af 8000 	nop.w
 800b682:	1c42      	adds	r2, r0, #1
 800b684:	4606      	mov	r6, r0
 800b686:	d1d6      	bne.n	800b636 <_svfiprintf_r+0x176>
 800b688:	89ab      	ldrh	r3, [r5, #12]
 800b68a:	065b      	lsls	r3, r3, #25
 800b68c:	f53f af2c 	bmi.w	800b4e8 <_svfiprintf_r+0x28>
 800b690:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b692:	b01d      	add	sp, #116	; 0x74
 800b694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b698:	ab03      	add	r3, sp, #12
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	462a      	mov	r2, r5
 800b69e:	4b06      	ldr	r3, [pc, #24]	; (800b6b8 <_svfiprintf_r+0x1f8>)
 800b6a0:	a904      	add	r1, sp, #16
 800b6a2:	4638      	mov	r0, r7
 800b6a4:	f000 f9d4 	bl	800ba50 <_printf_i>
 800b6a8:	e7eb      	b.n	800b682 <_svfiprintf_r+0x1c2>
 800b6aa:	bf00      	nop
 800b6ac:	0800ddf0 	.word	0x0800ddf0
 800b6b0:	0800ddfa 	.word	0x0800ddfa
 800b6b4:	00000000 	.word	0x00000000
 800b6b8:	0800b409 	.word	0x0800b409
 800b6bc:	0800ddf6 	.word	0x0800ddf6

0800b6c0 <__sfputc_r>:
 800b6c0:	6893      	ldr	r3, [r2, #8]
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	b410      	push	{r4}
 800b6c8:	6093      	str	r3, [r2, #8]
 800b6ca:	da08      	bge.n	800b6de <__sfputc_r+0x1e>
 800b6cc:	6994      	ldr	r4, [r2, #24]
 800b6ce:	42a3      	cmp	r3, r4
 800b6d0:	db01      	blt.n	800b6d6 <__sfputc_r+0x16>
 800b6d2:	290a      	cmp	r1, #10
 800b6d4:	d103      	bne.n	800b6de <__sfputc_r+0x1e>
 800b6d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6da:	f7ff ba9d 	b.w	800ac18 <__swbuf_r>
 800b6de:	6813      	ldr	r3, [r2, #0]
 800b6e0:	1c58      	adds	r0, r3, #1
 800b6e2:	6010      	str	r0, [r2, #0]
 800b6e4:	7019      	strb	r1, [r3, #0]
 800b6e6:	4608      	mov	r0, r1
 800b6e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <__sfputs_r>:
 800b6ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f0:	4606      	mov	r6, r0
 800b6f2:	460f      	mov	r7, r1
 800b6f4:	4614      	mov	r4, r2
 800b6f6:	18d5      	adds	r5, r2, r3
 800b6f8:	42ac      	cmp	r4, r5
 800b6fa:	d101      	bne.n	800b700 <__sfputs_r+0x12>
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	e007      	b.n	800b710 <__sfputs_r+0x22>
 800b700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b704:	463a      	mov	r2, r7
 800b706:	4630      	mov	r0, r6
 800b708:	f7ff ffda 	bl	800b6c0 <__sfputc_r>
 800b70c:	1c43      	adds	r3, r0, #1
 800b70e:	d1f3      	bne.n	800b6f8 <__sfputs_r+0xa>
 800b710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b714 <_vfiprintf_r>:
 800b714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b718:	460d      	mov	r5, r1
 800b71a:	b09d      	sub	sp, #116	; 0x74
 800b71c:	4614      	mov	r4, r2
 800b71e:	4698      	mov	r8, r3
 800b720:	4606      	mov	r6, r0
 800b722:	b118      	cbz	r0, 800b72c <_vfiprintf_r+0x18>
 800b724:	6983      	ldr	r3, [r0, #24]
 800b726:	b90b      	cbnz	r3, 800b72c <_vfiprintf_r+0x18>
 800b728:	f7ff fc6e 	bl	800b008 <__sinit>
 800b72c:	4b89      	ldr	r3, [pc, #548]	; (800b954 <_vfiprintf_r+0x240>)
 800b72e:	429d      	cmp	r5, r3
 800b730:	d11b      	bne.n	800b76a <_vfiprintf_r+0x56>
 800b732:	6875      	ldr	r5, [r6, #4]
 800b734:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b736:	07d9      	lsls	r1, r3, #31
 800b738:	d405      	bmi.n	800b746 <_vfiprintf_r+0x32>
 800b73a:	89ab      	ldrh	r3, [r5, #12]
 800b73c:	059a      	lsls	r2, r3, #22
 800b73e:	d402      	bmi.n	800b746 <_vfiprintf_r+0x32>
 800b740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b742:	f7ff fd11 	bl	800b168 <__retarget_lock_acquire_recursive>
 800b746:	89ab      	ldrh	r3, [r5, #12]
 800b748:	071b      	lsls	r3, r3, #28
 800b74a:	d501      	bpl.n	800b750 <_vfiprintf_r+0x3c>
 800b74c:	692b      	ldr	r3, [r5, #16]
 800b74e:	b9eb      	cbnz	r3, 800b78c <_vfiprintf_r+0x78>
 800b750:	4629      	mov	r1, r5
 800b752:	4630      	mov	r0, r6
 800b754:	f7ff fab2 	bl	800acbc <__swsetup_r>
 800b758:	b1c0      	cbz	r0, 800b78c <_vfiprintf_r+0x78>
 800b75a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b75c:	07dc      	lsls	r4, r3, #31
 800b75e:	d50e      	bpl.n	800b77e <_vfiprintf_r+0x6a>
 800b760:	f04f 30ff 	mov.w	r0, #4294967295
 800b764:	b01d      	add	sp, #116	; 0x74
 800b766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b76a:	4b7b      	ldr	r3, [pc, #492]	; (800b958 <_vfiprintf_r+0x244>)
 800b76c:	429d      	cmp	r5, r3
 800b76e:	d101      	bne.n	800b774 <_vfiprintf_r+0x60>
 800b770:	68b5      	ldr	r5, [r6, #8]
 800b772:	e7df      	b.n	800b734 <_vfiprintf_r+0x20>
 800b774:	4b79      	ldr	r3, [pc, #484]	; (800b95c <_vfiprintf_r+0x248>)
 800b776:	429d      	cmp	r5, r3
 800b778:	bf08      	it	eq
 800b77a:	68f5      	ldreq	r5, [r6, #12]
 800b77c:	e7da      	b.n	800b734 <_vfiprintf_r+0x20>
 800b77e:	89ab      	ldrh	r3, [r5, #12]
 800b780:	0598      	lsls	r0, r3, #22
 800b782:	d4ed      	bmi.n	800b760 <_vfiprintf_r+0x4c>
 800b784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b786:	f7ff fcf0 	bl	800b16a <__retarget_lock_release_recursive>
 800b78a:	e7e9      	b.n	800b760 <_vfiprintf_r+0x4c>
 800b78c:	2300      	movs	r3, #0
 800b78e:	9309      	str	r3, [sp, #36]	; 0x24
 800b790:	2320      	movs	r3, #32
 800b792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b796:	f8cd 800c 	str.w	r8, [sp, #12]
 800b79a:	2330      	movs	r3, #48	; 0x30
 800b79c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b960 <_vfiprintf_r+0x24c>
 800b7a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7a4:	f04f 0901 	mov.w	r9, #1
 800b7a8:	4623      	mov	r3, r4
 800b7aa:	469a      	mov	sl, r3
 800b7ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7b0:	b10a      	cbz	r2, 800b7b6 <_vfiprintf_r+0xa2>
 800b7b2:	2a25      	cmp	r2, #37	; 0x25
 800b7b4:	d1f9      	bne.n	800b7aa <_vfiprintf_r+0x96>
 800b7b6:	ebba 0b04 	subs.w	fp, sl, r4
 800b7ba:	d00b      	beq.n	800b7d4 <_vfiprintf_r+0xc0>
 800b7bc:	465b      	mov	r3, fp
 800b7be:	4622      	mov	r2, r4
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f7ff ff93 	bl	800b6ee <__sfputs_r>
 800b7c8:	3001      	adds	r0, #1
 800b7ca:	f000 80aa 	beq.w	800b922 <_vfiprintf_r+0x20e>
 800b7ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7d0:	445a      	add	r2, fp
 800b7d2:	9209      	str	r2, [sp, #36]	; 0x24
 800b7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f000 80a2 	beq.w	800b922 <_vfiprintf_r+0x20e>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7e8:	f10a 0a01 	add.w	sl, sl, #1
 800b7ec:	9304      	str	r3, [sp, #16]
 800b7ee:	9307      	str	r3, [sp, #28]
 800b7f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7f4:	931a      	str	r3, [sp, #104]	; 0x68
 800b7f6:	4654      	mov	r4, sl
 800b7f8:	2205      	movs	r2, #5
 800b7fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7fe:	4858      	ldr	r0, [pc, #352]	; (800b960 <_vfiprintf_r+0x24c>)
 800b800:	f7f4 fcee 	bl	80001e0 <memchr>
 800b804:	9a04      	ldr	r2, [sp, #16]
 800b806:	b9d8      	cbnz	r0, 800b840 <_vfiprintf_r+0x12c>
 800b808:	06d1      	lsls	r1, r2, #27
 800b80a:	bf44      	itt	mi
 800b80c:	2320      	movmi	r3, #32
 800b80e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b812:	0713      	lsls	r3, r2, #28
 800b814:	bf44      	itt	mi
 800b816:	232b      	movmi	r3, #43	; 0x2b
 800b818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b81c:	f89a 3000 	ldrb.w	r3, [sl]
 800b820:	2b2a      	cmp	r3, #42	; 0x2a
 800b822:	d015      	beq.n	800b850 <_vfiprintf_r+0x13c>
 800b824:	9a07      	ldr	r2, [sp, #28]
 800b826:	4654      	mov	r4, sl
 800b828:	2000      	movs	r0, #0
 800b82a:	f04f 0c0a 	mov.w	ip, #10
 800b82e:	4621      	mov	r1, r4
 800b830:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b834:	3b30      	subs	r3, #48	; 0x30
 800b836:	2b09      	cmp	r3, #9
 800b838:	d94e      	bls.n	800b8d8 <_vfiprintf_r+0x1c4>
 800b83a:	b1b0      	cbz	r0, 800b86a <_vfiprintf_r+0x156>
 800b83c:	9207      	str	r2, [sp, #28]
 800b83e:	e014      	b.n	800b86a <_vfiprintf_r+0x156>
 800b840:	eba0 0308 	sub.w	r3, r0, r8
 800b844:	fa09 f303 	lsl.w	r3, r9, r3
 800b848:	4313      	orrs	r3, r2
 800b84a:	9304      	str	r3, [sp, #16]
 800b84c:	46a2      	mov	sl, r4
 800b84e:	e7d2      	b.n	800b7f6 <_vfiprintf_r+0xe2>
 800b850:	9b03      	ldr	r3, [sp, #12]
 800b852:	1d19      	adds	r1, r3, #4
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	9103      	str	r1, [sp, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	bfbb      	ittet	lt
 800b85c:	425b      	neglt	r3, r3
 800b85e:	f042 0202 	orrlt.w	r2, r2, #2
 800b862:	9307      	strge	r3, [sp, #28]
 800b864:	9307      	strlt	r3, [sp, #28]
 800b866:	bfb8      	it	lt
 800b868:	9204      	strlt	r2, [sp, #16]
 800b86a:	7823      	ldrb	r3, [r4, #0]
 800b86c:	2b2e      	cmp	r3, #46	; 0x2e
 800b86e:	d10c      	bne.n	800b88a <_vfiprintf_r+0x176>
 800b870:	7863      	ldrb	r3, [r4, #1]
 800b872:	2b2a      	cmp	r3, #42	; 0x2a
 800b874:	d135      	bne.n	800b8e2 <_vfiprintf_r+0x1ce>
 800b876:	9b03      	ldr	r3, [sp, #12]
 800b878:	1d1a      	adds	r2, r3, #4
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	9203      	str	r2, [sp, #12]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	bfb8      	it	lt
 800b882:	f04f 33ff 	movlt.w	r3, #4294967295
 800b886:	3402      	adds	r4, #2
 800b888:	9305      	str	r3, [sp, #20]
 800b88a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b970 <_vfiprintf_r+0x25c>
 800b88e:	7821      	ldrb	r1, [r4, #0]
 800b890:	2203      	movs	r2, #3
 800b892:	4650      	mov	r0, sl
 800b894:	f7f4 fca4 	bl	80001e0 <memchr>
 800b898:	b140      	cbz	r0, 800b8ac <_vfiprintf_r+0x198>
 800b89a:	2340      	movs	r3, #64	; 0x40
 800b89c:	eba0 000a 	sub.w	r0, r0, sl
 800b8a0:	fa03 f000 	lsl.w	r0, r3, r0
 800b8a4:	9b04      	ldr	r3, [sp, #16]
 800b8a6:	4303      	orrs	r3, r0
 800b8a8:	3401      	adds	r4, #1
 800b8aa:	9304      	str	r3, [sp, #16]
 800b8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8b0:	482c      	ldr	r0, [pc, #176]	; (800b964 <_vfiprintf_r+0x250>)
 800b8b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8b6:	2206      	movs	r2, #6
 800b8b8:	f7f4 fc92 	bl	80001e0 <memchr>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d03f      	beq.n	800b940 <_vfiprintf_r+0x22c>
 800b8c0:	4b29      	ldr	r3, [pc, #164]	; (800b968 <_vfiprintf_r+0x254>)
 800b8c2:	bb1b      	cbnz	r3, 800b90c <_vfiprintf_r+0x1f8>
 800b8c4:	9b03      	ldr	r3, [sp, #12]
 800b8c6:	3307      	adds	r3, #7
 800b8c8:	f023 0307 	bic.w	r3, r3, #7
 800b8cc:	3308      	adds	r3, #8
 800b8ce:	9303      	str	r3, [sp, #12]
 800b8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8d2:	443b      	add	r3, r7
 800b8d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8d6:	e767      	b.n	800b7a8 <_vfiprintf_r+0x94>
 800b8d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8dc:	460c      	mov	r4, r1
 800b8de:	2001      	movs	r0, #1
 800b8e0:	e7a5      	b.n	800b82e <_vfiprintf_r+0x11a>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	3401      	adds	r4, #1
 800b8e6:	9305      	str	r3, [sp, #20]
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	f04f 0c0a 	mov.w	ip, #10
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8f4:	3a30      	subs	r2, #48	; 0x30
 800b8f6:	2a09      	cmp	r2, #9
 800b8f8:	d903      	bls.n	800b902 <_vfiprintf_r+0x1ee>
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d0c5      	beq.n	800b88a <_vfiprintf_r+0x176>
 800b8fe:	9105      	str	r1, [sp, #20]
 800b900:	e7c3      	b.n	800b88a <_vfiprintf_r+0x176>
 800b902:	fb0c 2101 	mla	r1, ip, r1, r2
 800b906:	4604      	mov	r4, r0
 800b908:	2301      	movs	r3, #1
 800b90a:	e7f0      	b.n	800b8ee <_vfiprintf_r+0x1da>
 800b90c:	ab03      	add	r3, sp, #12
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	462a      	mov	r2, r5
 800b912:	4b16      	ldr	r3, [pc, #88]	; (800b96c <_vfiprintf_r+0x258>)
 800b914:	a904      	add	r1, sp, #16
 800b916:	4630      	mov	r0, r6
 800b918:	f3af 8000 	nop.w
 800b91c:	4607      	mov	r7, r0
 800b91e:	1c78      	adds	r0, r7, #1
 800b920:	d1d6      	bne.n	800b8d0 <_vfiprintf_r+0x1bc>
 800b922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b924:	07d9      	lsls	r1, r3, #31
 800b926:	d405      	bmi.n	800b934 <_vfiprintf_r+0x220>
 800b928:	89ab      	ldrh	r3, [r5, #12]
 800b92a:	059a      	lsls	r2, r3, #22
 800b92c:	d402      	bmi.n	800b934 <_vfiprintf_r+0x220>
 800b92e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b930:	f7ff fc1b 	bl	800b16a <__retarget_lock_release_recursive>
 800b934:	89ab      	ldrh	r3, [r5, #12]
 800b936:	065b      	lsls	r3, r3, #25
 800b938:	f53f af12 	bmi.w	800b760 <_vfiprintf_r+0x4c>
 800b93c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b93e:	e711      	b.n	800b764 <_vfiprintf_r+0x50>
 800b940:	ab03      	add	r3, sp, #12
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	462a      	mov	r2, r5
 800b946:	4b09      	ldr	r3, [pc, #36]	; (800b96c <_vfiprintf_r+0x258>)
 800b948:	a904      	add	r1, sp, #16
 800b94a:	4630      	mov	r0, r6
 800b94c:	f000 f880 	bl	800ba50 <_printf_i>
 800b950:	e7e4      	b.n	800b91c <_vfiprintf_r+0x208>
 800b952:	bf00      	nop
 800b954:	0800ddb0 	.word	0x0800ddb0
 800b958:	0800ddd0 	.word	0x0800ddd0
 800b95c:	0800dd90 	.word	0x0800dd90
 800b960:	0800ddf0 	.word	0x0800ddf0
 800b964:	0800ddfa 	.word	0x0800ddfa
 800b968:	00000000 	.word	0x00000000
 800b96c:	0800b6ef 	.word	0x0800b6ef
 800b970:	0800ddf6 	.word	0x0800ddf6

0800b974 <_printf_common>:
 800b974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b978:	4616      	mov	r6, r2
 800b97a:	4699      	mov	r9, r3
 800b97c:	688a      	ldr	r2, [r1, #8]
 800b97e:	690b      	ldr	r3, [r1, #16]
 800b980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b984:	4293      	cmp	r3, r2
 800b986:	bfb8      	it	lt
 800b988:	4613      	movlt	r3, r2
 800b98a:	6033      	str	r3, [r6, #0]
 800b98c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b990:	4607      	mov	r7, r0
 800b992:	460c      	mov	r4, r1
 800b994:	b10a      	cbz	r2, 800b99a <_printf_common+0x26>
 800b996:	3301      	adds	r3, #1
 800b998:	6033      	str	r3, [r6, #0]
 800b99a:	6823      	ldr	r3, [r4, #0]
 800b99c:	0699      	lsls	r1, r3, #26
 800b99e:	bf42      	ittt	mi
 800b9a0:	6833      	ldrmi	r3, [r6, #0]
 800b9a2:	3302      	addmi	r3, #2
 800b9a4:	6033      	strmi	r3, [r6, #0]
 800b9a6:	6825      	ldr	r5, [r4, #0]
 800b9a8:	f015 0506 	ands.w	r5, r5, #6
 800b9ac:	d106      	bne.n	800b9bc <_printf_common+0x48>
 800b9ae:	f104 0a19 	add.w	sl, r4, #25
 800b9b2:	68e3      	ldr	r3, [r4, #12]
 800b9b4:	6832      	ldr	r2, [r6, #0]
 800b9b6:	1a9b      	subs	r3, r3, r2
 800b9b8:	42ab      	cmp	r3, r5
 800b9ba:	dc26      	bgt.n	800ba0a <_printf_common+0x96>
 800b9bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b9c0:	1e13      	subs	r3, r2, #0
 800b9c2:	6822      	ldr	r2, [r4, #0]
 800b9c4:	bf18      	it	ne
 800b9c6:	2301      	movne	r3, #1
 800b9c8:	0692      	lsls	r2, r2, #26
 800b9ca:	d42b      	bmi.n	800ba24 <_printf_common+0xb0>
 800b9cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b9d0:	4649      	mov	r1, r9
 800b9d2:	4638      	mov	r0, r7
 800b9d4:	47c0      	blx	r8
 800b9d6:	3001      	adds	r0, #1
 800b9d8:	d01e      	beq.n	800ba18 <_printf_common+0xa4>
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	68e5      	ldr	r5, [r4, #12]
 800b9de:	6832      	ldr	r2, [r6, #0]
 800b9e0:	f003 0306 	and.w	r3, r3, #6
 800b9e4:	2b04      	cmp	r3, #4
 800b9e6:	bf08      	it	eq
 800b9e8:	1aad      	subeq	r5, r5, r2
 800b9ea:	68a3      	ldr	r3, [r4, #8]
 800b9ec:	6922      	ldr	r2, [r4, #16]
 800b9ee:	bf0c      	ite	eq
 800b9f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9f4:	2500      	movne	r5, #0
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	bfc4      	itt	gt
 800b9fa:	1a9b      	subgt	r3, r3, r2
 800b9fc:	18ed      	addgt	r5, r5, r3
 800b9fe:	2600      	movs	r6, #0
 800ba00:	341a      	adds	r4, #26
 800ba02:	42b5      	cmp	r5, r6
 800ba04:	d11a      	bne.n	800ba3c <_printf_common+0xc8>
 800ba06:	2000      	movs	r0, #0
 800ba08:	e008      	b.n	800ba1c <_printf_common+0xa8>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	4652      	mov	r2, sl
 800ba0e:	4649      	mov	r1, r9
 800ba10:	4638      	mov	r0, r7
 800ba12:	47c0      	blx	r8
 800ba14:	3001      	adds	r0, #1
 800ba16:	d103      	bne.n	800ba20 <_printf_common+0xac>
 800ba18:	f04f 30ff 	mov.w	r0, #4294967295
 800ba1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba20:	3501      	adds	r5, #1
 800ba22:	e7c6      	b.n	800b9b2 <_printf_common+0x3e>
 800ba24:	18e1      	adds	r1, r4, r3
 800ba26:	1c5a      	adds	r2, r3, #1
 800ba28:	2030      	movs	r0, #48	; 0x30
 800ba2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba2e:	4422      	add	r2, r4
 800ba30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba38:	3302      	adds	r3, #2
 800ba3a:	e7c7      	b.n	800b9cc <_printf_common+0x58>
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	4622      	mov	r2, r4
 800ba40:	4649      	mov	r1, r9
 800ba42:	4638      	mov	r0, r7
 800ba44:	47c0      	blx	r8
 800ba46:	3001      	adds	r0, #1
 800ba48:	d0e6      	beq.n	800ba18 <_printf_common+0xa4>
 800ba4a:	3601      	adds	r6, #1
 800ba4c:	e7d9      	b.n	800ba02 <_printf_common+0x8e>
	...

0800ba50 <_printf_i>:
 800ba50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba54:	7e0f      	ldrb	r7, [r1, #24]
 800ba56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ba58:	2f78      	cmp	r7, #120	; 0x78
 800ba5a:	4691      	mov	r9, r2
 800ba5c:	4680      	mov	r8, r0
 800ba5e:	460c      	mov	r4, r1
 800ba60:	469a      	mov	sl, r3
 800ba62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ba66:	d807      	bhi.n	800ba78 <_printf_i+0x28>
 800ba68:	2f62      	cmp	r7, #98	; 0x62
 800ba6a:	d80a      	bhi.n	800ba82 <_printf_i+0x32>
 800ba6c:	2f00      	cmp	r7, #0
 800ba6e:	f000 80d8 	beq.w	800bc22 <_printf_i+0x1d2>
 800ba72:	2f58      	cmp	r7, #88	; 0x58
 800ba74:	f000 80a3 	beq.w	800bbbe <_printf_i+0x16e>
 800ba78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba80:	e03a      	b.n	800baf8 <_printf_i+0xa8>
 800ba82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba86:	2b15      	cmp	r3, #21
 800ba88:	d8f6      	bhi.n	800ba78 <_printf_i+0x28>
 800ba8a:	a101      	add	r1, pc, #4	; (adr r1, 800ba90 <_printf_i+0x40>)
 800ba8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba90:	0800bae9 	.word	0x0800bae9
 800ba94:	0800bafd 	.word	0x0800bafd
 800ba98:	0800ba79 	.word	0x0800ba79
 800ba9c:	0800ba79 	.word	0x0800ba79
 800baa0:	0800ba79 	.word	0x0800ba79
 800baa4:	0800ba79 	.word	0x0800ba79
 800baa8:	0800bafd 	.word	0x0800bafd
 800baac:	0800ba79 	.word	0x0800ba79
 800bab0:	0800ba79 	.word	0x0800ba79
 800bab4:	0800ba79 	.word	0x0800ba79
 800bab8:	0800ba79 	.word	0x0800ba79
 800babc:	0800bc09 	.word	0x0800bc09
 800bac0:	0800bb2d 	.word	0x0800bb2d
 800bac4:	0800bbeb 	.word	0x0800bbeb
 800bac8:	0800ba79 	.word	0x0800ba79
 800bacc:	0800ba79 	.word	0x0800ba79
 800bad0:	0800bc2b 	.word	0x0800bc2b
 800bad4:	0800ba79 	.word	0x0800ba79
 800bad8:	0800bb2d 	.word	0x0800bb2d
 800badc:	0800ba79 	.word	0x0800ba79
 800bae0:	0800ba79 	.word	0x0800ba79
 800bae4:	0800bbf3 	.word	0x0800bbf3
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	1d1a      	adds	r2, r3, #4
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	602a      	str	r2, [r5, #0]
 800baf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800baf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800baf8:	2301      	movs	r3, #1
 800bafa:	e0a3      	b.n	800bc44 <_printf_i+0x1f4>
 800bafc:	6820      	ldr	r0, [r4, #0]
 800bafe:	6829      	ldr	r1, [r5, #0]
 800bb00:	0606      	lsls	r6, r0, #24
 800bb02:	f101 0304 	add.w	r3, r1, #4
 800bb06:	d50a      	bpl.n	800bb1e <_printf_i+0xce>
 800bb08:	680e      	ldr	r6, [r1, #0]
 800bb0a:	602b      	str	r3, [r5, #0]
 800bb0c:	2e00      	cmp	r6, #0
 800bb0e:	da03      	bge.n	800bb18 <_printf_i+0xc8>
 800bb10:	232d      	movs	r3, #45	; 0x2d
 800bb12:	4276      	negs	r6, r6
 800bb14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb18:	485e      	ldr	r0, [pc, #376]	; (800bc94 <_printf_i+0x244>)
 800bb1a:	230a      	movs	r3, #10
 800bb1c:	e019      	b.n	800bb52 <_printf_i+0x102>
 800bb1e:	680e      	ldr	r6, [r1, #0]
 800bb20:	602b      	str	r3, [r5, #0]
 800bb22:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bb26:	bf18      	it	ne
 800bb28:	b236      	sxthne	r6, r6
 800bb2a:	e7ef      	b.n	800bb0c <_printf_i+0xbc>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	6820      	ldr	r0, [r4, #0]
 800bb30:	1d19      	adds	r1, r3, #4
 800bb32:	6029      	str	r1, [r5, #0]
 800bb34:	0601      	lsls	r1, r0, #24
 800bb36:	d501      	bpl.n	800bb3c <_printf_i+0xec>
 800bb38:	681e      	ldr	r6, [r3, #0]
 800bb3a:	e002      	b.n	800bb42 <_printf_i+0xf2>
 800bb3c:	0646      	lsls	r6, r0, #25
 800bb3e:	d5fb      	bpl.n	800bb38 <_printf_i+0xe8>
 800bb40:	881e      	ldrh	r6, [r3, #0]
 800bb42:	4854      	ldr	r0, [pc, #336]	; (800bc94 <_printf_i+0x244>)
 800bb44:	2f6f      	cmp	r7, #111	; 0x6f
 800bb46:	bf0c      	ite	eq
 800bb48:	2308      	moveq	r3, #8
 800bb4a:	230a      	movne	r3, #10
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bb52:	6865      	ldr	r5, [r4, #4]
 800bb54:	60a5      	str	r5, [r4, #8]
 800bb56:	2d00      	cmp	r5, #0
 800bb58:	bfa2      	ittt	ge
 800bb5a:	6821      	ldrge	r1, [r4, #0]
 800bb5c:	f021 0104 	bicge.w	r1, r1, #4
 800bb60:	6021      	strge	r1, [r4, #0]
 800bb62:	b90e      	cbnz	r6, 800bb68 <_printf_i+0x118>
 800bb64:	2d00      	cmp	r5, #0
 800bb66:	d04d      	beq.n	800bc04 <_printf_i+0x1b4>
 800bb68:	4615      	mov	r5, r2
 800bb6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bb6e:	fb03 6711 	mls	r7, r3, r1, r6
 800bb72:	5dc7      	ldrb	r7, [r0, r7]
 800bb74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bb78:	4637      	mov	r7, r6
 800bb7a:	42bb      	cmp	r3, r7
 800bb7c:	460e      	mov	r6, r1
 800bb7e:	d9f4      	bls.n	800bb6a <_printf_i+0x11a>
 800bb80:	2b08      	cmp	r3, #8
 800bb82:	d10b      	bne.n	800bb9c <_printf_i+0x14c>
 800bb84:	6823      	ldr	r3, [r4, #0]
 800bb86:	07de      	lsls	r6, r3, #31
 800bb88:	d508      	bpl.n	800bb9c <_printf_i+0x14c>
 800bb8a:	6923      	ldr	r3, [r4, #16]
 800bb8c:	6861      	ldr	r1, [r4, #4]
 800bb8e:	4299      	cmp	r1, r3
 800bb90:	bfde      	ittt	le
 800bb92:	2330      	movle	r3, #48	; 0x30
 800bb94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bb98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bb9c:	1b52      	subs	r2, r2, r5
 800bb9e:	6122      	str	r2, [r4, #16]
 800bba0:	f8cd a000 	str.w	sl, [sp]
 800bba4:	464b      	mov	r3, r9
 800bba6:	aa03      	add	r2, sp, #12
 800bba8:	4621      	mov	r1, r4
 800bbaa:	4640      	mov	r0, r8
 800bbac:	f7ff fee2 	bl	800b974 <_printf_common>
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	d14c      	bne.n	800bc4e <_printf_i+0x1fe>
 800bbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb8:	b004      	add	sp, #16
 800bbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbbe:	4835      	ldr	r0, [pc, #212]	; (800bc94 <_printf_i+0x244>)
 800bbc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bbc4:	6829      	ldr	r1, [r5, #0]
 800bbc6:	6823      	ldr	r3, [r4, #0]
 800bbc8:	f851 6b04 	ldr.w	r6, [r1], #4
 800bbcc:	6029      	str	r1, [r5, #0]
 800bbce:	061d      	lsls	r5, r3, #24
 800bbd0:	d514      	bpl.n	800bbfc <_printf_i+0x1ac>
 800bbd2:	07df      	lsls	r7, r3, #31
 800bbd4:	bf44      	itt	mi
 800bbd6:	f043 0320 	orrmi.w	r3, r3, #32
 800bbda:	6023      	strmi	r3, [r4, #0]
 800bbdc:	b91e      	cbnz	r6, 800bbe6 <_printf_i+0x196>
 800bbde:	6823      	ldr	r3, [r4, #0]
 800bbe0:	f023 0320 	bic.w	r3, r3, #32
 800bbe4:	6023      	str	r3, [r4, #0]
 800bbe6:	2310      	movs	r3, #16
 800bbe8:	e7b0      	b.n	800bb4c <_printf_i+0xfc>
 800bbea:	6823      	ldr	r3, [r4, #0]
 800bbec:	f043 0320 	orr.w	r3, r3, #32
 800bbf0:	6023      	str	r3, [r4, #0]
 800bbf2:	2378      	movs	r3, #120	; 0x78
 800bbf4:	4828      	ldr	r0, [pc, #160]	; (800bc98 <_printf_i+0x248>)
 800bbf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bbfa:	e7e3      	b.n	800bbc4 <_printf_i+0x174>
 800bbfc:	0659      	lsls	r1, r3, #25
 800bbfe:	bf48      	it	mi
 800bc00:	b2b6      	uxthmi	r6, r6
 800bc02:	e7e6      	b.n	800bbd2 <_printf_i+0x182>
 800bc04:	4615      	mov	r5, r2
 800bc06:	e7bb      	b.n	800bb80 <_printf_i+0x130>
 800bc08:	682b      	ldr	r3, [r5, #0]
 800bc0a:	6826      	ldr	r6, [r4, #0]
 800bc0c:	6961      	ldr	r1, [r4, #20]
 800bc0e:	1d18      	adds	r0, r3, #4
 800bc10:	6028      	str	r0, [r5, #0]
 800bc12:	0635      	lsls	r5, r6, #24
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	d501      	bpl.n	800bc1c <_printf_i+0x1cc>
 800bc18:	6019      	str	r1, [r3, #0]
 800bc1a:	e002      	b.n	800bc22 <_printf_i+0x1d2>
 800bc1c:	0670      	lsls	r0, r6, #25
 800bc1e:	d5fb      	bpl.n	800bc18 <_printf_i+0x1c8>
 800bc20:	8019      	strh	r1, [r3, #0]
 800bc22:	2300      	movs	r3, #0
 800bc24:	6123      	str	r3, [r4, #16]
 800bc26:	4615      	mov	r5, r2
 800bc28:	e7ba      	b.n	800bba0 <_printf_i+0x150>
 800bc2a:	682b      	ldr	r3, [r5, #0]
 800bc2c:	1d1a      	adds	r2, r3, #4
 800bc2e:	602a      	str	r2, [r5, #0]
 800bc30:	681d      	ldr	r5, [r3, #0]
 800bc32:	6862      	ldr	r2, [r4, #4]
 800bc34:	2100      	movs	r1, #0
 800bc36:	4628      	mov	r0, r5
 800bc38:	f7f4 fad2 	bl	80001e0 <memchr>
 800bc3c:	b108      	cbz	r0, 800bc42 <_printf_i+0x1f2>
 800bc3e:	1b40      	subs	r0, r0, r5
 800bc40:	6060      	str	r0, [r4, #4]
 800bc42:	6863      	ldr	r3, [r4, #4]
 800bc44:	6123      	str	r3, [r4, #16]
 800bc46:	2300      	movs	r3, #0
 800bc48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc4c:	e7a8      	b.n	800bba0 <_printf_i+0x150>
 800bc4e:	6923      	ldr	r3, [r4, #16]
 800bc50:	462a      	mov	r2, r5
 800bc52:	4649      	mov	r1, r9
 800bc54:	4640      	mov	r0, r8
 800bc56:	47d0      	blx	sl
 800bc58:	3001      	adds	r0, #1
 800bc5a:	d0ab      	beq.n	800bbb4 <_printf_i+0x164>
 800bc5c:	6823      	ldr	r3, [r4, #0]
 800bc5e:	079b      	lsls	r3, r3, #30
 800bc60:	d413      	bmi.n	800bc8a <_printf_i+0x23a>
 800bc62:	68e0      	ldr	r0, [r4, #12]
 800bc64:	9b03      	ldr	r3, [sp, #12]
 800bc66:	4298      	cmp	r0, r3
 800bc68:	bfb8      	it	lt
 800bc6a:	4618      	movlt	r0, r3
 800bc6c:	e7a4      	b.n	800bbb8 <_printf_i+0x168>
 800bc6e:	2301      	movs	r3, #1
 800bc70:	4632      	mov	r2, r6
 800bc72:	4649      	mov	r1, r9
 800bc74:	4640      	mov	r0, r8
 800bc76:	47d0      	blx	sl
 800bc78:	3001      	adds	r0, #1
 800bc7a:	d09b      	beq.n	800bbb4 <_printf_i+0x164>
 800bc7c:	3501      	adds	r5, #1
 800bc7e:	68e3      	ldr	r3, [r4, #12]
 800bc80:	9903      	ldr	r1, [sp, #12]
 800bc82:	1a5b      	subs	r3, r3, r1
 800bc84:	42ab      	cmp	r3, r5
 800bc86:	dcf2      	bgt.n	800bc6e <_printf_i+0x21e>
 800bc88:	e7eb      	b.n	800bc62 <_printf_i+0x212>
 800bc8a:	2500      	movs	r5, #0
 800bc8c:	f104 0619 	add.w	r6, r4, #25
 800bc90:	e7f5      	b.n	800bc7e <_printf_i+0x22e>
 800bc92:	bf00      	nop
 800bc94:	0800de01 	.word	0x0800de01
 800bc98:	0800de12 	.word	0x0800de12

0800bc9c <_sbrk_r>:
 800bc9c:	b538      	push	{r3, r4, r5, lr}
 800bc9e:	4d06      	ldr	r5, [pc, #24]	; (800bcb8 <_sbrk_r+0x1c>)
 800bca0:	2300      	movs	r3, #0
 800bca2:	4604      	mov	r4, r0
 800bca4:	4608      	mov	r0, r1
 800bca6:	602b      	str	r3, [r5, #0]
 800bca8:	f7f8 ffc4 	bl	8004c34 <_sbrk>
 800bcac:	1c43      	adds	r3, r0, #1
 800bcae:	d102      	bne.n	800bcb6 <_sbrk_r+0x1a>
 800bcb0:	682b      	ldr	r3, [r5, #0]
 800bcb2:	b103      	cbz	r3, 800bcb6 <_sbrk_r+0x1a>
 800bcb4:	6023      	str	r3, [r4, #0]
 800bcb6:	bd38      	pop	{r3, r4, r5, pc}
 800bcb8:	20002a04 	.word	0x20002a04

0800bcbc <__sread>:
 800bcbc:	b510      	push	{r4, lr}
 800bcbe:	460c      	mov	r4, r1
 800bcc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcc4:	f000 f900 	bl	800bec8 <_read_r>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	bfab      	itete	ge
 800bccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcce:	89a3      	ldrhlt	r3, [r4, #12]
 800bcd0:	181b      	addge	r3, r3, r0
 800bcd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcd6:	bfac      	ite	ge
 800bcd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcda:	81a3      	strhlt	r3, [r4, #12]
 800bcdc:	bd10      	pop	{r4, pc}

0800bcde <__swrite>:
 800bcde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce2:	461f      	mov	r7, r3
 800bce4:	898b      	ldrh	r3, [r1, #12]
 800bce6:	05db      	lsls	r3, r3, #23
 800bce8:	4605      	mov	r5, r0
 800bcea:	460c      	mov	r4, r1
 800bcec:	4616      	mov	r6, r2
 800bcee:	d505      	bpl.n	800bcfc <__swrite+0x1e>
 800bcf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcf4:	2302      	movs	r3, #2
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f000 f870 	bl	800bddc <_lseek_r>
 800bcfc:	89a3      	ldrh	r3, [r4, #12]
 800bcfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd06:	81a3      	strh	r3, [r4, #12]
 800bd08:	4632      	mov	r2, r6
 800bd0a:	463b      	mov	r3, r7
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd12:	f000 b817 	b.w	800bd44 <_write_r>

0800bd16 <__sseek>:
 800bd16:	b510      	push	{r4, lr}
 800bd18:	460c      	mov	r4, r1
 800bd1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd1e:	f000 f85d 	bl	800bddc <_lseek_r>
 800bd22:	1c43      	adds	r3, r0, #1
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	bf15      	itete	ne
 800bd28:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd32:	81a3      	strheq	r3, [r4, #12]
 800bd34:	bf18      	it	ne
 800bd36:	81a3      	strhne	r3, [r4, #12]
 800bd38:	bd10      	pop	{r4, pc}

0800bd3a <__sclose>:
 800bd3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd3e:	f000 b81b 	b.w	800bd78 <_close_r>
	...

0800bd44 <_write_r>:
 800bd44:	b538      	push	{r3, r4, r5, lr}
 800bd46:	4d07      	ldr	r5, [pc, #28]	; (800bd64 <_write_r+0x20>)
 800bd48:	4604      	mov	r4, r0
 800bd4a:	4608      	mov	r0, r1
 800bd4c:	4611      	mov	r1, r2
 800bd4e:	2200      	movs	r2, #0
 800bd50:	602a      	str	r2, [r5, #0]
 800bd52:	461a      	mov	r2, r3
 800bd54:	f7f6 fb40 	bl	80023d8 <_write>
 800bd58:	1c43      	adds	r3, r0, #1
 800bd5a:	d102      	bne.n	800bd62 <_write_r+0x1e>
 800bd5c:	682b      	ldr	r3, [r5, #0]
 800bd5e:	b103      	cbz	r3, 800bd62 <_write_r+0x1e>
 800bd60:	6023      	str	r3, [r4, #0]
 800bd62:	bd38      	pop	{r3, r4, r5, pc}
 800bd64:	20002a04 	.word	0x20002a04

0800bd68 <abort>:
 800bd68:	b508      	push	{r3, lr}
 800bd6a:	2006      	movs	r0, #6
 800bd6c:	f000 f8e6 	bl	800bf3c <raise>
 800bd70:	2001      	movs	r0, #1
 800bd72:	f7f8 ff03 	bl	8004b7c <_exit>
	...

0800bd78 <_close_r>:
 800bd78:	b538      	push	{r3, r4, r5, lr}
 800bd7a:	4d06      	ldr	r5, [pc, #24]	; (800bd94 <_close_r+0x1c>)
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	4604      	mov	r4, r0
 800bd80:	4608      	mov	r0, r1
 800bd82:	602b      	str	r3, [r5, #0]
 800bd84:	f7f8 ff21 	bl	8004bca <_close>
 800bd88:	1c43      	adds	r3, r0, #1
 800bd8a:	d102      	bne.n	800bd92 <_close_r+0x1a>
 800bd8c:	682b      	ldr	r3, [r5, #0]
 800bd8e:	b103      	cbz	r3, 800bd92 <_close_r+0x1a>
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	bd38      	pop	{r3, r4, r5, pc}
 800bd94:	20002a04 	.word	0x20002a04

0800bd98 <_fstat_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	4d07      	ldr	r5, [pc, #28]	; (800bdb8 <_fstat_r+0x20>)
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	4604      	mov	r4, r0
 800bda0:	4608      	mov	r0, r1
 800bda2:	4611      	mov	r1, r2
 800bda4:	602b      	str	r3, [r5, #0]
 800bda6:	f7f8 ff1c 	bl	8004be2 <_fstat>
 800bdaa:	1c43      	adds	r3, r0, #1
 800bdac:	d102      	bne.n	800bdb4 <_fstat_r+0x1c>
 800bdae:	682b      	ldr	r3, [r5, #0]
 800bdb0:	b103      	cbz	r3, 800bdb4 <_fstat_r+0x1c>
 800bdb2:	6023      	str	r3, [r4, #0]
 800bdb4:	bd38      	pop	{r3, r4, r5, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20002a04 	.word	0x20002a04

0800bdbc <_isatty_r>:
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	4d06      	ldr	r5, [pc, #24]	; (800bdd8 <_isatty_r+0x1c>)
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	4608      	mov	r0, r1
 800bdc6:	602b      	str	r3, [r5, #0]
 800bdc8:	f7f8 ff1b 	bl	8004c02 <_isatty>
 800bdcc:	1c43      	adds	r3, r0, #1
 800bdce:	d102      	bne.n	800bdd6 <_isatty_r+0x1a>
 800bdd0:	682b      	ldr	r3, [r5, #0]
 800bdd2:	b103      	cbz	r3, 800bdd6 <_isatty_r+0x1a>
 800bdd4:	6023      	str	r3, [r4, #0]
 800bdd6:	bd38      	pop	{r3, r4, r5, pc}
 800bdd8:	20002a04 	.word	0x20002a04

0800bddc <_lseek_r>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	4d07      	ldr	r5, [pc, #28]	; (800bdfc <_lseek_r+0x20>)
 800bde0:	4604      	mov	r4, r0
 800bde2:	4608      	mov	r0, r1
 800bde4:	4611      	mov	r1, r2
 800bde6:	2200      	movs	r2, #0
 800bde8:	602a      	str	r2, [r5, #0]
 800bdea:	461a      	mov	r2, r3
 800bdec:	f7f8 ff14 	bl	8004c18 <_lseek>
 800bdf0:	1c43      	adds	r3, r0, #1
 800bdf2:	d102      	bne.n	800bdfa <_lseek_r+0x1e>
 800bdf4:	682b      	ldr	r3, [r5, #0]
 800bdf6:	b103      	cbz	r3, 800bdfa <_lseek_r+0x1e>
 800bdf8:	6023      	str	r3, [r4, #0]
 800bdfa:	bd38      	pop	{r3, r4, r5, pc}
 800bdfc:	20002a04 	.word	0x20002a04

0800be00 <memcpy>:
 800be00:	440a      	add	r2, r1
 800be02:	4291      	cmp	r1, r2
 800be04:	f100 33ff 	add.w	r3, r0, #4294967295
 800be08:	d100      	bne.n	800be0c <memcpy+0xc>
 800be0a:	4770      	bx	lr
 800be0c:	b510      	push	{r4, lr}
 800be0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be16:	4291      	cmp	r1, r2
 800be18:	d1f9      	bne.n	800be0e <memcpy+0xe>
 800be1a:	bd10      	pop	{r4, pc}

0800be1c <memmove>:
 800be1c:	4288      	cmp	r0, r1
 800be1e:	b510      	push	{r4, lr}
 800be20:	eb01 0402 	add.w	r4, r1, r2
 800be24:	d902      	bls.n	800be2c <memmove+0x10>
 800be26:	4284      	cmp	r4, r0
 800be28:	4623      	mov	r3, r4
 800be2a:	d807      	bhi.n	800be3c <memmove+0x20>
 800be2c:	1e43      	subs	r3, r0, #1
 800be2e:	42a1      	cmp	r1, r4
 800be30:	d008      	beq.n	800be44 <memmove+0x28>
 800be32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be3a:	e7f8      	b.n	800be2e <memmove+0x12>
 800be3c:	4402      	add	r2, r0
 800be3e:	4601      	mov	r1, r0
 800be40:	428a      	cmp	r2, r1
 800be42:	d100      	bne.n	800be46 <memmove+0x2a>
 800be44:	bd10      	pop	{r4, pc}
 800be46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be4e:	e7f7      	b.n	800be40 <memmove+0x24>

0800be50 <__malloc_lock>:
 800be50:	4801      	ldr	r0, [pc, #4]	; (800be58 <__malloc_lock+0x8>)
 800be52:	f7ff b989 	b.w	800b168 <__retarget_lock_acquire_recursive>
 800be56:	bf00      	nop
 800be58:	200029f8 	.word	0x200029f8

0800be5c <__malloc_unlock>:
 800be5c:	4801      	ldr	r0, [pc, #4]	; (800be64 <__malloc_unlock+0x8>)
 800be5e:	f7ff b984 	b.w	800b16a <__retarget_lock_release_recursive>
 800be62:	bf00      	nop
 800be64:	200029f8 	.word	0x200029f8

0800be68 <_realloc_r>:
 800be68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be6c:	4680      	mov	r8, r0
 800be6e:	4614      	mov	r4, r2
 800be70:	460e      	mov	r6, r1
 800be72:	b921      	cbnz	r1, 800be7e <_realloc_r+0x16>
 800be74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be78:	4611      	mov	r1, r2
 800be7a:	f7ff ba51 	b.w	800b320 <_malloc_r>
 800be7e:	b92a      	cbnz	r2, 800be8c <_realloc_r+0x24>
 800be80:	f7ff f9e2 	bl	800b248 <_free_r>
 800be84:	4625      	mov	r5, r4
 800be86:	4628      	mov	r0, r5
 800be88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be8c:	f000 f872 	bl	800bf74 <_malloc_usable_size_r>
 800be90:	4284      	cmp	r4, r0
 800be92:	4607      	mov	r7, r0
 800be94:	d802      	bhi.n	800be9c <_realloc_r+0x34>
 800be96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be9a:	d812      	bhi.n	800bec2 <_realloc_r+0x5a>
 800be9c:	4621      	mov	r1, r4
 800be9e:	4640      	mov	r0, r8
 800bea0:	f7ff fa3e 	bl	800b320 <_malloc_r>
 800bea4:	4605      	mov	r5, r0
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d0ed      	beq.n	800be86 <_realloc_r+0x1e>
 800beaa:	42bc      	cmp	r4, r7
 800beac:	4622      	mov	r2, r4
 800beae:	4631      	mov	r1, r6
 800beb0:	bf28      	it	cs
 800beb2:	463a      	movcs	r2, r7
 800beb4:	f7ff ffa4 	bl	800be00 <memcpy>
 800beb8:	4631      	mov	r1, r6
 800beba:	4640      	mov	r0, r8
 800bebc:	f7ff f9c4 	bl	800b248 <_free_r>
 800bec0:	e7e1      	b.n	800be86 <_realloc_r+0x1e>
 800bec2:	4635      	mov	r5, r6
 800bec4:	e7df      	b.n	800be86 <_realloc_r+0x1e>
	...

0800bec8 <_read_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	4d07      	ldr	r5, [pc, #28]	; (800bee8 <_read_r+0x20>)
 800becc:	4604      	mov	r4, r0
 800bece:	4608      	mov	r0, r1
 800bed0:	4611      	mov	r1, r2
 800bed2:	2200      	movs	r2, #0
 800bed4:	602a      	str	r2, [r5, #0]
 800bed6:	461a      	mov	r2, r3
 800bed8:	f7f8 fe5a 	bl	8004b90 <_read>
 800bedc:	1c43      	adds	r3, r0, #1
 800bede:	d102      	bne.n	800bee6 <_read_r+0x1e>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	b103      	cbz	r3, 800bee6 <_read_r+0x1e>
 800bee4:	6023      	str	r3, [r4, #0]
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	20002a04 	.word	0x20002a04

0800beec <_raise_r>:
 800beec:	291f      	cmp	r1, #31
 800beee:	b538      	push	{r3, r4, r5, lr}
 800bef0:	4604      	mov	r4, r0
 800bef2:	460d      	mov	r5, r1
 800bef4:	d904      	bls.n	800bf00 <_raise_r+0x14>
 800bef6:	2316      	movs	r3, #22
 800bef8:	6003      	str	r3, [r0, #0]
 800befa:	f04f 30ff 	mov.w	r0, #4294967295
 800befe:	bd38      	pop	{r3, r4, r5, pc}
 800bf00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bf02:	b112      	cbz	r2, 800bf0a <_raise_r+0x1e>
 800bf04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf08:	b94b      	cbnz	r3, 800bf1e <_raise_r+0x32>
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f000 f830 	bl	800bf70 <_getpid_r>
 800bf10:	462a      	mov	r2, r5
 800bf12:	4601      	mov	r1, r0
 800bf14:	4620      	mov	r0, r4
 800bf16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf1a:	f000 b817 	b.w	800bf4c <_kill_r>
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d00a      	beq.n	800bf38 <_raise_r+0x4c>
 800bf22:	1c59      	adds	r1, r3, #1
 800bf24:	d103      	bne.n	800bf2e <_raise_r+0x42>
 800bf26:	2316      	movs	r3, #22
 800bf28:	6003      	str	r3, [r0, #0]
 800bf2a:	2001      	movs	r0, #1
 800bf2c:	e7e7      	b.n	800befe <_raise_r+0x12>
 800bf2e:	2400      	movs	r4, #0
 800bf30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf34:	4628      	mov	r0, r5
 800bf36:	4798      	blx	r3
 800bf38:	2000      	movs	r0, #0
 800bf3a:	e7e0      	b.n	800befe <_raise_r+0x12>

0800bf3c <raise>:
 800bf3c:	4b02      	ldr	r3, [pc, #8]	; (800bf48 <raise+0xc>)
 800bf3e:	4601      	mov	r1, r0
 800bf40:	6818      	ldr	r0, [r3, #0]
 800bf42:	f7ff bfd3 	b.w	800beec <_raise_r>
 800bf46:	bf00      	nop
 800bf48:	20000068 	.word	0x20000068

0800bf4c <_kill_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4d07      	ldr	r5, [pc, #28]	; (800bf6c <_kill_r+0x20>)
 800bf50:	2300      	movs	r3, #0
 800bf52:	4604      	mov	r4, r0
 800bf54:	4608      	mov	r0, r1
 800bf56:	4611      	mov	r1, r2
 800bf58:	602b      	str	r3, [r5, #0]
 800bf5a:	f7f8 fdff 	bl	8004b5c <_kill>
 800bf5e:	1c43      	adds	r3, r0, #1
 800bf60:	d102      	bne.n	800bf68 <_kill_r+0x1c>
 800bf62:	682b      	ldr	r3, [r5, #0]
 800bf64:	b103      	cbz	r3, 800bf68 <_kill_r+0x1c>
 800bf66:	6023      	str	r3, [r4, #0]
 800bf68:	bd38      	pop	{r3, r4, r5, pc}
 800bf6a:	bf00      	nop
 800bf6c:	20002a04 	.word	0x20002a04

0800bf70 <_getpid_r>:
 800bf70:	f7f8 bdec 	b.w	8004b4c <_getpid>

0800bf74 <_malloc_usable_size_r>:
 800bf74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf78:	1f18      	subs	r0, r3, #4
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	bfbc      	itt	lt
 800bf7e:	580b      	ldrlt	r3, [r1, r0]
 800bf80:	18c0      	addlt	r0, r0, r3
 800bf82:	4770      	bx	lr

0800bf84 <_init>:
 800bf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf86:	bf00      	nop
 800bf88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf8a:	bc08      	pop	{r3}
 800bf8c:	469e      	mov	lr, r3
 800bf8e:	4770      	bx	lr

0800bf90 <_fini>:
 800bf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf92:	bf00      	nop
 800bf94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf96:	bc08      	pop	{r3}
 800bf98:	469e      	mov	lr, r3
 800bf9a:	4770      	bx	lr
