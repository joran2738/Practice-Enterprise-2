
PE2_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08007bb8  08007bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007df8  08007df8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08007df8  08007df8  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007df8  08007df8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df8  08007df8  00017df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dfc  08007dfc  00017dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015c8  2000008c  08007e8c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001654  08007e8c  00021654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111f2  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274b  00000000  00000000  000312ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00033a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  000348c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017580  00000000  00000000  00035668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c69  00000000  00000000  0004cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085b36  00000000  00000000  00061851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7387  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a8  00000000  00000000  000e73d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ba0 	.word	0x08007ba0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08007ba0 	.word	0x08007ba0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <init>:
uint8_t gamechoice = 0;
extern uint8_t play;
char str[12];


void init (void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
    choice = 0;
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <init+0x5c>)
 8000278:	2200      	movs	r2, #0
 800027a:	701a      	strb	r2, [r3, #0]
    for(int x = 0; x < SCREEN_WIDTH; x++){
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	e016      	b.n	80002b0 <init+0x40>
        for(int y = 0; y < SCREEN_HEIGHT; y++){
 8000282:	2300      	movs	r3, #0
 8000284:	603b      	str	r3, [r7, #0]
 8000286:	e00d      	b.n	80002a4 <init+0x34>
            game_screen[x][y] = ENC_DARK_GRAY;
 8000288:	4911      	ldr	r1, [pc, #68]	; (80002d0 <init+0x60>)
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	4613      	mov	r3, r2
 800028e:	011b      	lsls	r3, r3, #4
 8000290:	1a9b      	subs	r3, r3, r2
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	18ca      	adds	r2, r1, r3
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	4413      	add	r3, r2
 800029a:	2206      	movs	r2, #6
 800029c:	701a      	strb	r2, [r3, #0]
        for(int y = 0; y < SCREEN_HEIGHT; y++){
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	2b3b      	cmp	r3, #59	; 0x3b
 80002a8:	ddee      	ble.n	8000288 <init+0x18>
    for(int x = 0; x < SCREEN_WIDTH; x++){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	3301      	adds	r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b4f      	cmp	r3, #79	; 0x4f
 80002b4:	dde5      	ble.n	8000282 <init+0x12>
        }
    }
    if(gamechoice == 1){
 80002b6:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <init+0x64>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d101      	bne.n	80002c2 <init+0x52>
        initSpaceInvaders();
 80002be:	f000 fe4f 	bl	8000f60 <initSpaceInvaders>
    }else{
        //nothing yet, your init
    }


}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20001369 	.word	0x20001369
 80002d0:	200000a8 	.word	0x200000a8
 80002d4:	2000136a 	.word	0x2000136a

080002d8 <loop>:

int loop (int key) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
    updateScreen();
 80002e0:	f000 f8de 	bl	80004a0 <updateScreen>
    if (play == menu){
 80002e4:	4b68      	ldr	r3, [pc, #416]	; (8000488 <loop+0x1b0>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b03      	cmp	r3, #3
 80002ea:	d104      	bne.n	80002f6 <loop+0x1e>
        max_choice = total_games;
 80002ec:	4b67      	ldr	r3, [pc, #412]	; (800048c <loop+0x1b4>)
 80002ee:	781a      	ldrb	r2, [r3, #0]
 80002f0:	4b67      	ldr	r3, [pc, #412]	; (8000490 <loop+0x1b8>)
 80002f2:	701a      	strb	r2, [r3, #0]
 80002f4:	e002      	b.n	80002fc <loop+0x24>
    }else{
        max_choice = 1;
 80002f6:	4b66      	ldr	r3, [pc, #408]	; (8000490 <loop+0x1b8>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	701a      	strb	r2, [r3, #0]
    }
    if(key == left) {
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d119      	bne.n	8000336 <loop+0x5e>
        if(play < paused){
 8000302:	4b61      	ldr	r3, [pc, #388]	; (8000488 <loop+0x1b0>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d804      	bhi.n	8000314 <loop+0x3c>
            moveSpaceship(-1);
 800030a:	f04f 30ff 	mov.w	r0, #4294967295
 800030e:	f001 fac1 	bl	8001894 <moveSpaceship>
 8000312:	e00e      	b.n	8000332 <loop+0x5a>
        }else{
            if (choice == 0){
 8000314:	4b5f      	ldr	r3, [pc, #380]	; (8000494 <loop+0x1bc>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d104      	bne.n	8000326 <loop+0x4e>
                choice = max_choice;
 800031c:	4b5c      	ldr	r3, [pc, #368]	; (8000490 <loop+0x1b8>)
 800031e:	781a      	ldrb	r2, [r3, #0]
 8000320:	4b5c      	ldr	r3, [pc, #368]	; (8000494 <loop+0x1bc>)
 8000322:	701a      	strb	r2, [r3, #0]
 8000324:	e005      	b.n	8000332 <loop+0x5a>
            }else{
                choice--;
 8000326:	4b5b      	ldr	r3, [pc, #364]	; (8000494 <loop+0x1bc>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	3b01      	subs	r3, #1
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4b59      	ldr	r3, [pc, #356]	; (8000494 <loop+0x1bc>)
 8000330:	701a      	strb	r2, [r3, #0]
            }
            //QD << choice; // change to uart debug
        }
        key = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	607b      	str	r3, [r7, #4]
    }
    if(key == right) {
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b03      	cmp	r3, #3
 800033a:	d119      	bne.n	8000370 <loop+0x98>
        if(play < paused){
 800033c:	4b52      	ldr	r3, [pc, #328]	; (8000488 <loop+0x1b0>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d803      	bhi.n	800034c <loop+0x74>
            moveSpaceship(1);
 8000344:	2001      	movs	r0, #1
 8000346:	f001 faa5 	bl	8001894 <moveSpaceship>
 800034a:	e00f      	b.n	800036c <loop+0x94>
        }else{
            if (choice == max_choice){
 800034c:	4b51      	ldr	r3, [pc, #324]	; (8000494 <loop+0x1bc>)
 800034e:	781a      	ldrb	r2, [r3, #0]
 8000350:	4b4f      	ldr	r3, [pc, #316]	; (8000490 <loop+0x1b8>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	429a      	cmp	r2, r3
 8000356:	d103      	bne.n	8000360 <loop+0x88>
                choice = 0;
 8000358:	4b4e      	ldr	r3, [pc, #312]	; (8000494 <loop+0x1bc>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
 800035e:	e005      	b.n	800036c <loop+0x94>
            }else{
                choice++;
 8000360:	4b4c      	ldr	r3, [pc, #304]	; (8000494 <loop+0x1bc>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	b2da      	uxtb	r2, r3
 8000368:	4b4a      	ldr	r3, [pc, #296]	; (8000494 <loop+0x1bc>)
 800036a:	701a      	strb	r2, [r3, #0]
            }
            //QD << choice; // change to uart debug
        }
        key = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	607b      	str	r3, [r7, #4]
    }
    if(key == down){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2b04      	cmp	r3, #4
 8000374:	d153      	bne.n	800041e <loop+0x146>
        if (play == notPlay){
 8000376:	4b44      	ldr	r3, [pc, #272]	; (8000488 <loop+0x1b0>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d103      	bne.n	8000386 <loop+0xae>
            play = inPlay;
 800037e:	4b42      	ldr	r3, [pc, #264]	; (8000488 <loop+0x1b0>)
 8000380:	2201      	movs	r2, #1
 8000382:	701a      	strb	r2, [r3, #0]
 8000384:	e049      	b.n	800041a <loop+0x142>
        }else if(play == paused){
 8000386:	4b40      	ldr	r3, [pc, #256]	; (8000488 <loop+0x1b0>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b02      	cmp	r3, #2
 800038c:	d118      	bne.n	80003c0 <loop+0xe8>
            if(choice == 0){
 800038e:	4b41      	ldr	r3, [pc, #260]	; (8000494 <loop+0x1bc>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d105      	bne.n	80003a2 <loop+0xca>
                //QD << "return"; // change to uart debug
                play = menu;
 8000396:	4b3c      	ldr	r3, [pc, #240]	; (8000488 <loop+0x1b0>)
 8000398:	2203      	movs	r2, #3
 800039a:	701a      	strb	r2, [r3, #0]
                init();
 800039c:	f7ff ff68 	bl	8000270 <init>
 80003a0:	e03b      	b.n	800041a <loop+0x142>
            }
            else if(choice == 1){
 80003a2:	4b3c      	ldr	r3, [pc, #240]	; (8000494 <loop+0x1bc>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d106      	bne.n	80003b8 <loop+0xe0>
                //QD << "play on";  // change to uart debug
            	displayPauseMenu(1);
 80003aa:	2001      	movs	r0, #1
 80003ac:	f000 fc3e 	bl	8000c2c <displayPauseMenu>
                play = inPlay;
 80003b0:	4b35      	ldr	r3, [pc, #212]	; (8000488 <loop+0x1b0>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	701a      	strb	r2, [r3, #0]
 80003b6:	e030      	b.n	800041a <loop+0x142>
            }else{
                displayPauseMenu(0);
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 fc37 	bl	8000c2c <displayPauseMenu>
 80003be:	e02c      	b.n	800041a <loop+0x142>
            }

        }else if(play == menu){
 80003c0:	4b31      	ldr	r3, [pc, #196]	; (8000488 <loop+0x1b0>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d121      	bne.n	800040c <loop+0x134>
            if(choice == 0){
 80003c8:	4b32      	ldr	r3, [pc, #200]	; (8000494 <loop+0x1bc>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d102      	bne.n	80003d6 <loop+0xfe>
                toggle_multiplayer();
 80003d0:	f000 fdb6 	bl	8000f40 <toggle_multiplayer>
 80003d4:	e021      	b.n	800041a <loop+0x142>
            }else if(choice == 1){
 80003d6:	4b2f      	ldr	r3, [pc, #188]	; (8000494 <loop+0x1bc>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d106      	bne.n	80003ec <loop+0x114>
                gamechoice = 0;
 80003de:	4b2e      	ldr	r3, [pc, #184]	; (8000498 <loop+0x1c0>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80003e4:	4b28      	ldr	r3, [pc, #160]	; (8000488 <loop+0x1b0>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
 80003ea:	e016      	b.n	800041a <loop+0x142>
            }
            else if(choice == 2){
 80003ec:	4b29      	ldr	r3, [pc, #164]	; (8000494 <loop+0x1bc>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b02      	cmp	r3, #2
 80003f2:	d108      	bne.n	8000406 <loop+0x12e>
                gamechoice = 1;
 80003f4:	4b28      	ldr	r3, [pc, #160]	; (8000498 <loop+0x1c0>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80003fa:	4b23      	ldr	r3, [pc, #140]	; (8000488 <loop+0x1b0>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]

                init();
 8000400:	f7ff ff36 	bl	8000270 <init>
 8000404:	e009      	b.n	800041a <loop+0x142>
            }else{
                displayMenu();
 8000406:	f000 fc53 	bl	8000cb0 <displayMenu>
 800040a:	e006      	b.n	800041a <loop+0x142>
            }
        }
        else if(!hit){
 800040c:	4b23      	ldr	r3, [pc, #140]	; (800049c <loop+0x1c4>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d102      	bne.n	800041a <loop+0x142>
            spawnBullet(0);
 8000414:	2000      	movs	r0, #0
 8000416:	f000 fef5 	bl	8001204 <spawnBullet>
        }
        key = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
    }
    if(key == up && play < 2){
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2b02      	cmp	r3, #2
 8000422:	d10b      	bne.n	800043c <loop+0x164>
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <loop+0x1b0>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d807      	bhi.n	800043c <loop+0x164>
        play = paused;
 800042c:	4b16      	ldr	r3, [pc, #88]	; (8000488 <loop+0x1b0>)
 800042e:	2202      	movs	r2, #2
 8000430:	701a      	strb	r2, [r3, #0]
        choice = 1;
 8000432:	4b18      	ldr	r3, [pc, #96]	; (8000494 <loop+0x1bc>)
 8000434:	2201      	movs	r2, #1
 8000436:	701a      	strb	r2, [r3, #0]
        key = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	607b      	str	r3, [r7, #4]
    }

    if(play == inPlay){
 800043c:	4b12      	ldr	r3, [pc, #72]	; (8000488 <loop+0x1b0>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d10f      	bne.n	8000464 <loop+0x18c>
    	if(gamechoice == 1){
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <loop+0x1c0>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d109      	bne.n	8000460 <loop+0x188>
    		spawnComet();
 800044c:	f000 fe4e 	bl	80010ec <spawnComet>
    		delayBullet();
 8000450:	f001 fca4 	bl	8001d9c <delayBullet>
    		moveComets();
 8000454:	f001 f904 	bl	8001660 <moveComets>
    		moveBullets();
 8000458:	f000 ff86 	bl	8001368 <moveBullets>
    		moveEnemyBullets();
 800045c:	f001 f840 	bl	80014e0 <moveEnemyBullets>
    	}

    	updateScreen();
 8000460:	f000 f81e 	bl	80004a0 <updateScreen>
    }if(play < paused){
 8000464:	4b08      	ldr	r3, [pc, #32]	; (8000488 <loop+0x1b0>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d807      	bhi.n	800047c <loop+0x1a4>
    	if(gamechoice == 1){
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <loop+0x1c0>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d103      	bne.n	800047c <loop+0x1a4>
    		spawnStar();
 8000474:	f000 ff1a 	bl	80012ac <spawnStar>
    		moveStars();
 8000478:	f001 f9aa 	bl	80017d0 <moveStars>
    	}

    }
    return key;
 800047c:	687b      	ldr	r3, [r7, #4]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	2000000b 	.word	0x2000000b
 800048c:	20000004 	.word	0x20000004
 8000490:	20000000 	.word	0x20000000
 8000494:	20001369 	.word	0x20001369
 8000498:	2000136a 	.word	0x2000136a
 800049c:	20001368 	.word	0x20001368

080004a0 <updateScreen>:


void updateScreen()
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
    if (play == menu){
 80004a6:	4b23      	ldr	r3, [pc, #140]	; (8000534 <updateScreen+0x94>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b03      	cmp	r3, #3
 80004ac:	d102      	bne.n	80004b4 <updateScreen+0x14>
    	displayMenu();
 80004ae:	f000 fbff 	bl	8000cb0 <displayMenu>
        return;
 80004b2:	e03b      	b.n	800052c <updateScreen+0x8c>
    }

    //hit
    if (gamechoice == 1 && hit > 0){
 80004b4:	4b20      	ldr	r3, [pc, #128]	; (8000538 <updateScreen+0x98>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d105      	bne.n	80004c8 <updateScreen+0x28>
 80004bc:	4b1f      	ldr	r3, [pc, #124]	; (800053c <updateScreen+0x9c>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <updateScreen+0x28>
        spaceShipHitColorToggle();
 80004c4:	f001 fc20 	bl	8001d08 <spaceShipHitColorToggle>
    }
    //background
    for(int x = 0; x < SCREEN_WIDTH; x++) {
 80004c8:	2300      	movs	r3, #0
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	e016      	b.n	80004fc <updateScreen+0x5c>
        for(int y = 0; y < SCREEN_HEIGHT; y++) {
 80004ce:	2300      	movs	r3, #0
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	e00d      	b.n	80004f0 <updateScreen+0x50>
            game_screen[x][y] = ENC_DARK_GRAY;
 80004d4:	491a      	ldr	r1, [pc, #104]	; (8000540 <updateScreen+0xa0>)
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	4613      	mov	r3, r2
 80004da:	011b      	lsls	r3, r3, #4
 80004dc:	1a9b      	subs	r3, r3, r2
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	18ca      	adds	r2, r1, r3
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	4413      	add	r3, r2
 80004e6:	2206      	movs	r2, #6
 80004e8:	701a      	strb	r2, [r3, #0]
        for(int y = 0; y < SCREEN_HEIGHT; y++) {
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	3301      	adds	r3, #1
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	2b3b      	cmp	r3, #59	; 0x3b
 80004f4:	ddee      	ble.n	80004d4 <updateScreen+0x34>
    for(int x = 0; x < SCREEN_WIDTH; x++) {
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3301      	adds	r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b4f      	cmp	r3, #79	; 0x4f
 8000500:	dde5      	ble.n	80004ce <updateScreen+0x2e>
        }
    }

    //start
    if(!play){
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <updateScreen+0x94>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d006      	beq.n	8000518 <updateScreen+0x78>
        //displayText(game_screen,"START", SCREEN_WIDTH - (SCREEN_WIDTH / 2)-14, SCREEN_HEIGHT - (SCREEN_HEIGHT / 2) - 4, WHITE);
    }
    else if(play == paused){
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <updateScreen+0x94>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d102      	bne.n	8000518 <updateScreen+0x78>
    	displayPauseMenu(0);
 8000512:	2000      	movs	r0, #0
 8000514:	f000 fb8a 	bl	8000c2c <displayPauseMenu>
    }

    if(gamechoice == 1){
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <updateScreen+0x98>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d105      	bne.n	800052c <updateScreen+0x8c>
    	//spaceship
    	displaySpaceShip(RED);
 8000520:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000524:	f001 fb64 	bl	8001bf0 <displaySpaceShip>

    	//lives
    	displayLives();
 8000528:	f001 fba4 	bl	8001c74 <displayLives>
        //displayText(game_screen,"bricks", SCREEN_WIDTH - (SCREEN_WIDTH / 2) - 18, SCREEN_HEIGHT - (SCREEN_HEIGHT / 2) + 5, WHITE);
        //nothin yet, here comes your things
    }


}
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000000b 	.word	0x2000000b
 8000538:	2000136a 	.word	0x2000136a
 800053c:	20001368 	.word	0x20001368
 8000540:	200000a8 	.word	0x200000a8

08000544 <_write>:
int16_t angle = 90;
uint32_t millis = 0;
uint32_t premillis = 0;
extern uint8_t game_screen[SCREEN_WIDTH][SCREEN_HEIGHT];

int _write(int file, char *ptr, int len) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d003      	beq.n	800055e <_write+0x1a>
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	2b02      	cmp	r3, #2
 800055a:	d015      	beq.n	8000588 <_write+0x44>
 800055c:	e029      	b.n	80005b2 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	b29a      	uxth	r2, r3
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
 8000566:	68b9      	ldr	r1, [r7, #8]
 8000568:	481a      	ldr	r0, [pc, #104]	; (80005d4 <_write+0x90>)
 800056a:	f005 fe1d 	bl	80061a8 <HAL_UART_Transmit>
 800056e:	4603      	mov	r3, r0
 8000570:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000572:	7dfb      	ldrb	r3, [r7, #23]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d024      	beq.n	80005c2 <_write+0x7e>
			errno = EIO;
 8000578:	f006 f9ec 	bl	8006954 <__errno>
 800057c:	4603      	mov	r3, r0
 800057e:	2205      	movs	r2, #5
 8000580:	601a      	str	r2, [r3, #0]
			return -1;
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	e020      	b.n	80005ca <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	b29a      	uxth	r2, r3
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	68b9      	ldr	r1, [r7, #8]
 8000592:	4810      	ldr	r0, [pc, #64]	; (80005d4 <_write+0x90>)
 8000594:	f005 fe08 	bl	80061a8 <HAL_UART_Transmit>
 8000598:	4603      	mov	r3, r0
 800059a:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 800059c:	7dfb      	ldrb	r3, [r7, #23]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d011      	beq.n	80005c6 <_write+0x82>
			errno = EIO;
 80005a2:	f006 f9d7 	bl	8006954 <__errno>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2205      	movs	r2, #5
 80005aa:	601a      	str	r2, [r3, #0]
			return -1;
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	e00b      	b.n	80005ca <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 80005b2:	f006 f9cf 	bl	8006954 <__errno>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2209      	movs	r2, #9
 80005ba:	601a      	str	r2, [r3, #0]
        return -1;
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	e003      	b.n	80005ca <_write+0x86>
        break;
 80005c2:	bf00      	nop
 80005c4:	e000      	b.n	80005c8 <_write+0x84>
        break;
 80005c6:	bf00      	nop
    }
    return len;
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200014ac 	.word	0x200014ac

080005d8 <read_MPU_mem>:

uint8_t read_MPU_mem(uint8_t reg_addr){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af04      	add	r7, sp, #16
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9302      	str	r3, [sp, #8]
 80005ea:	2301      	movs	r3, #1
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	f107 030f 	add.w	r3, r7, #15
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2301      	movs	r3, #1
 80005f6:	21d0      	movs	r1, #208	; 0xd0
 80005f8:	4807      	ldr	r0, [pc, #28]	; (8000618 <read_MPU_mem+0x40>)
 80005fa:	f003 f897 	bl	800372c <HAL_I2C_Mem_Read>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d101      	bne.n	8000608 <read_MPU_mem+0x30>
		return data;
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	e003      	b.n	8000610 <read_MPU_mem+0x38>
	}
	else{
		printf("mem not read\r\n");
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <read_MPU_mem+0x44>)
 800060a:	f006 fa5b 	bl	8006ac4 <puts>
		return 0;
 800060e:	2300      	movs	r3, #0
	}
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000136c 	.word	0x2000136c
 800061c:	08007bb8 	.word	0x08007bb8

08000620 <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af04      	add	r7, sp, #16
 8000626:	4603      	mov	r3, r0
 8000628:	460a      	mov	r2, r1
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	4613      	mov	r3, r2
 800062e:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	b29a      	uxth	r2, r3
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	9302      	str	r3, [sp, #8]
 8000638:	2301      	movs	r3, #1
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	1dbb      	adds	r3, r7, #6
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2301      	movs	r3, #1
 8000642:	21d1      	movs	r1, #209	; 0xd1
 8000644:	4806      	ldr	r0, [pc, #24]	; (8000660 <write_MPU_mem+0x40>)
 8000646:	f002 ff5d 	bl	8003504 <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <write_MPU_mem+0x44>)
 8000652:	f006 fa37 	bl	8006ac4 <puts>
    }
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000136c 	.word	0x2000136c
 8000664:	08007bc8 	.word	0x08007bc8

08000668 <read_y_accel>:

void read_y_accel(){
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	uint8_t LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 800066e:	203e      	movs	r0, #62	; 0x3e
 8000670:	f7ff ffb2 	bl	80005d8 <read_MPU_mem>
 8000674:	4603      	mov	r3, r0
 8000676:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 8000678:	203d      	movs	r0, #61	; 0x3d
 800067a:	f7ff ffad 	bl	80005d8 <read_MPU_mem>
 800067e:	4603      	mov	r3, r0
 8000680:	71bb      	strb	r3, [r7, #6]

	ay = (((int16_t)MSByte << 8) | LSByte);
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	b21a      	sxth	r2, r3
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	b21b      	sxth	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b21a      	sxth	r2, r3
 8000690:	4b02      	ldr	r3, [pc, #8]	; (800069c <read_y_accel+0x34>)
 8000692:	801a      	strh	r2, [r3, #0]

}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20001534 	.word	0x20001534

080006a0 <init_MPU>:

void init_MPU(){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 80006a4:	2100      	movs	r1, #0
 80006a6:	206b      	movs	r0, #107	; 0x6b
 80006a8:	f7ff ffba 	bl	8000620 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 80006ac:	2107      	movs	r1, #7
 80006ae:	2019      	movs	r0, #25
 80006b0:	f7ff ffb6 	bl	8000620 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 80006b4:	2100      	movs	r1, #0
 80006b6:	201b      	movs	r0, #27
 80006b8:	f7ff ffb2 	bl	8000620 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 80006bc:	2100      	movs	r1, #0
 80006be:	201c      	movs	r0, #28
 80006c0:	f7ff ffae 	bl	8000620 <write_MPU_mem>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f002 fb33 	bl	8002d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f883 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f000 f9b5 	bl	8000a44 <MX_GPIO_Init>
  MX_I2C2_Init();
 80006da:	f000 f8d5 	bl	8000888 <MX_I2C2_Init>
  MX_SPI2_Init();
 80006de:	f000 f913 	bl	8000908 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80006e2:	f000 f94f 	bl	8000984 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006e6:	f000 f97d 	bl	80009e4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80006ea:	2064      	movs	r0, #100	; 0x64
 80006ec:	f002 fb8a 	bl	8002e04 <HAL_Delay>
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 80006f0:	2364      	movs	r3, #100	; 0x64
 80006f2:	2201      	movs	r2, #1
 80006f4:	21d0      	movs	r1, #208	; 0xd0
 80006f6:	4830      	ldr	r0, [pc, #192]	; (80007b8 <main+0xf0>)
 80006f8:	f003 f932 	bl	8003960 <HAL_I2C_IsDeviceReady>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d105      	bne.n	800070e <main+0x46>
	  printf("succesfully communicated\n\r");
 8000702:	482e      	ldr	r0, [pc, #184]	; (80007bc <main+0xf4>)
 8000704:	f006 f958 	bl	80069b8 <iprintf>
	  init_MPU();
 8000708:	f7ff ffca 	bl	80006a0 <init_MPU>
 800070c:	e002      	b.n	8000714 <main+0x4c>
  }
  else{
	  printf("i2C not found\n\r");
 800070e:	482c      	ldr	r0, [pc, #176]	; (80007c0 <main+0xf8>)
 8000710:	f006 f952 	bl	80069b8 <iprintf>
  }

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8000714:	2001      	movs	r0, #1
 8000716:	f001 ff0d 	bl	8002534 <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 800071a:	2000      	movs	r0, #0
 800071c:	f002 f838 	bl	8002790 <Displ_CLS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(100);
 8000720:	2064      	movs	r0, #100	; 0x64
 8000722:	f002 fb6f 	bl	8002e04 <HAL_Delay>

      read_y_accel();
 8000726:	f7ff ff9f 	bl	8000668 <read_y_accel>
      if (ay > 2000){
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <main+0xfc>)
 800072c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000730:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000734:	dd07      	ble.n	8000746 <main+0x7e>
          if(x < 320 - 88){
 8000736:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <main+0x100>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	2be7      	cmp	r3, #231	; 0xe7
 800073c:	d810      	bhi.n	8000760 <main+0x98>
        	  key = right;
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <main+0x104>)
 8000740:	2203      	movs	r2, #3
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	e00c      	b.n	8000760 <main+0x98>
          }
      }
      else if (ay < -2000){
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <main+0xfc>)
 8000748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800074c:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8000750:	da06      	bge.n	8000760 <main+0x98>
          if(x > 0){
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <main+0x100>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <main+0x98>
        	  key = left;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <main+0x104>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
          }
      }
      else{
      }
      key = loop(key);
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <main+0x104>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fdb7 	bl	80002d8 <loop>
 800076a:	4603      	mov	r3, r0
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <main+0x104>)
 8000770:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ammo.in_play; i++){
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	e017      	b.n	80007a8 <main+0xe0>
    	  printf("hello?\r\n");
 8000778:	4815      	ldr	r0, [pc, #84]	; (80007d0 <main+0x108>)
 800077a:	f006 f9a3 	bl	8006ac4 <puts>
    	  printf("ammo %d: x:%d, y:%d\r\n",i,ammo.bullet_ar[i].x,ammo.bullet_ar[i].y);
 800077e:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <main+0x10c>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800078a:	4619      	mov	r1, r3
 800078c:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <main+0x10c>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4413      	add	r3, r2
 8000794:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000798:	460a      	mov	r2, r1
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	480e      	ldr	r0, [pc, #56]	; (80007d8 <main+0x110>)
 800079e:	f006 f90b 	bl	80069b8 <iprintf>
      for (int i = 0; i < ammo.in_play; i++){
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3301      	adds	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <main+0x10c>)
 80007aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80007ae:	461a      	mov	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4293      	cmp	r3, r2
 80007b4:	dbe0      	blt.n	8000778 <main+0xb0>
      HAL_Delay(100);
 80007b6:	e7b3      	b.n	8000720 <main+0x58>
 80007b8:	2000136c 	.word	0x2000136c
 80007bc:	08007bdc 	.word	0x08007bdc
 80007c0:	08007bf8 	.word	0x08007bf8
 80007c4:	20001534 	.word	0x20001534
 80007c8:	20000002 	.word	0x20000002
 80007cc:	2000153c 	.word	0x2000153c
 80007d0:	08007c08 	.word	0x08007c08
 80007d4:	20001540 	.word	0x20001540
 80007d8:	08007c10 	.word	0x08007c10

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09c      	sub	sp, #112	; 0x70
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007e6:	2228      	movs	r2, #40	; 0x28
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 f8dc 	bl	80069a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2230      	movs	r2, #48	; 0x30
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f006 f8ce 	bl	80069a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080c:	2302      	movs	r3, #2
 800080e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	2301      	movs	r3, #1
 8000812:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000814:	2310      	movs	r3, #16
 8000816:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081c:	2300      	movs	r3, #0
 800081e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000820:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000824:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800082a:	4618      	mov	r0, r3
 800082c:	f003 fcf2 	bl	8004214 <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000836:	f000 f9f3 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2302      	movs	r3, #2
 8000840:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000850:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000854:	2102      	movs	r1, #2
 8000856:	4618      	mov	r0, r3
 8000858:	f004 fd1a 	bl	8005290 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000862:	f000 f9dd 	bl	8000c20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000866:	2340      	movs	r3, #64	; 0x40
 8000868:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4618      	mov	r0, r3
 8000872:	f004 ff43 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800087c:	f000 f9d0 	bl	8000c20 <Error_Handler>
  }
}
 8000880:	bf00      	nop
 8000882:	3770      	adds	r7, #112	; 0x70
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_I2C2_Init+0x74>)
 800088e:	4a1c      	ldr	r2, [pc, #112]	; (8000900 <MX_I2C2_Init+0x78>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_I2C2_Init+0x74>)
 8000894:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <MX_I2C2_Init+0x7c>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_I2C2_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_I2C2_Init+0x74>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_I2C2_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_I2C2_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_I2C2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_I2C2_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_I2C2_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008c2:	480e      	ldr	r0, [pc, #56]	; (80008fc <MX_I2C2_Init+0x74>)
 80008c4:	f002 fd8e 	bl	80033e4 <HAL_I2C_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ce:	f000 f9a7 	bl	8000c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_I2C2_Init+0x74>)
 80008d6:	f003 fc05 	bl	80040e4 <HAL_I2CEx_ConfigAnalogFilter>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008e0:	f000 f99e 	bl	8000c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008e4:	2100      	movs	r1, #0
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_I2C2_Init+0x74>)
 80008e8:	f003 fc47 	bl	800417a <HAL_I2CEx_ConfigDigitalFilter>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008f2:	f000 f995 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000136c 	.word	0x2000136c
 8000900:	40005800 	.word	0x40005800
 8000904:	2000090e 	.word	0x2000090e

08000908 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_SPI2_Init+0x74>)
 800090e:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <MX_SPI2_Init+0x78>)
 8000910:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_SPI2_Init+0x74>)
 8000914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000918:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_SPI2_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_SPI2_Init+0x74>)
 8000922:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000926:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_SPI2_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_SPI2_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_SPI2_Init+0x74>)
 8000936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_SPI2_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_SPI2_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_SPI2_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_SPI2_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_SPI2_Init+0x74>)
 8000956:	2207      	movs	r2, #7
 8000958:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_SPI2_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_SPI2_Init+0x74>)
 8000962:	2208      	movs	r2, #8
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_SPI2_Init+0x74>)
 8000968:	f005 f84c 	bl	8005a04 <HAL_SPI_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000972:	f000 f955 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200013c0 	.word	0x200013c0
 8000980:	40003800 	.word	0x40003800

08000984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART2_UART_Init+0x58>)
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <MX_USART2_UART_Init+0x5c>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART2_UART_Init+0x58>)
 8000990:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009c8:	f005 fba0 	bl	800610c <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009d2:	f000 f925 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20001424 	.word	0x20001424
 80009e0:	40004400 	.word	0x40004400

080009e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 80009ea:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <MX_USART3_UART_Init+0x5c>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 80009f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80009f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a28:	f005 fb70 	bl	800610c <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a32:	f000 f8f5 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200014ac 	.word	0x200014ac
 8000a40:	40004800 	.word	0x40004800

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	4b46      	ldr	r3, [pc, #280]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	4a45      	ldr	r2, [pc, #276]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000a60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a64:	6153      	str	r3, [r2, #20]
 8000a66:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a72:	4b40      	ldr	r3, [pc, #256]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a3f      	ldr	r2, [pc, #252]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000a78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a7c:	6153      	str	r3, [r2, #20]
 8000a7e:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b3a      	ldr	r3, [pc, #232]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	4a39      	ldr	r2, [pc, #228]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	6153      	str	r3, [r2, #20]
 8000a96:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a33      	ldr	r2, [pc, #204]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aac:	6153      	str	r3, [r2, #20]
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <MX_GPIO_Init+0x130>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac0:	482d      	ldr	r0, [pc, #180]	; (8000b78 <MX_GPIO_Init+0x134>)
 8000ac2:	f002 fc5f 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad0:	f002 fc58 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8000ad4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ada:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4824      	ldr	r0, [pc, #144]	; (8000b7c <MX_GPIO_Init+0x138>)
 8000aec:	f002 fac0 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f002 fab2 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4814      	ldr	r0, [pc, #80]	; (8000b78 <MX_GPIO_Init+0x134>)
 8000b26:	f002 faa3 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 8000b2a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b46:	f002 fa93 	bl	8003070 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2006      	movs	r0, #6
 8000b50:	f002 fa57 	bl	8003002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b54:	2006      	movs	r0, #6
 8000b56:	f002 fa70 	bl	800303a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2028      	movs	r0, #40	; 0x28
 8000b60:	f002 fa4f 	bl	8003002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b64:	2028      	movs	r0, #40	; 0x28
 8000b66:	f002 fa68 	bl	800303a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48000400 	.word	0x48000400
 8000b7c:	48000800 	.word	0x48000800

08000b80 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
    // Get the current time
    uint32_t current_time = HAL_GetTick();
 8000b8a:	f002 f92f 	bl	8002dec <HAL_GetTick>
 8000b8e:	60f8      	str	r0, [r7, #12]

    // Check if it's been long enough since the last debounce
    if (current_time - debounce_time > DEBOUNCE_DELAY) {
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	2b0a      	cmp	r3, #10
 8000b9a:	d92f      	bls.n	8000bfc <HAL_GPIO_EXTI_Callback+0x7c>
        // Update debounce time
        debounce_time = current_time;
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6013      	str	r3, [r2, #0]

        // Your button handling code here
        printf("interrupt!\r\n");
 8000ba2:	4819      	ldr	r0, [pc, #100]	; (8000c08 <HAL_GPIO_EXTI_Callback+0x88>)
 8000ba4:	f005 ff8e 	bl	8006ac4 <puts>
        if (GPIO_Pin == LEFT_Pin) {
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bae:	d106      	bne.n	8000bbe <HAL_GPIO_EXTI_Callback+0x3e>
            key = left;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
            printf("left clicked\r\n");
 8000bb6:	4816      	ldr	r0, [pc, #88]	; (8000c10 <HAL_GPIO_EXTI_Callback+0x90>)
 8000bb8:	f005 ff84 	bl	8006ac4 <puts>
        } else if (GPIO_Pin == MIDDLE_Pin) {
            key = down;
            printf("down clicked\r\n");
        }
    }
}
 8000bbc:	e01e      	b.n	8000bfc <HAL_GPIO_EXTI_Callback+0x7c>
        } else if (GPIO_Pin == TOP_Pin) {
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bc4:	d106      	bne.n	8000bd4 <HAL_GPIO_EXTI_Callback+0x54>
            key = up;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	701a      	strb	r2, [r3, #0]
            printf("up clicked\r\n");
 8000bcc:	4811      	ldr	r0, [pc, #68]	; (8000c14 <HAL_GPIO_EXTI_Callback+0x94>)
 8000bce:	f005 ff79 	bl	8006ac4 <puts>
}
 8000bd2:	e013      	b.n	8000bfc <HAL_GPIO_EXTI_Callback+0x7c>
        } else if (GPIO_Pin == RIGHT_Pin) {
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bda:	d106      	bne.n	8000bea <HAL_GPIO_EXTI_Callback+0x6a>
            key = right;
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bde:	2203      	movs	r2, #3
 8000be0:	701a      	strb	r2, [r3, #0]
            printf("right clicked\r\n");
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x98>)
 8000be4:	f005 ff6e 	bl	8006ac4 <puts>
}
 8000be8:	e008      	b.n	8000bfc <HAL_GPIO_EXTI_Callback+0x7c>
        } else if (GPIO_Pin == MIDDLE_Pin) {
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d105      	bne.n	8000bfc <HAL_GPIO_EXTI_Callback+0x7c>
            key = down;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	701a      	strb	r2, [r3, #0]
            printf("down clicked\r\n");
 8000bf6:	4809      	ldr	r0, [pc, #36]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000bf8:	f005 ff64 	bl	8006ac4 <puts>
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20001538 	.word	0x20001538
 8000c08:	08007c28 	.word	0x08007c28
 8000c0c:	2000153c 	.word	0x2000153c
 8000c10:	08007c34 	.word	0x08007c34
 8000c14:	08007c44 	.word	0x08007c44
 8000c18:	08007c50 	.word	0x08007c50
 8000c1c:	08007c60 	.word	0x08007c60

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <Error_Handler+0x8>
	...

08000c2c <displayPauseMenu>:

void displayMultiplayerIcon(void);
void displayBricksIcon(void);
void displaySpaceIcon(void);

void displayPauseMenu(uint8_t clear){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af04      	add	r7, sp, #16
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	uint16_t back_color = GREY;
 8000c36:	f249 6396 	movw	r3, #38550	; 0x9696
 8000c3a:	81fb      	strh	r3, [r7, #14]
	uint16_t continue_color = RED;
 8000c3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c40:	81bb      	strh	r3, [r7, #12]
	if(choice == 0){
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <displayPauseMenu+0x80>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d106      	bne.n	8000c58 <displayPauseMenu+0x2c>
		back_color = RED;
 8000c4a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c4e:	81fb      	strh	r3, [r7, #14]
		continue_color = GREY;
 8000c50:	f249 6396 	movw	r3, #38550	; 0x9696
 8000c54:	81bb      	strh	r3, [r7, #12]
 8000c56:	e008      	b.n	8000c6a <displayPauseMenu+0x3e>
	}
	else if(clear){
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d005      	beq.n	8000c6a <displayPauseMenu+0x3e>
		back_color = DARK_GREY;
 8000c5e:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8000c62:	81fb      	strh	r3, [r7, #14]
		continue_color = DARK_GREY;
 8000c64:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8000c68:	81bb      	strh	r3, [r7, #12]
	}
	Displ_FillArea(SCREEN_WIDTH * 2 - BUTTON_SIZE - 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, back_color);
 8000c6a:	89fb      	ldrh	r3, [r7, #14]
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2340      	movs	r3, #64	; 0x40
 8000c70:	2240      	movs	r2, #64	; 0x40
 8000c72:	2158      	movs	r1, #88	; 0x58
 8000c74:	2054      	movs	r0, #84	; 0x54
 8000c76:	f001 fcd3 	bl	8002620 <Displ_FillArea>
	Displ_FillArea(SCREEN_WIDTH * 2 + 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, continue_color);
 8000c7a:	89bb      	ldrh	r3, [r7, #12]
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	2240      	movs	r2, #64	; 0x40
 8000c82:	2158      	movs	r1, #88	; 0x58
 8000c84:	20ac      	movs	r0, #172	; 0xac
 8000c86:	f001 fccb 	bl	8002620 <Displ_FillArea>

	Displ_fillTriangle(SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 + 20 + BUTTON_SIZE - 8, SCREEN_HEIGHT * 2, WHITE);
 8000c8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c8e:	9302      	str	r3, [sp, #8]
 8000c90:	2378      	movs	r3, #120	; 0x78
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	23ec      	movs	r3, #236	; 0xec
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2390      	movs	r3, #144	; 0x90
 8000c9a:	22b4      	movs	r2, #180	; 0xb4
 8000c9c:	2160      	movs	r1, #96	; 0x60
 8000c9e:	20b4      	movs	r0, #180	; 0xb4
 8000ca0:	f001 fec3 	bl	8002a2a <Displ_fillTriangle>

}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20001369 	.word	0x20001369

08000cb0 <displayMenu>:

void displayMenu(){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af02      	add	r7, sp, #8
	int y_offset = 12;
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	60fb      	str	r3, [r7, #12]
	int x_offset = 12;
 8000cba:	230c      	movs	r3, #12
 8000cbc:	60bb      	str	r3, [r7, #8]
	//box around
	if(choice != last_choice){
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <displayMenu+0xc8>)
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <displayMenu+0xcc>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d03d      	beq.n	8000d46 <displayMenu+0x96>
		last_choice =  choice;
 8000cca:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <displayMenu+0xc8>)
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <displayMenu+0xcc>)
 8000cd0:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	e02e      	b.n	8000d36 <displayMenu+0x86>
			if(i == choice){
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <displayMenu+0xc8>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d10b      	bne.n	8000cfc <displayMenu+0x4c>
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, RED);
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	b298      	uxth	r0, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	b299      	uxth	r1, r3
 8000cec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	2240      	movs	r2, #64	; 0x40
 8000cf6:	f001 fc93 	bl	8002620 <Displ_FillArea>
 8000cfa:	e00a      	b.n	8000d12 <displayMenu+0x62>
			}else{
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, GREY);
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	b298      	uxth	r0, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	b299      	uxth	r1, r3
 8000d04:	f249 6396 	movw	r3, #38550	; 0x9696
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	2340      	movs	r3, #64	; 0x40
 8000d0c:	2240      	movs	r2, #64	; 0x40
 8000d0e:	f001 fc87 	bl	8002620 <Displ_FillArea>
			}if((i + 1)% 4 == 0){
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3301      	adds	r3, #1
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d105      	bne.n	8000d2a <displayMenu+0x7a>
				x_offset = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
				y_offset += BUTTON_SIZE + 12;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	334c      	adds	r3, #76	; 0x4c
 8000d26:	60fb      	str	r3, [r7, #12]
				continue;
 8000d28:	e002      	b.n	8000d30 <displayMenu+0x80>
			}
			x_offset += BUTTON_SIZE + 12;
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	334c      	adds	r3, #76	; 0x4c
 8000d2e:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3301      	adds	r3, #1
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <displayMenu+0xd0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dc02      	bgt.n	8000d46 <displayMenu+0x96>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b07      	cmp	r3, #7
 8000d44:	ddc8      	ble.n	8000cd8 <displayMenu+0x28>
		}
	}
    displayMenuIcons();
 8000d46:	f000 f81d 	bl	8000d84 <displayMenuIcons>
        for (int j = SCREEN_HEIGHT - 16; j < SCREEN_HEIGHT; j++){
            game_screen[i][j] = ENC_BLACK;
        }
    }
*/
    switch (choice) {
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <displayMenu+0xc8>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d006      	beq.n	8000d60 <displayMenu+0xb0>
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	dc06      	bgt.n	8000d64 <displayMenu+0xb4>
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d006      	beq.n	8000d68 <displayMenu+0xb8>
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d006      	beq.n	8000d6c <displayMenu+0xbc>
        break;
    case 2:
        //displayText(game_screen,"Space Invaders", 2, SCREEN_HEIGHT - 16, WHITE);
        break;
    default:
        break;
 8000d5e:	e001      	b.n	8000d64 <displayMenu+0xb4>
        break;
 8000d60:	bf00      	nop
 8000d62:	e004      	b.n	8000d6e <displayMenu+0xbe>
        break;
 8000d64:	bf00      	nop
 8000d66:	e002      	b.n	8000d6e <displayMenu+0xbe>
        break;
 8000d68:	bf00      	nop
 8000d6a:	e000      	b.n	8000d6e <displayMenu+0xbe>
        break;
 8000d6c:	bf00      	nop
    }
}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20001369 	.word	0x20001369
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000004 	.word	0x20000004

08000d84 <displayMenuIcons>:

void displayMenuIcons(){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

    // multiplayer
	displayMultiplayerIcon();
 8000d88:	f000 f806 	bl	8000d98 <displayMultiplayerIcon>

    // brick
	displayBricksIcon();
 8000d8c:	f000 f868 	bl	8000e60 <displayBricksIcon>

    //spaceinvaders
	displaySpaceIcon();
 8000d90:	f000 f890 	bl	8000eb4 <displaySpaceIcon>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <displayMultiplayerIcon>:

void displayMultiplayerIcon(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af02      	add	r7, sp, #8
	if(connected){
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <displayMultiplayerIcon+0xc4>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d023      	beq.n	8000dee <displayMultiplayerIcon+0x56>
		Displ_FillArea(20, 20, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 8000da6:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2304      	movs	r3, #4
 8000dae:	2230      	movs	r2, #48	; 0x30
 8000db0:	2114      	movs	r1, #20
 8000db2:	2014      	movs	r0, #20
 8000db4:	f001 fc34 	bl	8002620 <Displ_FillArea>
		Displ_FillArea(20, 12, 4, 8, LIGHT_GREEN);
 8000db8:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	210c      	movs	r1, #12
 8000dc4:	2014      	movs	r0, #20
 8000dc6:	f001 fc2b 	bl	8002620 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE, 12, 4, 8, LIGHT_GREEN);
 8000dca:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	210c      	movs	r1, #12
 8000dd6:	2040      	movs	r0, #64	; 0x40
 8000dd8:	f001 fc22 	bl	8002620 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE/2 + 8, 24, 8, BUTTON_SIZE - 24, LIGHT_GREEN);
 8000ddc:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2328      	movs	r3, #40	; 0x28
 8000de4:	2208      	movs	r2, #8
 8000de6:	2118      	movs	r1, #24
 8000de8:	2028      	movs	r0, #40	; 0x28
 8000dea:	f001 fc19 	bl	8002620 <Displ_FillArea>
	}
	Displ_FillArea(20, BUTTON_SIZE, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 8000dee:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	2304      	movs	r3, #4
 8000df6:	2230      	movs	r2, #48	; 0x30
 8000df8:	2140      	movs	r1, #64	; 0x40
 8000dfa:	2014      	movs	r0, #20
 8000dfc:	f001 fc10 	bl	8002620 <Displ_FillArea>
	Displ_FillArea(20, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8000e00:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2308      	movs	r3, #8
 8000e08:	2204      	movs	r2, #4
 8000e0a:	2144      	movs	r1, #68	; 0x44
 8000e0c:	2014      	movs	r0, #20
 8000e0e:	f001 fc07 	bl	8002620 <Displ_FillArea>
	Displ_FillArea(BUTTON_SIZE, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8000e12:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2308      	movs	r3, #8
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	2144      	movs	r1, #68	; 0x44
 8000e1e:	2040      	movs	r0, #64	; 0x40
 8000e20:	f001 fbfe 	bl	8002620 <Displ_FillArea>
	if(!connected){
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <displayMultiplayerIcon+0xc4>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d112      	bne.n	8000e52 <displayMultiplayerIcon+0xba>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 8000e2c:	2318      	movs	r3, #24
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	e00c      	b.n	8000e4c <displayMultiplayerIcon+0xb4>
			Displ_FillArea(BUTTON_SIZE/2 + 8, k, 8, 4, LIGHT_GREEN);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	b299      	uxth	r1, r3
 8000e36:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	2208      	movs	r2, #8
 8000e40:	2028      	movs	r0, #40	; 0x28
 8000e42:	f001 fbed 	bl	8002620 <Displ_FillArea>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3308      	adds	r3, #8
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e50:	ddef      	ble.n	8000e32 <displayMultiplayerIcon+0x9a>
		}
	}
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000153d 	.word	0x2000153d

08000e60 <displayBricksIcon>:

void displayBricksIcon(){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af02      	add	r7, sp, #8
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE, 20, 4, LIGHT_GREEN);
 8000e66:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	2214      	movs	r2, #20
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	2068      	movs	r0, #104	; 0x68
 8000e74:	f001 fbd4 	bl	8002620 <Displ_FillArea>
	Displ_FillArea(28+BUTTON_SIZE, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 8000e78:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2340      	movs	r3, #64	; 0x40
 8000e80:	2204      	movs	r2, #4
 8000e82:	210c      	movs	r1, #12
 8000e84:	205c      	movs	r0, #92	; 0x5c
 8000e86:	f001 fbcb 	bl	8002620 <Displ_FillArea>
	Displ_FillArea((8+BUTTON_SIZE)*2, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 8000e8a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2340      	movs	r3, #64	; 0x40
 8000e92:	2204      	movs	r2, #4
 8000e94:	210c      	movs	r1, #12
 8000e96:	2090      	movs	r0, #144	; 0x90
 8000e98:	f001 fbc2 	bl	8002620 <Displ_FillArea>
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE - 20, 4, 4, LIGHT_GREEN);
 8000e9c:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	212c      	movs	r1, #44	; 0x2c
 8000ea8:	2068      	movs	r0, #104	; 0x68
 8000eaa:	f001 fbb9 	bl	8002620 <Displ_FillArea>
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <displaySpaceIcon>:

void displaySpaceIcon(){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af02      	add	r7, sp, #8
	Displ_FillArea((BUTTON_SIZE+12)*3 - 48, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 8000eba:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2310      	movs	r3, #16
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	2134      	movs	r1, #52	; 0x34
 8000ec6:	20b4      	movs	r0, #180	; 0xb4
 8000ec8:	f001 fbaa 	bl	8002620 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 32, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 8000ecc:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2310      	movs	r3, #16
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	2134      	movs	r1, #52	; 0x34
 8000ed8:	20c4      	movs	r0, #196	; 0xc4
 8000eda:	f001 fba1 	bl	8002620 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 44, BUTTON_SIZE -8, 12, 4, LIGHT_GREEN);
 8000ede:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	2138      	movs	r1, #56	; 0x38
 8000eea:	20b8      	movs	r0, #184	; 0xb8
 8000eec:	f001 fb98 	bl	8002620 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 40, BUTTON_SIZE -16, 4, 16, LIGHT_GREEN);
 8000ef0:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	2204      	movs	r2, #4
 8000efa:	2130      	movs	r1, #48	; 0x30
 8000efc:	20bc      	movs	r0, #188	; 0xbc
 8000efe:	f001 fb8f 	bl	8002620 <Displ_FillArea>

	Displ_FillArea((BUTTON_SIZE+12)*3 - 36, BUTTON_SIZE -40, 12, 12, LIGHT_GREEN);
 8000f02:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	230c      	movs	r3, #12
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	2118      	movs	r1, #24
 8000f0e:	20c0      	movs	r0, #192	; 0xc0
 8000f10:	f001 fb86 	bl	8002620 <Displ_FillArea>
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <check_availability>:

uint8_t emulate = 1;
uint8_t connected = 0;


void check_availability(){
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
    //QD << "(mockup) is player 2 there?";  // change to uart debug
    if(emulate /*or answer was received */){
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <check_availability+0x1c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <check_availability+0x12>
        connected = 1;
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <check_availability+0x20>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
        // QD << "(mockup) player 2 connected";  // change to uart debug
    }
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	20000009 	.word	0x20000009
 8000f3c:	2000153d 	.word	0x2000153d

08000f40 <toggle_multiplayer>:

void toggle_multiplayer(){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    if(connected){
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <toggle_multiplayer+0x1c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <toggle_multiplayer+0x14>
        //QD << "(mockup) stoping multiplayer";  // change to uart debug
        connected = 0;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <toggle_multiplayer+0x1c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
    }else{
        //QD << "(mockup) starting multiplayer";  // change to uart debug
        check_availability();
    }

}
 8000f52:	e001      	b.n	8000f58 <toggle_multiplayer+0x18>
        check_availability();
 8000f54:	f7ff ffe2 	bl	8000f1c <check_availability>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000153d 	.word	0x2000153d

08000f60 <initSpaceInvaders>:
uint8_t hit_graph_counter = 60;
uint8_t in_multiplayer = 1;
extern uint8_t connected;


void initSpaceInvaders(){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
    money = 0;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <initSpaceInvaders+0x70>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
    lives = 3;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <initSpaceInvaders+0x74>)
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	701a      	strb	r2, [r3, #0]

    Displ_CLS(DARK_GREY);
 8000f70:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8000f74:	f001 fc0c 	bl	8002790 <Displ_CLS>
    // Seed the random number generator
    srand(HAL_GetTick());
 8000f78:	f001 ff38 	bl	8002dec <HAL_GetTick>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f005 fda8 	bl	8006ad4 <srand>
    comet_delay = rand() % ((20 + 1) - 5) + 5;
 8000f84:	f005 fdd4 	bl	8006b30 <rand>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	425a      	negs	r2, r3
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	f002 020f 	and.w	r2, r2, #15
 8000f94:	bf58      	it	pl
 8000f96:	4253      	negpl	r3, r2
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	3305      	adds	r3, #5
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <initSpaceInvaders+0x78>)
 8000fa0:	701a      	strb	r2, [r3, #0]
    comet_delay = 15;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <initSpaceInvaders+0x78>)
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	701a      	strb	r2, [r3, #0]
    initSpaceShip();
 8000fa8:	f000 f81e 	bl	8000fe8 <initSpaceShip>
    initAmmo(&ammo,0);
 8000fac:	2100      	movs	r1, #0
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <initSpaceInvaders+0x7c>)
 8000fb0:	f000 f826 	bl	8001000 <initAmmo>
    if(in_multiplayer){
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <initSpaceInvaders+0x80>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <initSpaceInvaders+0x64>
        initAmmo(&enemy_ammo,1);
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <initSpaceInvaders+0x84>)
 8000fc0:	f000 f81e 	bl	8001000 <initAmmo>
    }
    initComets();
 8000fc4:	f000 f844 	bl	8001050 <initComets>
    initStars();
 8000fc8:	f000 f86c 	bl	80010a4 <initStars>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200015a4 	.word	0x200015a4
 8000fd4:	2000000a 	.word	0x2000000a
 8000fd8:	200015a8 	.word	0x200015a8
 8000fdc:	20001540 	.word	0x20001540
 8000fe0:	20000011 	.word	0x20000011
 8000fe4:	20001550 	.word	0x20001550

08000fe8 <initSpaceShip>:

void initSpaceShip(){
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
    SpaceShip.x = SCREEN_WIDTH/2;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <initSpaceShip+0x14>)
 8000fee:	2228      	movs	r2, #40	; 0x28
 8000ff0:	701a      	strb	r2, [r3, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	2000000c 	.word	0x2000000c

08001000 <initAmmo>:

void initAmmo(bullets *am,int enemy){
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
    am->enemy = enemy;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b25a      	sxtb	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	701a      	strb	r2, [r3, #0]
    am->in_play=0;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	705a      	strb	r2, [r3, #1]
    for (int i = 0;i<MAX_BULLETS;i++){
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e00e      	b.n	800103c <initAmmo+0x3c>
        am->bullet_ar[i].x = -1;
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	22ff      	movs	r2, #255	; 0xff
 8001028:	709a      	strb	r2, [r3, #2]
        am->bullet_ar[i].y = -1;
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	22ff      	movs	r2, #255	; 0xff
 8001034:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_BULLETS;i++){
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3301      	adds	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b05      	cmp	r3, #5
 8001040:	dded      	ble.n	800101e <initAmmo+0x1e>
    }
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <initComets>:

void initComets(){
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
    Comet.in_play = 0;
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <initComets+0x50>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	e014      	b.n	800108c <initComets+0x3c>
        Comet.comet_ar[i].x = -1;
 8001062:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <initComets+0x50>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	22ff      	movs	r2, #255	; 0xff
 800106c:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[i].y = -1;
 800106e:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <initComets+0x50>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	22ff      	movs	r2, #255	; 0xff
 8001078:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[i].size = 2;
 800107a:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <initComets+0x50>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	2202      	movs	r2, #2
 8001084:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_COMETS;i++){
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3301      	adds	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b09      	cmp	r3, #9
 8001090:	dde7      	ble.n	8001062 <initComets+0x12>
    }
}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20001560 	.word	0x20001560

080010a4 <initStars>:

void initStars(){
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
    Star.in_play = 0;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <initStars+0x44>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	e00e      	b.n	80010d4 <initStars+0x30>
        Star.star_ar[i].x = -1;
 80010b6:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <initStars+0x44>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	22ff      	movs	r2, #255	; 0xff
 80010c0:	705a      	strb	r2, [r3, #1]
        Star.star_ar[i].y = -1;
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <initStars+0x44>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	22ff      	movs	r2, #255	; 0xff
 80010cc:	709a      	strb	r2, [r3, #2]
    for (int i = 0;i<MAX_COMETS;i++){
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3301      	adds	r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b09      	cmp	r3, #9
 80010d8:	dded      	ble.n	80010b6 <initStars+0x12>
    }
}
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	2000158c 	.word	0x2000158c

080010ec <spawnComet>:

void spawnComet(){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 80010f0:	4b3f      	ldr	r3, [pc, #252]	; (80011f0 <spawnComet+0x104>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d172      	bne.n	80011de <spawnComet+0xf2>
 80010f8:	4b3e      	ldr	r3, [pc, #248]	; (80011f4 <spawnComet+0x108>)
 80010fa:	f993 3000 	ldrsb.w	r3, [r3]
 80010fe:	2b09      	cmp	r3, #9
 8001100:	dc6d      	bgt.n	80011de <spawnComet+0xf2>
        Comet.comet_ar[Comet.in_play].x = rand() % ((PLAYABLE_MAX - 1) - PLAYABLE_OFFSET) + PLAYABLE_OFFSET;
 8001102:	f005 fd15 	bl	8006b30 <rand>
 8001106:	4601      	mov	r1, r0
 8001108:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <spawnComet+0x10c>)
 800110a:	fb83 2301 	smull	r2, r3, r3, r1
 800110e:	115a      	asrs	r2, r3, #5
 8001110:	17cb      	asrs	r3, r1, #31
 8001112:	1ad2      	subs	r2, r2, r3
 8001114:	4613      	mov	r3, r2
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	1aca      	subs	r2, r1, r3
 8001120:	b2d3      	uxtb	r3, r2
 8001122:	4a34      	ldr	r2, [pc, #208]	; (80011f4 <spawnComet+0x108>)
 8001124:	f992 2000 	ldrsb.w	r2, [r2]
 8001128:	4610      	mov	r0, r2
 800112a:	3305      	adds	r3, #5
 800112c:	b2d9      	uxtb	r1, r3
 800112e:	4a31      	ldr	r2, [pc, #196]	; (80011f4 <spawnComet+0x108>)
 8001130:	0083      	lsls	r3, r0, #2
 8001132:	4413      	add	r3, r2
 8001134:	460a      	mov	r2, r1
 8001136:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[Comet.in_play].y = 0;
 8001138:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <spawnComet+0x108>)
 800113a:	f993 3000 	ldrsb.w	r3, [r3]
 800113e:	4a2d      	ldr	r2, [pc, #180]	; (80011f4 <spawnComet+0x108>)
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	2200      	movs	r2, #0
 8001146:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[Comet.in_play].size = rand() % ((MAX_COMET_SIZE + 1) - MIN_COMET_SIZE) + MIN_COMET_SIZE;
 8001148:	f005 fcf2 	bl	8006b30 <rand>
 800114c:	4602      	mov	r2, r0
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <spawnComet+0x110>)
 8001150:	fb83 3102 	smull	r3, r1, r3, r2
 8001154:	17d3      	asrs	r3, r2, #31
 8001156:	1ac9      	subs	r1, r1, r3
 8001158:	460b      	mov	r3, r1
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	440b      	add	r3, r1
 800115e:	1ad1      	subs	r1, r2, r3
 8001160:	b2cb      	uxtb	r3, r1
 8001162:	3302      	adds	r3, #2
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <spawnComet+0x108>)
 8001168:	f993 3000 	ldrsb.w	r3, [r3]
 800116c:	b251      	sxtb	r1, r2
 800116e:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <spawnComet+0x108>)
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	460a      	mov	r2, r1
 8001176:	70da      	strb	r2, [r3, #3]

        Comet.comet_ar[Comet.in_play].coins = 7 - Comet.comet_ar[Comet.in_play].size;
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <spawnComet+0x108>)
 800117a:	f993 3000 	ldrsb.w	r3, [r3]
 800117e:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <spawnComet+0x108>)
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <spawnComet+0x108>)
 8001192:	f993 3000 	ldrsb.w	r3, [r3]
 8001196:	b251      	sxtb	r1, r2
 8001198:	4a16      	ldr	r2, [pc, #88]	; (80011f4 <spawnComet+0x108>)
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	460a      	mov	r2, r1
 80011a0:	711a      	strb	r2, [r3, #4]
        comet_delay = rand() % ((20 + 1) - 10) + 5;
 80011a2:	f005 fcc5 	bl	8006b30 <rand>
 80011a6:	4601      	mov	r1, r0
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <spawnComet+0x114>)
 80011aa:	fb83 2301 	smull	r2, r3, r3, r1
 80011ae:	105a      	asrs	r2, r3, #1
 80011b0:	17cb      	asrs	r3, r1, #31
 80011b2:	1ad2      	subs	r2, r2, r3
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	1aca      	subs	r2, r1, r3
 80011c0:	b2d3      	uxtb	r3, r2
 80011c2:	3305      	adds	r3, #5
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <spawnComet+0x104>)
 80011c8:	701a      	strb	r2, [r3, #0]
        Comet.in_play++;
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <spawnComet+0x108>)
 80011cc:	f993 3000 	ldrsb.w	r3, [r3]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	b25a      	sxtb	r2, r3
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <spawnComet+0x108>)
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	e006      	b.n	80011ec <spawnComet+0x100>
    }else{
        comet_delay--;
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <spawnComet+0x104>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <spawnComet+0x104>)
 80011e8:	701a      	strb	r2, [r3, #0]
    }

}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200015a8 	.word	0x200015a8
 80011f4:	20001560 	.word	0x20001560
 80011f8:	76b981db 	.word	0x76b981db
 80011fc:	55555556 	.word	0x55555556
 8001200:	2e8ba2e9 	.word	0x2e8ba2e9

08001204 <spawnBullet>:

void spawnBullet(int enemy){
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
    int x_val = SpaceShip.x;
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <spawnBullet+0x98>)
 800120e:	f993 3000 	ldrsb.w	r3, [r3]
 8001212:	60fb      	str	r3, [r7, #12]
    int y_val = SpaceShip.y - 3;
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <spawnBullet+0x98>)
 8001216:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800121a:	3b03      	subs	r3, #3
 800121c:	617b      	str	r3, [r7, #20]
    bullets *am_p;
    if (enemy){
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <spawnBullet+0x26>
        am_p = &enemy_ammo;
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <spawnBullet+0x9c>)
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	e001      	b.n	800122e <spawnBullet+0x2a>
    }else{
        am_p = &ammo;
 800122a:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <spawnBullet+0xa0>)
 800122c:	613b      	str	r3, [r7, #16]
    }
    if(am_p->in_play < MAX_BULLETS && bullet_delay == 0){
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001234:	2b05      	cmp	r3, #5
 8001236:	dc2a      	bgt.n	800128e <spawnBullet+0x8a>
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <spawnBullet+0xa4>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d126      	bne.n	800128e <spawnBullet+0x8a>
        if(am_p->enemy){
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	f993 3000 	ldrsb.w	r3, [r3]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <spawnBullet+0x4a>
            //x_val = read the input from multiplayer;
            y_val = 3;
 800124a:	2303      	movs	r3, #3
 800124c:	617b      	str	r3, [r7, #20]
        }
        am_p->bullet_ar[am_p->in_play].x = x_val;
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	b251      	sxtb	r1, r2
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	460a      	mov	r2, r1
 8001260:	709a      	strb	r2, [r3, #2]
        am_p->bullet_ar[am_p->in_play].y = y_val;
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	b251      	sxtb	r1, r2
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	460a      	mov	r2, r1
 8001274:	70da      	strb	r2, [r3, #3]
        am_p->in_play++;
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	3301      	adds	r3, #1
 8001280:	b2db      	uxtb	r3, r3
 8001282:	b25a      	sxtb	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	705a      	strb	r2, [r3, #1]
        bullet_delay = MAX_DELAY_BULLETS;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <spawnBullet+0xa4>)
 800128a:	220a      	movs	r2, #10
 800128c:	701a      	strb	r2, [r3, #0]
    }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	2000000c 	.word	0x2000000c
 80012a0:	20001550 	.word	0x20001550
 80012a4:	20001540 	.word	0x20001540
 80012a8:	200015a1 	.word	0x200015a1

080012ac <spawnStar>:

void spawnStar(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 80012b0:	4b29      	ldr	r3, [pc, #164]	; (8001358 <spawnStar+0xac>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d145      	bne.n	8001344 <spawnStar+0x98>
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <spawnStar+0xb0>)
 80012ba:	f993 3000 	ldrsb.w	r3, [r3]
 80012be:	2b09      	cmp	r3, #9
 80012c0:	dc40      	bgt.n	8001344 <spawnStar+0x98>
        Star.star_ar[Star.in_play].x = rand() % ((PLAYABLE_MAX - 1) - PLAYABLE_OFFSET) + PLAYABLE_OFFSET;
 80012c2:	f005 fc35 	bl	8006b30 <rand>
 80012c6:	4601      	mov	r1, r0
 80012c8:	4b25      	ldr	r3, [pc, #148]	; (8001360 <spawnStar+0xb4>)
 80012ca:	fb83 2301 	smull	r2, r3, r3, r1
 80012ce:	115a      	asrs	r2, r3, #5
 80012d0:	17cb      	asrs	r3, r1, #31
 80012d2:	1ad2      	subs	r2, r2, r3
 80012d4:	4613      	mov	r3, r2
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	1aca      	subs	r2, r1, r3
 80012e0:	b2d3      	uxtb	r3, r2
 80012e2:	3305      	adds	r3, #5
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <spawnStar+0xb0>)
 80012e8:	f993 3000 	ldrsb.w	r3, [r3]
 80012ec:	b251      	sxtb	r1, r2
 80012ee:	4a1b      	ldr	r2, [pc, #108]	; (800135c <spawnStar+0xb0>)
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	460a      	mov	r2, r1
 80012f6:	705a      	strb	r2, [r3, #1]
        Star.star_ar[Star.in_play].y = 0;
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <spawnStar+0xb0>)
 80012fa:	f993 3000 	ldrsb.w	r3, [r3]
 80012fe:	4a17      	ldr	r2, [pc, #92]	; (800135c <spawnStar+0xb0>)
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	2200      	movs	r2, #0
 8001306:	709a      	strb	r2, [r3, #2]
        star_delay = rand() % ((20 + 1) - 10) + 5;
 8001308:	f005 fc12 	bl	8006b30 <rand>
 800130c:	4601      	mov	r1, r0
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <spawnStar+0xb8>)
 8001310:	fb83 2301 	smull	r2, r3, r3, r1
 8001314:	105a      	asrs	r2, r3, #1
 8001316:	17cb      	asrs	r3, r1, #31
 8001318:	1ad2      	subs	r2, r2, r3
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	1aca      	subs	r2, r1, r3
 8001326:	b2d3      	uxtb	r3, r2
 8001328:	3305      	adds	r3, #5
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <spawnStar+0xac>)
 800132e:	701a      	strb	r2, [r3, #0]
        Star.in_play++;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <spawnStar+0xb0>)
 8001332:	f993 3000 	ldrsb.w	r3, [r3]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	3301      	adds	r3, #1
 800133a:	b2db      	uxtb	r3, r3
 800133c:	b25a      	sxtb	r2, r3
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <spawnStar+0xb0>)
 8001340:	701a      	strb	r2, [r3, #0]
 8001342:	e006      	b.n	8001352 <spawnStar+0xa6>
    }else{
        star_delay--;
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <spawnStar+0xac>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	3b01      	subs	r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <spawnStar+0xac>)
 800134e:	701a      	strb	r2, [r3, #0]
    }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200015a9 	.word	0x200015a9
 800135c:	2000158c 	.word	0x2000158c
 8001360:	76b981db 	.word	0x76b981db
 8001364:	2e8ba2e9 	.word	0x2e8ba2e9

08001368 <moveBullets>:

void moveBullets(){
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
	displayAmmo(DARK_GREY);
 800136e:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8001372:	f000 fb9f 	bl	8001ab4 <displayAmmo>
	for(int i = 0; i < ammo.in_play; i++){
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	e09c      	b.n	80014b6 <moveBullets+0x14e>
		for (int j = 0; j < Comet.in_play; j++){
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	e040      	b.n	8001404 <moveBullets+0x9c>
			if(ammo.bullet_ar[i].x >= Comet.comet_ar[j].x && ammo.bullet_ar[i].x < Comet.comet_ar[j].x + Comet.comet_ar[j].size){
 8001382:	4a55      	ldr	r2, [pc, #340]	; (80014d8 <moveBullets+0x170>)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800138e:	4619      	mov	r1, r3
 8001390:	4a52      	ldr	r2, [pc, #328]	; (80014dc <moveBullets+0x174>)
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	785b      	ldrb	r3, [r3, #1]
 800139a:	4299      	cmp	r1, r3
 800139c:	db2f      	blt.n	80013fe <moveBullets+0x96>
 800139e:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <moveBullets+0x170>)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4a4b      	ldr	r2, [pc, #300]	; (80014dc <moveBullets+0x174>)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	4618      	mov	r0, r3
 80013b8:	4a48      	ldr	r2, [pc, #288]	; (80014dc <moveBullets+0x174>)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80013c4:	4403      	add	r3, r0
 80013c6:	4299      	cmp	r1, r3
 80013c8:	da19      	bge.n	80013fe <moveBullets+0x96>
				if (ammo.bullet_ar[i].y <= Comet.comet_ar[j].y + Comet.comet_ar[j].size - 1){
 80013ca:	4a44      	ldr	r2, [pc, #272]	; (80014dc <moveBullets+0x174>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	789b      	ldrb	r3, [r3, #2]
 80013d4:	4619      	mov	r1, r3
 80013d6:	4a41      	ldr	r2, [pc, #260]	; (80014dc <moveBullets+0x174>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80013e2:	18ca      	adds	r2, r1, r3
 80013e4:	493c      	ldr	r1, [pc, #240]	; (80014d8 <moveBullets+0x170>)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	440b      	add	r3, r1
 80013ec:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dd04      	ble.n	80013fe <moveBullets+0x96>
					//QD << "hit a comet";
					hitComet(i,j);
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 fa8a 	bl	8001910 <hitComet>
					continue;
 80013fc:	bf00      	nop
		for (int j = 0; j < Comet.in_play; j++){
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3301      	adds	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <moveBullets+0x174>)
 8001406:	f993 3000 	ldrsb.w	r3, [r3]
 800140a:	461a      	mov	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4293      	cmp	r3, r2
 8001410:	dbb7      	blt.n	8001382 <moveBullets+0x1a>
				}
			}

		}
		ammo.bullet_ar[i].y--;
 8001412:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <moveBullets+0x170>)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	3b01      	subs	r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	b259      	sxtb	r1, r3
 8001426:	4a2c      	ldr	r2, [pc, #176]	; (80014d8 <moveBullets+0x170>)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	460a      	mov	r2, r1
 8001430:	70da      	strb	r2, [r3, #3]
		if (ammo.bullet_ar[i].y < 0){
 8001432:	4a29      	ldr	r2, [pc, #164]	; (80014d8 <moveBullets+0x170>)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800143e:	2b00      	cmp	r3, #0
 8001440:	da36      	bge.n	80014b0 <moveBullets+0x148>
			send_Bullet(ammo.bullet_ar[i]);
 8001442:	4a25      	ldr	r2, [pc, #148]	; (80014d8 <moveBullets+0x170>)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	885a      	ldrh	r2, [r3, #2]
 800144c:	2300      	movs	r3, #0
 800144e:	f362 030f 	bfi	r3, r2, #0, #16
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fcd6 	bl	8001e04 <send_Bullet>
			for(int j = i; j < MAX_BULLETS - 1; j++){
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	e01c      	b.n	8001498 <moveBullets+0x130>
				ammo.bullet_ar[j].x = ammo.bullet_ar[j+1].x;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3301      	adds	r3, #1
 8001462:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <moveBullets+0x170>)
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800146c:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <moveBullets+0x170>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	460a      	mov	r2, r1
 8001476:	709a      	strb	r2, [r3, #2]
				ammo.bullet_ar[j].y = ammo.bullet_ar[j+1].y;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3301      	adds	r3, #1
 800147c:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <moveBullets+0x170>)
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <moveBullets+0x170>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	460a      	mov	r2, r1
 8001490:	70da      	strb	r2, [r3, #3]
			for(int j = i; j < MAX_BULLETS - 1; j++){
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3301      	adds	r3, #1
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b04      	cmp	r3, #4
 800149c:	dddf      	ble.n	800145e <moveBullets+0xf6>
			}
			ammo.in_play--;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <moveBullets+0x170>)
 80014a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	b25a      	sxtb	r2, r3
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <moveBullets+0x170>)
 80014ae:	705a      	strb	r2, [r3, #1]
	for(int i = 0; i < ammo.in_play; i++){
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3301      	adds	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <moveBullets+0x170>)
 80014b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80014bc:	461a      	mov	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4293      	cmp	r3, r2
 80014c2:	f6ff af5b 	blt.w	800137c <moveBullets+0x14>
		}
	}
	displayAmmo(RED);
 80014c6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80014ca:	f000 faf3 	bl	8001ab4 <displayAmmo>
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20001540 	.word	0x20001540
 80014dc:	20001560 	.word	0x20001560

080014e0 <moveEnemyBullets>:

void moveEnemyBullets(void){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
    if (!in_multiplayer){
 80014e6:	4b5a      	ldr	r3, [pc, #360]	; (8001650 <moveEnemyBullets+0x170>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 80ac 	beq.w	8001648 <moveEnemyBullets+0x168>
        //QD << "not multiplayer";  // change to uart debug
        return;
    }
    for(int i = 0; i < enemy_ammo.in_play; i++){
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	e09f      	b.n	8001636 <moveEnemyBullets+0x156>
        if(enemy_ammo.bullet_ar[i].x <= SpaceShip.x + SPACESHIP_WIDTH / 2 && enemy_ammo.bullet_ar[i].x >= SpaceShip.x - SPACESHIP_WIDTH / 2){
 80014f6:	4a57      	ldr	r2, [pc, #348]	; (8001654 <moveEnemyBullets+0x174>)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001502:	461a      	mov	r2, r3
 8001504:	4b54      	ldr	r3, [pc, #336]	; (8001658 <moveEnemyBullets+0x178>)
 8001506:	f993 3000 	ldrsb.w	r3, [r3]
 800150a:	3302      	adds	r3, #2
 800150c:	429a      	cmp	r2, r3
 800150e:	dc4b      	bgt.n	80015a8 <moveEnemyBullets+0xc8>
 8001510:	4a50      	ldr	r2, [pc, #320]	; (8001654 <moveEnemyBullets+0x174>)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800151c:	461a      	mov	r2, r3
 800151e:	4b4e      	ldr	r3, [pc, #312]	; (8001658 <moveEnemyBullets+0x178>)
 8001520:	f993 3000 	ldrsb.w	r3, [r3]
 8001524:	3b02      	subs	r3, #2
 8001526:	429a      	cmp	r2, r3
 8001528:	db3e      	blt.n	80015a8 <moveEnemyBullets+0xc8>
            if (enemy_ammo.bullet_ar[i].y >= SpaceShip.y - SPACESHIP_HEIGHT / 2 && hit == 0){
 800152a:	4a4a      	ldr	r2, [pc, #296]	; (8001654 <moveEnemyBullets+0x174>)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001536:	461a      	mov	r2, r3
 8001538:	4b47      	ldr	r3, [pc, #284]	; (8001658 <moveEnemyBullets+0x178>)
 800153a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800153e:	3b02      	subs	r3, #2
 8001540:	429a      	cmp	r2, r3
 8001542:	db31      	blt.n	80015a8 <moveEnemyBullets+0xc8>
 8001544:	4b45      	ldr	r3, [pc, #276]	; (800165c <moveEnemyBullets+0x17c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d12d      	bne.n	80015a8 <moveEnemyBullets+0xc8>
                beenHit();
 800154c:	f000 fc3a 	bl	8001dc4 <beenHit>
                for(int j = i; j < MAX_BULLETS - 1; j++){
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	e01c      	b.n	8001590 <moveEnemyBullets+0xb0>
                    enemy_ammo.bullet_ar[j].x = enemy_ammo.bullet_ar[j+1].x;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	3301      	adds	r3, #1
 800155a:	4a3e      	ldr	r2, [pc, #248]	; (8001654 <moveEnemyBullets+0x174>)
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001564:	4a3b      	ldr	r2, [pc, #236]	; (8001654 <moveEnemyBullets+0x174>)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	460a      	mov	r2, r1
 800156e:	709a      	strb	r2, [r3, #2]
                    enemy_ammo.bullet_ar[j].y = enemy_ammo.bullet_ar[j+1].y;
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3301      	adds	r3, #1
 8001574:	4a37      	ldr	r2, [pc, #220]	; (8001654 <moveEnemyBullets+0x174>)
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	f993 1003 	ldrsb.w	r1, [r3, #3]
 800157e:	4a35      	ldr	r2, [pc, #212]	; (8001654 <moveEnemyBullets+0x174>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	460a      	mov	r2, r1
 8001588:	70da      	strb	r2, [r3, #3]
                for(int j = i; j < MAX_BULLETS - 1; j++){
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	3301      	adds	r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b04      	cmp	r3, #4
 8001594:	dddf      	ble.n	8001556 <moveEnemyBullets+0x76>
                }
                enemy_ammo.in_play--;
 8001596:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <moveEnemyBullets+0x174>)
 8001598:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	3b01      	subs	r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	b25a      	sxtb	r2, r3
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <moveEnemyBullets+0x174>)
 80015a6:	705a      	strb	r2, [r3, #1]
            }
        }
        enemy_ammo.bullet_ar[i].y++;
 80015a8:	4a2a      	ldr	r2, [pc, #168]	; (8001654 <moveEnemyBullets+0x174>)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	b259      	sxtb	r1, r3
 80015bc:	4a25      	ldr	r2, [pc, #148]	; (8001654 <moveEnemyBullets+0x174>)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	460a      	mov	r2, r1
 80015c6:	70da      	strb	r2, [r3, #3]
        if (enemy_ammo.bullet_ar[i].y > SCREEN_HEIGHT - 1){
 80015c8:	4a22      	ldr	r2, [pc, #136]	; (8001654 <moveEnemyBullets+0x174>)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80015d4:	2b3b      	cmp	r3, #59	; 0x3b
 80015d6:	dd2b      	ble.n	8001630 <moveEnemyBullets+0x150>
            for(int j = i; j < MAX_BULLETS - 1; j++){
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	e01c      	b.n	8001618 <moveEnemyBullets+0x138>
                enemy_ammo.bullet_ar[j].x = enemy_ammo.bullet_ar[j+1].x;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3301      	adds	r3, #1
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <moveEnemyBullets+0x174>)
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80015ec:	4a19      	ldr	r2, [pc, #100]	; (8001654 <moveEnemyBullets+0x174>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	460a      	mov	r2, r1
 80015f6:	709a      	strb	r2, [r3, #2]
                enemy_ammo.bullet_ar[j].y = enemy_ammo.bullet_ar[j+1].y;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3301      	adds	r3, #1
 80015fc:	4a15      	ldr	r2, [pc, #84]	; (8001654 <moveEnemyBullets+0x174>)
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8001606:	4a13      	ldr	r2, [pc, #76]	; (8001654 <moveEnemyBullets+0x174>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	460a      	mov	r2, r1
 8001610:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_BULLETS - 1; j++){
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3301      	adds	r3, #1
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b04      	cmp	r3, #4
 800161c:	dddf      	ble.n	80015de <moveEnemyBullets+0xfe>
            }
            enemy_ammo.in_play--;
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <moveEnemyBullets+0x174>)
 8001620:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	3b01      	subs	r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	b25a      	sxtb	r2, r3
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <moveEnemyBullets+0x174>)
 800162e:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < enemy_ammo.in_play; i++){
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3301      	adds	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <moveEnemyBullets+0x174>)
 8001638:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800163c:	461a      	mov	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4293      	cmp	r3, r2
 8001642:	f6ff af58 	blt.w	80014f6 <moveEnemyBullets+0x16>
 8001646:	e000      	b.n	800164a <moveEnemyBullets+0x16a>
        return;
 8001648:	bf00      	nop
        }
    }
}
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000011 	.word	0x20000011
 8001654:	20001550 	.word	0x20001550
 8001658:	2000000c 	.word	0x2000000c
 800165c:	20001368 	.word	0x20001368

08001660 <moveComets>:
void moveComets(){
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
	displayComets(DARK_GREY);
 8001666:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800166a:	f000 fa81 	bl	8001b70 <displayComets>
    for (int i = 0; i<Comet.in_play; i++){
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	e097      	b.n	80017a4 <moveComets+0x144>
        for(int j = 0; j < Comet.comet_ar[i].size; j++){
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	e03c      	b.n	80016f4 <moveComets+0x94>
            if(Comet.comet_ar[i].x + j <= SpaceShip.x + SPACESHIP_WIDTH / 2 && Comet.comet_ar[i].x + j >= SpaceShip.x - SPACESHIP_WIDTH / 2){
 800167a:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <moveComets+0x164>)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	785b      	ldrb	r3, [r3, #1]
 8001684:	461a      	mov	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	441a      	add	r2, r3
 800168a:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <moveComets+0x168>)
 800168c:	f993 3000 	ldrsb.w	r3, [r3]
 8001690:	3302      	adds	r3, #2
 8001692:	429a      	cmp	r2, r3
 8001694:	dc2b      	bgt.n	80016ee <moveComets+0x8e>
 8001696:	4a4b      	ldr	r2, [pc, #300]	; (80017c4 <moveComets+0x164>)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	785b      	ldrb	r3, [r3, #1]
 80016a0:	461a      	mov	r2, r3
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	441a      	add	r2, r3
 80016a6:	4b48      	ldr	r3, [pc, #288]	; (80017c8 <moveComets+0x168>)
 80016a8:	f993 3000 	ldrsb.w	r3, [r3]
 80016ac:	3b02      	subs	r3, #2
 80016ae:	429a      	cmp	r2, r3
 80016b0:	db1d      	blt.n	80016ee <moveComets+0x8e>
                if (Comet.comet_ar[i].y + Comet.comet_ar[i].size - 1 >= SpaceShip.y - SPACESHIP_HEIGHT / 2 && hit == 0){
 80016b2:	4a44      	ldr	r2, [pc, #272]	; (80017c4 <moveComets+0x164>)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	789b      	ldrb	r3, [r3, #2]
 80016bc:	4619      	mov	r1, r3
 80016be:	4a41      	ldr	r2, [pc, #260]	; (80017c4 <moveComets+0x164>)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80016ca:	18ca      	adds	r2, r1, r3
 80016cc:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <moveComets+0x168>)
 80016ce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	429a      	cmp	r2, r3
 80016d6:	db0a      	blt.n	80016ee <moveComets+0x8e>
 80016d8:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <moveComets+0x16c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d106      	bne.n	80016ee <moveComets+0x8e>
                    hitComet(420,i);
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80016e6:	f000 f913 	bl	8001910 <hitComet>
                    beenHit();
 80016ea:	f000 fb6b 	bl	8001dc4 <beenHit>
        for(int j = 0; j < Comet.comet_ar[i].size; j++){
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3301      	adds	r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	4a33      	ldr	r2, [pc, #204]	; (80017c4 <moveComets+0x164>)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001700:	461a      	mov	r2, r3
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	4293      	cmp	r3, r2
 8001706:	dbb8      	blt.n	800167a <moveComets+0x1a>
                }
            }
        }

        Comet.comet_ar[i].y++;
 8001708:	4a2e      	ldr	r2, [pc, #184]	; (80017c4 <moveComets+0x164>)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	789b      	ldrb	r3, [r3, #2]
 8001712:	3301      	adds	r3, #1
 8001714:	b2d9      	uxtb	r1, r3
 8001716:	4a2b      	ldr	r2, [pc, #172]	; (80017c4 <moveComets+0x164>)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	460a      	mov	r2, r1
 8001720:	709a      	strb	r2, [r3, #2]
        if (Comet.comet_ar[i].y > SCREEN_HEIGHT - 1){
 8001722:	4a28      	ldr	r2, [pc, #160]	; (80017c4 <moveComets+0x164>)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	789b      	ldrb	r3, [r3, #2]
 800172c:	2b3b      	cmp	r3, #59	; 0x3b
 800172e:	d936      	bls.n	800179e <moveComets+0x13e>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	e027      	b.n	8001786 <moveComets+0x126>
                Comet.comet_ar[j].x = Comet.comet_ar[j+1].x;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3301      	adds	r3, #1
 800173a:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <moveComets+0x164>)
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	7859      	ldrb	r1, [r3, #1]
 8001742:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <moveComets+0x164>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	460a      	mov	r2, r1
 800174c:	705a      	strb	r2, [r3, #1]
                Comet.comet_ar[j].y = Comet.comet_ar[j+1].y;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3301      	adds	r3, #1
 8001752:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <moveComets+0x164>)
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	7899      	ldrb	r1, [r3, #2]
 800175a:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <moveComets+0x164>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	460a      	mov	r2, r1
 8001764:	709a      	strb	r2, [r3, #2]
                Comet.comet_ar[j].size = Comet.comet_ar[j+1].size;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3301      	adds	r3, #1
 800176a:	4a16      	ldr	r2, [pc, #88]	; (80017c4 <moveComets+0x164>)
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8001774:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <moveComets+0x164>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	460a      	mov	r2, r1
 800177e:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3301      	adds	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b08      	cmp	r3, #8
 800178a:	ddd4      	ble.n	8001736 <moveComets+0xd6>
            }
            Comet.in_play--;
 800178c:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <moveComets+0x164>)
 800178e:	f993 3000 	ldrsb.w	r3, [r3]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	3b01      	subs	r3, #1
 8001796:	b2db      	uxtb	r3, r3
 8001798:	b25a      	sxtb	r2, r3
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <moveComets+0x164>)
 800179c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Comet.in_play; i++){
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3301      	adds	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <moveComets+0x164>)
 80017a6:	f993 3000 	ldrsb.w	r3, [r3]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4293      	cmp	r3, r2
 80017b0:	f6ff af60 	blt.w	8001674 <moveComets+0x14>
        }
    }
    displayComets(GREY);
 80017b4:	f249 6096 	movw	r0, #38550	; 0x9696
 80017b8:	f000 f9da 	bl	8001b70 <displayComets>
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20001560 	.word	0x20001560
 80017c8:	2000000c 	.word	0x2000000c
 80017cc:	20001368 	.word	0x20001368

080017d0 <moveStars>:

void moveStars(){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
	displayStars(DARK_GREY);
 80017d6:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80017da:	f000 f939 	bl	8001a50 <displayStars>
    for (int i = 0; i<Star.in_play; i++){
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	e046      	b.n	8001872 <moveStars+0xa2>
        Star.star_ar[i].y++;
 80017e4:	4a2a      	ldr	r2, [pc, #168]	; (8001890 <moveStars+0xc0>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	b259      	sxtb	r1, r3
 80017f8:	4a25      	ldr	r2, [pc, #148]	; (8001890 <moveStars+0xc0>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	460a      	mov	r2, r1
 8001802:	709a      	strb	r2, [r3, #2]
        if (Star.star_ar[i].y > SCREEN_HEIGHT - 4){
 8001804:	4a22      	ldr	r2, [pc, #136]	; (8001890 <moveStars+0xc0>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001810:	2b38      	cmp	r3, #56	; 0x38
 8001812:	dd2b      	ble.n	800186c <moveStars+0x9c>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	e01c      	b.n	8001854 <moveStars+0x84>
                Star.star_ar[j].x = Star.star_ar[j+1].x;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <moveStars+0xc0>)
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8001828:	4a19      	ldr	r2, [pc, #100]	; (8001890 <moveStars+0xc0>)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	460a      	mov	r2, r1
 8001832:	705a      	strb	r2, [r3, #1]
                Star.star_ar[j].y = Star.star_ar[j+1].y;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	4a15      	ldr	r2, [pc, #84]	; (8001890 <moveStars+0xc0>)
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001842:	4a13      	ldr	r2, [pc, #76]	; (8001890 <moveStars+0xc0>)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	460a      	mov	r2, r1
 800184c:	709a      	strb	r2, [r3, #2]
            for(int j = i; j < MAX_COMETS - 1; j++){
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	2b08      	cmp	r3, #8
 8001858:	dddf      	ble.n	800181a <moveStars+0x4a>
            }
            Star.in_play--;
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <moveStars+0xc0>)
 800185c:	f993 3000 	ldrsb.w	r3, [r3]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	3b01      	subs	r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	b25a      	sxtb	r2, r3
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <moveStars+0xc0>)
 800186a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Star.in_play; i++){
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3301      	adds	r3, #1
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <moveStars+0xc0>)
 8001874:	f993 3000 	ldrsb.w	r3, [r3]
 8001878:	461a      	mov	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4293      	cmp	r3, r2
 800187e:	dbb1      	blt.n	80017e4 <moveStars+0x14>
        }
    }
    displayStars(YELLOW);
 8001880:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001884:	f000 f8e4 	bl	8001a50 <displayStars>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2000158c 	.word	0x2000158c

08001894 <moveSpaceship>:

void moveSpaceship(int direction){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	displaySpaceShip(DARK_GREY);
 800189c:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80018a0:	f000 f9a6 	bl	8001bf0 <displaySpaceShip>
    if(direction < 0){
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da15      	bge.n	80018d6 <moveSpaceship+0x42>
        SpaceShip.x--;
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <moveSpaceship+0x74>)
 80018ac:	f993 3000 	ldrsb.w	r3, [r3]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	b25a      	sxtb	r2, r3
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <moveSpaceship+0x74>)
 80018ba:	701a      	strb	r2, [r3, #0]
        if(SpaceShip.x < SPACESHIP_WIDTH/2) {
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <moveSpaceship+0x74>)
 80018be:	f993 3000 	ldrsb.w	r3, [r3]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	dc02      	bgt.n	80018cc <moveSpaceship+0x38>
            SpaceShip.x = (SPACESHIP_WIDTH/2);
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <moveSpaceship+0x74>)
 80018c8:	2202      	movs	r2, #2
 80018ca:	701a      	strb	r2, [r3, #0]
        }
        displaySpaceShip(RED);
 80018cc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80018d0:	f000 f98e 	bl	8001bf0 <displaySpaceShip>
        return;
 80018d4:	e015      	b.n	8001902 <moveSpaceship+0x6e>
    }
    SpaceShip.x++;
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <moveSpaceship+0x74>)
 80018d8:	f993 3000 	ldrsb.w	r3, [r3]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	b25a      	sxtb	r2, r3
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <moveSpaceship+0x74>)
 80018e6:	701a      	strb	r2, [r3, #0]
    if(SpaceShip.x > SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1) {
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <moveSpaceship+0x74>)
 80018ea:	f993 3000 	ldrsb.w	r3, [r3]
 80018ee:	2b4d      	cmp	r3, #77	; 0x4d
 80018f0:	dd02      	ble.n	80018f8 <moveSpaceship+0x64>
        SpaceShip.x = SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1;
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <moveSpaceship+0x74>)
 80018f4:	224d      	movs	r2, #77	; 0x4d
 80018f6:	701a      	strb	r2, [r3, #0]
    }
    displaySpaceShip(spaceshipCurrentColor);
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <moveSpaceship+0x78>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f977 	bl	8001bf0 <displaySpaceShip>
}
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	2000000c 	.word	0x2000000c
 800190c:	2000000e 	.word	0x2000000e

08001910 <hitComet>:

void hitComet(int bul,int com){
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b087      	sub	sp, #28
 8001914:	af02      	add	r7, sp, #8
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
    money += Comet.comet_ar[com].coins;
 800191a:	4a4a      	ldr	r2, [pc, #296]	; (8001a44 <hitComet+0x134>)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001926:	461a      	mov	r2, r3
 8001928:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <hitComet+0x138>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4413      	add	r3, r2
 800192e:	4a46      	ldr	r2, [pc, #280]	; (8001a48 <hitComet+0x138>)
 8001930:	6013      	str	r3, [r2, #0]
    Displ_FillArea(Comet.comet_ar[com].x * 4, Comet.comet_ar[com].y * 4, Comet.comet_ar[com].size * 4, Comet.comet_ar[com].size * 4, DARK_GREY);
 8001932:	4a44      	ldr	r2, [pc, #272]	; (8001a44 <hitComet+0x134>)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	785b      	ldrb	r3, [r3, #1]
 800193c:	b29b      	uxth	r3, r3
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	b298      	uxth	r0, r3
 8001942:	4a40      	ldr	r2, [pc, #256]	; (8001a44 <hitComet+0x134>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	789b      	ldrb	r3, [r3, #2]
 800194c:	b29b      	uxth	r3, r3
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	b299      	uxth	r1, r3
 8001952:	4a3c      	ldr	r2, [pc, #240]	; (8001a44 <hitComet+0x134>)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800195e:	b29b      	uxth	r3, r3
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	b29a      	uxth	r2, r3
 8001964:	4c37      	ldr	r4, [pc, #220]	; (8001a44 <hitComet+0x134>)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4423      	add	r3, r4
 800196c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001970:	b29b      	uxth	r3, r3
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	b29b      	uxth	r3, r3
 8001976:	f642 442c 	movw	r4, #11308	; 0x2c2c
 800197a:	9400      	str	r4, [sp, #0]
 800197c:	f000 fe50 	bl	8002620 <Displ_FillArea>
    if(bul != 420){
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001986:	d022      	beq.n	80019ce <hitComet+0xbe>
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e01c      	b.n	80019c8 <hitComet+0xb8>
            ammo.bullet_ar[j].x = ammo.bullet_ar[j+1].x;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3301      	adds	r3, #1
 8001992:	4a2e      	ldr	r2, [pc, #184]	; (8001a4c <hitComet+0x13c>)
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800199c:	4a2b      	ldr	r2, [pc, #172]	; (8001a4c <hitComet+0x13c>)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	460a      	mov	r2, r1
 80019a6:	709a      	strb	r2, [r3, #2]
            ammo.bullet_ar[j].y = ammo.bullet_ar[j+1].y;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3301      	adds	r3, #1
 80019ac:	4a27      	ldr	r2, [pc, #156]	; (8001a4c <hitComet+0x13c>)
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80019b6:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <hitComet+0x13c>)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	460a      	mov	r2, r1
 80019c0:	70da      	strb	r2, [r3, #3]
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3301      	adds	r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	dddf      	ble.n	800198e <hitComet+0x7e>
        }
        //ammo.in_play--;
    }

    for(int j = com; j < MAX_COMETS - 1; j++){
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	e027      	b.n	8001a24 <hitComet+0x114>
        Comet.comet_ar[j].x = Comet.comet_ar[j+1].x;
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	3301      	adds	r3, #1
 80019d8:	4a1a      	ldr	r2, [pc, #104]	; (8001a44 <hitComet+0x134>)
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	7859      	ldrb	r1, [r3, #1]
 80019e0:	4a18      	ldr	r2, [pc, #96]	; (8001a44 <hitComet+0x134>)
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	460a      	mov	r2, r1
 80019ea:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[j].y = Comet.comet_ar[j+1].y;
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	3301      	adds	r3, #1
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <hitComet+0x134>)
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	7899      	ldrb	r1, [r3, #2]
 80019f8:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <hitComet+0x134>)
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	460a      	mov	r2, r1
 8001a02:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[j].size = Comet.comet_ar[j+1].size;
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	3301      	adds	r3, #1
 8001a08:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <hitComet+0x134>)
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8001a12:	4a0c      	ldr	r2, [pc, #48]	; (8001a44 <hitComet+0x134>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	460a      	mov	r2, r1
 8001a1c:	70da      	strb	r2, [r3, #3]
    for(int j = com; j < MAX_COMETS - 1; j++){
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3301      	adds	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	ddd4      	ble.n	80019d4 <hitComet+0xc4>
    }
    Comet.in_play--;
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <hitComet+0x134>)
 8001a2c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	b25a      	sxtb	r2, r3
 8001a38:	4b02      	ldr	r3, [pc, #8]	; (8001a44 <hitComet+0x134>)
 8001a3a:	701a      	strb	r2, [r3, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd90      	pop	{r4, r7, pc}
 8001a44:	20001560 	.word	0x20001560
 8001a48:	200015a4 	.word	0x200015a4
 8001a4c:	20001540 	.word	0x20001540

08001a50 <displayStars>:




void displayStars(uint16_t color){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < Star.in_play; i++){
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	e01a      	b.n	8001a96 <displayStars+0x46>
    	Displ_FillArea(Star.star_ar[i].x * 4, Star.star_ar[i].y * 4, 4, 4, color);
 8001a60:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <displayStars+0x60>)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	b298      	uxth	r0, r3
 8001a72:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <displayStars+0x60>)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	b299      	uxth	r1, r3
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2304      	movs	r3, #4
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	f000 fdc8 	bl	8002620 <Displ_FillArea>
    for(int i = 0; i < Star.in_play; i++){
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3301      	adds	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <displayStars+0x60>)
 8001a98:	f993 3000 	ldrsb.w	r3, [r3]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	dbdd      	blt.n	8001a60 <displayStars+0x10>
    }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000158c 	.word	0x2000158c

08001ab4 <displayAmmo>:

void displayAmmo(uint16_t color){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < ammo.in_play; i++){
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	e01a      	b.n	8001afa <displayAmmo+0x46>
        Displ_FillArea(ammo.bullet_ar[i].x * 4, ammo.bullet_ar[i].y * 4, 4, 4, color);
 8001ac4:	4a27      	ldr	r2, [pc, #156]	; (8001b64 <displayAmmo+0xb0>)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	b298      	uxth	r0, r3
 8001ad6:	4a23      	ldr	r2, [pc, #140]	; (8001b64 <displayAmmo+0xb0>)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	b299      	uxth	r1, r3
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2304      	movs	r3, #4
 8001aee:	2204      	movs	r2, #4
 8001af0:	f000 fd96 	bl	8002620 <Displ_FillArea>
    for(int i = 0; i < ammo.in_play; i++){
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3301      	adds	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <displayAmmo+0xb0>)
 8001afc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b00:	461a      	mov	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4293      	cmp	r3, r2
 8001b06:	dbdd      	blt.n	8001ac4 <displayAmmo+0x10>
    }
    if(in_multiplayer){
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <displayAmmo+0xb4>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d025      	beq.n	8001b5c <displayAmmo+0xa8>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	e01b      	b.n	8001b4e <displayAmmo+0x9a>
            Displ_FillArea(enemy_ammo.bullet_ar[i].x * 4, enemy_ammo.bullet_ar[i].y * 4, 4, 4, LIGHT_BLUE);
 8001b16:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <displayAmmo+0xb8>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	b298      	uxth	r0, r3
 8001b28:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <displayAmmo+0xb8>)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	b299      	uxth	r1, r3
 8001b3a:	f24f 73db 	movw	r3, #63451	; 0xf7db
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	2304      	movs	r3, #4
 8001b42:	2204      	movs	r2, #4
 8001b44:	f000 fd6c 	bl	8002620 <Displ_FillArea>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <displayAmmo+0xb8>)
 8001b50:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b54:	461a      	mov	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	dbdc      	blt.n	8001b16 <displayAmmo+0x62>
        }
    }
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20001540 	.word	0x20001540
 8001b68:	20000011 	.word	0x20000011
 8001b6c:	20001550 	.word	0x20001550

08001b70 <displayComets>:

void displayComets(uint16_t color){
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	4603      	mov	r3, r0
 8001b78:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < Comet.in_play; i++){
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	e029      	b.n	8001bd4 <displayComets+0x64>
        Displ_FillArea(Comet.comet_ar[i].x * 4, Comet.comet_ar[i].y  * 4, Comet.comet_ar[i].size * 4, Comet.comet_ar[i].size * 4, color);
 8001b80:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <displayComets+0x7c>)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	785b      	ldrb	r3, [r3, #1]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	b298      	uxth	r0, r3
 8001b90:	4a16      	ldr	r2, [pc, #88]	; (8001bec <displayComets+0x7c>)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	789b      	ldrb	r3, [r3, #2]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	4a12      	ldr	r2, [pc, #72]	; (8001bec <displayComets+0x7c>)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	4c0e      	ldr	r4, [pc, #56]	; (8001bec <displayComets+0x7c>)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4423      	add	r3, r4
 8001bba:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	b29c      	uxth	r4, r3
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	4623      	mov	r3, r4
 8001bca:	f000 fd29 	bl	8002620 <Displ_FillArea>
    for (int i = 0; i < Comet.in_play; i++){
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <displayComets+0x7c>)
 8001bd6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4293      	cmp	r3, r2
 8001be0:	dbce      	blt.n	8001b80 <displayComets+0x10>
    }
}
 8001be2:	bf00      	nop
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	20001560 	.word	0x20001560

08001bf0 <displaySpaceShip>:

void displaySpaceShip(uint16_t color){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(SpaceShip.x*4 - 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <displaySpaceShip+0x80>)
 8001bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8001c00:	3b02      	subs	r3, #2
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	b298      	uxth	r0, r3
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2310      	movs	r3, #16
 8001c0e:	2204      	movs	r2, #4
 8001c10:	21d8      	movs	r1, #216	; 0xd8
 8001c12:	f000 fd05 	bl	8002620 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 + 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <displaySpaceShip+0x80>)
 8001c18:	f993 3000 	ldrsb.w	r3, [r3]
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	b298      	uxth	r0, r3
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2310      	movs	r3, #16
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	21d8      	movs	r1, #216	; 0xd8
 8001c2e:	f000 fcf7 	bl	8002620 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 - 4, SCREEN_HEIGHT*4 -20, 12, 4, color);
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <displaySpaceShip+0x80>)
 8001c34:	f993 3000 	ldrsb.w	r3, [r3]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	b298      	uxth	r0, r3
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2304      	movs	r3, #4
 8001c46:	220c      	movs	r2, #12
 8001c48:	21dc      	movs	r1, #220	; 0xdc
 8001c4a:	f000 fce9 	bl	8002620 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4, SCREEN_HEIGHT*4 -28, 4, 16, color);
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <displaySpaceShip+0x80>)
 8001c50:	f993 3000 	ldrsb.w	r3, [r3]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	b298      	uxth	r0, r3
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2310      	movs	r3, #16
 8001c60:	2204      	movs	r2, #4
 8001c62:	21d4      	movs	r1, #212	; 0xd4
 8001c64:	f000 fcdc 	bl	8002620 <Displ_FillArea>

}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	2000000c 	.word	0x2000000c

08001c74 <displayLives>:

void displayLives(){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af02      	add	r7, sp, #8
    for(int i = 0; i < lives; i++){
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	e013      	b.n	8001ca8 <displayLives+0x34>
    	Displ_FillArea(HEARTS_X+HEARTS_OFFSET*i, HEARTS_Y, 4, 4, LIGHT_GREEN);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	0052      	lsls	r2, r2, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3308      	adds	r3, #8
 8001c90:	b298      	uxth	r0, r3
 8001c92:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2304      	movs	r3, #4
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	2108      	movs	r1, #8
 8001c9e:	f000 fcbf 	bl	8002620 <Displ_FillArea>
    for(int i = 0; i < lives; i++){
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <displayLives+0x90>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	dbe5      	blt.n	8001c80 <displayLives+0xc>
    }
    if(lives < 3){
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <displayLives+0x90>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d81f      	bhi.n	8001cfc <displayLives+0x88>
    	for(int i = 0; i < 3 - lives; i++){
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	e015      	b.n	8001cee <displayLives+0x7a>
    		Displ_FillArea(HEARTS_X+HEARTS_OFFSET*(3-i), HEARTS_Y, 4, 4, DARK_GREY);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f1c3 0303 	rsb	r3, r3, #3
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	0052      	lsls	r2, r2, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3308      	adds	r3, #8
 8001cd6:	b298      	uxth	r0, r3
 8001cd8:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2304      	movs	r3, #4
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	2108      	movs	r1, #8
 8001ce4:	f000 fc9c 	bl	8002620 <Displ_FillArea>
    	for(int i = 0; i < 3 - lives; i++){
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <displayLives+0x90>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	f1c3 0303 	rsb	r3, r3, #3
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	dbe2      	blt.n	8001cc2 <displayLives+0x4e>
    	}
    }
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000000a 	.word	0x2000000a

08001d08 <spaceShipHitColorToggle>:


void spaceShipHitColorToggle(){
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
    if(spaceshipCurrentColor == RED && hit % 10 == 0){
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <spaceShipHitColorToggle+0x84>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8001d14:	d112      	bne.n	8001d3c <spaceShipHitColorToggle+0x34>
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <spaceShipHitColorToggle+0x88>)
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <spaceShipHitColorToggle+0x8c>)
 8001d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d20:	08d9      	lsrs	r1, r3, #3
 8001d22:	460b      	mov	r3, r1
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d104      	bne.n	8001d3c <spaceShipHitColorToggle+0x34>
        spaceshipCurrentColor = WHITE;
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <spaceShipHitColorToggle+0x84>)
 8001d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d38:	801a      	strh	r2, [r3, #0]
 8001d3a:	e011      	b.n	8001d60 <spaceShipHitColorToggle+0x58>
    }else if(hit % 10 == 0){
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <spaceShipHitColorToggle+0x88>)
 8001d3e:	781a      	ldrb	r2, [r3, #0]
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <spaceShipHitColorToggle+0x8c>)
 8001d42:	fba3 1302 	umull	r1, r3, r3, r2
 8001d46:	08d9      	lsrs	r1, r3, #3
 8001d48:	460b      	mov	r3, r1
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d103      	bne.n	8001d60 <spaceShipHitColorToggle+0x58>
        spaceshipCurrentColor = RED;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <spaceShipHitColorToggle+0x84>)
 8001d5a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001d5e:	801a      	strh	r2, [r3, #0]
    }
    if(hit < hit_graph_counter){
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <spaceShipHitColorToggle+0x88>)
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <spaceShipHitColorToggle+0x90>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d206      	bcs.n	8001d7a <spaceShipHitColorToggle+0x72>
        hit++;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <spaceShipHitColorToggle+0x88>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <spaceShipHitColorToggle+0x88>)
 8001d76:	701a      	strb	r2, [r3, #0]
    }else{
        hit = 0;
    }
}
 8001d78:	e002      	b.n	8001d80 <spaceShipHitColorToggle+0x78>
        hit = 0;
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <spaceShipHitColorToggle+0x88>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	2000000e 	.word	0x2000000e
 8001d90:	20001368 	.word	0x20001368
 8001d94:	cccccccd 	.word	0xcccccccd
 8001d98:	20000010 	.word	0x20000010

08001d9c <delayBullet>:

void delayBullet(){
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
    if (bullet_delay > 0){
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <delayBullet+0x24>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <delayBullet+0x18>
        bullet_delay--;
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <delayBullet+0x24>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <delayBullet+0x24>)
 8001db2:	701a      	strb	r2, [r3, #0]
    }
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	200015a1 	.word	0x200015a1

08001dc4 <beenHit>:

void beenHit(){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
    hit = 1;
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <beenHit+0x34>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
    lives--;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <beenHit+0x38>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <beenHit+0x38>)
 8001dd8:	701a      	strb	r2, [r3, #0]
    if(lives <= 0){
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <beenHit+0x38>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d107      	bne.n	8001df2 <beenHit+0x2e>
        play = 0;
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <beenHit+0x3c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
        hit = 0;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <beenHit+0x34>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
        initSpaceInvaders();
 8001dee:	f7ff f8b7 	bl	8000f60 <initSpaceInvaders>

    }
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20001368 	.word	0x20001368
 8001dfc:	2000000a 	.word	0x2000000a
 8001e00:	2000000b 	.word	0x2000000b

08001e04 <send_Bullet>:

void send_Bullet(point bullet){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	80b8      	strh	r0, [r7, #4]
    if(connected && bullet.y != -2){
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <send_Bullet+0x94>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d03c      	beq.n	8001e8e <send_Bullet+0x8a>
 8001e14:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e18:	f113 0f02 	cmn.w	r3, #2
 8001e1c:	d037      	beq.n	8001e8e <send_Bullet+0x8a>
        //QD << "a bullet has been send to the other player at x:" << bullet.x;  // change to uart debug
        if(enemy_ammo.in_play < MAX_BULLETS){
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <send_Bullet+0x98>)
 8001e20:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	dc2c      	bgt.n	8001e82 <send_Bullet+0x7e>
            enemy_ammo.bullet_ar[enemy_ammo.in_play].x = rand() % ((PLAYABLE_MAX - 1) - PLAYABLE_OFFSET) + PLAYABLE_OFFSET;
 8001e28:	f004 fe82 	bl	8006b30 <rand>
 8001e2c:	4601      	mov	r1, r0
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <send_Bullet+0x9c>)
 8001e30:	fb83 2301 	smull	r2, r3, r3, r1
 8001e34:	115a      	asrs	r2, r3, #5
 8001e36:	17cb      	asrs	r3, r1, #31
 8001e38:	1ad2      	subs	r2, r2, r3
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	1aca      	subs	r2, r1, r3
 8001e46:	b2d3      	uxtb	r3, r2
 8001e48:	3305      	adds	r3, #5
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <send_Bullet+0x98>)
 8001e4e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e52:	b251      	sxtb	r1, r2
 8001e54:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <send_Bullet+0x98>)
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	460a      	mov	r2, r1
 8001e5c:	709a      	strb	r2, [r3, #2]
            enemy_ammo.bullet_ar[enemy_ammo.in_play].y = 3;
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <send_Bullet+0x98>)
 8001e60:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <send_Bullet+0x98>)
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	70da      	strb	r2, [r3, #3]
            enemy_ammo.in_play++;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <send_Bullet+0x98>)
 8001e70:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	b25a      	sxtb	r2, r3
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <send_Bullet+0x98>)
 8001e7e:	705a      	strb	r2, [r3, #1]
        }else{
            star_delay--;
        }
    }
}
 8001e80:	e005      	b.n	8001e8e <send_Bullet+0x8a>
            star_delay--;
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <send_Bullet+0xa0>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <send_Bullet+0xa0>)
 8001e8c:	701a      	strb	r2, [r3, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000153d 	.word	0x2000153d
 8001e9c:	20001550 	.word	0x20001550
 8001ea0:	76b981db 	.word	0x76b981db
 8001ea4:	200015a9 	.word	0x200015a9

08001ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_MspInit+0x44>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_MspInit+0x44>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6193      	str	r3, [r2, #24]
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <HAL_MspInit+0x44>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_MspInit+0x44>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <HAL_MspInit+0x44>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	61d3      	str	r3, [r2, #28]
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_MspInit+0x44>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000

08001ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_I2C_MspInit+0x7c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d127      	bne.n	8001f62 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_I2C_MspInit+0x80>)
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	4a16      	ldr	r2, [pc, #88]	; (8001f70 <HAL_I2C_MspInit+0x80>)
 8001f18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f1c:	6153      	str	r3, [r2, #20]
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_I2C_MspInit+0x80>)
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f2e:	2312      	movs	r3, #18
 8001f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	480b      	ldr	r0, [pc, #44]	; (8001f74 <HAL_I2C_MspInit+0x84>)
 8001f46:	f001 f893 	bl	8003070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_I2C_MspInit+0x80>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <HAL_I2C_MspInit+0x80>)
 8001f50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f54:	61d3      	str	r3, [r2, #28]
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_I2C_MspInit+0x80>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40005800 	.word	0x40005800
 8001f70:	40021000 	.word	0x40021000
 8001f74:	48001400 	.word	0x48001400

08001f78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <HAL_SPI_MspInit+0x7c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d128      	bne.n	8001fec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <HAL_SPI_MspInit+0x80>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <HAL_SPI_MspInit+0x80>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_SPI_MspInit+0x80>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_SPI_MspInit+0x80>)
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <HAL_SPI_MspInit+0x80>)
 8001fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fbc:	6153      	str	r3, [r2, #20]
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_SPI_MspInit+0x80>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8001fca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fdc:	2305      	movs	r3, #5
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <HAL_SPI_MspInit+0x84>)
 8001fe8:	f001 f842 	bl	8003070 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fec:	bf00      	nop
 8001fee:	3728      	adds	r7, #40	; 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40003800 	.word	0x40003800
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	48000400 	.word	0x48000400

08002000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	; 0x30
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2f      	ldr	r2, [pc, #188]	; (80020dc <HAL_UART_MspInit+0xdc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d129      	bne.n	8002076 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002022:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <HAL_UART_MspInit+0xe0>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	4a2e      	ldr	r2, [pc, #184]	; (80020e0 <HAL_UART_MspInit+0xe0>)
 8002028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202c:	61d3      	str	r3, [r2, #28]
 800202e:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <HAL_UART_MspInit+0xe0>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_UART_MspInit+0xe0>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <HAL_UART_MspInit+0xe0>)
 8002040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002044:	6153      	str	r3, [r2, #20]
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <HAL_UART_MspInit+0xe0>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002052:	230c      	movs	r3, #12
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002062:	2307      	movs	r3, #7
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	f107 031c 	add.w	r3, r7, #28
 800206a:	4619      	mov	r1, r3
 800206c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002070:	f000 fffe 	bl	8003070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002074:	e02d      	b.n	80020d2 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <HAL_UART_MspInit+0xe4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d128      	bne.n	80020d2 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <HAL_UART_MspInit+0xe0>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <HAL_UART_MspInit+0xe0>)
 8002086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208a:	61d3      	str	r3, [r2, #28]
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_UART_MspInit+0xe0>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <HAL_UART_MspInit+0xe0>)
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	4a10      	ldr	r2, [pc, #64]	; (80020e0 <HAL_UART_MspInit+0xe0>)
 800209e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a2:	6153      	str	r3, [r2, #20]
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_UART_MspInit+0xe0>)
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020be:	2303      	movs	r3, #3
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020c2:	2307      	movs	r3, #7
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	4806      	ldr	r0, [pc, #24]	; (80020e8 <HAL_UART_MspInit+0xe8>)
 80020ce:	f000 ffcf 	bl	8003070 <HAL_GPIO_Init>
}
 80020d2:	bf00      	nop
 80020d4:	3730      	adds	r7, #48	; 0x30
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40004400 	.word	0x40004400
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40004800 	.word	0x40004800
 80020e8:	48000400 	.word	0x48000400

080020ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <NMI_Handler+0x4>

080020f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f6:	e7fe      	b.n	80020f6 <HardFault_Handler+0x4>

080020f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020fc:	e7fe      	b.n	80020fc <MemManage_Handler+0x4>

080020fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002102:	e7fe      	b.n	8002102 <BusFault_Handler+0x4>

08002104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <UsageFault_Handler+0x4>

0800210a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002138:	f000 fe44 	bl	8002dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}

08002140 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 8002144:	2001      	movs	r0, #1
 8002146:	f001 f935 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}

0800214e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 8002152:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002156:	f001 f92d 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 800215a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800215e:	f001 f929 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8002162:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002166:	f001 f925 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}

0800216e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  return 1;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_kill>:

int _kill(int pid, int sig)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002188:	f004 fbe4 	bl	8006954 <__errno>
 800218c:	4603      	mov	r3, r0
 800218e:	2216      	movs	r2, #22
 8002190:	601a      	str	r2, [r3, #0]
  return -1;
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <_exit>:

void _exit (int status)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021a6:	f04f 31ff 	mov.w	r1, #4294967295
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffe7 	bl	800217e <_kill>
  while (1) {}    /* Make sure we hang here */
 80021b0:	e7fe      	b.n	80021b0 <_exit+0x12>

080021b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e00a      	b.n	80021da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021c4:	f3af 8000 	nop.w
 80021c8:	4601      	mov	r1, r0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	60ba      	str	r2, [r7, #8]
 80021d0:	b2ca      	uxtb	r2, r1
 80021d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	3301      	adds	r3, #1
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	429a      	cmp	r2, r3
 80021e0:	dbf0      	blt.n	80021c4 <_read+0x12>
  }

  return len;
 80021e2:	687b      	ldr	r3, [r7, #4]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_close>:
  }
  return len;
}

int _close(int file)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002214:	605a      	str	r2, [r3, #4]
  return 0;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <_isatty>:

int _isatty(int file)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800222c:	2301      	movs	r3, #1
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800223a:	b480      	push	{r7}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <_sbrk+0x5c>)
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <_sbrk+0x60>)
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <_sbrk+0x64>)
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <_sbrk+0x68>)
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	429a      	cmp	r2, r3
 8002282:	d207      	bcs.n	8002294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002284:	f004 fb66 	bl	8006954 <__errno>
 8002288:	4603      	mov	r3, r0
 800228a:	220c      	movs	r2, #12
 800228c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	e009      	b.n	80022a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <_sbrk+0x64>)
 80022a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a6:	68fb      	ldr	r3, [r7, #12]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20004000 	.word	0x20004000
 80022b4:	00000400 	.word	0x00000400
 80022b8:	200015ac 	.word	0x200015ac
 80022bc:	20001658 	.word	0x20001658

080022c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <SystemInit+0x20>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <SystemInit+0x20>)
 80022cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 80022e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f0:	f001 f830 	bl	8003354 <HAL_GPIO_ReadPin>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d017      	beq.n	800232a <Displ_Select+0x46>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 80022fa:	2201      	movs	r2, #1
 80022fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002300:	480b      	ldr	r0, [pc, #44]	; (8002330 <Displ_Select+0x4c>)
 8002302:	f001 f83f 	bl	8003384 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <Displ_Select+0x50>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	490a      	ldr	r1, [pc, #40]	; (8002334 <Displ_Select+0x50>)
 800230c:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8002310:	4013      	ands	r3, r2
 8002312:	600b      	str	r3, [r1, #0]
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <Displ_Select+0x50>)
 8002316:	4a07      	ldr	r2, [pc, #28]	; (8002334 <Displ_Select+0x50>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 800231c:	2200      	movs	r2, #0
 800231e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002326:	f001 f82d 	bl	8003384 <HAL_GPIO_WritePin>
		}
	}
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	48000400 	.word	0x48000400
 8002334:	40003800 	.word	0x40003800

08002338 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6039      	str	r1, [r7, #0]
 8002340:	4611      	mov	r1, r2
 8002342:	461a      	mov	r2, r3
 8002344:	4603      	mov	r3, r0
 8002346:	71fb      	strb	r3, [r7, #7]
 8002348:	460b      	mov	r3, r1
 800234a:	80bb      	strh	r3, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8002350:	bf00      	nop
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <Displ_Transmit+0x90>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0fa      	beq.n	8002352 <Displ_Transmit+0x1a>

	Displ_Select();
 800235c:	f7ff ffc2 	bl	80022e4 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	461a      	mov	r2, r3
 8002364:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236c:	f001 f80a 	bl	8003384 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8002370:	79bb      	ldrb	r3, [r7, #6]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8002376:	88bb      	ldrh	r3, [r7, #4]
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	4413      	add	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	e00b      	b.n	800239c <Displ_Transmit+0x64>
			*data32=__REV16(*data32);
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	ba5b      	rev16	r3, r3
 800238e:	60bb      	str	r3, [r7, #8]
  return result;
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3304      	adds	r3, #4
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3ef      	bcc.n	8002384 <Displ_Transmit+0x4c>
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <Displ_Transmit+0x90>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 80023aa:	88ba      	ldrh	r2, [r7, #4]
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
 80023b0:	6839      	ldr	r1, [r7, #0]
 80023b2:	4806      	ldr	r0, [pc, #24]	; (80023cc <Displ_Transmit+0x94>)
 80023b4:	f003 fbd1 	bl	8005b5a <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <Displ_Transmit+0x90>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000018 	.word	0x20000018
 80023cc:	200013c0 	.word	0x200013c0

080023d0 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 80023da:	1df9      	adds	r1, r7, #7
 80023dc:	2300      	movs	r3, #0
 80023de:	2201      	movs	r2, #1
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7ff ffa9 	bl	8002338 <Displ_Transmit>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	4613      	mov	r3, r2
 80023fa:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	b29a      	uxth	r2, r3
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	68f9      	ldr	r1, [r7, #12]
 800240a:	2001      	movs	r0, #1
 800240c:	f7ff ff94 	bl	8002338 <Displ_Transmit>
 8002410:	e000      	b.n	8002414 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8002412:	bf00      	nop
}
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
	Displ_Select();
 8002420:	f7ff ff60 	bl	80022e4 <Displ_Select>

	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8002424:	2200      	movs	r2, #0
 8002426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800242a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242e:	f000 ffa9 	bl	8003384 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002432:	2001      	movs	r0, #1
 8002434:	f000 fce6 	bl	8002e04 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8002438:	2201      	movs	r2, #1
 800243a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800243e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002442:	f000 ff9f 	bl	8003384 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8002446:	2096      	movs	r0, #150	; 0x96
 8002448:	f000 fcdc 	bl	8002e04 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 800244c:	203a      	movs	r0, #58	; 0x3a
 800244e:	f7ff ffbf 	bl	80023d0 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8002452:	2200      	movs	r2, #0
 8002454:	2101      	movs	r1, #1
 8002456:	4810      	ldr	r0, [pc, #64]	; (8002498 <ILI9XXX_Init+0x7c>)
 8002458:	f7ff ffc9 	bl	80023ee <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 800245c:	20b0      	movs	r0, #176	; 0xb0
 800245e:	f7ff ffb7 	bl	80023d0 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8002462:	2200      	movs	r2, #0
 8002464:	2101      	movs	r1, #1
 8002466:	480d      	ldr	r0, [pc, #52]	; (800249c <ILI9XXX_Init+0x80>)
 8002468:	f7ff ffc1 	bl	80023ee <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 800246c:	20b0      	movs	r0, #176	; 0xb0
 800246e:	f7ff ffaf 	bl	80023d0 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8002472:	2200      	movs	r2, #0
 8002474:	2101      	movs	r1, #1
 8002476:	4809      	ldr	r0, [pc, #36]	; (800249c <ILI9XXX_Init+0x80>)
 8002478:	f7ff ffb9 	bl	80023ee <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 800247c:	2011      	movs	r0, #17
 800247e:	f7ff ffa7 	bl	80023d0 <Displ_WriteCommand>
	HAL_Delay(120);
 8002482:	2078      	movs	r0, #120	; 0x78
 8002484:	f000 fcbe 	bl	8002e04 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8002488:	2029      	movs	r0, #41	; 0x29
 800248a:	f7ff ffa1 	bl	80023d0 <Displ_WriteCommand>
	HAL_Delay(5);
 800248e:	2005      	movs	r0, #5
 8002490:	f000 fcb8 	bl	8002e04 <HAL_Delay>

}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}
 8002498:	08007c70 	.word	0x08007c70
 800249c:	08007c74 	.word	0x08007c74

080024a0 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4604      	mov	r4, r0
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	461a      	mov	r2, r3
 80024ae:	4623      	mov	r3, r4
 80024b0:	80fb      	strh	r3, [r7, #6]
 80024b2:	4603      	mov	r3, r0
 80024b4:	80bb      	strh	r3, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	807b      	strh	r3, [r7, #2]
 80024ba:	4613      	mov	r3, r2
 80024bc:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 80024be:	887b      	ldrh	r3, [r7, #2]
 80024c0:	061a      	lsls	r2, r3, #24
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80024ca:	431a      	orrs	r2, r3
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	4313      	orrs	r3, r2
 80024d4:	88fa      	ldrh	r2, [r7, #6]
 80024d6:	0a12      	lsrs	r2, r2, #8
 80024d8:	b292      	uxth	r2, r2
 80024da:	431a      	orrs	r2, r3
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <Displ_SetAddressWindow+0x90>)
 80024de:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 80024e0:	202a      	movs	r0, #42	; 0x2a
 80024e2:	f7ff ff75 	bl	80023d0 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2104      	movs	r1, #4
 80024ea:	4811      	ldr	r0, [pc, #68]	; (8002530 <Displ_SetAddressWindow+0x90>)
 80024ec:	f7ff ff7f 	bl	80023ee <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 80024f0:	883b      	ldrh	r3, [r7, #0]
 80024f2:	061a      	lsls	r2, r3, #24
 80024f4:	883b      	ldrh	r3, [r7, #0]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80024fc:	431a      	orrs	r2, r3
 80024fe:	88bb      	ldrh	r3, [r7, #4]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	b29b      	uxth	r3, r3
 8002504:	4313      	orrs	r3, r2
 8002506:	88ba      	ldrh	r2, [r7, #4]
 8002508:	0a12      	lsrs	r2, r2, #8
 800250a:	b292      	uxth	r2, r2
 800250c:	431a      	orrs	r2, r3
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <Displ_SetAddressWindow+0x90>)
 8002510:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8002512:	202b      	movs	r0, #43	; 0x2b
 8002514:	f7ff ff5c 	bl	80023d0 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8002518:	2200      	movs	r2, #0
 800251a:	2104      	movs	r1, #4
 800251c:	4804      	ldr	r0, [pc, #16]	; (8002530 <Displ_SetAddressWindow+0x90>)
 800251e:	f7ff ff66 	bl	80023ee <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8002522:	202c      	movs	r0, #44	; 0x2c
 8002524:	f7ff ff54 	bl	80023d0 <Displ_WriteCommand>
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	bd90      	pop	{r4, r7, pc}
 8002530:	20001638 	.word	0x20001638

08002534 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 800253e:	2201      	movs	r2, #1
 8002540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002548:	f000 ff1c 	bl	8003384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 800254c:	2201      	movs	r2, #1
 800254e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002552:	4806      	ldr	r0, [pc, #24]	; (800256c <Displ_Init+0x38>)
 8002554:	f000 ff16 	bl	8003384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8002558:	f7ff ff60 	bl	800241c <ILI9XXX_Init>
	Displ_Orientation(orientation);
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f806 	bl	8002570 <Displ_Orientation>
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	48000400 	.word	0x48000400

08002570 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d837      	bhi.n	80025f0 <Displ_Orientation+0x80>
 8002580:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <Displ_Orientation+0x18>)
 8002582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002586:	bf00      	nop
 8002588:	08002599 	.word	0x08002599
 800258c:	080025af 	.word	0x080025af
 8002590:	080025c5 	.word	0x080025c5
 8002594:	080025db 	.word	0x080025db
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <Displ_Orientation+0xa0>)
 800259a:	2288      	movs	r2, #136	; 0x88
 800259c:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <Displ_Orientation+0xa4>)
 80025a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025a4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <Displ_Orientation+0xa8>)
 80025a8:	22f0      	movs	r2, #240	; 0xf0
 80025aa:	801a      	strh	r2, [r3, #0]
			break;
 80025ac:	e020      	b.n	80025f0 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <Displ_Orientation+0xa0>)
 80025b0:	22e8      	movs	r2, #232	; 0xe8
 80025b2:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 80025b4:	4b17      	ldr	r3, [pc, #92]	; (8002614 <Displ_Orientation+0xa4>)
 80025b6:	22f0      	movs	r2, #240	; 0xf0
 80025b8:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <Displ_Orientation+0xa8>)
 80025bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025c0:	801a      	strh	r2, [r3, #0]
			break;
 80025c2:	e015      	b.n	80025f0 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <Displ_Orientation+0xa0>)
 80025c6:	2248      	movs	r2, #72	; 0x48
 80025c8:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <Displ_Orientation+0xa4>)
 80025cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025d0:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <Displ_Orientation+0xa8>)
 80025d4:	22f0      	movs	r2, #240	; 0xf0
 80025d6:	801a      	strh	r2, [r3, #0]
			break;
 80025d8:	e00a      	b.n	80025f0 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <Displ_Orientation+0xa0>)
 80025dc:	2228      	movs	r2, #40	; 0x28
 80025de:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <Displ_Orientation+0xa4>)
 80025e2:	22f0      	movs	r2, #240	; 0xf0
 80025e4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <Displ_Orientation+0xa8>)
 80025e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025ec:	801a      	strh	r2, [r3, #0]
			break;
 80025ee:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 80025f0:	2036      	movs	r0, #54	; 0x36
 80025f2:	f7ff feed 	bl	80023d0 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2101      	movs	r1, #1
 80025fa:	4805      	ldr	r0, [pc, #20]	; (8002610 <Displ_Orientation+0xa0>)
 80025fc:	f7ff fef7 	bl	80023ee <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <Displ_Orientation+0xac>)
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	7013      	strb	r3, [r2, #0]
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2000163c 	.word	0x2000163c
 8002614:	200015b4 	.word	0x200015b4
 8002618:	200015b2 	.word	0x200015b2
 800261c:	200015b0 	.word	0x200015b0

08002620 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b08b      	sub	sp, #44	; 0x2c
 8002624:	af00      	add	r7, sp, #0
 8002626:	4604      	mov	r4, r0
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4623      	mov	r3, r4
 8002630:	80fb      	strh	r3, [r7, #6]
 8002632:	4603      	mov	r3, r0
 8002634:	80bb      	strh	r3, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	807b      	strh	r3, [r7, #2]
 800263a:	4613      	mov	r3, r2
 800263c:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	4a4e      	ldr	r2, [pc, #312]	; (800277c <Displ_FillArea+0x15c>)
 8002642:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002646:	4293      	cmp	r3, r2
 8002648:	f280 8093 	bge.w	8002772 <Displ_FillArea+0x152>
 800264c:	88bb      	ldrh	r3, [r7, #4]
 800264e:	4a4c      	ldr	r2, [pc, #304]	; (8002780 <Displ_FillArea+0x160>)
 8002650:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002654:	4293      	cmp	r3, r2
 8002656:	f280 808c 	bge.w	8002772 <Displ_FillArea+0x152>
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8088 	beq.w	8002772 <Displ_FillArea+0x152>
 8002662:	883b      	ldrh	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8084 	beq.w	8002772 <Displ_FillArea+0x152>

	x1=x + w - 1;
 800266a:	88fa      	ldrh	r2, [r7, #6]
 800266c:	887b      	ldrh	r3, [r7, #2]
 800266e:	4413      	add	r3, r2
 8002670:	3b01      	subs	r3, #1
 8002672:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8002674:	4b41      	ldr	r3, [pc, #260]	; (800277c <Displ_FillArea+0x15c>)
 8002676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267a:	461a      	mov	r2, r3
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	4293      	cmp	r3, r2
 8002680:	d903      	bls.n	800268a <Displ_FillArea+0x6a>
		x1=_width;
 8002682:	4b3e      	ldr	r3, [pc, #248]	; (800277c <Displ_FillArea+0x15c>)
 8002684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002688:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 800268a:	88ba      	ldrh	r2, [r7, #4]
 800268c:	883b      	ldrh	r3, [r7, #0]
 800268e:	4413      	add	r3, r2
 8002690:	3b01      	subs	r3, #1
 8002692:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8002694:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <Displ_FillArea+0x160>)
 8002696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800269a:	461a      	mov	r2, r3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4293      	cmp	r3, r2
 80026a0:	d903      	bls.n	80026aa <Displ_FillArea+0x8a>
		y1=_height;
 80026a2:	4b37      	ldr	r3, [pc, #220]	; (8002780 <Displ_FillArea+0x160>)
 80026a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a8:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 80026aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	431a      	orrs	r2, r3
 80026b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80026ba:	061b      	lsls	r3, r3, #24
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 80026c0:	88bb      	ldrh	r3, [r7, #4]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	88fa      	ldrh	r2, [r7, #6]
 80026ca:	6a39      	ldr	r1, [r7, #32]
 80026cc:	1a8a      	subs	r2, r1, r2
 80026ce:	3201      	adds	r2, #1
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 80026d6:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <Displ_FillArea+0x164>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b1f      	cmp	r3, #31
 80026e0:	d804      	bhi.n	80026ec <Displ_FillArea+0xcc>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	3301      	adds	r3, #1
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e001      	b.n	80026f0 <Displ_FillArea+0xd0>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 80026ec:	2310      	movs	r3, #16
 80026ee:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
 80026f4:	e007      	b.n	8002706 <Displ_FillArea+0xe6>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	1d1a      	adds	r2, r3, #4
 80026fa:	617a      	str	r2, [r7, #20]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	3301      	adds	r3, #1
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
 8002706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	429a      	cmp	r2, r3
 800270c:	d3f3      	bcc.n	80026f6 <Displ_FillArea+0xd6>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	b29a      	uxth	r2, r3
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	b29b      	uxth	r3, r3
 8002716:	88b9      	ldrh	r1, [r7, #4]
 8002718:	88f8      	ldrh	r0, [r7, #6]
 800271a:	f7ff fec1 	bl	80024a0 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 8002724:	2300      	movs	r3, #0
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
 8002728:	e009      	b.n	800273e <Displ_FillArea+0x11e>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 800272a:	4b16      	ldr	r3, [pc, #88]	; (8002784 <Displ_FillArea+0x164>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2200      	movs	r2, #0
 8002730:	2140      	movs	r1, #64	; 0x40
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fe5b 	bl	80023ee <Displ_WriteData>
	for  (k=0;k<times;k++) {
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	3301      	adds	r3, #1
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
 800273e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	429a      	cmp	r2, r3
 8002744:	d3f1      	bcc.n	800272a <Displ_FillArea+0x10a>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8002746:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <Displ_FillArea+0x164>)
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	005a      	lsls	r2, r3, #1
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	019b      	lsls	r3, r3, #6
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2200      	movs	r2, #0
 8002756:	4619      	mov	r1, r3
 8002758:	f7ff fe49 	bl	80023ee <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <Displ_FillArea+0x164>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a09      	ldr	r2, [pc, #36]	; (8002788 <Displ_FillArea+0x168>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <Displ_FillArea+0x14a>
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <Displ_FillArea+0x16c>)
 8002768:	e000      	b.n	800276c <Displ_FillArea+0x14c>
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <Displ_FillArea+0x168>)
 800276c:	4a05      	ldr	r2, [pc, #20]	; (8002784 <Displ_FillArea+0x164>)
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	e000      	b.n	8002774 <Displ_FillArea+0x154>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8002772:	bf00      	nop

}
 8002774:	372c      	adds	r7, #44	; 0x2c
 8002776:	46bd      	mov	sp, r7
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	bf00      	nop
 800277c:	200015b2 	.word	0x200015b2
 8002780:	200015b4 	.word	0x200015b4
 8002784:	2000001c 	.word	0x2000001c
 8002788:	200015b8 	.word	0x200015b8
 800278c:	200015f8 	.word	0x200015f8

08002790 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af02      	add	r7, sp, #8
 8002796:	4603      	mov	r3, r0
 8002798:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <Displ_CLS+0x30>)
 800279c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <Displ_CLS+0x34>)
 80027a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a8:	b299      	uxth	r1, r3
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	460b      	mov	r3, r1
 80027b0:	2100      	movs	r1, #0
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7ff ff34 	bl	8002620 <Displ_FillArea>
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	200015b2 	.word	0x200015b2
 80027c4:	200015b4 	.word	0x200015b4

080027c8 <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b08b      	sub	sp, #44	; 0x2c
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	4604      	mov	r4, r0
 80027d0:	4608      	mov	r0, r1
 80027d2:	4611      	mov	r1, r2
 80027d4:	461a      	mov	r2, r3
 80027d6:	4623      	mov	r3, r4
 80027d8:	80fb      	strh	r3, [r7, #6]
 80027da:	4603      	mov	r3, r0
 80027dc:	80bb      	strh	r3, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	807b      	strh	r3, [r7, #2]
 80027e2:	4613      	mov	r3, r2
 80027e4:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 80027e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d123      	bne.n	800283a <Displ_Line+0x72>
    	if (y1>y0){
 80027f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80027f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	dd0e      	ble.n	800281c <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 80027fe:	88f8      	ldrh	r0, [r7, #6]
 8002800:	88b9      	ldrh	r1, [r7, #4]
 8002802:	883a      	ldrh	r2, [r7, #0]
 8002804:	88bb      	ldrh	r3, [r7, #4]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	b29b      	uxth	r3, r3
 800280a:	3301      	adds	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	4613      	mov	r3, r2
 8002814:	2201      	movs	r2, #1
 8002816:	f7ff ff03 	bl	8002620 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 800281a:	e103      	b.n	8002a24 <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 800281c:	88f8      	ldrh	r0, [r7, #6]
 800281e:	8839      	ldrh	r1, [r7, #0]
 8002820:	88ba      	ldrh	r2, [r7, #4]
 8002822:	883b      	ldrh	r3, [r7, #0]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	b29b      	uxth	r3, r3
 8002828:	3301      	adds	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	2201      	movs	r2, #1
 8002834:	f7ff fef4 	bl	8002620 <Displ_FillArea>
    	return;
 8002838:	e0f4      	b.n	8002a24 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 800283a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800283e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002842:	429a      	cmp	r2, r3
 8002844:	d121      	bne.n	800288a <Displ_Line+0xc2>
    	if (x1>x0)
 8002846:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800284a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800284e:	429a      	cmp	r2, r3
 8002850:	dd0d      	ble.n	800286e <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8002852:	88f8      	ldrh	r0, [r7, #6]
 8002854:	88b9      	ldrh	r1, [r7, #4]
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	b29b      	uxth	r3, r3
 800285e:	3301      	adds	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2301      	movs	r3, #1
 8002868:	f7ff feda 	bl	8002620 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 800286c:	e0da      	b.n	8002a24 <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 800286e:	8878      	ldrh	r0, [r7, #2]
 8002870:	8839      	ldrh	r1, [r7, #0]
 8002872:	88fa      	ldrh	r2, [r7, #6]
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	b29b      	uxth	r3, r3
 800287a:	3301      	adds	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2301      	movs	r3, #1
 8002884:	f7ff fecc 	bl	8002620 <Displ_FillArea>
    	return;
 8002888:	e0cc      	b.n	8002a24 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 800288a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800288e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002892:	429a      	cmp	r2, r3
 8002894:	dd05      	ble.n	80028a2 <Displ_Line+0xda>
 8002896:	f9b7 2000 	ldrsh.w	r2, [r7]
 800289a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800289e:	1ad2      	subs	r2, r2, r3
 80028a0:	e004      	b.n	80028ac <Displ_Line+0xe4>
 80028a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80028a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80028aa:	1ad2      	subs	r2, r2, r3
 80028ac:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80028b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b4:	4299      	cmp	r1, r3
 80028b6:	dd05      	ble.n	80028c4 <Displ_Line+0xfc>
 80028b8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80028bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c0:	1acb      	subs	r3, r1, r3
 80028c2:	e004      	b.n	80028ce <Displ_Line+0x106>
 80028c4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80028c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028cc:	1acb      	subs	r3, r1, r3
 80028ce:	429a      	cmp	r2, r3
 80028d0:	bfcc      	ite	gt
 80028d2:	2301      	movgt	r3, #1
 80028d4:	2300      	movle	r3, #0
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 80028da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	827b      	strh	r3, [r7, #18]
 80028e6:	88bb      	ldrh	r3, [r7, #4]
 80028e8:	80fb      	strh	r3, [r7, #6]
 80028ea:	8a7b      	ldrh	r3, [r7, #18]
 80028ec:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	823b      	strh	r3, [r7, #16]
 80028f2:	883b      	ldrh	r3, [r7, #0]
 80028f4:	807b      	strh	r3, [r7, #2]
 80028f6:	8a3b      	ldrh	r3, [r7, #16]
 80028f8:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80028fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80028fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002902:	429a      	cmp	r2, r3
 8002904:	dd0b      	ble.n	800291e <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	81fb      	strh	r3, [r7, #14]
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	80fb      	strh	r3, [r7, #6]
 800290e:	89fb      	ldrh	r3, [r7, #14]
 8002910:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8002912:	88bb      	ldrh	r3, [r7, #4]
 8002914:	81bb      	strh	r3, [r7, #12]
 8002916:	883b      	ldrh	r3, [r7, #0]
 8002918:	80bb      	strh	r3, [r7, #4]
 800291a:	89bb      	ldrh	r3, [r7, #12]
 800291c:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	b29b      	uxth	r3, r3
 8002926:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8002928:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800292c:	105b      	asrs	r3, r3, #1
 800292e:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8002930:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002934:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002938:	429a      	cmp	r2, r3
 800293a:	da07      	bge.n	800294c <Displ_Line+0x184>
        dy = y1-y0;
 800293c:	883a      	ldrh	r2, [r7, #0]
 800293e:	88bb      	ldrh	r3, [r7, #4]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	b29b      	uxth	r3, r3
 8002944:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8002946:	2301      	movs	r3, #1
 8002948:	837b      	strh	r3, [r7, #26]
 800294a:	e007      	b.n	800295c <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 800294c:	88ba      	ldrh	r2, [r7, #4]
 800294e:	883b      	ldrh	r3, [r7, #0]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	b29b      	uxth	r3, r3
 8002954:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8002956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800295a:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 800295c:	2300      	movs	r3, #0
 800295e:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	83bb      	strh	r3, [r7, #28]
 8002964:	e03a      	b.n	80029dc <Displ_Line+0x214>
    	l++;
 8002966:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800296a:	b29b      	uxth	r3, r3
 800296c:	3301      	adds	r3, #1
 800296e:	b29b      	uxth	r3, r3
 8002970:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 8002972:	8b3a      	ldrh	r2, [r7, #24]
 8002974:	8afb      	ldrh	r3, [r7, #22]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	b29b      	uxth	r3, r3
 800297a:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 800297c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	da25      	bge.n	80029d0 <Displ_Line+0x208>
        	if (steep) {
 8002984:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d009      	beq.n	80029a0 <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 800298c:	88b8      	ldrh	r0, [r7, #4]
 800298e:	88f9      	ldrh	r1, [r7, #6]
 8002990:	8bfa      	ldrh	r2, [r7, #30]
 8002992:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	4613      	mov	r3, r2
 8002998:	2201      	movs	r2, #1
 800299a:	f7ff fe41 	bl	8002620 <Displ_FillArea>
 800299e:	e007      	b.n	80029b0 <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 80029a0:	88f8      	ldrh	r0, [r7, #6]
 80029a2:	88b9      	ldrh	r1, [r7, #4]
 80029a4:	8bfa      	ldrh	r2, [r7, #30]
 80029a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2301      	movs	r3, #1
 80029ac:	f7ff fe38 	bl	8002620 <Displ_FillArea>
            }
            y0 += ystep;
 80029b0:	88ba      	ldrh	r2, [r7, #4]
 80029b2:	8b7b      	ldrh	r3, [r7, #26]
 80029b4:	4413      	add	r3, r2
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	80bb      	strh	r3, [r7, #4]
            l=0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 80029be:	8bbb      	ldrh	r3, [r7, #28]
 80029c0:	3301      	adds	r3, #1
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	80fb      	strh	r3, [r7, #6]
            err += dx;
 80029c6:	8b3a      	ldrh	r2, [r7, #24]
 80029c8:	897b      	ldrh	r3, [r7, #10]
 80029ca:	4413      	add	r3, r2
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 80029d0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3301      	adds	r3, #1
 80029d8:	b29b      	uxth	r3, r3
 80029da:	83bb      	strh	r3, [r7, #28]
 80029dc:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80029e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	ddbe      	ble.n	8002966 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 80029e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d019      	beq.n	8002a24 <Displ_Line+0x25c>
    	if (steep) {
 80029f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 80029f8:	88b8      	ldrh	r0, [r7, #4]
 80029fa:	88f9      	ldrh	r1, [r7, #6]
 80029fc:	8bfb      	ldrh	r3, [r7, #30]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	4613      	mov	r3, r2
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f7ff fe09 	bl	8002620 <Displ_FillArea>
 8002a0e:	e009      	b.n	8002a24 <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 8002a10:	88f8      	ldrh	r0, [r7, #6]
 8002a12:	88b9      	ldrh	r1, [r7, #4]
 8002a14:	8bfb      	ldrh	r3, [r7, #30]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f7ff fdfe 	bl	8002620 <Displ_FillArea>
    	}
    }
}
 8002a24:	3724      	adds	r7, #36	; 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd90      	pop	{r4, r7, pc}

08002a2a <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8002a2a:	b590      	push	{r4, r7, lr}
 8002a2c:	b091      	sub	sp, #68	; 0x44
 8002a2e:	af02      	add	r7, sp, #8
 8002a30:	4604      	mov	r4, r0
 8002a32:	4608      	mov	r0, r1
 8002a34:	4611      	mov	r1, r2
 8002a36:	461a      	mov	r2, r3
 8002a38:	4623      	mov	r3, r4
 8002a3a:	80fb      	strh	r3, [r7, #6]
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	80bb      	strh	r3, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
 8002a44:	4613      	mov	r3, r2
 8002a46:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8002a48:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002a4c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	dd0b      	ble.n	8002a6c <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8002a54:	88bb      	ldrh	r3, [r7, #4]
 8002a56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002a58:	883b      	ldrh	r3, [r7, #0]
 8002a5a:	80bb      	strh	r3, [r7, #4]
 8002a5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a5e:	803b      	strh	r3, [r7, #0]
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	80fb      	strh	r3, [r7, #6]
 8002a68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a6a:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8002a6c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002a70:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a74:	429a      	cmp	r2, r3
 8002a76:	dd0f      	ble.n	8002a98 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8002a78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a7c:	847b      	strh	r3, [r7, #34]	; 0x22
 8002a7e:	883b      	ldrh	r3, [r7, #0]
 8002a80:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002a84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a86:	803b      	strh	r3, [r7, #0]
 8002a88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a8c:	843b      	strh	r3, [r7, #32]
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002a94:	8c3b      	ldrh	r3, [r7, #32]
 8002a96:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8002a98:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002a9c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	dd0b      	ble.n	8002abc <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8002aa4:	88bb      	ldrh	r3, [r7, #4]
 8002aa6:	83fb      	strh	r3, [r7, #30]
 8002aa8:	883b      	ldrh	r3, [r7, #0]
 8002aaa:	80bb      	strh	r3, [r7, #4]
 8002aac:	8bfb      	ldrh	r3, [r7, #30]
 8002aae:	803b      	strh	r3, [r7, #0]
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	83bb      	strh	r3, [r7, #28]
 8002ab4:	887b      	ldrh	r3, [r7, #2]
 8002ab6:	80fb      	strh	r3, [r7, #6]
 8002ab8:	8bbb      	ldrh	r3, [r7, #28]
 8002aba:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8002abc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002ac0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d136      	bne.n	8002b36 <Displ_fillTriangle+0x10c>
        a = b = x0;
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002acc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002ace:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8002ad0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002ad4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	da02      	bge.n	8002ae2 <Displ_fillTriangle+0xb8>
 8002adc:	887b      	ldrh	r3, [r7, #2]
 8002ade:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002ae0:	e007      	b.n	8002af2 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8002ae2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002ae6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002aea:	429a      	cmp	r2, r3
 8002aec:	dd01      	ble.n	8002af2 <Displ_fillTriangle+0xc8>
 8002aee:	887b      	ldrh	r3, [r7, #2]
 8002af0:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8002af2:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8002af6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002afa:	429a      	cmp	r2, r3
 8002afc:	da03      	bge.n	8002b06 <Displ_fillTriangle+0xdc>
 8002afe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b02:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002b04:	e008      	b.n	8002b18 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8002b06:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8002b0a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	dd02      	ble.n	8002b18 <Displ_fillTriangle+0xee>
 8002b12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b16:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8002b18:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002b1c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8002b20:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002b24:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8002b28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4623      	mov	r3, r4
 8002b30:	f7ff fe4a 	bl	80027c8 <Displ_Line>
        return;
 8002b34:	e0d2      	b.n	8002cdc <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8002b36:	887a      	ldrh	r2, [r7, #2]
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8002b40:	883a      	ldrh	r2, [r7, #0]
 8002b42:	88bb      	ldrh	r3, [r7, #4]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8002b4a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8002b56:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002b5a:	88bb      	ldrh	r3, [r7, #4]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8002b62:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8002b6e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002b72:	883b      	ldrh	r3, [r7, #0]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8002b82:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002b86:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d102      	bne.n	8002b94 <Displ_fillTriangle+0x16a>
 8002b8e:	883b      	ldrh	r3, [r7, #0]
 8002b90:	863b      	strh	r3, [r7, #48]	; 0x30
 8002b92:	e003      	b.n	8002b9c <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8002b94:	883b      	ldrh	r3, [r7, #0]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8002b9c:	88bb      	ldrh	r3, [r7, #4]
 8002b9e:	867b      	strh	r3, [r7, #50]	; 0x32
 8002ba0:	e03d      	b.n	8002c1e <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8002ba2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba8:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8002bb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8002bca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd0:	4413      	add	r3, r2
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8002bd4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bda:	4413      	add	r3, r2
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8002bde:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8002be2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002be6:	429a      	cmp	r2, r3
 8002be8:	dd05      	ble.n	8002bf6 <Displ_fillTriangle+0x1cc>
 8002bea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bec:	81bb      	strh	r3, [r7, #12]
 8002bee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002bf0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002bf2:	89bb      	ldrh	r3, [r7, #12]
 8002bf4:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8002bf6:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8002bfa:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8002bfe:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8002c02:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8002c06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	4623      	mov	r3, r4
 8002c0e:	f7ff fddb 	bl	80027c8 <Displ_Line>
    for(y=y0; y<=last; y++) {
 8002c12:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	867b      	strh	r3, [r7, #50]	; 0x32
 8002c1e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002c22:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002c26:	429a      	cmp	r2, r3
 8002c28:	ddbb      	ble.n	8002ba2 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8002c2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c2e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8002c32:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002c36:	1a8a      	subs	r2, r1, r2
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8002c3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c42:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8002c46:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002c4a:	1a8a      	subs	r2, r1, r2
 8002c4c:	fb02 f303 	mul.w	r3, r2, r3
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8002c52:	e03d      	b.n	8002cd0 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8002c54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	887b      	ldrh	r3, [r7, #2]
 8002c62:	4413      	add	r3, r2
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8002c68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	4413      	add	r3, r2
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8002c7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c82:	4413      	add	r3, r2
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8002c86:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c8c:	4413      	add	r3, r2
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8002c90:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8002c94:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	dd05      	ble.n	8002ca8 <Displ_fillTriangle+0x27e>
 8002c9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c9e:	81fb      	strh	r3, [r7, #14]
 8002ca0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002ca2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002ca4:	89fb      	ldrh	r3, [r7, #14]
 8002ca6:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8002ca8:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8002cac:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8002cb0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8002cb4:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8002cb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	4623      	mov	r3, r4
 8002cc0:	f7ff fd82 	bl	80027c8 <Displ_Line>
    for(; y<=y2; y++) {
 8002cc4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	867b      	strh	r3, [r7, #50]	; 0x32
 8002cd0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002cd4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	ddbb      	ble.n	8002c54 <Displ_fillTriangle+0x22a>
    }
}
 8002cdc:	373c      	adds	r7, #60	; 0x3c
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd90      	pop	{r4, r7, pc}
	...

08002ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d1c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ce8:	f7ff faea 	bl	80022c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cec:	480c      	ldr	r0, [pc, #48]	; (8002d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cee:	490d      	ldr	r1, [pc, #52]	; (8002d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cf0:	4a0d      	ldr	r2, [pc, #52]	; (8002d28 <LoopForever+0xe>)
  movs r3, #0
 8002cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf4:	e002      	b.n	8002cfc <LoopCopyDataInit>

08002cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfa:	3304      	adds	r3, #4

08002cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d00:	d3f9      	bcc.n	8002cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d02:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d04:	4c0a      	ldr	r4, [pc, #40]	; (8002d30 <LoopForever+0x16>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d08:	e001      	b.n	8002d0e <LoopFillZerobss>

08002d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d0c:	3204      	adds	r2, #4

08002d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d10:	d3fb      	bcc.n	8002d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d12:	f003 fe25 	bl	8006960 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d16:	f7fd fcd7 	bl	80006c8 <main>

08002d1a <LoopForever>:

LoopForever:
    b LoopForever
 8002d1a:	e7fe      	b.n	8002d1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d1c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d24:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002d28:	08007e00 	.word	0x08007e00
  ldr r2, =_sbss
 8002d2c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002d30:	20001654 	.word	0x20001654

08002d34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d34:	e7fe      	b.n	8002d34 <ADC1_IRQHandler>
	...

08002d38 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_Init+0x28>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <HAL_Init+0x28>)
 8002d42:	f043 0310 	orr.w	r3, r3, #16
 8002d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d48:	2003      	movs	r0, #3
 8002d4a:	f000 f94f 	bl	8002fec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d4e:	200f      	movs	r0, #15
 8002d50:	f000 f808 	bl	8002d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d54:	f7ff f8a8 	bl	8001ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40022000 	.word	0x40022000

08002d64 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_InitTick+0x54>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_InitTick+0x58>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4619      	mov	r1, r3
 8002d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f967 	bl	8003056 <HAL_SYSTICK_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00e      	b.n	8002db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b0f      	cmp	r3, #15
 8002d96:	d80a      	bhi.n	8002dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f000 f92f 	bl	8003002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002da4:	4a06      	ldr	r2, [pc, #24]	; (8002dc0 <HAL_InitTick+0x5c>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000014 	.word	0x20000014
 8002dbc:	20000024 	.word	0x20000024
 8002dc0:	20000020 	.word	0x20000020

08002dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_IncTick+0x20>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_IncTick+0x24>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <HAL_IncTick+0x24>)
 8002dd6:	6013      	str	r3, [r2, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000024 	.word	0x20000024
 8002de8:	20001640 	.word	0x20001640

08002dec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return uwTick;  
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_GetTick+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20001640 	.word	0x20001640

08002e04 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e0c:	f7ff ffee 	bl	8002dec <HAL_GetTick>
 8002e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d005      	beq.n	8002e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_Delay+0x44>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002e2a:	bf00      	nop
 8002e2c:	f7ff ffde 	bl	8002dec <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d8f7      	bhi.n	8002e2c <HAL_Delay+0x28>
  {
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000024 	.word	0x20000024

08002e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <__NVIC_SetPriorityGrouping+0x44>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e7e:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <__NVIC_SetPriorityGrouping+0x44>)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	60d3      	str	r3, [r2, #12]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <__NVIC_GetPriorityGrouping+0x18>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	db0b      	blt.n	8002eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	f003 021f 	and.w	r2, r3, #31
 8002ec8:	4907      	ldr	r1, [pc, #28]	; (8002ee8 <__NVIC_EnableIRQ+0x38>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	e000e100 	.word	0xe000e100

08002eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	6039      	str	r1, [r7, #0]
 8002ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	db0a      	blt.n	8002f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	490c      	ldr	r1, [pc, #48]	; (8002f38 <__NVIC_SetPriority+0x4c>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	0112      	lsls	r2, r2, #4
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f14:	e00a      	b.n	8002f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4908      	ldr	r1, [pc, #32]	; (8002f3c <__NVIC_SetPriority+0x50>)
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	3b04      	subs	r3, #4
 8002f24:	0112      	lsls	r2, r2, #4
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	440b      	add	r3, r1
 8002f2a:	761a      	strb	r2, [r3, #24]
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000e100 	.word	0xe000e100
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	; 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f1c3 0307 	rsb	r3, r3, #7
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	bf28      	it	cs
 8002f5e:	2304      	movcs	r3, #4
 8002f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d902      	bls.n	8002f70 <NVIC_EncodePriority+0x30>
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3b03      	subs	r3, #3
 8002f6e:	e000      	b.n	8002f72 <NVIC_EncodePriority+0x32>
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	f04f 32ff 	mov.w	r2, #4294967295
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	401a      	ands	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f88:	f04f 31ff 	mov.w	r1, #4294967295
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	43d9      	mvns	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f98:	4313      	orrs	r3, r2
         );
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3724      	adds	r7, #36	; 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fb8:	d301      	bcc.n	8002fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e00f      	b.n	8002fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <SysTick_Config+0x40>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fc6:	210f      	movs	r1, #15
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	f7ff ff8e 	bl	8002eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <SysTick_Config+0x40>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <SysTick_Config+0x40>)
 8002fd8:	2207      	movs	r2, #7
 8002fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	e000e010 	.word	0xe000e010

08002fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ff29 	bl	8002e4c <__NVIC_SetPriorityGrouping>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003014:	f7ff ff3e 	bl	8002e94 <__NVIC_GetPriorityGrouping>
 8003018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	6978      	ldr	r0, [r7, #20]
 8003020:	f7ff ff8e 	bl	8002f40 <NVIC_EncodePriority>
 8003024:	4602      	mov	r2, r0
 8003026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff5d 	bl	8002eec <__NVIC_SetPriority>
}
 8003032:	bf00      	nop
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff31 	bl	8002eb0 <__NVIC_EnableIRQ>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ffa2 	bl	8002fa8 <SysTick_Config>
 8003064:	4603      	mov	r3, r0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307e:	e14e      	b.n	800331e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	2101      	movs	r1, #1
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	4013      	ands	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8140 	beq.w	8003318 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d005      	beq.n	80030b0 <HAL_GPIO_Init+0x40>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d130      	bne.n	8003112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	2203      	movs	r2, #3
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030e6:	2201      	movs	r2, #1
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4013      	ands	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	f003 0201 	and.w	r2, r3, #1
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b03      	cmp	r3, #3
 800311c:	d017      	beq.n	800314e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	2203      	movs	r2, #3
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4013      	ands	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d123      	bne.n	80031a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	08da      	lsrs	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3208      	adds	r2, #8
 8003162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003166:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	220f      	movs	r2, #15
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	08da      	lsrs	r2, r3, #3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3208      	adds	r2, #8
 800319c:	6939      	ldr	r1, [r7, #16]
 800319e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	2203      	movs	r2, #3
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0203 	and.w	r2, r3, #3
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 809a 	beq.w	8003318 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e4:	4b55      	ldr	r3, [pc, #340]	; (800333c <HAL_GPIO_Init+0x2cc>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	4a54      	ldr	r2, [pc, #336]	; (800333c <HAL_GPIO_Init+0x2cc>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6193      	str	r3, [r2, #24]
 80031f0:	4b52      	ldr	r3, [pc, #328]	; (800333c <HAL_GPIO_Init+0x2cc>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031fc:	4a50      	ldr	r2, [pc, #320]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	3302      	adds	r3, #2
 8003204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	220f      	movs	r2, #15
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003226:	d013      	beq.n	8003250 <HAL_GPIO_Init+0x1e0>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a46      	ldr	r2, [pc, #280]	; (8003344 <HAL_GPIO_Init+0x2d4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00d      	beq.n	800324c <HAL_GPIO_Init+0x1dc>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a45      	ldr	r2, [pc, #276]	; (8003348 <HAL_GPIO_Init+0x2d8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <HAL_GPIO_Init+0x1d8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a44      	ldr	r2, [pc, #272]	; (800334c <HAL_GPIO_Init+0x2dc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d101      	bne.n	8003244 <HAL_GPIO_Init+0x1d4>
 8003240:	2303      	movs	r3, #3
 8003242:	e006      	b.n	8003252 <HAL_GPIO_Init+0x1e2>
 8003244:	2305      	movs	r3, #5
 8003246:	e004      	b.n	8003252 <HAL_GPIO_Init+0x1e2>
 8003248:	2302      	movs	r3, #2
 800324a:	e002      	b.n	8003252 <HAL_GPIO_Init+0x1e2>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_GPIO_Init+0x1e2>
 8003250:	2300      	movs	r3, #0
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	f002 0203 	and.w	r2, r2, #3
 8003258:	0092      	lsls	r2, r2, #2
 800325a:	4093      	lsls	r3, r2
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003262:	4937      	ldr	r1, [pc, #220]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	3302      	adds	r3, #2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003270:	4b37      	ldr	r3, [pc, #220]	; (8003350 <HAL_GPIO_Init+0x2e0>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	43db      	mvns	r3, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003294:	4a2e      	ldr	r2, [pc, #184]	; (8003350 <HAL_GPIO_Init+0x2e0>)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800329a:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_GPIO_Init+0x2e0>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032be:	4a24      	ldr	r2, [pc, #144]	; (8003350 <HAL_GPIO_Init+0x2e0>)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032c4:	4b22      	ldr	r3, [pc, #136]	; (8003350 <HAL_GPIO_Init+0x2e0>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032e8:	4a19      	ldr	r2, [pc, #100]	; (8003350 <HAL_GPIO_Init+0x2e0>)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032ee:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_GPIO_Init+0x2e0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003312:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <HAL_GPIO_Init+0x2e0>)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	3301      	adds	r3, #1
 800331c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	f47f aea9 	bne.w	8003080 <HAL_GPIO_Init+0x10>
  }
}
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40021000 	.word	0x40021000
 8003340:	40010000 	.word	0x40010000
 8003344:	48000400 	.word	0x48000400
 8003348:	48000800 	.word	0x48000800
 800334c:	48000c00 	.word	0x48000c00
 8003350:	40010400 	.word	0x40010400

08003354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e001      	b.n	8003376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
 8003390:	4613      	mov	r3, r2
 8003392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003394:	787b      	ldrb	r3, [r7, #1]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033a0:	e002      	b.n	80033a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ca:	4a05      	ldr	r2, [pc, #20]	; (80033e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd fbd4 	bl	8000b80 <HAL_GPIO_EXTI_Callback>
  }
}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40010400 	.word	0x40010400

080033e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e081      	b.n	80034fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fe fd70 	bl	8001ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	; 0x24
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003434:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003444:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d107      	bne.n	800345e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	e006      	b.n	800346c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800346a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d104      	bne.n	800347e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800347c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800348c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003490:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69d9      	ldr	r1, [r3, #28]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1a      	ldr	r2, [r3, #32]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	4608      	mov	r0, r1
 800350e:	4611      	mov	r1, r2
 8003510:	461a      	mov	r2, r3
 8003512:	4603      	mov	r3, r0
 8003514:	817b      	strh	r3, [r7, #10]
 8003516:	460b      	mov	r3, r1
 8003518:	813b      	strh	r3, [r7, #8]
 800351a:	4613      	mov	r3, r2
 800351c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b20      	cmp	r3, #32
 8003528:	f040 80f9 	bne.w	800371e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_I2C_Mem_Write+0x34>
 8003532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003534:	2b00      	cmp	r3, #0
 8003536:	d105      	bne.n	8003544 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0ed      	b.n	8003720 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_I2C_Mem_Write+0x4e>
 800354e:	2302      	movs	r3, #2
 8003550:	e0e6      	b.n	8003720 <HAL_I2C_Mem_Write+0x21c>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800355a:	f7ff fc47 	bl	8002dec <HAL_GetTick>
 800355e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2319      	movs	r3, #25
 8003566:	2201      	movs	r2, #1
 8003568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fbcd 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0d1      	b.n	8003720 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2221      	movs	r2, #33	; 0x21
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2240      	movs	r2, #64	; 0x40
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a3a      	ldr	r2, [r7, #32]
 8003596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800359c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035a4:	88f8      	ldrh	r0, [r7, #6]
 80035a6:	893a      	ldrh	r2, [r7, #8]
 80035a8:	8979      	ldrh	r1, [r7, #10]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	4603      	mov	r3, r0
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fadd 	bl	8003b74 <I2C_RequestMemoryWrite>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0a9      	b.n	8003720 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2bff      	cmp	r3, #255	; 0xff
 80035d4:	d90e      	bls.n	80035f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	22ff      	movs	r2, #255	; 0xff
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	8979      	ldrh	r1, [r7, #10]
 80035e4:	2300      	movs	r3, #0
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fd47 	bl	8004080 <I2C_TransferConfig>
 80035f2:	e00f      	b.n	8003614 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	b2da      	uxtb	r2, r3
 8003604:	8979      	ldrh	r1, [r7, #10]
 8003606:	2300      	movs	r3, #0
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fd36 	bl	8004080 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 fbc6 	bl	8003daa <I2C_WaitOnTXISFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e07b      	b.n	8003720 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	781a      	ldrb	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d034      	beq.n	80036cc <HAL_I2C_Mem_Write+0x1c8>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	d130      	bne.n	80036cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	2200      	movs	r2, #0
 8003672:	2180      	movs	r1, #128	; 0x80
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fb49 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e04d      	b.n	8003720 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2bff      	cmp	r3, #255	; 0xff
 800368c:	d90e      	bls.n	80036ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	22ff      	movs	r2, #255	; 0xff
 8003692:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	b2da      	uxtb	r2, r3
 800369a:	8979      	ldrh	r1, [r7, #10]
 800369c:	2300      	movs	r3, #0
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 fceb 	bl	8004080 <I2C_TransferConfig>
 80036aa:	e00f      	b.n	80036cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	8979      	ldrh	r1, [r7, #10]
 80036be:	2300      	movs	r3, #0
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fcda 	bl	8004080 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d19e      	bne.n	8003614 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fbac 	bl	8003e38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e01a      	b.n	8003720 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2220      	movs	r2, #32
 80036f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_I2C_Mem_Write+0x224>)
 80036fe:	400b      	ands	r3, r1
 8003700:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e000      	b.n	8003720 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800371e:	2302      	movs	r3, #2
  }
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	fe00e800 	.word	0xfe00e800

0800372c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	4608      	mov	r0, r1
 8003736:	4611      	mov	r1, r2
 8003738:	461a      	mov	r2, r3
 800373a:	4603      	mov	r3, r0
 800373c:	817b      	strh	r3, [r7, #10]
 800373e:	460b      	mov	r3, r1
 8003740:	813b      	strh	r3, [r7, #8]
 8003742:	4613      	mov	r3, r2
 8003744:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b20      	cmp	r3, #32
 8003750:	f040 80fd 	bne.w	800394e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <HAL_I2C_Mem_Read+0x34>
 800375a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003766:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0f1      	b.n	8003950 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_I2C_Mem_Read+0x4e>
 8003776:	2302      	movs	r3, #2
 8003778:	e0ea      	b.n	8003950 <HAL_I2C_Mem_Read+0x224>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003782:	f7ff fb33 	bl	8002dec <HAL_GetTick>
 8003786:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	2319      	movs	r3, #25
 800378e:	2201      	movs	r2, #1
 8003790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fab9 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0d5      	b.n	8003950 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2222      	movs	r2, #34	; 0x22
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2240      	movs	r2, #64	; 0x40
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037cc:	88f8      	ldrh	r0, [r7, #6]
 80037ce:	893a      	ldrh	r2, [r7, #8]
 80037d0:	8979      	ldrh	r1, [r7, #10]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	4603      	mov	r3, r0
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fa1d 	bl	8003c1c <I2C_RequestMemoryRead>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0ad      	b.n	8003950 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2bff      	cmp	r3, #255	; 0xff
 80037fc:	d90e      	bls.n	800381c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	22ff      	movs	r2, #255	; 0xff
 8003802:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	b2da      	uxtb	r2, r3
 800380a:	8979      	ldrh	r1, [r7, #10]
 800380c:	4b52      	ldr	r3, [pc, #328]	; (8003958 <HAL_I2C_Mem_Read+0x22c>)
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fc33 	bl	8004080 <I2C_TransferConfig>
 800381a:	e00f      	b.n	800383c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382a:	b2da      	uxtb	r2, r3
 800382c:	8979      	ldrh	r1, [r7, #10]
 800382e:	4b4a      	ldr	r3, [pc, #296]	; (8003958 <HAL_I2C_Mem_Read+0x22c>)
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fc22 	bl	8004080 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	2200      	movs	r2, #0
 8003844:	2104      	movs	r1, #4
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 fa60 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e07c      	b.n	8003950 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d034      	beq.n	80038fc <HAL_I2C_Mem_Read+0x1d0>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	2b00      	cmp	r3, #0
 8003898:	d130      	bne.n	80038fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	2200      	movs	r2, #0
 80038a2:	2180      	movs	r1, #128	; 0x80
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fa31 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e04d      	b.n	8003950 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2bff      	cmp	r3, #255	; 0xff
 80038bc:	d90e      	bls.n	80038dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	22ff      	movs	r2, #255	; 0xff
 80038c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	8979      	ldrh	r1, [r7, #10]
 80038cc:	2300      	movs	r3, #0
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fbd3 	bl	8004080 <I2C_TransferConfig>
 80038da:	e00f      	b.n	80038fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	8979      	ldrh	r1, [r7, #10]
 80038ee:	2300      	movs	r3, #0
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fbc2 	bl	8004080 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d19a      	bne.n	800383c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fa94 	bl	8003e38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e01a      	b.n	8003950 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2220      	movs	r2, #32
 8003920:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6859      	ldr	r1, [r3, #4]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_I2C_Mem_Read+0x230>)
 800392e:	400b      	ands	r3, r1
 8003930:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e000      	b.n	8003950 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800394e:	2302      	movs	r3, #2
  }
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	80002400 	.word	0x80002400
 800395c:	fe00e800 	.word	0xfe00e800

08003960 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	460b      	mov	r3, r1
 800396e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b20      	cmp	r3, #32
 800397e:	f040 80f3 	bne.w	8003b68 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800398c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003990:	d101      	bne.n	8003996 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003992:	2302      	movs	r3, #2
 8003994:	e0e9      	b.n	8003b6a <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_I2C_IsDeviceReady+0x44>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e0e2      	b.n	8003b6a <HAL_I2C_IsDeviceReady+0x20a>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2224      	movs	r2, #36	; 0x24
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d107      	bne.n	80039d2 <HAL_I2C_IsDeviceReady+0x72>
 80039c2:	897b      	ldrh	r3, [r7, #10]
 80039c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039d0:	e006      	b.n	80039e0 <HAL_I2C_IsDeviceReady+0x80>
 80039d2:	897b      	ldrh	r3, [r7, #10]
 80039d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039dc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80039e6:	f7ff fa01 	bl	8002dec <HAL_GetTick>
 80039ea:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	bf0c      	ite	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	2300      	movne	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b10      	cmp	r3, #16
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003a18:	e034      	b.n	8003a84 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d01a      	beq.n	8003a58 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7ff f9e3 	bl	8002dec <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <HAL_I2C_IsDeviceReady+0xd8>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10f      	bne.n	8003a58 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e088      	b.n	8003b6a <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003a84:	7ffb      	ldrb	r3, [r7, #31]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <HAL_I2C_IsDeviceReady+0x130>
 8003a8a:	7fbb      	ldrb	r3, [r7, #30]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0c4      	beq.n	8003a1a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b10      	cmp	r3, #16
 8003a9c:	d01a      	beq.n	8003ad4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2120      	movs	r1, #32
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f92f 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e058      	b.n	8003b6a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2220      	movs	r2, #32
 8003abe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e04a      	b.n	8003b6a <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2200      	movs	r2, #0
 8003adc:	2120      	movs	r1, #32
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f914 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e03d      	b.n	8003b6a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2210      	movs	r2, #16
 8003af4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2220      	movs	r2, #32
 8003afc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d118      	bne.n	8003b38 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b14:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2120      	movs	r1, #32
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f8f3 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e01c      	b.n	8003b6a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2220      	movs	r2, #32
 8003b36:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	f63f af39 	bhi.w	80039ba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8003b68:	2302      	movs	r3, #2
  }
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3720      	adds	r7, #32
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	4611      	mov	r1, r2
 8003b80:	461a      	mov	r2, r3
 8003b82:	4603      	mov	r3, r0
 8003b84:	817b      	strh	r3, [r7, #10]
 8003b86:	460b      	mov	r3, r1
 8003b88:	813b      	strh	r3, [r7, #8]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	8979      	ldrh	r1, [r7, #10]
 8003b94:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <I2C_RequestMemoryWrite+0xa4>)
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fa6f 	bl	8004080 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	69b9      	ldr	r1, [r7, #24]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f8ff 	bl	8003daa <I2C_WaitOnTXISFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e02c      	b.n	8003c10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d105      	bne.n	8003bc8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bbc:	893b      	ldrh	r3, [r7, #8]
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	629a      	str	r2, [r3, #40]	; 0x28
 8003bc6:	e015      	b.n	8003bf4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bc8:	893b      	ldrh	r3, [r7, #8]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	69b9      	ldr	r1, [r7, #24]
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f8e5 	bl	8003daa <I2C_WaitOnTXISFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e012      	b.n	8003c10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bea:	893b      	ldrh	r3, [r7, #8]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2180      	movs	r1, #128	; 0x80
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f884 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	80002000 	.word	0x80002000

08003c1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	4608      	mov	r0, r1
 8003c26:	4611      	mov	r1, r2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	817b      	strh	r3, [r7, #10]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	813b      	strh	r3, [r7, #8]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	8979      	ldrh	r1, [r7, #10]
 8003c3c:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <I2C_RequestMemoryRead+0xa4>)
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2300      	movs	r3, #0
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fa1c 	bl	8004080 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	69b9      	ldr	r1, [r7, #24]
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f8ac 	bl	8003daa <I2C_WaitOnTXISFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e02c      	b.n	8003cb6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d105      	bne.n	8003c6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c62:	893b      	ldrh	r3, [r7, #8]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c6c:	e015      	b.n	8003c9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c6e:	893b      	ldrh	r3, [r7, #8]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	69b9      	ldr	r1, [r7, #24]
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f892 	bl	8003daa <I2C_WaitOnTXISFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e012      	b.n	8003cb6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c90:	893b      	ldrh	r3, [r7, #8]
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2140      	movs	r1, #64	; 0x40
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 f831 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	80002000 	.word	0x80002000

08003cc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d103      	bne.n	8003ce2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d007      	beq.n	8003d00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	619a      	str	r2, [r3, #24]
  }
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d1c:	e031      	b.n	8003d82 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d02d      	beq.n	8003d82 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d26:	f7ff f861 	bl	8002dec <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d122      	bne.n	8003d82 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4013      	ands	r3, r2
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2301      	moveq	r3, #1
 8003d4e:	2300      	movne	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d113      	bne.n	8003d82 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e00f      	b.n	8003da2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d0be      	beq.n	8003d1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003db6:	e033      	b.n	8003e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f87f 	bl	8003ec0 <I2C_IsErrorOccurred>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e031      	b.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d025      	beq.n	8003e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd4:	f7ff f80a 	bl	8002dec <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d302      	bcc.n	8003dea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d11a      	bne.n	8003e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d013      	beq.n	8003e20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	f043 0220 	orr.w	r2, r3, #32
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e007      	b.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d1c4      	bne.n	8003db8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e44:	e02f      	b.n	8003ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f838 	bl	8003ec0 <I2C_IsErrorOccurred>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e02d      	b.n	8003eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5a:	f7fe ffc7 	bl	8002dec <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d302      	bcc.n	8003e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d11a      	bne.n	8003ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	d013      	beq.n	8003ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e007      	b.n	8003eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d1c8      	bne.n	8003e46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	; 0x28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d068      	beq.n	8003fbe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ef4:	e049      	b.n	8003f8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d045      	beq.n	8003f8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003efe:	f7fe ff75 	bl	8002dec <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d302      	bcc.n	8003f14 <I2C_IsErrorOccurred+0x54>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d13a      	bne.n	8003f8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f36:	d121      	bne.n	8003f7c <I2C_IsErrorOccurred+0xbc>
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f3e:	d01d      	beq.n	8003f7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f40:	7cfb      	ldrb	r3, [r7, #19]
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d01a      	beq.n	8003f7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f56:	f7fe ff49 	bl	8002dec <HAL_GetTick>
 8003f5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f5c:	e00e      	b.n	8003f7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f5e:	f7fe ff45 	bl	8002dec <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b19      	cmp	r3, #25
 8003f6a:	d907      	bls.n	8003f7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	f043 0320 	orr.w	r3, r3, #32
 8003f72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003f7a:	e006      	b.n	8003f8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d1e9      	bne.n	8003f5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d003      	beq.n	8003fa0 <I2C_IsErrorOccurred+0xe0>
 8003f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0aa      	beq.n	8003ef6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d103      	bne.n	8003fb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2220      	movs	r2, #32
 8003fae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	f043 0304 	orr.w	r3, r3, #4
 8003fb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00b      	beq.n	8003fe8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fe0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f043 0308 	orr.w	r3, r3, #8
 8003ff8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004002:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00b      	beq.n	800402c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	f043 0302 	orr.w	r3, r3, #2
 800401a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004024:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800402c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01c      	beq.n	800406e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f7ff fe45 	bl	8003cc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4b0d      	ldr	r3, [pc, #52]	; (800407c <I2C_IsErrorOccurred+0x1bc>)
 8004046:	400b      	ands	r3, r1
 8004048:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	431a      	orrs	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800406e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004072:	4618      	mov	r0, r3
 8004074:	3728      	adds	r7, #40	; 0x28
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	fe00e800 	.word	0xfe00e800

08004080 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	460b      	mov	r3, r1
 800408c:	817b      	strh	r3, [r7, #10]
 800408e:	4613      	mov	r3, r2
 8004090:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004092:	897b      	ldrh	r3, [r7, #10]
 8004094:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004098:	7a7b      	ldrb	r3, [r7, #9]
 800409a:	041b      	lsls	r3, r3, #16
 800409c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	0d5b      	lsrs	r3, r3, #21
 80040ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040be:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <I2C_TransferConfig+0x60>)
 80040c0:	430b      	orrs	r3, r1
 80040c2:	43db      	mvns	r3, r3
 80040c4:	ea02 0103 	and.w	r1, r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	03ff63ff 	.word	0x03ff63ff

080040e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d138      	bne.n	800416c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004104:	2302      	movs	r3, #2
 8004106:	e032      	b.n	800416e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2224      	movs	r2, #36	; 0x24
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004136:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6819      	ldr	r1, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	e000      	b.n	800416e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800416c:	2302      	movs	r3, #2
  }
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b20      	cmp	r3, #32
 800418e:	d139      	bne.n	8004204 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800419a:	2302      	movs	r3, #2
 800419c:	e033      	b.n	8004206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2224      	movs	r2, #36	; 0x24
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e000      	b.n	8004206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800421a:	af00      	add	r7, sp, #0
 800421c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004220:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004224:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	f001 b823 	b.w	8005280 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800423a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 817d 	beq.w	800454a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004250:	4bbc      	ldr	r3, [pc, #752]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b04      	cmp	r3, #4
 800425a:	d00c      	beq.n	8004276 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800425c:	4bb9      	ldr	r3, [pc, #740]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b08      	cmp	r3, #8
 8004266:	d15c      	bne.n	8004322 <HAL_RCC_OscConfig+0x10e>
 8004268:	4bb6      	ldr	r3, [pc, #728]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004274:	d155      	bne.n	8004322 <HAL_RCC_OscConfig+0x10e>
 8004276:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800427a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004282:	fa93 f3a3 	rbit	r3, r3
 8004286:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800428a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428e:	fab3 f383 	clz	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	b2db      	uxtb	r3, r3
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d102      	bne.n	80042a8 <HAL_RCC_OscConfig+0x94>
 80042a2:	4ba8      	ldr	r3, [pc, #672]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	e015      	b.n	80042d4 <HAL_RCC_OscConfig+0xc0>
 80042a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042ac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80042b4:	fa93 f3a3 	rbit	r3, r3
 80042b8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80042bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042c0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80042c4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80042c8:	fa93 f3a3 	rbit	r3, r3
 80042cc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80042d0:	4b9c      	ldr	r3, [pc, #624]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042d8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80042dc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80042e0:	fa92 f2a2 	rbit	r2, r2
 80042e4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80042e8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80042ec:	fab2 f282 	clz	r2, r2
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	f042 0220 	orr.w	r2, r2, #32
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	f002 021f 	and.w	r2, r2, #31
 80042fc:	2101      	movs	r1, #1
 80042fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 811f 	beq.w	8004548 <HAL_RCC_OscConfig+0x334>
 800430a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f040 8116 	bne.w	8004548 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f000 bfaf 	b.w	8005280 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004326:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004332:	d106      	bne.n	8004342 <HAL_RCC_OscConfig+0x12e>
 8004334:	4b83      	ldr	r3, [pc, #524]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a82      	ldr	r2, [pc, #520]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 800433a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	e036      	b.n	80043b0 <HAL_RCC_OscConfig+0x19c>
 8004342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004346:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10c      	bne.n	800436c <HAL_RCC_OscConfig+0x158>
 8004352:	4b7c      	ldr	r3, [pc, #496]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a7b      	ldr	r2, [pc, #492]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 8004358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	4b79      	ldr	r3, [pc, #484]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a78      	ldr	r2, [pc, #480]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 8004364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	e021      	b.n	80043b0 <HAL_RCC_OscConfig+0x19c>
 800436c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004370:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x184>
 800437e:	4b71      	ldr	r3, [pc, #452]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a70      	ldr	r2, [pc, #448]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 8004384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b6e      	ldr	r3, [pc, #440]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a6d      	ldr	r2, [pc, #436]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e00b      	b.n	80043b0 <HAL_RCC_OscConfig+0x19c>
 8004398:	4b6a      	ldr	r3, [pc, #424]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a69      	ldr	r2, [pc, #420]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 800439e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	4b67      	ldr	r3, [pc, #412]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a66      	ldr	r2, [pc, #408]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 80043aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043b0:	4b64      	ldr	r3, [pc, #400]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	f023 020f 	bic.w	r2, r3, #15
 80043b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	495f      	ldr	r1, [pc, #380]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d059      	beq.n	800448e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043da:	f7fe fd07 	bl	8002dec <HAL_GetTick>
 80043de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fe fd02 	bl	8002dec <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b64      	cmp	r3, #100	; 0x64
 80043f2:	d902      	bls.n	80043fa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	f000 bf43 	b.w	8005280 <HAL_RCC_OscConfig+0x106c>
 80043fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043fe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004402:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004406:	fa93 f3a3 	rbit	r3, r3
 800440a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800440e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004412:	fab3 f383 	clz	r3, r3
 8004416:	b2db      	uxtb	r3, r3
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b01      	cmp	r3, #1
 8004424:	d102      	bne.n	800442c <HAL_RCC_OscConfig+0x218>
 8004426:	4b47      	ldr	r3, [pc, #284]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	e015      	b.n	8004458 <HAL_RCC_OscConfig+0x244>
 800442c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004430:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004434:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004438:	fa93 f3a3 	rbit	r3, r3
 800443c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004444:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004448:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800444c:	fa93 f3a3 	rbit	r3, r3
 8004450:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004454:	4b3b      	ldr	r3, [pc, #236]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800445c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004460:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004464:	fa92 f2a2 	rbit	r2, r2
 8004468:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800446c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004470:	fab2 f282 	clz	r2, r2
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	f042 0220 	orr.w	r2, r2, #32
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	f002 021f 	and.w	r2, r2, #31
 8004480:	2101      	movs	r1, #1
 8004482:	fa01 f202 	lsl.w	r2, r1, r2
 8004486:	4013      	ands	r3, r2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0ab      	beq.n	80043e4 <HAL_RCC_OscConfig+0x1d0>
 800448c:	e05d      	b.n	800454a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448e:	f7fe fcad 	bl	8002dec <HAL_GetTick>
 8004492:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004496:	e00a      	b.n	80044ae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004498:	f7fe fca8 	bl	8002dec <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b64      	cmp	r3, #100	; 0x64
 80044a6:	d902      	bls.n	80044ae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	f000 bee9 	b.w	8005280 <HAL_RCC_OscConfig+0x106c>
 80044ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044b2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80044ba:	fa93 f3a3 	rbit	r3, r3
 80044be:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80044c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c6:	fab3 f383 	clz	r3, r3
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d102      	bne.n	80044e0 <HAL_RCC_OscConfig+0x2cc>
 80044da:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	e015      	b.n	800450c <HAL_RCC_OscConfig+0x2f8>
 80044e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044e4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80044ec:	fa93 f3a3 	rbit	r3, r3
 80044f0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80044f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044f8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80044fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004500:	fa93 f3a3 	rbit	r3, r3
 8004504:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004508:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <HAL_RCC_OscConfig+0x330>)
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004510:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004514:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004518:	fa92 f2a2 	rbit	r2, r2
 800451c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004520:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004524:	fab2 f282 	clz	r2, r2
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	f042 0220 	orr.w	r2, r2, #32
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	f002 021f 	and.w	r2, r2, #31
 8004534:	2101      	movs	r1, #1
 8004536:	fa01 f202 	lsl.w	r2, r1, r2
 800453a:	4013      	ands	r3, r2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1ab      	bne.n	8004498 <HAL_RCC_OscConfig+0x284>
 8004540:	e003      	b.n	800454a <HAL_RCC_OscConfig+0x336>
 8004542:	bf00      	nop
 8004544:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 817d 	beq.w	800485a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004560:	4ba6      	ldr	r3, [pc, #664]	; (80047fc <HAL_RCC_OscConfig+0x5e8>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 030c 	and.w	r3, r3, #12
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800456c:	4ba3      	ldr	r3, [pc, #652]	; (80047fc <HAL_RCC_OscConfig+0x5e8>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 030c 	and.w	r3, r3, #12
 8004574:	2b08      	cmp	r3, #8
 8004576:	d172      	bne.n	800465e <HAL_RCC_OscConfig+0x44a>
 8004578:	4ba0      	ldr	r3, [pc, #640]	; (80047fc <HAL_RCC_OscConfig+0x5e8>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d16c      	bne.n	800465e <HAL_RCC_OscConfig+0x44a>
 8004584:	2302      	movs	r3, #2
 8004586:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800458e:	fa93 f3a3 	rbit	r3, r3
 8004592:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004596:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459a:	fab3 f383 	clz	r3, r3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d102      	bne.n	80045b4 <HAL_RCC_OscConfig+0x3a0>
 80045ae:	4b93      	ldr	r3, [pc, #588]	; (80047fc <HAL_RCC_OscConfig+0x5e8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	e013      	b.n	80045dc <HAL_RCC_OscConfig+0x3c8>
 80045b4:	2302      	movs	r3, #2
 80045b6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80045be:	fa93 f3a3 	rbit	r3, r3
 80045c2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80045c6:	2302      	movs	r3, #2
 80045c8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80045cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80045d0:	fa93 f3a3 	rbit	r3, r3
 80045d4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80045d8:	4b88      	ldr	r3, [pc, #544]	; (80047fc <HAL_RCC_OscConfig+0x5e8>)
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	2202      	movs	r2, #2
 80045de:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80045e2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80045e6:	fa92 f2a2 	rbit	r2, r2
 80045ea:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80045ee:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80045f2:	fab2 f282 	clz	r2, r2
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	f042 0220 	orr.w	r2, r2, #32
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	f002 021f 	and.w	r2, r2, #31
 8004602:	2101      	movs	r1, #1
 8004604:	fa01 f202 	lsl.w	r2, r1, r2
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCC_OscConfig+0x410>
 800460e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004612:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d002      	beq.n	8004624 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f000 be2e 	b.w	8005280 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004624:	4b75      	ldr	r3, [pc, #468]	; (80047fc <HAL_RCC_OscConfig+0x5e8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800462c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004630:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	21f8      	movs	r1, #248	; 0xf8
 800463a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004642:	fa91 f1a1 	rbit	r1, r1
 8004646:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800464a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800464e:	fab1 f181 	clz	r1, r1
 8004652:	b2c9      	uxtb	r1, r1
 8004654:	408b      	lsls	r3, r1
 8004656:	4969      	ldr	r1, [pc, #420]	; (80047fc <HAL_RCC_OscConfig+0x5e8>)
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465c:	e0fd      	b.n	800485a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800465e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 8088 	beq.w	8004780 <HAL_RCC_OscConfig+0x56c>
 8004670:	2301      	movs	r3, #1
 8004672:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004676:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800467a:	fa93 f3a3 	rbit	r3, r3
 800467e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004682:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004686:	fab3 f383 	clz	r3, r3
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004690:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	461a      	mov	r2, r3
 8004698:	2301      	movs	r3, #1
 800469a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fe fba6 	bl	8002dec <HAL_GetTick>
 80046a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046a6:	f7fe fba1 	bl	8002dec <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d902      	bls.n	80046bc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	f000 bde2 	b.w	8005280 <HAL_RCC_OscConfig+0x106c>
 80046bc:	2302      	movs	r3, #2
 80046be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80046c6:	fa93 f3a3 	rbit	r3, r3
 80046ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80046ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f043 0301 	orr.w	r3, r3, #1
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d102      	bne.n	80046ec <HAL_RCC_OscConfig+0x4d8>
 80046e6:	4b45      	ldr	r3, [pc, #276]	; (80047fc <HAL_RCC_OscConfig+0x5e8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	e013      	b.n	8004714 <HAL_RCC_OscConfig+0x500>
 80046ec:	2302      	movs	r3, #2
 80046ee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80046f6:	fa93 f3a3 	rbit	r3, r3
 80046fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80046fe:	2302      	movs	r3, #2
 8004700:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004704:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004708:	fa93 f3a3 	rbit	r3, r3
 800470c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004710:	4b3a      	ldr	r3, [pc, #232]	; (80047fc <HAL_RCC_OscConfig+0x5e8>)
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	2202      	movs	r2, #2
 8004716:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800471a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800471e:	fa92 f2a2 	rbit	r2, r2
 8004722:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004726:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800472a:	fab2 f282 	clz	r2, r2
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	f042 0220 	orr.w	r2, r2, #32
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	f002 021f 	and.w	r2, r2, #31
 800473a:	2101      	movs	r1, #1
 800473c:	fa01 f202 	lsl.w	r2, r1, r2
 8004740:	4013      	ands	r3, r2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0af      	beq.n	80046a6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004746:	4b2d      	ldr	r3, [pc, #180]	; (80047fc <HAL_RCC_OscConfig+0x5e8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800474e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	21f8      	movs	r1, #248	; 0xf8
 800475c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004760:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004764:	fa91 f1a1 	rbit	r1, r1
 8004768:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800476c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004770:	fab1 f181 	clz	r1, r1
 8004774:	b2c9      	uxtb	r1, r1
 8004776:	408b      	lsls	r3, r1
 8004778:	4920      	ldr	r1, [pc, #128]	; (80047fc <HAL_RCC_OscConfig+0x5e8>)
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]
 800477e:	e06c      	b.n	800485a <HAL_RCC_OscConfig+0x646>
 8004780:	2301      	movs	r3, #1
 8004782:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800478a:	fa93 f3a3 	rbit	r3, r3
 800478e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004792:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	461a      	mov	r2, r3
 80047a8:	2300      	movs	r3, #0
 80047aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fe fb1e 	bl	8002dec <HAL_GetTick>
 80047b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b6:	f7fe fb19 	bl	8002dec <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d902      	bls.n	80047cc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	f000 bd5a 	b.w	8005280 <HAL_RCC_OscConfig+0x106c>
 80047cc:	2302      	movs	r3, #2
 80047ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80047d6:	fa93 f3a3 	rbit	r3, r3
 80047da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80047de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e2:	fab3 f383 	clz	r3, r3
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d104      	bne.n	8004800 <HAL_RCC_OscConfig+0x5ec>
 80047f6:	4b01      	ldr	r3, [pc, #4]	; (80047fc <HAL_RCC_OscConfig+0x5e8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	e015      	b.n	8004828 <HAL_RCC_OscConfig+0x614>
 80047fc:	40021000 	.word	0x40021000
 8004800:	2302      	movs	r3, #2
 8004802:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004806:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800480a:	fa93 f3a3 	rbit	r3, r3
 800480e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004812:	2302      	movs	r3, #2
 8004814:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004818:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800481c:	fa93 f3a3 	rbit	r3, r3
 8004820:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004824:	4bc8      	ldr	r3, [pc, #800]	; (8004b48 <HAL_RCC_OscConfig+0x934>)
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2202      	movs	r2, #2
 800482a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800482e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004832:	fa92 f2a2 	rbit	r2, r2
 8004836:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800483a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800483e:	fab2 f282 	clz	r2, r2
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	f042 0220 	orr.w	r2, r2, #32
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	f002 021f 	and.w	r2, r2, #31
 800484e:	2101      	movs	r1, #1
 8004850:	fa01 f202 	lsl.w	r2, r1, r2
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1ad      	bne.n	80047b6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800485a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 8110 	beq.w	8004a90 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004874:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d079      	beq.n	8004974 <HAL_RCC_OscConfig+0x760>
 8004880:	2301      	movs	r3, #1
 8004882:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800488a:	fa93 f3a3 	rbit	r3, r3
 800488e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004896:	fab3 f383 	clz	r3, r3
 800489a:	b2db      	uxtb	r3, r3
 800489c:	461a      	mov	r2, r3
 800489e:	4bab      	ldr	r3, [pc, #684]	; (8004b4c <HAL_RCC_OscConfig+0x938>)
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	461a      	mov	r2, r3
 80048a6:	2301      	movs	r3, #1
 80048a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048aa:	f7fe fa9f 	bl	8002dec <HAL_GetTick>
 80048ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048b4:	f7fe fa9a 	bl	8002dec <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d902      	bls.n	80048ca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	f000 bcdb 	b.w	8005280 <HAL_RCC_OscConfig+0x106c>
 80048ca:	2302      	movs	r3, #2
 80048cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048d4:	fa93 f3a3 	rbit	r3, r3
 80048d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80048dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80048e4:	2202      	movs	r2, #2
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	fa93 f2a3 	rbit	r2, r3
 80048f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004908:	2202      	movs	r2, #2
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	fa93 f2a3 	rbit	r2, r3
 800491a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004922:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004924:	4b88      	ldr	r3, [pc, #544]	; (8004b48 <HAL_RCC_OscConfig+0x934>)
 8004926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004930:	2102      	movs	r1, #2
 8004932:	6019      	str	r1, [r3, #0]
 8004934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004938:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	fa93 f1a3 	rbit	r1, r3
 8004942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004946:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800494a:	6019      	str	r1, [r3, #0]
  return result;
 800494c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004950:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	fab3 f383 	clz	r3, r3
 800495a:	b2db      	uxtb	r3, r3
 800495c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f003 031f 	and.w	r3, r3, #31
 8004966:	2101      	movs	r1, #1
 8004968:	fa01 f303 	lsl.w	r3, r1, r3
 800496c:	4013      	ands	r3, r2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0a0      	beq.n	80048b4 <HAL_RCC_OscConfig+0x6a0>
 8004972:	e08d      	b.n	8004a90 <HAL_RCC_OscConfig+0x87c>
 8004974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004978:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004984:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	fa93 f2a3 	rbit	r2, r3
 800498e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004992:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004996:	601a      	str	r2, [r3, #0]
  return result;
 8004998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049a0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	461a      	mov	r2, r3
 80049aa:	4b68      	ldr	r3, [pc, #416]	; (8004b4c <HAL_RCC_OscConfig+0x938>)
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	461a      	mov	r2, r3
 80049b2:	2300      	movs	r3, #0
 80049b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fe fa19 	bl	8002dec <HAL_GetTick>
 80049ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c0:	f7fe fa14 	bl	8002dec <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d902      	bls.n	80049d6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	f000 bc55 	b.w	8005280 <HAL_RCC_OscConfig+0x106c>
 80049d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80049de:	2202      	movs	r2, #2
 80049e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	fa93 f2a3 	rbit	r2, r3
 80049f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a02:	2202      	movs	r2, #2
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	fa93 f2a3 	rbit	r2, r3
 8004a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a26:	2202      	movs	r2, #2
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	fa93 f2a3 	rbit	r2, r3
 8004a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a3c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004a40:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a42:	4b41      	ldr	r3, [pc, #260]	; (8004b48 <HAL_RCC_OscConfig+0x934>)
 8004a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004a4e:	2102      	movs	r1, #2
 8004a50:	6019      	str	r1, [r3, #0]
 8004a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a56:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	fa93 f1a3 	rbit	r1, r3
 8004a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a64:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004a68:	6019      	str	r1, [r3, #0]
  return result;
 8004a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	fab3 f383 	clz	r3, r3
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	f003 031f 	and.w	r3, r3, #31
 8004a84:	2101      	movs	r1, #1
 8004a86:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d197      	bne.n	80049c0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 81a1 	beq.w	8004de8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aac:	4b26      	ldr	r3, [pc, #152]	; (8004b48 <HAL_RCC_OscConfig+0x934>)
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d116      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab8:	4b23      	ldr	r3, [pc, #140]	; (8004b48 <HAL_RCC_OscConfig+0x934>)
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	4a22      	ldr	r2, [pc, #136]	; (8004b48 <HAL_RCC_OscConfig+0x934>)
 8004abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	61d3      	str	r3, [r2, #28]
 8004ac4:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <HAL_RCC_OscConfig+0x934>)
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ada:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004ade:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <HAL_RCC_OscConfig+0x93c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d11a      	bne.n	8004b28 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004af2:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <HAL_RCC_OscConfig+0x93c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a16      	ldr	r2, [pc, #88]	; (8004b50 <HAL_RCC_OscConfig+0x93c>)
 8004af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004afe:	f7fe f975 	bl	8002dec <HAL_GetTick>
 8004b02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b06:	e009      	b.n	8004b1c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b08:	f7fe f970 	bl	8002dec <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b64      	cmp	r3, #100	; 0x64
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e3b1      	b.n	8005280 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <HAL_RCC_OscConfig+0x93c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0ef      	beq.n	8004b08 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d10d      	bne.n	8004b54 <HAL_RCC_OscConfig+0x940>
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <HAL_RCC_OscConfig+0x934>)
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	4a02      	ldr	r2, [pc, #8]	; (8004b48 <HAL_RCC_OscConfig+0x934>)
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	6213      	str	r3, [r2, #32]
 8004b44:	e03c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x9ac>
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	10908120 	.word	0x10908120
 8004b50:	40007000 	.word	0x40007000
 8004b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10c      	bne.n	8004b7e <HAL_RCC_OscConfig+0x96a>
 8004b64:	4bc1      	ldr	r3, [pc, #772]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	4ac0      	ldr	r2, [pc, #768]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	6213      	str	r3, [r2, #32]
 8004b70:	4bbe      	ldr	r3, [pc, #760]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	4abd      	ldr	r2, [pc, #756]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004b76:	f023 0304 	bic.w	r3, r3, #4
 8004b7a:	6213      	str	r3, [r2, #32]
 8004b7c:	e020      	b.n	8004bc0 <HAL_RCC_OscConfig+0x9ac>
 8004b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	2b05      	cmp	r3, #5
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x994>
 8004b8e:	4bb7      	ldr	r3, [pc, #732]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	4ab6      	ldr	r2, [pc, #728]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004b94:	f043 0304 	orr.w	r3, r3, #4
 8004b98:	6213      	str	r3, [r2, #32]
 8004b9a:	4bb4      	ldr	r3, [pc, #720]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	4ab3      	ldr	r2, [pc, #716]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	6213      	str	r3, [r2, #32]
 8004ba6:	e00b      	b.n	8004bc0 <HAL_RCC_OscConfig+0x9ac>
 8004ba8:	4bb0      	ldr	r3, [pc, #704]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	4aaf      	ldr	r2, [pc, #700]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004bae:	f023 0301 	bic.w	r3, r3, #1
 8004bb2:	6213      	str	r3, [r2, #32]
 8004bb4:	4bad      	ldr	r3, [pc, #692]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	4aac      	ldr	r2, [pc, #688]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004bba:	f023 0304 	bic.w	r3, r3, #4
 8004bbe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8081 	beq.w	8004cd4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd2:	f7fe f90b 	bl	8002dec <HAL_GetTick>
 8004bd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bda:	e00b      	b.n	8004bf4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fe f906 	bl	8002dec <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e345      	b.n	8005280 <HAL_RCC_OscConfig+0x106c>
 8004bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	fa93 f2a3 	rbit	r2, r3
 8004c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c12:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004c20:	2202      	movs	r2, #2
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	fa93 f2a3 	rbit	r2, r3
 8004c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c36:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c3a:	601a      	str	r2, [r3, #0]
  return result;
 8004c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c40:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c44:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c46:	fab3 f383 	clz	r3, r3
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	f043 0302 	orr.w	r3, r3, #2
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d102      	bne.n	8004c60 <HAL_RCC_OscConfig+0xa4c>
 8004c5a:	4b84      	ldr	r3, [pc, #528]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	e013      	b.n	8004c88 <HAL_RCC_OscConfig+0xa74>
 8004c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c64:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c68:	2202      	movs	r2, #2
 8004c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	fa93 f2a3 	rbit	r2, r3
 8004c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	4b79      	ldr	r3, [pc, #484]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c8c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004c90:	2102      	movs	r1, #2
 8004c92:	6011      	str	r1, [r2, #0]
 8004c94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c98:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	fa92 f1a2 	rbit	r1, r2
 8004ca2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ca6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004caa:	6011      	str	r1, [r2, #0]
  return result;
 8004cac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cb0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	fab2 f282 	clz	r2, r2
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	f002 021f 	and.w	r2, r2, #31
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d084      	beq.n	8004bdc <HAL_RCC_OscConfig+0x9c8>
 8004cd2:	e07f      	b.n	8004dd4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd4:	f7fe f88a 	bl	8002dec <HAL_GetTick>
 8004cd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cdc:	e00b      	b.n	8004cf6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cde:	f7fe f885 	bl	8002dec <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e2c4      	b.n	8005280 <HAL_RCC_OscConfig+0x106c>
 8004cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004cfe:	2202      	movs	r2, #2
 8004d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d06:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	fa93 f2a3 	rbit	r2, r3
 8004d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d14:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d1e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d22:	2202      	movs	r2, #2
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d2a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	fa93 f2a3 	rbit	r2, r3
 8004d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d38:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d3c:	601a      	str	r2, [r3, #0]
  return result;
 8004d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d42:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d48:	fab3 f383 	clz	r3, r3
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	f043 0302 	orr.w	r3, r3, #2
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d102      	bne.n	8004d62 <HAL_RCC_OscConfig+0xb4e>
 8004d5c:	4b43      	ldr	r3, [pc, #268]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	e013      	b.n	8004d8a <HAL_RCC_OscConfig+0xb76>
 8004d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d66:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d72:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	fa93 f2a3 	rbit	r2, r3
 8004d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d80:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	4b39      	ldr	r3, [pc, #228]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d8e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004d92:	2102      	movs	r1, #2
 8004d94:	6011      	str	r1, [r2, #0]
 8004d96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d9a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	fa92 f1a2 	rbit	r1, r2
 8004da4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004da8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004dac:	6011      	str	r1, [r2, #0]
  return result;
 8004dae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004db2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	fab2 f282 	clz	r2, r2
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	f002 021f 	and.w	r2, r2, #31
 8004dc8:	2101      	movs	r1, #1
 8004dca:	fa01 f202 	lsl.w	r2, r1, r2
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d184      	bne.n	8004cde <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dd4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d105      	bne.n	8004de8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ddc:	4b23      	ldr	r3, [pc, #140]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8242 	beq.w	800527e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dfa:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <HAL_RCC_OscConfig+0xc58>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 030c 	and.w	r3, r3, #12
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	f000 8213 	beq.w	800522e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	f040 8162 	bne.w	80050de <HAL_RCC_OscConfig+0xeca>
 8004e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e1e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004e22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e2c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	fa93 f2a3 	rbit	r2, r3
 8004e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e3e:	601a      	str	r2, [r3, #0]
  return result;
 8004e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e44:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e48:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4a:	fab3 f383 	clz	r3, r3
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e60:	f7fd ffc4 	bl	8002dec <HAL_GetTick>
 8004e64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e68:	e00c      	b.n	8004e84 <HAL_RCC_OscConfig+0xc70>
 8004e6a:	bf00      	nop
 8004e6c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fd ffbc 	bl	8002dec <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e1fd      	b.n	8005280 <HAL_RCC_OscConfig+0x106c>
 8004e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e88:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e96:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	fa93 f2a3 	rbit	r2, r3
 8004ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ea8:	601a      	str	r2, [r3, #0]
  return result;
 8004eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004eb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb4:	fab3 f383 	clz	r3, r3
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d102      	bne.n	8004ece <HAL_RCC_OscConfig+0xcba>
 8004ec8:	4bb0      	ldr	r3, [pc, #704]	; (800518c <HAL_RCC_OscConfig+0xf78>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	e027      	b.n	8004f1e <HAL_RCC_OscConfig+0xd0a>
 8004ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004ed6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	fa93 f2a3 	rbit	r2, r3
 8004eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004efc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f06:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	fa93 f2a3 	rbit	r2, r3
 8004f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f14:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	4b9c      	ldr	r3, [pc, #624]	; (800518c <HAL_RCC_OscConfig+0xf78>)
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f22:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004f26:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f2a:	6011      	str	r1, [r2, #0]
 8004f2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f30:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	fa92 f1a2 	rbit	r1, r2
 8004f3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f3e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f42:	6011      	str	r1, [r2, #0]
  return result;
 8004f44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f48:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f4c:	6812      	ldr	r2, [r2, #0]
 8004f4e:	fab2 f282 	clz	r2, r2
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	f042 0220 	orr.w	r2, r2, #32
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	f002 021f 	and.w	r2, r2, #31
 8004f5e:	2101      	movs	r1, #1
 8004f60:	fa01 f202 	lsl.w	r2, r1, r2
 8004f64:	4013      	ands	r3, r2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d182      	bne.n	8004e70 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f6a:	4b88      	ldr	r3, [pc, #544]	; (800518c <HAL_RCC_OscConfig+0xf78>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	497f      	ldr	r1, [pc, #508]	; (800518c <HAL_RCC_OscConfig+0xf78>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	604b      	str	r3, [r1, #4]
 8004f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f96:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004f9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	fa93 f2a3 	rbit	r2, r3
 8004fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004fb6:	601a      	str	r2, [r3, #0]
  return result;
 8004fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004fc0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fc2:	fab3 f383 	clz	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd8:	f7fd ff08 	bl	8002dec <HAL_GetTick>
 8004fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fe0:	e009      	b.n	8004ff6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe2:	f7fd ff03 	bl	8002dec <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e144      	b.n	8005280 <HAL_RCC_OscConfig+0x106c>
 8004ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004ffe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005008:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	fa93 f2a3 	rbit	r2, r3
 8005012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005016:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800501a:	601a      	str	r2, [r3, #0]
  return result;
 800501c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005020:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005024:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005026:	fab3 f383 	clz	r3, r3
 800502a:	b2db      	uxtb	r3, r3
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f043 0301 	orr.w	r3, r3, #1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b01      	cmp	r3, #1
 8005038:	d102      	bne.n	8005040 <HAL_RCC_OscConfig+0xe2c>
 800503a:	4b54      	ldr	r3, [pc, #336]	; (800518c <HAL_RCC_OscConfig+0xf78>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	e027      	b.n	8005090 <HAL_RCC_OscConfig+0xe7c>
 8005040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005044:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005048:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800504c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005052:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	fa93 f2a3 	rbit	r2, r3
 800505c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005060:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800506e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005078:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	fa93 f2a3 	rbit	r2, r3
 8005082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005086:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	4b3f      	ldr	r3, [pc, #252]	; (800518c <HAL_RCC_OscConfig+0xf78>)
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005094:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005098:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800509c:	6011      	str	r1, [r2, #0]
 800509e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050a2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	fa92 f1a2 	rbit	r1, r2
 80050ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050b0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80050b4:	6011      	str	r1, [r2, #0]
  return result;
 80050b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050ba:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	fab2 f282 	clz	r2, r2
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	f042 0220 	orr.w	r2, r2, #32
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	f002 021f 	and.w	r2, r2, #31
 80050d0:	2101      	movs	r1, #1
 80050d2:	fa01 f202 	lsl.w	r2, r1, r2
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d082      	beq.n	8004fe2 <HAL_RCC_OscConfig+0xdce>
 80050dc:	e0cf      	b.n	800527e <HAL_RCC_OscConfig+0x106a>
 80050de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80050e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	fa93 f2a3 	rbit	r2, r3
 80050fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005102:	601a      	str	r2, [r3, #0]
  return result;
 8005104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005108:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800510c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	fab3 f383 	clz	r3, r3
 8005112:	b2db      	uxtb	r3, r3
 8005114:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005118:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	461a      	mov	r2, r3
 8005120:	2300      	movs	r3, #0
 8005122:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005124:	f7fd fe62 	bl	8002dec <HAL_GetTick>
 8005128:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800512c:	e009      	b.n	8005142 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800512e:	f7fd fe5d 	bl	8002dec <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e09e      	b.n	8005280 <HAL_RCC_OscConfig+0x106c>
 8005142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005146:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800514a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800514e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005154:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	fa93 f2a3 	rbit	r2, r3
 800515e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005162:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005166:	601a      	str	r2, [r3, #0]
  return result;
 8005168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005170:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005172:	fab3 f383 	clz	r3, r3
 8005176:	b2db      	uxtb	r3, r3
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b01      	cmp	r3, #1
 8005184:	d104      	bne.n	8005190 <HAL_RCC_OscConfig+0xf7c>
 8005186:	4b01      	ldr	r3, [pc, #4]	; (800518c <HAL_RCC_OscConfig+0xf78>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	e029      	b.n	80051e0 <HAL_RCC_OscConfig+0xfcc>
 800518c:	40021000 	.word	0x40021000
 8005190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005194:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005198:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800519c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	fa93 f2a3 	rbit	r2, r3
 80051ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80051be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	fa93 f2a3 	rbit	r2, r3
 80051d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	4b2b      	ldr	r3, [pc, #172]	; (800528c <HAL_RCC_OscConfig+0x1078>)
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051e4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80051e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051ec:	6011      	str	r1, [r2, #0]
 80051ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051f2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	fa92 f1a2 	rbit	r1, r2
 80051fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005200:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005204:	6011      	str	r1, [r2, #0]
  return result;
 8005206:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800520a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	fab2 f282 	clz	r2, r2
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	f042 0220 	orr.w	r2, r2, #32
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	f002 021f 	and.w	r2, r2, #31
 8005220:	2101      	movs	r1, #1
 8005222:	fa01 f202 	lsl.w	r2, r1, r2
 8005226:	4013      	ands	r3, r2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d180      	bne.n	800512e <HAL_RCC_OscConfig+0xf1a>
 800522c:	e027      	b.n	800527e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800522e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005232:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e01e      	b.n	8005280 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005242:	4b12      	ldr	r3, [pc, #72]	; (800528c <HAL_RCC_OscConfig+0x1078>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800524a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800524e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005256:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	429a      	cmp	r2, r3
 8005260:	d10b      	bne.n	800527a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005262:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005266:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800526a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800526e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005276:	429a      	cmp	r2, r3
 8005278:	d001      	beq.n	800527e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40021000 	.word	0x40021000

08005290 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b09e      	sub	sp, #120	; 0x78
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e162      	b.n	800556e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052a8:	4b90      	ldr	r3, [pc, #576]	; (80054ec <HAL_RCC_ClockConfig+0x25c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d910      	bls.n	80052d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b6:	4b8d      	ldr	r3, [pc, #564]	; (80054ec <HAL_RCC_ClockConfig+0x25c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 0207 	bic.w	r2, r3, #7
 80052be:	498b      	ldr	r1, [pc, #556]	; (80054ec <HAL_RCC_ClockConfig+0x25c>)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c6:	4b89      	ldr	r3, [pc, #548]	; (80054ec <HAL_RCC_ClockConfig+0x25c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e14a      	b.n	800556e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e4:	4b82      	ldr	r3, [pc, #520]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	497f      	ldr	r1, [pc, #508]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 80dc 	beq.w	80054bc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d13c      	bne.n	8005386 <HAL_RCC_ClockConfig+0xf6>
 800530c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005310:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005314:	fa93 f3a3 	rbit	r3, r3
 8005318:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800531a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531c:	fab3 f383 	clz	r3, r3
 8005320:	b2db      	uxtb	r3, r3
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d102      	bne.n	8005336 <HAL_RCC_ClockConfig+0xa6>
 8005330:	4b6f      	ldr	r3, [pc, #444]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	e00f      	b.n	8005356 <HAL_RCC_ClockConfig+0xc6>
 8005336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800533a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800533e:	fa93 f3a3 	rbit	r3, r3
 8005342:	667b      	str	r3, [r7, #100]	; 0x64
 8005344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005348:	663b      	str	r3, [r7, #96]	; 0x60
 800534a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800534c:	fa93 f3a3 	rbit	r3, r3
 8005350:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005352:	4b67      	ldr	r3, [pc, #412]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800535a:	65ba      	str	r2, [r7, #88]	; 0x58
 800535c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800535e:	fa92 f2a2 	rbit	r2, r2
 8005362:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005364:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005366:	fab2 f282 	clz	r2, r2
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	f042 0220 	orr.w	r2, r2, #32
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	f002 021f 	and.w	r2, r2, #31
 8005376:	2101      	movs	r1, #1
 8005378:	fa01 f202 	lsl.w	r2, r1, r2
 800537c:	4013      	ands	r3, r2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d17b      	bne.n	800547a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e0f3      	b.n	800556e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d13c      	bne.n	8005408 <HAL_RCC_ClockConfig+0x178>
 800538e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005392:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005396:	fa93 f3a3 	rbit	r3, r3
 800539a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800539c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800539e:	fab3 f383 	clz	r3, r3
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	095b      	lsrs	r3, r3, #5
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d102      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x128>
 80053b2:	4b4f      	ldr	r3, [pc, #316]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	e00f      	b.n	80053d8 <HAL_RCC_ClockConfig+0x148>
 80053b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c0:	fa93 f3a3 	rbit	r3, r3
 80053c4:	647b      	str	r3, [r7, #68]	; 0x44
 80053c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053ca:	643b      	str	r3, [r7, #64]	; 0x40
 80053cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ce:	fa93 f3a3 	rbit	r3, r3
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d4:	4b46      	ldr	r3, [pc, #280]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053dc:	63ba      	str	r2, [r7, #56]	; 0x38
 80053de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053e0:	fa92 f2a2 	rbit	r2, r2
 80053e4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80053e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053e8:	fab2 f282 	clz	r2, r2
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	f042 0220 	orr.w	r2, r2, #32
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	f002 021f 	and.w	r2, r2, #31
 80053f8:	2101      	movs	r1, #1
 80053fa:	fa01 f202 	lsl.w	r2, r1, r2
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d13a      	bne.n	800547a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e0b2      	b.n	800556e <HAL_RCC_ClockConfig+0x2de>
 8005408:	2302      	movs	r3, #2
 800540a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	fa93 f3a3 	rbit	r3, r3
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005416:	fab3 f383 	clz	r3, r3
 800541a:	b2db      	uxtb	r3, r3
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b01      	cmp	r3, #1
 8005428:	d102      	bne.n	8005430 <HAL_RCC_ClockConfig+0x1a0>
 800542a:	4b31      	ldr	r3, [pc, #196]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	e00d      	b.n	800544c <HAL_RCC_ClockConfig+0x1bc>
 8005430:	2302      	movs	r3, #2
 8005432:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	fa93 f3a3 	rbit	r3, r3
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
 800543c:	2302      	movs	r3, #2
 800543e:	623b      	str	r3, [r7, #32]
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	fa93 f3a3 	rbit	r3, r3
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	4b29      	ldr	r3, [pc, #164]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	2202      	movs	r2, #2
 800544e:	61ba      	str	r2, [r7, #24]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	fa92 f2a2 	rbit	r2, r2
 8005456:	617a      	str	r2, [r7, #20]
  return result;
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	fab2 f282 	clz	r2, r2
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	f042 0220 	orr.w	r2, r2, #32
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	f002 021f 	and.w	r2, r2, #31
 800546a:	2101      	movs	r1, #1
 800546c:	fa01 f202 	lsl.w	r2, r1, r2
 8005470:	4013      	ands	r3, r2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e079      	b.n	800556e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800547a:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f023 0203 	bic.w	r2, r3, #3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	491a      	ldr	r1, [pc, #104]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 8005488:	4313      	orrs	r3, r2
 800548a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800548c:	f7fd fcae 	bl	8002dec <HAL_GetTick>
 8005490:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005492:	e00a      	b.n	80054aa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005494:	f7fd fcaa 	bl	8002dec <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e061      	b.n	800556e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054aa:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f003 020c 	and.w	r2, r3, #12
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d1eb      	bne.n	8005494 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054bc:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <HAL_RCC_ClockConfig+0x25c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d214      	bcs.n	80054f4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ca:	4b08      	ldr	r3, [pc, #32]	; (80054ec <HAL_RCC_ClockConfig+0x25c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f023 0207 	bic.w	r2, r3, #7
 80054d2:	4906      	ldr	r1, [pc, #24]	; (80054ec <HAL_RCC_ClockConfig+0x25c>)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054da:	4b04      	ldr	r3, [pc, #16]	; (80054ec <HAL_RCC_ClockConfig+0x25c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d005      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e040      	b.n	800556e <HAL_RCC_ClockConfig+0x2de>
 80054ec:	40022000 	.word	0x40022000
 80054f0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d008      	beq.n	8005512 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005500:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <HAL_RCC_ClockConfig+0x2e8>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	491a      	ldr	r1, [pc, #104]	; (8005578 <HAL_RCC_ClockConfig+0x2e8>)
 800550e:	4313      	orrs	r3, r2
 8005510:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800551e:	4b16      	ldr	r3, [pc, #88]	; (8005578 <HAL_RCC_ClockConfig+0x2e8>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	4912      	ldr	r1, [pc, #72]	; (8005578 <HAL_RCC_ClockConfig+0x2e8>)
 800552e:	4313      	orrs	r3, r2
 8005530:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005532:	f000 f829 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 8005536:	4601      	mov	r1, r0
 8005538:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <HAL_RCC_ClockConfig+0x2e8>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005540:	22f0      	movs	r2, #240	; 0xf0
 8005542:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	fa92 f2a2 	rbit	r2, r2
 800554a:	60fa      	str	r2, [r7, #12]
  return result;
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	fab2 f282 	clz	r2, r2
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	40d3      	lsrs	r3, r2
 8005556:	4a09      	ldr	r2, [pc, #36]	; (800557c <HAL_RCC_ClockConfig+0x2ec>)
 8005558:	5cd3      	ldrb	r3, [r2, r3]
 800555a:	fa21 f303 	lsr.w	r3, r1, r3
 800555e:	4a08      	ldr	r2, [pc, #32]	; (8005580 <HAL_RCC_ClockConfig+0x2f0>)
 8005560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <HAL_RCC_ClockConfig+0x2f4>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f7fd fbfc 	bl	8002d64 <HAL_InitTick>
  
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3778      	adds	r7, #120	; 0x78
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40021000 	.word	0x40021000
 800557c:	08007c78 	.word	0x08007c78
 8005580:	20000014 	.word	0x20000014
 8005584:	20000020 	.word	0x20000020

08005588 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005588:	b480      	push	{r7}
 800558a:	b08b      	sub	sp, #44	; 0x2c
 800558c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	2300      	movs	r3, #0
 8005594:	61bb      	str	r3, [r7, #24]
 8005596:	2300      	movs	r3, #0
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
 800559a:	2300      	movs	r3, #0
 800559c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80055a2:	4b29      	ldr	r3, [pc, #164]	; (8005648 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f003 030c 	and.w	r3, r3, #12
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d002      	beq.n	80055b8 <HAL_RCC_GetSysClockFreq+0x30>
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d003      	beq.n	80055be <HAL_RCC_GetSysClockFreq+0x36>
 80055b6:	e03c      	b.n	8005632 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055b8:	4b24      	ldr	r3, [pc, #144]	; (800564c <HAL_RCC_GetSysClockFreq+0xc4>)
 80055ba:	623b      	str	r3, [r7, #32]
      break;
 80055bc:	e03c      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80055c4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80055c8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	fa92 f2a2 	rbit	r2, r2
 80055d0:	607a      	str	r2, [r7, #4]
  return result;
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	fab2 f282 	clz	r2, r2
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	40d3      	lsrs	r3, r2
 80055dc:	4a1c      	ldr	r2, [pc, #112]	; (8005650 <HAL_RCC_GetSysClockFreq+0xc8>)
 80055de:	5cd3      	ldrb	r3, [r2, r3]
 80055e0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80055e2:	4b19      	ldr	r3, [pc, #100]	; (8005648 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	220f      	movs	r2, #15
 80055ec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	fa92 f2a2 	rbit	r2, r2
 80055f4:	60fa      	str	r2, [r7, #12]
  return result;
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	fab2 f282 	clz	r2, r2
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	40d3      	lsrs	r3, r2
 8005600:	4a14      	ldr	r2, [pc, #80]	; (8005654 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005602:	5cd3      	ldrb	r3, [r2, r3]
 8005604:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005610:	4a0e      	ldr	r2, [pc, #56]	; (800564c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	fbb2 f2f3 	udiv	r2, r2, r3
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
 8005620:	e004      	b.n	800562c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	4a0c      	ldr	r2, [pc, #48]	; (8005658 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005626:	fb02 f303 	mul.w	r3, r2, r3
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	623b      	str	r3, [r7, #32]
      break;
 8005630:	e002      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005632:	4b06      	ldr	r3, [pc, #24]	; (800564c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005634:	623b      	str	r3, [r7, #32]
      break;
 8005636:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005638:	6a3b      	ldr	r3, [r7, #32]
}
 800563a:	4618      	mov	r0, r3
 800563c:	372c      	adds	r7, #44	; 0x2c
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40021000 	.word	0x40021000
 800564c:	007a1200 	.word	0x007a1200
 8005650:	08007c90 	.word	0x08007c90
 8005654:	08007ca0 	.word	0x08007ca0
 8005658:	003d0900 	.word	0x003d0900

0800565c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005660:	4b03      	ldr	r3, [pc, #12]	; (8005670 <HAL_RCC_GetHCLKFreq+0x14>)
 8005662:	681b      	ldr	r3, [r3, #0]
}
 8005664:	4618      	mov	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	20000014 	.word	0x20000014

08005674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800567a:	f7ff ffef 	bl	800565c <HAL_RCC_GetHCLKFreq>
 800567e:	4601      	mov	r1, r0
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005688:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800568c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	fa92 f2a2 	rbit	r2, r2
 8005694:	603a      	str	r2, [r7, #0]
  return result;
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	fab2 f282 	clz	r2, r2
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	40d3      	lsrs	r3, r2
 80056a0:	4a04      	ldr	r2, [pc, #16]	; (80056b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80056a2:	5cd3      	ldrb	r3, [r2, r3]
 80056a4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40021000 	.word	0x40021000
 80056b4:	08007c88 	.word	0x08007c88

080056b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80056be:	f7ff ffcd 	bl	800565c <HAL_RCC_GetHCLKFreq>
 80056c2:	4601      	mov	r1, r0
 80056c4:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80056cc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80056d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	fa92 f2a2 	rbit	r2, r2
 80056d8:	603a      	str	r2, [r7, #0]
  return result;
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	fab2 f282 	clz	r2, r2
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	40d3      	lsrs	r3, r2
 80056e4:	4a04      	ldr	r2, [pc, #16]	; (80056f8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80056e6:	5cd3      	ldrb	r3, [r2, r3]
 80056e8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40021000 	.word	0x40021000
 80056f8:	08007c88 	.word	0x08007c88

080056fc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b092      	sub	sp, #72	; 0x48
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800570c:	2300      	movs	r3, #0
 800570e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 80d4 	beq.w	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005720:	4b4e      	ldr	r3, [pc, #312]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10e      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800572c:	4b4b      	ldr	r3, [pc, #300]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	4a4a      	ldr	r2, [pc, #296]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005736:	61d3      	str	r3, [r2, #28]
 8005738:	4b48      	ldr	r3, [pc, #288]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005740:	60bb      	str	r3, [r7, #8]
 8005742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800574a:	4b45      	ldr	r3, [pc, #276]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005752:	2b00      	cmp	r3, #0
 8005754:	d118      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005756:	4b42      	ldr	r3, [pc, #264]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a41      	ldr	r2, [pc, #260]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800575c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005760:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005762:	f7fd fb43 	bl	8002dec <HAL_GetTick>
 8005766:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005768:	e008      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576a:	f7fd fb3f 	bl	8002dec <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b64      	cmp	r3, #100	; 0x64
 8005776:	d901      	bls.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e13c      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800577c:	4b38      	ldr	r3, [pc, #224]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0f0      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005788:	4b34      	ldr	r3, [pc, #208]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005790:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 8084 	beq.w	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d07c      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057a8:	4b2c      	ldr	r3, [pc, #176]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	fa93 f3a3 	rbit	r3, r3
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80057c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057c2:	fab3 f383 	clz	r3, r3
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	461a      	mov	r2, r3
 80057ca:	4b26      	ldr	r3, [pc, #152]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	461a      	mov	r2, r3
 80057d2:	2301      	movs	r3, #1
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	fa93 f3a3 	rbit	r3, r3
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057e6:	fab3 f383 	clz	r3, r3
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	4b1d      	ldr	r3, [pc, #116]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057f0:	4413      	add	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	461a      	mov	r2, r3
 80057f6:	2300      	movs	r3, #0
 80057f8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80057fa:	4a18      	ldr	r2, [pc, #96]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057fe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d04b      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580a:	f7fd faef 	bl	8002dec <HAL_GetTick>
 800580e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005810:	e00a      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005812:	f7fd faeb 	bl	8002dec <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005820:	4293      	cmp	r3, r2
 8005822:	d901      	bls.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e0e6      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8005828:	2302      	movs	r3, #2
 800582a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	fa93 f3a3 	rbit	r3, r3
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
 8005834:	2302      	movs	r3, #2
 8005836:	623b      	str	r3, [r7, #32]
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	fa93 f3a3 	rbit	r3, r3
 800583e:	61fb      	str	r3, [r7, #28]
  return result;
 8005840:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005842:	fab3 f383 	clz	r3, r3
 8005846:	b2db      	uxtb	r3, r3
 8005848:	095b      	lsrs	r3, r3, #5
 800584a:	b2db      	uxtb	r3, r3
 800584c:	f043 0302 	orr.w	r3, r3, #2
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d108      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005856:	4b01      	ldr	r3, [pc, #4]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	e00d      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800585c:	40021000 	.word	0x40021000
 8005860:	40007000 	.word	0x40007000
 8005864:	10908100 	.word	0x10908100
 8005868:	2302      	movs	r3, #2
 800586a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	fa93 f3a3 	rbit	r3, r3
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	4b62      	ldr	r3, [pc, #392]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	2202      	movs	r2, #2
 800587a:	613a      	str	r2, [r7, #16]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	fa92 f2a2 	rbit	r2, r2
 8005882:	60fa      	str	r2, [r7, #12]
  return result;
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	fab2 f282 	clz	r2, r2
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	f002 021f 	and.w	r2, r2, #31
 8005896:	2101      	movs	r1, #1
 8005898:	fa01 f202 	lsl.w	r2, r1, r2
 800589c:	4013      	ands	r3, r2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0b7      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80058a2:	4b57      	ldr	r3, [pc, #348]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4954      	ldr	r1, [pc, #336]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d105      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058bc:	4b50      	ldr	r3, [pc, #320]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	4a4f      	ldr	r2, [pc, #316]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058d4:	4b4a      	ldr	r3, [pc, #296]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	f023 0203 	bic.w	r2, r3, #3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4947      	ldr	r1, [pc, #284]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058f2:	4b43      	ldr	r3, [pc, #268]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	f023 0210 	bic.w	r2, r3, #16
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	4940      	ldr	r1, [pc, #256]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005900:	4313      	orrs	r3, r2
 8005902:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005910:	4b3b      	ldr	r3, [pc, #236]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	f023 0220 	bic.w	r2, r3, #32
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	4938      	ldr	r1, [pc, #224]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800591e:	4313      	orrs	r3, r2
 8005920:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800592e:	4b34      	ldr	r3, [pc, #208]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	4931      	ldr	r1, [pc, #196]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800593c:	4313      	orrs	r3, r2
 800593e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005948:	2b00      	cmp	r3, #0
 800594a:	d008      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800594c:	4b2c      	ldr	r3, [pc, #176]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	4929      	ldr	r1, [pc, #164]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800595a:	4313      	orrs	r3, r2
 800595c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005966:	2b00      	cmp	r3, #0
 8005968:	d008      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800596a:	4b25      	ldr	r3, [pc, #148]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	4922      	ldr	r1, [pc, #136]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005978:	4313      	orrs	r3, r2
 800597a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005988:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	491a      	ldr	r1, [pc, #104]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005996:	4313      	orrs	r3, r2
 8005998:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d008      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80059a6:	4b16      	ldr	r3, [pc, #88]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	4913      	ldr	r1, [pc, #76]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80059c4:	4b0e      	ldr	r3, [pc, #56]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	490b      	ldr	r1, [pc, #44]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d008      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80059e2:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	4904      	ldr	r1, [pc, #16]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3748      	adds	r7, #72	; 0x48
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40021000 	.word	0x40021000

08005a04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e09d      	b.n	8005b52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d108      	bne.n	8005a30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a26:	d009      	beq.n	8005a3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	61da      	str	r2, [r3, #28]
 8005a2e:	e005      	b.n	8005a3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fc fa8e 	bl	8001f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a7c:	d902      	bls.n	8005a84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	e002      	b.n	8005a8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a92:	d007      	beq.n	8005aa4 <HAL_SPI_Init+0xa0>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a9c:	d002      	beq.n	8005aa4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae6:	ea42 0103 	orr.w	r1, r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	0c1b      	lsrs	r3, r3, #16
 8005b00:	f003 0204 	and.w	r2, r3, #4
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b20:	ea42 0103 	orr.w	r1, r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69da      	ldr	r2, [r3, #28]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b088      	sub	sp, #32
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_SPI_Transmit+0x22>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e15f      	b.n	8005e3c <HAL_SPI_Transmit+0x2e2>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b84:	f7fd f932 	bl	8002dec <HAL_GetTick>
 8005b88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d002      	beq.n	8005ba0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b9e:	e148      	b.n	8005e32 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <HAL_SPI_Transmit+0x52>
 8005ba6:	88fb      	ldrh	r3, [r7, #6]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d102      	bne.n	8005bb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bb0:	e13f      	b.n	8005e32 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2203      	movs	r2, #3
 8005bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	88fa      	ldrh	r2, [r7, #6]
 8005bca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	88fa      	ldrh	r2, [r7, #6]
 8005bd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bfc:	d10f      	bne.n	8005c1e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c28:	2b40      	cmp	r3, #64	; 0x40
 8005c2a:	d007      	beq.n	8005c3c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c44:	d94f      	bls.n	8005ce6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_SPI_Transmit+0xfa>
 8005c4e:	8afb      	ldrh	r3, [r7, #22]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d142      	bne.n	8005cda <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	881a      	ldrh	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	1c9a      	adds	r2, r3, #2
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c78:	e02f      	b.n	8005cda <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d112      	bne.n	8005cae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	881a      	ldrh	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	1c9a      	adds	r2, r3, #2
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cac:	e015      	b.n	8005cda <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cae:	f7fd f89d 	bl	8002dec <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d803      	bhi.n	8005cc6 <HAL_SPI_Transmit+0x16c>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc4:	d102      	bne.n	8005ccc <HAL_SPI_Transmit+0x172>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d106      	bne.n	8005cda <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005cd8:	e0ab      	b.n	8005e32 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1ca      	bne.n	8005c7a <HAL_SPI_Transmit+0x120>
 8005ce4:	e080      	b.n	8005de8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <HAL_SPI_Transmit+0x19a>
 8005cee:	8afb      	ldrh	r3, [r7, #22]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d174      	bne.n	8005dde <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d912      	bls.n	8005d24 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	881a      	ldrh	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	1c9a      	adds	r2, r3, #2
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b02      	subs	r3, #2
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d22:	e05c      	b.n	8005dde <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	7812      	ldrb	r2, [r2, #0]
 8005d30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d4a:	e048      	b.n	8005dde <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d12b      	bne.n	8005db2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d912      	bls.n	8005d8a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	881a      	ldrh	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	1c9a      	adds	r2, r3, #2
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b02      	subs	r3, #2
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d88:	e029      	b.n	8005dde <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	330c      	adds	r3, #12
 8005d94:	7812      	ldrb	r2, [r2, #0]
 8005d96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005db0:	e015      	b.n	8005dde <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005db2:	f7fd f81b 	bl	8002dec <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d803      	bhi.n	8005dca <HAL_SPI_Transmit+0x270>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d102      	bne.n	8005dd0 <HAL_SPI_Transmit+0x276>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005ddc:	e029      	b.n	8005e32 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1b1      	bne.n	8005d4c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f947 	bl	8006080 <SPI_EndRxTxTransaction>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e003      	b.n	8005e32 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3720      	adds	r7, #32
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e54:	f7fc ffca 	bl	8002dec <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5c:	1a9b      	subs	r3, r3, r2
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	4413      	add	r3, r2
 8005e62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e64:	f7fc ffc2 	bl	8002dec <HAL_GetTick>
 8005e68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e6a:	4b39      	ldr	r3, [pc, #228]	; (8005f50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	015b      	lsls	r3, r3, #5
 8005e70:	0d1b      	lsrs	r3, r3, #20
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	fb02 f303 	mul.w	r3, r2, r3
 8005e78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e7a:	e054      	b.n	8005f26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	d050      	beq.n	8005f26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e84:	f7fc ffb2 	bl	8002dec <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d902      	bls.n	8005e9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d13d      	bne.n	8005f16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ea8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eb2:	d111      	bne.n	8005ed8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ebc:	d004      	beq.n	8005ec8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec6:	d107      	bne.n	8005ed8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee0:	d10f      	bne.n	8005f02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e017      	b.n	8005f46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	bf0c      	ite	eq
 8005f36:	2301      	moveq	r3, #1
 8005f38:	2300      	movne	r3, #0
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d19b      	bne.n	8005e7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000014 	.word	0x20000014

08005f54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08a      	sub	sp, #40	; 0x28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f62:	2300      	movs	r3, #0
 8005f64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f66:	f7fc ff41 	bl	8002dec <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	4413      	add	r3, r2
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f76:	f7fc ff39 	bl	8002dec <HAL_GetTick>
 8005f7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	330c      	adds	r3, #12
 8005f82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f84:	4b3d      	ldr	r3, [pc, #244]	; (800607c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	00da      	lsls	r2, r3, #3
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	0d1b      	lsrs	r3, r3, #20
 8005f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f96:	fb02 f303 	mul.w	r3, r2, r3
 8005f9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f9c:	e060      	b.n	8006060 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fa4:	d107      	bne.n	8005fb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d104      	bne.n	8005fb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d050      	beq.n	8006060 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fbe:	f7fc ff15 	bl	8002dec <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d902      	bls.n	8005fd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d13d      	bne.n	8006050 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fe2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fec:	d111      	bne.n	8006012 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff6:	d004      	beq.n	8006002 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006000:	d107      	bne.n	8006012 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006010:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800601a:	d10f      	bne.n	800603c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800603a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e010      	b.n	8006072 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	3b01      	subs	r3, #1
 800605e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4013      	ands	r3, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	d196      	bne.n	8005f9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3728      	adds	r7, #40	; 0x28
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000014 	.word	0x20000014

08006080 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2200      	movs	r2, #0
 8006094:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7ff ff5b 	bl	8005f54 <SPI_WaitFifoStateUntilTimeout>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d007      	beq.n	80060b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a8:	f043 0220 	orr.w	r2, r3, #32
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e027      	b.n	8006104 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2200      	movs	r2, #0
 80060bc:	2180      	movs	r1, #128	; 0x80
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f7ff fec0 	bl	8005e44 <SPI_WaitFlagStateUntilTimeout>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ce:	f043 0220 	orr.w	r2, r3, #32
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e014      	b.n	8006104 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f7ff ff34 	bl	8005f54 <SPI_WaitFifoStateUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f6:	f043 0220 	orr.w	r2, r3, #32
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e000      	b.n	8006104 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e040      	b.n	80061a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006122:	2b00      	cmp	r3, #0
 8006124:	d106      	bne.n	8006134 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7fb ff66 	bl	8002000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2224      	movs	r2, #36	; 0x24
 8006138:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0201 	bic.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f8b6 	bl	80062bc <UART_SetConfig>
 8006150:	4603      	mov	r3, r0
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e022      	b.n	80061a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f9e0 	bl	8006528 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006176:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006186:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0201 	orr.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fa67 	bl	800666c <UART_CheckIdleState>
 800619e:	4603      	mov	r3, r0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08a      	sub	sp, #40	; 0x28
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	4613      	mov	r3, r2
 80061b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d178      	bne.n	80062b2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <HAL_UART_Transmit+0x24>
 80061c6:	88fb      	ldrh	r3, [r7, #6]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e071      	b.n	80062b4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2221      	movs	r2, #33	; 0x21
 80061dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061de:	f7fc fe05 	bl	8002dec <HAL_GetTick>
 80061e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	88fa      	ldrh	r2, [r7, #6]
 80061e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	88fa      	ldrh	r2, [r7, #6]
 80061f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fc:	d108      	bne.n	8006210 <HAL_UART_Transmit+0x68>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d104      	bne.n	8006210 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	e003      	b.n	8006218 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006214:	2300      	movs	r3, #0
 8006216:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006218:	e030      	b.n	800627c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2200      	movs	r2, #0
 8006222:	2180      	movs	r1, #128	; 0x80
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fac9 	bl	80067bc <UART_WaitOnFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d004      	beq.n	800623a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e03c      	b.n	80062b4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10b      	bne.n	8006258 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	881a      	ldrh	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800624c:	b292      	uxth	r2, r2
 800624e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	3302      	adds	r3, #2
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	e008      	b.n	800626a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	781a      	ldrb	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	b292      	uxth	r2, r2
 8006262:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	3301      	adds	r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1c8      	bne.n	800621a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2200      	movs	r2, #0
 8006290:	2140      	movs	r1, #64	; 0x40
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 fa92 	bl	80067bc <UART_WaitOnFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d004      	beq.n	80062a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2220      	movs	r2, #32
 80062a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e005      	b.n	80062b4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2220      	movs	r2, #32
 80062ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e000      	b.n	80062b4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80062b2:	2302      	movs	r3, #2
  }
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3720      	adds	r7, #32
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	4313      	orrs	r3, r2
 80062de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	4b8a      	ldr	r3, [pc, #552]	; (8006510 <UART_SetConfig+0x254>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	6979      	ldr	r1, [r7, #20]
 80062f0:	430b      	orrs	r3, r1
 80062f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	430a      	orrs	r2, r1
 800632c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a78      	ldr	r2, [pc, #480]	; (8006514 <UART_SetConfig+0x258>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d120      	bne.n	800637a <UART_SetConfig+0xbe>
 8006338:	4b77      	ldr	r3, [pc, #476]	; (8006518 <UART_SetConfig+0x25c>)
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	f003 0303 	and.w	r3, r3, #3
 8006340:	2b03      	cmp	r3, #3
 8006342:	d817      	bhi.n	8006374 <UART_SetConfig+0xb8>
 8006344:	a201      	add	r2, pc, #4	; (adr r2, 800634c <UART_SetConfig+0x90>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	0800635d 	.word	0x0800635d
 8006350:	08006369 	.word	0x08006369
 8006354:	0800636f 	.word	0x0800636f
 8006358:	08006363 	.word	0x08006363
 800635c:	2300      	movs	r3, #0
 800635e:	77fb      	strb	r3, [r7, #31]
 8006360:	e01d      	b.n	800639e <UART_SetConfig+0xe2>
 8006362:	2302      	movs	r3, #2
 8006364:	77fb      	strb	r3, [r7, #31]
 8006366:	e01a      	b.n	800639e <UART_SetConfig+0xe2>
 8006368:	2304      	movs	r3, #4
 800636a:	77fb      	strb	r3, [r7, #31]
 800636c:	e017      	b.n	800639e <UART_SetConfig+0xe2>
 800636e:	2308      	movs	r3, #8
 8006370:	77fb      	strb	r3, [r7, #31]
 8006372:	e014      	b.n	800639e <UART_SetConfig+0xe2>
 8006374:	2310      	movs	r3, #16
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e011      	b.n	800639e <UART_SetConfig+0xe2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a67      	ldr	r2, [pc, #412]	; (800651c <UART_SetConfig+0x260>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d102      	bne.n	800638a <UART_SetConfig+0xce>
 8006384:	2300      	movs	r3, #0
 8006386:	77fb      	strb	r3, [r7, #31]
 8006388:	e009      	b.n	800639e <UART_SetConfig+0xe2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a64      	ldr	r2, [pc, #400]	; (8006520 <UART_SetConfig+0x264>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d102      	bne.n	800639a <UART_SetConfig+0xde>
 8006394:	2300      	movs	r3, #0
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e001      	b.n	800639e <UART_SetConfig+0xe2>
 800639a:	2310      	movs	r3, #16
 800639c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a6:	d15a      	bne.n	800645e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80063a8:	7ffb      	ldrb	r3, [r7, #31]
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d827      	bhi.n	80063fe <UART_SetConfig+0x142>
 80063ae:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <UART_SetConfig+0xf8>)
 80063b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b4:	080063d9 	.word	0x080063d9
 80063b8:	080063e1 	.word	0x080063e1
 80063bc:	080063e9 	.word	0x080063e9
 80063c0:	080063ff 	.word	0x080063ff
 80063c4:	080063ef 	.word	0x080063ef
 80063c8:	080063ff 	.word	0x080063ff
 80063cc:	080063ff 	.word	0x080063ff
 80063d0:	080063ff 	.word	0x080063ff
 80063d4:	080063f7 	.word	0x080063f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d8:	f7ff f94c 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 80063dc:	61b8      	str	r0, [r7, #24]
        break;
 80063de:	e013      	b.n	8006408 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063e0:	f7ff f96a 	bl	80056b8 <HAL_RCC_GetPCLK2Freq>
 80063e4:	61b8      	str	r0, [r7, #24]
        break;
 80063e6:	e00f      	b.n	8006408 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063e8:	4b4e      	ldr	r3, [pc, #312]	; (8006524 <UART_SetConfig+0x268>)
 80063ea:	61bb      	str	r3, [r7, #24]
        break;
 80063ec:	e00c      	b.n	8006408 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ee:	f7ff f8cb 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 80063f2:	61b8      	str	r0, [r7, #24]
        break;
 80063f4:	e008      	b.n	8006408 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063fa:	61bb      	str	r3, [r7, #24]
        break;
 80063fc:	e004      	b.n	8006408 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	77bb      	strb	r3, [r7, #30]
        break;
 8006406:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d074      	beq.n	80064f8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	005a      	lsls	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	085b      	lsrs	r3, r3, #1
 8006418:	441a      	add	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006422:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b0f      	cmp	r3, #15
 8006428:	d916      	bls.n	8006458 <UART_SetConfig+0x19c>
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006430:	d212      	bcs.n	8006458 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f023 030f 	bic.w	r3, r3, #15
 800643a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	b29b      	uxth	r3, r3
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	b29a      	uxth	r2, r3
 8006448:	89fb      	ldrh	r3, [r7, #14]
 800644a:	4313      	orrs	r3, r2
 800644c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	89fa      	ldrh	r2, [r7, #14]
 8006454:	60da      	str	r2, [r3, #12]
 8006456:	e04f      	b.n	80064f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	77bb      	strb	r3, [r7, #30]
 800645c:	e04c      	b.n	80064f8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800645e:	7ffb      	ldrb	r3, [r7, #31]
 8006460:	2b08      	cmp	r3, #8
 8006462:	d828      	bhi.n	80064b6 <UART_SetConfig+0x1fa>
 8006464:	a201      	add	r2, pc, #4	; (adr r2, 800646c <UART_SetConfig+0x1b0>)
 8006466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646a:	bf00      	nop
 800646c:	08006491 	.word	0x08006491
 8006470:	08006499 	.word	0x08006499
 8006474:	080064a1 	.word	0x080064a1
 8006478:	080064b7 	.word	0x080064b7
 800647c:	080064a7 	.word	0x080064a7
 8006480:	080064b7 	.word	0x080064b7
 8006484:	080064b7 	.word	0x080064b7
 8006488:	080064b7 	.word	0x080064b7
 800648c:	080064af 	.word	0x080064af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006490:	f7ff f8f0 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 8006494:	61b8      	str	r0, [r7, #24]
        break;
 8006496:	e013      	b.n	80064c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006498:	f7ff f90e 	bl	80056b8 <HAL_RCC_GetPCLK2Freq>
 800649c:	61b8      	str	r0, [r7, #24]
        break;
 800649e:	e00f      	b.n	80064c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a0:	4b20      	ldr	r3, [pc, #128]	; (8006524 <UART_SetConfig+0x268>)
 80064a2:	61bb      	str	r3, [r7, #24]
        break;
 80064a4:	e00c      	b.n	80064c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064a6:	f7ff f86f 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 80064aa:	61b8      	str	r0, [r7, #24]
        break;
 80064ac:	e008      	b.n	80064c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b2:	61bb      	str	r3, [r7, #24]
        break;
 80064b4:	e004      	b.n	80064c0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	77bb      	strb	r3, [r7, #30]
        break;
 80064be:	bf00      	nop
    }

    if (pclk != 0U)
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d018      	beq.n	80064f8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	085a      	lsrs	r2, r3, #1
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	441a      	add	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b0f      	cmp	r3, #15
 80064de:	d909      	bls.n	80064f4 <UART_SetConfig+0x238>
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e6:	d205      	bcs.n	80064f4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60da      	str	r2, [r3, #12]
 80064f2:	e001      	b.n	80064f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006504:	7fbb      	ldrb	r3, [r7, #30]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	efff69f3 	.word	0xefff69f3
 8006514:	40013800 	.word	0x40013800
 8006518:	40021000 	.word	0x40021000
 800651c:	40004400 	.word	0x40004400
 8006520:	40004800 	.word	0x40004800
 8006524:	007a1200 	.word	0x007a1200

08006528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	f003 0310 	and.w	r3, r3, #16
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01a      	beq.n	800663e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006626:	d10a      	bne.n	800663e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	605a      	str	r2, [r3, #4]
  }
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b098      	sub	sp, #96	; 0x60
 8006670:	af02      	add	r7, sp, #8
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800667c:	f7fc fbb6 	bl	8002dec <HAL_GetTick>
 8006680:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0308 	and.w	r3, r3, #8
 800668c:	2b08      	cmp	r3, #8
 800668e:	d12e      	bne.n	80066ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006698:	2200      	movs	r2, #0
 800669a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f88c 	bl	80067bc <UART_WaitOnFlagUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d021      	beq.n	80066ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066be:	653b      	str	r3, [r7, #80]	; 0x50
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	461a      	mov	r2, r3
 80066c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c8:	647b      	str	r3, [r7, #68]	; 0x44
 80066ca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e6      	bne.n	80066aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2220      	movs	r2, #32
 80066e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e062      	b.n	80067b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d149      	bne.n	8006790 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006704:	2200      	movs	r2, #0
 8006706:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f856 	bl	80067bc <UART_WaitOnFlagUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d03c      	beq.n	8006790 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	623b      	str	r3, [r7, #32]
   return(result);
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006734:	633b      	str	r3, [r7, #48]	; 0x30
 8006736:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800673a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e6      	bne.n	8006716 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3308      	adds	r3, #8
 800674e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	60fb      	str	r3, [r7, #12]
   return(result);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0301 	bic.w	r3, r3, #1
 800675e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3308      	adds	r3, #8
 8006766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006768:	61fa      	str	r2, [r7, #28]
 800676a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	69b9      	ldr	r1, [r7, #24]
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	617b      	str	r3, [r7, #20]
   return(result);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e5      	bne.n	8006748 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2220      	movs	r2, #32
 8006780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e011      	b.n	80067b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3758      	adds	r7, #88	; 0x58
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	4613      	mov	r3, r2
 80067ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067cc:	e049      	b.n	8006862 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d4:	d045      	beq.n	8006862 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d6:	f7fc fb09 	bl	8002dec <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d302      	bcc.n	80067ec <UART_WaitOnFlagUntilTimeout+0x30>
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e048      	b.n	8006882 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d031      	beq.n	8006862 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	f003 0308 	and.w	r3, r3, #8
 8006808:	2b08      	cmp	r3, #8
 800680a:	d110      	bne.n	800682e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2208      	movs	r2, #8
 8006812:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 f838 	bl	800688a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2208      	movs	r2, #8
 800681e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e029      	b.n	8006882 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683c:	d111      	bne.n	8006862 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006846:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f81e 	bl	800688a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2220      	movs	r2, #32
 8006852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e00f      	b.n	8006882 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4013      	ands	r3, r2
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	429a      	cmp	r2, r3
 8006870:	bf0c      	ite	eq
 8006872:	2301      	moveq	r3, #1
 8006874:	2300      	movne	r3, #0
 8006876:	b2db      	uxtb	r3, r3
 8006878:	461a      	mov	r2, r3
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	429a      	cmp	r2, r3
 800687e:	d0a6      	beq.n	80067ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800688a:	b480      	push	{r7}
 800688c:	b095      	sub	sp, #84	; 0x54
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b0:	643b      	str	r3, [r7, #64]	; 0x40
 80068b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068b8:	e841 2300 	strex	r3, r2, [r1]
 80068bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e6      	bne.n	8006892 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3308      	adds	r3, #8
 80068ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	f023 0301 	bic.w	r3, r3, #1
 80068da:	64bb      	str	r3, [r7, #72]	; 0x48
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3308      	adds	r3, #8
 80068e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e5      	bne.n	80068c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d118      	bne.n	8006932 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	60bb      	str	r3, [r7, #8]
   return(result);
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f023 0310 	bic.w	r3, r3, #16
 8006914:	647b      	str	r3, [r7, #68]	; 0x44
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6979      	ldr	r1, [r7, #20]
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	613b      	str	r3, [r7, #16]
   return(result);
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e6      	bne.n	8006900 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006946:	bf00      	nop
 8006948:	3754      	adds	r7, #84	; 0x54
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
	...

08006954 <__errno>:
 8006954:	4b01      	ldr	r3, [pc, #4]	; (800695c <__errno+0x8>)
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	20000028 	.word	0x20000028

08006960 <__libc_init_array>:
 8006960:	b570      	push	{r4, r5, r6, lr}
 8006962:	4d0d      	ldr	r5, [pc, #52]	; (8006998 <__libc_init_array+0x38>)
 8006964:	4c0d      	ldr	r4, [pc, #52]	; (800699c <__libc_init_array+0x3c>)
 8006966:	1b64      	subs	r4, r4, r5
 8006968:	10a4      	asrs	r4, r4, #2
 800696a:	2600      	movs	r6, #0
 800696c:	42a6      	cmp	r6, r4
 800696e:	d109      	bne.n	8006984 <__libc_init_array+0x24>
 8006970:	4d0b      	ldr	r5, [pc, #44]	; (80069a0 <__libc_init_array+0x40>)
 8006972:	4c0c      	ldr	r4, [pc, #48]	; (80069a4 <__libc_init_array+0x44>)
 8006974:	f001 f914 	bl	8007ba0 <_init>
 8006978:	1b64      	subs	r4, r4, r5
 800697a:	10a4      	asrs	r4, r4, #2
 800697c:	2600      	movs	r6, #0
 800697e:	42a6      	cmp	r6, r4
 8006980:	d105      	bne.n	800698e <__libc_init_array+0x2e>
 8006982:	bd70      	pop	{r4, r5, r6, pc}
 8006984:	f855 3b04 	ldr.w	r3, [r5], #4
 8006988:	4798      	blx	r3
 800698a:	3601      	adds	r6, #1
 800698c:	e7ee      	b.n	800696c <__libc_init_array+0xc>
 800698e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006992:	4798      	blx	r3
 8006994:	3601      	adds	r6, #1
 8006996:	e7f2      	b.n	800697e <__libc_init_array+0x1e>
 8006998:	08007df8 	.word	0x08007df8
 800699c:	08007df8 	.word	0x08007df8
 80069a0:	08007df8 	.word	0x08007df8
 80069a4:	08007dfc 	.word	0x08007dfc

080069a8 <memset>:
 80069a8:	4402      	add	r2, r0
 80069aa:	4603      	mov	r3, r0
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d100      	bne.n	80069b2 <memset+0xa>
 80069b0:	4770      	bx	lr
 80069b2:	f803 1b01 	strb.w	r1, [r3], #1
 80069b6:	e7f9      	b.n	80069ac <memset+0x4>

080069b8 <iprintf>:
 80069b8:	b40f      	push	{r0, r1, r2, r3}
 80069ba:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <iprintf+0x2c>)
 80069bc:	b513      	push	{r0, r1, r4, lr}
 80069be:	681c      	ldr	r4, [r3, #0]
 80069c0:	b124      	cbz	r4, 80069cc <iprintf+0x14>
 80069c2:	69a3      	ldr	r3, [r4, #24]
 80069c4:	b913      	cbnz	r3, 80069cc <iprintf+0x14>
 80069c6:	4620      	mov	r0, r4
 80069c8:	f000 fae8 	bl	8006f9c <__sinit>
 80069cc:	ab05      	add	r3, sp, #20
 80069ce:	9a04      	ldr	r2, [sp, #16]
 80069d0:	68a1      	ldr	r1, [r4, #8]
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	4620      	mov	r0, r4
 80069d6:	f000 fd0b 	bl	80073f0 <_vfiprintf_r>
 80069da:	b002      	add	sp, #8
 80069dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069e0:	b004      	add	sp, #16
 80069e2:	4770      	bx	lr
 80069e4:	20000028 	.word	0x20000028

080069e8 <_puts_r>:
 80069e8:	b570      	push	{r4, r5, r6, lr}
 80069ea:	460e      	mov	r6, r1
 80069ec:	4605      	mov	r5, r0
 80069ee:	b118      	cbz	r0, 80069f8 <_puts_r+0x10>
 80069f0:	6983      	ldr	r3, [r0, #24]
 80069f2:	b90b      	cbnz	r3, 80069f8 <_puts_r+0x10>
 80069f4:	f000 fad2 	bl	8006f9c <__sinit>
 80069f8:	69ab      	ldr	r3, [r5, #24]
 80069fa:	68ac      	ldr	r4, [r5, #8]
 80069fc:	b913      	cbnz	r3, 8006a04 <_puts_r+0x1c>
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 facc 	bl	8006f9c <__sinit>
 8006a04:	4b2c      	ldr	r3, [pc, #176]	; (8006ab8 <_puts_r+0xd0>)
 8006a06:	429c      	cmp	r4, r3
 8006a08:	d120      	bne.n	8006a4c <_puts_r+0x64>
 8006a0a:	686c      	ldr	r4, [r5, #4]
 8006a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a0e:	07db      	lsls	r3, r3, #31
 8006a10:	d405      	bmi.n	8006a1e <_puts_r+0x36>
 8006a12:	89a3      	ldrh	r3, [r4, #12]
 8006a14:	0598      	lsls	r0, r3, #22
 8006a16:	d402      	bmi.n	8006a1e <_puts_r+0x36>
 8006a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a1a:	f000 fb6f 	bl	80070fc <__retarget_lock_acquire_recursive>
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	0719      	lsls	r1, r3, #28
 8006a22:	d51d      	bpl.n	8006a60 <_puts_r+0x78>
 8006a24:	6923      	ldr	r3, [r4, #16]
 8006a26:	b1db      	cbz	r3, 8006a60 <_puts_r+0x78>
 8006a28:	3e01      	subs	r6, #1
 8006a2a:	68a3      	ldr	r3, [r4, #8]
 8006a2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a30:	3b01      	subs	r3, #1
 8006a32:	60a3      	str	r3, [r4, #8]
 8006a34:	bb39      	cbnz	r1, 8006a86 <_puts_r+0x9e>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	da38      	bge.n	8006aac <_puts_r+0xc4>
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	210a      	movs	r1, #10
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 f8b4 	bl	8006bac <__swbuf_r>
 8006a44:	3001      	adds	r0, #1
 8006a46:	d011      	beq.n	8006a6c <_puts_r+0x84>
 8006a48:	250a      	movs	r5, #10
 8006a4a:	e011      	b.n	8006a70 <_puts_r+0x88>
 8006a4c:	4b1b      	ldr	r3, [pc, #108]	; (8006abc <_puts_r+0xd4>)
 8006a4e:	429c      	cmp	r4, r3
 8006a50:	d101      	bne.n	8006a56 <_puts_r+0x6e>
 8006a52:	68ac      	ldr	r4, [r5, #8]
 8006a54:	e7da      	b.n	8006a0c <_puts_r+0x24>
 8006a56:	4b1a      	ldr	r3, [pc, #104]	; (8006ac0 <_puts_r+0xd8>)
 8006a58:	429c      	cmp	r4, r3
 8006a5a:	bf08      	it	eq
 8006a5c:	68ec      	ldreq	r4, [r5, #12]
 8006a5e:	e7d5      	b.n	8006a0c <_puts_r+0x24>
 8006a60:	4621      	mov	r1, r4
 8006a62:	4628      	mov	r0, r5
 8006a64:	f000 f8f4 	bl	8006c50 <__swsetup_r>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d0dd      	beq.n	8006a28 <_puts_r+0x40>
 8006a6c:	f04f 35ff 	mov.w	r5, #4294967295
 8006a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a72:	07da      	lsls	r2, r3, #31
 8006a74:	d405      	bmi.n	8006a82 <_puts_r+0x9a>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	059b      	lsls	r3, r3, #22
 8006a7a:	d402      	bmi.n	8006a82 <_puts_r+0x9a>
 8006a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a7e:	f000 fb3e 	bl	80070fe <__retarget_lock_release_recursive>
 8006a82:	4628      	mov	r0, r5
 8006a84:	bd70      	pop	{r4, r5, r6, pc}
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	da04      	bge.n	8006a94 <_puts_r+0xac>
 8006a8a:	69a2      	ldr	r2, [r4, #24]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	dc06      	bgt.n	8006a9e <_puts_r+0xb6>
 8006a90:	290a      	cmp	r1, #10
 8006a92:	d004      	beq.n	8006a9e <_puts_r+0xb6>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	6022      	str	r2, [r4, #0]
 8006a9a:	7019      	strb	r1, [r3, #0]
 8006a9c:	e7c5      	b.n	8006a2a <_puts_r+0x42>
 8006a9e:	4622      	mov	r2, r4
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f000 f883 	bl	8006bac <__swbuf_r>
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	d1bf      	bne.n	8006a2a <_puts_r+0x42>
 8006aaa:	e7df      	b.n	8006a6c <_puts_r+0x84>
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	250a      	movs	r5, #10
 8006ab0:	1c5a      	adds	r2, r3, #1
 8006ab2:	6022      	str	r2, [r4, #0]
 8006ab4:	701d      	strb	r5, [r3, #0]
 8006ab6:	e7db      	b.n	8006a70 <_puts_r+0x88>
 8006ab8:	08007d84 	.word	0x08007d84
 8006abc:	08007da4 	.word	0x08007da4
 8006ac0:	08007d64 	.word	0x08007d64

08006ac4 <puts>:
 8006ac4:	4b02      	ldr	r3, [pc, #8]	; (8006ad0 <puts+0xc>)
 8006ac6:	4601      	mov	r1, r0
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	f7ff bf8d 	b.w	80069e8 <_puts_r>
 8006ace:	bf00      	nop
 8006ad0:	20000028 	.word	0x20000028

08006ad4 <srand>:
 8006ad4:	b538      	push	{r3, r4, r5, lr}
 8006ad6:	4b10      	ldr	r3, [pc, #64]	; (8006b18 <srand+0x44>)
 8006ad8:	681d      	ldr	r5, [r3, #0]
 8006ada:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006adc:	4604      	mov	r4, r0
 8006ade:	b9b3      	cbnz	r3, 8006b0e <srand+0x3a>
 8006ae0:	2018      	movs	r0, #24
 8006ae2:	f000 fb73 	bl	80071cc <malloc>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	63a8      	str	r0, [r5, #56]	; 0x38
 8006aea:	b920      	cbnz	r0, 8006af6 <srand+0x22>
 8006aec:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <srand+0x48>)
 8006aee:	480c      	ldr	r0, [pc, #48]	; (8006b20 <srand+0x4c>)
 8006af0:	2142      	movs	r1, #66	; 0x42
 8006af2:	f000 f91b 	bl	8006d2c <__assert_func>
 8006af6:	490b      	ldr	r1, [pc, #44]	; (8006b24 <srand+0x50>)
 8006af8:	4b0b      	ldr	r3, [pc, #44]	; (8006b28 <srand+0x54>)
 8006afa:	e9c0 1300 	strd	r1, r3, [r0]
 8006afe:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <srand+0x58>)
 8006b00:	6083      	str	r3, [r0, #8]
 8006b02:	230b      	movs	r3, #11
 8006b04:	8183      	strh	r3, [r0, #12]
 8006b06:	2100      	movs	r1, #0
 8006b08:	2001      	movs	r0, #1
 8006b0a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006b0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006b10:	2200      	movs	r2, #0
 8006b12:	611c      	str	r4, [r3, #16]
 8006b14:	615a      	str	r2, [r3, #20]
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	20000028 	.word	0x20000028
 8006b1c:	08007cb4 	.word	0x08007cb4
 8006b20:	08007ccb 	.word	0x08007ccb
 8006b24:	abcd330e 	.word	0xabcd330e
 8006b28:	e66d1234 	.word	0xe66d1234
 8006b2c:	0005deec 	.word	0x0005deec

08006b30 <rand>:
 8006b30:	4b16      	ldr	r3, [pc, #88]	; (8006b8c <rand+0x5c>)
 8006b32:	b510      	push	{r4, lr}
 8006b34:	681c      	ldr	r4, [r3, #0]
 8006b36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b38:	b9b3      	cbnz	r3, 8006b68 <rand+0x38>
 8006b3a:	2018      	movs	r0, #24
 8006b3c:	f000 fb46 	bl	80071cc <malloc>
 8006b40:	63a0      	str	r0, [r4, #56]	; 0x38
 8006b42:	b928      	cbnz	r0, 8006b50 <rand+0x20>
 8006b44:	4602      	mov	r2, r0
 8006b46:	4b12      	ldr	r3, [pc, #72]	; (8006b90 <rand+0x60>)
 8006b48:	4812      	ldr	r0, [pc, #72]	; (8006b94 <rand+0x64>)
 8006b4a:	214e      	movs	r1, #78	; 0x4e
 8006b4c:	f000 f8ee 	bl	8006d2c <__assert_func>
 8006b50:	4a11      	ldr	r2, [pc, #68]	; (8006b98 <rand+0x68>)
 8006b52:	4b12      	ldr	r3, [pc, #72]	; (8006b9c <rand+0x6c>)
 8006b54:	e9c0 2300 	strd	r2, r3, [r0]
 8006b58:	4b11      	ldr	r3, [pc, #68]	; (8006ba0 <rand+0x70>)
 8006b5a:	6083      	str	r3, [r0, #8]
 8006b5c:	230b      	movs	r3, #11
 8006b5e:	8183      	strh	r3, [r0, #12]
 8006b60:	2201      	movs	r2, #1
 8006b62:	2300      	movs	r3, #0
 8006b64:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006b68:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006b6a:	4a0e      	ldr	r2, [pc, #56]	; (8006ba4 <rand+0x74>)
 8006b6c:	6920      	ldr	r0, [r4, #16]
 8006b6e:	6963      	ldr	r3, [r4, #20]
 8006b70:	490d      	ldr	r1, [pc, #52]	; (8006ba8 <rand+0x78>)
 8006b72:	4342      	muls	r2, r0
 8006b74:	fb01 2203 	mla	r2, r1, r3, r2
 8006b78:	fba0 0101 	umull	r0, r1, r0, r1
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	eb42 0001 	adc.w	r0, r2, r1
 8006b82:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006b86:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006b8a:	bd10      	pop	{r4, pc}
 8006b8c:	20000028 	.word	0x20000028
 8006b90:	08007cb4 	.word	0x08007cb4
 8006b94:	08007ccb 	.word	0x08007ccb
 8006b98:	abcd330e 	.word	0xabcd330e
 8006b9c:	e66d1234 	.word	0xe66d1234
 8006ba0:	0005deec 	.word	0x0005deec
 8006ba4:	5851f42d 	.word	0x5851f42d
 8006ba8:	4c957f2d 	.word	0x4c957f2d

08006bac <__swbuf_r>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	460e      	mov	r6, r1
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	b118      	cbz	r0, 8006bbe <__swbuf_r+0x12>
 8006bb6:	6983      	ldr	r3, [r0, #24]
 8006bb8:	b90b      	cbnz	r3, 8006bbe <__swbuf_r+0x12>
 8006bba:	f000 f9ef 	bl	8006f9c <__sinit>
 8006bbe:	4b21      	ldr	r3, [pc, #132]	; (8006c44 <__swbuf_r+0x98>)
 8006bc0:	429c      	cmp	r4, r3
 8006bc2:	d12b      	bne.n	8006c1c <__swbuf_r+0x70>
 8006bc4:	686c      	ldr	r4, [r5, #4]
 8006bc6:	69a3      	ldr	r3, [r4, #24]
 8006bc8:	60a3      	str	r3, [r4, #8]
 8006bca:	89a3      	ldrh	r3, [r4, #12]
 8006bcc:	071a      	lsls	r2, r3, #28
 8006bce:	d52f      	bpl.n	8006c30 <__swbuf_r+0x84>
 8006bd0:	6923      	ldr	r3, [r4, #16]
 8006bd2:	b36b      	cbz	r3, 8006c30 <__swbuf_r+0x84>
 8006bd4:	6923      	ldr	r3, [r4, #16]
 8006bd6:	6820      	ldr	r0, [r4, #0]
 8006bd8:	1ac0      	subs	r0, r0, r3
 8006bda:	6963      	ldr	r3, [r4, #20]
 8006bdc:	b2f6      	uxtb	r6, r6
 8006bde:	4283      	cmp	r3, r0
 8006be0:	4637      	mov	r7, r6
 8006be2:	dc04      	bgt.n	8006bee <__swbuf_r+0x42>
 8006be4:	4621      	mov	r1, r4
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 f944 	bl	8006e74 <_fflush_r>
 8006bec:	bb30      	cbnz	r0, 8006c3c <__swbuf_r+0x90>
 8006bee:	68a3      	ldr	r3, [r4, #8]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	60a3      	str	r3, [r4, #8]
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	6022      	str	r2, [r4, #0]
 8006bfa:	701e      	strb	r6, [r3, #0]
 8006bfc:	6963      	ldr	r3, [r4, #20]
 8006bfe:	3001      	adds	r0, #1
 8006c00:	4283      	cmp	r3, r0
 8006c02:	d004      	beq.n	8006c0e <__swbuf_r+0x62>
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	07db      	lsls	r3, r3, #31
 8006c08:	d506      	bpl.n	8006c18 <__swbuf_r+0x6c>
 8006c0a:	2e0a      	cmp	r6, #10
 8006c0c:	d104      	bne.n	8006c18 <__swbuf_r+0x6c>
 8006c0e:	4621      	mov	r1, r4
 8006c10:	4628      	mov	r0, r5
 8006c12:	f000 f92f 	bl	8006e74 <_fflush_r>
 8006c16:	b988      	cbnz	r0, 8006c3c <__swbuf_r+0x90>
 8006c18:	4638      	mov	r0, r7
 8006c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c1c:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <__swbuf_r+0x9c>)
 8006c1e:	429c      	cmp	r4, r3
 8006c20:	d101      	bne.n	8006c26 <__swbuf_r+0x7a>
 8006c22:	68ac      	ldr	r4, [r5, #8]
 8006c24:	e7cf      	b.n	8006bc6 <__swbuf_r+0x1a>
 8006c26:	4b09      	ldr	r3, [pc, #36]	; (8006c4c <__swbuf_r+0xa0>)
 8006c28:	429c      	cmp	r4, r3
 8006c2a:	bf08      	it	eq
 8006c2c:	68ec      	ldreq	r4, [r5, #12]
 8006c2e:	e7ca      	b.n	8006bc6 <__swbuf_r+0x1a>
 8006c30:	4621      	mov	r1, r4
 8006c32:	4628      	mov	r0, r5
 8006c34:	f000 f80c 	bl	8006c50 <__swsetup_r>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d0cb      	beq.n	8006bd4 <__swbuf_r+0x28>
 8006c3c:	f04f 37ff 	mov.w	r7, #4294967295
 8006c40:	e7ea      	b.n	8006c18 <__swbuf_r+0x6c>
 8006c42:	bf00      	nop
 8006c44:	08007d84 	.word	0x08007d84
 8006c48:	08007da4 	.word	0x08007da4
 8006c4c:	08007d64 	.word	0x08007d64

08006c50 <__swsetup_r>:
 8006c50:	4b32      	ldr	r3, [pc, #200]	; (8006d1c <__swsetup_r+0xcc>)
 8006c52:	b570      	push	{r4, r5, r6, lr}
 8006c54:	681d      	ldr	r5, [r3, #0]
 8006c56:	4606      	mov	r6, r0
 8006c58:	460c      	mov	r4, r1
 8006c5a:	b125      	cbz	r5, 8006c66 <__swsetup_r+0x16>
 8006c5c:	69ab      	ldr	r3, [r5, #24]
 8006c5e:	b913      	cbnz	r3, 8006c66 <__swsetup_r+0x16>
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 f99b 	bl	8006f9c <__sinit>
 8006c66:	4b2e      	ldr	r3, [pc, #184]	; (8006d20 <__swsetup_r+0xd0>)
 8006c68:	429c      	cmp	r4, r3
 8006c6a:	d10f      	bne.n	8006c8c <__swsetup_r+0x3c>
 8006c6c:	686c      	ldr	r4, [r5, #4]
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c74:	0719      	lsls	r1, r3, #28
 8006c76:	d42c      	bmi.n	8006cd2 <__swsetup_r+0x82>
 8006c78:	06dd      	lsls	r5, r3, #27
 8006c7a:	d411      	bmi.n	8006ca0 <__swsetup_r+0x50>
 8006c7c:	2309      	movs	r3, #9
 8006c7e:	6033      	str	r3, [r6, #0]
 8006c80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c84:	81a3      	strh	r3, [r4, #12]
 8006c86:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8a:	e03e      	b.n	8006d0a <__swsetup_r+0xba>
 8006c8c:	4b25      	ldr	r3, [pc, #148]	; (8006d24 <__swsetup_r+0xd4>)
 8006c8e:	429c      	cmp	r4, r3
 8006c90:	d101      	bne.n	8006c96 <__swsetup_r+0x46>
 8006c92:	68ac      	ldr	r4, [r5, #8]
 8006c94:	e7eb      	b.n	8006c6e <__swsetup_r+0x1e>
 8006c96:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <__swsetup_r+0xd8>)
 8006c98:	429c      	cmp	r4, r3
 8006c9a:	bf08      	it	eq
 8006c9c:	68ec      	ldreq	r4, [r5, #12]
 8006c9e:	e7e6      	b.n	8006c6e <__swsetup_r+0x1e>
 8006ca0:	0758      	lsls	r0, r3, #29
 8006ca2:	d512      	bpl.n	8006cca <__swsetup_r+0x7a>
 8006ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ca6:	b141      	cbz	r1, 8006cba <__swsetup_r+0x6a>
 8006ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cac:	4299      	cmp	r1, r3
 8006cae:	d002      	beq.n	8006cb6 <__swsetup_r+0x66>
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f000 fa93 	bl	80071dc <_free_r>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	6363      	str	r3, [r4, #52]	; 0x34
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cc0:	81a3      	strh	r3, [r4, #12]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	6063      	str	r3, [r4, #4]
 8006cc6:	6923      	ldr	r3, [r4, #16]
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	f043 0308 	orr.w	r3, r3, #8
 8006cd0:	81a3      	strh	r3, [r4, #12]
 8006cd2:	6923      	ldr	r3, [r4, #16]
 8006cd4:	b94b      	cbnz	r3, 8006cea <__swsetup_r+0x9a>
 8006cd6:	89a3      	ldrh	r3, [r4, #12]
 8006cd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce0:	d003      	beq.n	8006cea <__swsetup_r+0x9a>
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f000 fa31 	bl	800714c <__smakebuf_r>
 8006cea:	89a0      	ldrh	r0, [r4, #12]
 8006cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cf0:	f010 0301 	ands.w	r3, r0, #1
 8006cf4:	d00a      	beq.n	8006d0c <__swsetup_r+0xbc>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60a3      	str	r3, [r4, #8]
 8006cfa:	6963      	ldr	r3, [r4, #20]
 8006cfc:	425b      	negs	r3, r3
 8006cfe:	61a3      	str	r3, [r4, #24]
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	b943      	cbnz	r3, 8006d16 <__swsetup_r+0xc6>
 8006d04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d08:	d1ba      	bne.n	8006c80 <__swsetup_r+0x30>
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	0781      	lsls	r1, r0, #30
 8006d0e:	bf58      	it	pl
 8006d10:	6963      	ldrpl	r3, [r4, #20]
 8006d12:	60a3      	str	r3, [r4, #8]
 8006d14:	e7f4      	b.n	8006d00 <__swsetup_r+0xb0>
 8006d16:	2000      	movs	r0, #0
 8006d18:	e7f7      	b.n	8006d0a <__swsetup_r+0xba>
 8006d1a:	bf00      	nop
 8006d1c:	20000028 	.word	0x20000028
 8006d20:	08007d84 	.word	0x08007d84
 8006d24:	08007da4 	.word	0x08007da4
 8006d28:	08007d64 	.word	0x08007d64

08006d2c <__assert_func>:
 8006d2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d2e:	4614      	mov	r4, r2
 8006d30:	461a      	mov	r2, r3
 8006d32:	4b09      	ldr	r3, [pc, #36]	; (8006d58 <__assert_func+0x2c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4605      	mov	r5, r0
 8006d38:	68d8      	ldr	r0, [r3, #12]
 8006d3a:	b14c      	cbz	r4, 8006d50 <__assert_func+0x24>
 8006d3c:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <__assert_func+0x30>)
 8006d3e:	9100      	str	r1, [sp, #0]
 8006d40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d44:	4906      	ldr	r1, [pc, #24]	; (8006d60 <__assert_func+0x34>)
 8006d46:	462b      	mov	r3, r5
 8006d48:	f000 f9a6 	bl	8007098 <fiprintf>
 8006d4c:	f000 fe7a 	bl	8007a44 <abort>
 8006d50:	4b04      	ldr	r3, [pc, #16]	; (8006d64 <__assert_func+0x38>)
 8006d52:	461c      	mov	r4, r3
 8006d54:	e7f3      	b.n	8006d3e <__assert_func+0x12>
 8006d56:	bf00      	nop
 8006d58:	20000028 	.word	0x20000028
 8006d5c:	08007d26 	.word	0x08007d26
 8006d60:	08007d33 	.word	0x08007d33
 8006d64:	08007d61 	.word	0x08007d61

08006d68 <__sflush_r>:
 8006d68:	898a      	ldrh	r2, [r1, #12]
 8006d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6e:	4605      	mov	r5, r0
 8006d70:	0710      	lsls	r0, r2, #28
 8006d72:	460c      	mov	r4, r1
 8006d74:	d458      	bmi.n	8006e28 <__sflush_r+0xc0>
 8006d76:	684b      	ldr	r3, [r1, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	dc05      	bgt.n	8006d88 <__sflush_r+0x20>
 8006d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	dc02      	bgt.n	8006d88 <__sflush_r+0x20>
 8006d82:	2000      	movs	r0, #0
 8006d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d8a:	2e00      	cmp	r6, #0
 8006d8c:	d0f9      	beq.n	8006d82 <__sflush_r+0x1a>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d94:	682f      	ldr	r7, [r5, #0]
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	d032      	beq.n	8006e00 <__sflush_r+0x98>
 8006d9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	075a      	lsls	r2, r3, #29
 8006da0:	d505      	bpl.n	8006dae <__sflush_r+0x46>
 8006da2:	6863      	ldr	r3, [r4, #4]
 8006da4:	1ac0      	subs	r0, r0, r3
 8006da6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006da8:	b10b      	cbz	r3, 8006dae <__sflush_r+0x46>
 8006daa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dac:	1ac0      	subs	r0, r0, r3
 8006dae:	2300      	movs	r3, #0
 8006db0:	4602      	mov	r2, r0
 8006db2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006db4:	6a21      	ldr	r1, [r4, #32]
 8006db6:	4628      	mov	r0, r5
 8006db8:	47b0      	blx	r6
 8006dba:	1c43      	adds	r3, r0, #1
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	d106      	bne.n	8006dce <__sflush_r+0x66>
 8006dc0:	6829      	ldr	r1, [r5, #0]
 8006dc2:	291d      	cmp	r1, #29
 8006dc4:	d82c      	bhi.n	8006e20 <__sflush_r+0xb8>
 8006dc6:	4a2a      	ldr	r2, [pc, #168]	; (8006e70 <__sflush_r+0x108>)
 8006dc8:	40ca      	lsrs	r2, r1
 8006dca:	07d6      	lsls	r6, r2, #31
 8006dcc:	d528      	bpl.n	8006e20 <__sflush_r+0xb8>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	6062      	str	r2, [r4, #4]
 8006dd2:	04d9      	lsls	r1, r3, #19
 8006dd4:	6922      	ldr	r2, [r4, #16]
 8006dd6:	6022      	str	r2, [r4, #0]
 8006dd8:	d504      	bpl.n	8006de4 <__sflush_r+0x7c>
 8006dda:	1c42      	adds	r2, r0, #1
 8006ddc:	d101      	bne.n	8006de2 <__sflush_r+0x7a>
 8006dde:	682b      	ldr	r3, [r5, #0]
 8006de0:	b903      	cbnz	r3, 8006de4 <__sflush_r+0x7c>
 8006de2:	6560      	str	r0, [r4, #84]	; 0x54
 8006de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006de6:	602f      	str	r7, [r5, #0]
 8006de8:	2900      	cmp	r1, #0
 8006dea:	d0ca      	beq.n	8006d82 <__sflush_r+0x1a>
 8006dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006df0:	4299      	cmp	r1, r3
 8006df2:	d002      	beq.n	8006dfa <__sflush_r+0x92>
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 f9f1 	bl	80071dc <_free_r>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	6360      	str	r0, [r4, #52]	; 0x34
 8006dfe:	e7c1      	b.n	8006d84 <__sflush_r+0x1c>
 8006e00:	6a21      	ldr	r1, [r4, #32]
 8006e02:	2301      	movs	r3, #1
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b0      	blx	r6
 8006e08:	1c41      	adds	r1, r0, #1
 8006e0a:	d1c7      	bne.n	8006d9c <__sflush_r+0x34>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0c4      	beq.n	8006d9c <__sflush_r+0x34>
 8006e12:	2b1d      	cmp	r3, #29
 8006e14:	d001      	beq.n	8006e1a <__sflush_r+0xb2>
 8006e16:	2b16      	cmp	r3, #22
 8006e18:	d101      	bne.n	8006e1e <__sflush_r+0xb6>
 8006e1a:	602f      	str	r7, [r5, #0]
 8006e1c:	e7b1      	b.n	8006d82 <__sflush_r+0x1a>
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e24:	81a3      	strh	r3, [r4, #12]
 8006e26:	e7ad      	b.n	8006d84 <__sflush_r+0x1c>
 8006e28:	690f      	ldr	r7, [r1, #16]
 8006e2a:	2f00      	cmp	r7, #0
 8006e2c:	d0a9      	beq.n	8006d82 <__sflush_r+0x1a>
 8006e2e:	0793      	lsls	r3, r2, #30
 8006e30:	680e      	ldr	r6, [r1, #0]
 8006e32:	bf08      	it	eq
 8006e34:	694b      	ldreq	r3, [r1, #20]
 8006e36:	600f      	str	r7, [r1, #0]
 8006e38:	bf18      	it	ne
 8006e3a:	2300      	movne	r3, #0
 8006e3c:	eba6 0807 	sub.w	r8, r6, r7
 8006e40:	608b      	str	r3, [r1, #8]
 8006e42:	f1b8 0f00 	cmp.w	r8, #0
 8006e46:	dd9c      	ble.n	8006d82 <__sflush_r+0x1a>
 8006e48:	6a21      	ldr	r1, [r4, #32]
 8006e4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e4c:	4643      	mov	r3, r8
 8006e4e:	463a      	mov	r2, r7
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b0      	blx	r6
 8006e54:	2800      	cmp	r0, #0
 8006e56:	dc06      	bgt.n	8006e66 <__sflush_r+0xfe>
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	f04f 30ff 	mov.w	r0, #4294967295
 8006e64:	e78e      	b.n	8006d84 <__sflush_r+0x1c>
 8006e66:	4407      	add	r7, r0
 8006e68:	eba8 0800 	sub.w	r8, r8, r0
 8006e6c:	e7e9      	b.n	8006e42 <__sflush_r+0xda>
 8006e6e:	bf00      	nop
 8006e70:	20400001 	.word	0x20400001

08006e74 <_fflush_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	690b      	ldr	r3, [r1, #16]
 8006e78:	4605      	mov	r5, r0
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	b913      	cbnz	r3, 8006e84 <_fflush_r+0x10>
 8006e7e:	2500      	movs	r5, #0
 8006e80:	4628      	mov	r0, r5
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	b118      	cbz	r0, 8006e8e <_fflush_r+0x1a>
 8006e86:	6983      	ldr	r3, [r0, #24]
 8006e88:	b90b      	cbnz	r3, 8006e8e <_fflush_r+0x1a>
 8006e8a:	f000 f887 	bl	8006f9c <__sinit>
 8006e8e:	4b14      	ldr	r3, [pc, #80]	; (8006ee0 <_fflush_r+0x6c>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	d11b      	bne.n	8006ecc <_fflush_r+0x58>
 8006e94:	686c      	ldr	r4, [r5, #4]
 8006e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0ef      	beq.n	8006e7e <_fflush_r+0xa>
 8006e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ea0:	07d0      	lsls	r0, r2, #31
 8006ea2:	d404      	bmi.n	8006eae <_fflush_r+0x3a>
 8006ea4:	0599      	lsls	r1, r3, #22
 8006ea6:	d402      	bmi.n	8006eae <_fflush_r+0x3a>
 8006ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eaa:	f000 f927 	bl	80070fc <__retarget_lock_acquire_recursive>
 8006eae:	4628      	mov	r0, r5
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	f7ff ff59 	bl	8006d68 <__sflush_r>
 8006eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eb8:	07da      	lsls	r2, r3, #31
 8006eba:	4605      	mov	r5, r0
 8006ebc:	d4e0      	bmi.n	8006e80 <_fflush_r+0xc>
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	059b      	lsls	r3, r3, #22
 8006ec2:	d4dd      	bmi.n	8006e80 <_fflush_r+0xc>
 8006ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ec6:	f000 f91a 	bl	80070fe <__retarget_lock_release_recursive>
 8006eca:	e7d9      	b.n	8006e80 <_fflush_r+0xc>
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <_fflush_r+0x70>)
 8006ece:	429c      	cmp	r4, r3
 8006ed0:	d101      	bne.n	8006ed6 <_fflush_r+0x62>
 8006ed2:	68ac      	ldr	r4, [r5, #8]
 8006ed4:	e7df      	b.n	8006e96 <_fflush_r+0x22>
 8006ed6:	4b04      	ldr	r3, [pc, #16]	; (8006ee8 <_fflush_r+0x74>)
 8006ed8:	429c      	cmp	r4, r3
 8006eda:	bf08      	it	eq
 8006edc:	68ec      	ldreq	r4, [r5, #12]
 8006ede:	e7da      	b.n	8006e96 <_fflush_r+0x22>
 8006ee0:	08007d84 	.word	0x08007d84
 8006ee4:	08007da4 	.word	0x08007da4
 8006ee8:	08007d64 	.word	0x08007d64

08006eec <std>:
 8006eec:	2300      	movs	r3, #0
 8006eee:	b510      	push	{r4, lr}
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006efa:	6083      	str	r3, [r0, #8]
 8006efc:	8181      	strh	r1, [r0, #12]
 8006efe:	6643      	str	r3, [r0, #100]	; 0x64
 8006f00:	81c2      	strh	r2, [r0, #14]
 8006f02:	6183      	str	r3, [r0, #24]
 8006f04:	4619      	mov	r1, r3
 8006f06:	2208      	movs	r2, #8
 8006f08:	305c      	adds	r0, #92	; 0x5c
 8006f0a:	f7ff fd4d 	bl	80069a8 <memset>
 8006f0e:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <std+0x38>)
 8006f10:	6263      	str	r3, [r4, #36]	; 0x24
 8006f12:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <std+0x3c>)
 8006f14:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f16:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <std+0x40>)
 8006f18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f1a:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <std+0x44>)
 8006f1c:	6224      	str	r4, [r4, #32]
 8006f1e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f20:	bd10      	pop	{r4, pc}
 8006f22:	bf00      	nop
 8006f24:	08007999 	.word	0x08007999
 8006f28:	080079bb 	.word	0x080079bb
 8006f2c:	080079f3 	.word	0x080079f3
 8006f30:	08007a17 	.word	0x08007a17

08006f34 <_cleanup_r>:
 8006f34:	4901      	ldr	r1, [pc, #4]	; (8006f3c <_cleanup_r+0x8>)
 8006f36:	f000 b8c1 	b.w	80070bc <_fwalk_reent>
 8006f3a:	bf00      	nop
 8006f3c:	08006e75 	.word	0x08006e75

08006f40 <__sfmoreglue>:
 8006f40:	b570      	push	{r4, r5, r6, lr}
 8006f42:	2268      	movs	r2, #104	; 0x68
 8006f44:	1e4d      	subs	r5, r1, #1
 8006f46:	4355      	muls	r5, r2
 8006f48:	460e      	mov	r6, r1
 8006f4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f4e:	f000 f9b1 	bl	80072b4 <_malloc_r>
 8006f52:	4604      	mov	r4, r0
 8006f54:	b140      	cbz	r0, 8006f68 <__sfmoreglue+0x28>
 8006f56:	2100      	movs	r1, #0
 8006f58:	e9c0 1600 	strd	r1, r6, [r0]
 8006f5c:	300c      	adds	r0, #12
 8006f5e:	60a0      	str	r0, [r4, #8]
 8006f60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f64:	f7ff fd20 	bl	80069a8 <memset>
 8006f68:	4620      	mov	r0, r4
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}

08006f6c <__sfp_lock_acquire>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	; (8006f74 <__sfp_lock_acquire+0x8>)
 8006f6e:	f000 b8c5 	b.w	80070fc <__retarget_lock_acquire_recursive>
 8006f72:	bf00      	nop
 8006f74:	20001645 	.word	0x20001645

08006f78 <__sfp_lock_release>:
 8006f78:	4801      	ldr	r0, [pc, #4]	; (8006f80 <__sfp_lock_release+0x8>)
 8006f7a:	f000 b8c0 	b.w	80070fe <__retarget_lock_release_recursive>
 8006f7e:	bf00      	nop
 8006f80:	20001645 	.word	0x20001645

08006f84 <__sinit_lock_acquire>:
 8006f84:	4801      	ldr	r0, [pc, #4]	; (8006f8c <__sinit_lock_acquire+0x8>)
 8006f86:	f000 b8b9 	b.w	80070fc <__retarget_lock_acquire_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	20001646 	.word	0x20001646

08006f90 <__sinit_lock_release>:
 8006f90:	4801      	ldr	r0, [pc, #4]	; (8006f98 <__sinit_lock_release+0x8>)
 8006f92:	f000 b8b4 	b.w	80070fe <__retarget_lock_release_recursive>
 8006f96:	bf00      	nop
 8006f98:	20001646 	.word	0x20001646

08006f9c <__sinit>:
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	f7ff fff0 	bl	8006f84 <__sinit_lock_acquire>
 8006fa4:	69a3      	ldr	r3, [r4, #24]
 8006fa6:	b11b      	cbz	r3, 8006fb0 <__sinit+0x14>
 8006fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fac:	f7ff bff0 	b.w	8006f90 <__sinit_lock_release>
 8006fb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fb4:	6523      	str	r3, [r4, #80]	; 0x50
 8006fb6:	4b13      	ldr	r3, [pc, #76]	; (8007004 <__sinit+0x68>)
 8006fb8:	4a13      	ldr	r2, [pc, #76]	; (8007008 <__sinit+0x6c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fbe:	42a3      	cmp	r3, r4
 8006fc0:	bf04      	itt	eq
 8006fc2:	2301      	moveq	r3, #1
 8006fc4:	61a3      	streq	r3, [r4, #24]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 f820 	bl	800700c <__sfp>
 8006fcc:	6060      	str	r0, [r4, #4]
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f000 f81c 	bl	800700c <__sfp>
 8006fd4:	60a0      	str	r0, [r4, #8]
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f000 f818 	bl	800700c <__sfp>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	60e0      	str	r0, [r4, #12]
 8006fe0:	2104      	movs	r1, #4
 8006fe2:	6860      	ldr	r0, [r4, #4]
 8006fe4:	f7ff ff82 	bl	8006eec <std>
 8006fe8:	68a0      	ldr	r0, [r4, #8]
 8006fea:	2201      	movs	r2, #1
 8006fec:	2109      	movs	r1, #9
 8006fee:	f7ff ff7d 	bl	8006eec <std>
 8006ff2:	68e0      	ldr	r0, [r4, #12]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	2112      	movs	r1, #18
 8006ff8:	f7ff ff78 	bl	8006eec <std>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	61a3      	str	r3, [r4, #24]
 8007000:	e7d2      	b.n	8006fa8 <__sinit+0xc>
 8007002:	bf00      	nop
 8007004:	08007cb0 	.word	0x08007cb0
 8007008:	08006f35 	.word	0x08006f35

0800700c <__sfp>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	4607      	mov	r7, r0
 8007010:	f7ff ffac 	bl	8006f6c <__sfp_lock_acquire>
 8007014:	4b1e      	ldr	r3, [pc, #120]	; (8007090 <__sfp+0x84>)
 8007016:	681e      	ldr	r6, [r3, #0]
 8007018:	69b3      	ldr	r3, [r6, #24]
 800701a:	b913      	cbnz	r3, 8007022 <__sfp+0x16>
 800701c:	4630      	mov	r0, r6
 800701e:	f7ff ffbd 	bl	8006f9c <__sinit>
 8007022:	3648      	adds	r6, #72	; 0x48
 8007024:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007028:	3b01      	subs	r3, #1
 800702a:	d503      	bpl.n	8007034 <__sfp+0x28>
 800702c:	6833      	ldr	r3, [r6, #0]
 800702e:	b30b      	cbz	r3, 8007074 <__sfp+0x68>
 8007030:	6836      	ldr	r6, [r6, #0]
 8007032:	e7f7      	b.n	8007024 <__sfp+0x18>
 8007034:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007038:	b9d5      	cbnz	r5, 8007070 <__sfp+0x64>
 800703a:	4b16      	ldr	r3, [pc, #88]	; (8007094 <__sfp+0x88>)
 800703c:	60e3      	str	r3, [r4, #12]
 800703e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007042:	6665      	str	r5, [r4, #100]	; 0x64
 8007044:	f000 f859 	bl	80070fa <__retarget_lock_init_recursive>
 8007048:	f7ff ff96 	bl	8006f78 <__sfp_lock_release>
 800704c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007050:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007054:	6025      	str	r5, [r4, #0]
 8007056:	61a5      	str	r5, [r4, #24]
 8007058:	2208      	movs	r2, #8
 800705a:	4629      	mov	r1, r5
 800705c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007060:	f7ff fca2 	bl	80069a8 <memset>
 8007064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800706c:	4620      	mov	r0, r4
 800706e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007070:	3468      	adds	r4, #104	; 0x68
 8007072:	e7d9      	b.n	8007028 <__sfp+0x1c>
 8007074:	2104      	movs	r1, #4
 8007076:	4638      	mov	r0, r7
 8007078:	f7ff ff62 	bl	8006f40 <__sfmoreglue>
 800707c:	4604      	mov	r4, r0
 800707e:	6030      	str	r0, [r6, #0]
 8007080:	2800      	cmp	r0, #0
 8007082:	d1d5      	bne.n	8007030 <__sfp+0x24>
 8007084:	f7ff ff78 	bl	8006f78 <__sfp_lock_release>
 8007088:	230c      	movs	r3, #12
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	e7ee      	b.n	800706c <__sfp+0x60>
 800708e:	bf00      	nop
 8007090:	08007cb0 	.word	0x08007cb0
 8007094:	ffff0001 	.word	0xffff0001

08007098 <fiprintf>:
 8007098:	b40e      	push	{r1, r2, r3}
 800709a:	b503      	push	{r0, r1, lr}
 800709c:	4601      	mov	r1, r0
 800709e:	ab03      	add	r3, sp, #12
 80070a0:	4805      	ldr	r0, [pc, #20]	; (80070b8 <fiprintf+0x20>)
 80070a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a6:	6800      	ldr	r0, [r0, #0]
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	f000 f9a1 	bl	80073f0 <_vfiprintf_r>
 80070ae:	b002      	add	sp, #8
 80070b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070b4:	b003      	add	sp, #12
 80070b6:	4770      	bx	lr
 80070b8:	20000028 	.word	0x20000028

080070bc <_fwalk_reent>:
 80070bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c0:	4606      	mov	r6, r0
 80070c2:	4688      	mov	r8, r1
 80070c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070c8:	2700      	movs	r7, #0
 80070ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070ce:	f1b9 0901 	subs.w	r9, r9, #1
 80070d2:	d505      	bpl.n	80070e0 <_fwalk_reent+0x24>
 80070d4:	6824      	ldr	r4, [r4, #0]
 80070d6:	2c00      	cmp	r4, #0
 80070d8:	d1f7      	bne.n	80070ca <_fwalk_reent+0xe>
 80070da:	4638      	mov	r0, r7
 80070dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070e0:	89ab      	ldrh	r3, [r5, #12]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d907      	bls.n	80070f6 <_fwalk_reent+0x3a>
 80070e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070ea:	3301      	adds	r3, #1
 80070ec:	d003      	beq.n	80070f6 <_fwalk_reent+0x3a>
 80070ee:	4629      	mov	r1, r5
 80070f0:	4630      	mov	r0, r6
 80070f2:	47c0      	blx	r8
 80070f4:	4307      	orrs	r7, r0
 80070f6:	3568      	adds	r5, #104	; 0x68
 80070f8:	e7e9      	b.n	80070ce <_fwalk_reent+0x12>

080070fa <__retarget_lock_init_recursive>:
 80070fa:	4770      	bx	lr

080070fc <__retarget_lock_acquire_recursive>:
 80070fc:	4770      	bx	lr

080070fe <__retarget_lock_release_recursive>:
 80070fe:	4770      	bx	lr

08007100 <__swhatbuf_r>:
 8007100:	b570      	push	{r4, r5, r6, lr}
 8007102:	460e      	mov	r6, r1
 8007104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007108:	2900      	cmp	r1, #0
 800710a:	b096      	sub	sp, #88	; 0x58
 800710c:	4614      	mov	r4, r2
 800710e:	461d      	mov	r5, r3
 8007110:	da08      	bge.n	8007124 <__swhatbuf_r+0x24>
 8007112:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	602a      	str	r2, [r5, #0]
 800711a:	061a      	lsls	r2, r3, #24
 800711c:	d410      	bmi.n	8007140 <__swhatbuf_r+0x40>
 800711e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007122:	e00e      	b.n	8007142 <__swhatbuf_r+0x42>
 8007124:	466a      	mov	r2, sp
 8007126:	f000 fca5 	bl	8007a74 <_fstat_r>
 800712a:	2800      	cmp	r0, #0
 800712c:	dbf1      	blt.n	8007112 <__swhatbuf_r+0x12>
 800712e:	9a01      	ldr	r2, [sp, #4]
 8007130:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007134:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007138:	425a      	negs	r2, r3
 800713a:	415a      	adcs	r2, r3
 800713c:	602a      	str	r2, [r5, #0]
 800713e:	e7ee      	b.n	800711e <__swhatbuf_r+0x1e>
 8007140:	2340      	movs	r3, #64	; 0x40
 8007142:	2000      	movs	r0, #0
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	b016      	add	sp, #88	; 0x58
 8007148:	bd70      	pop	{r4, r5, r6, pc}
	...

0800714c <__smakebuf_r>:
 800714c:	898b      	ldrh	r3, [r1, #12]
 800714e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007150:	079d      	lsls	r5, r3, #30
 8007152:	4606      	mov	r6, r0
 8007154:	460c      	mov	r4, r1
 8007156:	d507      	bpl.n	8007168 <__smakebuf_r+0x1c>
 8007158:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	6123      	str	r3, [r4, #16]
 8007160:	2301      	movs	r3, #1
 8007162:	6163      	str	r3, [r4, #20]
 8007164:	b002      	add	sp, #8
 8007166:	bd70      	pop	{r4, r5, r6, pc}
 8007168:	ab01      	add	r3, sp, #4
 800716a:	466a      	mov	r2, sp
 800716c:	f7ff ffc8 	bl	8007100 <__swhatbuf_r>
 8007170:	9900      	ldr	r1, [sp, #0]
 8007172:	4605      	mov	r5, r0
 8007174:	4630      	mov	r0, r6
 8007176:	f000 f89d 	bl	80072b4 <_malloc_r>
 800717a:	b948      	cbnz	r0, 8007190 <__smakebuf_r+0x44>
 800717c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007180:	059a      	lsls	r2, r3, #22
 8007182:	d4ef      	bmi.n	8007164 <__smakebuf_r+0x18>
 8007184:	f023 0303 	bic.w	r3, r3, #3
 8007188:	f043 0302 	orr.w	r3, r3, #2
 800718c:	81a3      	strh	r3, [r4, #12]
 800718e:	e7e3      	b.n	8007158 <__smakebuf_r+0xc>
 8007190:	4b0d      	ldr	r3, [pc, #52]	; (80071c8 <__smakebuf_r+0x7c>)
 8007192:	62b3      	str	r3, [r6, #40]	; 0x28
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	6020      	str	r0, [r4, #0]
 8007198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719c:	81a3      	strh	r3, [r4, #12]
 800719e:	9b00      	ldr	r3, [sp, #0]
 80071a0:	6163      	str	r3, [r4, #20]
 80071a2:	9b01      	ldr	r3, [sp, #4]
 80071a4:	6120      	str	r0, [r4, #16]
 80071a6:	b15b      	cbz	r3, 80071c0 <__smakebuf_r+0x74>
 80071a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071ac:	4630      	mov	r0, r6
 80071ae:	f000 fc73 	bl	8007a98 <_isatty_r>
 80071b2:	b128      	cbz	r0, 80071c0 <__smakebuf_r+0x74>
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	f023 0303 	bic.w	r3, r3, #3
 80071ba:	f043 0301 	orr.w	r3, r3, #1
 80071be:	81a3      	strh	r3, [r4, #12]
 80071c0:	89a0      	ldrh	r0, [r4, #12]
 80071c2:	4305      	orrs	r5, r0
 80071c4:	81a5      	strh	r5, [r4, #12]
 80071c6:	e7cd      	b.n	8007164 <__smakebuf_r+0x18>
 80071c8:	08006f35 	.word	0x08006f35

080071cc <malloc>:
 80071cc:	4b02      	ldr	r3, [pc, #8]	; (80071d8 <malloc+0xc>)
 80071ce:	4601      	mov	r1, r0
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	f000 b86f 	b.w	80072b4 <_malloc_r>
 80071d6:	bf00      	nop
 80071d8:	20000028 	.word	0x20000028

080071dc <_free_r>:
 80071dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071de:	2900      	cmp	r1, #0
 80071e0:	d044      	beq.n	800726c <_free_r+0x90>
 80071e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071e6:	9001      	str	r0, [sp, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f1a1 0404 	sub.w	r4, r1, #4
 80071ee:	bfb8      	it	lt
 80071f0:	18e4      	addlt	r4, r4, r3
 80071f2:	f000 fc73 	bl	8007adc <__malloc_lock>
 80071f6:	4a1e      	ldr	r2, [pc, #120]	; (8007270 <_free_r+0x94>)
 80071f8:	9801      	ldr	r0, [sp, #4]
 80071fa:	6813      	ldr	r3, [r2, #0]
 80071fc:	b933      	cbnz	r3, 800720c <_free_r+0x30>
 80071fe:	6063      	str	r3, [r4, #4]
 8007200:	6014      	str	r4, [r2, #0]
 8007202:	b003      	add	sp, #12
 8007204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007208:	f000 bc6e 	b.w	8007ae8 <__malloc_unlock>
 800720c:	42a3      	cmp	r3, r4
 800720e:	d908      	bls.n	8007222 <_free_r+0x46>
 8007210:	6825      	ldr	r5, [r4, #0]
 8007212:	1961      	adds	r1, r4, r5
 8007214:	428b      	cmp	r3, r1
 8007216:	bf01      	itttt	eq
 8007218:	6819      	ldreq	r1, [r3, #0]
 800721a:	685b      	ldreq	r3, [r3, #4]
 800721c:	1949      	addeq	r1, r1, r5
 800721e:	6021      	streq	r1, [r4, #0]
 8007220:	e7ed      	b.n	80071fe <_free_r+0x22>
 8007222:	461a      	mov	r2, r3
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	b10b      	cbz	r3, 800722c <_free_r+0x50>
 8007228:	42a3      	cmp	r3, r4
 800722a:	d9fa      	bls.n	8007222 <_free_r+0x46>
 800722c:	6811      	ldr	r1, [r2, #0]
 800722e:	1855      	adds	r5, r2, r1
 8007230:	42a5      	cmp	r5, r4
 8007232:	d10b      	bne.n	800724c <_free_r+0x70>
 8007234:	6824      	ldr	r4, [r4, #0]
 8007236:	4421      	add	r1, r4
 8007238:	1854      	adds	r4, r2, r1
 800723a:	42a3      	cmp	r3, r4
 800723c:	6011      	str	r1, [r2, #0]
 800723e:	d1e0      	bne.n	8007202 <_free_r+0x26>
 8007240:	681c      	ldr	r4, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	6053      	str	r3, [r2, #4]
 8007246:	4421      	add	r1, r4
 8007248:	6011      	str	r1, [r2, #0]
 800724a:	e7da      	b.n	8007202 <_free_r+0x26>
 800724c:	d902      	bls.n	8007254 <_free_r+0x78>
 800724e:	230c      	movs	r3, #12
 8007250:	6003      	str	r3, [r0, #0]
 8007252:	e7d6      	b.n	8007202 <_free_r+0x26>
 8007254:	6825      	ldr	r5, [r4, #0]
 8007256:	1961      	adds	r1, r4, r5
 8007258:	428b      	cmp	r3, r1
 800725a:	bf04      	itt	eq
 800725c:	6819      	ldreq	r1, [r3, #0]
 800725e:	685b      	ldreq	r3, [r3, #4]
 8007260:	6063      	str	r3, [r4, #4]
 8007262:	bf04      	itt	eq
 8007264:	1949      	addeq	r1, r1, r5
 8007266:	6021      	streq	r1, [r4, #0]
 8007268:	6054      	str	r4, [r2, #4]
 800726a:	e7ca      	b.n	8007202 <_free_r+0x26>
 800726c:	b003      	add	sp, #12
 800726e:	bd30      	pop	{r4, r5, pc}
 8007270:	20001648 	.word	0x20001648

08007274 <sbrk_aligned>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	4e0e      	ldr	r6, [pc, #56]	; (80072b0 <sbrk_aligned+0x3c>)
 8007278:	460c      	mov	r4, r1
 800727a:	6831      	ldr	r1, [r6, #0]
 800727c:	4605      	mov	r5, r0
 800727e:	b911      	cbnz	r1, 8007286 <sbrk_aligned+0x12>
 8007280:	f000 fb7a 	bl	8007978 <_sbrk_r>
 8007284:	6030      	str	r0, [r6, #0]
 8007286:	4621      	mov	r1, r4
 8007288:	4628      	mov	r0, r5
 800728a:	f000 fb75 	bl	8007978 <_sbrk_r>
 800728e:	1c43      	adds	r3, r0, #1
 8007290:	d00a      	beq.n	80072a8 <sbrk_aligned+0x34>
 8007292:	1cc4      	adds	r4, r0, #3
 8007294:	f024 0403 	bic.w	r4, r4, #3
 8007298:	42a0      	cmp	r0, r4
 800729a:	d007      	beq.n	80072ac <sbrk_aligned+0x38>
 800729c:	1a21      	subs	r1, r4, r0
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 fb6a 	bl	8007978 <_sbrk_r>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d101      	bne.n	80072ac <sbrk_aligned+0x38>
 80072a8:	f04f 34ff 	mov.w	r4, #4294967295
 80072ac:	4620      	mov	r0, r4
 80072ae:	bd70      	pop	{r4, r5, r6, pc}
 80072b0:	2000164c 	.word	0x2000164c

080072b4 <_malloc_r>:
 80072b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b8:	1ccd      	adds	r5, r1, #3
 80072ba:	f025 0503 	bic.w	r5, r5, #3
 80072be:	3508      	adds	r5, #8
 80072c0:	2d0c      	cmp	r5, #12
 80072c2:	bf38      	it	cc
 80072c4:	250c      	movcc	r5, #12
 80072c6:	2d00      	cmp	r5, #0
 80072c8:	4607      	mov	r7, r0
 80072ca:	db01      	blt.n	80072d0 <_malloc_r+0x1c>
 80072cc:	42a9      	cmp	r1, r5
 80072ce:	d905      	bls.n	80072dc <_malloc_r+0x28>
 80072d0:	230c      	movs	r3, #12
 80072d2:	603b      	str	r3, [r7, #0]
 80072d4:	2600      	movs	r6, #0
 80072d6:	4630      	mov	r0, r6
 80072d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072dc:	4e2e      	ldr	r6, [pc, #184]	; (8007398 <_malloc_r+0xe4>)
 80072de:	f000 fbfd 	bl	8007adc <__malloc_lock>
 80072e2:	6833      	ldr	r3, [r6, #0]
 80072e4:	461c      	mov	r4, r3
 80072e6:	bb34      	cbnz	r4, 8007336 <_malloc_r+0x82>
 80072e8:	4629      	mov	r1, r5
 80072ea:	4638      	mov	r0, r7
 80072ec:	f7ff ffc2 	bl	8007274 <sbrk_aligned>
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	4604      	mov	r4, r0
 80072f4:	d14d      	bne.n	8007392 <_malloc_r+0xde>
 80072f6:	6834      	ldr	r4, [r6, #0]
 80072f8:	4626      	mov	r6, r4
 80072fa:	2e00      	cmp	r6, #0
 80072fc:	d140      	bne.n	8007380 <_malloc_r+0xcc>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	4631      	mov	r1, r6
 8007302:	4638      	mov	r0, r7
 8007304:	eb04 0803 	add.w	r8, r4, r3
 8007308:	f000 fb36 	bl	8007978 <_sbrk_r>
 800730c:	4580      	cmp	r8, r0
 800730e:	d13a      	bne.n	8007386 <_malloc_r+0xd2>
 8007310:	6821      	ldr	r1, [r4, #0]
 8007312:	3503      	adds	r5, #3
 8007314:	1a6d      	subs	r5, r5, r1
 8007316:	f025 0503 	bic.w	r5, r5, #3
 800731a:	3508      	adds	r5, #8
 800731c:	2d0c      	cmp	r5, #12
 800731e:	bf38      	it	cc
 8007320:	250c      	movcc	r5, #12
 8007322:	4629      	mov	r1, r5
 8007324:	4638      	mov	r0, r7
 8007326:	f7ff ffa5 	bl	8007274 <sbrk_aligned>
 800732a:	3001      	adds	r0, #1
 800732c:	d02b      	beq.n	8007386 <_malloc_r+0xd2>
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	442b      	add	r3, r5
 8007332:	6023      	str	r3, [r4, #0]
 8007334:	e00e      	b.n	8007354 <_malloc_r+0xa0>
 8007336:	6822      	ldr	r2, [r4, #0]
 8007338:	1b52      	subs	r2, r2, r5
 800733a:	d41e      	bmi.n	800737a <_malloc_r+0xc6>
 800733c:	2a0b      	cmp	r2, #11
 800733e:	d916      	bls.n	800736e <_malloc_r+0xba>
 8007340:	1961      	adds	r1, r4, r5
 8007342:	42a3      	cmp	r3, r4
 8007344:	6025      	str	r5, [r4, #0]
 8007346:	bf18      	it	ne
 8007348:	6059      	strne	r1, [r3, #4]
 800734a:	6863      	ldr	r3, [r4, #4]
 800734c:	bf08      	it	eq
 800734e:	6031      	streq	r1, [r6, #0]
 8007350:	5162      	str	r2, [r4, r5]
 8007352:	604b      	str	r3, [r1, #4]
 8007354:	4638      	mov	r0, r7
 8007356:	f104 060b 	add.w	r6, r4, #11
 800735a:	f000 fbc5 	bl	8007ae8 <__malloc_unlock>
 800735e:	f026 0607 	bic.w	r6, r6, #7
 8007362:	1d23      	adds	r3, r4, #4
 8007364:	1af2      	subs	r2, r6, r3
 8007366:	d0b6      	beq.n	80072d6 <_malloc_r+0x22>
 8007368:	1b9b      	subs	r3, r3, r6
 800736a:	50a3      	str	r3, [r4, r2]
 800736c:	e7b3      	b.n	80072d6 <_malloc_r+0x22>
 800736e:	6862      	ldr	r2, [r4, #4]
 8007370:	42a3      	cmp	r3, r4
 8007372:	bf0c      	ite	eq
 8007374:	6032      	streq	r2, [r6, #0]
 8007376:	605a      	strne	r2, [r3, #4]
 8007378:	e7ec      	b.n	8007354 <_malloc_r+0xa0>
 800737a:	4623      	mov	r3, r4
 800737c:	6864      	ldr	r4, [r4, #4]
 800737e:	e7b2      	b.n	80072e6 <_malloc_r+0x32>
 8007380:	4634      	mov	r4, r6
 8007382:	6876      	ldr	r6, [r6, #4]
 8007384:	e7b9      	b.n	80072fa <_malloc_r+0x46>
 8007386:	230c      	movs	r3, #12
 8007388:	603b      	str	r3, [r7, #0]
 800738a:	4638      	mov	r0, r7
 800738c:	f000 fbac 	bl	8007ae8 <__malloc_unlock>
 8007390:	e7a1      	b.n	80072d6 <_malloc_r+0x22>
 8007392:	6025      	str	r5, [r4, #0]
 8007394:	e7de      	b.n	8007354 <_malloc_r+0xa0>
 8007396:	bf00      	nop
 8007398:	20001648 	.word	0x20001648

0800739c <__sfputc_r>:
 800739c:	6893      	ldr	r3, [r2, #8]
 800739e:	3b01      	subs	r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	b410      	push	{r4}
 80073a4:	6093      	str	r3, [r2, #8]
 80073a6:	da08      	bge.n	80073ba <__sfputc_r+0x1e>
 80073a8:	6994      	ldr	r4, [r2, #24]
 80073aa:	42a3      	cmp	r3, r4
 80073ac:	db01      	blt.n	80073b2 <__sfputc_r+0x16>
 80073ae:	290a      	cmp	r1, #10
 80073b0:	d103      	bne.n	80073ba <__sfputc_r+0x1e>
 80073b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073b6:	f7ff bbf9 	b.w	8006bac <__swbuf_r>
 80073ba:	6813      	ldr	r3, [r2, #0]
 80073bc:	1c58      	adds	r0, r3, #1
 80073be:	6010      	str	r0, [r2, #0]
 80073c0:	7019      	strb	r1, [r3, #0]
 80073c2:	4608      	mov	r0, r1
 80073c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <__sfputs_r>:
 80073ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073cc:	4606      	mov	r6, r0
 80073ce:	460f      	mov	r7, r1
 80073d0:	4614      	mov	r4, r2
 80073d2:	18d5      	adds	r5, r2, r3
 80073d4:	42ac      	cmp	r4, r5
 80073d6:	d101      	bne.n	80073dc <__sfputs_r+0x12>
 80073d8:	2000      	movs	r0, #0
 80073da:	e007      	b.n	80073ec <__sfputs_r+0x22>
 80073dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e0:	463a      	mov	r2, r7
 80073e2:	4630      	mov	r0, r6
 80073e4:	f7ff ffda 	bl	800739c <__sfputc_r>
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	d1f3      	bne.n	80073d4 <__sfputs_r+0xa>
 80073ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073f0 <_vfiprintf_r>:
 80073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	460d      	mov	r5, r1
 80073f6:	b09d      	sub	sp, #116	; 0x74
 80073f8:	4614      	mov	r4, r2
 80073fa:	4698      	mov	r8, r3
 80073fc:	4606      	mov	r6, r0
 80073fe:	b118      	cbz	r0, 8007408 <_vfiprintf_r+0x18>
 8007400:	6983      	ldr	r3, [r0, #24]
 8007402:	b90b      	cbnz	r3, 8007408 <_vfiprintf_r+0x18>
 8007404:	f7ff fdca 	bl	8006f9c <__sinit>
 8007408:	4b89      	ldr	r3, [pc, #548]	; (8007630 <_vfiprintf_r+0x240>)
 800740a:	429d      	cmp	r5, r3
 800740c:	d11b      	bne.n	8007446 <_vfiprintf_r+0x56>
 800740e:	6875      	ldr	r5, [r6, #4]
 8007410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007412:	07d9      	lsls	r1, r3, #31
 8007414:	d405      	bmi.n	8007422 <_vfiprintf_r+0x32>
 8007416:	89ab      	ldrh	r3, [r5, #12]
 8007418:	059a      	lsls	r2, r3, #22
 800741a:	d402      	bmi.n	8007422 <_vfiprintf_r+0x32>
 800741c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800741e:	f7ff fe6d 	bl	80070fc <__retarget_lock_acquire_recursive>
 8007422:	89ab      	ldrh	r3, [r5, #12]
 8007424:	071b      	lsls	r3, r3, #28
 8007426:	d501      	bpl.n	800742c <_vfiprintf_r+0x3c>
 8007428:	692b      	ldr	r3, [r5, #16]
 800742a:	b9eb      	cbnz	r3, 8007468 <_vfiprintf_r+0x78>
 800742c:	4629      	mov	r1, r5
 800742e:	4630      	mov	r0, r6
 8007430:	f7ff fc0e 	bl	8006c50 <__swsetup_r>
 8007434:	b1c0      	cbz	r0, 8007468 <_vfiprintf_r+0x78>
 8007436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007438:	07dc      	lsls	r4, r3, #31
 800743a:	d50e      	bpl.n	800745a <_vfiprintf_r+0x6a>
 800743c:	f04f 30ff 	mov.w	r0, #4294967295
 8007440:	b01d      	add	sp, #116	; 0x74
 8007442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007446:	4b7b      	ldr	r3, [pc, #492]	; (8007634 <_vfiprintf_r+0x244>)
 8007448:	429d      	cmp	r5, r3
 800744a:	d101      	bne.n	8007450 <_vfiprintf_r+0x60>
 800744c:	68b5      	ldr	r5, [r6, #8]
 800744e:	e7df      	b.n	8007410 <_vfiprintf_r+0x20>
 8007450:	4b79      	ldr	r3, [pc, #484]	; (8007638 <_vfiprintf_r+0x248>)
 8007452:	429d      	cmp	r5, r3
 8007454:	bf08      	it	eq
 8007456:	68f5      	ldreq	r5, [r6, #12]
 8007458:	e7da      	b.n	8007410 <_vfiprintf_r+0x20>
 800745a:	89ab      	ldrh	r3, [r5, #12]
 800745c:	0598      	lsls	r0, r3, #22
 800745e:	d4ed      	bmi.n	800743c <_vfiprintf_r+0x4c>
 8007460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007462:	f7ff fe4c 	bl	80070fe <__retarget_lock_release_recursive>
 8007466:	e7e9      	b.n	800743c <_vfiprintf_r+0x4c>
 8007468:	2300      	movs	r3, #0
 800746a:	9309      	str	r3, [sp, #36]	; 0x24
 800746c:	2320      	movs	r3, #32
 800746e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007472:	f8cd 800c 	str.w	r8, [sp, #12]
 8007476:	2330      	movs	r3, #48	; 0x30
 8007478:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800763c <_vfiprintf_r+0x24c>
 800747c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007480:	f04f 0901 	mov.w	r9, #1
 8007484:	4623      	mov	r3, r4
 8007486:	469a      	mov	sl, r3
 8007488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800748c:	b10a      	cbz	r2, 8007492 <_vfiprintf_r+0xa2>
 800748e:	2a25      	cmp	r2, #37	; 0x25
 8007490:	d1f9      	bne.n	8007486 <_vfiprintf_r+0x96>
 8007492:	ebba 0b04 	subs.w	fp, sl, r4
 8007496:	d00b      	beq.n	80074b0 <_vfiprintf_r+0xc0>
 8007498:	465b      	mov	r3, fp
 800749a:	4622      	mov	r2, r4
 800749c:	4629      	mov	r1, r5
 800749e:	4630      	mov	r0, r6
 80074a0:	f7ff ff93 	bl	80073ca <__sfputs_r>
 80074a4:	3001      	adds	r0, #1
 80074a6:	f000 80aa 	beq.w	80075fe <_vfiprintf_r+0x20e>
 80074aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074ac:	445a      	add	r2, fp
 80074ae:	9209      	str	r2, [sp, #36]	; 0x24
 80074b0:	f89a 3000 	ldrb.w	r3, [sl]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 80a2 	beq.w	80075fe <_vfiprintf_r+0x20e>
 80074ba:	2300      	movs	r3, #0
 80074bc:	f04f 32ff 	mov.w	r2, #4294967295
 80074c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074c4:	f10a 0a01 	add.w	sl, sl, #1
 80074c8:	9304      	str	r3, [sp, #16]
 80074ca:	9307      	str	r3, [sp, #28]
 80074cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074d0:	931a      	str	r3, [sp, #104]	; 0x68
 80074d2:	4654      	mov	r4, sl
 80074d4:	2205      	movs	r2, #5
 80074d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074da:	4858      	ldr	r0, [pc, #352]	; (800763c <_vfiprintf_r+0x24c>)
 80074dc:	f7f8 fe78 	bl	80001d0 <memchr>
 80074e0:	9a04      	ldr	r2, [sp, #16]
 80074e2:	b9d8      	cbnz	r0, 800751c <_vfiprintf_r+0x12c>
 80074e4:	06d1      	lsls	r1, r2, #27
 80074e6:	bf44      	itt	mi
 80074e8:	2320      	movmi	r3, #32
 80074ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ee:	0713      	lsls	r3, r2, #28
 80074f0:	bf44      	itt	mi
 80074f2:	232b      	movmi	r3, #43	; 0x2b
 80074f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074f8:	f89a 3000 	ldrb.w	r3, [sl]
 80074fc:	2b2a      	cmp	r3, #42	; 0x2a
 80074fe:	d015      	beq.n	800752c <_vfiprintf_r+0x13c>
 8007500:	9a07      	ldr	r2, [sp, #28]
 8007502:	4654      	mov	r4, sl
 8007504:	2000      	movs	r0, #0
 8007506:	f04f 0c0a 	mov.w	ip, #10
 800750a:	4621      	mov	r1, r4
 800750c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007510:	3b30      	subs	r3, #48	; 0x30
 8007512:	2b09      	cmp	r3, #9
 8007514:	d94e      	bls.n	80075b4 <_vfiprintf_r+0x1c4>
 8007516:	b1b0      	cbz	r0, 8007546 <_vfiprintf_r+0x156>
 8007518:	9207      	str	r2, [sp, #28]
 800751a:	e014      	b.n	8007546 <_vfiprintf_r+0x156>
 800751c:	eba0 0308 	sub.w	r3, r0, r8
 8007520:	fa09 f303 	lsl.w	r3, r9, r3
 8007524:	4313      	orrs	r3, r2
 8007526:	9304      	str	r3, [sp, #16]
 8007528:	46a2      	mov	sl, r4
 800752a:	e7d2      	b.n	80074d2 <_vfiprintf_r+0xe2>
 800752c:	9b03      	ldr	r3, [sp, #12]
 800752e:	1d19      	adds	r1, r3, #4
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	9103      	str	r1, [sp, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	bfbb      	ittet	lt
 8007538:	425b      	neglt	r3, r3
 800753a:	f042 0202 	orrlt.w	r2, r2, #2
 800753e:	9307      	strge	r3, [sp, #28]
 8007540:	9307      	strlt	r3, [sp, #28]
 8007542:	bfb8      	it	lt
 8007544:	9204      	strlt	r2, [sp, #16]
 8007546:	7823      	ldrb	r3, [r4, #0]
 8007548:	2b2e      	cmp	r3, #46	; 0x2e
 800754a:	d10c      	bne.n	8007566 <_vfiprintf_r+0x176>
 800754c:	7863      	ldrb	r3, [r4, #1]
 800754e:	2b2a      	cmp	r3, #42	; 0x2a
 8007550:	d135      	bne.n	80075be <_vfiprintf_r+0x1ce>
 8007552:	9b03      	ldr	r3, [sp, #12]
 8007554:	1d1a      	adds	r2, r3, #4
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	9203      	str	r2, [sp, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	bfb8      	it	lt
 800755e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007562:	3402      	adds	r4, #2
 8007564:	9305      	str	r3, [sp, #20]
 8007566:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800764c <_vfiprintf_r+0x25c>
 800756a:	7821      	ldrb	r1, [r4, #0]
 800756c:	2203      	movs	r2, #3
 800756e:	4650      	mov	r0, sl
 8007570:	f7f8 fe2e 	bl	80001d0 <memchr>
 8007574:	b140      	cbz	r0, 8007588 <_vfiprintf_r+0x198>
 8007576:	2340      	movs	r3, #64	; 0x40
 8007578:	eba0 000a 	sub.w	r0, r0, sl
 800757c:	fa03 f000 	lsl.w	r0, r3, r0
 8007580:	9b04      	ldr	r3, [sp, #16]
 8007582:	4303      	orrs	r3, r0
 8007584:	3401      	adds	r4, #1
 8007586:	9304      	str	r3, [sp, #16]
 8007588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800758c:	482c      	ldr	r0, [pc, #176]	; (8007640 <_vfiprintf_r+0x250>)
 800758e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007592:	2206      	movs	r2, #6
 8007594:	f7f8 fe1c 	bl	80001d0 <memchr>
 8007598:	2800      	cmp	r0, #0
 800759a:	d03f      	beq.n	800761c <_vfiprintf_r+0x22c>
 800759c:	4b29      	ldr	r3, [pc, #164]	; (8007644 <_vfiprintf_r+0x254>)
 800759e:	bb1b      	cbnz	r3, 80075e8 <_vfiprintf_r+0x1f8>
 80075a0:	9b03      	ldr	r3, [sp, #12]
 80075a2:	3307      	adds	r3, #7
 80075a4:	f023 0307 	bic.w	r3, r3, #7
 80075a8:	3308      	adds	r3, #8
 80075aa:	9303      	str	r3, [sp, #12]
 80075ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ae:	443b      	add	r3, r7
 80075b0:	9309      	str	r3, [sp, #36]	; 0x24
 80075b2:	e767      	b.n	8007484 <_vfiprintf_r+0x94>
 80075b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80075b8:	460c      	mov	r4, r1
 80075ba:	2001      	movs	r0, #1
 80075bc:	e7a5      	b.n	800750a <_vfiprintf_r+0x11a>
 80075be:	2300      	movs	r3, #0
 80075c0:	3401      	adds	r4, #1
 80075c2:	9305      	str	r3, [sp, #20]
 80075c4:	4619      	mov	r1, r3
 80075c6:	f04f 0c0a 	mov.w	ip, #10
 80075ca:	4620      	mov	r0, r4
 80075cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075d0:	3a30      	subs	r2, #48	; 0x30
 80075d2:	2a09      	cmp	r2, #9
 80075d4:	d903      	bls.n	80075de <_vfiprintf_r+0x1ee>
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0c5      	beq.n	8007566 <_vfiprintf_r+0x176>
 80075da:	9105      	str	r1, [sp, #20]
 80075dc:	e7c3      	b.n	8007566 <_vfiprintf_r+0x176>
 80075de:	fb0c 2101 	mla	r1, ip, r1, r2
 80075e2:	4604      	mov	r4, r0
 80075e4:	2301      	movs	r3, #1
 80075e6:	e7f0      	b.n	80075ca <_vfiprintf_r+0x1da>
 80075e8:	ab03      	add	r3, sp, #12
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	462a      	mov	r2, r5
 80075ee:	4b16      	ldr	r3, [pc, #88]	; (8007648 <_vfiprintf_r+0x258>)
 80075f0:	a904      	add	r1, sp, #16
 80075f2:	4630      	mov	r0, r6
 80075f4:	f3af 8000 	nop.w
 80075f8:	4607      	mov	r7, r0
 80075fa:	1c78      	adds	r0, r7, #1
 80075fc:	d1d6      	bne.n	80075ac <_vfiprintf_r+0x1bc>
 80075fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007600:	07d9      	lsls	r1, r3, #31
 8007602:	d405      	bmi.n	8007610 <_vfiprintf_r+0x220>
 8007604:	89ab      	ldrh	r3, [r5, #12]
 8007606:	059a      	lsls	r2, r3, #22
 8007608:	d402      	bmi.n	8007610 <_vfiprintf_r+0x220>
 800760a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800760c:	f7ff fd77 	bl	80070fe <__retarget_lock_release_recursive>
 8007610:	89ab      	ldrh	r3, [r5, #12]
 8007612:	065b      	lsls	r3, r3, #25
 8007614:	f53f af12 	bmi.w	800743c <_vfiprintf_r+0x4c>
 8007618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800761a:	e711      	b.n	8007440 <_vfiprintf_r+0x50>
 800761c:	ab03      	add	r3, sp, #12
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	462a      	mov	r2, r5
 8007622:	4b09      	ldr	r3, [pc, #36]	; (8007648 <_vfiprintf_r+0x258>)
 8007624:	a904      	add	r1, sp, #16
 8007626:	4630      	mov	r0, r6
 8007628:	f000 f880 	bl	800772c <_printf_i>
 800762c:	e7e4      	b.n	80075f8 <_vfiprintf_r+0x208>
 800762e:	bf00      	nop
 8007630:	08007d84 	.word	0x08007d84
 8007634:	08007da4 	.word	0x08007da4
 8007638:	08007d64 	.word	0x08007d64
 800763c:	08007dc4 	.word	0x08007dc4
 8007640:	08007dce 	.word	0x08007dce
 8007644:	00000000 	.word	0x00000000
 8007648:	080073cb 	.word	0x080073cb
 800764c:	08007dca 	.word	0x08007dca

08007650 <_printf_common>:
 8007650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007654:	4616      	mov	r6, r2
 8007656:	4699      	mov	r9, r3
 8007658:	688a      	ldr	r2, [r1, #8]
 800765a:	690b      	ldr	r3, [r1, #16]
 800765c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007660:	4293      	cmp	r3, r2
 8007662:	bfb8      	it	lt
 8007664:	4613      	movlt	r3, r2
 8007666:	6033      	str	r3, [r6, #0]
 8007668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800766c:	4607      	mov	r7, r0
 800766e:	460c      	mov	r4, r1
 8007670:	b10a      	cbz	r2, 8007676 <_printf_common+0x26>
 8007672:	3301      	adds	r3, #1
 8007674:	6033      	str	r3, [r6, #0]
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	0699      	lsls	r1, r3, #26
 800767a:	bf42      	ittt	mi
 800767c:	6833      	ldrmi	r3, [r6, #0]
 800767e:	3302      	addmi	r3, #2
 8007680:	6033      	strmi	r3, [r6, #0]
 8007682:	6825      	ldr	r5, [r4, #0]
 8007684:	f015 0506 	ands.w	r5, r5, #6
 8007688:	d106      	bne.n	8007698 <_printf_common+0x48>
 800768a:	f104 0a19 	add.w	sl, r4, #25
 800768e:	68e3      	ldr	r3, [r4, #12]
 8007690:	6832      	ldr	r2, [r6, #0]
 8007692:	1a9b      	subs	r3, r3, r2
 8007694:	42ab      	cmp	r3, r5
 8007696:	dc26      	bgt.n	80076e6 <_printf_common+0x96>
 8007698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800769c:	1e13      	subs	r3, r2, #0
 800769e:	6822      	ldr	r2, [r4, #0]
 80076a0:	bf18      	it	ne
 80076a2:	2301      	movne	r3, #1
 80076a4:	0692      	lsls	r2, r2, #26
 80076a6:	d42b      	bmi.n	8007700 <_printf_common+0xb0>
 80076a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076ac:	4649      	mov	r1, r9
 80076ae:	4638      	mov	r0, r7
 80076b0:	47c0      	blx	r8
 80076b2:	3001      	adds	r0, #1
 80076b4:	d01e      	beq.n	80076f4 <_printf_common+0xa4>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	68e5      	ldr	r5, [r4, #12]
 80076ba:	6832      	ldr	r2, [r6, #0]
 80076bc:	f003 0306 	and.w	r3, r3, #6
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	bf08      	it	eq
 80076c4:	1aad      	subeq	r5, r5, r2
 80076c6:	68a3      	ldr	r3, [r4, #8]
 80076c8:	6922      	ldr	r2, [r4, #16]
 80076ca:	bf0c      	ite	eq
 80076cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076d0:	2500      	movne	r5, #0
 80076d2:	4293      	cmp	r3, r2
 80076d4:	bfc4      	itt	gt
 80076d6:	1a9b      	subgt	r3, r3, r2
 80076d8:	18ed      	addgt	r5, r5, r3
 80076da:	2600      	movs	r6, #0
 80076dc:	341a      	adds	r4, #26
 80076de:	42b5      	cmp	r5, r6
 80076e0:	d11a      	bne.n	8007718 <_printf_common+0xc8>
 80076e2:	2000      	movs	r0, #0
 80076e4:	e008      	b.n	80076f8 <_printf_common+0xa8>
 80076e6:	2301      	movs	r3, #1
 80076e8:	4652      	mov	r2, sl
 80076ea:	4649      	mov	r1, r9
 80076ec:	4638      	mov	r0, r7
 80076ee:	47c0      	blx	r8
 80076f0:	3001      	adds	r0, #1
 80076f2:	d103      	bne.n	80076fc <_printf_common+0xac>
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295
 80076f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fc:	3501      	adds	r5, #1
 80076fe:	e7c6      	b.n	800768e <_printf_common+0x3e>
 8007700:	18e1      	adds	r1, r4, r3
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	2030      	movs	r0, #48	; 0x30
 8007706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800770a:	4422      	add	r2, r4
 800770c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007714:	3302      	adds	r3, #2
 8007716:	e7c7      	b.n	80076a8 <_printf_common+0x58>
 8007718:	2301      	movs	r3, #1
 800771a:	4622      	mov	r2, r4
 800771c:	4649      	mov	r1, r9
 800771e:	4638      	mov	r0, r7
 8007720:	47c0      	blx	r8
 8007722:	3001      	adds	r0, #1
 8007724:	d0e6      	beq.n	80076f4 <_printf_common+0xa4>
 8007726:	3601      	adds	r6, #1
 8007728:	e7d9      	b.n	80076de <_printf_common+0x8e>
	...

0800772c <_printf_i>:
 800772c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007730:	7e0f      	ldrb	r7, [r1, #24]
 8007732:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007734:	2f78      	cmp	r7, #120	; 0x78
 8007736:	4691      	mov	r9, r2
 8007738:	4680      	mov	r8, r0
 800773a:	460c      	mov	r4, r1
 800773c:	469a      	mov	sl, r3
 800773e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007742:	d807      	bhi.n	8007754 <_printf_i+0x28>
 8007744:	2f62      	cmp	r7, #98	; 0x62
 8007746:	d80a      	bhi.n	800775e <_printf_i+0x32>
 8007748:	2f00      	cmp	r7, #0
 800774a:	f000 80d8 	beq.w	80078fe <_printf_i+0x1d2>
 800774e:	2f58      	cmp	r7, #88	; 0x58
 8007750:	f000 80a3 	beq.w	800789a <_printf_i+0x16e>
 8007754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800775c:	e03a      	b.n	80077d4 <_printf_i+0xa8>
 800775e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007762:	2b15      	cmp	r3, #21
 8007764:	d8f6      	bhi.n	8007754 <_printf_i+0x28>
 8007766:	a101      	add	r1, pc, #4	; (adr r1, 800776c <_printf_i+0x40>)
 8007768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800776c:	080077c5 	.word	0x080077c5
 8007770:	080077d9 	.word	0x080077d9
 8007774:	08007755 	.word	0x08007755
 8007778:	08007755 	.word	0x08007755
 800777c:	08007755 	.word	0x08007755
 8007780:	08007755 	.word	0x08007755
 8007784:	080077d9 	.word	0x080077d9
 8007788:	08007755 	.word	0x08007755
 800778c:	08007755 	.word	0x08007755
 8007790:	08007755 	.word	0x08007755
 8007794:	08007755 	.word	0x08007755
 8007798:	080078e5 	.word	0x080078e5
 800779c:	08007809 	.word	0x08007809
 80077a0:	080078c7 	.word	0x080078c7
 80077a4:	08007755 	.word	0x08007755
 80077a8:	08007755 	.word	0x08007755
 80077ac:	08007907 	.word	0x08007907
 80077b0:	08007755 	.word	0x08007755
 80077b4:	08007809 	.word	0x08007809
 80077b8:	08007755 	.word	0x08007755
 80077bc:	08007755 	.word	0x08007755
 80077c0:	080078cf 	.word	0x080078cf
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	1d1a      	adds	r2, r3, #4
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	602a      	str	r2, [r5, #0]
 80077cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077d4:	2301      	movs	r3, #1
 80077d6:	e0a3      	b.n	8007920 <_printf_i+0x1f4>
 80077d8:	6820      	ldr	r0, [r4, #0]
 80077da:	6829      	ldr	r1, [r5, #0]
 80077dc:	0606      	lsls	r6, r0, #24
 80077de:	f101 0304 	add.w	r3, r1, #4
 80077e2:	d50a      	bpl.n	80077fa <_printf_i+0xce>
 80077e4:	680e      	ldr	r6, [r1, #0]
 80077e6:	602b      	str	r3, [r5, #0]
 80077e8:	2e00      	cmp	r6, #0
 80077ea:	da03      	bge.n	80077f4 <_printf_i+0xc8>
 80077ec:	232d      	movs	r3, #45	; 0x2d
 80077ee:	4276      	negs	r6, r6
 80077f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077f4:	485e      	ldr	r0, [pc, #376]	; (8007970 <_printf_i+0x244>)
 80077f6:	230a      	movs	r3, #10
 80077f8:	e019      	b.n	800782e <_printf_i+0x102>
 80077fa:	680e      	ldr	r6, [r1, #0]
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007802:	bf18      	it	ne
 8007804:	b236      	sxthne	r6, r6
 8007806:	e7ef      	b.n	80077e8 <_printf_i+0xbc>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	6820      	ldr	r0, [r4, #0]
 800780c:	1d19      	adds	r1, r3, #4
 800780e:	6029      	str	r1, [r5, #0]
 8007810:	0601      	lsls	r1, r0, #24
 8007812:	d501      	bpl.n	8007818 <_printf_i+0xec>
 8007814:	681e      	ldr	r6, [r3, #0]
 8007816:	e002      	b.n	800781e <_printf_i+0xf2>
 8007818:	0646      	lsls	r6, r0, #25
 800781a:	d5fb      	bpl.n	8007814 <_printf_i+0xe8>
 800781c:	881e      	ldrh	r6, [r3, #0]
 800781e:	4854      	ldr	r0, [pc, #336]	; (8007970 <_printf_i+0x244>)
 8007820:	2f6f      	cmp	r7, #111	; 0x6f
 8007822:	bf0c      	ite	eq
 8007824:	2308      	moveq	r3, #8
 8007826:	230a      	movne	r3, #10
 8007828:	2100      	movs	r1, #0
 800782a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800782e:	6865      	ldr	r5, [r4, #4]
 8007830:	60a5      	str	r5, [r4, #8]
 8007832:	2d00      	cmp	r5, #0
 8007834:	bfa2      	ittt	ge
 8007836:	6821      	ldrge	r1, [r4, #0]
 8007838:	f021 0104 	bicge.w	r1, r1, #4
 800783c:	6021      	strge	r1, [r4, #0]
 800783e:	b90e      	cbnz	r6, 8007844 <_printf_i+0x118>
 8007840:	2d00      	cmp	r5, #0
 8007842:	d04d      	beq.n	80078e0 <_printf_i+0x1b4>
 8007844:	4615      	mov	r5, r2
 8007846:	fbb6 f1f3 	udiv	r1, r6, r3
 800784a:	fb03 6711 	mls	r7, r3, r1, r6
 800784e:	5dc7      	ldrb	r7, [r0, r7]
 8007850:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007854:	4637      	mov	r7, r6
 8007856:	42bb      	cmp	r3, r7
 8007858:	460e      	mov	r6, r1
 800785a:	d9f4      	bls.n	8007846 <_printf_i+0x11a>
 800785c:	2b08      	cmp	r3, #8
 800785e:	d10b      	bne.n	8007878 <_printf_i+0x14c>
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	07de      	lsls	r6, r3, #31
 8007864:	d508      	bpl.n	8007878 <_printf_i+0x14c>
 8007866:	6923      	ldr	r3, [r4, #16]
 8007868:	6861      	ldr	r1, [r4, #4]
 800786a:	4299      	cmp	r1, r3
 800786c:	bfde      	ittt	le
 800786e:	2330      	movle	r3, #48	; 0x30
 8007870:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007874:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007878:	1b52      	subs	r2, r2, r5
 800787a:	6122      	str	r2, [r4, #16]
 800787c:	f8cd a000 	str.w	sl, [sp]
 8007880:	464b      	mov	r3, r9
 8007882:	aa03      	add	r2, sp, #12
 8007884:	4621      	mov	r1, r4
 8007886:	4640      	mov	r0, r8
 8007888:	f7ff fee2 	bl	8007650 <_printf_common>
 800788c:	3001      	adds	r0, #1
 800788e:	d14c      	bne.n	800792a <_printf_i+0x1fe>
 8007890:	f04f 30ff 	mov.w	r0, #4294967295
 8007894:	b004      	add	sp, #16
 8007896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789a:	4835      	ldr	r0, [pc, #212]	; (8007970 <_printf_i+0x244>)
 800789c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078a0:	6829      	ldr	r1, [r5, #0]
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80078a8:	6029      	str	r1, [r5, #0]
 80078aa:	061d      	lsls	r5, r3, #24
 80078ac:	d514      	bpl.n	80078d8 <_printf_i+0x1ac>
 80078ae:	07df      	lsls	r7, r3, #31
 80078b0:	bf44      	itt	mi
 80078b2:	f043 0320 	orrmi.w	r3, r3, #32
 80078b6:	6023      	strmi	r3, [r4, #0]
 80078b8:	b91e      	cbnz	r6, 80078c2 <_printf_i+0x196>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	f023 0320 	bic.w	r3, r3, #32
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	2310      	movs	r3, #16
 80078c4:	e7b0      	b.n	8007828 <_printf_i+0xfc>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	f043 0320 	orr.w	r3, r3, #32
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	2378      	movs	r3, #120	; 0x78
 80078d0:	4828      	ldr	r0, [pc, #160]	; (8007974 <_printf_i+0x248>)
 80078d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078d6:	e7e3      	b.n	80078a0 <_printf_i+0x174>
 80078d8:	0659      	lsls	r1, r3, #25
 80078da:	bf48      	it	mi
 80078dc:	b2b6      	uxthmi	r6, r6
 80078de:	e7e6      	b.n	80078ae <_printf_i+0x182>
 80078e0:	4615      	mov	r5, r2
 80078e2:	e7bb      	b.n	800785c <_printf_i+0x130>
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	6826      	ldr	r6, [r4, #0]
 80078e8:	6961      	ldr	r1, [r4, #20]
 80078ea:	1d18      	adds	r0, r3, #4
 80078ec:	6028      	str	r0, [r5, #0]
 80078ee:	0635      	lsls	r5, r6, #24
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	d501      	bpl.n	80078f8 <_printf_i+0x1cc>
 80078f4:	6019      	str	r1, [r3, #0]
 80078f6:	e002      	b.n	80078fe <_printf_i+0x1d2>
 80078f8:	0670      	lsls	r0, r6, #25
 80078fa:	d5fb      	bpl.n	80078f4 <_printf_i+0x1c8>
 80078fc:	8019      	strh	r1, [r3, #0]
 80078fe:	2300      	movs	r3, #0
 8007900:	6123      	str	r3, [r4, #16]
 8007902:	4615      	mov	r5, r2
 8007904:	e7ba      	b.n	800787c <_printf_i+0x150>
 8007906:	682b      	ldr	r3, [r5, #0]
 8007908:	1d1a      	adds	r2, r3, #4
 800790a:	602a      	str	r2, [r5, #0]
 800790c:	681d      	ldr	r5, [r3, #0]
 800790e:	6862      	ldr	r2, [r4, #4]
 8007910:	2100      	movs	r1, #0
 8007912:	4628      	mov	r0, r5
 8007914:	f7f8 fc5c 	bl	80001d0 <memchr>
 8007918:	b108      	cbz	r0, 800791e <_printf_i+0x1f2>
 800791a:	1b40      	subs	r0, r0, r5
 800791c:	6060      	str	r0, [r4, #4]
 800791e:	6863      	ldr	r3, [r4, #4]
 8007920:	6123      	str	r3, [r4, #16]
 8007922:	2300      	movs	r3, #0
 8007924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007928:	e7a8      	b.n	800787c <_printf_i+0x150>
 800792a:	6923      	ldr	r3, [r4, #16]
 800792c:	462a      	mov	r2, r5
 800792e:	4649      	mov	r1, r9
 8007930:	4640      	mov	r0, r8
 8007932:	47d0      	blx	sl
 8007934:	3001      	adds	r0, #1
 8007936:	d0ab      	beq.n	8007890 <_printf_i+0x164>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	079b      	lsls	r3, r3, #30
 800793c:	d413      	bmi.n	8007966 <_printf_i+0x23a>
 800793e:	68e0      	ldr	r0, [r4, #12]
 8007940:	9b03      	ldr	r3, [sp, #12]
 8007942:	4298      	cmp	r0, r3
 8007944:	bfb8      	it	lt
 8007946:	4618      	movlt	r0, r3
 8007948:	e7a4      	b.n	8007894 <_printf_i+0x168>
 800794a:	2301      	movs	r3, #1
 800794c:	4632      	mov	r2, r6
 800794e:	4649      	mov	r1, r9
 8007950:	4640      	mov	r0, r8
 8007952:	47d0      	blx	sl
 8007954:	3001      	adds	r0, #1
 8007956:	d09b      	beq.n	8007890 <_printf_i+0x164>
 8007958:	3501      	adds	r5, #1
 800795a:	68e3      	ldr	r3, [r4, #12]
 800795c:	9903      	ldr	r1, [sp, #12]
 800795e:	1a5b      	subs	r3, r3, r1
 8007960:	42ab      	cmp	r3, r5
 8007962:	dcf2      	bgt.n	800794a <_printf_i+0x21e>
 8007964:	e7eb      	b.n	800793e <_printf_i+0x212>
 8007966:	2500      	movs	r5, #0
 8007968:	f104 0619 	add.w	r6, r4, #25
 800796c:	e7f5      	b.n	800795a <_printf_i+0x22e>
 800796e:	bf00      	nop
 8007970:	08007dd5 	.word	0x08007dd5
 8007974:	08007de6 	.word	0x08007de6

08007978 <_sbrk_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4d06      	ldr	r5, [pc, #24]	; (8007994 <_sbrk_r+0x1c>)
 800797c:	2300      	movs	r3, #0
 800797e:	4604      	mov	r4, r0
 8007980:	4608      	mov	r0, r1
 8007982:	602b      	str	r3, [r5, #0]
 8007984:	f7fa fc66 	bl	8002254 <_sbrk>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d102      	bne.n	8007992 <_sbrk_r+0x1a>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	b103      	cbz	r3, 8007992 <_sbrk_r+0x1a>
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	bd38      	pop	{r3, r4, r5, pc}
 8007994:	20001650 	.word	0x20001650

08007998 <__sread>:
 8007998:	b510      	push	{r4, lr}
 800799a:	460c      	mov	r4, r1
 800799c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a0:	f000 f8a8 	bl	8007af4 <_read_r>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	bfab      	itete	ge
 80079a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079aa:	89a3      	ldrhlt	r3, [r4, #12]
 80079ac:	181b      	addge	r3, r3, r0
 80079ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079b2:	bfac      	ite	ge
 80079b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80079b6:	81a3      	strhlt	r3, [r4, #12]
 80079b8:	bd10      	pop	{r4, pc}

080079ba <__swrite>:
 80079ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079be:	461f      	mov	r7, r3
 80079c0:	898b      	ldrh	r3, [r1, #12]
 80079c2:	05db      	lsls	r3, r3, #23
 80079c4:	4605      	mov	r5, r0
 80079c6:	460c      	mov	r4, r1
 80079c8:	4616      	mov	r6, r2
 80079ca:	d505      	bpl.n	80079d8 <__swrite+0x1e>
 80079cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d0:	2302      	movs	r3, #2
 80079d2:	2200      	movs	r2, #0
 80079d4:	f000 f870 	bl	8007ab8 <_lseek_r>
 80079d8:	89a3      	ldrh	r3, [r4, #12]
 80079da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079e2:	81a3      	strh	r3, [r4, #12]
 80079e4:	4632      	mov	r2, r6
 80079e6:	463b      	mov	r3, r7
 80079e8:	4628      	mov	r0, r5
 80079ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ee:	f000 b817 	b.w	8007a20 <_write_r>

080079f2 <__sseek>:
 80079f2:	b510      	push	{r4, lr}
 80079f4:	460c      	mov	r4, r1
 80079f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fa:	f000 f85d 	bl	8007ab8 <_lseek_r>
 80079fe:	1c43      	adds	r3, r0, #1
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	bf15      	itete	ne
 8007a04:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a0e:	81a3      	strheq	r3, [r4, #12]
 8007a10:	bf18      	it	ne
 8007a12:	81a3      	strhne	r3, [r4, #12]
 8007a14:	bd10      	pop	{r4, pc}

08007a16 <__sclose>:
 8007a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a1a:	f000 b81b 	b.w	8007a54 <_close_r>
	...

08007a20 <_write_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4d07      	ldr	r5, [pc, #28]	; (8007a40 <_write_r+0x20>)
 8007a24:	4604      	mov	r4, r0
 8007a26:	4608      	mov	r0, r1
 8007a28:	4611      	mov	r1, r2
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	602a      	str	r2, [r5, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	f7f8 fd88 	bl	8000544 <_write>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	d102      	bne.n	8007a3e <_write_r+0x1e>
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	b103      	cbz	r3, 8007a3e <_write_r+0x1e>
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}
 8007a40:	20001650 	.word	0x20001650

08007a44 <abort>:
 8007a44:	b508      	push	{r3, lr}
 8007a46:	2006      	movs	r0, #6
 8007a48:	f000 f88e 	bl	8007b68 <raise>
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	f7fa fba6 	bl	800219e <_exit>
	...

08007a54 <_close_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4d06      	ldr	r5, [pc, #24]	; (8007a70 <_close_r+0x1c>)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	602b      	str	r3, [r5, #0]
 8007a60:	f7fa fbc4 	bl	80021ec <_close>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_close_r+0x1a>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_close_r+0x1a>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	20001650 	.word	0x20001650

08007a74 <_fstat_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4d07      	ldr	r5, [pc, #28]	; (8007a94 <_fstat_r+0x20>)
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	4611      	mov	r1, r2
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	f7fa fbbf 	bl	8002204 <_fstat>
 8007a86:	1c43      	adds	r3, r0, #1
 8007a88:	d102      	bne.n	8007a90 <_fstat_r+0x1c>
 8007a8a:	682b      	ldr	r3, [r5, #0]
 8007a8c:	b103      	cbz	r3, 8007a90 <_fstat_r+0x1c>
 8007a8e:	6023      	str	r3, [r4, #0]
 8007a90:	bd38      	pop	{r3, r4, r5, pc}
 8007a92:	bf00      	nop
 8007a94:	20001650 	.word	0x20001650

08007a98 <_isatty_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4d06      	ldr	r5, [pc, #24]	; (8007ab4 <_isatty_r+0x1c>)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	4608      	mov	r0, r1
 8007aa2:	602b      	str	r3, [r5, #0]
 8007aa4:	f7fa fbbe 	bl	8002224 <_isatty>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d102      	bne.n	8007ab2 <_isatty_r+0x1a>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <_isatty_r+0x1a>
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	20001650 	.word	0x20001650

08007ab8 <_lseek_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4d07      	ldr	r5, [pc, #28]	; (8007ad8 <_lseek_r+0x20>)
 8007abc:	4604      	mov	r4, r0
 8007abe:	4608      	mov	r0, r1
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	602a      	str	r2, [r5, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f7fa fbb7 	bl	800223a <_lseek>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_lseek_r+0x1e>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_lseek_r+0x1e>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	20001650 	.word	0x20001650

08007adc <__malloc_lock>:
 8007adc:	4801      	ldr	r0, [pc, #4]	; (8007ae4 <__malloc_lock+0x8>)
 8007ade:	f7ff bb0d 	b.w	80070fc <__retarget_lock_acquire_recursive>
 8007ae2:	bf00      	nop
 8007ae4:	20001644 	.word	0x20001644

08007ae8 <__malloc_unlock>:
 8007ae8:	4801      	ldr	r0, [pc, #4]	; (8007af0 <__malloc_unlock+0x8>)
 8007aea:	f7ff bb08 	b.w	80070fe <__retarget_lock_release_recursive>
 8007aee:	bf00      	nop
 8007af0:	20001644 	.word	0x20001644

08007af4 <_read_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	4d07      	ldr	r5, [pc, #28]	; (8007b14 <_read_r+0x20>)
 8007af8:	4604      	mov	r4, r0
 8007afa:	4608      	mov	r0, r1
 8007afc:	4611      	mov	r1, r2
 8007afe:	2200      	movs	r2, #0
 8007b00:	602a      	str	r2, [r5, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	f7fa fb55 	bl	80021b2 <_read>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_read_r+0x1e>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_read_r+0x1e>
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	20001650 	.word	0x20001650

08007b18 <_raise_r>:
 8007b18:	291f      	cmp	r1, #31
 8007b1a:	b538      	push	{r3, r4, r5, lr}
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	460d      	mov	r5, r1
 8007b20:	d904      	bls.n	8007b2c <_raise_r+0x14>
 8007b22:	2316      	movs	r3, #22
 8007b24:	6003      	str	r3, [r0, #0]
 8007b26:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
 8007b2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b2e:	b112      	cbz	r2, 8007b36 <_raise_r+0x1e>
 8007b30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b34:	b94b      	cbnz	r3, 8007b4a <_raise_r+0x32>
 8007b36:	4620      	mov	r0, r4
 8007b38:	f000 f830 	bl	8007b9c <_getpid_r>
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4601      	mov	r1, r0
 8007b40:	4620      	mov	r0, r4
 8007b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b46:	f000 b817 	b.w	8007b78 <_kill_r>
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d00a      	beq.n	8007b64 <_raise_r+0x4c>
 8007b4e:	1c59      	adds	r1, r3, #1
 8007b50:	d103      	bne.n	8007b5a <_raise_r+0x42>
 8007b52:	2316      	movs	r3, #22
 8007b54:	6003      	str	r3, [r0, #0]
 8007b56:	2001      	movs	r0, #1
 8007b58:	e7e7      	b.n	8007b2a <_raise_r+0x12>
 8007b5a:	2400      	movs	r4, #0
 8007b5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b60:	4628      	mov	r0, r5
 8007b62:	4798      	blx	r3
 8007b64:	2000      	movs	r0, #0
 8007b66:	e7e0      	b.n	8007b2a <_raise_r+0x12>

08007b68 <raise>:
 8007b68:	4b02      	ldr	r3, [pc, #8]	; (8007b74 <raise+0xc>)
 8007b6a:	4601      	mov	r1, r0
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	f7ff bfd3 	b.w	8007b18 <_raise_r>
 8007b72:	bf00      	nop
 8007b74:	20000028 	.word	0x20000028

08007b78 <_kill_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	4d07      	ldr	r5, [pc, #28]	; (8007b98 <_kill_r+0x20>)
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4604      	mov	r4, r0
 8007b80:	4608      	mov	r0, r1
 8007b82:	4611      	mov	r1, r2
 8007b84:	602b      	str	r3, [r5, #0]
 8007b86:	f7fa fafa 	bl	800217e <_kill>
 8007b8a:	1c43      	adds	r3, r0, #1
 8007b8c:	d102      	bne.n	8007b94 <_kill_r+0x1c>
 8007b8e:	682b      	ldr	r3, [r5, #0]
 8007b90:	b103      	cbz	r3, 8007b94 <_kill_r+0x1c>
 8007b92:	6023      	str	r3, [r4, #0]
 8007b94:	bd38      	pop	{r3, r4, r5, pc}
 8007b96:	bf00      	nop
 8007b98:	20001650 	.word	0x20001650

08007b9c <_getpid_r>:
 8007b9c:	f7fa bae7 	b.w	800216e <_getpid>

08007ba0 <_init>:
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	bf00      	nop
 8007ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba6:	bc08      	pop	{r3}
 8007ba8:	469e      	mov	lr, r3
 8007baa:	4770      	bx	lr

08007bac <_fini>:
 8007bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bae:	bf00      	nop
 8007bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb2:	bc08      	pop	{r3}
 8007bb4:	469e      	mov	lr, r3
 8007bb6:	4770      	bx	lr
