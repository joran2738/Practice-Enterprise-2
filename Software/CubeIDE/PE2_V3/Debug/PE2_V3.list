
PE2_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ec8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08008058  08008058  00018058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008298  08008298  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08008298  08008298  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008298  08008298  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008298  08008298  00018298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800829c  0800829c  0001829c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080082a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015c8  2000008c  0800832c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001654  0800832c  00021654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112da  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002771  00000000  00000000  00031396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00033b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  000349d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001758c  00000000  00000000  00035790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ded  00000000  00000000  0004cd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ba6  00000000  00000000  00061b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e76af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f0  00000000  00000000  000e7700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008040 	.word	0x08008040

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08008040 	.word	0x08008040

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <init>:
uint8_t gamechoice = 0;
extern uint8_t play;
char str[12];


void init (void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
    choice = 0;
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <init+0x24>)
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
    if(gamechoice == 1){
 800027a:	4b07      	ldr	r3, [pc, #28]	; (8000298 <init+0x28>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d102      	bne.n	8000288 <init+0x18>
        initSpaceInvaders();
 8000282:	f000 fea1 	bl	8000fc8 <initSpaceInvaders>
    	Displ_CLS(BLACK);
        //nothing yet, your init
    }


}
 8000286:	e002      	b.n	800028e <init+0x1e>
    	Displ_CLS(BLACK);
 8000288:	2000      	movs	r0, #0
 800028a:	f002 fcd1 	bl	8002c30 <Displ_CLS>
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20001369 	.word	0x20001369
 8000298:	2000136a 	.word	0x2000136a

0800029c <loop>:

int loop (int key) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
    updateScreen();
 80002a4:	f000 f8ec 	bl	8000480 <updateScreen>
    if (play == menu){
 80002a8:	4b6e      	ldr	r3, [pc, #440]	; (8000464 <loop+0x1c8>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b03      	cmp	r3, #3
 80002ae:	d104      	bne.n	80002ba <loop+0x1e>
        max_choice = total_games;
 80002b0:	4b6d      	ldr	r3, [pc, #436]	; (8000468 <loop+0x1cc>)
 80002b2:	781a      	ldrb	r2, [r3, #0]
 80002b4:	4b6d      	ldr	r3, [pc, #436]	; (800046c <loop+0x1d0>)
 80002b6:	701a      	strb	r2, [r3, #0]
 80002b8:	e002      	b.n	80002c0 <loop+0x24>
    }else{
        max_choice = 1;
 80002ba:	4b6c      	ldr	r3, [pc, #432]	; (800046c <loop+0x1d0>)
 80002bc:	2201      	movs	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]
    }
    if(key == left) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d11d      	bne.n	8000302 <loop+0x66>
        if(play < paused){
 80002c6:	4b67      	ldr	r3, [pc, #412]	; (8000464 <loop+0x1c8>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d808      	bhi.n	80002e0 <loop+0x44>
        	if(gamechoice == 1){
 80002ce:	4b68      	ldr	r3, [pc, #416]	; (8000470 <loop+0x1d4>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d113      	bne.n	80002fe <loop+0x62>
        		moveSpaceship(-1);
 80002d6:	f04f 30ff 	mov.w	r0, #4294967295
 80002da:	f001 fb75 	bl	80019c8 <moveSpaceship>
 80002de:	e00e      	b.n	80002fe <loop+0x62>
        	}
        }else{
            if (choice == 0){
 80002e0:	4b64      	ldr	r3, [pc, #400]	; (8000474 <loop+0x1d8>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d104      	bne.n	80002f2 <loop+0x56>
                choice = max_choice;
 80002e8:	4b60      	ldr	r3, [pc, #384]	; (800046c <loop+0x1d0>)
 80002ea:	781a      	ldrb	r2, [r3, #0]
 80002ec:	4b61      	ldr	r3, [pc, #388]	; (8000474 <loop+0x1d8>)
 80002ee:	701a      	strb	r2, [r3, #0]
 80002f0:	e005      	b.n	80002fe <loop+0x62>
            }else{
                choice--;
 80002f2:	4b60      	ldr	r3, [pc, #384]	; (8000474 <loop+0x1d8>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	3b01      	subs	r3, #1
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4b5e      	ldr	r3, [pc, #376]	; (8000474 <loop+0x1d8>)
 80002fc:	701a      	strb	r2, [r3, #0]
            }
            //QD << choice; // change to uart debug
        }
        key = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	607b      	str	r3, [r7, #4]
    }
    if(key == right) {
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2b03      	cmp	r3, #3
 8000306:	d11d      	bne.n	8000344 <loop+0xa8>
        if(play < paused){
 8000308:	4b56      	ldr	r3, [pc, #344]	; (8000464 <loop+0x1c8>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d807      	bhi.n	8000320 <loop+0x84>
        	if(gamechoice == 1){
 8000310:	4b57      	ldr	r3, [pc, #348]	; (8000470 <loop+0x1d4>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d113      	bne.n	8000340 <loop+0xa4>
        		moveSpaceship(1);
 8000318:	2001      	movs	r0, #1
 800031a:	f001 fb55 	bl	80019c8 <moveSpaceship>
 800031e:	e00f      	b.n	8000340 <loop+0xa4>
        	}
        }else{
            if (choice == max_choice){
 8000320:	4b54      	ldr	r3, [pc, #336]	; (8000474 <loop+0x1d8>)
 8000322:	781a      	ldrb	r2, [r3, #0]
 8000324:	4b51      	ldr	r3, [pc, #324]	; (800046c <loop+0x1d0>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	429a      	cmp	r2, r3
 800032a:	d103      	bne.n	8000334 <loop+0x98>
                choice = 0;
 800032c:	4b51      	ldr	r3, [pc, #324]	; (8000474 <loop+0x1d8>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
 8000332:	e005      	b.n	8000340 <loop+0xa4>
            }else{
                choice++;
 8000334:	4b4f      	ldr	r3, [pc, #316]	; (8000474 <loop+0x1d8>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	b2da      	uxtb	r2, r3
 800033c:	4b4d      	ldr	r3, [pc, #308]	; (8000474 <loop+0x1d8>)
 800033e:	701a      	strb	r2, [r3, #0]
            }
        }
        key = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	607b      	str	r3, [r7, #4]
    }
    if(key == down){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2b04      	cmp	r3, #4
 8000348:	d155      	bne.n	80003f6 <loop+0x15a>
        if (play == notPlay){
 800034a:	4b46      	ldr	r3, [pc, #280]	; (8000464 <loop+0x1c8>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d103      	bne.n	800035a <loop+0xbe>
            play = inPlay;
 8000352:	4b44      	ldr	r3, [pc, #272]	; (8000464 <loop+0x1c8>)
 8000354:	2201      	movs	r2, #1
 8000356:	701a      	strb	r2, [r3, #0]
 8000358:	e04b      	b.n	80003f2 <loop+0x156>
        }else if(play == paused){
 800035a:	4b42      	ldr	r3, [pc, #264]	; (8000464 <loop+0x1c8>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d118      	bne.n	8000394 <loop+0xf8>
            if(choice == 0){
 8000362:	4b44      	ldr	r3, [pc, #272]	; (8000474 <loop+0x1d8>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d105      	bne.n	8000376 <loop+0xda>
                play = menu;
 800036a:	4b3e      	ldr	r3, [pc, #248]	; (8000464 <loop+0x1c8>)
 800036c:	2203      	movs	r2, #3
 800036e:	701a      	strb	r2, [r3, #0]
                init();
 8000370:	f7ff ff7e 	bl	8000270 <init>
 8000374:	e03d      	b.n	80003f2 <loop+0x156>
            }
            else if(choice == 1){
 8000376:	4b3f      	ldr	r3, [pc, #252]	; (8000474 <loop+0x1d8>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d106      	bne.n	800038c <loop+0xf0>
            	displayPauseMenu(1);
 800037e:	2001      	movs	r0, #1
 8000380:	f000 fc68 	bl	8000c54 <displayPauseMenu>
                play = inPlay;
 8000384:	4b37      	ldr	r3, [pc, #220]	; (8000464 <loop+0x1c8>)
 8000386:	2201      	movs	r2, #1
 8000388:	701a      	strb	r2, [r3, #0]
 800038a:	e032      	b.n	80003f2 <loop+0x156>
            }else{
                displayPauseMenu(0);
 800038c:	2000      	movs	r0, #0
 800038e:	f000 fc61 	bl	8000c54 <displayPauseMenu>
 8000392:	e02e      	b.n	80003f2 <loop+0x156>
            }

        }else if(play == menu){
 8000394:	4b33      	ldr	r3, [pc, #204]	; (8000464 <loop+0x1c8>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b03      	cmp	r3, #3
 800039a:	d123      	bne.n	80003e4 <loop+0x148>
            if(choice == 0){
 800039c:	4b35      	ldr	r3, [pc, #212]	; (8000474 <loop+0x1d8>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d102      	bne.n	80003aa <loop+0x10e>
                toggle_multiplayer();
 80003a4:	f000 fe00 	bl	8000fa8 <toggle_multiplayer>
 80003a8:	e023      	b.n	80003f2 <loop+0x156>
            }else if(choice == 1){
 80003aa:	4b32      	ldr	r3, [pc, #200]	; (8000474 <loop+0x1d8>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d108      	bne.n	80003c4 <loop+0x128>
                gamechoice = 0;
 80003b2:	4b2f      	ldr	r3, [pc, #188]	; (8000470 <loop+0x1d4>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80003b8:	4b2a      	ldr	r3, [pc, #168]	; (8000464 <loop+0x1c8>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]

                init();
 80003be:	f7ff ff57 	bl	8000270 <init>
 80003c2:	e016      	b.n	80003f2 <loop+0x156>
            }
            else if(choice == 2){
 80003c4:	4b2b      	ldr	r3, [pc, #172]	; (8000474 <loop+0x1d8>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d108      	bne.n	80003de <loop+0x142>
                gamechoice = 1;
 80003cc:	4b28      	ldr	r3, [pc, #160]	; (8000470 <loop+0x1d4>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80003d2:	4b24      	ldr	r3, [pc, #144]	; (8000464 <loop+0x1c8>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]

                init();
 80003d8:	f7ff ff4a 	bl	8000270 <init>
 80003dc:	e009      	b.n	80003f2 <loop+0x156>
            }else{
                displayMenu();
 80003de:	f000 fc9b 	bl	8000d18 <displayMenu>
 80003e2:	e006      	b.n	80003f2 <loop+0x156>
            }
        }
        else if(!hit){
 80003e4:	4b24      	ldr	r3, [pc, #144]	; (8000478 <loop+0x1dc>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d102      	bne.n	80003f2 <loop+0x156>
            spawnBullet(0);
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 ff3b 	bl	8001268 <spawnBullet>
        }
        key = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	607b      	str	r3, [r7, #4]
    }
    if(key == up && play < 2){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	d10e      	bne.n	800041a <loop+0x17e>
 80003fc:	4b19      	ldr	r3, [pc, #100]	; (8000464 <loop+0x1c8>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d80a      	bhi.n	800041a <loop+0x17e>
        play = paused;
 8000404:	4b17      	ldr	r3, [pc, #92]	; (8000464 <loop+0x1c8>)
 8000406:	2202      	movs	r2, #2
 8000408:	701a      	strb	r2, [r3, #0]
        choice = 1;
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <loop+0x1d8>)
 800040c:	2201      	movs	r2, #1
 800040e:	701a      	strb	r2, [r3, #0]
        last_choice_pause = 40;
 8000410:	4b1a      	ldr	r3, [pc, #104]	; (800047c <loop+0x1e0>)
 8000412:	2228      	movs	r2, #40	; 0x28
 8000414:	701a      	strb	r2, [r3, #0]
        key = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	607b      	str	r3, [r7, #4]
    }

    if(play == inPlay){
 800041a:	4b12      	ldr	r3, [pc, #72]	; (8000464 <loop+0x1c8>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d10f      	bne.n	8000442 <loop+0x1a6>
    	if(gamechoice == 1){
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <loop+0x1d4>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d109      	bne.n	800043e <loop+0x1a2>
    		spawnComet();
 800042a:	f000 fe91 	bl	8001150 <spawnComet>
    		delayBullet();
 800042e:	f001 fd7f 	bl	8001f30 <delayBullet>
    		moveComets();
 8000432:	f001 f94f 	bl	80016d4 <moveComets>
    		moveBullets();
 8000436:	f000 ffc9 	bl	80013cc <moveBullets>
    		moveEnemyBullets();
 800043a:	f001 f883 	bl	8001544 <moveEnemyBullets>
    	}

    	updateScreen();
 800043e:	f000 f81f 	bl	8000480 <updateScreen>
    }if(play < paused){
 8000442:	4b08      	ldr	r3, [pc, #32]	; (8000464 <loop+0x1c8>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d807      	bhi.n	800045a <loop+0x1be>
    	if(gamechoice == 1){
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <loop+0x1d4>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d103      	bne.n	800045a <loop+0x1be>
    		spawnStar();
 8000452:	f000 ff5d 	bl	8001310 <spawnStar>
    		moveStars();
 8000456:	f001 fa55 	bl	8001904 <moveStars>
    	}

    }
    return key;
 800045a:	687b      	ldr	r3, [r7, #4]
}
 800045c:	4618      	mov	r0, r3
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	2000000b 	.word	0x2000000b
 8000468:	20000004 	.word	0x20000004
 800046c:	20000001 	.word	0x20000001
 8000470:	2000136a 	.word	0x2000136a
 8000474:	20001369 	.word	0x20001369
 8000478:	20001368 	.word	0x20001368
 800047c:	20000000 	.word	0x20000000

08000480 <updateScreen>:


void updateScreen()
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
    if (play == menu){
 8000486:	4b23      	ldr	r3, [pc, #140]	; (8000514 <updateScreen+0x94>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b03      	cmp	r3, #3
 800048c:	d102      	bne.n	8000494 <updateScreen+0x14>
    	displayMenu();
 800048e:	f000 fc43 	bl	8000d18 <displayMenu>
        return;
 8000492:	e03b      	b.n	800050c <updateScreen+0x8c>
    }

    //hit
    if (gamechoice == 1 && hit > 0){
 8000494:	4b20      	ldr	r3, [pc, #128]	; (8000518 <updateScreen+0x98>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d105      	bne.n	80004a8 <updateScreen+0x28>
 800049c:	4b1f      	ldr	r3, [pc, #124]	; (800051c <updateScreen+0x9c>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <updateScreen+0x28>
        spaceShipHitColorToggle();
 80004a4:	f001 fcfa 	bl	8001e9c <spaceShipHitColorToggle>
    }
    //background
    for(int x = 0; x < SCREEN_WIDTH; x++) {
 80004a8:	2300      	movs	r3, #0
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	e016      	b.n	80004dc <updateScreen+0x5c>
        for(int y = 0; y < SCREEN_HEIGHT; y++) {
 80004ae:	2300      	movs	r3, #0
 80004b0:	603b      	str	r3, [r7, #0]
 80004b2:	e00d      	b.n	80004d0 <updateScreen+0x50>
            game_screen[x][y] = ENC_DARK_GRAY;
 80004b4:	491a      	ldr	r1, [pc, #104]	; (8000520 <updateScreen+0xa0>)
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	4613      	mov	r3, r2
 80004ba:	011b      	lsls	r3, r3, #4
 80004bc:	1a9b      	subs	r3, r3, r2
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	18ca      	adds	r2, r1, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	4413      	add	r3, r2
 80004c6:	2206      	movs	r2, #6
 80004c8:	701a      	strb	r2, [r3, #0]
        for(int y = 0; y < SCREEN_HEIGHT; y++) {
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	3301      	adds	r3, #1
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	2b3b      	cmp	r3, #59	; 0x3b
 80004d4:	ddee      	ble.n	80004b4 <updateScreen+0x34>
    for(int x = 0; x < SCREEN_WIDTH; x++) {
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3301      	adds	r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b4f      	cmp	r3, #79	; 0x4f
 80004e0:	dde5      	ble.n	80004ae <updateScreen+0x2e>
        }
    }

    //start
    if(!play){
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <updateScreen+0x94>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d006      	beq.n	80004f8 <updateScreen+0x78>
        //displayText(game_screen,"START", SCREEN_WIDTH - (SCREEN_WIDTH / 2)-14, SCREEN_HEIGHT - (SCREEN_HEIGHT / 2) - 4, WHITE);
    }
    else if(play == paused){
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <updateScreen+0x94>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b02      	cmp	r3, #2
 80004f0:	d102      	bne.n	80004f8 <updateScreen+0x78>
    	displayPauseMenu(0);
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fbae 	bl	8000c54 <displayPauseMenu>
    }

    if(gamechoice == 1){
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <updateScreen+0x98>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d105      	bne.n	800050c <updateScreen+0x8c>
    	//spaceship
    	displaySpaceShip(RED);
 8000500:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000504:	f001 fc3e 	bl	8001d84 <displaySpaceShip>

    	//lives
    	displayLives();
 8000508:	f001 fc7e 	bl	8001e08 <displayLives>
        //displayText(game_screen,"bricks", SCREEN_WIDTH - (SCREEN_WIDTH / 2) - 18, SCREEN_HEIGHT - (SCREEN_HEIGHT / 2) + 5, WHITE);
        //nothin yet, here comes your things
    }


}
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	2000000b 	.word	0x2000000b
 8000518:	2000136a 	.word	0x2000136a
 800051c:	20001368 	.word	0x20001368
 8000520:	200000a8 	.word	0x200000a8

08000524 <_write>:
int16_t angle = 90;
uint32_t millis = 0;
uint32_t premillis = 0;
extern uint8_t game_screen[SCREEN_WIDTH][SCREEN_HEIGHT];

int _write(int file, char *ptr, int len) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d003      	beq.n	800053e <_write+0x1a>
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d015      	beq.n	8000568 <_write+0x44>
 800053c:	e029      	b.n	8000592 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	b29a      	uxth	r2, r3
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	68b9      	ldr	r1, [r7, #8]
 8000548:	481a      	ldr	r0, [pc, #104]	; (80005b4 <_write+0x90>)
 800054a:	f006 f87d 	bl	8006648 <HAL_UART_Transmit>
 800054e:	4603      	mov	r3, r0
 8000550:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000552:	7dfb      	ldrb	r3, [r7, #23]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d024      	beq.n	80005a2 <_write+0x7e>
			errno = EIO;
 8000558:	f006 fc4c 	bl	8006df4 <__errno>
 800055c:	4603      	mov	r3, r0
 800055e:	2205      	movs	r2, #5
 8000560:	601a      	str	r2, [r3, #0]
			return -1;
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
 8000566:	e020      	b.n	80005aa <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	b29a      	uxth	r2, r3
 800056c:	f04f 33ff 	mov.w	r3, #4294967295
 8000570:	68b9      	ldr	r1, [r7, #8]
 8000572:	4810      	ldr	r0, [pc, #64]	; (80005b4 <_write+0x90>)
 8000574:	f006 f868 	bl	8006648 <HAL_UART_Transmit>
 8000578:	4603      	mov	r3, r0
 800057a:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 800057c:	7dfb      	ldrb	r3, [r7, #23]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d011      	beq.n	80005a6 <_write+0x82>
			errno = EIO;
 8000582:	f006 fc37 	bl	8006df4 <__errno>
 8000586:	4603      	mov	r3, r0
 8000588:	2205      	movs	r2, #5
 800058a:	601a      	str	r2, [r3, #0]
			return -1;
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	e00b      	b.n	80005aa <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 8000592:	f006 fc2f 	bl	8006df4 <__errno>
 8000596:	4603      	mov	r3, r0
 8000598:	2209      	movs	r2, #9
 800059a:	601a      	str	r2, [r3, #0]
        return -1;
 800059c:	f04f 33ff 	mov.w	r3, #4294967295
 80005a0:	e003      	b.n	80005aa <_write+0x86>
        break;
 80005a2:	bf00      	nop
 80005a4:	e000      	b.n	80005a8 <_write+0x84>
        break;
 80005a6:	bf00      	nop
    }
    return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200014ac 	.word	0x200014ac

080005b8 <read_MPU_mem>:

uint8_t read_MPU_mem(uint8_t reg_addr){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af04      	add	r7, sp, #16
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	9302      	str	r3, [sp, #8]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	f107 030f 	add.w	r3, r7, #15
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2301      	movs	r3, #1
 80005d6:	21d0      	movs	r1, #208	; 0xd0
 80005d8:	4807      	ldr	r0, [pc, #28]	; (80005f8 <read_MPU_mem+0x40>)
 80005da:	f003 faf7 	bl	8003bcc <HAL_I2C_Mem_Read>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d101      	bne.n	80005e8 <read_MPU_mem+0x30>
		return data;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	e003      	b.n	80005f0 <read_MPU_mem+0x38>
	}
	else{
		printf("mem not read\r\n");
 80005e8:	4804      	ldr	r0, [pc, #16]	; (80005fc <read_MPU_mem+0x44>)
 80005ea:	f006 fcbb 	bl	8006f64 <puts>
		return 0;
 80005ee:	2300      	movs	r3, #0
	}
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	2000136c 	.word	0x2000136c
 80005fc:	08008058 	.word	0x08008058

08000600 <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af04      	add	r7, sp, #16
 8000606:	4603      	mov	r3, r0
 8000608:	460a      	mov	r2, r1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	4613      	mov	r3, r2
 800060e:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	b29a      	uxth	r2, r3
 8000614:	2364      	movs	r3, #100	; 0x64
 8000616:	9302      	str	r3, [sp, #8]
 8000618:	2301      	movs	r3, #1
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	1dbb      	adds	r3, r7, #6
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2301      	movs	r3, #1
 8000622:	21d1      	movs	r1, #209	; 0xd1
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <write_MPU_mem+0x40>)
 8000626:	f003 f9bd 	bl	80039a4 <HAL_I2C_Mem_Write>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <write_MPU_mem+0x44>)
 8000632:	f006 fc97 	bl	8006f64 <puts>
    }
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000136c 	.word	0x2000136c
 8000644:	08008068 	.word	0x08008068

08000648 <read_y_accel>:

void read_y_accel(){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	uint8_t LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 800064e:	203e      	movs	r0, #62	; 0x3e
 8000650:	f7ff ffb2 	bl	80005b8 <read_MPU_mem>
 8000654:	4603      	mov	r3, r0
 8000656:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 8000658:	203d      	movs	r0, #61	; 0x3d
 800065a:	f7ff ffad 	bl	80005b8 <read_MPU_mem>
 800065e:	4603      	mov	r3, r0
 8000660:	71bb      	strb	r3, [r7, #6]

	ay = (((int16_t)MSByte << 8) | LSByte);
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	021b      	lsls	r3, r3, #8
 8000666:	b21a      	sxth	r2, r3
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	b21b      	sxth	r3, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	b21a      	sxth	r2, r3
 8000670:	4b02      	ldr	r3, [pc, #8]	; (800067c <read_y_accel+0x34>)
 8000672:	801a      	strh	r2, [r3, #0]

}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20001534 	.word	0x20001534

08000680 <init_MPU>:

void init_MPU(){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 8000684:	2100      	movs	r1, #0
 8000686:	206b      	movs	r0, #107	; 0x6b
 8000688:	f7ff ffba 	bl	8000600 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 800068c:	2107      	movs	r1, #7
 800068e:	2019      	movs	r0, #25
 8000690:	f7ff ffb6 	bl	8000600 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 8000694:	2100      	movs	r1, #0
 8000696:	201b      	movs	r0, #27
 8000698:	f7ff ffb2 	bl	8000600 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 800069c:	2100      	movs	r1, #0
 800069e:	201c      	movs	r0, #28
 80006a0:	f7ff ffae 	bl	8000600 <write_MPU_mem>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f002 fd93 	bl	80031d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f883 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 f9b5 	bl	8000a24 <MX_GPIO_Init>
  MX_I2C2_Init();
 80006ba:	f000 f8d5 	bl	8000868 <MX_I2C2_Init>
  MX_SPI2_Init();
 80006be:	f000 f913 	bl	80008e8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80006c2:	f000 f94f 	bl	8000964 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006c6:	f000 f97d 	bl	80009c4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80006ca:	2064      	movs	r0, #100	; 0x64
 80006cc:	f002 fdea 	bl	80032a4 <HAL_Delay>
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	2201      	movs	r2, #1
 80006d4:	21d0      	movs	r1, #208	; 0xd0
 80006d6:	4830      	ldr	r0, [pc, #192]	; (8000798 <main+0xf0>)
 80006d8:	f003 fb92 	bl	8003e00 <HAL_I2C_IsDeviceReady>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d105      	bne.n	80006ee <main+0x46>
	  printf("succesfully communicated\n\r");
 80006e2:	482e      	ldr	r0, [pc, #184]	; (800079c <main+0xf4>)
 80006e4:	f006 fbb8 	bl	8006e58 <iprintf>
	  init_MPU();
 80006e8:	f7ff ffca 	bl	8000680 <init_MPU>
 80006ec:	e002      	b.n	80006f4 <main+0x4c>
  }
  else{
	  printf("i2C not found\n\r");
 80006ee:	482c      	ldr	r0, [pc, #176]	; (80007a0 <main+0xf8>)
 80006f0:	f006 fbb2 	bl	8006e58 <iprintf>
  }

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 80006f4:	2001      	movs	r0, #1
 80006f6:	f002 f873 	bl	80027e0 <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f002 fa98 	bl	8002c30 <Displ_CLS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(100);
 8000700:	2064      	movs	r0, #100	; 0x64
 8000702:	f002 fdcf 	bl	80032a4 <HAL_Delay>

      read_y_accel();
 8000706:	f7ff ff9f 	bl	8000648 <read_y_accel>
      if (ay > 2000){
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <main+0xfc>)
 800070c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000710:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000714:	dd07      	ble.n	8000726 <main+0x7e>
          if(x < 320 - 88){
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <main+0x100>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	2be7      	cmp	r3, #231	; 0xe7
 800071c:	d810      	bhi.n	8000740 <main+0x98>
        	  key = right;
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <main+0x104>)
 8000720:	2203      	movs	r2, #3
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	e00c      	b.n	8000740 <main+0x98>
          }
      }
      else if (ay < -2000){
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <main+0xfc>)
 8000728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800072c:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8000730:	da06      	bge.n	8000740 <main+0x98>
          if(x > 0){
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <main+0x100>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d002      	beq.n	8000740 <main+0x98>
        	  key = left;
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <main+0x104>)
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
          }
      }
      else{
      }
      key = loop(key);
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <main+0x104>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fda9 	bl	800029c <loop>
 800074a:	4603      	mov	r3, r0
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <main+0x104>)
 8000750:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ammo.in_play; i++){
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	e017      	b.n	8000788 <main+0xe0>
    	  printf("hello?\r\n");
 8000758:	4815      	ldr	r0, [pc, #84]	; (80007b0 <main+0x108>)
 800075a:	f006 fc03 	bl	8006f64 <puts>
    	  printf("ammo %d: x:%d, y:%d\r\n",i,ammo.bullet_ar[i].x,ammo.bullet_ar[i].y);
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <main+0x10c>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	4413      	add	r3, r2
 8000766:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800076a:	4619      	mov	r1, r3
 800076c:	4a11      	ldr	r2, [pc, #68]	; (80007b4 <main+0x10c>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	4413      	add	r3, r2
 8000774:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000778:	460a      	mov	r2, r1
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	480e      	ldr	r0, [pc, #56]	; (80007b8 <main+0x110>)
 800077e:	f006 fb6b 	bl	8006e58 <iprintf>
      for (int i = 0; i < ammo.in_play; i++){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3301      	adds	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <main+0x10c>)
 800078a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800078e:	461a      	mov	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4293      	cmp	r3, r2
 8000794:	dbe0      	blt.n	8000758 <main+0xb0>
      HAL_Delay(100);
 8000796:	e7b3      	b.n	8000700 <main+0x58>
 8000798:	2000136c 	.word	0x2000136c
 800079c:	0800807c 	.word	0x0800807c
 80007a0:	08008098 	.word	0x08008098
 80007a4:	20001534 	.word	0x20001534
 80007a8:	20000002 	.word	0x20000002
 80007ac:	2000153c 	.word	0x2000153c
 80007b0:	080080a8 	.word	0x080080a8
 80007b4:	20001540 	.word	0x20001540
 80007b8:	080080b0 	.word	0x080080b0

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b09c      	sub	sp, #112	; 0x70
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007c6:	2228      	movs	r2, #40	; 0x28
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f006 fb3c 	bl	8006e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2230      	movs	r2, #48	; 0x30
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f006 fb2e 	bl	8006e48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2310      	movs	r3, #16
 80007f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000800:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000804:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800080a:	4618      	mov	r0, r3
 800080c:	f003 ff52 	bl	80046b4 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000816:	f000 fa17 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2302      	movs	r3, #2
 8000820:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000830:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000834:	2102      	movs	r1, #2
 8000836:	4618      	mov	r0, r3
 8000838:	f004 ff7a 	bl	8005730 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000842:	f000 fa01 	bl	8000c48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000846:	2340      	movs	r3, #64	; 0x40
 8000848:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4618      	mov	r0, r3
 8000852:	f005 f9a3 	bl	8005b9c <HAL_RCCEx_PeriphCLKConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800085c:	f000 f9f4 	bl	8000c48 <Error_Handler>
  }
}
 8000860:	bf00      	nop
 8000862:	3770      	adds	r7, #112	; 0x70
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_I2C2_Init+0x74>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <MX_I2C2_Init+0x78>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_I2C2_Init+0x74>)
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <MX_I2C2_Init+0x7c>)
 8000876:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_I2C2_Init+0x74>)
 8000880:	2201      	movs	r2, #1
 8000882:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_I2C2_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_I2C2_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_I2C2_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_I2C2_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a2:	480e      	ldr	r0, [pc, #56]	; (80008dc <MX_I2C2_Init+0x74>)
 80008a4:	f002 ffee 	bl	8003884 <HAL_I2C_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ae:	f000 f9cb 	bl	8000c48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <MX_I2C2_Init+0x74>)
 80008b6:	f003 fe65 	bl	8004584 <HAL_I2CEx_ConfigAnalogFilter>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008c0:	f000 f9c2 	bl	8000c48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008c4:	2100      	movs	r1, #0
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_I2C2_Init+0x74>)
 80008c8:	f003 fea7 	bl	800461a <HAL_I2CEx_ConfigDigitalFilter>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 f9b9 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000136c 	.word	0x2000136c
 80008e0:	40005800 	.word	0x40005800
 80008e4:	2000090e 	.word	0x2000090e

080008e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_SPI2_Init+0x74>)
 80008ee:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <MX_SPI2_Init+0x78>)
 80008f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_SPI2_Init+0x74>)
 80008f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_SPI2_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_SPI2_Init+0x74>)
 8000902:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000906:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_SPI2_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_SPI2_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_SPI2_Init+0x74>)
 8000916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_SPI2_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_SPI2_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_SPI2_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_SPI2_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_SPI2_Init+0x74>)
 8000936:	2207      	movs	r2, #7
 8000938:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_SPI2_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_SPI2_Init+0x74>)
 8000942:	2208      	movs	r2, #8
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_SPI2_Init+0x74>)
 8000948:	f005 faac 	bl	8005ea4 <HAL_SPI_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000952:	f000 f979 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200013c0 	.word	0x200013c0
 8000960:	40003800 	.word	0x40003800

08000964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_USART2_UART_Init+0x58>)
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <MX_USART2_UART_Init+0x5c>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000970:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_USART2_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_USART2_UART_Init+0x58>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USART2_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USART2_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_USART2_UART_Init+0x58>)
 80009a8:	f005 fe00 	bl	80065ac <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009b2:	f000 f949 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20001424 	.word	0x20001424
 80009c0:	40004400 	.word	0x40004400

080009c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <MX_USART3_UART_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80009d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 8000a08:	f005 fdd0 	bl	80065ac <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a12:	f000 f919 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200014ac 	.word	0x200014ac
 8000a20:	40004800 	.word	0x40004800

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b46      	ldr	r3, [pc, #280]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4a45      	ldr	r2, [pc, #276]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000a40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a44:	6153      	str	r3, [r2, #20]
 8000a46:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a52:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a3f      	ldr	r2, [pc, #252]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a5c:	6153      	str	r3, [r2, #20]
 8000a5e:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a39      	ldr	r2, [pc, #228]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	6153      	str	r3, [r2, #20]
 8000a76:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b34      	ldr	r3, [pc, #208]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a33      	ldr	r2, [pc, #204]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <MX_GPIO_Init+0x130>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa0:	482d      	ldr	r0, [pc, #180]	; (8000b58 <MX_GPIO_Init+0x134>)
 8000aa2:	f002 febf 	bl	8003824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f002 feb8 	bl	8003824 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8000ab4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4824      	ldr	r0, [pc, #144]	; (8000b5c <MX_GPIO_Init+0x138>)
 8000acc:	f002 fd20 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ad4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae8:	f002 fd12 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8000aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4814      	ldr	r0, [pc, #80]	; (8000b58 <MX_GPIO_Init+0x134>)
 8000b06:	f002 fd03 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 8000b0a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f002 fcf3 	bl	8003510 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2006      	movs	r0, #6
 8000b30:	f002 fcb7 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b34:	2006      	movs	r0, #6
 8000b36:	f002 fcd0 	bl	80034da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2028      	movs	r0, #40	; 0x28
 8000b40:	f002 fcaf 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b44:	2028      	movs	r0, #40	; 0x28
 8000b46:	f002 fcc8 	bl	80034da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	48000800 	.word	0x48000800

08000b60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]
    // Get the current time
    uint32_t current_time = HAL_GetTick();
 8000b6a:	f002 fb8f 	bl	800328c <HAL_GetTick>
 8000b6e:	60f8      	str	r0, [r7, #12]

    // Check if it's been long enough since the last debounce
    if (current_time - debounce_time > DEBOUNCE_DELAY) {
 8000b70:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	2b1e      	cmp	r3, #30
 8000b7a:	d951      	bls.n	8000c20 <HAL_GPIO_EXTI_Callback+0xc0>
        // Update debounce time
        debounce_time = current_time;
 8000b7c:	4a2a      	ldr	r2, [pc, #168]	; (8000c28 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	6013      	str	r3, [r2, #0]
        // Your button handling code here
        printf("interrupt!\r\n");
 8000b82:	482a      	ldr	r0, [pc, #168]	; (8000c2c <HAL_GPIO_EXTI_Callback+0xcc>)
 8000b84:	f006 f9ee 	bl	8006f64 <puts>
        if (GPIO_Pin == LEFT_Pin && HAL_GPIO_ReadPin(LEFT_GPIO_Port, GPIO_Pin) == 0) {
 8000b88:	88fb      	ldrh	r3, [r7, #6]
 8000b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b8e:	d10e      	bne.n	8000bae <HAL_GPIO_EXTI_Callback+0x4e>
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	4619      	mov	r1, r3
 8000b94:	4826      	ldr	r0, [pc, #152]	; (8000c30 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000b96:	f002 fe2d 	bl	80037f4 <HAL_GPIO_ReadPin>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d106      	bne.n	8000bae <HAL_GPIO_EXTI_Callback+0x4e>
            key = left;
 8000ba0:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
            printf("left clicked\r\n");
 8000ba6:	4824      	ldr	r0, [pc, #144]	; (8000c38 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000ba8:	f006 f9dc 	bl	8006f64 <puts>
 8000bac:	e038      	b.n	8000c20 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == TOP_Pin && HAL_GPIO_ReadPin(TOP_GPIO_Port, GPIO_Pin) == 0) {
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb4:	d10e      	bne.n	8000bd4 <HAL_GPIO_EXTI_Callback+0x74>
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481d      	ldr	r0, [pc, #116]	; (8000c30 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000bbc:	f002 fe1a 	bl	80037f4 <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d106      	bne.n	8000bd4 <HAL_GPIO_EXTI_Callback+0x74>
            key = up;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	701a      	strb	r2, [r3, #0]
            printf("up clicked\r\n");
 8000bcc:	481b      	ldr	r0, [pc, #108]	; (8000c3c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000bce:	f006 f9c9 	bl	8006f64 <puts>
 8000bd2:	e025      	b.n	8000c20 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == RIGHT_Pin && HAL_GPIO_ReadPin(RIGHT_GPIO_Port, GPIO_Pin) == 0) {
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bda:	d10e      	bne.n	8000bfa <HAL_GPIO_EXTI_Callback+0x9a>
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	4619      	mov	r1, r3
 8000be0:	4813      	ldr	r0, [pc, #76]	; (8000c30 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000be2:	f002 fe07 	bl	80037f4 <HAL_GPIO_ReadPin>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d106      	bne.n	8000bfa <HAL_GPIO_EXTI_Callback+0x9a>
            key = right;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000bee:	2203      	movs	r2, #3
 8000bf0:	701a      	strb	r2, [r3, #0]
            printf("right clicked\r\n");
 8000bf2:	4813      	ldr	r0, [pc, #76]	; (8000c40 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000bf4:	f006 f9b6 	bl	8006f64 <puts>
 8000bf8:	e012      	b.n	8000c20 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == MIDDLE_Pin && HAL_GPIO_ReadPin(MIDDLE_GPIO_Port, GPIO_Pin) == 0) {
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d10f      	bne.n	8000c20 <HAL_GPIO_EXTI_Callback+0xc0>
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f002 fdf4 	bl	80037f4 <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d106      	bne.n	8000c20 <HAL_GPIO_EXTI_Callback+0xc0>
            key = down;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000c14:	2204      	movs	r2, #4
 8000c16:	701a      	strb	r2, [r3, #0]
            printf("down clicked\r\n");
 8000c18:	480a      	ldr	r0, [pc, #40]	; (8000c44 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c1a:	f006 f9a3 	bl	8006f64 <puts>
        }
    }
}
 8000c1e:	e7ff      	b.n	8000c20 <HAL_GPIO_EXTI_Callback+0xc0>
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20001538 	.word	0x20001538
 8000c2c:	080080c8 	.word	0x080080c8
 8000c30:	48000800 	.word	0x48000800
 8000c34:	2000153c 	.word	0x2000153c
 8000c38:	080080d4 	.word	0x080080d4
 8000c3c:	080080e4 	.word	0x080080e4
 8000c40:	080080f0 	.word	0x080080f0
 8000c44:	08008100 	.word	0x08008100

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <displayPauseMenu>:

void displayMultiplayerIcon(void);
void displayBricksIcon(void);
void displaySpaceIcon(void);

void displayPauseMenu(uint8_t clear){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af04      	add	r7, sp, #16
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	uint16_t back_color = GREY;
 8000c5e:	f249 6396 	movw	r3, #38550	; 0x9696
 8000c62:	81fb      	strh	r3, [r7, #14]
	uint16_t continue_color = RED;
 8000c64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c68:	81bb      	strh	r3, [r7, #12]
	uint16_t triangle_color = WHITE;
 8000c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6e:	817b      	strh	r3, [r7, #10]
	if(choice != last_choice_pause || clear){
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <displayPauseMenu+0xbc>)
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <displayPauseMenu+0xc0>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d102      	bne.n	8000c82 <displayPauseMenu+0x2e>
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d042      	beq.n	8000d08 <displayPauseMenu+0xb4>
		last_choice_pause = choice;
 8000c82:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <displayPauseMenu+0xbc>)
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <displayPauseMenu+0xc0>)
 8000c88:	701a      	strb	r2, [r3, #0]
		if(choice == 0){
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <displayPauseMenu+0xbc>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d106      	bne.n	8000ca0 <displayPauseMenu+0x4c>
			back_color = RED;
 8000c92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c96:	81fb      	strh	r3, [r7, #14]
			continue_color = GREY;
 8000c98:	f249 6396 	movw	r3, #38550	; 0x9696
 8000c9c:	81bb      	strh	r3, [r7, #12]
 8000c9e:	e00b      	b.n	8000cb8 <displayPauseMenu+0x64>
		}
		else if(clear){
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d008      	beq.n	8000cb8 <displayPauseMenu+0x64>
			back_color = DARK_GREY;
 8000ca6:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8000caa:	81fb      	strh	r3, [r7, #14]
			continue_color = DARK_GREY;
 8000cac:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8000cb0:	81bb      	strh	r3, [r7, #12]
			triangle_color = DARK_GREY;
 8000cb2:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8000cb6:	817b      	strh	r3, [r7, #10]
		}
		Displ_FillArea(SCREEN_WIDTH * 2 - BUTTON_SIZE - 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, back_color);
 8000cb8:	89fb      	ldrh	r3, [r7, #14]
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2340      	movs	r3, #64	; 0x40
 8000cbe:	2240      	movs	r2, #64	; 0x40
 8000cc0:	2158      	movs	r1, #88	; 0x58
 8000cc2:	2054      	movs	r0, #84	; 0x54
 8000cc4:	f001 fe02 	bl	80028cc <Displ_FillArea>
		Displ_FillArea(SCREEN_WIDTH * 2 + 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, continue_color);
 8000cc8:	89bb      	ldrh	r3, [r7, #12]
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	2340      	movs	r3, #64	; 0x40
 8000cce:	2240      	movs	r2, #64	; 0x40
 8000cd0:	2158      	movs	r1, #88	; 0x58
 8000cd2:	20ac      	movs	r0, #172	; 0xac
 8000cd4:	f001 fdfa 	bl	80028cc <Displ_FillArea>

		Displ_fillTriangle(SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 + 20 + BUTTON_SIZE - 16, SCREEN_HEIGHT * 2, triangle_color);
 8000cd8:	897b      	ldrh	r3, [r7, #10]
 8000cda:	9302      	str	r3, [sp, #8]
 8000cdc:	2378      	movs	r3, #120	; 0x78
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	23e4      	movs	r3, #228	; 0xe4
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2390      	movs	r3, #144	; 0x90
 8000ce6:	22b4      	movs	r2, #180	; 0xb4
 8000ce8:	2160      	movs	r1, #96	; 0x60
 8000cea:	20b4      	movs	r0, #180	; 0xb4
 8000cec:	f002 f8ed 	bl	8002eca <Displ_fillTriangle>
		Displ_fillTriangle(SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 - 20 - BUTTON_SIZE + 16, SCREEN_HEIGHT * 2, triangle_color);
 8000cf0:	897b      	ldrh	r3, [r7, #10]
 8000cf2:	9302      	str	r3, [sp, #8]
 8000cf4:	2378      	movs	r3, #120	; 0x78
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	235c      	movs	r3, #92	; 0x5c
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2390      	movs	r3, #144	; 0x90
 8000cfe:	228c      	movs	r2, #140	; 0x8c
 8000d00:	2160      	movs	r1, #96	; 0x60
 8000d02:	208c      	movs	r0, #140	; 0x8c
 8000d04:	f002 f8e1 	bl	8002eca <Displ_fillTriangle>
	}

}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20001369 	.word	0x20001369
 8000d14:	20000000 	.word	0x20000000

08000d18 <displayMenu>:

void displayMenu(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af02      	add	r7, sp, #8
	int y_offset = 12;
 8000d1e:	230c      	movs	r3, #12
 8000d20:	60fb      	str	r3, [r7, #12]
	int x_offset = 12;
 8000d22:	230c      	movs	r3, #12
 8000d24:	60bb      	str	r3, [r7, #8]
	//box around
	if(choice != last_choice_menu){
 8000d26:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <displayMenu+0xc8>)
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	4b2e      	ldr	r3, [pc, #184]	; (8000de4 <displayMenu+0xcc>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d03d      	beq.n	8000dae <displayMenu+0x96>
		last_choice_menu =  choice;
 8000d32:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <displayMenu+0xc8>)
 8000d34:	781a      	ldrb	r2, [r3, #0]
 8000d36:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <displayMenu+0xcc>)
 8000d38:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	e02e      	b.n	8000d9e <displayMenu+0x86>
			if(i == choice){
 8000d40:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <displayMenu+0xc8>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d10b      	bne.n	8000d64 <displayMenu+0x4c>
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, RED);
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	b298      	uxth	r0, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	b299      	uxth	r1, r3
 8000d54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	2340      	movs	r3, #64	; 0x40
 8000d5c:	2240      	movs	r2, #64	; 0x40
 8000d5e:	f001 fdb5 	bl	80028cc <Displ_FillArea>
 8000d62:	e00a      	b.n	8000d7a <displayMenu+0x62>
			}else{
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, GREY);
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	b298      	uxth	r0, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	b299      	uxth	r1, r3
 8000d6c:	f249 6396 	movw	r3, #38550	; 0x9696
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2340      	movs	r3, #64	; 0x40
 8000d74:	2240      	movs	r2, #64	; 0x40
 8000d76:	f001 fda9 	bl	80028cc <Displ_FillArea>
			}if((i + 1)% 4 == 0){
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d105      	bne.n	8000d92 <displayMenu+0x7a>
				x_offset = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
				y_offset += BUTTON_SIZE + 12;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	334c      	adds	r3, #76	; 0x4c
 8000d8e:	60fb      	str	r3, [r7, #12]
				continue;
 8000d90:	e002      	b.n	8000d98 <displayMenu+0x80>
			}
			x_offset += BUTTON_SIZE + 12;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	334c      	adds	r3, #76	; 0x4c
 8000d96:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <displayMenu+0xd0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dc02      	bgt.n	8000dae <displayMenu+0x96>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b07      	cmp	r3, #7
 8000dac:	ddc8      	ble.n	8000d40 <displayMenu+0x28>
		}
	}
    displayMenuIcons();
 8000dae:	f000 f81d 	bl	8000dec <displayMenuIcons>
        for (int j = SCREEN_HEIGHT - 16; j < SCREEN_HEIGHT; j++){
            game_screen[i][j] = ENC_BLACK;
        }
    }
*/
    switch (choice) {
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <displayMenu+0xc8>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d006      	beq.n	8000dc8 <displayMenu+0xb0>
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	dc06      	bgt.n	8000dcc <displayMenu+0xb4>
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d006      	beq.n	8000dd0 <displayMenu+0xb8>
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d006      	beq.n	8000dd4 <displayMenu+0xbc>
        break;
    case 2:
        //displayText(game_screen,"Space Invaders", 2, SCREEN_HEIGHT - 16, WHITE);
        break;
    default:
        break;
 8000dc6:	e001      	b.n	8000dcc <displayMenu+0xb4>
        break;
 8000dc8:	bf00      	nop
 8000dca:	e004      	b.n	8000dd6 <displayMenu+0xbe>
        break;
 8000dcc:	bf00      	nop
 8000dce:	e002      	b.n	8000dd6 <displayMenu+0xbe>
        break;
 8000dd0:	bf00      	nop
 8000dd2:	e000      	b.n	8000dd6 <displayMenu+0xbe>
        break;
 8000dd4:	bf00      	nop
    }
}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20001369 	.word	0x20001369
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <displayMenuIcons>:

void displayMenuIcons(){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0

    // multiplayer
	displayMultiplayerIcon();
 8000df0:	f000 f806 	bl	8000e00 <displayMultiplayerIcon>

    // brick
	displayBricksIcon();
 8000df4:	f000 f868 	bl	8000ec8 <displayBricksIcon>

    //spaceinvaders
	displaySpaceIcon();
 8000df8:	f000 f890 	bl	8000f1c <displaySpaceIcon>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <displayMultiplayerIcon>:

void displayMultiplayerIcon(){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af02      	add	r7, sp, #8
	if(connected){
 8000e06:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <displayMultiplayerIcon+0xc4>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d023      	beq.n	8000e56 <displayMultiplayerIcon+0x56>
		Displ_FillArea(20, 20, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 8000e0e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2304      	movs	r3, #4
 8000e16:	2230      	movs	r2, #48	; 0x30
 8000e18:	2114      	movs	r1, #20
 8000e1a:	2014      	movs	r0, #20
 8000e1c:	f001 fd56 	bl	80028cc <Displ_FillArea>
		Displ_FillArea(20, 12, 4, 8, LIGHT_GREEN);
 8000e20:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2308      	movs	r3, #8
 8000e28:	2204      	movs	r2, #4
 8000e2a:	210c      	movs	r1, #12
 8000e2c:	2014      	movs	r0, #20
 8000e2e:	f001 fd4d 	bl	80028cc <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE, 12, 4, 8, LIGHT_GREEN);
 8000e32:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2308      	movs	r3, #8
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	210c      	movs	r1, #12
 8000e3e:	2040      	movs	r0, #64	; 0x40
 8000e40:	f001 fd44 	bl	80028cc <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE/2 + 8, 24, 8, BUTTON_SIZE - 24, LIGHT_GREEN);
 8000e44:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2328      	movs	r3, #40	; 0x28
 8000e4c:	2208      	movs	r2, #8
 8000e4e:	2118      	movs	r1, #24
 8000e50:	2028      	movs	r0, #40	; 0x28
 8000e52:	f001 fd3b 	bl	80028cc <Displ_FillArea>
	}
	Displ_FillArea(20, BUTTON_SIZE, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 8000e56:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	2230      	movs	r2, #48	; 0x30
 8000e60:	2140      	movs	r1, #64	; 0x40
 8000e62:	2014      	movs	r0, #20
 8000e64:	f001 fd32 	bl	80028cc <Displ_FillArea>
	Displ_FillArea(20, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8000e68:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2308      	movs	r3, #8
 8000e70:	2204      	movs	r2, #4
 8000e72:	2144      	movs	r1, #68	; 0x44
 8000e74:	2014      	movs	r0, #20
 8000e76:	f001 fd29 	bl	80028cc <Displ_FillArea>
	Displ_FillArea(BUTTON_SIZE, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8000e7a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2308      	movs	r3, #8
 8000e82:	2204      	movs	r2, #4
 8000e84:	2144      	movs	r1, #68	; 0x44
 8000e86:	2040      	movs	r0, #64	; 0x40
 8000e88:	f001 fd20 	bl	80028cc <Displ_FillArea>
	if(!connected){
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <displayMultiplayerIcon+0xc4>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d112      	bne.n	8000eba <displayMultiplayerIcon+0xba>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 8000e94:	2318      	movs	r3, #24
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	e00c      	b.n	8000eb4 <displayMultiplayerIcon+0xb4>
			Displ_FillArea(BUTTON_SIZE/2 + 8, k, 8, 4, LIGHT_GREEN);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	b299      	uxth	r1, r3
 8000e9e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	2028      	movs	r0, #40	; 0x28
 8000eaa:	f001 fd0f 	bl	80028cc <Displ_FillArea>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b3f      	cmp	r3, #63	; 0x3f
 8000eb8:	ddef      	ble.n	8000e9a <displayMultiplayerIcon+0x9a>
		}
	}
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000153d 	.word	0x2000153d

08000ec8 <displayBricksIcon>:

void displayBricksIcon(){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af02      	add	r7, sp, #8
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE, 20, 4, LIGHT_GREEN);
 8000ece:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	2214      	movs	r2, #20
 8000ed8:	2140      	movs	r1, #64	; 0x40
 8000eda:	2068      	movs	r0, #104	; 0x68
 8000edc:	f001 fcf6 	bl	80028cc <Displ_FillArea>
	Displ_FillArea(28+BUTTON_SIZE, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 8000ee0:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2340      	movs	r3, #64	; 0x40
 8000ee8:	2204      	movs	r2, #4
 8000eea:	210c      	movs	r1, #12
 8000eec:	205c      	movs	r0, #92	; 0x5c
 8000eee:	f001 fced 	bl	80028cc <Displ_FillArea>
	Displ_FillArea((8+BUTTON_SIZE)*2, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 8000ef2:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2340      	movs	r3, #64	; 0x40
 8000efa:	2204      	movs	r2, #4
 8000efc:	210c      	movs	r1, #12
 8000efe:	2090      	movs	r0, #144	; 0x90
 8000f00:	f001 fce4 	bl	80028cc <Displ_FillArea>
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE - 20, 4, 4, LIGHT_GREEN);
 8000f04:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	212c      	movs	r1, #44	; 0x2c
 8000f10:	2068      	movs	r0, #104	; 0x68
 8000f12:	f001 fcdb 	bl	80028cc <Displ_FillArea>
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <displaySpaceIcon>:

void displaySpaceIcon(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af02      	add	r7, sp, #8
	Displ_FillArea((BUTTON_SIZE+12)*3 - 48, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 8000f22:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2310      	movs	r3, #16
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	2134      	movs	r1, #52	; 0x34
 8000f2e:	20b4      	movs	r0, #180	; 0xb4
 8000f30:	f001 fccc 	bl	80028cc <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 32, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 8000f34:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	2134      	movs	r1, #52	; 0x34
 8000f40:	20c4      	movs	r0, #196	; 0xc4
 8000f42:	f001 fcc3 	bl	80028cc <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 44, BUTTON_SIZE -8, 12, 4, LIGHT_GREEN);
 8000f46:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	220c      	movs	r2, #12
 8000f50:	2138      	movs	r1, #56	; 0x38
 8000f52:	20b8      	movs	r0, #184	; 0xb8
 8000f54:	f001 fcba 	bl	80028cc <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 40, BUTTON_SIZE -16, 4, 16, LIGHT_GREEN);
 8000f58:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2310      	movs	r3, #16
 8000f60:	2204      	movs	r2, #4
 8000f62:	2130      	movs	r1, #48	; 0x30
 8000f64:	20bc      	movs	r0, #188	; 0xbc
 8000f66:	f001 fcb1 	bl	80028cc <Displ_FillArea>

	Displ_FillArea((BUTTON_SIZE+12)*3 - 36, BUTTON_SIZE -40, 12, 12, LIGHT_GREEN);
 8000f6a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	230c      	movs	r3, #12
 8000f72:	220c      	movs	r2, #12
 8000f74:	2118      	movs	r1, #24
 8000f76:	20c0      	movs	r0, #192	; 0xc0
 8000f78:	f001 fca8 	bl	80028cc <Displ_FillArea>
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <check_availability>:

uint8_t emulate = 1;
uint8_t connected = 0;


void check_availability(){
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
    //QD << "(mockup) is player 2 there?";  // change to uart debug
    if(emulate /*or answer was received */){
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <check_availability+0x1c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <check_availability+0x12>
        connected = 1;
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <check_availability+0x20>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
        // QD << "(mockup) player 2 connected";  // change to uart debug
    }
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	20000009 	.word	0x20000009
 8000fa4:	2000153d 	.word	0x2000153d

08000fa8 <toggle_multiplayer>:

void toggle_multiplayer(){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    if(connected){
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <toggle_multiplayer+0x1c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <toggle_multiplayer+0x14>
        //QD << "(mockup) stoping multiplayer";  // change to uart debug
        connected = 0;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <toggle_multiplayer+0x1c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
    }else{
        //QD << "(mockup) starting multiplayer";  // change to uart debug
        check_availability();
    }

}
 8000fba:	e001      	b.n	8000fc0 <toggle_multiplayer+0x18>
        check_availability();
 8000fbc:	f7ff ffe2 	bl	8000f84 <check_availability>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000153d 	.word	0x2000153d

08000fc8 <initSpaceInvaders>:
 * initialises ammo by clearing all values using initAmmo()
 * initialises comets by clearing all values using initComets()
 * initialises stars by clearing all values using initStars()
 *
 */
void initSpaceInvaders(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
    money = 0;
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <initSpaceInvaders+0x6c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
    lives = 3;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <initSpaceInvaders+0x70>)
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	701a      	strb	r2, [r3, #0]

    Displ_CLS(DARK_GREY);
 8000fd8:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8000fdc:	f001 fe28 	bl	8002c30 <Displ_CLS>
    // Seed the random number generator
    srand(HAL_GetTick());
 8000fe0:	f002 f954 	bl	800328c <HAL_GetTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f005 ffc4 	bl	8006f74 <srand>
    comet_delay = rand() % ((20 + 1) - 5) + 5;
 8000fec:	f005 fff0 	bl	8006fd0 <rand>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	425a      	negs	r2, r3
 8000ff4:	f003 030f 	and.w	r3, r3, #15
 8000ff8:	f002 020f 	and.w	r2, r2, #15
 8000ffc:	bf58      	it	pl
 8000ffe:	4253      	negpl	r3, r2
 8001000:	b2db      	uxtb	r3, r3
 8001002:	3305      	adds	r3, #5
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <initSpaceInvaders+0x74>)
 8001008:	701a      	strb	r2, [r3, #0]
    initSpaceShip();
 800100a:	f000 f81f 	bl	800104c <initSpaceShip>
    initAmmo(&ammo,0);
 800100e:	2100      	movs	r1, #0
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <initSpaceInvaders+0x78>)
 8001012:	f000 f827 	bl	8001064 <initAmmo>
    if(in_multiplayer){
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <initSpaceInvaders+0x7c>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <initSpaceInvaders+0x5e>
        initAmmo(&enemy_ammo,1);
 800101e:	2101      	movs	r1, #1
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <initSpaceInvaders+0x80>)
 8001022:	f000 f81f 	bl	8001064 <initAmmo>
    }
    initComets();
 8001026:	f000 f845 	bl	80010b4 <initComets>
    initStars();
 800102a:	f000 f86d 	bl	8001108 <initStars>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200015a4 	.word	0x200015a4
 8001038:	2000000a 	.word	0x2000000a
 800103c:	200015a8 	.word	0x200015a8
 8001040:	20001540 	.word	0x20001540
 8001044:	20000011 	.word	0x20000011
 8001048:	20001550 	.word	0x20001550

0800104c <initSpaceShip>:

void initSpaceShip(){
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
    SpaceShip.x = SCREEN_WIDTH/2;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <initSpaceShip+0x14>)
 8001052:	2228      	movs	r2, #40	; 0x28
 8001054:	701a      	strb	r2, [r3, #0]
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	2000000c 	.word	0x2000000c

08001064 <initAmmo>:

void initAmmo(bullets *am,int enemy){
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
    am->enemy = enemy;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b25a      	sxtb	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	701a      	strb	r2, [r3, #0]
    am->in_play=0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	705a      	strb	r2, [r3, #1]
    for (int i = 0;i<MAX_BULLETS;i++){
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	e00e      	b.n	80010a0 <initAmmo+0x3c>
        am->bullet_ar[i].x = -1;
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	22ff      	movs	r2, #255	; 0xff
 800108c:	709a      	strb	r2, [r3, #2]
        am->bullet_ar[i].y = -1;
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	22ff      	movs	r2, #255	; 0xff
 8001098:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_BULLETS;i++){
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3301      	adds	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	dded      	ble.n	8001082 <initAmmo+0x1e>
    }
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <initComets>:

void initComets(){
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
    Comet.in_play = 0;
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <initComets+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	e014      	b.n	80010f0 <initComets+0x3c>
        Comet.comet_ar[i].x = -1;
 80010c6:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <initComets+0x50>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	22ff      	movs	r2, #255	; 0xff
 80010d0:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[i].y = -1;
 80010d2:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <initComets+0x50>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	22ff      	movs	r2, #255	; 0xff
 80010dc:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[i].size = 2;
 80010de:	4a09      	ldr	r2, [pc, #36]	; (8001104 <initComets+0x50>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	2202      	movs	r2, #2
 80010e8:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_COMETS;i++){
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3301      	adds	r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b09      	cmp	r3, #9
 80010f4:	dde7      	ble.n	80010c6 <initComets+0x12>
    }
}
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	20001560 	.word	0x20001560

08001108 <initStars>:

void initStars(){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
    Star.in_play = 0;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <initStars+0x44>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	e00e      	b.n	8001138 <initStars+0x30>
        Star.star_ar[i].x = -1;
 800111a:	4a0c      	ldr	r2, [pc, #48]	; (800114c <initStars+0x44>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	22ff      	movs	r2, #255	; 0xff
 8001124:	705a      	strb	r2, [r3, #1]
        Star.star_ar[i].y = -1;
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <initStars+0x44>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	22ff      	movs	r2, #255	; 0xff
 8001130:	709a      	strb	r2, [r3, #2]
    for (int i = 0;i<MAX_COMETS;i++){
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3301      	adds	r3, #1
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b09      	cmp	r3, #9
 800113c:	dded      	ble.n	800111a <initStars+0x12>
    }
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	2000158c 	.word	0x2000158c

08001150 <spawnComet>:

void spawnComet(){
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 8001154:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <spawnComet+0x104>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d172      	bne.n	8001242 <spawnComet+0xf2>
 800115c:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <spawnComet+0x108>)
 800115e:	f993 3000 	ldrsb.w	r3, [r3]
 8001162:	2b09      	cmp	r3, #9
 8001164:	dc6d      	bgt.n	8001242 <spawnComet+0xf2>
        Comet.comet_ar[Comet.in_play].x = rand() % ((PLAYABLE_MAX - 1) - PLAYABLE_OFFSET) + PLAYABLE_OFFSET;
 8001166:	f005 ff33 	bl	8006fd0 <rand>
 800116a:	4601      	mov	r1, r0
 800116c:	4b3b      	ldr	r3, [pc, #236]	; (800125c <spawnComet+0x10c>)
 800116e:	fb83 2301 	smull	r2, r3, r3, r1
 8001172:	115a      	asrs	r2, r3, #5
 8001174:	17cb      	asrs	r3, r1, #31
 8001176:	1ad2      	subs	r2, r2, r3
 8001178:	4613      	mov	r3, r2
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	1aca      	subs	r2, r1, r3
 8001184:	b2d3      	uxtb	r3, r2
 8001186:	4a34      	ldr	r2, [pc, #208]	; (8001258 <spawnComet+0x108>)
 8001188:	f992 2000 	ldrsb.w	r2, [r2]
 800118c:	4610      	mov	r0, r2
 800118e:	3305      	adds	r3, #5
 8001190:	b2d9      	uxtb	r1, r3
 8001192:	4a31      	ldr	r2, [pc, #196]	; (8001258 <spawnComet+0x108>)
 8001194:	0083      	lsls	r3, r0, #2
 8001196:	4413      	add	r3, r2
 8001198:	460a      	mov	r2, r1
 800119a:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[Comet.in_play].y = 0;
 800119c:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <spawnComet+0x108>)
 800119e:	f993 3000 	ldrsb.w	r3, [r3]
 80011a2:	4a2d      	ldr	r2, [pc, #180]	; (8001258 <spawnComet+0x108>)
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	2200      	movs	r2, #0
 80011aa:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[Comet.in_play].size = rand() % ((MAX_COMET_SIZE + 1) - MIN_COMET_SIZE) + MIN_COMET_SIZE;
 80011ac:	f005 ff10 	bl	8006fd0 <rand>
 80011b0:	4602      	mov	r2, r0
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <spawnComet+0x110>)
 80011b4:	fb83 3102 	smull	r3, r1, r3, r2
 80011b8:	17d3      	asrs	r3, r2, #31
 80011ba:	1ac9      	subs	r1, r1, r3
 80011bc:	460b      	mov	r3, r1
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	440b      	add	r3, r1
 80011c2:	1ad1      	subs	r1, r2, r3
 80011c4:	b2cb      	uxtb	r3, r1
 80011c6:	3302      	adds	r3, #2
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <spawnComet+0x108>)
 80011cc:	f993 3000 	ldrsb.w	r3, [r3]
 80011d0:	b251      	sxtb	r1, r2
 80011d2:	4a21      	ldr	r2, [pc, #132]	; (8001258 <spawnComet+0x108>)
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	460a      	mov	r2, r1
 80011da:	70da      	strb	r2, [r3, #3]

        Comet.comet_ar[Comet.in_play].coins = 7 - Comet.comet_ar[Comet.in_play].size;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <spawnComet+0x108>)
 80011de:	f993 3000 	ldrsb.w	r3, [r3]
 80011e2:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <spawnComet+0x108>)
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <spawnComet+0x108>)
 80011f6:	f993 3000 	ldrsb.w	r3, [r3]
 80011fa:	b251      	sxtb	r1, r2
 80011fc:	4a16      	ldr	r2, [pc, #88]	; (8001258 <spawnComet+0x108>)
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	460a      	mov	r2, r1
 8001204:	711a      	strb	r2, [r3, #4]
        comet_delay = rand() % ((20 + 1) - 10) + 5;
 8001206:	f005 fee3 	bl	8006fd0 <rand>
 800120a:	4601      	mov	r1, r0
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <spawnComet+0x114>)
 800120e:	fb83 2301 	smull	r2, r3, r3, r1
 8001212:	105a      	asrs	r2, r3, #1
 8001214:	17cb      	asrs	r3, r1, #31
 8001216:	1ad2      	subs	r2, r2, r3
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	1aca      	subs	r2, r1, r3
 8001224:	b2d3      	uxtb	r3, r2
 8001226:	3305      	adds	r3, #5
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <spawnComet+0x104>)
 800122c:	701a      	strb	r2, [r3, #0]
        Comet.in_play++;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <spawnComet+0x108>)
 8001230:	f993 3000 	ldrsb.w	r3, [r3]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	3301      	adds	r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	b25a      	sxtb	r2, r3
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <spawnComet+0x108>)
 800123e:	701a      	strb	r2, [r3, #0]
 8001240:	e006      	b.n	8001250 <spawnComet+0x100>
    }else{
        comet_delay--;
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <spawnComet+0x104>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	3b01      	subs	r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b02      	ldr	r3, [pc, #8]	; (8001254 <spawnComet+0x104>)
 800124c:	701a      	strb	r2, [r3, #0]
    }

}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200015a8 	.word	0x200015a8
 8001258:	20001560 	.word	0x20001560
 800125c:	76b981db 	.word	0x76b981db
 8001260:	55555556 	.word	0x55555556
 8001264:	2e8ba2e9 	.word	0x2e8ba2e9

08001268 <spawnBullet>:

void spawnBullet(int enemy){
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
    int x_val = SpaceShip.x;
 8001270:	4b23      	ldr	r3, [pc, #140]	; (8001300 <spawnBullet+0x98>)
 8001272:	f993 3000 	ldrsb.w	r3, [r3]
 8001276:	60fb      	str	r3, [r7, #12]
    int y_val = SpaceShip.y - 3;
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <spawnBullet+0x98>)
 800127a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800127e:	3b03      	subs	r3, #3
 8001280:	617b      	str	r3, [r7, #20]
    bullets *am_p;
    if (enemy){
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <spawnBullet+0x26>
        am_p = &enemy_ammo;
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <spawnBullet+0x9c>)
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	e001      	b.n	8001292 <spawnBullet+0x2a>
    }else{
        am_p = &ammo;
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <spawnBullet+0xa0>)
 8001290:	613b      	str	r3, [r7, #16]
    }
    if(am_p->in_play < MAX_BULLETS && bullet_delay == 0){
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001298:	2b05      	cmp	r3, #5
 800129a:	dc2a      	bgt.n	80012f2 <spawnBullet+0x8a>
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <spawnBullet+0xa4>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d126      	bne.n	80012f2 <spawnBullet+0x8a>
        if(am_p->enemy){
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	f993 3000 	ldrsb.w	r3, [r3]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <spawnBullet+0x4a>
            //x_val = read the input from multiplayer;
            y_val = 3;
 80012ae:	2303      	movs	r3, #3
 80012b0:	617b      	str	r3, [r7, #20]
        }
        am_p->bullet_ar[am_p->in_play].x = x_val;
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	b251      	sxtb	r1, r2
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	460a      	mov	r2, r1
 80012c4:	709a      	strb	r2, [r3, #2]
        am_p->bullet_ar[am_p->in_play].y = y_val;
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	b251      	sxtb	r1, r2
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	460a      	mov	r2, r1
 80012d8:	70da      	strb	r2, [r3, #3]
        am_p->in_play++;
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	3301      	adds	r3, #1
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	b25a      	sxtb	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	705a      	strb	r2, [r3, #1]
        bullet_delay = MAX_DELAY_BULLETS;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <spawnBullet+0xa4>)
 80012ee:	220a      	movs	r2, #10
 80012f0:	701a      	strb	r2, [r3, #0]
    }
}
 80012f2:	bf00      	nop
 80012f4:	371c      	adds	r7, #28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000000c 	.word	0x2000000c
 8001304:	20001550 	.word	0x20001550
 8001308:	20001540 	.word	0x20001540
 800130c:	200015a1 	.word	0x200015a1

08001310 <spawnStar>:

void spawnStar(){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <spawnStar+0xac>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d145      	bne.n	80013a8 <spawnStar+0x98>
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <spawnStar+0xb0>)
 800131e:	f993 3000 	ldrsb.w	r3, [r3]
 8001322:	2b09      	cmp	r3, #9
 8001324:	dc40      	bgt.n	80013a8 <spawnStar+0x98>
        Star.star_ar[Star.in_play].x = rand() % ((PLAYABLE_MAX - 1) - PLAYABLE_OFFSET) + PLAYABLE_OFFSET;
 8001326:	f005 fe53 	bl	8006fd0 <rand>
 800132a:	4601      	mov	r1, r0
 800132c:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <spawnStar+0xb4>)
 800132e:	fb83 2301 	smull	r2, r3, r3, r1
 8001332:	115a      	asrs	r2, r3, #5
 8001334:	17cb      	asrs	r3, r1, #31
 8001336:	1ad2      	subs	r2, r2, r3
 8001338:	4613      	mov	r3, r2
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	1aca      	subs	r2, r1, r3
 8001344:	b2d3      	uxtb	r3, r2
 8001346:	3305      	adds	r3, #5
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <spawnStar+0xb0>)
 800134c:	f993 3000 	ldrsb.w	r3, [r3]
 8001350:	b251      	sxtb	r1, r2
 8001352:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <spawnStar+0xb0>)
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	460a      	mov	r2, r1
 800135a:	705a      	strb	r2, [r3, #1]
        Star.star_ar[Star.in_play].y = 0;
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <spawnStar+0xb0>)
 800135e:	f993 3000 	ldrsb.w	r3, [r3]
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <spawnStar+0xb0>)
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	2200      	movs	r2, #0
 800136a:	709a      	strb	r2, [r3, #2]
        star_delay = rand() % ((20 + 1) - 10) + 5;
 800136c:	f005 fe30 	bl	8006fd0 <rand>
 8001370:	4601      	mov	r1, r0
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <spawnStar+0xb8>)
 8001374:	fb83 2301 	smull	r2, r3, r3, r1
 8001378:	105a      	asrs	r2, r3, #1
 800137a:	17cb      	asrs	r3, r1, #31
 800137c:	1ad2      	subs	r2, r2, r3
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	1aca      	subs	r2, r1, r3
 800138a:	b2d3      	uxtb	r3, r2
 800138c:	3305      	adds	r3, #5
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <spawnStar+0xac>)
 8001392:	701a      	strb	r2, [r3, #0]
        Star.in_play++;
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <spawnStar+0xb0>)
 8001396:	f993 3000 	ldrsb.w	r3, [r3]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	3301      	adds	r3, #1
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	b25a      	sxtb	r2, r3
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <spawnStar+0xb0>)
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	e006      	b.n	80013b6 <spawnStar+0xa6>
    }else{
        star_delay--;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <spawnStar+0xac>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <spawnStar+0xac>)
 80013b2:	701a      	strb	r2, [r3, #0]
    }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200015a9 	.word	0x200015a9
 80013c0:	2000158c 	.word	0x2000158c
 80013c4:	76b981db 	.word	0x76b981db
 80013c8:	2e8ba2e9 	.word	0x2e8ba2e9

080013cc <moveBullets>:

void moveBullets(){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
	displayAmmo(DARK_GREY);
 80013d2:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80013d6:	f000 fc37 	bl	8001c48 <displayAmmo>
	for(int i = 0; i < ammo.in_play; i++){
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	e09c      	b.n	800151a <moveBullets+0x14e>
		for (int j = 0; j < Comet.in_play; j++){
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	e040      	b.n	8001468 <moveBullets+0x9c>
			if(ammo.bullet_ar[i].x >= Comet.comet_ar[j].x && ammo.bullet_ar[i].x < Comet.comet_ar[j].x + Comet.comet_ar[j].size){
 80013e6:	4a55      	ldr	r2, [pc, #340]	; (800153c <moveBullets+0x170>)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80013f2:	4619      	mov	r1, r3
 80013f4:	4a52      	ldr	r2, [pc, #328]	; (8001540 <moveBullets+0x174>)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	785b      	ldrb	r3, [r3, #1]
 80013fe:	4299      	cmp	r1, r3
 8001400:	db2f      	blt.n	8001462 <moveBullets+0x96>
 8001402:	4a4e      	ldr	r2, [pc, #312]	; (800153c <moveBullets+0x170>)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800140e:	4619      	mov	r1, r3
 8001410:	4a4b      	ldr	r2, [pc, #300]	; (8001540 <moveBullets+0x174>)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	4618      	mov	r0, r3
 800141c:	4a48      	ldr	r2, [pc, #288]	; (8001540 <moveBullets+0x174>)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001428:	4403      	add	r3, r0
 800142a:	4299      	cmp	r1, r3
 800142c:	da19      	bge.n	8001462 <moveBullets+0x96>
				if (ammo.bullet_ar[i].y <= Comet.comet_ar[j].y + Comet.comet_ar[j].size - 1){
 800142e:	4a44      	ldr	r2, [pc, #272]	; (8001540 <moveBullets+0x174>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	789b      	ldrb	r3, [r3, #2]
 8001438:	4619      	mov	r1, r3
 800143a:	4a41      	ldr	r2, [pc, #260]	; (8001540 <moveBullets+0x174>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001446:	18ca      	adds	r2, r1, r3
 8001448:	493c      	ldr	r1, [pc, #240]	; (800153c <moveBullets+0x170>)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	440b      	add	r3, r1
 8001450:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001454:	429a      	cmp	r2, r3
 8001456:	dd04      	ble.n	8001462 <moveBullets+0x96>
					//QD << "hit a comet";
					hitComet(i,j);
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 fb20 	bl	8001aa0 <hitComet>
					continue;
 8001460:	bf00      	nop
		for (int j = 0; j < Comet.in_play; j++){
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	3301      	adds	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	4b35      	ldr	r3, [pc, #212]	; (8001540 <moveBullets+0x174>)
 800146a:	f993 3000 	ldrsb.w	r3, [r3]
 800146e:	461a      	mov	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4293      	cmp	r3, r2
 8001474:	dbb7      	blt.n	80013e6 <moveBullets+0x1a>
				}
			}

		}
		ammo.bullet_ar[i].y--;
 8001476:	4a31      	ldr	r2, [pc, #196]	; (800153c <moveBullets+0x170>)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	3b01      	subs	r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	b259      	sxtb	r1, r3
 800148a:	4a2c      	ldr	r2, [pc, #176]	; (800153c <moveBullets+0x170>)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	460a      	mov	r2, r1
 8001494:	70da      	strb	r2, [r3, #3]
		if (ammo.bullet_ar[i].y < 0){
 8001496:	4a29      	ldr	r2, [pc, #164]	; (800153c <moveBullets+0x170>)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	da36      	bge.n	8001514 <moveBullets+0x148>
			send_Bullet(ammo.bullet_ar[i]);
 80014a6:	4a25      	ldr	r2, [pc, #148]	; (800153c <moveBullets+0x170>)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	885a      	ldrh	r2, [r3, #2]
 80014b0:	2300      	movs	r3, #0
 80014b2:	f362 030f 	bfi	r3, r2, #0, #16
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fd6e 	bl	8001f98 <send_Bullet>
			for(int j = i; j < MAX_BULLETS - 1; j++){
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	e01c      	b.n	80014fc <moveBullets+0x130>
				ammo.bullet_ar[j].x = ammo.bullet_ar[j+1].x;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a1d      	ldr	r2, [pc, #116]	; (800153c <moveBullets+0x170>)
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80014d0:	4a1a      	ldr	r2, [pc, #104]	; (800153c <moveBullets+0x170>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	460a      	mov	r2, r1
 80014da:	709a      	strb	r2, [r3, #2]
				ammo.bullet_ar[j].y = ammo.bullet_ar[j+1].y;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a16      	ldr	r2, [pc, #88]	; (800153c <moveBullets+0x170>)
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80014ea:	4a14      	ldr	r2, [pc, #80]	; (800153c <moveBullets+0x170>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	460a      	mov	r2, r1
 80014f4:	70da      	strb	r2, [r3, #3]
			for(int j = i; j < MAX_BULLETS - 1; j++){
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3301      	adds	r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b04      	cmp	r3, #4
 8001500:	dddf      	ble.n	80014c2 <moveBullets+0xf6>
			}
			ammo.in_play--;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <moveBullets+0x170>)
 8001504:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	3b01      	subs	r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	b25a      	sxtb	r2, r3
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <moveBullets+0x170>)
 8001512:	705a      	strb	r2, [r3, #1]
	for(int i = 0; i < ammo.in_play; i++){
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3301      	adds	r3, #1
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <moveBullets+0x170>)
 800151c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001520:	461a      	mov	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4293      	cmp	r3, r2
 8001526:	f6ff af5b 	blt.w	80013e0 <moveBullets+0x14>
		}
	}
	displayAmmo(RED);
 800152a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800152e:	f000 fb8b 	bl	8001c48 <displayAmmo>
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20001540 	.word	0x20001540
 8001540:	20001560 	.word	0x20001560

08001544 <moveEnemyBullets>:

void moveEnemyBullets(void){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
    if (!in_multiplayer){
 800154a:	4b5e      	ldr	r3, [pc, #376]	; (80016c4 <moveEnemyBullets+0x180>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 80b4 	beq.w	80016bc <moveEnemyBullets+0x178>
        //QD << "not multiplayer";  // change to uart debug
        return;
    }
    displayAmmo(DARK_GREY);
 8001554:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8001558:	f000 fb76 	bl	8001c48 <displayAmmo>
    for(int i = 0; i < enemy_ammo.in_play; i++){
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e09f      	b.n	80016a2 <moveEnemyBullets+0x15e>
        if(enemy_ammo.bullet_ar[i].x <= SpaceShip.x + SPACESHIP_WIDTH / 2 && enemy_ammo.bullet_ar[i].x >= SpaceShip.x - SPACESHIP_WIDTH / 2){
 8001562:	4a59      	ldr	r2, [pc, #356]	; (80016c8 <moveEnemyBullets+0x184>)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800156e:	461a      	mov	r2, r3
 8001570:	4b56      	ldr	r3, [pc, #344]	; (80016cc <moveEnemyBullets+0x188>)
 8001572:	f993 3000 	ldrsb.w	r3, [r3]
 8001576:	3302      	adds	r3, #2
 8001578:	429a      	cmp	r2, r3
 800157a:	dc4b      	bgt.n	8001614 <moveEnemyBullets+0xd0>
 800157c:	4a52      	ldr	r2, [pc, #328]	; (80016c8 <moveEnemyBullets+0x184>)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001588:	461a      	mov	r2, r3
 800158a:	4b50      	ldr	r3, [pc, #320]	; (80016cc <moveEnemyBullets+0x188>)
 800158c:	f993 3000 	ldrsb.w	r3, [r3]
 8001590:	3b02      	subs	r3, #2
 8001592:	429a      	cmp	r2, r3
 8001594:	db3e      	blt.n	8001614 <moveEnemyBullets+0xd0>
            if (enemy_ammo.bullet_ar[i].y >= SpaceShip.y - SPACESHIP_HEIGHT / 2 && hit == 0){
 8001596:	4a4c      	ldr	r2, [pc, #304]	; (80016c8 <moveEnemyBullets+0x184>)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b49      	ldr	r3, [pc, #292]	; (80016cc <moveEnemyBullets+0x188>)
 80015a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80015aa:	3b02      	subs	r3, #2
 80015ac:	429a      	cmp	r2, r3
 80015ae:	db31      	blt.n	8001614 <moveEnemyBullets+0xd0>
 80015b0:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <moveEnemyBullets+0x18c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d12d      	bne.n	8001614 <moveEnemyBullets+0xd0>
                beenHit();
 80015b8:	f000 fcce 	bl	8001f58 <beenHit>
                for(int j = i; j < MAX_BULLETS - 1; j++){
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	e01c      	b.n	80015fc <moveEnemyBullets+0xb8>
                    enemy_ammo.bullet_ar[j].x = enemy_ammo.bullet_ar[j+1].x;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3301      	adds	r3, #1
 80015c6:	4a40      	ldr	r2, [pc, #256]	; (80016c8 <moveEnemyBullets+0x184>)
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80015d0:	4a3d      	ldr	r2, [pc, #244]	; (80016c8 <moveEnemyBullets+0x184>)
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	460a      	mov	r2, r1
 80015da:	709a      	strb	r2, [r3, #2]
                    enemy_ammo.bullet_ar[j].y = enemy_ammo.bullet_ar[j+1].y;
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	3301      	adds	r3, #1
 80015e0:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <moveEnemyBullets+0x184>)
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80015ea:	4a37      	ldr	r2, [pc, #220]	; (80016c8 <moveEnemyBullets+0x184>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	460a      	mov	r2, r1
 80015f4:	70da      	strb	r2, [r3, #3]
                for(int j = i; j < MAX_BULLETS - 1; j++){
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3301      	adds	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b04      	cmp	r3, #4
 8001600:	dddf      	ble.n	80015c2 <moveEnemyBullets+0x7e>
                }
                enemy_ammo.in_play--;
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <moveEnemyBullets+0x184>)
 8001604:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	3b01      	subs	r3, #1
 800160c:	b2db      	uxtb	r3, r3
 800160e:	b25a      	sxtb	r2, r3
 8001610:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <moveEnemyBullets+0x184>)
 8001612:	705a      	strb	r2, [r3, #1]
            }
        }
        enemy_ammo.bullet_ar[i].y++;
 8001614:	4a2c      	ldr	r2, [pc, #176]	; (80016c8 <moveEnemyBullets+0x184>)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	3301      	adds	r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	b259      	sxtb	r1, r3
 8001628:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <moveEnemyBullets+0x184>)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	460a      	mov	r2, r1
 8001632:	70da      	strb	r2, [r3, #3]
        if (enemy_ammo.bullet_ar[i].y > SCREEN_HEIGHT - 1){
 8001634:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <moveEnemyBullets+0x184>)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001640:	2b3b      	cmp	r3, #59	; 0x3b
 8001642:	dd2b      	ble.n	800169c <moveEnemyBullets+0x158>
            for(int j = i; j < MAX_BULLETS - 1; j++){
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	e01c      	b.n	8001684 <moveEnemyBullets+0x140>
                enemy_ammo.bullet_ar[j].x = enemy_ammo.bullet_ar[j+1].x;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3301      	adds	r3, #1
 800164e:	4a1e      	ldr	r2, [pc, #120]	; (80016c8 <moveEnemyBullets+0x184>)
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <moveEnemyBullets+0x184>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	460a      	mov	r2, r1
 8001662:	709a      	strb	r2, [r3, #2]
                enemy_ammo.bullet_ar[j].y = enemy_ammo.bullet_ar[j+1].y;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3301      	adds	r3, #1
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <moveEnemyBullets+0x184>)
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8001672:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <moveEnemyBullets+0x184>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	460a      	mov	r2, r1
 800167c:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_BULLETS - 1; j++){
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3301      	adds	r3, #1
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b04      	cmp	r3, #4
 8001688:	dddf      	ble.n	800164a <moveEnemyBullets+0x106>
            }
            enemy_ammo.in_play--;
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <moveEnemyBullets+0x184>)
 800168c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	3b01      	subs	r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	b25a      	sxtb	r2, r3
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <moveEnemyBullets+0x184>)
 800169a:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < enemy_ammo.in_play; i++){
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <moveEnemyBullets+0x184>)
 80016a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80016a8:	461a      	mov	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4293      	cmp	r3, r2
 80016ae:	f6ff af58 	blt.w	8001562 <moveEnemyBullets+0x1e>
        }
    }
    displayAmmo(LIGHT_BLUE);
 80016b2:	f24f 70db 	movw	r0, #63451	; 0xf7db
 80016b6:	f000 fac7 	bl	8001c48 <displayAmmo>
 80016ba:	e000      	b.n	80016be <moveEnemyBullets+0x17a>
        return;
 80016bc:	bf00      	nop
}
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000011 	.word	0x20000011
 80016c8:	20001550 	.word	0x20001550
 80016cc:	2000000c 	.word	0x2000000c
 80016d0:	20001368 	.word	0x20001368

080016d4 <moveComets>:

void moveComets(){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
	displayComets(DARK_GREY);
 80016da:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80016de:	f000 fb11 	bl	8001d04 <displayComets>
	for (int i = 0; i<Comet.in_play; i++){
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	e0f2      	b.n	80018ce <moveComets+0x1fa>
		for(int j = 0; j < Comet.comet_ar[i].size; j++){
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	e05f      	b.n	80017ae <moveComets+0xda>
			if(Comet.comet_ar[i].x + j <= SpaceShip.x + SPACESHIP_WIDTH / 2 && Comet.comet_ar[i].x + j >= SpaceShip.x - SPACESHIP_WIDTH / 2){
 80016ee:	4a80      	ldr	r2, [pc, #512]	; (80018f0 <moveComets+0x21c>)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	785b      	ldrb	r3, [r3, #1]
 80016f8:	461a      	mov	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	441a      	add	r2, r3
 80016fe:	4b7d      	ldr	r3, [pc, #500]	; (80018f4 <moveComets+0x220>)
 8001700:	f993 3000 	ldrsb.w	r3, [r3]
 8001704:	3302      	adds	r3, #2
 8001706:	429a      	cmp	r2, r3
 8001708:	dc4e      	bgt.n	80017a8 <moveComets+0xd4>
 800170a:	4a79      	ldr	r2, [pc, #484]	; (80018f0 <moveComets+0x21c>)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	785b      	ldrb	r3, [r3, #1]
 8001714:	461a      	mov	r2, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	441a      	add	r2, r3
 800171a:	4b76      	ldr	r3, [pc, #472]	; (80018f4 <moveComets+0x220>)
 800171c:	f993 3000 	ldrsb.w	r3, [r3]
 8001720:	3b02      	subs	r3, #2
 8001722:	429a      	cmp	r2, r3
 8001724:	db40      	blt.n	80017a8 <moveComets+0xd4>
				if(powerUp == 2 && Comet.comet_ar[i].y + Comet.comet_ar[i].size - 1 >= SpaceShip.y - SPACESHIP_HEIGHT / 2){
 8001726:	4b74      	ldr	r3, [pc, #464]	; (80018f8 <moveComets+0x224>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d11e      	bne.n	800176c <moveComets+0x98>
 800172e:	4a70      	ldr	r2, [pc, #448]	; (80018f0 <moveComets+0x21c>)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	789b      	ldrb	r3, [r3, #2]
 8001738:	4619      	mov	r1, r3
 800173a:	4a6d      	ldr	r2, [pc, #436]	; (80018f0 <moveComets+0x21c>)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001746:	18ca      	adds	r2, r1, r3
 8001748:	4b6a      	ldr	r3, [pc, #424]	; (80018f4 <moveComets+0x220>)
 800174a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800174e:	3b01      	subs	r3, #1
 8001750:	429a      	cmp	r2, r3
 8001752:	db0b      	blt.n	800176c <moveComets+0x98>
					hitComet(420,i);
 8001754:	68f9      	ldr	r1, [r7, #12]
 8001756:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800175a:	f000 f9a1 	bl	8001aa0 <hitComet>
					displayPowerup(DARK_GREY);
 800175e:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8001762:	f000 fcaf 	bl	80020c4 <displayPowerup>
					powerUp = 0;
 8001766:	4b64      	ldr	r3, [pc, #400]	; (80018f8 <moveComets+0x224>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
				}
                if (Comet.comet_ar[i].y + Comet.comet_ar[i].size - 1 >= SpaceShip.y - SPACESHIP_HEIGHT / 2 && hit == 0){
 800176c:	4a60      	ldr	r2, [pc, #384]	; (80018f0 <moveComets+0x21c>)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	789b      	ldrb	r3, [r3, #2]
 8001776:	4619      	mov	r1, r3
 8001778:	4a5d      	ldr	r2, [pc, #372]	; (80018f0 <moveComets+0x21c>)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001784:	18ca      	adds	r2, r1, r3
 8001786:	4b5b      	ldr	r3, [pc, #364]	; (80018f4 <moveComets+0x220>)
 8001788:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800178c:	3b01      	subs	r3, #1
 800178e:	429a      	cmp	r2, r3
 8001790:	db0a      	blt.n	80017a8 <moveComets+0xd4>
 8001792:	4b5a      	ldr	r3, [pc, #360]	; (80018fc <moveComets+0x228>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d106      	bne.n	80017a8 <moveComets+0xd4>
                    hitComet(420,i);
 800179a:	68f9      	ldr	r1, [r7, #12]
 800179c:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80017a0:	f000 f97e 	bl	8001aa0 <hitComet>
                    beenHit();
 80017a4:	f000 fbd8 	bl	8001f58 <beenHit>
		for(int j = 0; j < Comet.comet_ar[i].size; j++){
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	3301      	adds	r3, #1
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4a50      	ldr	r2, [pc, #320]	; (80018f0 <moveComets+0x21c>)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80017ba:	461a      	mov	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4293      	cmp	r3, r2
 80017c0:	db95      	blt.n	80016ee <moveComets+0x1a>
                }
            }
        }
        if(powerUp == 1 && SpaceShip.x >= Comet.comet_ar[i].x && SpaceShip.x <= Comet.comet_ar[i].x + Comet.comet_ar[i].size){
 80017c2:	4b4d      	ldr	r3, [pc, #308]	; (80018f8 <moveComets+0x224>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d133      	bne.n	8001832 <moveComets+0x15e>
 80017ca:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <moveComets+0x220>)
 80017cc:	f993 3000 	ldrsb.w	r3, [r3]
 80017d0:	4619      	mov	r1, r3
 80017d2:	4a47      	ldr	r2, [pc, #284]	; (80018f0 <moveComets+0x21c>)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	785b      	ldrb	r3, [r3, #1]
 80017dc:	4299      	cmp	r1, r3
 80017de:	db28      	blt.n	8001832 <moveComets+0x15e>
 80017e0:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <moveComets+0x220>)
 80017e2:	f993 3000 	ldrsb.w	r3, [r3]
 80017e6:	4619      	mov	r1, r3
 80017e8:	4a41      	ldr	r2, [pc, #260]	; (80018f0 <moveComets+0x21c>)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	785b      	ldrb	r3, [r3, #1]
 80017f2:	4618      	mov	r0, r3
 80017f4:	4a3e      	ldr	r2, [pc, #248]	; (80018f0 <moveComets+0x21c>)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001800:	4403      	add	r3, r0
 8001802:	4299      	cmp	r1, r3
 8001804:	dc15      	bgt.n	8001832 <moveComets+0x15e>
        	hitComet(420,i);
 8001806:	68f9      	ldr	r1, [r7, #12]
 8001808:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800180c:	f000 f948 	bl	8001aa0 <hitComet>
        	if(powerUp_delay == 0){
 8001810:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <moveComets+0x22c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d106      	bne.n	8001826 <moveComets+0x152>
        		displayPowerup(DARK_GREY);
 8001818:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800181c:	f000 fc52 	bl	80020c4 <displayPowerup>
        		powerUp = 0;
 8001820:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <moveComets+0x224>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]

        	}
        	powerUp_delay--;
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <moveComets+0x22c>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	3b01      	subs	r3, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b34      	ldr	r3, [pc, #208]	; (8001900 <moveComets+0x22c>)
 8001830:	701a      	strb	r2, [r3, #0]
        }
        Comet.comet_ar[i].y++;
 8001832:	4a2f      	ldr	r2, [pc, #188]	; (80018f0 <moveComets+0x21c>)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	789b      	ldrb	r3, [r3, #2]
 800183c:	3301      	adds	r3, #1
 800183e:	b2d9      	uxtb	r1, r3
 8001840:	4a2b      	ldr	r2, [pc, #172]	; (80018f0 <moveComets+0x21c>)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	460a      	mov	r2, r1
 800184a:	709a      	strb	r2, [r3, #2]
        if (Comet.comet_ar[i].y > SCREEN_HEIGHT - 1){
 800184c:	4a28      	ldr	r2, [pc, #160]	; (80018f0 <moveComets+0x21c>)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	789b      	ldrb	r3, [r3, #2]
 8001856:	2b3b      	cmp	r3, #59	; 0x3b
 8001858:	d936      	bls.n	80018c8 <moveComets+0x1f4>
            for(int j = i; j < MAX_COMETS - 1; j++){
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	e027      	b.n	80018b0 <moveComets+0x1dc>
                Comet.comet_ar[j].x = Comet.comet_ar[j+1].x;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3301      	adds	r3, #1
 8001864:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <moveComets+0x21c>)
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	7859      	ldrb	r1, [r3, #1]
 800186c:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <moveComets+0x21c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	460a      	mov	r2, r1
 8001876:	705a      	strb	r2, [r3, #1]
                Comet.comet_ar[j].y = Comet.comet_ar[j+1].y;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3301      	adds	r3, #1
 800187c:	4a1c      	ldr	r2, [pc, #112]	; (80018f0 <moveComets+0x21c>)
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	7899      	ldrb	r1, [r3, #2]
 8001884:	4a1a      	ldr	r2, [pc, #104]	; (80018f0 <moveComets+0x21c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	460a      	mov	r2, r1
 800188e:	709a      	strb	r2, [r3, #2]
                Comet.comet_ar[j].size = Comet.comet_ar[j+1].size;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3301      	adds	r3, #1
 8001894:	4a16      	ldr	r2, [pc, #88]	; (80018f0 <moveComets+0x21c>)
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	f993 1003 	ldrsb.w	r1, [r3, #3]
 800189e:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <moveComets+0x21c>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	460a      	mov	r2, r1
 80018a8:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_COMETS - 1; j++){
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3301      	adds	r3, #1
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	ddd4      	ble.n	8001860 <moveComets+0x18c>
            }
            Comet.in_play--;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <moveComets+0x21c>)
 80018b8:	f993 3000 	ldrsb.w	r3, [r3]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	3b01      	subs	r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	b25a      	sxtb	r2, r3
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <moveComets+0x21c>)
 80018c6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<Comet.in_play; i++){
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	3301      	adds	r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <moveComets+0x21c>)
 80018d0:	f993 3000 	ldrsb.w	r3, [r3]
 80018d4:	461a      	mov	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4293      	cmp	r3, r2
 80018da:	f6ff af05 	blt.w	80016e8 <moveComets+0x14>
        }
    }
    displayComets(GREY);
 80018de:	f249 6096 	movw	r0, #38550	; 0x9696
 80018e2:	f000 fa0f 	bl	8001d04 <displayComets>
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20001560 	.word	0x20001560
 80018f4:	2000000c 	.word	0x2000000c
 80018f8:	200015aa 	.word	0x200015aa
 80018fc:	20001368 	.word	0x20001368
 8001900:	200015ab 	.word	0x200015ab

08001904 <moveStars>:

void moveStars(){
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
	displayStars(DARK_GREY);
 800190a:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800190e:	f000 f969 	bl	8001be4 <displayStars>
    for (int i = 0; i<Star.in_play; i++){
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	e046      	b.n	80019a6 <moveStars+0xa2>
        Star.star_ar[i].y++;
 8001918:	4a2a      	ldr	r2, [pc, #168]	; (80019c4 <moveStars+0xc0>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	3301      	adds	r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	b259      	sxtb	r1, r3
 800192c:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <moveStars+0xc0>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	460a      	mov	r2, r1
 8001936:	709a      	strb	r2, [r3, #2]
        if (Star.star_ar[i].y > SCREEN_HEIGHT - 4){
 8001938:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <moveStars+0xc0>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001944:	2b38      	cmp	r3, #56	; 0x38
 8001946:	dd2b      	ble.n	80019a0 <moveStars+0x9c>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	e01c      	b.n	8001988 <moveStars+0x84>
                Star.star_ar[j].x = Star.star_ar[j+1].x;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	4a1c      	ldr	r2, [pc, #112]	; (80019c4 <moveStars+0xc0>)
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	f993 1001 	ldrsb.w	r1, [r3, #1]
 800195c:	4a19      	ldr	r2, [pc, #100]	; (80019c4 <moveStars+0xc0>)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	460a      	mov	r2, r1
 8001966:	705a      	strb	r2, [r3, #1]
                Star.star_ar[j].y = Star.star_ar[j+1].y;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	3301      	adds	r3, #1
 800196c:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <moveStars+0xc0>)
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001976:	4a13      	ldr	r2, [pc, #76]	; (80019c4 <moveStars+0xc0>)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	460a      	mov	r2, r1
 8001980:	709a      	strb	r2, [r3, #2]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2b08      	cmp	r3, #8
 800198c:	dddf      	ble.n	800194e <moveStars+0x4a>
            }
            Star.in_play--;
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <moveStars+0xc0>)
 8001990:	f993 3000 	ldrsb.w	r3, [r3]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	b25a      	sxtb	r2, r3
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <moveStars+0xc0>)
 800199e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Star.in_play; i++){
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3301      	adds	r3, #1
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <moveStars+0xc0>)
 80019a8:	f993 3000 	ldrsb.w	r3, [r3]
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4293      	cmp	r3, r2
 80019b2:	dbb1      	blt.n	8001918 <moveStars+0x14>
        }
    }
    displayStars(YELLOW);
 80019b4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80019b8:	f000 f914 	bl	8001be4 <displayStars>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	2000158c 	.word	0x2000158c

080019c8 <moveSpaceship>:

void moveSpaceship(int direction){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	displaySpaceShip(DARK_GREY);
 80019d0:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80019d4:	f000 f9d6 	bl	8001d84 <displaySpaceShip>
	if(powerUp > 0){
 80019d8:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <moveSpaceship+0xcc>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <moveSpaceship+0x20>
		displayPowerup(DARK_GREY);
 80019e0:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80019e4:	f000 fb6e 	bl	80020c4 <displayPowerup>
	}
    if(direction < 0){
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	da26      	bge.n	8001a3c <moveSpaceship+0x74>
        SpaceShip.x--;
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <moveSpaceship+0xd0>)
 80019f0:	f993 3000 	ldrsb.w	r3, [r3]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	b25a      	sxtb	r2, r3
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <moveSpaceship+0xd0>)
 80019fe:	701a      	strb	r2, [r3, #0]
        if(SpaceShip.x < SPACESHIP_WIDTH/2) {
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <moveSpaceship+0xd0>)
 8001a02:	f993 3000 	ldrsb.w	r3, [r3]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	dc02      	bgt.n	8001a10 <moveSpaceship+0x48>
        	SpaceShip.x = (SPACESHIP_WIDTH/2);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <moveSpaceship+0xd0>)
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	701a      	strb	r2, [r3, #0]
        }
        displaySpaceShip(spaceshipCurrentColor);
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <moveSpaceship+0xd4>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f9b5 	bl	8001d84 <displaySpaceShip>
        if(powerUp == 1){
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <moveSpaceship+0xcc>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d103      	bne.n	8001a2a <moveSpaceship+0x62>
        	displayPowerup(RED);
 8001a22:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001a26:	f000 fb4d 	bl	80020c4 <displayPowerup>
        }
        if(powerUp == 2){
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <moveSpaceship+0xcc>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d12b      	bne.n	8001a8a <moveSpaceship+0xc2>
        	displayPowerup(LIGHT_BLUE);
 8001a32:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8001a36:	f000 fb45 	bl	80020c4 <displayPowerup>
        }
        return;
 8001a3a:	e026      	b.n	8001a8a <moveSpaceship+0xc2>
    }
    SpaceShip.x++;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <moveSpaceship+0xd0>)
 8001a3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	3301      	adds	r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	b25a      	sxtb	r2, r3
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <moveSpaceship+0xd0>)
 8001a4c:	701a      	strb	r2, [r3, #0]
    if(SpaceShip.x > SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1) {
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <moveSpaceship+0xd0>)
 8001a50:	f993 3000 	ldrsb.w	r3, [r3]
 8001a54:	2b4d      	cmp	r3, #77	; 0x4d
 8001a56:	dd02      	ble.n	8001a5e <moveSpaceship+0x96>
    	SpaceShip.x = SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <moveSpaceship+0xd0>)
 8001a5a:	224d      	movs	r2, #77	; 0x4d
 8001a5c:	701a      	strb	r2, [r3, #0]
    }
    displaySpaceShip(spaceshipCurrentColor);
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <moveSpaceship+0xd4>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f98e 	bl	8001d84 <displaySpaceShip>
    if(powerUp == 1){
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <moveSpaceship+0xcc>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d103      	bne.n	8001a78 <moveSpaceship+0xb0>
    	displayPowerup(RED);
 8001a70:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001a74:	f000 fb26 	bl	80020c4 <displayPowerup>
    }
	if(powerUp == 2){
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <moveSpaceship+0xcc>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d105      	bne.n	8001a8c <moveSpaceship+0xc4>
		displayPowerup(LIGHT_BLUE);
 8001a80:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8001a84:	f000 fb1e 	bl	80020c4 <displayPowerup>
 8001a88:	e000      	b.n	8001a8c <moveSpaceship+0xc4>
        return;
 8001a8a:	bf00      	nop
	}
}
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200015aa 	.word	0x200015aa
 8001a98:	2000000c 	.word	0x2000000c
 8001a9c:	2000000e 	.word	0x2000000e

08001aa0 <hitComet>:

void hitComet(int bul,int com){
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
    money += Comet.comet_ar[com].coins;
 8001aaa:	4a4b      	ldr	r2, [pc, #300]	; (8001bd8 <hitComet+0x138>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b48      	ldr	r3, [pc, #288]	; (8001bdc <hitComet+0x13c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a47      	ldr	r2, [pc, #284]	; (8001bdc <hitComet+0x13c>)
 8001ac0:	6013      	str	r3, [r2, #0]
    Displ_FillArea(Comet.comet_ar[com].x * 4, Comet.comet_ar[com].y * 4, Comet.comet_ar[com].size * 4, Comet.comet_ar[com].size * 4, DARK_GREY);
 8001ac2:	4a45      	ldr	r2, [pc, #276]	; (8001bd8 <hitComet+0x138>)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	785b      	ldrb	r3, [r3, #1]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	b298      	uxth	r0, r3
 8001ad2:	4a41      	ldr	r2, [pc, #260]	; (8001bd8 <hitComet+0x138>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	789b      	ldrb	r3, [r3, #2]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	b299      	uxth	r1, r3
 8001ae2:	4a3d      	ldr	r2, [pc, #244]	; (8001bd8 <hitComet+0x138>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	4c38      	ldr	r4, [pc, #224]	; (8001bd8 <hitComet+0x138>)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4423      	add	r3, r4
 8001afc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f642 442c 	movw	r4, #11308	; 0x2c2c
 8001b0a:	9400      	str	r4, [sp, #0]
 8001b0c:	f000 fede 	bl	80028cc <Displ_FillArea>
    if(bul != 420){
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001b16:	d024      	beq.n	8001b62 <hitComet+0xc2>
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	e01c      	b.n	8001b58 <hitComet+0xb8>
            ammo.bullet_ar[j].x = ammo.bullet_ar[j+1].x;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	3301      	adds	r3, #1
 8001b22:	4a2f      	ldr	r2, [pc, #188]	; (8001be0 <hitComet+0x140>)
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001b2c:	4a2c      	ldr	r2, [pc, #176]	; (8001be0 <hitComet+0x140>)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	460a      	mov	r2, r1
 8001b36:	709a      	strb	r2, [r3, #2]
            ammo.bullet_ar[j].y = ammo.bullet_ar[j+1].y;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	4a28      	ldr	r2, [pc, #160]	; (8001be0 <hitComet+0x140>)
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4413      	add	r3, r2
 8001b42:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8001b46:	4a26      	ldr	r2, [pc, #152]	; (8001be0 <hitComet+0x140>)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	460a      	mov	r2, r1
 8001b50:	70da      	strb	r2, [r3, #3]
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3301      	adds	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	dddf      	ble.n	8001b1e <hitComet+0x7e>
        }
        powerups();
 8001b5e:	f000 fa6d 	bl	800203c <powerups>
    }

    for(int j = com; j < MAX_COMETS - 1; j++){
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	e027      	b.n	8001bb8 <hitComet+0x118>
        Comet.comet_ar[j].x = Comet.comet_ar[j+1].x;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	4a1a      	ldr	r2, [pc, #104]	; (8001bd8 <hitComet+0x138>)
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	7859      	ldrb	r1, [r3, #1]
 8001b74:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <hitComet+0x138>)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[j].y = Comet.comet_ar[j+1].y;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	3301      	adds	r3, #1
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <hitComet+0x138>)
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	7899      	ldrb	r1, [r3, #2]
 8001b8c:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <hitComet+0x138>)
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	460a      	mov	r2, r1
 8001b96:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[j].size = Comet.comet_ar[j+1].size;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <hitComet+0x138>)
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <hitComet+0x138>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	460a      	mov	r2, r1
 8001bb0:	70da      	strb	r2, [r3, #3]
    for(int j = com; j < MAX_COMETS - 1; j++){
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	ddd4      	ble.n	8001b68 <hitComet+0xc8>
    }
    Comet.in_play--;
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <hitComet+0x138>)
 8001bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	b25a      	sxtb	r2, r3
 8001bcc:	4b02      	ldr	r3, [pc, #8]	; (8001bd8 <hitComet+0x138>)
 8001bce:	701a      	strb	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	20001560 	.word	0x20001560
 8001bdc:	200015a4 	.word	0x200015a4
 8001be0:	20001540 	.word	0x20001540

08001be4 <displayStars>:




void displayStars(uint16_t color){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	4603      	mov	r3, r0
 8001bec:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < Star.in_play; i++){
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e01a      	b.n	8001c2a <displayStars+0x46>
    	Displ_FillArea(Star.star_ar[i].x * 4, Star.star_ar[i].y * 4, 4, 4, color);
 8001bf4:	4a13      	ldr	r2, [pc, #76]	; (8001c44 <displayStars+0x60>)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	b298      	uxth	r0, r3
 8001c06:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <displayStars+0x60>)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	b299      	uxth	r1, r3
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	2204      	movs	r2, #4
 8001c20:	f000 fe54 	bl	80028cc <Displ_FillArea>
    for(int i = 0; i < Star.in_play; i++){
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3301      	adds	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <displayStars+0x60>)
 8001c2c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c30:	461a      	mov	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4293      	cmp	r3, r2
 8001c36:	dbdd      	blt.n	8001bf4 <displayStars+0x10>
    }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000158c 	.word	0x2000158c

08001c48 <displayAmmo>:

void displayAmmo(uint16_t color){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < ammo.in_play; i++){
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	e01a      	b.n	8001c8e <displayAmmo+0x46>
        Displ_FillArea(ammo.bullet_ar[i].x * 4, ammo.bullet_ar[i].y * 4, 4, 4, color);
 8001c58:	4a27      	ldr	r2, [pc, #156]	; (8001cf8 <displayAmmo+0xb0>)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	b298      	uxth	r0, r3
 8001c6a:	4a23      	ldr	r2, [pc, #140]	; (8001cf8 <displayAmmo+0xb0>)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	b299      	uxth	r1, r3
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2304      	movs	r3, #4
 8001c82:	2204      	movs	r2, #4
 8001c84:	f000 fe22 	bl	80028cc <Displ_FillArea>
    for(int i = 0; i < ammo.in_play; i++){
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <displayAmmo+0xb0>)
 8001c90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c94:	461a      	mov	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	dbdd      	blt.n	8001c58 <displayAmmo+0x10>
    }
    if(in_multiplayer){
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <displayAmmo+0xb4>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d025      	beq.n	8001cf0 <displayAmmo+0xa8>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	e01b      	b.n	8001ce2 <displayAmmo+0x9a>
            Displ_FillArea(enemy_ammo.bullet_ar[i].x * 4, enemy_ammo.bullet_ar[i].y * 4, 4, 4, LIGHT_BLUE);
 8001caa:	4a15      	ldr	r2, [pc, #84]	; (8001d00 <displayAmmo+0xb8>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	b298      	uxth	r0, r3
 8001cbc:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <displayAmmo+0xb8>)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	b299      	uxth	r1, r3
 8001cce:	f24f 73db 	movw	r3, #63451	; 0xf7db
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	f000 fdf8 	bl	80028cc <Displ_FillArea>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <displayAmmo+0xb8>)
 8001ce4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	4293      	cmp	r3, r2
 8001cee:	dbdc      	blt.n	8001caa <displayAmmo+0x62>
        }
    }
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20001540 	.word	0x20001540
 8001cfc:	20000011 	.word	0x20000011
 8001d00:	20001550 	.word	0x20001550

08001d04 <displayComets>:

void displayComets(uint16_t color){
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < Comet.in_play; i++){
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	e029      	b.n	8001d68 <displayComets+0x64>
        Displ_FillArea(Comet.comet_ar[i].x * 4, Comet.comet_ar[i].y  * 4, Comet.comet_ar[i].size * 4, Comet.comet_ar[i].size * 4, color);
 8001d14:	4a1a      	ldr	r2, [pc, #104]	; (8001d80 <displayComets+0x7c>)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	785b      	ldrb	r3, [r3, #1]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	b298      	uxth	r0, r3
 8001d24:	4a16      	ldr	r2, [pc, #88]	; (8001d80 <displayComets+0x7c>)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	789b      	ldrb	r3, [r3, #2]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	b299      	uxth	r1, r3
 8001d34:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <displayComets+0x7c>)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4c0e      	ldr	r4, [pc, #56]	; (8001d80 <displayComets+0x7c>)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4423      	add	r3, r4
 8001d4e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	b29c      	uxth	r4, r3
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	4623      	mov	r3, r4
 8001d5e:	f000 fdb5 	bl	80028cc <Displ_FillArea>
    for (int i = 0; i < Comet.in_play; i++){
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3301      	adds	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <displayComets+0x7c>)
 8001d6a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4293      	cmp	r3, r2
 8001d74:	dbce      	blt.n	8001d14 <displayComets+0x10>
    }
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}
 8001d80:	20001560 	.word	0x20001560

08001d84 <displaySpaceShip>:

void displaySpaceShip(uint16_t color){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(SpaceShip.x*4 - 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <displaySpaceShip+0x80>)
 8001d90:	f993 3000 	ldrsb.w	r3, [r3]
 8001d94:	3b02      	subs	r3, #2
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	b298      	uxth	r0, r3
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2310      	movs	r3, #16
 8001da2:	2204      	movs	r2, #4
 8001da4:	21d8      	movs	r1, #216	; 0xd8
 8001da6:	f000 fd91 	bl	80028cc <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 + 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <displaySpaceShip+0x80>)
 8001dac:	f993 3000 	ldrsb.w	r3, [r3]
 8001db0:	3302      	adds	r3, #2
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	b298      	uxth	r0, r3
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2310      	movs	r3, #16
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	21d8      	movs	r1, #216	; 0xd8
 8001dc2:	f000 fd83 	bl	80028cc <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 - 4, SCREEN_HEIGHT*4 -20, 12, 4, color);
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <displaySpaceShip+0x80>)
 8001dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	b298      	uxth	r0, r3
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2304      	movs	r3, #4
 8001dda:	220c      	movs	r2, #12
 8001ddc:	21dc      	movs	r1, #220	; 0xdc
 8001dde:	f000 fd75 	bl	80028cc <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4, SCREEN_HEIGHT*4 -28, 4, 16, color);
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <displaySpaceShip+0x80>)
 8001de4:	f993 3000 	ldrsb.w	r3, [r3]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	b298      	uxth	r0, r3
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2310      	movs	r3, #16
 8001df4:	2204      	movs	r2, #4
 8001df6:	21d4      	movs	r1, #212	; 0xd4
 8001df8:	f000 fd68 	bl	80028cc <Displ_FillArea>

}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	2000000c 	.word	0x2000000c

08001e08 <displayLives>:

void displayLives(){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af02      	add	r7, sp, #8
    for(int i = 0; i < lives; i++){
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	e013      	b.n	8001e3c <displayLives+0x34>
    	Displ_FillArea(HEARTS_X+HEARTS_OFFSET*i, HEARTS_Y, 4, 4, LIGHT_GREEN);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	0052      	lsls	r2, r2, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3308      	adds	r3, #8
 8001e24:	b298      	uxth	r0, r3
 8001e26:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	2204      	movs	r2, #4
 8001e30:	2108      	movs	r1, #8
 8001e32:	f000 fd4b 	bl	80028cc <Displ_FillArea>
    for(int i = 0; i < lives; i++){
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <displayLives+0x90>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4293      	cmp	r3, r2
 8001e46:	dbe5      	blt.n	8001e14 <displayLives+0xc>
    }
    if(lives < 3){
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <displayLives+0x90>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d81f      	bhi.n	8001e90 <displayLives+0x88>
    	for(int i = 0; i < 3 - lives; i++){
 8001e50:	2300      	movs	r3, #0
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	e015      	b.n	8001e82 <displayLives+0x7a>
    		Displ_FillArea(HEARTS_X+HEARTS_OFFSET*(3-i), HEARTS_Y, 4, 4, DARK_GREY);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f1c3 0303 	rsb	r3, r3, #3
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	0052      	lsls	r2, r2, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3308      	adds	r3, #8
 8001e6a:	b298      	uxth	r0, r3
 8001e6c:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2304      	movs	r3, #4
 8001e74:	2204      	movs	r2, #4
 8001e76:	2108      	movs	r1, #8
 8001e78:	f000 fd28 	bl	80028cc <Displ_FillArea>
    	for(int i = 0; i < 3 - lives; i++){
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <displayLives+0x90>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	f1c3 0303 	rsb	r3, r3, #3
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	dbe2      	blt.n	8001e56 <displayLives+0x4e>
    	}
    }
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2000000a 	.word	0x2000000a

08001e9c <spaceShipHitColorToggle>:


void spaceShipHitColorToggle(){
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
    if(spaceshipCurrentColor == RED && hit % 10 == 0){
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <spaceShipHitColorToggle+0x84>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8001ea8:	d112      	bne.n	8001ed0 <spaceShipHitColorToggle+0x34>
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <spaceShipHitColorToggle+0x88>)
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <spaceShipHitColorToggle+0x8c>)
 8001eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8001eb4:	08d9      	lsrs	r1, r3, #3
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d104      	bne.n	8001ed0 <spaceShipHitColorToggle+0x34>
        spaceshipCurrentColor = WHITE;
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <spaceShipHitColorToggle+0x84>)
 8001ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ecc:	801a      	strh	r2, [r3, #0]
 8001ece:	e011      	b.n	8001ef4 <spaceShipHitColorToggle+0x58>
    }else if(hit % 10 == 0){
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <spaceShipHitColorToggle+0x88>)
 8001ed2:	781a      	ldrb	r2, [r3, #0]
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <spaceShipHitColorToggle+0x8c>)
 8001ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8001eda:	08d9      	lsrs	r1, r3, #3
 8001edc:	460b      	mov	r3, r1
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <spaceShipHitColorToggle+0x58>
        spaceshipCurrentColor = RED;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <spaceShipHitColorToggle+0x84>)
 8001eee:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001ef2:	801a      	strh	r2, [r3, #0]
    }
    if(hit < hit_graph_counter){
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <spaceShipHitColorToggle+0x88>)
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <spaceShipHitColorToggle+0x90>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d206      	bcs.n	8001f0e <spaceShipHitColorToggle+0x72>
        hit++;
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <spaceShipHitColorToggle+0x88>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <spaceShipHitColorToggle+0x88>)
 8001f0a:	701a      	strb	r2, [r3, #0]
    }else{
        hit = 0;
    }
}
 8001f0c:	e002      	b.n	8001f14 <spaceShipHitColorToggle+0x78>
        hit = 0;
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <spaceShipHitColorToggle+0x88>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	2000000e 	.word	0x2000000e
 8001f24:	20001368 	.word	0x20001368
 8001f28:	cccccccd 	.word	0xcccccccd
 8001f2c:	20000010 	.word	0x20000010

08001f30 <delayBullet>:

void delayBullet(){
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
    if (bullet_delay > 0){
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <delayBullet+0x24>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <delayBullet+0x18>
        bullet_delay--;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <delayBullet+0x24>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <delayBullet+0x24>)
 8001f46:	701a      	strb	r2, [r3, #0]
    }
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	200015a1 	.word	0x200015a1

08001f58 <beenHit>:

void beenHit(){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
    hit = 1;
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <beenHit+0x34>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
    lives--;
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <beenHit+0x38>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <beenHit+0x38>)
 8001f6c:	701a      	strb	r2, [r3, #0]
    if(lives <= 0){
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <beenHit+0x38>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d107      	bne.n	8001f86 <beenHit+0x2e>
        play = 0;
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <beenHit+0x3c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
        hit = 0;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <beenHit+0x34>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
        initSpaceInvaders();
 8001f82:	f7ff f821 	bl	8000fc8 <initSpaceInvaders>

    }
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20001368 	.word	0x20001368
 8001f90:	2000000a 	.word	0x2000000a
 8001f94:	2000000b 	.word	0x2000000b

08001f98 <send_Bullet>:

void send_Bullet(point bullet){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	80b8      	strh	r0, [r7, #4]
    if(connected && bullet.y != -2){
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <send_Bullet+0x94>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03c      	beq.n	8002022 <send_Bullet+0x8a>
 8001fa8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001fac:	f113 0f02 	cmn.w	r3, #2
 8001fb0:	d037      	beq.n	8002022 <send_Bullet+0x8a>
        //QD << "a bullet has been send to the other player at x:" << bullet.x;  // change to uart debug
        if(enemy_ammo.in_play < MAX_BULLETS){
 8001fb2:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <send_Bullet+0x98>)
 8001fb4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	dc2c      	bgt.n	8002016 <send_Bullet+0x7e>
            enemy_ammo.bullet_ar[enemy_ammo.in_play].x = rand() % ((PLAYABLE_MAX - 1) - PLAYABLE_OFFSET) + PLAYABLE_OFFSET;
 8001fbc:	f005 f808 	bl	8006fd0 <rand>
 8001fc0:	4601      	mov	r1, r0
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <send_Bullet+0x9c>)
 8001fc4:	fb83 2301 	smull	r2, r3, r3, r1
 8001fc8:	115a      	asrs	r2, r3, #5
 8001fca:	17cb      	asrs	r3, r1, #31
 8001fcc:	1ad2      	subs	r2, r2, r3
 8001fce:	4613      	mov	r3, r2
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	1aca      	subs	r2, r1, r3
 8001fda:	b2d3      	uxtb	r3, r2
 8001fdc:	3305      	adds	r3, #5
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <send_Bullet+0x98>)
 8001fe2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001fe6:	b251      	sxtb	r1, r2
 8001fe8:	4a11      	ldr	r2, [pc, #68]	; (8002030 <send_Bullet+0x98>)
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	460a      	mov	r2, r1
 8001ff0:	709a      	strb	r2, [r3, #2]
            enemy_ammo.bullet_ar[enemy_ammo.in_play].y = 3;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <send_Bullet+0x98>)
 8001ff4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <send_Bullet+0x98>)
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	2203      	movs	r2, #3
 8002000:	70da      	strb	r2, [r3, #3]
            enemy_ammo.in_play++;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <send_Bullet+0x98>)
 8002004:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3301      	adds	r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	b25a      	sxtb	r2, r3
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <send_Bullet+0x98>)
 8002012:	705a      	strb	r2, [r3, #1]
        }else{
            star_delay--;
        }
    }
}
 8002014:	e005      	b.n	8002022 <send_Bullet+0x8a>
            star_delay--;
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <send_Bullet+0xa0>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	3b01      	subs	r3, #1
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <send_Bullet+0xa0>)
 8002020:	701a      	strb	r2, [r3, #0]
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000153d 	.word	0x2000153d
 8002030:	20001550 	.word	0x20001550
 8002034:	76b981db 	.word	0x76b981db
 8002038:	200015a9 	.word	0x200015a9

0800203c <powerups>:

void powerups(){
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
    uint8_t powerupornot = rand() % ((3 - 0) - 0) + 0;
 8002042:	f004 ffc5 	bl	8006fd0 <rand>
 8002046:	4602      	mov	r2, r0
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <powerups+0x7c>)
 800204a:	fb83 3102 	smull	r3, r1, r3, r2
 800204e:	17d3      	asrs	r3, r2, #31
 8002050:	1ac9      	subs	r1, r1, r3
 8002052:	460b      	mov	r3, r1
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	440b      	add	r3, r1
 8002058:	1ad1      	subs	r1, r2, r3
 800205a:	460b      	mov	r3, r1
 800205c:	71fb      	strb	r3, [r7, #7]
    if(powerUp == 0 && powerupornot == 0){
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <powerups+0x80>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d123      	bne.n	80020ae <powerups+0x72>
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d120      	bne.n	80020ae <powerups+0x72>
        powerUp = rand() % ((3 - 1) - 0) + 1;
 800206c:	f004 ffb0 	bl	8006fd0 <rand>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	bfb8      	it	lt
 800207a:	425b      	neglt	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	3301      	adds	r3, #1
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <powerups+0x80>)
 8002084:	701a      	strb	r2, [r3, #0]
        if(powerUp == 1){
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <powerups+0x80>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d104      	bne.n	8002098 <powerups+0x5c>
        	displayPowerup(RED);
 800208e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002092:	f000 f817 	bl	80020c4 <displayPowerup>
 8002096:	e007      	b.n	80020a8 <powerups+0x6c>
        }
        else if(powerUp == 2){
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <powerups+0x80>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d103      	bne.n	80020a8 <powerups+0x6c>
        	displayPowerup(LIGHT_BLUE);
 80020a0:	f24f 70db 	movw	r0, #63451	; 0xf7db
 80020a4:	f000 f80e 	bl	80020c4 <displayPowerup>
        }
        powerUp_delay = MAX_DELAY_POWERUP;
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <powerups+0x84>)
 80020aa:	2205      	movs	r2, #5
 80020ac:	701a      	strb	r2, [r3, #0]
    }
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	55555556 	.word	0x55555556
 80020bc:	200015aa 	.word	0x200015aa
 80020c0:	200015ab 	.word	0x200015ab

080020c4 <displayPowerup>:

void displayPowerup(uint16_t color){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]

    if(powerUp == 1){
 80020ce:	4b1f      	ldr	r3, [pc, #124]	; (800214c <displayPowerup+0x88>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d11c      	bne.n	8002110 <displayPowerup+0x4c>
		Displ_FillArea(SpaceShip.x * 4, 0, 4, 180, color);
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <displayPowerup+0x8c>)
 80020d8:	f993 3000 	ldrsb.w	r3, [r3]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	b298      	uxth	r0, r3
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	23b4      	movs	r3, #180	; 0xb4
 80020e8:	2204      	movs	r2, #4
 80020ea:	2100      	movs	r1, #0
 80020ec:	f000 fbee 	bl	80028cc <Displ_FillArea>
		Displ_FillArea(SpaceShip.x * 4 + 1, 180, 2, 30, color);
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <displayPowerup+0x8c>)
 80020f2:	f993 3000 	ldrsb.w	r3, [r3]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3301      	adds	r3, #1
 80020fe:	b298      	uxth	r0, r3
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	231e      	movs	r3, #30
 8002106:	2202      	movs	r2, #2
 8002108:	21b4      	movs	r1, #180	; 0xb4
 800210a:	f000 fbdf 	bl	80028cc <Displ_FillArea>
    }
    else if(powerUp == 2){
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
    }
}
 800210e:	e019      	b.n	8002144 <displayPowerup+0x80>
    else if(powerUp == 2){
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <displayPowerup+0x88>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d115      	bne.n	8002144 <displayPowerup+0x80>
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <displayPowerup+0x8c>)
 800211a:	f993 3000 	ldrsb.w	r3, [r3]
 800211e:	b29b      	uxth	r3, r3
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	b29b      	uxth	r3, r3
 8002124:	3301      	adds	r3, #1
 8002126:	b29b      	uxth	r3, r3
 8002128:	b218      	sxth	r0, r3
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <displayPowerup+0x8c>)
 800212c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002130:	b29b      	uxth	r3, r3
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	b29b      	uxth	r3, r3
 8002136:	3302      	adds	r3, #2
 8002138:	b29b      	uxth	r3, r3
 800213a:	b219      	sxth	r1, r3
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	220e      	movs	r2, #14
 8002140:	f000 fca2 	bl	8002a88 <Displ_drawCircle>
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200015aa 	.word	0x200015aa
 8002150:	2000000c 	.word	0x2000000c

08002154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_MspInit+0x44>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <HAL_MspInit+0x44>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6193      	str	r3, [r2, #24]
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_MspInit+0x44>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_MspInit+0x44>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a08      	ldr	r2, [pc, #32]	; (8002198 <HAL_MspInit+0x44>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217c:	61d3      	str	r3, [r2, #28]
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_MspInit+0x44>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000

0800219c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a17      	ldr	r2, [pc, #92]	; (8002218 <HAL_I2C_MspInit+0x7c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d127      	bne.n	800220e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021be:	4b17      	ldr	r3, [pc, #92]	; (800221c <HAL_I2C_MspInit+0x80>)
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	4a16      	ldr	r2, [pc, #88]	; (800221c <HAL_I2C_MspInit+0x80>)
 80021c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021c8:	6153      	str	r3, [r2, #20]
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_I2C_MspInit+0x80>)
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021d6:	2303      	movs	r3, #3
 80021d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021da:	2312      	movs	r3, #18
 80021dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021de:	2301      	movs	r3, #1
 80021e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021e6:	2304      	movs	r3, #4
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	480b      	ldr	r0, [pc, #44]	; (8002220 <HAL_I2C_MspInit+0x84>)
 80021f2:	f001 f98d 	bl	8003510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_I2C_MspInit+0x80>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <HAL_I2C_MspInit+0x80>)
 80021fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002200:	61d3      	str	r3, [r2, #28]
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_I2C_MspInit+0x80>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3728      	adds	r7, #40	; 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40005800 	.word	0x40005800
 800221c:	40021000 	.word	0x40021000
 8002220:	48001400 	.word	0x48001400

08002224 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a17      	ldr	r2, [pc, #92]	; (80022a0 <HAL_SPI_MspInit+0x7c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d128      	bne.n	8002298 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <HAL_SPI_MspInit+0x80>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <HAL_SPI_MspInit+0x80>)
 800224c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002250:	61d3      	str	r3, [r2, #28]
 8002252:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <HAL_SPI_MspInit+0x80>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_SPI_MspInit+0x80>)
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	4a10      	ldr	r2, [pc, #64]	; (80022a4 <HAL_SPI_MspInit+0x80>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6153      	str	r3, [r2, #20]
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <HAL_SPI_MspInit+0x80>)
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8002276:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800227a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002288:	2305      	movs	r3, #5
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	4619      	mov	r1, r3
 8002292:	4805      	ldr	r0, [pc, #20]	; (80022a8 <HAL_SPI_MspInit+0x84>)
 8002294:	f001 f93c 	bl	8003510 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002298:	bf00      	nop
 800229a:	3728      	adds	r7, #40	; 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40003800 	.word	0x40003800
 80022a4:	40021000 	.word	0x40021000
 80022a8:	48000400 	.word	0x48000400

080022ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	; 0x30
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2f      	ldr	r2, [pc, #188]	; (8002388 <HAL_UART_MspInit+0xdc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d129      	bne.n	8002322 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ce:	4b2f      	ldr	r3, [pc, #188]	; (800238c <HAL_UART_MspInit+0xe0>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	4a2e      	ldr	r2, [pc, #184]	; (800238c <HAL_UART_MspInit+0xe0>)
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d8:	61d3      	str	r3, [r2, #28]
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_UART_MspInit+0xe0>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <HAL_UART_MspInit+0xe0>)
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	4a28      	ldr	r2, [pc, #160]	; (800238c <HAL_UART_MspInit+0xe0>)
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f0:	6153      	str	r3, [r2, #20]
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <HAL_UART_MspInit+0xe0>)
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022fe:	230c      	movs	r3, #12
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800230a:	2303      	movs	r3, #3
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800230e:	2307      	movs	r3, #7
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	4619      	mov	r1, r3
 8002318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231c:	f001 f8f8 	bl	8003510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002320:	e02d      	b.n	800237e <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <HAL_UART_MspInit+0xe4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d128      	bne.n	800237e <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <HAL_UART_MspInit+0xe0>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4a16      	ldr	r2, [pc, #88]	; (800238c <HAL_UART_MspInit+0xe0>)
 8002332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002336:	61d3      	str	r3, [r2, #28]
 8002338:	4b14      	ldr	r3, [pc, #80]	; (800238c <HAL_UART_MspInit+0xe0>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_UART_MspInit+0xe0>)
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	4a10      	ldr	r2, [pc, #64]	; (800238c <HAL_UART_MspInit+0xe0>)
 800234a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800234e:	6153      	str	r3, [r2, #20]
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_UART_MspInit+0xe0>)
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800235c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800236e:	2307      	movs	r3, #7
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002372:	f107 031c 	add.w	r3, r7, #28
 8002376:	4619      	mov	r1, r3
 8002378:	4806      	ldr	r0, [pc, #24]	; (8002394 <HAL_UART_MspInit+0xe8>)
 800237a:	f001 f8c9 	bl	8003510 <HAL_GPIO_Init>
}
 800237e:	bf00      	nop
 8002380:	3730      	adds	r7, #48	; 0x30
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40004400 	.word	0x40004400
 800238c:	40021000 	.word	0x40021000
 8002390:	40004800 	.word	0x40004800
 8002394:	48000400 	.word	0x48000400

08002398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800239c:	e7fe      	b.n	800239c <NMI_Handler+0x4>

0800239e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <HardFault_Handler+0x4>

080023a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <MemManage_Handler+0x4>

080023aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <BusFault_Handler+0x4>

080023b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <UsageFault_Handler+0x4>

080023b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e4:	f000 ff3e 	bl	8003264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}

080023ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 80023f0:	2001      	movs	r0, #1
 80023f2:	f001 fa2f 	bl	8003854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}

080023fa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 80023fe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002402:	f001 fa27 	bl	8003854 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8002406:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800240a:	f001 fa23 	bl	8003854 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 800240e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002412:	f001 fa1f 	bl	8003854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}

0800241a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  return 1;
 800241e:	2301      	movs	r3, #1
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <_kill>:

int _kill(int pid, int sig)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002434:	f004 fcde 	bl	8006df4 <__errno>
 8002438:	4603      	mov	r3, r0
 800243a:	2216      	movs	r2, #22
 800243c:	601a      	str	r2, [r3, #0]
  return -1;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <_exit>:

void _exit (int status)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002452:	f04f 31ff 	mov.w	r1, #4294967295
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffe7 	bl	800242a <_kill>
  while (1) {}    /* Make sure we hang here */
 800245c:	e7fe      	b.n	800245c <_exit+0x12>

0800245e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	60f8      	str	r0, [r7, #12]
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e00a      	b.n	8002486 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002470:	f3af 8000 	nop.w
 8002474:	4601      	mov	r1, r0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	60ba      	str	r2, [r7, #8]
 800247c:	b2ca      	uxtb	r2, r1
 800247e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3301      	adds	r3, #1
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	429a      	cmp	r2, r3
 800248c:	dbf0      	blt.n	8002470 <_read+0x12>
  }

  return len;
 800248e:	687b      	ldr	r3, [r7, #4]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c0:	605a      	str	r2, [r3, #4]
  return 0;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <_isatty>:

int _isatty(int file)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024d8:	2301      	movs	r3, #1
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002508:	4a14      	ldr	r2, [pc, #80]	; (800255c <_sbrk+0x5c>)
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <_sbrk+0x60>)
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <_sbrk+0x64>)
 800251e:	4a12      	ldr	r2, [pc, #72]	; (8002568 <_sbrk+0x68>)
 8002520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <_sbrk+0x64>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	429a      	cmp	r2, r3
 800252e:	d207      	bcs.n	8002540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002530:	f004 fc60 	bl	8006df4 <__errno>
 8002534:	4603      	mov	r3, r0
 8002536:	220c      	movs	r2, #12
 8002538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	e009      	b.n	8002554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <_sbrk+0x64>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002546:	4b07      	ldr	r3, [pc, #28]	; (8002564 <_sbrk+0x64>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <_sbrk+0x64>)
 8002550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002552:	68fb      	ldr	r3, [r7, #12]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20004000 	.word	0x20004000
 8002560:	00000400 	.word	0x00000400
 8002564:	200015ac 	.word	0x200015ac
 8002568:	20001658 	.word	0x20001658

0800256c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <SystemInit+0x20>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	4a05      	ldr	r2, [pc, #20]	; (800258c <SystemInit+0x20>)
 8002578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800257c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8002594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800259c:	f001 f92a 	bl	80037f4 <HAL_GPIO_ReadPin>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d017      	beq.n	80025d6 <Displ_Select+0x46>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 80025a6:	2201      	movs	r2, #1
 80025a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025ac:	480b      	ldr	r0, [pc, #44]	; (80025dc <Displ_Select+0x4c>)
 80025ae:	f001 f939 	bl	8003824 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <Displ_Select+0x50>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	490a      	ldr	r1, [pc, #40]	; (80025e0 <Displ_Select+0x50>)
 80025b8:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80025bc:	4013      	ands	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <Displ_Select+0x50>)
 80025c2:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <Displ_Select+0x50>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 80025c8:	2200      	movs	r2, #0
 80025ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d2:	f001 f927 	bl	8003824 <HAL_GPIO_WritePin>
		}
	}
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	48000400 	.word	0x48000400
 80025e0:	40003800 	.word	0x40003800

080025e4 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6039      	str	r1, [r7, #0]
 80025ec:	4611      	mov	r1, r2
 80025ee:	461a      	mov	r2, r3
 80025f0:	4603      	mov	r3, r0
 80025f2:	71fb      	strb	r3, [r7, #7]
 80025f4:	460b      	mov	r3, r1
 80025f6:	80bb      	strh	r3, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 80025fc:	bf00      	nop
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <Displ_Transmit+0x90>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0fa      	beq.n	80025fe <Displ_Transmit+0x1a>

	Displ_Select();
 8002608:	f7ff ffc2 	bl	8002590 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	461a      	mov	r2, r3
 8002610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002618:	f001 f904 	bl	8003824 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 800261c:	79bb      	ldrb	r3, [r7, #6]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8002622:	88bb      	ldrh	r3, [r7, #4]
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	4413      	add	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e00b      	b.n	8002648 <Displ_Transmit+0x64>
			*data32=__REV16(*data32);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	ba5b      	rev16	r3, r3
 800263a:	60bb      	str	r3, [r7, #8]
  return result;
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3304      	adds	r3, #4
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	429a      	cmp	r2, r3
 800264e:	d3ef      	bcc.n	8002630 <Displ_Transmit+0x4c>
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <Displ_Transmit+0x90>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8002656:	88ba      	ldrh	r2, [r7, #4]
 8002658:	f04f 33ff 	mov.w	r3, #4294967295
 800265c:	6839      	ldr	r1, [r7, #0]
 800265e:	4806      	ldr	r0, [pc, #24]	; (8002678 <Displ_Transmit+0x94>)
 8002660:	f003 fccb 	bl	8005ffa <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <Displ_Transmit+0x90>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 800266a:	bf00      	nop
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000018 	.word	0x20000018
 8002678:	200013c0 	.word	0x200013c0

0800267c <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8002686:	1df9      	adds	r1, r7, #7
 8002688:	2300      	movs	r3, #0
 800268a:	2201      	movs	r2, #1
 800268c:	2000      	movs	r0, #0
 800268e:	f7ff ffa9 	bl	80025e4 <Displ_Transmit>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	4613      	mov	r3, r2
 80026a6:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	68f9      	ldr	r1, [r7, #12]
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7ff ff94 	bl	80025e4 <Displ_Transmit>
 80026bc:	e000      	b.n	80026c0 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 80026be:	bf00      	nop
}
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
	Displ_Select();
 80026cc:	f7ff ff60 	bl	8002590 <Displ_Select>

	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 80026d0:	2200      	movs	r2, #0
 80026d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026da:	f001 f8a3 	bl	8003824 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80026de:	2001      	movs	r0, #1
 80026e0:	f000 fde0 	bl	80032a4 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 80026e4:	2201      	movs	r2, #1
 80026e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ee:	f001 f899 	bl	8003824 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 80026f2:	2096      	movs	r0, #150	; 0x96
 80026f4:	f000 fdd6 	bl	80032a4 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 80026f8:	203a      	movs	r0, #58	; 0x3a
 80026fa:	f7ff ffbf 	bl	800267c <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 80026fe:	2200      	movs	r2, #0
 8002700:	2101      	movs	r1, #1
 8002702:	4810      	ldr	r0, [pc, #64]	; (8002744 <ILI9XXX_Init+0x7c>)
 8002704:	f7ff ffc9 	bl	800269a <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8002708:	20b0      	movs	r0, #176	; 0xb0
 800270a:	f7ff ffb7 	bl	800267c <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 800270e:	2200      	movs	r2, #0
 8002710:	2101      	movs	r1, #1
 8002712:	480d      	ldr	r0, [pc, #52]	; (8002748 <ILI9XXX_Init+0x80>)
 8002714:	f7ff ffc1 	bl	800269a <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8002718:	20b0      	movs	r0, #176	; 0xb0
 800271a:	f7ff ffaf 	bl	800267c <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 800271e:	2200      	movs	r2, #0
 8002720:	2101      	movs	r1, #1
 8002722:	4809      	ldr	r0, [pc, #36]	; (8002748 <ILI9XXX_Init+0x80>)
 8002724:	f7ff ffb9 	bl	800269a <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8002728:	2011      	movs	r0, #17
 800272a:	f7ff ffa7 	bl	800267c <Displ_WriteCommand>
	HAL_Delay(120);
 800272e:	2078      	movs	r0, #120	; 0x78
 8002730:	f000 fdb8 	bl	80032a4 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8002734:	2029      	movs	r0, #41	; 0x29
 8002736:	f7ff ffa1 	bl	800267c <Displ_WriteCommand>
	HAL_Delay(5);
 800273a:	2005      	movs	r0, #5
 800273c:	f000 fdb2 	bl	80032a4 <HAL_Delay>

}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	08008110 	.word	0x08008110
 8002748:	08008114 	.word	0x08008114

0800274c <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4604      	mov	r4, r0
 8002754:	4608      	mov	r0, r1
 8002756:	4611      	mov	r1, r2
 8002758:	461a      	mov	r2, r3
 800275a:	4623      	mov	r3, r4
 800275c:	80fb      	strh	r3, [r7, #6]
 800275e:	4603      	mov	r3, r0
 8002760:	80bb      	strh	r3, [r7, #4]
 8002762:	460b      	mov	r3, r1
 8002764:	807b      	strh	r3, [r7, #2]
 8002766:	4613      	mov	r3, r2
 8002768:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	061a      	lsls	r2, r3, #24
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002776:	431a      	orrs	r2, r3
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	b29b      	uxth	r3, r3
 800277e:	4313      	orrs	r3, r2
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	0a12      	lsrs	r2, r2, #8
 8002784:	b292      	uxth	r2, r2
 8002786:	431a      	orrs	r2, r3
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <Displ_SetAddressWindow+0x90>)
 800278a:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 800278c:	202a      	movs	r0, #42	; 0x2a
 800278e:	f7ff ff75 	bl	800267c <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8002792:	2200      	movs	r2, #0
 8002794:	2104      	movs	r1, #4
 8002796:	4811      	ldr	r0, [pc, #68]	; (80027dc <Displ_SetAddressWindow+0x90>)
 8002798:	f7ff ff7f 	bl	800269a <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 800279c:	883b      	ldrh	r3, [r7, #0]
 800279e:	061a      	lsls	r2, r3, #24
 80027a0:	883b      	ldrh	r3, [r7, #0]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80027a8:	431a      	orrs	r2, r3
 80027aa:	88bb      	ldrh	r3, [r7, #4]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4313      	orrs	r3, r2
 80027b2:	88ba      	ldrh	r2, [r7, #4]
 80027b4:	0a12      	lsrs	r2, r2, #8
 80027b6:	b292      	uxth	r2, r2
 80027b8:	431a      	orrs	r2, r3
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <Displ_SetAddressWindow+0x90>)
 80027bc:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 80027be:	202b      	movs	r0, #43	; 0x2b
 80027c0:	f7ff ff5c 	bl	800267c <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2104      	movs	r1, #4
 80027c8:	4804      	ldr	r0, [pc, #16]	; (80027dc <Displ_SetAddressWindow+0x90>)
 80027ca:	f7ff ff66 	bl	800269a <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 80027ce:	202c      	movs	r0, #44	; 0x2c
 80027d0:	f7ff ff54 	bl	800267c <Displ_WriteCommand>
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd90      	pop	{r4, r7, pc}
 80027dc:	20001638 	.word	0x20001638

080027e0 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 80027ea:	2201      	movs	r2, #1
 80027ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f4:	f001 f816 	bl	8003824 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 80027f8:	2201      	movs	r2, #1
 80027fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027fe:	4806      	ldr	r0, [pc, #24]	; (8002818 <Displ_Init+0x38>)
 8002800:	f001 f810 	bl	8003824 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8002804:	f7ff ff60 	bl	80026c8 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f806 	bl	800281c <Displ_Orientation>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	48000400 	.word	0x48000400

0800281c <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d837      	bhi.n	800289c <Displ_Orientation+0x80>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <Displ_Orientation+0x18>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002845 	.word	0x08002845
 8002838:	0800285b 	.word	0x0800285b
 800283c:	08002871 	.word	0x08002871
 8002840:	08002887 	.word	0x08002887
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <Displ_Orientation+0xa0>)
 8002846:	2288      	movs	r2, #136	; 0x88
 8002848:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <Displ_Orientation+0xa4>)
 800284c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002850:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8002852:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <Displ_Orientation+0xa8>)
 8002854:	22f0      	movs	r2, #240	; 0xf0
 8002856:	801a      	strh	r2, [r3, #0]
			break;
 8002858:	e020      	b.n	800289c <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <Displ_Orientation+0xa0>)
 800285c:	22e8      	movs	r2, #232	; 0xe8
 800285e:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8002860:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <Displ_Orientation+0xa4>)
 8002862:	22f0      	movs	r2, #240	; 0xf0
 8002864:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8002866:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <Displ_Orientation+0xa8>)
 8002868:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800286c:	801a      	strh	r2, [r3, #0]
			break;
 800286e:	e015      	b.n	800289c <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <Displ_Orientation+0xa0>)
 8002872:	2248      	movs	r2, #72	; 0x48
 8002874:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <Displ_Orientation+0xa4>)
 8002878:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800287c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <Displ_Orientation+0xa8>)
 8002880:	22f0      	movs	r2, #240	; 0xf0
 8002882:	801a      	strh	r2, [r3, #0]
			break;
 8002884:	e00a      	b.n	800289c <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <Displ_Orientation+0xa0>)
 8002888:	2228      	movs	r2, #40	; 0x28
 800288a:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <Displ_Orientation+0xa4>)
 800288e:	22f0      	movs	r2, #240	; 0xf0
 8002890:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <Displ_Orientation+0xa8>)
 8002894:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002898:	801a      	strh	r2, [r3, #0]
			break;
 800289a:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 800289c:	2036      	movs	r0, #54	; 0x36
 800289e:	f7ff feed 	bl	800267c <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2101      	movs	r1, #1
 80028a6:	4805      	ldr	r0, [pc, #20]	; (80028bc <Displ_Orientation+0xa0>)
 80028a8:	f7ff fef7 	bl	800269a <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 80028ac:	4a06      	ldr	r2, [pc, #24]	; (80028c8 <Displ_Orientation+0xac>)
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	7013      	strb	r3, [r2, #0]
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	2000163c 	.word	0x2000163c
 80028c0:	200015b4 	.word	0x200015b4
 80028c4:	200015b2 	.word	0x200015b2
 80028c8:	200015b0 	.word	0x200015b0

080028cc <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b08b      	sub	sp, #44	; 0x2c
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4604      	mov	r4, r0
 80028d4:	4608      	mov	r0, r1
 80028d6:	4611      	mov	r1, r2
 80028d8:	461a      	mov	r2, r3
 80028da:	4623      	mov	r3, r4
 80028dc:	80fb      	strh	r3, [r7, #6]
 80028de:	4603      	mov	r3, r0
 80028e0:	80bb      	strh	r3, [r7, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	807b      	strh	r3, [r7, #2]
 80028e6:	4613      	mov	r3, r2
 80028e8:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	4a4e      	ldr	r2, [pc, #312]	; (8002a28 <Displ_FillArea+0x15c>)
 80028ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80028f2:	4293      	cmp	r3, r2
 80028f4:	f280 8093 	bge.w	8002a1e <Displ_FillArea+0x152>
 80028f8:	88bb      	ldrh	r3, [r7, #4]
 80028fa:	4a4c      	ldr	r2, [pc, #304]	; (8002a2c <Displ_FillArea+0x160>)
 80028fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002900:	4293      	cmp	r3, r2
 8002902:	f280 808c 	bge.w	8002a1e <Displ_FillArea+0x152>
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8088 	beq.w	8002a1e <Displ_FillArea+0x152>
 800290e:	883b      	ldrh	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8084 	beq.w	8002a1e <Displ_FillArea+0x152>

	x1=x + w - 1;
 8002916:	88fa      	ldrh	r2, [r7, #6]
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	4413      	add	r3, r2
 800291c:	3b01      	subs	r3, #1
 800291e:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8002920:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <Displ_FillArea+0x15c>)
 8002922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002926:	461a      	mov	r2, r3
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	4293      	cmp	r3, r2
 800292c:	d903      	bls.n	8002936 <Displ_FillArea+0x6a>
		x1=_width;
 800292e:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <Displ_FillArea+0x15c>)
 8002930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002934:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 8002936:	88ba      	ldrh	r2, [r7, #4]
 8002938:	883b      	ldrh	r3, [r7, #0]
 800293a:	4413      	add	r3, r2
 800293c:	3b01      	subs	r3, #1
 800293e:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8002940:	4b3a      	ldr	r3, [pc, #232]	; (8002a2c <Displ_FillArea+0x160>)
 8002942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002946:	461a      	mov	r2, r3
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	4293      	cmp	r3, r2
 800294c:	d903      	bls.n	8002956 <Displ_FillArea+0x8a>
		y1=_height;
 800294e:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <Displ_FillArea+0x160>)
 8002950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002954:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8002956:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	b29b      	uxth	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	431a      	orrs	r2, r3
 8002964:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002966:	061b      	lsls	r3, r3, #24
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 800296c:	88bb      	ldrh	r3, [r7, #4]
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	3301      	adds	r3, #1
 8002974:	88fa      	ldrh	r2, [r7, #6]
 8002976:	6a39      	ldr	r1, [r7, #32]
 8002978:	1a8a      	subs	r2, r1, r2
 800297a:	3201      	adds	r2, #1
 800297c:	fb02 f303 	mul.w	r3, r2, r3
 8002980:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8002982:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <Displ_FillArea+0x164>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b1f      	cmp	r3, #31
 800298c:	d804      	bhi.n	8002998 <Displ_FillArea+0xcc>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	3301      	adds	r3, #1
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	e001      	b.n	800299c <Displ_FillArea+0xd0>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 8002998:	2310      	movs	r3, #16
 800299a:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 800299c:	2300      	movs	r3, #0
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
 80029a0:	e007      	b.n	80029b2 <Displ_FillArea+0xe6>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	1d1a      	adds	r2, r3, #4
 80029a6:	617a      	str	r2, [r7, #20]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	3301      	adds	r3, #1
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d3f3      	bcc.n	80029a2 <Displ_FillArea+0xd6>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	88b9      	ldrh	r1, [r7, #4]
 80029c4:	88f8      	ldrh	r0, [r7, #6]
 80029c6:	f7ff fec1 	bl	800274c <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
 80029d4:	e009      	b.n	80029ea <Displ_FillArea+0x11e>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 80029d6:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <Displ_FillArea+0x164>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	2140      	movs	r1, #64	; 0x40
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fe5b 	bl	800269a <Displ_WriteData>
	for  (k=0;k<times;k++) {
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	3301      	adds	r3, #1
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d3f1      	bcc.n	80029d6 <Displ_FillArea+0x10a>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <Displ_FillArea+0x164>)
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	005a      	lsls	r2, r3, #1
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	019b      	lsls	r3, r3, #6
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2200      	movs	r2, #0
 8002a02:	4619      	mov	r1, r3
 8002a04:	f7ff fe49 	bl	800269a <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <Displ_FillArea+0x164>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <Displ_FillArea+0x168>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <Displ_FillArea+0x14a>
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <Displ_FillArea+0x16c>)
 8002a14:	e000      	b.n	8002a18 <Displ_FillArea+0x14c>
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <Displ_FillArea+0x168>)
 8002a18:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <Displ_FillArea+0x164>)
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	e000      	b.n	8002a20 <Displ_FillArea+0x154>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8002a1e:	bf00      	nop

}
 8002a20:	372c      	adds	r7, #44	; 0x2c
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd90      	pop	{r4, r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200015b2 	.word	0x200015b2
 8002a2c:	200015b4 	.word	0x200015b4
 8002a30:	2000001c 	.word	0x2000001c
 8002a34:	200015b8 	.word	0x200015b8
 8002a38:	200015f8 	.word	0x200015f8

08002a3c <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	4603      	mov	r3, r0
 8002a44:	80fb      	strh	r3, [r7, #6]
 8002a46:	460b      	mov	r3, r1
 8002a48:	80bb      	strh	r3, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <Displ_Pixel+0x44>)
 8002a52:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002a56:	4293      	cmp	r3, r2
 8002a58:	da0e      	bge.n	8002a78 <Displ_Pixel+0x3c>
 8002a5a:	88bb      	ldrh	r3, [r7, #4]
 8002a5c:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <Displ_Pixel+0x48>)
 8002a5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002a62:	4293      	cmp	r3, r2
 8002a64:	da08      	bge.n	8002a78 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8002a66:	88b9      	ldrh	r1, [r7, #4]
 8002a68:	88f8      	ldrh	r0, [r7, #6]
 8002a6a:	887b      	ldrh	r3, [r7, #2]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2301      	movs	r3, #1
 8002a70:	2201      	movs	r2, #1
 8002a72:	f7ff ff2b 	bl	80028cc <Displ_FillArea>
 8002a76:	e000      	b.n	8002a7a <Displ_Pixel+0x3e>
        return;
 8002a78:	bf00      	nop

}
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	200015b2 	.word	0x200015b2
 8002a84:	200015b4 	.word	0x200015b4

08002a88 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4604      	mov	r4, r0
 8002a90:	4608      	mov	r0, r1
 8002a92:	4611      	mov	r1, r2
 8002a94:	461a      	mov	r2, r3
 8002a96:	4623      	mov	r3, r4
 8002a98:	80fb      	strh	r3, [r7, #6]
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80bb      	strh	r3, [r7, #4]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	807b      	strh	r3, [r7, #2]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8002aa6:	887b      	ldrh	r3, [r7, #2]
 8002aa8:	f1c3 0301 	rsb	r3, r3, #1
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8002ab4:	887b      	ldrh	r3, [r7, #2]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	03d2      	lsls	r2, r2, #15
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8002aca:	88f8      	ldrh	r0, [r7, #6]
 8002acc:	88ba      	ldrh	r2, [r7, #4]
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	883a      	ldrh	r2, [r7, #0]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7ff ffb0 	bl	8002a3c <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8002adc:	88f8      	ldrh	r0, [r7, #6]
 8002ade:	88ba      	ldrh	r2, [r7, #4]
 8002ae0:	887b      	ldrh	r3, [r7, #2]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	883a      	ldrh	r2, [r7, #0]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f7ff ffa7 	bl	8002a3c <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8002aee:	88fa      	ldrh	r2, [r7, #6]
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	4413      	add	r3, r2
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	88b9      	ldrh	r1, [r7, #4]
 8002af8:	883a      	ldrh	r2, [r7, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ff9e 	bl	8002a3c <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 8002b00:	88fa      	ldrh	r2, [r7, #6]
 8002b02:	887b      	ldrh	r3, [r7, #2]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	88b9      	ldrh	r1, [r7, #4]
 8002b0a:	883a      	ldrh	r2, [r7, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff95 	bl	8002a3c <Displ_Pixel>

    while (x<y) {
 8002b12:	e081      	b.n	8002c18 <Displ_drawCircle+0x190>
        if (f >= 0) {
 8002b14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	db0e      	blt.n	8002b3a <Displ_drawCircle+0xb2>
            y--;
 8002b1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8002b28:	8a7b      	ldrh	r3, [r7, #18]
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8002b30:	8afa      	ldrh	r2, [r7, #22]
 8002b32:	8a7b      	ldrh	r3, [r7, #18]
 8002b34:	4413      	add	r3, r2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8002b3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8002b46:	8abb      	ldrh	r3, [r7, #20]
 8002b48:	3302      	adds	r3, #2
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8002b4e:	8afa      	ldrh	r2, [r7, #22]
 8002b50:	8abb      	ldrh	r3, [r7, #20]
 8002b52:	4413      	add	r3, r2
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8002b58:	88fa      	ldrh	r2, [r7, #6]
 8002b5a:	8a3b      	ldrh	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	b298      	uxth	r0, r3
 8002b60:	88ba      	ldrh	r2, [r7, #4]
 8002b62:	89fb      	ldrh	r3, [r7, #14]
 8002b64:	4413      	add	r3, r2
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	883a      	ldrh	r2, [r7, #0]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f7ff ff66 	bl	8002a3c <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8002b70:	88fa      	ldrh	r2, [r7, #6]
 8002b72:	8a3b      	ldrh	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	b298      	uxth	r0, r3
 8002b78:	88ba      	ldrh	r2, [r7, #4]
 8002b7a:	89fb      	ldrh	r3, [r7, #14]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	883a      	ldrh	r2, [r7, #0]
 8002b82:	4619      	mov	r1, r3
 8002b84:	f7ff ff5a 	bl	8002a3c <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8002b88:	88fa      	ldrh	r2, [r7, #6]
 8002b8a:	8a3b      	ldrh	r3, [r7, #16]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	b298      	uxth	r0, r3
 8002b90:	88ba      	ldrh	r2, [r7, #4]
 8002b92:	89fb      	ldrh	r3, [r7, #14]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	883a      	ldrh	r2, [r7, #0]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f7ff ff4e 	bl	8002a3c <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8002ba0:	88fa      	ldrh	r2, [r7, #6]
 8002ba2:	8a3b      	ldrh	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	b298      	uxth	r0, r3
 8002ba8:	88ba      	ldrh	r2, [r7, #4]
 8002baa:	89fb      	ldrh	r3, [r7, #14]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	883a      	ldrh	r2, [r7, #0]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7ff ff42 	bl	8002a3c <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8002bb8:	88fa      	ldrh	r2, [r7, #6]
 8002bba:	89fb      	ldrh	r3, [r7, #14]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	b298      	uxth	r0, r3
 8002bc0:	88ba      	ldrh	r2, [r7, #4]
 8002bc2:	8a3b      	ldrh	r3, [r7, #16]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	883a      	ldrh	r2, [r7, #0]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f7ff ff36 	bl	8002a3c <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	89fb      	ldrh	r3, [r7, #14]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	b298      	uxth	r0, r3
 8002bd8:	88ba      	ldrh	r2, [r7, #4]
 8002bda:	8a3b      	ldrh	r3, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	883a      	ldrh	r2, [r7, #0]
 8002be2:	4619      	mov	r1, r3
 8002be4:	f7ff ff2a 	bl	8002a3c <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8002be8:	88fa      	ldrh	r2, [r7, #6]
 8002bea:	89fb      	ldrh	r3, [r7, #14]
 8002bec:	4413      	add	r3, r2
 8002bee:	b298      	uxth	r0, r3
 8002bf0:	88ba      	ldrh	r2, [r7, #4]
 8002bf2:	8a3b      	ldrh	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	883a      	ldrh	r2, [r7, #0]
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f7ff ff1e 	bl	8002a3c <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8002c00:	88fa      	ldrh	r2, [r7, #6]
 8002c02:	89fb      	ldrh	r3, [r7, #14]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	b298      	uxth	r0, r3
 8002c08:	88ba      	ldrh	r2, [r7, #4]
 8002c0a:	8a3b      	ldrh	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	883a      	ldrh	r2, [r7, #0]
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7ff ff12 	bl	8002a3c <Displ_Pixel>
    while (x<y) {
 8002c18:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	f6ff af77 	blt.w	8002b14 <Displ_drawCircle+0x8c>
    }
}
 8002c26:	bf00      	nop
 8002c28:	bf00      	nop
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd90      	pop	{r4, r7, pc}

08002c30 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	4603      	mov	r3, r0
 8002c38:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 8002c3a:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <Displ_CLS+0x30>)
 8002c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <Displ_CLS+0x34>)
 8002c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c48:	b299      	uxth	r1, r3
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	2100      	movs	r1, #0
 8002c52:	2000      	movs	r0, #0
 8002c54:	f7ff fe3a 	bl	80028cc <Displ_FillArea>
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	200015b2 	.word	0x200015b2
 8002c64:	200015b4 	.word	0x200015b4

08002c68 <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b08b      	sub	sp, #44	; 0x2c
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	4604      	mov	r4, r0
 8002c70:	4608      	mov	r0, r1
 8002c72:	4611      	mov	r1, r2
 8002c74:	461a      	mov	r2, r3
 8002c76:	4623      	mov	r3, r4
 8002c78:	80fb      	strh	r3, [r7, #6]
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	80bb      	strh	r3, [r7, #4]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	807b      	strh	r3, [r7, #2]
 8002c82:	4613      	mov	r3, r2
 8002c84:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8002c86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d123      	bne.n	8002cda <Displ_Line+0x72>
    	if (y1>y0){
 8002c92:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002c96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	dd0e      	ble.n	8002cbc <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8002c9e:	88f8      	ldrh	r0, [r7, #6]
 8002ca0:	88b9      	ldrh	r1, [r7, #4]
 8002ca2:	883a      	ldrh	r2, [r7, #0]
 8002ca4:	88bb      	ldrh	r3, [r7, #4]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3301      	adds	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f7ff fe09 	bl	80028cc <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 8002cba:	e103      	b.n	8002ec4 <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8002cbc:	88f8      	ldrh	r0, [r7, #6]
 8002cbe:	8839      	ldrh	r1, [r7, #0]
 8002cc0:	88ba      	ldrh	r2, [r7, #4]
 8002cc2:	883b      	ldrh	r3, [r7, #0]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f7ff fdfa 	bl	80028cc <Displ_FillArea>
    	return;
 8002cd8:	e0f4      	b.n	8002ec4 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8002cda:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002cde:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d121      	bne.n	8002d2a <Displ_Line+0xc2>
    	if (x1>x0)
 8002ce6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	dd0d      	ble.n	8002d0e <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8002cf2:	88f8      	ldrh	r0, [r7, #6]
 8002cf4:	88b9      	ldrh	r1, [r7, #4]
 8002cf6:	887a      	ldrh	r2, [r7, #2]
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2301      	movs	r3, #1
 8002d08:	f7ff fde0 	bl	80028cc <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8002d0c:	e0da      	b.n	8002ec4 <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8002d0e:	8878      	ldrh	r0, [r7, #2]
 8002d10:	8839      	ldrh	r1, [r7, #0]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	887b      	ldrh	r3, [r7, #2]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2301      	movs	r3, #1
 8002d24:	f7ff fdd2 	bl	80028cc <Displ_FillArea>
    	return;
 8002d28:	e0cc      	b.n	8002ec4 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8002d2a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002d2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	dd05      	ble.n	8002d42 <Displ_Line+0xda>
 8002d36:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002d3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d3e:	1ad2      	subs	r2, r2, r3
 8002d40:	e004      	b.n	8002d4c <Displ_Line+0xe4>
 8002d42:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d46:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002d4a:	1ad2      	subs	r2, r2, r3
 8002d4c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d54:	4299      	cmp	r1, r3
 8002d56:	dd05      	ble.n	8002d64 <Displ_Line+0xfc>
 8002d58:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002d5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d60:	1acb      	subs	r3, r1, r3
 8002d62:	e004      	b.n	8002d6e <Displ_Line+0x106>
 8002d64:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002d68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d6c:	1acb      	subs	r3, r1, r3
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	bfcc      	ite	gt
 8002d72:	2301      	movgt	r3, #1
 8002d74:	2300      	movle	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8002d7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	827b      	strh	r3, [r7, #18]
 8002d86:	88bb      	ldrh	r3, [r7, #4]
 8002d88:	80fb      	strh	r3, [r7, #6]
 8002d8a:	8a7b      	ldrh	r3, [r7, #18]
 8002d8c:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	823b      	strh	r3, [r7, #16]
 8002d92:	883b      	ldrh	r3, [r7, #0]
 8002d94:	807b      	strh	r3, [r7, #2]
 8002d96:	8a3b      	ldrh	r3, [r7, #16]
 8002d98:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8002d9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	dd0b      	ble.n	8002dbe <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	81fb      	strh	r3, [r7, #14]
 8002daa:	887b      	ldrh	r3, [r7, #2]
 8002dac:	80fb      	strh	r3, [r7, #6]
 8002dae:	89fb      	ldrh	r3, [r7, #14]
 8002db0:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8002db2:	88bb      	ldrh	r3, [r7, #4]
 8002db4:	81bb      	strh	r3, [r7, #12]
 8002db6:	883b      	ldrh	r3, [r7, #0]
 8002db8:	80bb      	strh	r3, [r7, #4]
 8002dba:	89bb      	ldrh	r3, [r7, #12]
 8002dbc:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8002dc8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002dcc:	105b      	asrs	r3, r3, #1
 8002dce:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8002dd0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002dd4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	da07      	bge.n	8002dec <Displ_Line+0x184>
        dy = y1-y0;
 8002ddc:	883a      	ldrh	r2, [r7, #0]
 8002dde:	88bb      	ldrh	r3, [r7, #4]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8002de6:	2301      	movs	r3, #1
 8002de8:	837b      	strh	r3, [r7, #26]
 8002dea:	e007      	b.n	8002dfc <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8002dec:	88ba      	ldrh	r2, [r7, #4]
 8002dee:	883b      	ldrh	r3, [r7, #0]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8002df6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dfa:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	83bb      	strh	r3, [r7, #28]
 8002e04:	e03a      	b.n	8002e7c <Displ_Line+0x214>
    	l++;
 8002e06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 8002e12:	8b3a      	ldrh	r2, [r7, #24]
 8002e14:	8afb      	ldrh	r3, [r7, #22]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8002e1c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	da25      	bge.n	8002e70 <Displ_Line+0x208>
        	if (steep) {
 8002e24:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d009      	beq.n	8002e40 <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 8002e2c:	88b8      	ldrh	r0, [r7, #4]
 8002e2e:	88f9      	ldrh	r1, [r7, #6]
 8002e30:	8bfa      	ldrh	r2, [r7, #30]
 8002e32:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f7ff fd47 	bl	80028cc <Displ_FillArea>
 8002e3e:	e007      	b.n	8002e50 <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 8002e40:	88f8      	ldrh	r0, [r7, #6]
 8002e42:	88b9      	ldrh	r1, [r7, #4]
 8002e44:	8bfa      	ldrh	r2, [r7, #30]
 8002e46:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f7ff fd3e 	bl	80028cc <Displ_FillArea>
            }
            y0 += ystep;
 8002e50:	88ba      	ldrh	r2, [r7, #4]
 8002e52:	8b7b      	ldrh	r3, [r7, #26]
 8002e54:	4413      	add	r3, r2
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	80bb      	strh	r3, [r7, #4]
            l=0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8002e5e:	8bbb      	ldrh	r3, [r7, #28]
 8002e60:	3301      	adds	r3, #1
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8002e66:	8b3a      	ldrh	r2, [r7, #24]
 8002e68:	897b      	ldrh	r3, [r7, #10]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8002e70:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	83bb      	strh	r3, [r7, #28]
 8002e7c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002e80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	ddbe      	ble.n	8002e06 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8002e88:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d019      	beq.n	8002ec4 <Displ_Line+0x25c>
    	if (steep) {
 8002e90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00b      	beq.n	8002eb0 <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 8002e98:	88b8      	ldrh	r0, [r7, #4]
 8002e9a:	88f9      	ldrh	r1, [r7, #6]
 8002e9c:	8bfb      	ldrh	r3, [r7, #30]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f7ff fd0f 	bl	80028cc <Displ_FillArea>
 8002eae:	e009      	b.n	8002ec4 <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 8002eb0:	88f8      	ldrh	r0, [r7, #6]
 8002eb2:	88b9      	ldrh	r1, [r7, #4]
 8002eb4:	8bfb      	ldrh	r3, [r7, #30]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f7ff fd04 	bl	80028cc <Displ_FillArea>
    	}
    }
}
 8002ec4:	3724      	adds	r7, #36	; 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd90      	pop	{r4, r7, pc}

08002eca <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8002eca:	b590      	push	{r4, r7, lr}
 8002ecc:	b091      	sub	sp, #68	; 0x44
 8002ece:	af02      	add	r7, sp, #8
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	4608      	mov	r0, r1
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4623      	mov	r3, r4
 8002eda:	80fb      	strh	r3, [r7, #6]
 8002edc:	4603      	mov	r3, r0
 8002ede:	80bb      	strh	r3, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	807b      	strh	r3, [r7, #2]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8002ee8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002eec:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	dd0b      	ble.n	8002f0c <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8002ef4:	88bb      	ldrh	r3, [r7, #4]
 8002ef6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002ef8:	883b      	ldrh	r3, [r7, #0]
 8002efa:	80bb      	strh	r3, [r7, #4]
 8002efc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002efe:	803b      	strh	r3, [r7, #0]
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002f04:	887b      	ldrh	r3, [r7, #2]
 8002f06:	80fb      	strh	r3, [r7, #6]
 8002f08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f0a:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8002f0c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002f10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002f14:	429a      	cmp	r2, r3
 8002f16:	dd0f      	ble.n	8002f38 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8002f18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f1c:	847b      	strh	r3, [r7, #34]	; 0x22
 8002f1e:	883b      	ldrh	r3, [r7, #0]
 8002f20:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002f24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f26:	803b      	strh	r3, [r7, #0]
 8002f28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f2c:	843b      	strh	r3, [r7, #32]
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002f34:	8c3b      	ldrh	r3, [r7, #32]
 8002f36:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8002f38:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002f3c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	dd0b      	ble.n	8002f5c <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8002f44:	88bb      	ldrh	r3, [r7, #4]
 8002f46:	83fb      	strh	r3, [r7, #30]
 8002f48:	883b      	ldrh	r3, [r7, #0]
 8002f4a:	80bb      	strh	r3, [r7, #4]
 8002f4c:	8bfb      	ldrh	r3, [r7, #30]
 8002f4e:	803b      	strh	r3, [r7, #0]
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	83bb      	strh	r3, [r7, #28]
 8002f54:	887b      	ldrh	r3, [r7, #2]
 8002f56:	80fb      	strh	r3, [r7, #6]
 8002f58:	8bbb      	ldrh	r3, [r7, #28]
 8002f5a:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8002f5c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002f60:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d136      	bne.n	8002fd6 <Displ_fillTriangle+0x10c>
        a = b = x0;
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002f6e:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8002f70:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002f74:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	da02      	bge.n	8002f82 <Displ_fillTriangle+0xb8>
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002f80:	e007      	b.n	8002f92 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8002f82:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002f86:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	dd01      	ble.n	8002f92 <Displ_fillTriangle+0xc8>
 8002f8e:	887b      	ldrh	r3, [r7, #2]
 8002f90:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8002f92:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8002f96:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	da03      	bge.n	8002fa6 <Displ_fillTriangle+0xdc>
 8002f9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fa2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002fa4:	e008      	b.n	8002fb8 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8002fa6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8002faa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	dd02      	ble.n	8002fb8 <Displ_fillTriangle+0xee>
 8002fb2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fb6:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8002fb8:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002fbc:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8002fc0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002fc4:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8002fc8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	4623      	mov	r3, r4
 8002fd0:	f7ff fe4a 	bl	8002c68 <Displ_Line>
        return;
 8002fd4:	e0d2      	b.n	800317c <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8002fe0:	883a      	ldrh	r2, [r7, #0]
 8002fe2:	88bb      	ldrh	r3, [r7, #4]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8002fea:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8002ff6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002ffa:	88bb      	ldrh	r3, [r7, #4]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8003002:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003006:	887b      	ldrh	r3, [r7, #2]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	b29b      	uxth	r3, r3
 800300c:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 800300e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003012:	883b      	ldrh	r3, [r7, #0]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	b29b      	uxth	r3, r3
 8003018:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 800301a:	2300      	movs	r3, #0
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8003022:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003026:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800302a:	429a      	cmp	r2, r3
 800302c:	d102      	bne.n	8003034 <Displ_fillTriangle+0x16a>
 800302e:	883b      	ldrh	r3, [r7, #0]
 8003030:	863b      	strh	r3, [r7, #48]	; 0x30
 8003032:	e003      	b.n	800303c <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8003034:	883b      	ldrh	r3, [r7, #0]
 8003036:	3b01      	subs	r3, #1
 8003038:	b29b      	uxth	r3, r3
 800303a:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 800303c:	88bb      	ldrh	r3, [r7, #4]
 800303e:	867b      	strh	r3, [r7, #50]	; 0x32
 8003040:	e03d      	b.n	80030be <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8003042:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003048:	fb92 f3f3 	sdiv	r3, r2, r3
 800304c:	b29a      	uxth	r2, r3
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	4413      	add	r3, r2
 8003052:	b29b      	uxth	r3, r3
 8003054:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8003056:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800305a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800305c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003060:	b29a      	uxth	r2, r3
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	4413      	add	r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 800306a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800306e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003070:	4413      	add	r3, r2
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003074:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800307a:	4413      	add	r3, r2
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800307e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8003082:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003086:	429a      	cmp	r2, r3
 8003088:	dd05      	ble.n	8003096 <Displ_fillTriangle+0x1cc>
 800308a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800308c:	81bb      	strh	r3, [r7, #12]
 800308e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003090:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003092:	89bb      	ldrh	r3, [r7, #12]
 8003094:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8003096:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 800309a:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800309e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80030a2:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80030a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	4623      	mov	r3, r4
 80030ae:	f7ff fddb 	bl	8002c68 <Displ_Line>
    for(y=y0; y<=last; y++) {
 80030b2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	867b      	strh	r3, [r7, #50]	; 0x32
 80030be:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80030c2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80030c6:	429a      	cmp	r2, r3
 80030c8:	ddbb      	ble.n	8003042 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 80030ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80030ce:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80030d2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80030d6:	1a8a      	subs	r2, r1, r2
 80030d8:	fb02 f303 	mul.w	r3, r2, r3
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 80030de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80030e2:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80030e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80030ea:	1a8a      	subs	r2, r1, r2
 80030ec:	fb02 f303 	mul.w	r3, r2, r3
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 80030f2:	e03d      	b.n	8003170 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 80030f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80030f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80030fe:	b29a      	uxth	r2, r3
 8003100:	887b      	ldrh	r3, [r7, #2]
 8003102:	4413      	add	r3, r2
 8003104:	b29b      	uxth	r3, r3
 8003106:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8003108:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800310c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800310e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003112:	b29a      	uxth	r2, r3
 8003114:	88fb      	ldrh	r3, [r7, #6]
 8003116:	4413      	add	r3, r2
 8003118:	b29b      	uxth	r3, r3
 800311a:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 800311c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003122:	4413      	add	r3, r2
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003126:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800312a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800312c:	4413      	add	r3, r2
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8003130:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8003134:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003138:	429a      	cmp	r2, r3
 800313a:	dd05      	ble.n	8003148 <Displ_fillTriangle+0x27e>
 800313c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800313e:	81fb      	strh	r3, [r7, #14]
 8003140:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003142:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003144:	89fb      	ldrh	r3, [r7, #14]
 8003146:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8003148:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 800314c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8003150:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8003154:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8003158:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	4623      	mov	r3, r4
 8003160:	f7ff fd82 	bl	8002c68 <Displ_Line>
    for(; y<=y2; y++) {
 8003164:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003168:	b29b      	uxth	r3, r3
 800316a:	3301      	adds	r3, #1
 800316c:	b29b      	uxth	r3, r3
 800316e:	867b      	strh	r3, [r7, #50]	; 0x32
 8003170:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8003174:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003178:	429a      	cmp	r2, r3
 800317a:	ddbb      	ble.n	80030f4 <Displ_fillTriangle+0x22a>
    }
}
 800317c:	373c      	adds	r7, #60	; 0x3c
 800317e:	46bd      	mov	sp, r7
 8003180:	bd90      	pop	{r4, r7, pc}
	...

08003184 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031bc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003188:	f7ff f9f0 	bl	800256c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800318c:	480c      	ldr	r0, [pc, #48]	; (80031c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800318e:	490d      	ldr	r1, [pc, #52]	; (80031c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003190:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <LoopForever+0xe>)
  movs r3, #0
 8003192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003194:	e002      	b.n	800319c <LoopCopyDataInit>

08003196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800319a:	3304      	adds	r3, #4

0800319c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800319c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800319e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031a0:	d3f9      	bcc.n	8003196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031a2:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80031a4:	4c0a      	ldr	r4, [pc, #40]	; (80031d0 <LoopForever+0x16>)
  movs r3, #0
 80031a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a8:	e001      	b.n	80031ae <LoopFillZerobss>

080031aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031ac:	3204      	adds	r2, #4

080031ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031b0:	d3fb      	bcc.n	80031aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031b2:	f003 fe25 	bl	8006e00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031b6:	f7fd fa77 	bl	80006a8 <main>

080031ba <LoopForever>:

LoopForever:
    b LoopForever
 80031ba:	e7fe      	b.n	80031ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031bc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80031c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031c4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80031c8:	080082a0 	.word	0x080082a0
  ldr r2, =_sbss
 80031cc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80031d0:	20001654 	.word	0x20001654

080031d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031d4:	e7fe      	b.n	80031d4 <ADC1_IRQHandler>
	...

080031d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_Init+0x28>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a07      	ldr	r2, [pc, #28]	; (8003200 <HAL_Init+0x28>)
 80031e2:	f043 0310 	orr.w	r3, r3, #16
 80031e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e8:	2003      	movs	r0, #3
 80031ea:	f000 f94f 	bl	800348c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ee:	200f      	movs	r0, #15
 80031f0:	f000 f808 	bl	8003204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031f4:	f7fe ffae 	bl	8002154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40022000 	.word	0x40022000

08003204 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_InitTick+0x54>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_InitTick+0x58>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	4619      	mov	r1, r3
 8003216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800321a:	fbb3 f3f1 	udiv	r3, r3, r1
 800321e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f967 	bl	80034f6 <HAL_SYSTICK_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e00e      	b.n	8003250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b0f      	cmp	r3, #15
 8003236:	d80a      	bhi.n	800324e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003238:	2200      	movs	r2, #0
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	f04f 30ff 	mov.w	r0, #4294967295
 8003240:	f000 f92f 	bl	80034a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003244:	4a06      	ldr	r2, [pc, #24]	; (8003260 <HAL_InitTick+0x5c>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000014 	.word	0x20000014
 800325c:	20000024 	.word	0x20000024
 8003260:	20000020 	.word	0x20000020

08003264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_IncTick+0x20>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_IncTick+0x24>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4413      	add	r3, r2
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <HAL_IncTick+0x24>)
 8003276:	6013      	str	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000024 	.word	0x20000024
 8003288:	20001640 	.word	0x20001640

0800328c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_GetTick+0x14>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20001640 	.word	0x20001640

080032a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032ac:	f7ff ffee 	bl	800328c <HAL_GetTick>
 80032b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d005      	beq.n	80032ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_Delay+0x44>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80032ca:	bf00      	nop
 80032cc:	f7ff ffde 	bl	800328c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d8f7      	bhi.n	80032cc <HAL_Delay+0x28>
  {
  }
}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000024 	.word	0x20000024

080032ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003308:	4013      	ands	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331e:	4a04      	ldr	r2, [pc, #16]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	60d3      	str	r3, [r2, #12]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <__NVIC_GetPriorityGrouping+0x18>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 0307 	and.w	r3, r3, #7
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	2b00      	cmp	r3, #0
 8003360:	db0b      	blt.n	800337a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <__NVIC_EnableIRQ+0x38>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	2b00      	cmp	r3, #0
 800339e:	db0a      	blt.n	80033b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	490c      	ldr	r1, [pc, #48]	; (80033d8 <__NVIC_SetPriority+0x4c>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	440b      	add	r3, r1
 80033b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b4:	e00a      	b.n	80033cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <__NVIC_SetPriority+0x50>)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	3b04      	subs	r3, #4
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	440b      	add	r3, r1
 80033ca:	761a      	strb	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	bf28      	it	cs
 80033fe:	2304      	movcs	r3, #4
 8003400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	2b06      	cmp	r3, #6
 8003408:	d902      	bls.n	8003410 <NVIC_EncodePriority+0x30>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3b03      	subs	r3, #3
 800340e:	e000      	b.n	8003412 <NVIC_EncodePriority+0x32>
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	f04f 31ff 	mov.w	r1, #4294967295
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43d9      	mvns	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	4313      	orrs	r3, r2
         );
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	; 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003458:	d301      	bcc.n	800345e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345a:	2301      	movs	r3, #1
 800345c:	e00f      	b.n	800347e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <SysTick_Config+0x40>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003466:	210f      	movs	r1, #15
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	f7ff ff8e 	bl	800338c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <SysTick_Config+0x40>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003476:	4b04      	ldr	r3, [pc, #16]	; (8003488 <SysTick_Config+0x40>)
 8003478:	2207      	movs	r2, #7
 800347a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	e000e010 	.word	0xe000e010

0800348c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff29 	bl	80032ec <__NVIC_SetPriorityGrouping>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b4:	f7ff ff3e 	bl	8003334 <__NVIC_GetPriorityGrouping>
 80034b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	6978      	ldr	r0, [r7, #20]
 80034c0:	f7ff ff8e 	bl	80033e0 <NVIC_EncodePriority>
 80034c4:	4602      	mov	r2, r0
 80034c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff5d 	bl	800338c <__NVIC_SetPriority>
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff31 	bl	8003350 <__NVIC_EnableIRQ>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ffa2 	bl	8003448 <SysTick_Config>
 8003504:	4603      	mov	r3, r0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800351e:	e14e      	b.n	80037be <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	2101      	movs	r1, #1
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	4013      	ands	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8140 	beq.w	80037b8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d005      	beq.n	8003550 <HAL_GPIO_Init+0x40>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d130      	bne.n	80035b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	2203      	movs	r2, #3
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003586:	2201      	movs	r2, #1
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f003 0201 	and.w	r2, r3, #1
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d017      	beq.n	80035ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	2203      	movs	r2, #3
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d123      	bne.n	8003642 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	08da      	lsrs	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3208      	adds	r2, #8
 8003602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003606:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	220f      	movs	r2, #15
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	08da      	lsrs	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3208      	adds	r2, #8
 800363c:	6939      	ldr	r1, [r7, #16]
 800363e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	2203      	movs	r2, #3
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0203 	and.w	r2, r3, #3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 809a 	beq.w	80037b8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003684:	4b55      	ldr	r3, [pc, #340]	; (80037dc <HAL_GPIO_Init+0x2cc>)
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	4a54      	ldr	r2, [pc, #336]	; (80037dc <HAL_GPIO_Init+0x2cc>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6193      	str	r3, [r2, #24]
 8003690:	4b52      	ldr	r3, [pc, #328]	; (80037dc <HAL_GPIO_Init+0x2cc>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800369c:	4a50      	ldr	r2, [pc, #320]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	089b      	lsrs	r3, r3, #2
 80036a2:	3302      	adds	r3, #2
 80036a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	220f      	movs	r2, #15
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036c6:	d013      	beq.n	80036f0 <HAL_GPIO_Init+0x1e0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a46      	ldr	r2, [pc, #280]	; (80037e4 <HAL_GPIO_Init+0x2d4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00d      	beq.n	80036ec <HAL_GPIO_Init+0x1dc>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a45      	ldr	r2, [pc, #276]	; (80037e8 <HAL_GPIO_Init+0x2d8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d007      	beq.n	80036e8 <HAL_GPIO_Init+0x1d8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a44      	ldr	r2, [pc, #272]	; (80037ec <HAL_GPIO_Init+0x2dc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d101      	bne.n	80036e4 <HAL_GPIO_Init+0x1d4>
 80036e0:	2303      	movs	r3, #3
 80036e2:	e006      	b.n	80036f2 <HAL_GPIO_Init+0x1e2>
 80036e4:	2305      	movs	r3, #5
 80036e6:	e004      	b.n	80036f2 <HAL_GPIO_Init+0x1e2>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e002      	b.n	80036f2 <HAL_GPIO_Init+0x1e2>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <HAL_GPIO_Init+0x1e2>
 80036f0:	2300      	movs	r3, #0
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	f002 0203 	and.w	r2, r2, #3
 80036f8:	0092      	lsls	r2, r2, #2
 80036fa:	4093      	lsls	r3, r2
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003702:	4937      	ldr	r1, [pc, #220]	; (80037e0 <HAL_GPIO_Init+0x2d0>)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	089b      	lsrs	r3, r3, #2
 8003708:	3302      	adds	r3, #2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003710:	4b37      	ldr	r3, [pc, #220]	; (80037f0 <HAL_GPIO_Init+0x2e0>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003734:	4a2e      	ldr	r2, [pc, #184]	; (80037f0 <HAL_GPIO_Init+0x2e0>)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800373a:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <HAL_GPIO_Init+0x2e0>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	43db      	mvns	r3, r3
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800375e:	4a24      	ldr	r2, [pc, #144]	; (80037f0 <HAL_GPIO_Init+0x2e0>)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003764:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <HAL_GPIO_Init+0x2e0>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	43db      	mvns	r3, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003788:	4a19      	ldr	r2, [pc, #100]	; (80037f0 <HAL_GPIO_Init+0x2e0>)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800378e:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <HAL_GPIO_Init+0x2e0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	43db      	mvns	r3, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037b2:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <HAL_GPIO_Init+0x2e0>)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3301      	adds	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	fa22 f303 	lsr.w	r3, r2, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f47f aea9 	bne.w	8003520 <HAL_GPIO_Init+0x10>
  }
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40010000 	.word	0x40010000
 80037e4:	48000400 	.word	0x48000400
 80037e8:	48000800 	.word	0x48000800
 80037ec:	48000c00 	.word	0x48000c00
 80037f0:	40010400 	.word	0x40010400

080037f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	887b      	ldrh	r3, [r7, #2]
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
 8003810:	e001      	b.n	8003816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003812:	2300      	movs	r3, #0
 8003814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003816:	7bfb      	ldrb	r3, [r7, #15]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	807b      	strh	r3, [r7, #2]
 8003830:	4613      	mov	r3, r2
 8003832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003834:	787b      	ldrb	r3, [r7, #1]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800383a:	887a      	ldrh	r2, [r7, #2]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003840:	e002      	b.n	8003848 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800385e:	4b08      	ldr	r3, [pc, #32]	; (8003880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d006      	beq.n	8003878 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800386a:	4a05      	ldr	r2, [pc, #20]	; (8003880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd f974 	bl	8000b60 <HAL_GPIO_EXTI_Callback>
  }
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40010400 	.word	0x40010400

08003884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e081      	b.n	800399a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fe fc76 	bl	800219c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d107      	bne.n	80038fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	e006      	b.n	800390c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800390a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d104      	bne.n	800391e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800391c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800392c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003930:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003940:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69d9      	ldr	r1, [r3, #28]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1a      	ldr	r2, [r3, #32]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	817b      	strh	r3, [r7, #10]
 80039b6:	460b      	mov	r3, r1
 80039b8:	813b      	strh	r3, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	f040 80f9 	bne.w	8003bbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_I2C_Mem_Write+0x34>
 80039d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0ed      	b.n	8003bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_I2C_Mem_Write+0x4e>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e0e6      	b.n	8003bc0 <HAL_I2C_Mem_Write+0x21c>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039fa:	f7ff fc47 	bl	800328c <HAL_GetTick>
 80039fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	2319      	movs	r3, #25
 8003a06:	2201      	movs	r2, #1
 8003a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fbcd 	bl	80041ac <I2C_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0d1      	b.n	8003bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2221      	movs	r2, #33	; 0x21
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2240      	movs	r2, #64	; 0x40
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a3a      	ldr	r2, [r7, #32]
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a44:	88f8      	ldrh	r0, [r7, #6]
 8003a46:	893a      	ldrh	r2, [r7, #8]
 8003a48:	8979      	ldrh	r1, [r7, #10]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	4603      	mov	r3, r0
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 fadd 	bl	8004014 <I2C_RequestMemoryWrite>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0a9      	b.n	8003bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2bff      	cmp	r3, #255	; 0xff
 8003a74:	d90e      	bls.n	8003a94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	22ff      	movs	r2, #255	; 0xff
 8003a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	8979      	ldrh	r1, [r7, #10]
 8003a84:	2300      	movs	r3, #0
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 fd47 	bl	8004520 <I2C_TransferConfig>
 8003a92:	e00f      	b.n	8003ab4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	8979      	ldrh	r1, [r7, #10]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fd36 	bl	8004520 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 fbc6 	bl	800424a <I2C_WaitOnTXISFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e07b      	b.n	8003bc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d034      	beq.n	8003b6c <HAL_I2C_Mem_Write+0x1c8>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d130      	bne.n	8003b6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	2200      	movs	r2, #0
 8003b12:	2180      	movs	r1, #128	; 0x80
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fb49 	bl	80041ac <I2C_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e04d      	b.n	8003bc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2bff      	cmp	r3, #255	; 0xff
 8003b2c:	d90e      	bls.n	8003b4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	22ff      	movs	r2, #255	; 0xff
 8003b32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	8979      	ldrh	r1, [r7, #10]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 fceb 	bl	8004520 <I2C_TransferConfig>
 8003b4a:	e00f      	b.n	8003b6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	8979      	ldrh	r1, [r7, #10]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fcda 	bl	8004520 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d19e      	bne.n	8003ab4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 fbac 	bl	80042d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e01a      	b.n	8003bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6859      	ldr	r1, [r3, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <HAL_I2C_Mem_Write+0x224>)
 8003b9e:	400b      	ands	r3, r1
 8003ba0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e000      	b.n	8003bc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003bbe:	2302      	movs	r3, #2
  }
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	fe00e800 	.word	0xfe00e800

08003bcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	4608      	mov	r0, r1
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4603      	mov	r3, r0
 8003bdc:	817b      	strh	r3, [r7, #10]
 8003bde:	460b      	mov	r3, r1
 8003be0:	813b      	strh	r3, [r7, #8]
 8003be2:	4613      	mov	r3, r2
 8003be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	f040 80fd 	bne.w	8003dee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <HAL_I2C_Mem_Read+0x34>
 8003bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0f1      	b.n	8003df0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_I2C_Mem_Read+0x4e>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e0ea      	b.n	8003df0 <HAL_I2C_Mem_Read+0x224>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c22:	f7ff fb33 	bl	800328c <HAL_GetTick>
 8003c26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2319      	movs	r3, #25
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fab9 	bl	80041ac <I2C_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0d5      	b.n	8003df0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2222      	movs	r2, #34	; 0x22
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2240      	movs	r2, #64	; 0x40
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a3a      	ldr	r2, [r7, #32]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c6c:	88f8      	ldrh	r0, [r7, #6]
 8003c6e:	893a      	ldrh	r2, [r7, #8]
 8003c70:	8979      	ldrh	r1, [r7, #10]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fa1d 	bl	80040bc <I2C_RequestMemoryRead>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0ad      	b.n	8003df0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2bff      	cmp	r3, #255	; 0xff
 8003c9c:	d90e      	bls.n	8003cbc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	22ff      	movs	r2, #255	; 0xff
 8003ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	8979      	ldrh	r1, [r7, #10]
 8003cac:	4b52      	ldr	r3, [pc, #328]	; (8003df8 <HAL_I2C_Mem_Read+0x22c>)
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fc33 	bl	8004520 <I2C_TransferConfig>
 8003cba:	e00f      	b.n	8003cdc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	8979      	ldrh	r1, [r7, #10]
 8003cce:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <HAL_I2C_Mem_Read+0x22c>)
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fc22 	bl	8004520 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2104      	movs	r1, #4
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fa60 	bl	80041ac <I2C_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e07c      	b.n	8003df0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d034      	beq.n	8003d9c <HAL_I2C_Mem_Read+0x1d0>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d130      	bne.n	8003d9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	2200      	movs	r2, #0
 8003d42:	2180      	movs	r1, #128	; 0x80
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fa31 	bl	80041ac <I2C_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e04d      	b.n	8003df0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2bff      	cmp	r3, #255	; 0xff
 8003d5c:	d90e      	bls.n	8003d7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	22ff      	movs	r2, #255	; 0xff
 8003d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	8979      	ldrh	r1, [r7, #10]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 fbd3 	bl	8004520 <I2C_TransferConfig>
 8003d7a:	e00f      	b.n	8003d9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	8979      	ldrh	r1, [r7, #10]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 fbc2 	bl	8004520 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d19a      	bne.n	8003cdc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fa94 	bl	80042d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e01a      	b.n	8003df0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6859      	ldr	r1, [r3, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_I2C_Mem_Read+0x230>)
 8003dce:	400b      	ands	r3, r1
 8003dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e000      	b.n	8003df0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
  }
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	80002400 	.word	0x80002400
 8003dfc:	fe00e800 	.word	0xfe00e800

08003e00 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	; 0x28
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	f040 80f3 	bne.w	8004008 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e30:	d101      	bne.n	8003e36 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
 8003e34:	e0e9      	b.n	800400a <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_I2C_IsDeviceReady+0x44>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e0e2      	b.n	800400a <HAL_I2C_IsDeviceReady+0x20a>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2224      	movs	r2, #36	; 0x24
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d107      	bne.n	8003e72 <HAL_I2C_IsDeviceReady+0x72>
 8003e62:	897b      	ldrh	r3, [r7, #10]
 8003e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e70:	e006      	b.n	8003e80 <HAL_I2C_IsDeviceReady+0x80>
 8003e72:	897b      	ldrh	r3, [r7, #10]
 8003e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003e86:	f7ff fa01 	bl	800328c <HAL_GetTick>
 8003e8a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	bf0c      	ite	eq
 8003e9a:	2301      	moveq	r3, #1
 8003e9c:	2300      	movne	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003eb8:	e034      	b.n	8003f24 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d01a      	beq.n	8003ef8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ec2:	f7ff f9e3 	bl	800328c <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d302      	bcc.n	8003ed8 <HAL_I2C_IsDeviceReady+0xd8>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10f      	bne.n	8003ef8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e088      	b.n	800400a <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	bf0c      	ite	eq
 8003f06:	2301      	moveq	r3, #1
 8003f08:	2300      	movne	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f24:	7ffb      	ldrb	r3, [r7, #31]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <HAL_I2C_IsDeviceReady+0x130>
 8003f2a:	7fbb      	ldrb	r3, [r7, #30]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0c4      	beq.n	8003eba <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d01a      	beq.n	8003f74 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2200      	movs	r2, #0
 8003f46:	2120      	movs	r1, #32
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f92f 	bl	80041ac <I2C_WaitOnFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e058      	b.n	800400a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e04a      	b.n	800400a <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2120      	movs	r1, #32
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f914 	bl	80041ac <I2C_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e03d      	b.n	800400a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2210      	movs	r2, #16
 8003f94:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d118      	bne.n	8003fd8 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fb4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2120      	movs	r1, #32
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f8f3 	bl	80041ac <I2C_WaitOnFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e01c      	b.n	800400a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	f63f af39 	bhi.w	8003e5a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff4:	f043 0220 	orr.w	r2, r3, #32
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	4608      	mov	r0, r1
 800401e:	4611      	mov	r1, r2
 8004020:	461a      	mov	r2, r3
 8004022:	4603      	mov	r3, r0
 8004024:	817b      	strh	r3, [r7, #10]
 8004026:	460b      	mov	r3, r1
 8004028:	813b      	strh	r3, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	b2da      	uxtb	r2, r3
 8004032:	8979      	ldrh	r1, [r7, #10]
 8004034:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <I2C_RequestMemoryWrite+0xa4>)
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fa6f 	bl	8004520 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	69b9      	ldr	r1, [r7, #24]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f8ff 	bl	800424a <I2C_WaitOnTXISFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e02c      	b.n	80040b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d105      	bne.n	8004068 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800405c:	893b      	ldrh	r3, [r7, #8]
 800405e:	b2da      	uxtb	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	629a      	str	r2, [r3, #40]	; 0x28
 8004066:	e015      	b.n	8004094 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004068:	893b      	ldrh	r3, [r7, #8]
 800406a:	0a1b      	lsrs	r3, r3, #8
 800406c:	b29b      	uxth	r3, r3
 800406e:	b2da      	uxtb	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	69b9      	ldr	r1, [r7, #24]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f8e5 	bl	800424a <I2C_WaitOnTXISFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e012      	b.n	80040b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800408a:	893b      	ldrh	r3, [r7, #8]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2200      	movs	r2, #0
 800409c:	2180      	movs	r1, #128	; 0x80
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f884 	bl	80041ac <I2C_WaitOnFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	80002000 	.word	0x80002000

080040bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	4608      	mov	r0, r1
 80040c6:	4611      	mov	r1, r2
 80040c8:	461a      	mov	r2, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	817b      	strh	r3, [r7, #10]
 80040ce:	460b      	mov	r3, r1
 80040d0:	813b      	strh	r3, [r7, #8]
 80040d2:	4613      	mov	r3, r2
 80040d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	8979      	ldrh	r1, [r7, #10]
 80040dc:	4b20      	ldr	r3, [pc, #128]	; (8004160 <I2C_RequestMemoryRead+0xa4>)
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	2300      	movs	r3, #0
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fa1c 	bl	8004520 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	69b9      	ldr	r1, [r7, #24]
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f8ac 	bl	800424a <I2C_WaitOnTXISFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e02c      	b.n	8004156 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d105      	bne.n	800410e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004102:	893b      	ldrh	r3, [r7, #8]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	629a      	str	r2, [r3, #40]	; 0x28
 800410c:	e015      	b.n	800413a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800410e:	893b      	ldrh	r3, [r7, #8]
 8004110:	0a1b      	lsrs	r3, r3, #8
 8004112:	b29b      	uxth	r3, r3
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	69b9      	ldr	r1, [r7, #24]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f892 	bl	800424a <I2C_WaitOnTXISFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e012      	b.n	8004156 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004130:	893b      	ldrh	r3, [r7, #8]
 8004132:	b2da      	uxtb	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2200      	movs	r2, #0
 8004142:	2140      	movs	r1, #64	; 0x40
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f831 	bl	80041ac <I2C_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	80002000 	.word	0x80002000

08004164 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b02      	cmp	r3, #2
 8004178:	d103      	bne.n	8004182 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2200      	movs	r2, #0
 8004180:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b01      	cmp	r3, #1
 800418e:	d007      	beq.n	80041a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	619a      	str	r2, [r3, #24]
  }
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041bc:	e031      	b.n	8004222 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c4:	d02d      	beq.n	8004222 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c6:	f7ff f861 	bl	800328c <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d302      	bcc.n	80041dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d122      	bne.n	8004222 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	4013      	ands	r3, r2
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d113      	bne.n	8004222 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	f043 0220 	orr.w	r2, r3, #32
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e00f      	b.n	8004242 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4013      	ands	r3, r2
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	429a      	cmp	r2, r3
 8004230:	bf0c      	ite	eq
 8004232:	2301      	moveq	r3, #1
 8004234:	2300      	movne	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	429a      	cmp	r2, r3
 800423e:	d0be      	beq.n	80041be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004256:	e033      	b.n	80042c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f87f 	bl	8004360 <I2C_IsErrorOccurred>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e031      	b.n	80042d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004272:	d025      	beq.n	80042c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004274:	f7ff f80a 	bl	800328c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	429a      	cmp	r2, r3
 8004282:	d302      	bcc.n	800428a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d11a      	bne.n	80042c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b02      	cmp	r3, #2
 8004296:	d013      	beq.n	80042c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429c:	f043 0220 	orr.w	r2, r3, #32
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e007      	b.n	80042d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d1c4      	bne.n	8004258 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042e4:	e02f      	b.n	8004346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f838 	bl	8004360 <I2C_IsErrorOccurred>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e02d      	b.n	8004356 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fa:	f7fe ffc7 	bl	800328c <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	429a      	cmp	r2, r3
 8004308:	d302      	bcc.n	8004310 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d11a      	bne.n	8004346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b20      	cmp	r3, #32
 800431c:	d013      	beq.n	8004346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	f043 0220 	orr.w	r2, r3, #32
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e007      	b.n	8004356 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b20      	cmp	r3, #32
 8004352:	d1c8      	bne.n	80042e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	; 0x28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d068      	beq.n	800445e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2210      	movs	r2, #16
 8004392:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004394:	e049      	b.n	800442a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439c:	d045      	beq.n	800442a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800439e:	f7fe ff75 	bl	800328c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d302      	bcc.n	80043b4 <I2C_IsErrorOccurred+0x54>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d13a      	bne.n	800442a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d6:	d121      	bne.n	800441c <I2C_IsErrorOccurred+0xbc>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043de:	d01d      	beq.n	800441c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d01a      	beq.n	800441c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80043f6:	f7fe ff49 	bl	800328c <HAL_GetTick>
 80043fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043fc:	e00e      	b.n	800441c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043fe:	f7fe ff45 	bl	800328c <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b19      	cmp	r3, #25
 800440a:	d907      	bls.n	800441c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	f043 0320 	orr.w	r3, r3, #32
 8004412:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800441a:	e006      	b.n	800442a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b20      	cmp	r3, #32
 8004428:	d1e9      	bne.n	80043fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b20      	cmp	r3, #32
 8004436:	d003      	beq.n	8004440 <I2C_IsErrorOccurred+0xe0>
 8004438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0aa      	beq.n	8004396 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004444:	2b00      	cmp	r3, #0
 8004446:	d103      	bne.n	8004450 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2220      	movs	r2, #32
 800444e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	f043 0304 	orr.w	r3, r3, #4
 8004456:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00b      	beq.n	8004488 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004480:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	f043 0308 	orr.w	r3, r3, #8
 8004498:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00b      	beq.n	80044cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	f043 0302 	orr.w	r3, r3, #2
 80044ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80044cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01c      	beq.n	800450e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7ff fe45 	bl	8004164 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6859      	ldr	r1, [r3, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4b0d      	ldr	r3, [pc, #52]	; (800451c <I2C_IsErrorOccurred+0x1bc>)
 80044e6:	400b      	ands	r3, r1
 80044e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800450e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004512:	4618      	mov	r0, r3
 8004514:	3728      	adds	r7, #40	; 0x28
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	fe00e800 	.word	0xfe00e800

08004520 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	607b      	str	r3, [r7, #4]
 800452a:	460b      	mov	r3, r1
 800452c:	817b      	strh	r3, [r7, #10]
 800452e:	4613      	mov	r3, r2
 8004530:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004538:	7a7b      	ldrb	r3, [r7, #9]
 800453a:	041b      	lsls	r3, r3, #16
 800453c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004540:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	4313      	orrs	r3, r2
 800454a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800454e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	0d5b      	lsrs	r3, r3, #21
 800455a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800455e:	4b08      	ldr	r3, [pc, #32]	; (8004580 <I2C_TransferConfig+0x60>)
 8004560:	430b      	orrs	r3, r1
 8004562:	43db      	mvns	r3, r3
 8004564:	ea02 0103 	and.w	r1, r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	03ff63ff 	.word	0x03ff63ff

08004584 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b20      	cmp	r3, #32
 8004598:	d138      	bne.n	800460c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e032      	b.n	800460e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2224      	movs	r2, #36	; 0x24
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6819      	ldr	r1, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	e000      	b.n	800460e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800460c:	2302      	movs	r3, #2
  }
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b20      	cmp	r3, #32
 800462e:	d139      	bne.n	80046a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800463a:	2302      	movs	r3, #2
 800463c:	e033      	b.n	80046a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2224      	movs	r2, #36	; 0x24
 800464a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800466c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e000      	b.n	80046a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046a4:	2302      	movs	r3, #2
  }
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
	...

080046b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	f001 b823 	b.w	8005720 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 817d 	beq.w	80049ea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80046f0:	4bbc      	ldr	r3, [pc, #752]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d00c      	beq.n	8004716 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046fc:	4bb9      	ldr	r3, [pc, #740]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 030c 	and.w	r3, r3, #12
 8004704:	2b08      	cmp	r3, #8
 8004706:	d15c      	bne.n	80047c2 <HAL_RCC_OscConfig+0x10e>
 8004708:	4bb6      	ldr	r3, [pc, #728]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004714:	d155      	bne.n	80047c2 <HAL_RCC_OscConfig+0x10e>
 8004716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800471a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004722:	fa93 f3a3 	rbit	r3, r3
 8004726:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800472a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	d102      	bne.n	8004748 <HAL_RCC_OscConfig+0x94>
 8004742:	4ba8      	ldr	r3, [pc, #672]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	e015      	b.n	8004774 <HAL_RCC_OscConfig+0xc0>
 8004748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800474c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004750:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800475c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004760:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004764:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004768:	fa93 f3a3 	rbit	r3, r3
 800476c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004770:	4b9c      	ldr	r3, [pc, #624]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004778:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800477c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004780:	fa92 f2a2 	rbit	r2, r2
 8004784:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004788:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800478c:	fab2 f282 	clz	r2, r2
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	f042 0220 	orr.w	r2, r2, #32
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	f002 021f 	and.w	r2, r2, #31
 800479c:	2101      	movs	r1, #1
 800479e:	fa01 f202 	lsl.w	r2, r1, r2
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 811f 	beq.w	80049e8 <HAL_RCC_OscConfig+0x334>
 80047aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f040 8116 	bne.w	80049e8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f000 bfaf 	b.w	8005720 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d2:	d106      	bne.n	80047e2 <HAL_RCC_OscConfig+0x12e>
 80047d4:	4b83      	ldr	r3, [pc, #524]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a82      	ldr	r2, [pc, #520]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 80047da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	e036      	b.n	8004850 <HAL_RCC_OscConfig+0x19c>
 80047e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10c      	bne.n	800480c <HAL_RCC_OscConfig+0x158>
 80047f2:	4b7c      	ldr	r3, [pc, #496]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a7b      	ldr	r2, [pc, #492]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 80047f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	4b79      	ldr	r3, [pc, #484]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a78      	ldr	r2, [pc, #480]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 8004804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	e021      	b.n	8004850 <HAL_RCC_OscConfig+0x19c>
 800480c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004810:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800481c:	d10c      	bne.n	8004838 <HAL_RCC_OscConfig+0x184>
 800481e:	4b71      	ldr	r3, [pc, #452]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a70      	ldr	r2, [pc, #448]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 8004824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	4b6e      	ldr	r3, [pc, #440]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a6d      	ldr	r2, [pc, #436]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 8004830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	e00b      	b.n	8004850 <HAL_RCC_OscConfig+0x19c>
 8004838:	4b6a      	ldr	r3, [pc, #424]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a69      	ldr	r2, [pc, #420]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 800483e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	4b67      	ldr	r3, [pc, #412]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a66      	ldr	r2, [pc, #408]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 800484a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004850:	4b64      	ldr	r3, [pc, #400]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	f023 020f 	bic.w	r2, r3, #15
 8004858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	495f      	ldr	r1, [pc, #380]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 8004866:	4313      	orrs	r3, r2
 8004868:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800486a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d059      	beq.n	800492e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487a:	f7fe fd07 	bl	800328c <HAL_GetTick>
 800487e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004882:	e00a      	b.n	800489a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004884:	f7fe fd02 	bl	800328c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b64      	cmp	r3, #100	; 0x64
 8004892:	d902      	bls.n	800489a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	f000 bf43 	b.w	8005720 <HAL_RCC_OscConfig+0x106c>
 800489a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800489e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80048a6:	fa93 f3a3 	rbit	r3, r3
 80048aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80048ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d102      	bne.n	80048cc <HAL_RCC_OscConfig+0x218>
 80048c6:	4b47      	ldr	r3, [pc, #284]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	e015      	b.n	80048f8 <HAL_RCC_OscConfig+0x244>
 80048cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048d0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80048e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048e4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80048e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80048ec:	fa93 f3a3 	rbit	r3, r3
 80048f0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80048f4:	4b3b      	ldr	r3, [pc, #236]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048fc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004900:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004904:	fa92 f2a2 	rbit	r2, r2
 8004908:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800490c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004910:	fab2 f282 	clz	r2, r2
 8004914:	b2d2      	uxtb	r2, r2
 8004916:	f042 0220 	orr.w	r2, r2, #32
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	f002 021f 	and.w	r2, r2, #31
 8004920:	2101      	movs	r1, #1
 8004922:	fa01 f202 	lsl.w	r2, r1, r2
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ab      	beq.n	8004884 <HAL_RCC_OscConfig+0x1d0>
 800492c:	e05d      	b.n	80049ea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492e:	f7fe fcad 	bl	800328c <HAL_GetTick>
 8004932:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004936:	e00a      	b.n	800494e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004938:	f7fe fca8 	bl	800328c <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b64      	cmp	r3, #100	; 0x64
 8004946:	d902      	bls.n	800494e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	f000 bee9 	b.w	8005720 <HAL_RCC_OscConfig+0x106c>
 800494e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004952:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800495a:	fa93 f3a3 	rbit	r3, r3
 800495e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004962:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	d102      	bne.n	8004980 <HAL_RCC_OscConfig+0x2cc>
 800497a:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	e015      	b.n	80049ac <HAL_RCC_OscConfig+0x2f8>
 8004980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004984:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004988:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800498c:	fa93 f3a3 	rbit	r3, r3
 8004990:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004998:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800499c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80049a0:	fa93 f3a3 	rbit	r3, r3
 80049a4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80049a8:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <HAL_RCC_OscConfig+0x330>)
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049b0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80049b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80049b8:	fa92 f2a2 	rbit	r2, r2
 80049bc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80049c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80049c4:	fab2 f282 	clz	r2, r2
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	f042 0220 	orr.w	r2, r2, #32
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	f002 021f 	and.w	r2, r2, #31
 80049d4:	2101      	movs	r1, #1
 80049d6:	fa01 f202 	lsl.w	r2, r1, r2
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ab      	bne.n	8004938 <HAL_RCC_OscConfig+0x284>
 80049e0:	e003      	b.n	80049ea <HAL_RCC_OscConfig+0x336>
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 817d 	beq.w	8004cfa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a00:	4ba6      	ldr	r3, [pc, #664]	; (8004c9c <HAL_RCC_OscConfig+0x5e8>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 030c 	and.w	r3, r3, #12
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00b      	beq.n	8004a24 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a0c:	4ba3      	ldr	r3, [pc, #652]	; (8004c9c <HAL_RCC_OscConfig+0x5e8>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 030c 	and.w	r3, r3, #12
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d172      	bne.n	8004afe <HAL_RCC_OscConfig+0x44a>
 8004a18:	4ba0      	ldr	r3, [pc, #640]	; (8004c9c <HAL_RCC_OscConfig+0x5e8>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d16c      	bne.n	8004afe <HAL_RCC_OscConfig+0x44a>
 8004a24:	2302      	movs	r3, #2
 8004a26:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004a36:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3a:	fab3 f383 	clz	r3, r3
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d102      	bne.n	8004a54 <HAL_RCC_OscConfig+0x3a0>
 8004a4e:	4b93      	ldr	r3, [pc, #588]	; (8004c9c <HAL_RCC_OscConfig+0x5e8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	e013      	b.n	8004a7c <HAL_RCC_OscConfig+0x3c8>
 8004a54:	2302      	movs	r3, #2
 8004a56:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004a5e:	fa93 f3a3 	rbit	r3, r3
 8004a62:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004a66:	2302      	movs	r3, #2
 8004a68:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004a6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004a70:	fa93 f3a3 	rbit	r3, r3
 8004a74:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004a78:	4b88      	ldr	r3, [pc, #544]	; (8004c9c <HAL_RCC_OscConfig+0x5e8>)
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004a82:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004a86:	fa92 f2a2 	rbit	r2, r2
 8004a8a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004a8e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004a92:	fab2 f282 	clz	r2, r2
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	f042 0220 	orr.w	r2, r2, #32
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	f002 021f 	and.w	r2, r2, #31
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x410>
 8004aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d002      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f000 be2e 	b.w	8005720 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac4:	4b75      	ldr	r3, [pc, #468]	; (8004c9c <HAL_RCC_OscConfig+0x5e8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	21f8      	movs	r1, #248	; 0xf8
 8004ada:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004ae2:	fa91 f1a1 	rbit	r1, r1
 8004ae6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004aea:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004aee:	fab1 f181 	clz	r1, r1
 8004af2:	b2c9      	uxtb	r1, r1
 8004af4:	408b      	lsls	r3, r1
 8004af6:	4969      	ldr	r1, [pc, #420]	; (8004c9c <HAL_RCC_OscConfig+0x5e8>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004afc:	e0fd      	b.n	8004cfa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 8088 	beq.w	8004c20 <HAL_RCC_OscConfig+0x56c>
 8004b10:	2301      	movs	r3, #1
 8004b12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004b1a:	fa93 f3a3 	rbit	r3, r3
 8004b1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004b22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b26:	fab3 f383 	clz	r3, r3
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	461a      	mov	r2, r3
 8004b38:	2301      	movs	r3, #1
 8004b3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7fe fba6 	bl	800328c <HAL_GetTick>
 8004b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b44:	e00a      	b.n	8004b5c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b46:	f7fe fba1 	bl	800328c <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d902      	bls.n	8004b5c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	f000 bde2 	b.w	8005720 <HAL_RCC_OscConfig+0x106c>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004b66:	fa93 f3a3 	rbit	r3, r3
 8004b6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004b6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b72:	fab3 f383 	clz	r3, r3
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	f043 0301 	orr.w	r3, r3, #1
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d102      	bne.n	8004b8c <HAL_RCC_OscConfig+0x4d8>
 8004b86:	4b45      	ldr	r3, [pc, #276]	; (8004c9c <HAL_RCC_OscConfig+0x5e8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	e013      	b.n	8004bb4 <HAL_RCC_OscConfig+0x500>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004b96:	fa93 f3a3 	rbit	r3, r3
 8004b9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ba4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004ba8:	fa93 f3a3 	rbit	r3, r3
 8004bac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004bb0:	4b3a      	ldr	r3, [pc, #232]	; (8004c9c <HAL_RCC_OscConfig+0x5e8>)
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004bba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004bbe:	fa92 f2a2 	rbit	r2, r2
 8004bc2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004bc6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004bca:	fab2 f282 	clz	r2, r2
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	f042 0220 	orr.w	r2, r2, #32
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	f002 021f 	and.w	r2, r2, #31
 8004bda:	2101      	movs	r1, #1
 8004bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0af      	beq.n	8004b46 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be6:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <HAL_RCC_OscConfig+0x5e8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	21f8      	movs	r1, #248	; 0xf8
 8004bfc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004c04:	fa91 f1a1 	rbit	r1, r1
 8004c08:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004c0c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004c10:	fab1 f181 	clz	r1, r1
 8004c14:	b2c9      	uxtb	r1, r1
 8004c16:	408b      	lsls	r3, r1
 8004c18:	4920      	ldr	r1, [pc, #128]	; (8004c9c <HAL_RCC_OscConfig+0x5e8>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]
 8004c1e:	e06c      	b.n	8004cfa <HAL_RCC_OscConfig+0x646>
 8004c20:	2301      	movs	r3, #1
 8004c22:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c26:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004c2a:	fa93 f3a3 	rbit	r3, r3
 8004c2e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004c32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c36:	fab3 f383 	clz	r3, r3
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	461a      	mov	r2, r3
 8004c48:	2300      	movs	r3, #0
 8004c4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4c:	f7fe fb1e 	bl	800328c <HAL_GetTick>
 8004c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c54:	e00a      	b.n	8004c6c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c56:	f7fe fb19 	bl	800328c <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d902      	bls.n	8004c6c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	f000 bd5a 	b.w	8005720 <HAL_RCC_OscConfig+0x106c>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c76:	fa93 f3a3 	rbit	r3, r3
 8004c7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c82:	fab3 f383 	clz	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d104      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x5ec>
 8004c96:	4b01      	ldr	r3, [pc, #4]	; (8004c9c <HAL_RCC_OscConfig+0x5e8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	e015      	b.n	8004cc8 <HAL_RCC_OscConfig+0x614>
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004caa:	fa93 f3a3 	rbit	r3, r3
 8004cae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004cb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004cbc:	fa93 f3a3 	rbit	r3, r3
 8004cc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004cc4:	4bc8      	ldr	r3, [pc, #800]	; (8004fe8 <HAL_RCC_OscConfig+0x934>)
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	2202      	movs	r2, #2
 8004cca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004cce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004cd2:	fa92 f2a2 	rbit	r2, r2
 8004cd6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004cda:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004cde:	fab2 f282 	clz	r2, r2
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	f042 0220 	orr.w	r2, r2, #32
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	f002 021f 	and.w	r2, r2, #31
 8004cee:	2101      	movs	r1, #1
 8004cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1ad      	bne.n	8004c56 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8110 	beq.w	8004f30 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d079      	beq.n	8004e14 <HAL_RCC_OscConfig+0x760>
 8004d20:	2301      	movs	r3, #1
 8004d22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d2a:	fa93 f3a3 	rbit	r3, r3
 8004d2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d36:	fab3 f383 	clz	r3, r3
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4bab      	ldr	r3, [pc, #684]	; (8004fec <HAL_RCC_OscConfig+0x938>)
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	461a      	mov	r2, r3
 8004d46:	2301      	movs	r3, #1
 8004d48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4a:	f7fe fa9f 	bl	800328c <HAL_GetTick>
 8004d4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d52:	e00a      	b.n	8004d6a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d54:	f7fe fa9a 	bl	800328c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d902      	bls.n	8004d6a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	f000 bcdb 	b.w	8005720 <HAL_RCC_OscConfig+0x106c>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d74:	fa93 f3a3 	rbit	r3, r3
 8004d78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004d84:	2202      	movs	r2, #2
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	fa93 f2a3 	rbit	r2, r3
 8004d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004da8:	2202      	movs	r2, #2
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	fa93 f2a3 	rbit	r2, r3
 8004dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004dc2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dc4:	4b88      	ldr	r3, [pc, #544]	; (8004fe8 <HAL_RCC_OscConfig+0x934>)
 8004dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dcc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	6019      	str	r1, [r3, #0]
 8004dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	fa93 f1a3 	rbit	r1, r3
 8004de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004dea:	6019      	str	r1, [r3, #0]
  return result;
 8004dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	fab3 f383 	clz	r3, r3
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2101      	movs	r1, #1
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0a0      	beq.n	8004d54 <HAL_RCC_OscConfig+0x6a0>
 8004e12:	e08d      	b.n	8004f30 <HAL_RCC_OscConfig+0x87c>
 8004e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e24:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	fa93 f2a3 	rbit	r2, r3
 8004e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e36:	601a      	str	r2, [r3, #0]
  return result;
 8004e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e40:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e42:	fab3 f383 	clz	r3, r3
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4b68      	ldr	r3, [pc, #416]	; (8004fec <HAL_RCC_OscConfig+0x938>)
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	461a      	mov	r2, r3
 8004e52:	2300      	movs	r3, #0
 8004e54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e56:	f7fe fa19 	bl	800328c <HAL_GetTick>
 8004e5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e60:	f7fe fa14 	bl	800328c <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d902      	bls.n	8004e76 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	f000 bc55 	b.w	8005720 <HAL_RCC_OscConfig+0x106c>
 8004e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004e7e:	2202      	movs	r2, #2
 8004e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	fa93 f2a3 	rbit	r2, r3
 8004e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eaa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	fa93 f2a3 	rbit	r2, r3
 8004eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	fa93 f2a3 	rbit	r2, r3
 8004ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004edc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004ee0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee2:	4b41      	ldr	r3, [pc, #260]	; (8004fe8 <HAL_RCC_OscConfig+0x934>)
 8004ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004eee:	2102      	movs	r1, #2
 8004ef0:	6019      	str	r1, [r3, #0]
 8004ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	fa93 f1a3 	rbit	r1, r3
 8004f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f04:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f08:	6019      	str	r1, [r3, #0]
  return result;
 8004f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	fab3 f383 	clz	r3, r3
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	2101      	movs	r1, #1
 8004f26:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d197      	bne.n	8004e60 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 81a1 	beq.w	8005288 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f46:	2300      	movs	r3, #0
 8004f48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4c:	4b26      	ldr	r3, [pc, #152]	; (8004fe8 <HAL_RCC_OscConfig+0x934>)
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d116      	bne.n	8004f86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f58:	4b23      	ldr	r3, [pc, #140]	; (8004fe8 <HAL_RCC_OscConfig+0x934>)
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	4a22      	ldr	r2, [pc, #136]	; (8004fe8 <HAL_RCC_OscConfig+0x934>)
 8004f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f62:	61d3      	str	r3, [r2, #28]
 8004f64:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_RCC_OscConfig+0x934>)
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f70:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f7a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004f7e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f86:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <HAL_RCC_OscConfig+0x93c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d11a      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f92:	4b17      	ldr	r3, [pc, #92]	; (8004ff0 <HAL_RCC_OscConfig+0x93c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a16      	ldr	r2, [pc, #88]	; (8004ff0 <HAL_RCC_OscConfig+0x93c>)
 8004f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f9e:	f7fe f975 	bl	800328c <HAL_GetTick>
 8004fa2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa6:	e009      	b.n	8004fbc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa8:	f7fe f970 	bl	800328c <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b64      	cmp	r3, #100	; 0x64
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e3b1      	b.n	8005720 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <HAL_RCC_OscConfig+0x93c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0ef      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d10d      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x940>
 8004fd8:	4b03      	ldr	r3, [pc, #12]	; (8004fe8 <HAL_RCC_OscConfig+0x934>)
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	4a02      	ldr	r2, [pc, #8]	; (8004fe8 <HAL_RCC_OscConfig+0x934>)
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	6213      	str	r3, [r2, #32]
 8004fe4:	e03c      	b.n	8005060 <HAL_RCC_OscConfig+0x9ac>
 8004fe6:	bf00      	nop
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	10908120 	.word	0x10908120
 8004ff0:	40007000 	.word	0x40007000
 8004ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10c      	bne.n	800501e <HAL_RCC_OscConfig+0x96a>
 8005004:	4bc1      	ldr	r3, [pc, #772]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	4ac0      	ldr	r2, [pc, #768]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 800500a:	f023 0301 	bic.w	r3, r3, #1
 800500e:	6213      	str	r3, [r2, #32]
 8005010:	4bbe      	ldr	r3, [pc, #760]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	4abd      	ldr	r2, [pc, #756]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 8005016:	f023 0304 	bic.w	r3, r3, #4
 800501a:	6213      	str	r3, [r2, #32]
 800501c:	e020      	b.n	8005060 <HAL_RCC_OscConfig+0x9ac>
 800501e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b05      	cmp	r3, #5
 800502c:	d10c      	bne.n	8005048 <HAL_RCC_OscConfig+0x994>
 800502e:	4bb7      	ldr	r3, [pc, #732]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	4ab6      	ldr	r2, [pc, #728]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 8005034:	f043 0304 	orr.w	r3, r3, #4
 8005038:	6213      	str	r3, [r2, #32]
 800503a:	4bb4      	ldr	r3, [pc, #720]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	4ab3      	ldr	r2, [pc, #716]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	6213      	str	r3, [r2, #32]
 8005046:	e00b      	b.n	8005060 <HAL_RCC_OscConfig+0x9ac>
 8005048:	4bb0      	ldr	r3, [pc, #704]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	4aaf      	ldr	r2, [pc, #700]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 800504e:	f023 0301 	bic.w	r3, r3, #1
 8005052:	6213      	str	r3, [r2, #32]
 8005054:	4bad      	ldr	r3, [pc, #692]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	4aac      	ldr	r2, [pc, #688]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 800505a:	f023 0304 	bic.w	r3, r3, #4
 800505e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005064:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8081 	beq.w	8005174 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005072:	f7fe f90b 	bl	800328c <HAL_GetTick>
 8005076:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800507a:	e00b      	b.n	8005094 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800507c:	f7fe f906 	bl	800328c <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	f241 3288 	movw	r2, #5000	; 0x1388
 800508c:	4293      	cmp	r3, r2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e345      	b.n	8005720 <HAL_RCC_OscConfig+0x106c>
 8005094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005098:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800509c:	2202      	movs	r2, #2
 800509e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	fa93 f2a3 	rbit	r2, r3
 80050ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80050c0:	2202      	movs	r2, #2
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	fa93 f2a3 	rbit	r2, r3
 80050d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80050da:	601a      	str	r2, [r3, #0]
  return result;
 80050dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80050e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e6:	fab3 f383 	clz	r3, r3
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f043 0302 	orr.w	r3, r3, #2
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d102      	bne.n	8005100 <HAL_RCC_OscConfig+0xa4c>
 80050fa:	4b84      	ldr	r3, [pc, #528]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	e013      	b.n	8005128 <HAL_RCC_OscConfig+0xa74>
 8005100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005104:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005108:	2202      	movs	r2, #2
 800510a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005110:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	fa93 f2a3 	rbit	r2, r3
 800511a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	4b79      	ldr	r3, [pc, #484]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800512c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005130:	2102      	movs	r1, #2
 8005132:	6011      	str	r1, [r2, #0]
 8005134:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005138:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	fa92 f1a2 	rbit	r1, r2
 8005142:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005146:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800514a:	6011      	str	r1, [r2, #0]
  return result;
 800514c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005150:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	fab2 f282 	clz	r2, r2
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	f002 021f 	and.w	r2, r2, #31
 8005166:	2101      	movs	r1, #1
 8005168:	fa01 f202 	lsl.w	r2, r1, r2
 800516c:	4013      	ands	r3, r2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d084      	beq.n	800507c <HAL_RCC_OscConfig+0x9c8>
 8005172:	e07f      	b.n	8005274 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005174:	f7fe f88a 	bl	800328c <HAL_GetTick>
 8005178:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517c:	e00b      	b.n	8005196 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800517e:	f7fe f885 	bl	800328c <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	f241 3288 	movw	r2, #5000	; 0x1388
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e2c4      	b.n	8005720 <HAL_RCC_OscConfig+0x106c>
 8005196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800519a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800519e:	2202      	movs	r2, #2
 80051a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	fa93 f2a3 	rbit	r2, r3
 80051b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80051c2:	2202      	movs	r2, #2
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	fa93 f2a3 	rbit	r2, r3
 80051d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80051dc:	601a      	str	r2, [r3, #0]
  return result;
 80051de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80051e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e8:	fab3 f383 	clz	r3, r3
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f043 0302 	orr.w	r3, r3, #2
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d102      	bne.n	8005202 <HAL_RCC_OscConfig+0xb4e>
 80051fc:	4b43      	ldr	r3, [pc, #268]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	e013      	b.n	800522a <HAL_RCC_OscConfig+0xb76>
 8005202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005206:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800520a:	2202      	movs	r2, #2
 800520c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005212:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	fa93 f2a3 	rbit	r2, r3
 800521c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005220:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	4b39      	ldr	r3, [pc, #228]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800522e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005232:	2102      	movs	r1, #2
 8005234:	6011      	str	r1, [r2, #0]
 8005236:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800523a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800523e:	6812      	ldr	r2, [r2, #0]
 8005240:	fa92 f1a2 	rbit	r1, r2
 8005244:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005248:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800524c:	6011      	str	r1, [r2, #0]
  return result;
 800524e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005252:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	fab2 f282 	clz	r2, r2
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	f002 021f 	and.w	r2, r2, #31
 8005268:	2101      	movs	r1, #1
 800526a:	fa01 f202 	lsl.w	r2, r1, r2
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d184      	bne.n	800517e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005274:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005278:	2b01      	cmp	r3, #1
 800527a:	d105      	bne.n	8005288 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800527c:	4b23      	ldr	r3, [pc, #140]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	4a22      	ldr	r2, [pc, #136]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 8005282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005286:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 8242 	beq.w	800571e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800529a:	4b1c      	ldr	r3, [pc, #112]	; (800530c <HAL_RCC_OscConfig+0xc58>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	f000 8213 	beq.w	80056ce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	f040 8162 	bne.w	800557e <HAL_RCC_OscConfig+0xeca>
 80052ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052be:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80052c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052cc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	fa93 f2a3 	rbit	r2, r3
 80052d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052da:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80052de:	601a      	str	r2, [r3, #0]
  return result;
 80052e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80052e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ea:	fab3 f383 	clz	r3, r3
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	461a      	mov	r2, r3
 80052fc:	2300      	movs	r3, #0
 80052fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005300:	f7fd ffc4 	bl	800328c <HAL_GetTick>
 8005304:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005308:	e00c      	b.n	8005324 <HAL_RCC_OscConfig+0xc70>
 800530a:	bf00      	nop
 800530c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005310:	f7fd ffbc 	bl	800328c <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e1fd      	b.n	8005720 <HAL_RCC_OscConfig+0x106c>
 8005324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005328:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800532c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005336:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	fa93 f2a3 	rbit	r2, r3
 8005340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005344:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005348:	601a      	str	r2, [r3, #0]
  return result;
 800534a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005352:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005354:	fab3 f383 	clz	r3, r3
 8005358:	b2db      	uxtb	r3, r3
 800535a:	095b      	lsrs	r3, r3, #5
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d102      	bne.n	800536e <HAL_RCC_OscConfig+0xcba>
 8005368:	4bb0      	ldr	r3, [pc, #704]	; (800562c <HAL_RCC_OscConfig+0xf78>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	e027      	b.n	80053be <HAL_RCC_OscConfig+0xd0a>
 800536e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005372:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005376:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800537a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005380:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	fa93 f2a3 	rbit	r2, r3
 800538a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800538e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005398:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800539c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	fa93 f2a3 	rbit	r2, r3
 80053b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	4b9c      	ldr	r3, [pc, #624]	; (800562c <HAL_RCC_OscConfig+0xf78>)
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053c2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80053c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80053ca:	6011      	str	r1, [r2, #0]
 80053cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053d0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	fa92 f1a2 	rbit	r1, r2
 80053da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053de:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80053e2:	6011      	str	r1, [r2, #0]
  return result;
 80053e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053e8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80053ec:	6812      	ldr	r2, [r2, #0]
 80053ee:	fab2 f282 	clz	r2, r2
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	f042 0220 	orr.w	r2, r2, #32
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	f002 021f 	and.w	r2, r2, #31
 80053fe:	2101      	movs	r1, #1
 8005400:	fa01 f202 	lsl.w	r2, r1, r2
 8005404:	4013      	ands	r3, r2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d182      	bne.n	8005310 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800540a:	4b88      	ldr	r3, [pc, #544]	; (800562c <HAL_RCC_OscConfig+0xf78>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800541e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005422:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	430b      	orrs	r3, r1
 800542c:	497f      	ldr	r1, [pc, #508]	; (800562c <HAL_RCC_OscConfig+0xf78>)
 800542e:	4313      	orrs	r3, r2
 8005430:	604b      	str	r3, [r1, #4]
 8005432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005436:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800543a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800543e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005444:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	fa93 f2a3 	rbit	r2, r3
 800544e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005452:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005456:	601a      	str	r2, [r3, #0]
  return result;
 8005458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005460:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005462:	fab3 f383 	clz	r3, r3
 8005466:	b2db      	uxtb	r3, r3
 8005468:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800546c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	461a      	mov	r2, r3
 8005474:	2301      	movs	r3, #1
 8005476:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005478:	f7fd ff08 	bl	800328c <HAL_GetTick>
 800547c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005480:	e009      	b.n	8005496 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005482:	f7fd ff03 	bl	800328c <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e144      	b.n	8005720 <HAL_RCC_OscConfig+0x106c>
 8005496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800549a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800549e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	fa93 f2a3 	rbit	r2, r3
 80054b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80054ba:	601a      	str	r2, [r3, #0]
  return result;
 80054bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80054c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054c6:	fab3 f383 	clz	r3, r3
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d102      	bne.n	80054e0 <HAL_RCC_OscConfig+0xe2c>
 80054da:	4b54      	ldr	r3, [pc, #336]	; (800562c <HAL_RCC_OscConfig+0xf78>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	e027      	b.n	8005530 <HAL_RCC_OscConfig+0xe7c>
 80054e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80054e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	fa93 f2a3 	rbit	r2, r3
 80054fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005500:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800550a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800550e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005518:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	fa93 f2a3 	rbit	r2, r3
 8005522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005526:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	4b3f      	ldr	r3, [pc, #252]	; (800562c <HAL_RCC_OscConfig+0xf78>)
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005534:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005538:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800553c:	6011      	str	r1, [r2, #0]
 800553e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005542:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	fa92 f1a2 	rbit	r1, r2
 800554c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005550:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005554:	6011      	str	r1, [r2, #0]
  return result;
 8005556:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800555a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	fab2 f282 	clz	r2, r2
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	f042 0220 	orr.w	r2, r2, #32
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	f002 021f 	and.w	r2, r2, #31
 8005570:	2101      	movs	r1, #1
 8005572:	fa01 f202 	lsl.w	r2, r1, r2
 8005576:	4013      	ands	r3, r2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d082      	beq.n	8005482 <HAL_RCC_OscConfig+0xdce>
 800557c:	e0cf      	b.n	800571e <HAL_RCC_OscConfig+0x106a>
 800557e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005582:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005586:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800558a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005590:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	fa93 f2a3 	rbit	r2, r3
 800559a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800559e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80055a2:	601a      	str	r2, [r3, #0]
  return result;
 80055a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80055ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ae:	fab3 f383 	clz	r3, r3
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	461a      	mov	r2, r3
 80055c0:	2300      	movs	r3, #0
 80055c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c4:	f7fd fe62 	bl	800328c <HAL_GetTick>
 80055c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055cc:	e009      	b.n	80055e2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ce:	f7fd fe5d 	bl	800328c <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e09e      	b.n	8005720 <HAL_RCC_OscConfig+0x106c>
 80055e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80055ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	fa93 f2a3 	rbit	r2, r3
 80055fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005602:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005606:	601a      	str	r2, [r3, #0]
  return result;
 8005608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800560c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005610:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005612:	fab3 f383 	clz	r3, r3
 8005616:	b2db      	uxtb	r3, r3
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b01      	cmp	r3, #1
 8005624:	d104      	bne.n	8005630 <HAL_RCC_OscConfig+0xf7c>
 8005626:	4b01      	ldr	r3, [pc, #4]	; (800562c <HAL_RCC_OscConfig+0xf78>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	e029      	b.n	8005680 <HAL_RCC_OscConfig+0xfcc>
 800562c:	40021000 	.word	0x40021000
 8005630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005634:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800563c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005642:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	fa93 f2a3 	rbit	r2, r3
 800564c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005650:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800565a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800565e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005668:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	fa93 f2a3 	rbit	r2, r3
 8005672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005676:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	4b2b      	ldr	r3, [pc, #172]	; (800572c <HAL_RCC_OscConfig+0x1078>)
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005684:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005688:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800568c:	6011      	str	r1, [r2, #0]
 800568e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005692:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	fa92 f1a2 	rbit	r1, r2
 800569c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056a0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80056a4:	6011      	str	r1, [r2, #0]
  return result;
 80056a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056aa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	fab2 f282 	clz	r2, r2
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	f042 0220 	orr.w	r2, r2, #32
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	f002 021f 	and.w	r2, r2, #31
 80056c0:	2101      	movs	r1, #1
 80056c2:	fa01 f202 	lsl.w	r2, r1, r2
 80056c6:	4013      	ands	r3, r2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d180      	bne.n	80055ce <HAL_RCC_OscConfig+0xf1a>
 80056cc:	e027      	b.n	800571e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e01e      	b.n	8005720 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80056e2:	4b12      	ldr	r3, [pc, #72]	; (800572c <HAL_RCC_OscConfig+0x1078>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80056ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80056ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80056f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d10b      	bne.n	800571a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005702:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005706:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800570a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800570e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005716:	429a      	cmp	r2, r3
 8005718:	d001      	beq.n	800571e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40021000 	.word	0x40021000

08005730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b09e      	sub	sp, #120	; 0x78
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e162      	b.n	8005a0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005748:	4b90      	ldr	r3, [pc, #576]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d910      	bls.n	8005778 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005756:	4b8d      	ldr	r3, [pc, #564]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f023 0207 	bic.w	r2, r3, #7
 800575e:	498b      	ldr	r1, [pc, #556]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	4313      	orrs	r3, r2
 8005764:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005766:	4b89      	ldr	r3, [pc, #548]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e14a      	b.n	8005a0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005784:	4b82      	ldr	r3, [pc, #520]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	497f      	ldr	r1, [pc, #508]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005792:	4313      	orrs	r3, r2
 8005794:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 80dc 	beq.w	800595c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d13c      	bne.n	8005826 <HAL_RCC_ClockConfig+0xf6>
 80057ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057b4:	fa93 f3a3 	rbit	r3, r3
 80057b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80057ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057bc:	fab3 f383 	clz	r3, r3
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	f043 0301 	orr.w	r3, r3, #1
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d102      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xa6>
 80057d0:	4b6f      	ldr	r3, [pc, #444]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	e00f      	b.n	80057f6 <HAL_RCC_ClockConfig+0xc6>
 80057d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057de:	fa93 f3a3 	rbit	r3, r3
 80057e2:	667b      	str	r3, [r7, #100]	; 0x64
 80057e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057e8:	663b      	str	r3, [r7, #96]	; 0x60
 80057ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057ec:	fa93 f3a3 	rbit	r3, r3
 80057f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057f2:	4b67      	ldr	r3, [pc, #412]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80057fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057fe:	fa92 f2a2 	rbit	r2, r2
 8005802:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005806:	fab2 f282 	clz	r2, r2
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	f042 0220 	orr.w	r2, r2, #32
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	f002 021f 	and.w	r2, r2, #31
 8005816:	2101      	movs	r1, #1
 8005818:	fa01 f202 	lsl.w	r2, r1, r2
 800581c:	4013      	ands	r3, r2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d17b      	bne.n	800591a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e0f3      	b.n	8005a0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d13c      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x178>
 800582e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005832:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005836:	fa93 f3a3 	rbit	r3, r3
 800583a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800583c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800583e:	fab3 f383 	clz	r3, r3
 8005842:	b2db      	uxtb	r3, r3
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	b2db      	uxtb	r3, r3
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	d102      	bne.n	8005858 <HAL_RCC_ClockConfig+0x128>
 8005852:	4b4f      	ldr	r3, [pc, #316]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	e00f      	b.n	8005878 <HAL_RCC_ClockConfig+0x148>
 8005858:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800585c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005860:	fa93 f3a3 	rbit	r3, r3
 8005864:	647b      	str	r3, [r7, #68]	; 0x44
 8005866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800586a:	643b      	str	r3, [r7, #64]	; 0x40
 800586c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586e:	fa93 f3a3 	rbit	r3, r3
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005874:	4b46      	ldr	r3, [pc, #280]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800587c:	63ba      	str	r2, [r7, #56]	; 0x38
 800587e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005880:	fa92 f2a2 	rbit	r2, r2
 8005884:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005888:	fab2 f282 	clz	r2, r2
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	f042 0220 	orr.w	r2, r2, #32
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	f002 021f 	and.w	r2, r2, #31
 8005898:	2101      	movs	r1, #1
 800589a:	fa01 f202 	lsl.w	r2, r1, r2
 800589e:	4013      	ands	r3, r2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d13a      	bne.n	800591a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0b2      	b.n	8005a0e <HAL_RCC_ClockConfig+0x2de>
 80058a8:	2302      	movs	r3, #2
 80058aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	fa93 f3a3 	rbit	r3, r3
 80058b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b6:	fab3 f383 	clz	r3, r3
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d102      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x1a0>
 80058ca:	4b31      	ldr	r3, [pc, #196]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	e00d      	b.n	80058ec <HAL_RCC_ClockConfig+0x1bc>
 80058d0:	2302      	movs	r3, #2
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	fa93 f3a3 	rbit	r3, r3
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
 80058dc:	2302      	movs	r3, #2
 80058de:	623b      	str	r3, [r7, #32]
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	fa93 f3a3 	rbit	r3, r3
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	4b29      	ldr	r3, [pc, #164]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	2202      	movs	r2, #2
 80058ee:	61ba      	str	r2, [r7, #24]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	fa92 f2a2 	rbit	r2, r2
 80058f6:	617a      	str	r2, [r7, #20]
  return result;
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	fab2 f282 	clz	r2, r2
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	f042 0220 	orr.w	r2, r2, #32
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	f002 021f 	and.w	r2, r2, #31
 800590a:	2101      	movs	r1, #1
 800590c:	fa01 f202 	lsl.w	r2, r1, r2
 8005910:	4013      	ands	r3, r2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e079      	b.n	8005a0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800591a:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f023 0203 	bic.w	r2, r3, #3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	491a      	ldr	r1, [pc, #104]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005928:	4313      	orrs	r3, r2
 800592a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800592c:	f7fd fcae 	bl	800328c <HAL_GetTick>
 8005930:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005932:	e00a      	b.n	800594a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005934:	f7fd fcaa 	bl	800328c <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e061      	b.n	8005a0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594a:	4b11      	ldr	r3, [pc, #68]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f003 020c 	and.w	r2, r3, #12
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	429a      	cmp	r2, r3
 800595a:	d1eb      	bne.n	8005934 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800595c:	4b0b      	ldr	r3, [pc, #44]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d214      	bcs.n	8005994 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596a:	4b08      	ldr	r3, [pc, #32]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f023 0207 	bic.w	r2, r3, #7
 8005972:	4906      	ldr	r1, [pc, #24]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	4313      	orrs	r3, r2
 8005978:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800597a:	4b04      	ldr	r3, [pc, #16]	; (800598c <HAL_RCC_ClockConfig+0x25c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d005      	beq.n	8005994 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e040      	b.n	8005a0e <HAL_RCC_ClockConfig+0x2de>
 800598c:	40022000 	.word	0x40022000
 8005990:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059a0:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <HAL_RCC_ClockConfig+0x2e8>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	491a      	ldr	r1, [pc, #104]	; (8005a18 <HAL_RCC_ClockConfig+0x2e8>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059be:	4b16      	ldr	r3, [pc, #88]	; (8005a18 <HAL_RCC_ClockConfig+0x2e8>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4912      	ldr	r1, [pc, #72]	; (8005a18 <HAL_RCC_ClockConfig+0x2e8>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80059d2:	f000 f829 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 80059d6:	4601      	mov	r1, r0
 80059d8:	4b0f      	ldr	r3, [pc, #60]	; (8005a18 <HAL_RCC_ClockConfig+0x2e8>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059e0:	22f0      	movs	r2, #240	; 0xf0
 80059e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	fa92 f2a2 	rbit	r2, r2
 80059ea:	60fa      	str	r2, [r7, #12]
  return result;
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	fab2 f282 	clz	r2, r2
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	40d3      	lsrs	r3, r2
 80059f6:	4a09      	ldr	r2, [pc, #36]	; (8005a1c <HAL_RCC_ClockConfig+0x2ec>)
 80059f8:	5cd3      	ldrb	r3, [r2, r3]
 80059fa:	fa21 f303 	lsr.w	r3, r1, r3
 80059fe:	4a08      	ldr	r2, [pc, #32]	; (8005a20 <HAL_RCC_ClockConfig+0x2f0>)
 8005a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005a02:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <HAL_RCC_ClockConfig+0x2f4>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fd fbfc 	bl	8003204 <HAL_InitTick>
  
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3778      	adds	r7, #120	; 0x78
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	08008118 	.word	0x08008118
 8005a20:	20000014 	.word	0x20000014
 8005a24:	20000020 	.word	0x20000020

08005a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b08b      	sub	sp, #44	; 0x2c
 8005a2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
 8005a32:	2300      	movs	r3, #0
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	2300      	movs	r3, #0
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005a42:	4b29      	ldr	r3, [pc, #164]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d002      	beq.n	8005a58 <HAL_RCC_GetSysClockFreq+0x30>
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d003      	beq.n	8005a5e <HAL_RCC_GetSysClockFreq+0x36>
 8005a56:	e03c      	b.n	8005ad2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a58:	4b24      	ldr	r3, [pc, #144]	; (8005aec <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a5a:	623b      	str	r3, [r7, #32]
      break;
 8005a5c:	e03c      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005a64:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005a68:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	fa92 f2a2 	rbit	r2, r2
 8005a70:	607a      	str	r2, [r7, #4]
  return result;
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	fab2 f282 	clz	r2, r2
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	40d3      	lsrs	r3, r2
 8005a7c:	4a1c      	ldr	r2, [pc, #112]	; (8005af0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a7e:	5cd3      	ldrb	r3, [r2, r3]
 8005a80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005a82:	4b19      	ldr	r3, [pc, #100]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	220f      	movs	r2, #15
 8005a8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	fa92 f2a2 	rbit	r2, r2
 8005a94:	60fa      	str	r2, [r7, #12]
  return result;
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	fab2 f282 	clz	r2, r2
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	40d3      	lsrs	r3, r2
 8005aa0:	4a14      	ldr	r2, [pc, #80]	; (8005af4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005aa2:	5cd3      	ldrb	r3, [r2, r3]
 8005aa4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ab0:	4a0e      	ldr	r2, [pc, #56]	; (8005aec <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac0:	e004      	b.n	8005acc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	4a0c      	ldr	r2, [pc, #48]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ac6:	fb02 f303 	mul.w	r3, r2, r3
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	623b      	str	r3, [r7, #32]
      break;
 8005ad0:	e002      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ad2:	4b06      	ldr	r3, [pc, #24]	; (8005aec <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ad4:	623b      	str	r3, [r7, #32]
      break;
 8005ad6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	372c      	adds	r7, #44	; 0x2c
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	007a1200 	.word	0x007a1200
 8005af0:	08008130 	.word	0x08008130
 8005af4:	08008140 	.word	0x08008140
 8005af8:	003d0900 	.word	0x003d0900

08005afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b00:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b02:	681b      	ldr	r3, [r3, #0]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000014 	.word	0x20000014

08005b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005b1a:	f7ff ffef 	bl	8005afc <HAL_RCC_GetHCLKFreq>
 8005b1e:	4601      	mov	r1, r0
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005b2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	fa92 f2a2 	rbit	r2, r2
 8005b34:	603a      	str	r2, [r7, #0]
  return result;
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	fab2 f282 	clz	r2, r2
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	40d3      	lsrs	r3, r2
 8005b40:	4a04      	ldr	r2, [pc, #16]	; (8005b54 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005b42:	5cd3      	ldrb	r3, [r2, r3]
 8005b44:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40021000 	.word	0x40021000
 8005b54:	08008128 	.word	0x08008128

08005b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005b5e:	f7ff ffcd 	bl	8005afc <HAL_RCC_GetHCLKFreq>
 8005b62:	4601      	mov	r1, r0
 8005b64:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005b6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005b70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	fa92 f2a2 	rbit	r2, r2
 8005b78:	603a      	str	r2, [r7, #0]
  return result;
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	fab2 f282 	clz	r2, r2
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	40d3      	lsrs	r3, r2
 8005b84:	4a04      	ldr	r2, [pc, #16]	; (8005b98 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005b86:	5cd3      	ldrb	r3, [r2, r3]
 8005b88:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40021000 	.word	0x40021000
 8005b98:	08008128 	.word	0x08008128

08005b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b092      	sub	sp, #72	; 0x48
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005bac:	2300      	movs	r3, #0
 8005bae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 80d4 	beq.w	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bc0:	4b4e      	ldr	r3, [pc, #312]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10e      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bcc:	4b4b      	ldr	r3, [pc, #300]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	4a4a      	ldr	r2, [pc, #296]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd6:	61d3      	str	r3, [r2, #28]
 8005bd8:	4b48      	ldr	r3, [pc, #288]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be0:	60bb      	str	r3, [r7, #8]
 8005be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005be4:	2301      	movs	r3, #1
 8005be6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bea:	4b45      	ldr	r3, [pc, #276]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d118      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bf6:	4b42      	ldr	r3, [pc, #264]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a41      	ldr	r2, [pc, #260]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c02:	f7fd fb43 	bl	800328c <HAL_GetTick>
 8005c06:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c08:	e008      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c0a:	f7fd fb3f 	bl	800328c <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b64      	cmp	r3, #100	; 0x64
 8005c16:	d901      	bls.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e13c      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1c:	4b38      	ldr	r3, [pc, #224]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c28:	4b34      	ldr	r3, [pc, #208]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c30:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8084 	beq.w	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d07c      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c48:	4b2c      	ldr	r3, [pc, #176]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	fa93 f3a3 	rbit	r3, r3
 8005c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c62:	fab3 f383 	clz	r3, r3
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4b26      	ldr	r3, [pc, #152]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	461a      	mov	r2, r3
 8005c72:	2301      	movs	r3, #1
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7e:	fa93 f3a3 	rbit	r3, r3
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c86:	fab3 f383 	clz	r3, r3
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4b1d      	ldr	r3, [pc, #116]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	461a      	mov	r2, r3
 8005c96:	2300      	movs	r3, #0
 8005c98:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c9a:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d04b      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005caa:	f7fd faef 	bl	800328c <HAL_GetTick>
 8005cae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb0:	e00a      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fd faeb 	bl	800328c <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e0e6      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	fa93 f3a3 	rbit	r3, r3
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	623b      	str	r3, [r7, #32]
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	fa93 f3a3 	rbit	r3, r3
 8005cde:	61fb      	str	r3, [r7, #28]
  return result;
 8005ce0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ce2:	fab3 f383 	clz	r3, r3
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f043 0302 	orr.w	r3, r3, #2
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d108      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005cf6:	4b01      	ldr	r3, [pc, #4]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	e00d      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	40007000 	.word	0x40007000
 8005d04:	10908100 	.word	0x10908100
 8005d08:	2302      	movs	r3, #2
 8005d0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	fa93 f3a3 	rbit	r3, r3
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	4b62      	ldr	r3, [pc, #392]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2202      	movs	r2, #2
 8005d1a:	613a      	str	r2, [r7, #16]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	fa92 f2a2 	rbit	r2, r2
 8005d22:	60fa      	str	r2, [r7, #12]
  return result;
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	fab2 f282 	clz	r2, r2
 8005d2a:	b2d2      	uxtb	r2, r2
 8005d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	f002 021f 	and.w	r2, r2, #31
 8005d36:	2101      	movs	r1, #1
 8005d38:	fa01 f202 	lsl.w	r2, r1, r2
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0b7      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005d42:	4b57      	ldr	r3, [pc, #348]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	4954      	ldr	r1, [pc, #336]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d105      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d5c:	4b50      	ldr	r3, [pc, #320]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	4a4f      	ldr	r2, [pc, #316]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d74:	4b4a      	ldr	r3, [pc, #296]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	f023 0203 	bic.w	r2, r3, #3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4947      	ldr	r1, [pc, #284]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d008      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d92:	4b43      	ldr	r3, [pc, #268]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d96:	f023 0210 	bic.w	r2, r3, #16
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	4940      	ldr	r1, [pc, #256]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d008      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005db0:	4b3b      	ldr	r3, [pc, #236]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db4:	f023 0220 	bic.w	r2, r3, #32
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	4938      	ldr	r1, [pc, #224]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d008      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dce:	4b34      	ldr	r3, [pc, #208]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	4931      	ldr	r1, [pc, #196]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005dec:	4b2c      	ldr	r3, [pc, #176]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	4929      	ldr	r1, [pc, #164]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005e0a:	4b25      	ldr	r3, [pc, #148]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	4922      	ldr	r1, [pc, #136]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d008      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005e28:	4b1d      	ldr	r3, [pc, #116]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	491a      	ldr	r1, [pc, #104]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d008      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005e46:	4b16      	ldr	r3, [pc, #88]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	4913      	ldr	r1, [pc, #76]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d008      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005e64:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e70:	490b      	ldr	r1, [pc, #44]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d008      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005e82:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8e:	4904      	ldr	r1, [pc, #16]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3748      	adds	r7, #72	; 0x48
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40021000 	.word	0x40021000

08005ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e09d      	b.n	8005ff2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d108      	bne.n	8005ed0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ec6:	d009      	beq.n	8005edc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	61da      	str	r2, [r3, #28]
 8005ece:	e005      	b.n	8005edc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fc f994 	bl	8002224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f1c:	d902      	bls.n	8005f24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	e002      	b.n	8005f2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f32:	d007      	beq.n	8005f44 <HAL_SPI_Init+0xa0>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f3c:	d002      	beq.n	8005f44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f86:	ea42 0103 	orr.w	r1, r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	0c1b      	lsrs	r3, r3, #16
 8005fa0:	f003 0204 	and.w	r2, r3, #4
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005fc0:	ea42 0103 	orr.w	r1, r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69da      	ldr	r2, [r3, #28]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fe0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b088      	sub	sp, #32
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	603b      	str	r3, [r7, #0]
 8006006:	4613      	mov	r3, r2
 8006008:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_SPI_Transmit+0x22>
 8006018:	2302      	movs	r3, #2
 800601a:	e15f      	b.n	80062dc <HAL_SPI_Transmit+0x2e2>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006024:	f7fd f932 	bl	800328c <HAL_GetTick>
 8006028:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b01      	cmp	r3, #1
 8006038:	d002      	beq.n	8006040 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800603a:	2302      	movs	r3, #2
 800603c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800603e:	e148      	b.n	80062d2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_SPI_Transmit+0x52>
 8006046:	88fb      	ldrh	r3, [r7, #6]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d102      	bne.n	8006052 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006050:	e13f      	b.n	80062d2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2203      	movs	r2, #3
 8006056:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	88fa      	ldrh	r2, [r7, #6]
 800606a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	88fa      	ldrh	r2, [r7, #6]
 8006070:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800609c:	d10f      	bne.n	80060be <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c8:	2b40      	cmp	r3, #64	; 0x40
 80060ca:	d007      	beq.n	80060dc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060e4:	d94f      	bls.n	8006186 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <HAL_SPI_Transmit+0xfa>
 80060ee:	8afb      	ldrh	r3, [r7, #22]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d142      	bne.n	800617a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	881a      	ldrh	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	1c9a      	adds	r2, r3, #2
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006118:	e02f      	b.n	800617a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b02      	cmp	r3, #2
 8006126:	d112      	bne.n	800614e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	881a      	ldrh	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	1c9a      	adds	r2, r3, #2
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800614c:	e015      	b.n	800617a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800614e:	f7fd f89d 	bl	800328c <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d803      	bhi.n	8006166 <HAL_SPI_Transmit+0x16c>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006164:	d102      	bne.n	800616c <HAL_SPI_Transmit+0x172>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d106      	bne.n	800617a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006178:	e0ab      	b.n	80062d2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1ca      	bne.n	800611a <HAL_SPI_Transmit+0x120>
 8006184:	e080      	b.n	8006288 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <HAL_SPI_Transmit+0x19a>
 800618e:	8afb      	ldrh	r3, [r7, #22]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d174      	bne.n	800627e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	d912      	bls.n	80061c4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	881a      	ldrh	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	1c9a      	adds	r2, r3, #2
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b02      	subs	r3, #2
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061c2:	e05c      	b.n	800627e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	330c      	adds	r3, #12
 80061ce:	7812      	ldrb	r2, [r2, #0]
 80061d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80061ea:	e048      	b.n	800627e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d12b      	bne.n	8006252 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	d912      	bls.n	800622a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	881a      	ldrh	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	1c9a      	adds	r2, r3, #2
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b02      	subs	r3, #2
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006228:	e029      	b.n	800627e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	330c      	adds	r3, #12
 8006234:	7812      	ldrb	r2, [r2, #0]
 8006236:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006250:	e015      	b.n	800627e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006252:	f7fd f81b 	bl	800328c <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	d803      	bhi.n	800626a <HAL_SPI_Transmit+0x270>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006268:	d102      	bne.n	8006270 <HAL_SPI_Transmit+0x276>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d106      	bne.n	800627e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800627c:	e029      	b.n	80062d2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1b1      	bne.n	80061ec <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 f947 	bl	8006520 <SPI_EndRxTxTransaction>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10a      	bne.n	80062bc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062a6:	2300      	movs	r3, #0
 80062a8:	613b      	str	r3, [r7, #16]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	613b      	str	r3, [r7, #16]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e003      	b.n	80062d2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062da:	7ffb      	ldrb	r3, [r7, #31]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3720      	adds	r7, #32
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	4613      	mov	r3, r2
 80062f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062f4:	f7fc ffca 	bl	800328c <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	4413      	add	r3, r2
 8006302:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006304:	f7fc ffc2 	bl	800328c <HAL_GetTick>
 8006308:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800630a:	4b39      	ldr	r3, [pc, #228]	; (80063f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	015b      	lsls	r3, r3, #5
 8006310:	0d1b      	lsrs	r3, r3, #20
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	fb02 f303 	mul.w	r3, r2, r3
 8006318:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800631a:	e054      	b.n	80063c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d050      	beq.n	80063c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006324:	f7fc ffb2 	bl	800328c <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	429a      	cmp	r2, r3
 8006332:	d902      	bls.n	800633a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d13d      	bne.n	80063b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006348:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006352:	d111      	bne.n	8006378 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800635c:	d004      	beq.n	8006368 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006366:	d107      	bne.n	8006378 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006376:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006380:	d10f      	bne.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e017      	b.n	80063e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	4013      	ands	r3, r2
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	bf0c      	ite	eq
 80063d6:	2301      	moveq	r3, #1
 80063d8:	2300      	movne	r3, #0
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	79fb      	ldrb	r3, [r7, #7]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d19b      	bne.n	800631c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3720      	adds	r7, #32
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20000014 	.word	0x20000014

080063f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08a      	sub	sp, #40	; 0x28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006406:	f7fc ff41 	bl	800328c <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640e:	1a9b      	subs	r3, r3, r2
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	4413      	add	r3, r2
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006416:	f7fc ff39 	bl	800328c <HAL_GetTick>
 800641a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	330c      	adds	r3, #12
 8006422:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006424:	4b3d      	ldr	r3, [pc, #244]	; (800651c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	00da      	lsls	r2, r3, #3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	0d1b      	lsrs	r3, r3, #20
 8006434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006436:	fb02 f303 	mul.w	r3, r2, r3
 800643a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800643c:	e060      	b.n	8006500 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006444:	d107      	bne.n	8006456 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d104      	bne.n	8006456 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006454:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645c:	d050      	beq.n	8006500 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800645e:	f7fc ff15 	bl	800328c <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646a:	429a      	cmp	r2, r3
 800646c:	d902      	bls.n	8006474 <SPI_WaitFifoStateUntilTimeout+0x80>
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	2b00      	cmp	r3, #0
 8006472:	d13d      	bne.n	80064f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006482:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800648c:	d111      	bne.n	80064b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006496:	d004      	beq.n	80064a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a0:	d107      	bne.n	80064b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ba:	d10f      	bne.n	80064dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e010      	b.n	8006512 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	3b01      	subs	r3, #1
 80064fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4013      	ands	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	429a      	cmp	r2, r3
 800650e:	d196      	bne.n	800643e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3728      	adds	r7, #40	; 0x28
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000014 	.word	0x20000014

08006520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af02      	add	r7, sp, #8
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2200      	movs	r2, #0
 8006534:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7ff ff5b 	bl	80063f4 <SPI_WaitFifoStateUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d007      	beq.n	8006554 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006548:	f043 0220 	orr.w	r2, r3, #32
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e027      	b.n	80065a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2200      	movs	r2, #0
 800655c:	2180      	movs	r1, #128	; 0x80
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7ff fec0 	bl	80062e4 <SPI_WaitFlagStateUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656e:	f043 0220 	orr.w	r2, r3, #32
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e014      	b.n	80065a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2200      	movs	r2, #0
 8006582:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff ff34 	bl	80063f4 <SPI_WaitFifoStateUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d007      	beq.n	80065a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006596:	f043 0220 	orr.w	r2, r3, #32
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e000      	b.n	80065a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e040      	b.n	8006640 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fb fe6c 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2224      	movs	r2, #36	; 0x24
 80065d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f8b6 	bl	800675c <UART_SetConfig>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d101      	bne.n	80065fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e022      	b.n	8006640 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f9e0 	bl	80069c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006616:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006626:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0201 	orr.w	r2, r2, #1
 8006636:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fa67 	bl	8006b0c <UART_CheckIdleState>
 800663e:	4603      	mov	r3, r0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	; 0x28
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	4613      	mov	r3, r2
 8006656:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800665c:	2b20      	cmp	r3, #32
 800665e:	d178      	bne.n	8006752 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_UART_Transmit+0x24>
 8006666:	88fb      	ldrh	r3, [r7, #6]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e071      	b.n	8006754 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2221      	movs	r2, #33	; 0x21
 800667c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800667e:	f7fc fe05 	bl	800328c <HAL_GetTick>
 8006682:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	88fa      	ldrh	r2, [r7, #6]
 8006688:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	88fa      	ldrh	r2, [r7, #6]
 8006690:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669c:	d108      	bne.n	80066b0 <HAL_UART_Transmit+0x68>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d104      	bne.n	80066b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	e003      	b.n	80066b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066b4:	2300      	movs	r3, #0
 80066b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066b8:	e030      	b.n	800671c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2200      	movs	r2, #0
 80066c2:	2180      	movs	r1, #128	; 0x80
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 fac9 	bl	8006c5c <UART_WaitOnFlagUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d004      	beq.n	80066da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e03c      	b.n	8006754 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10b      	bne.n	80066f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	881a      	ldrh	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066ec:	b292      	uxth	r2, r2
 80066ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	3302      	adds	r3, #2
 80066f4:	61bb      	str	r3, [r7, #24]
 80066f6:	e008      	b.n	800670a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	781a      	ldrb	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	b292      	uxth	r2, r2
 8006702:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	3301      	adds	r3, #1
 8006708:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006710:	b29b      	uxth	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1c8      	bne.n	80066ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2200      	movs	r2, #0
 8006730:	2140      	movs	r1, #64	; 0x40
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 fa92 	bl	8006c5c <UART_WaitOnFlagUntilTimeout>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2220      	movs	r2, #32
 8006742:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e005      	b.n	8006754 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	e000      	b.n	8006754 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006752:	2302      	movs	r3, #2
  }
}
 8006754:	4618      	mov	r0, r3
 8006756:	3720      	adds	r7, #32
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4b8a      	ldr	r3, [pc, #552]	; (80069b0 <UART_SetConfig+0x254>)
 8006788:	4013      	ands	r3, r2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6812      	ldr	r2, [r2, #0]
 800678e:	6979      	ldr	r1, [r7, #20]
 8006790:	430b      	orrs	r3, r1
 8006792:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a78      	ldr	r2, [pc, #480]	; (80069b4 <UART_SetConfig+0x258>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d120      	bne.n	800681a <UART_SetConfig+0xbe>
 80067d8:	4b77      	ldr	r3, [pc, #476]	; (80069b8 <UART_SetConfig+0x25c>)
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d817      	bhi.n	8006814 <UART_SetConfig+0xb8>
 80067e4:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <UART_SetConfig+0x90>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	080067fd 	.word	0x080067fd
 80067f0:	08006809 	.word	0x08006809
 80067f4:	0800680f 	.word	0x0800680f
 80067f8:	08006803 	.word	0x08006803
 80067fc:	2300      	movs	r3, #0
 80067fe:	77fb      	strb	r3, [r7, #31]
 8006800:	e01d      	b.n	800683e <UART_SetConfig+0xe2>
 8006802:	2302      	movs	r3, #2
 8006804:	77fb      	strb	r3, [r7, #31]
 8006806:	e01a      	b.n	800683e <UART_SetConfig+0xe2>
 8006808:	2304      	movs	r3, #4
 800680a:	77fb      	strb	r3, [r7, #31]
 800680c:	e017      	b.n	800683e <UART_SetConfig+0xe2>
 800680e:	2308      	movs	r3, #8
 8006810:	77fb      	strb	r3, [r7, #31]
 8006812:	e014      	b.n	800683e <UART_SetConfig+0xe2>
 8006814:	2310      	movs	r3, #16
 8006816:	77fb      	strb	r3, [r7, #31]
 8006818:	e011      	b.n	800683e <UART_SetConfig+0xe2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a67      	ldr	r2, [pc, #412]	; (80069bc <UART_SetConfig+0x260>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d102      	bne.n	800682a <UART_SetConfig+0xce>
 8006824:	2300      	movs	r3, #0
 8006826:	77fb      	strb	r3, [r7, #31]
 8006828:	e009      	b.n	800683e <UART_SetConfig+0xe2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a64      	ldr	r2, [pc, #400]	; (80069c0 <UART_SetConfig+0x264>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d102      	bne.n	800683a <UART_SetConfig+0xde>
 8006834:	2300      	movs	r3, #0
 8006836:	77fb      	strb	r3, [r7, #31]
 8006838:	e001      	b.n	800683e <UART_SetConfig+0xe2>
 800683a:	2310      	movs	r3, #16
 800683c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006846:	d15a      	bne.n	80068fe <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006848:	7ffb      	ldrb	r3, [r7, #31]
 800684a:	2b08      	cmp	r3, #8
 800684c:	d827      	bhi.n	800689e <UART_SetConfig+0x142>
 800684e:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <UART_SetConfig+0xf8>)
 8006850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006854:	08006879 	.word	0x08006879
 8006858:	08006881 	.word	0x08006881
 800685c:	08006889 	.word	0x08006889
 8006860:	0800689f 	.word	0x0800689f
 8006864:	0800688f 	.word	0x0800688f
 8006868:	0800689f 	.word	0x0800689f
 800686c:	0800689f 	.word	0x0800689f
 8006870:	0800689f 	.word	0x0800689f
 8006874:	08006897 	.word	0x08006897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006878:	f7ff f94c 	bl	8005b14 <HAL_RCC_GetPCLK1Freq>
 800687c:	61b8      	str	r0, [r7, #24]
        break;
 800687e:	e013      	b.n	80068a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006880:	f7ff f96a 	bl	8005b58 <HAL_RCC_GetPCLK2Freq>
 8006884:	61b8      	str	r0, [r7, #24]
        break;
 8006886:	e00f      	b.n	80068a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006888:	4b4e      	ldr	r3, [pc, #312]	; (80069c4 <UART_SetConfig+0x268>)
 800688a:	61bb      	str	r3, [r7, #24]
        break;
 800688c:	e00c      	b.n	80068a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800688e:	f7ff f8cb 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 8006892:	61b8      	str	r0, [r7, #24]
        break;
 8006894:	e008      	b.n	80068a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800689a:	61bb      	str	r3, [r7, #24]
        break;
 800689c:	e004      	b.n	80068a8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	77bb      	strb	r3, [r7, #30]
        break;
 80068a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d074      	beq.n	8006998 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	005a      	lsls	r2, r3, #1
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	441a      	add	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2b0f      	cmp	r3, #15
 80068c8:	d916      	bls.n	80068f8 <UART_SetConfig+0x19c>
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d0:	d212      	bcs.n	80068f8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f023 030f 	bic.w	r3, r3, #15
 80068da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	89fb      	ldrh	r3, [r7, #14]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	89fa      	ldrh	r2, [r7, #14]
 80068f4:	60da      	str	r2, [r3, #12]
 80068f6:	e04f      	b.n	8006998 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	77bb      	strb	r3, [r7, #30]
 80068fc:	e04c      	b.n	8006998 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068fe:	7ffb      	ldrb	r3, [r7, #31]
 8006900:	2b08      	cmp	r3, #8
 8006902:	d828      	bhi.n	8006956 <UART_SetConfig+0x1fa>
 8006904:	a201      	add	r2, pc, #4	; (adr r2, 800690c <UART_SetConfig+0x1b0>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	08006931 	.word	0x08006931
 8006910:	08006939 	.word	0x08006939
 8006914:	08006941 	.word	0x08006941
 8006918:	08006957 	.word	0x08006957
 800691c:	08006947 	.word	0x08006947
 8006920:	08006957 	.word	0x08006957
 8006924:	08006957 	.word	0x08006957
 8006928:	08006957 	.word	0x08006957
 800692c:	0800694f 	.word	0x0800694f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006930:	f7ff f8f0 	bl	8005b14 <HAL_RCC_GetPCLK1Freq>
 8006934:	61b8      	str	r0, [r7, #24]
        break;
 8006936:	e013      	b.n	8006960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006938:	f7ff f90e 	bl	8005b58 <HAL_RCC_GetPCLK2Freq>
 800693c:	61b8      	str	r0, [r7, #24]
        break;
 800693e:	e00f      	b.n	8006960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006940:	4b20      	ldr	r3, [pc, #128]	; (80069c4 <UART_SetConfig+0x268>)
 8006942:	61bb      	str	r3, [r7, #24]
        break;
 8006944:	e00c      	b.n	8006960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006946:	f7ff f86f 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 800694a:	61b8      	str	r0, [r7, #24]
        break;
 800694c:	e008      	b.n	8006960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800694e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006952:	61bb      	str	r3, [r7, #24]
        break;
 8006954:	e004      	b.n	8006960 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	77bb      	strb	r3, [r7, #30]
        break;
 800695e:	bf00      	nop
    }

    if (pclk != 0U)
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d018      	beq.n	8006998 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	085a      	lsrs	r2, r3, #1
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	441a      	add	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	fbb2 f3f3 	udiv	r3, r2, r3
 8006978:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2b0f      	cmp	r3, #15
 800697e:	d909      	bls.n	8006994 <UART_SetConfig+0x238>
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006986:	d205      	bcs.n	8006994 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	b29a      	uxth	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60da      	str	r2, [r3, #12]
 8006992:	e001      	b.n	8006998 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80069a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3720      	adds	r7, #32
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	efff69f3 	.word	0xefff69f3
 80069b4:	40013800 	.word	0x40013800
 80069b8:	40021000 	.word	0x40021000
 80069bc:	40004400 	.word	0x40004400
 80069c0:	40004800 	.word	0x40004800
 80069c4:	007a1200 	.word	0x007a1200

080069c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00a      	beq.n	8006a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01a      	beq.n	8006ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac6:	d10a      	bne.n	8006ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	605a      	str	r2, [r3, #4]
  }
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b098      	sub	sp, #96	; 0x60
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b1c:	f7fc fbb6 	bl	800328c <HAL_GetTick>
 8006b20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d12e      	bne.n	8006b8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f88c 	bl	8006c5c <UART_WaitOnFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d021      	beq.n	8006b8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b68:	647b      	str	r3, [r7, #68]	; 0x44
 8006b6a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e6      	bne.n	8006b4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e062      	b.n	8006c54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	d149      	bne.n	8006c30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f856 	bl	8006c5c <UART_WaitOnFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d03c      	beq.n	8006c30 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8006bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bdc:	e841 2300 	strex	r3, r2, [r1]
 8006be0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1e6      	bne.n	8006bb6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3308      	adds	r3, #8
 8006bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 0301 	bic.w	r3, r3, #1
 8006bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3308      	adds	r3, #8
 8006c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c08:	61fa      	str	r2, [r7, #28]
 8006c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	69b9      	ldr	r1, [r7, #24]
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	617b      	str	r3, [r7, #20]
   return(result);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e5      	bne.n	8006be8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e011      	b.n	8006c54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3758      	adds	r7, #88	; 0x58
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c6c:	e049      	b.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c74:	d045      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c76:	f7fc fb09 	bl	800328c <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d302      	bcc.n	8006c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e048      	b.n	8006d22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0304 	and.w	r3, r3, #4
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d031      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d110      	bne.n	8006cce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 f838 	bl	8006d2a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2208      	movs	r2, #8
 8006cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e029      	b.n	8006d22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cdc:	d111      	bne.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f81e 	bl	8006d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e00f      	b.n	8006d22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69da      	ldr	r2, [r3, #28]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	bf0c      	ite	eq
 8006d12:	2301      	moveq	r3, #1
 8006d14:	2300      	movne	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	461a      	mov	r2, r3
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d0a6      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b095      	sub	sp, #84	; 0x54
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d50:	643b      	str	r3, [r7, #64]	; 0x40
 8006d52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e6      	bne.n	8006d32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3308      	adds	r3, #8
 8006d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d118      	bne.n	8006dd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f023 0310 	bic.w	r3, r3, #16
 8006db4:	647b      	str	r3, [r7, #68]	; 0x44
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	6979      	ldr	r1, [r7, #20]
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	613b      	str	r3, [r7, #16]
   return(result);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e6      	bne.n	8006da0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006de6:	bf00      	nop
 8006de8:	3754      	adds	r7, #84	; 0x54
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
	...

08006df4 <__errno>:
 8006df4:	4b01      	ldr	r3, [pc, #4]	; (8006dfc <__errno+0x8>)
 8006df6:	6818      	ldr	r0, [r3, #0]
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	20000028 	.word	0x20000028

08006e00 <__libc_init_array>:
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	4d0d      	ldr	r5, [pc, #52]	; (8006e38 <__libc_init_array+0x38>)
 8006e04:	4c0d      	ldr	r4, [pc, #52]	; (8006e3c <__libc_init_array+0x3c>)
 8006e06:	1b64      	subs	r4, r4, r5
 8006e08:	10a4      	asrs	r4, r4, #2
 8006e0a:	2600      	movs	r6, #0
 8006e0c:	42a6      	cmp	r6, r4
 8006e0e:	d109      	bne.n	8006e24 <__libc_init_array+0x24>
 8006e10:	4d0b      	ldr	r5, [pc, #44]	; (8006e40 <__libc_init_array+0x40>)
 8006e12:	4c0c      	ldr	r4, [pc, #48]	; (8006e44 <__libc_init_array+0x44>)
 8006e14:	f001 f914 	bl	8008040 <_init>
 8006e18:	1b64      	subs	r4, r4, r5
 8006e1a:	10a4      	asrs	r4, r4, #2
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	42a6      	cmp	r6, r4
 8006e20:	d105      	bne.n	8006e2e <__libc_init_array+0x2e>
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e28:	4798      	blx	r3
 8006e2a:	3601      	adds	r6, #1
 8006e2c:	e7ee      	b.n	8006e0c <__libc_init_array+0xc>
 8006e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e32:	4798      	blx	r3
 8006e34:	3601      	adds	r6, #1
 8006e36:	e7f2      	b.n	8006e1e <__libc_init_array+0x1e>
 8006e38:	08008298 	.word	0x08008298
 8006e3c:	08008298 	.word	0x08008298
 8006e40:	08008298 	.word	0x08008298
 8006e44:	0800829c 	.word	0x0800829c

08006e48 <memset>:
 8006e48:	4402      	add	r2, r0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d100      	bne.n	8006e52 <memset+0xa>
 8006e50:	4770      	bx	lr
 8006e52:	f803 1b01 	strb.w	r1, [r3], #1
 8006e56:	e7f9      	b.n	8006e4c <memset+0x4>

08006e58 <iprintf>:
 8006e58:	b40f      	push	{r0, r1, r2, r3}
 8006e5a:	4b0a      	ldr	r3, [pc, #40]	; (8006e84 <iprintf+0x2c>)
 8006e5c:	b513      	push	{r0, r1, r4, lr}
 8006e5e:	681c      	ldr	r4, [r3, #0]
 8006e60:	b124      	cbz	r4, 8006e6c <iprintf+0x14>
 8006e62:	69a3      	ldr	r3, [r4, #24]
 8006e64:	b913      	cbnz	r3, 8006e6c <iprintf+0x14>
 8006e66:	4620      	mov	r0, r4
 8006e68:	f000 fae8 	bl	800743c <__sinit>
 8006e6c:	ab05      	add	r3, sp, #20
 8006e6e:	9a04      	ldr	r2, [sp, #16]
 8006e70:	68a1      	ldr	r1, [r4, #8]
 8006e72:	9301      	str	r3, [sp, #4]
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 fd0b 	bl	8007890 <_vfiprintf_r>
 8006e7a:	b002      	add	sp, #8
 8006e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e80:	b004      	add	sp, #16
 8006e82:	4770      	bx	lr
 8006e84:	20000028 	.word	0x20000028

08006e88 <_puts_r>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	460e      	mov	r6, r1
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	b118      	cbz	r0, 8006e98 <_puts_r+0x10>
 8006e90:	6983      	ldr	r3, [r0, #24]
 8006e92:	b90b      	cbnz	r3, 8006e98 <_puts_r+0x10>
 8006e94:	f000 fad2 	bl	800743c <__sinit>
 8006e98:	69ab      	ldr	r3, [r5, #24]
 8006e9a:	68ac      	ldr	r4, [r5, #8]
 8006e9c:	b913      	cbnz	r3, 8006ea4 <_puts_r+0x1c>
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f000 facc 	bl	800743c <__sinit>
 8006ea4:	4b2c      	ldr	r3, [pc, #176]	; (8006f58 <_puts_r+0xd0>)
 8006ea6:	429c      	cmp	r4, r3
 8006ea8:	d120      	bne.n	8006eec <_puts_r+0x64>
 8006eaa:	686c      	ldr	r4, [r5, #4]
 8006eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eae:	07db      	lsls	r3, r3, #31
 8006eb0:	d405      	bmi.n	8006ebe <_puts_r+0x36>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	0598      	lsls	r0, r3, #22
 8006eb6:	d402      	bmi.n	8006ebe <_puts_r+0x36>
 8006eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eba:	f000 fb6f 	bl	800759c <__retarget_lock_acquire_recursive>
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	0719      	lsls	r1, r3, #28
 8006ec2:	d51d      	bpl.n	8006f00 <_puts_r+0x78>
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	b1db      	cbz	r3, 8006f00 <_puts_r+0x78>
 8006ec8:	3e01      	subs	r6, #1
 8006eca:	68a3      	ldr	r3, [r4, #8]
 8006ecc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	60a3      	str	r3, [r4, #8]
 8006ed4:	bb39      	cbnz	r1, 8006f26 <_puts_r+0x9e>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	da38      	bge.n	8006f4c <_puts_r+0xc4>
 8006eda:	4622      	mov	r2, r4
 8006edc:	210a      	movs	r1, #10
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f000 f8b4 	bl	800704c <__swbuf_r>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d011      	beq.n	8006f0c <_puts_r+0x84>
 8006ee8:	250a      	movs	r5, #10
 8006eea:	e011      	b.n	8006f10 <_puts_r+0x88>
 8006eec:	4b1b      	ldr	r3, [pc, #108]	; (8006f5c <_puts_r+0xd4>)
 8006eee:	429c      	cmp	r4, r3
 8006ef0:	d101      	bne.n	8006ef6 <_puts_r+0x6e>
 8006ef2:	68ac      	ldr	r4, [r5, #8]
 8006ef4:	e7da      	b.n	8006eac <_puts_r+0x24>
 8006ef6:	4b1a      	ldr	r3, [pc, #104]	; (8006f60 <_puts_r+0xd8>)
 8006ef8:	429c      	cmp	r4, r3
 8006efa:	bf08      	it	eq
 8006efc:	68ec      	ldreq	r4, [r5, #12]
 8006efe:	e7d5      	b.n	8006eac <_puts_r+0x24>
 8006f00:	4621      	mov	r1, r4
 8006f02:	4628      	mov	r0, r5
 8006f04:	f000 f8f4 	bl	80070f0 <__swsetup_r>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d0dd      	beq.n	8006ec8 <_puts_r+0x40>
 8006f0c:	f04f 35ff 	mov.w	r5, #4294967295
 8006f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f12:	07da      	lsls	r2, r3, #31
 8006f14:	d405      	bmi.n	8006f22 <_puts_r+0x9a>
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	059b      	lsls	r3, r3, #22
 8006f1a:	d402      	bmi.n	8006f22 <_puts_r+0x9a>
 8006f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f1e:	f000 fb3e 	bl	800759e <__retarget_lock_release_recursive>
 8006f22:	4628      	mov	r0, r5
 8006f24:	bd70      	pop	{r4, r5, r6, pc}
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da04      	bge.n	8006f34 <_puts_r+0xac>
 8006f2a:	69a2      	ldr	r2, [r4, #24]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	dc06      	bgt.n	8006f3e <_puts_r+0xb6>
 8006f30:	290a      	cmp	r1, #10
 8006f32:	d004      	beq.n	8006f3e <_puts_r+0xb6>
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	6022      	str	r2, [r4, #0]
 8006f3a:	7019      	strb	r1, [r3, #0]
 8006f3c:	e7c5      	b.n	8006eca <_puts_r+0x42>
 8006f3e:	4622      	mov	r2, r4
 8006f40:	4628      	mov	r0, r5
 8006f42:	f000 f883 	bl	800704c <__swbuf_r>
 8006f46:	3001      	adds	r0, #1
 8006f48:	d1bf      	bne.n	8006eca <_puts_r+0x42>
 8006f4a:	e7df      	b.n	8006f0c <_puts_r+0x84>
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	250a      	movs	r5, #10
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	6022      	str	r2, [r4, #0]
 8006f54:	701d      	strb	r5, [r3, #0]
 8006f56:	e7db      	b.n	8006f10 <_puts_r+0x88>
 8006f58:	08008224 	.word	0x08008224
 8006f5c:	08008244 	.word	0x08008244
 8006f60:	08008204 	.word	0x08008204

08006f64 <puts>:
 8006f64:	4b02      	ldr	r3, [pc, #8]	; (8006f70 <puts+0xc>)
 8006f66:	4601      	mov	r1, r0
 8006f68:	6818      	ldr	r0, [r3, #0]
 8006f6a:	f7ff bf8d 	b.w	8006e88 <_puts_r>
 8006f6e:	bf00      	nop
 8006f70:	20000028 	.word	0x20000028

08006f74 <srand>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4b10      	ldr	r3, [pc, #64]	; (8006fb8 <srand+0x44>)
 8006f78:	681d      	ldr	r5, [r3, #0]
 8006f7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	b9b3      	cbnz	r3, 8006fae <srand+0x3a>
 8006f80:	2018      	movs	r0, #24
 8006f82:	f000 fb73 	bl	800766c <malloc>
 8006f86:	4602      	mov	r2, r0
 8006f88:	63a8      	str	r0, [r5, #56]	; 0x38
 8006f8a:	b920      	cbnz	r0, 8006f96 <srand+0x22>
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <srand+0x48>)
 8006f8e:	480c      	ldr	r0, [pc, #48]	; (8006fc0 <srand+0x4c>)
 8006f90:	2142      	movs	r1, #66	; 0x42
 8006f92:	f000 f91b 	bl	80071cc <__assert_func>
 8006f96:	490b      	ldr	r1, [pc, #44]	; (8006fc4 <srand+0x50>)
 8006f98:	4b0b      	ldr	r3, [pc, #44]	; (8006fc8 <srand+0x54>)
 8006f9a:	e9c0 1300 	strd	r1, r3, [r0]
 8006f9e:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <srand+0x58>)
 8006fa0:	6083      	str	r3, [r0, #8]
 8006fa2:	230b      	movs	r3, #11
 8006fa4:	8183      	strh	r3, [r0, #12]
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	2001      	movs	r0, #1
 8006faa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006fae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	611c      	str	r4, [r3, #16]
 8006fb4:	615a      	str	r2, [r3, #20]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	20000028 	.word	0x20000028
 8006fbc:	08008154 	.word	0x08008154
 8006fc0:	0800816b 	.word	0x0800816b
 8006fc4:	abcd330e 	.word	0xabcd330e
 8006fc8:	e66d1234 	.word	0xe66d1234
 8006fcc:	0005deec 	.word	0x0005deec

08006fd0 <rand>:
 8006fd0:	4b16      	ldr	r3, [pc, #88]	; (800702c <rand+0x5c>)
 8006fd2:	b510      	push	{r4, lr}
 8006fd4:	681c      	ldr	r4, [r3, #0]
 8006fd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006fd8:	b9b3      	cbnz	r3, 8007008 <rand+0x38>
 8006fda:	2018      	movs	r0, #24
 8006fdc:	f000 fb46 	bl	800766c <malloc>
 8006fe0:	63a0      	str	r0, [r4, #56]	; 0x38
 8006fe2:	b928      	cbnz	r0, 8006ff0 <rand+0x20>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	4b12      	ldr	r3, [pc, #72]	; (8007030 <rand+0x60>)
 8006fe8:	4812      	ldr	r0, [pc, #72]	; (8007034 <rand+0x64>)
 8006fea:	214e      	movs	r1, #78	; 0x4e
 8006fec:	f000 f8ee 	bl	80071cc <__assert_func>
 8006ff0:	4a11      	ldr	r2, [pc, #68]	; (8007038 <rand+0x68>)
 8006ff2:	4b12      	ldr	r3, [pc, #72]	; (800703c <rand+0x6c>)
 8006ff4:	e9c0 2300 	strd	r2, r3, [r0]
 8006ff8:	4b11      	ldr	r3, [pc, #68]	; (8007040 <rand+0x70>)
 8006ffa:	6083      	str	r3, [r0, #8]
 8006ffc:	230b      	movs	r3, #11
 8006ffe:	8183      	strh	r3, [r0, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	2300      	movs	r3, #0
 8007004:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007008:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800700a:	4a0e      	ldr	r2, [pc, #56]	; (8007044 <rand+0x74>)
 800700c:	6920      	ldr	r0, [r4, #16]
 800700e:	6963      	ldr	r3, [r4, #20]
 8007010:	490d      	ldr	r1, [pc, #52]	; (8007048 <rand+0x78>)
 8007012:	4342      	muls	r2, r0
 8007014:	fb01 2203 	mla	r2, r1, r3, r2
 8007018:	fba0 0101 	umull	r0, r1, r0, r1
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	eb42 0001 	adc.w	r0, r2, r1
 8007022:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8007026:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800702a:	bd10      	pop	{r4, pc}
 800702c:	20000028 	.word	0x20000028
 8007030:	08008154 	.word	0x08008154
 8007034:	0800816b 	.word	0x0800816b
 8007038:	abcd330e 	.word	0xabcd330e
 800703c:	e66d1234 	.word	0xe66d1234
 8007040:	0005deec 	.word	0x0005deec
 8007044:	5851f42d 	.word	0x5851f42d
 8007048:	4c957f2d 	.word	0x4c957f2d

0800704c <__swbuf_r>:
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	460e      	mov	r6, r1
 8007050:	4614      	mov	r4, r2
 8007052:	4605      	mov	r5, r0
 8007054:	b118      	cbz	r0, 800705e <__swbuf_r+0x12>
 8007056:	6983      	ldr	r3, [r0, #24]
 8007058:	b90b      	cbnz	r3, 800705e <__swbuf_r+0x12>
 800705a:	f000 f9ef 	bl	800743c <__sinit>
 800705e:	4b21      	ldr	r3, [pc, #132]	; (80070e4 <__swbuf_r+0x98>)
 8007060:	429c      	cmp	r4, r3
 8007062:	d12b      	bne.n	80070bc <__swbuf_r+0x70>
 8007064:	686c      	ldr	r4, [r5, #4]
 8007066:	69a3      	ldr	r3, [r4, #24]
 8007068:	60a3      	str	r3, [r4, #8]
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	071a      	lsls	r2, r3, #28
 800706e:	d52f      	bpl.n	80070d0 <__swbuf_r+0x84>
 8007070:	6923      	ldr	r3, [r4, #16]
 8007072:	b36b      	cbz	r3, 80070d0 <__swbuf_r+0x84>
 8007074:	6923      	ldr	r3, [r4, #16]
 8007076:	6820      	ldr	r0, [r4, #0]
 8007078:	1ac0      	subs	r0, r0, r3
 800707a:	6963      	ldr	r3, [r4, #20]
 800707c:	b2f6      	uxtb	r6, r6
 800707e:	4283      	cmp	r3, r0
 8007080:	4637      	mov	r7, r6
 8007082:	dc04      	bgt.n	800708e <__swbuf_r+0x42>
 8007084:	4621      	mov	r1, r4
 8007086:	4628      	mov	r0, r5
 8007088:	f000 f944 	bl	8007314 <_fflush_r>
 800708c:	bb30      	cbnz	r0, 80070dc <__swbuf_r+0x90>
 800708e:	68a3      	ldr	r3, [r4, #8]
 8007090:	3b01      	subs	r3, #1
 8007092:	60a3      	str	r3, [r4, #8]
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	6022      	str	r2, [r4, #0]
 800709a:	701e      	strb	r6, [r3, #0]
 800709c:	6963      	ldr	r3, [r4, #20]
 800709e:	3001      	adds	r0, #1
 80070a0:	4283      	cmp	r3, r0
 80070a2:	d004      	beq.n	80070ae <__swbuf_r+0x62>
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	07db      	lsls	r3, r3, #31
 80070a8:	d506      	bpl.n	80070b8 <__swbuf_r+0x6c>
 80070aa:	2e0a      	cmp	r6, #10
 80070ac:	d104      	bne.n	80070b8 <__swbuf_r+0x6c>
 80070ae:	4621      	mov	r1, r4
 80070b0:	4628      	mov	r0, r5
 80070b2:	f000 f92f 	bl	8007314 <_fflush_r>
 80070b6:	b988      	cbnz	r0, 80070dc <__swbuf_r+0x90>
 80070b8:	4638      	mov	r0, r7
 80070ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070bc:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <__swbuf_r+0x9c>)
 80070be:	429c      	cmp	r4, r3
 80070c0:	d101      	bne.n	80070c6 <__swbuf_r+0x7a>
 80070c2:	68ac      	ldr	r4, [r5, #8]
 80070c4:	e7cf      	b.n	8007066 <__swbuf_r+0x1a>
 80070c6:	4b09      	ldr	r3, [pc, #36]	; (80070ec <__swbuf_r+0xa0>)
 80070c8:	429c      	cmp	r4, r3
 80070ca:	bf08      	it	eq
 80070cc:	68ec      	ldreq	r4, [r5, #12]
 80070ce:	e7ca      	b.n	8007066 <__swbuf_r+0x1a>
 80070d0:	4621      	mov	r1, r4
 80070d2:	4628      	mov	r0, r5
 80070d4:	f000 f80c 	bl	80070f0 <__swsetup_r>
 80070d8:	2800      	cmp	r0, #0
 80070da:	d0cb      	beq.n	8007074 <__swbuf_r+0x28>
 80070dc:	f04f 37ff 	mov.w	r7, #4294967295
 80070e0:	e7ea      	b.n	80070b8 <__swbuf_r+0x6c>
 80070e2:	bf00      	nop
 80070e4:	08008224 	.word	0x08008224
 80070e8:	08008244 	.word	0x08008244
 80070ec:	08008204 	.word	0x08008204

080070f0 <__swsetup_r>:
 80070f0:	4b32      	ldr	r3, [pc, #200]	; (80071bc <__swsetup_r+0xcc>)
 80070f2:	b570      	push	{r4, r5, r6, lr}
 80070f4:	681d      	ldr	r5, [r3, #0]
 80070f6:	4606      	mov	r6, r0
 80070f8:	460c      	mov	r4, r1
 80070fa:	b125      	cbz	r5, 8007106 <__swsetup_r+0x16>
 80070fc:	69ab      	ldr	r3, [r5, #24]
 80070fe:	b913      	cbnz	r3, 8007106 <__swsetup_r+0x16>
 8007100:	4628      	mov	r0, r5
 8007102:	f000 f99b 	bl	800743c <__sinit>
 8007106:	4b2e      	ldr	r3, [pc, #184]	; (80071c0 <__swsetup_r+0xd0>)
 8007108:	429c      	cmp	r4, r3
 800710a:	d10f      	bne.n	800712c <__swsetup_r+0x3c>
 800710c:	686c      	ldr	r4, [r5, #4]
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007114:	0719      	lsls	r1, r3, #28
 8007116:	d42c      	bmi.n	8007172 <__swsetup_r+0x82>
 8007118:	06dd      	lsls	r5, r3, #27
 800711a:	d411      	bmi.n	8007140 <__swsetup_r+0x50>
 800711c:	2309      	movs	r3, #9
 800711e:	6033      	str	r3, [r6, #0]
 8007120:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007124:	81a3      	strh	r3, [r4, #12]
 8007126:	f04f 30ff 	mov.w	r0, #4294967295
 800712a:	e03e      	b.n	80071aa <__swsetup_r+0xba>
 800712c:	4b25      	ldr	r3, [pc, #148]	; (80071c4 <__swsetup_r+0xd4>)
 800712e:	429c      	cmp	r4, r3
 8007130:	d101      	bne.n	8007136 <__swsetup_r+0x46>
 8007132:	68ac      	ldr	r4, [r5, #8]
 8007134:	e7eb      	b.n	800710e <__swsetup_r+0x1e>
 8007136:	4b24      	ldr	r3, [pc, #144]	; (80071c8 <__swsetup_r+0xd8>)
 8007138:	429c      	cmp	r4, r3
 800713a:	bf08      	it	eq
 800713c:	68ec      	ldreq	r4, [r5, #12]
 800713e:	e7e6      	b.n	800710e <__swsetup_r+0x1e>
 8007140:	0758      	lsls	r0, r3, #29
 8007142:	d512      	bpl.n	800716a <__swsetup_r+0x7a>
 8007144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007146:	b141      	cbz	r1, 800715a <__swsetup_r+0x6a>
 8007148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800714c:	4299      	cmp	r1, r3
 800714e:	d002      	beq.n	8007156 <__swsetup_r+0x66>
 8007150:	4630      	mov	r0, r6
 8007152:	f000 fa93 	bl	800767c <_free_r>
 8007156:	2300      	movs	r3, #0
 8007158:	6363      	str	r3, [r4, #52]	; 0x34
 800715a:	89a3      	ldrh	r3, [r4, #12]
 800715c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007160:	81a3      	strh	r3, [r4, #12]
 8007162:	2300      	movs	r3, #0
 8007164:	6063      	str	r3, [r4, #4]
 8007166:	6923      	ldr	r3, [r4, #16]
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	f043 0308 	orr.w	r3, r3, #8
 8007170:	81a3      	strh	r3, [r4, #12]
 8007172:	6923      	ldr	r3, [r4, #16]
 8007174:	b94b      	cbnz	r3, 800718a <__swsetup_r+0x9a>
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800717c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007180:	d003      	beq.n	800718a <__swsetup_r+0x9a>
 8007182:	4621      	mov	r1, r4
 8007184:	4630      	mov	r0, r6
 8007186:	f000 fa31 	bl	80075ec <__smakebuf_r>
 800718a:	89a0      	ldrh	r0, [r4, #12]
 800718c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007190:	f010 0301 	ands.w	r3, r0, #1
 8007194:	d00a      	beq.n	80071ac <__swsetup_r+0xbc>
 8007196:	2300      	movs	r3, #0
 8007198:	60a3      	str	r3, [r4, #8]
 800719a:	6963      	ldr	r3, [r4, #20]
 800719c:	425b      	negs	r3, r3
 800719e:	61a3      	str	r3, [r4, #24]
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	b943      	cbnz	r3, 80071b6 <__swsetup_r+0xc6>
 80071a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071a8:	d1ba      	bne.n	8007120 <__swsetup_r+0x30>
 80071aa:	bd70      	pop	{r4, r5, r6, pc}
 80071ac:	0781      	lsls	r1, r0, #30
 80071ae:	bf58      	it	pl
 80071b0:	6963      	ldrpl	r3, [r4, #20]
 80071b2:	60a3      	str	r3, [r4, #8]
 80071b4:	e7f4      	b.n	80071a0 <__swsetup_r+0xb0>
 80071b6:	2000      	movs	r0, #0
 80071b8:	e7f7      	b.n	80071aa <__swsetup_r+0xba>
 80071ba:	bf00      	nop
 80071bc:	20000028 	.word	0x20000028
 80071c0:	08008224 	.word	0x08008224
 80071c4:	08008244 	.word	0x08008244
 80071c8:	08008204 	.word	0x08008204

080071cc <__assert_func>:
 80071cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071ce:	4614      	mov	r4, r2
 80071d0:	461a      	mov	r2, r3
 80071d2:	4b09      	ldr	r3, [pc, #36]	; (80071f8 <__assert_func+0x2c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4605      	mov	r5, r0
 80071d8:	68d8      	ldr	r0, [r3, #12]
 80071da:	b14c      	cbz	r4, 80071f0 <__assert_func+0x24>
 80071dc:	4b07      	ldr	r3, [pc, #28]	; (80071fc <__assert_func+0x30>)
 80071de:	9100      	str	r1, [sp, #0]
 80071e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071e4:	4906      	ldr	r1, [pc, #24]	; (8007200 <__assert_func+0x34>)
 80071e6:	462b      	mov	r3, r5
 80071e8:	f000 f9a6 	bl	8007538 <fiprintf>
 80071ec:	f000 fe7a 	bl	8007ee4 <abort>
 80071f0:	4b04      	ldr	r3, [pc, #16]	; (8007204 <__assert_func+0x38>)
 80071f2:	461c      	mov	r4, r3
 80071f4:	e7f3      	b.n	80071de <__assert_func+0x12>
 80071f6:	bf00      	nop
 80071f8:	20000028 	.word	0x20000028
 80071fc:	080081c6 	.word	0x080081c6
 8007200:	080081d3 	.word	0x080081d3
 8007204:	08008201 	.word	0x08008201

08007208 <__sflush_r>:
 8007208:	898a      	ldrh	r2, [r1, #12]
 800720a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800720e:	4605      	mov	r5, r0
 8007210:	0710      	lsls	r0, r2, #28
 8007212:	460c      	mov	r4, r1
 8007214:	d458      	bmi.n	80072c8 <__sflush_r+0xc0>
 8007216:	684b      	ldr	r3, [r1, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	dc05      	bgt.n	8007228 <__sflush_r+0x20>
 800721c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800721e:	2b00      	cmp	r3, #0
 8007220:	dc02      	bgt.n	8007228 <__sflush_r+0x20>
 8007222:	2000      	movs	r0, #0
 8007224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800722a:	2e00      	cmp	r6, #0
 800722c:	d0f9      	beq.n	8007222 <__sflush_r+0x1a>
 800722e:	2300      	movs	r3, #0
 8007230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007234:	682f      	ldr	r7, [r5, #0]
 8007236:	602b      	str	r3, [r5, #0]
 8007238:	d032      	beq.n	80072a0 <__sflush_r+0x98>
 800723a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800723c:	89a3      	ldrh	r3, [r4, #12]
 800723e:	075a      	lsls	r2, r3, #29
 8007240:	d505      	bpl.n	800724e <__sflush_r+0x46>
 8007242:	6863      	ldr	r3, [r4, #4]
 8007244:	1ac0      	subs	r0, r0, r3
 8007246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007248:	b10b      	cbz	r3, 800724e <__sflush_r+0x46>
 800724a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800724c:	1ac0      	subs	r0, r0, r3
 800724e:	2300      	movs	r3, #0
 8007250:	4602      	mov	r2, r0
 8007252:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007254:	6a21      	ldr	r1, [r4, #32]
 8007256:	4628      	mov	r0, r5
 8007258:	47b0      	blx	r6
 800725a:	1c43      	adds	r3, r0, #1
 800725c:	89a3      	ldrh	r3, [r4, #12]
 800725e:	d106      	bne.n	800726e <__sflush_r+0x66>
 8007260:	6829      	ldr	r1, [r5, #0]
 8007262:	291d      	cmp	r1, #29
 8007264:	d82c      	bhi.n	80072c0 <__sflush_r+0xb8>
 8007266:	4a2a      	ldr	r2, [pc, #168]	; (8007310 <__sflush_r+0x108>)
 8007268:	40ca      	lsrs	r2, r1
 800726a:	07d6      	lsls	r6, r2, #31
 800726c:	d528      	bpl.n	80072c0 <__sflush_r+0xb8>
 800726e:	2200      	movs	r2, #0
 8007270:	6062      	str	r2, [r4, #4]
 8007272:	04d9      	lsls	r1, r3, #19
 8007274:	6922      	ldr	r2, [r4, #16]
 8007276:	6022      	str	r2, [r4, #0]
 8007278:	d504      	bpl.n	8007284 <__sflush_r+0x7c>
 800727a:	1c42      	adds	r2, r0, #1
 800727c:	d101      	bne.n	8007282 <__sflush_r+0x7a>
 800727e:	682b      	ldr	r3, [r5, #0]
 8007280:	b903      	cbnz	r3, 8007284 <__sflush_r+0x7c>
 8007282:	6560      	str	r0, [r4, #84]	; 0x54
 8007284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007286:	602f      	str	r7, [r5, #0]
 8007288:	2900      	cmp	r1, #0
 800728a:	d0ca      	beq.n	8007222 <__sflush_r+0x1a>
 800728c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007290:	4299      	cmp	r1, r3
 8007292:	d002      	beq.n	800729a <__sflush_r+0x92>
 8007294:	4628      	mov	r0, r5
 8007296:	f000 f9f1 	bl	800767c <_free_r>
 800729a:	2000      	movs	r0, #0
 800729c:	6360      	str	r0, [r4, #52]	; 0x34
 800729e:	e7c1      	b.n	8007224 <__sflush_r+0x1c>
 80072a0:	6a21      	ldr	r1, [r4, #32]
 80072a2:	2301      	movs	r3, #1
 80072a4:	4628      	mov	r0, r5
 80072a6:	47b0      	blx	r6
 80072a8:	1c41      	adds	r1, r0, #1
 80072aa:	d1c7      	bne.n	800723c <__sflush_r+0x34>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0c4      	beq.n	800723c <__sflush_r+0x34>
 80072b2:	2b1d      	cmp	r3, #29
 80072b4:	d001      	beq.n	80072ba <__sflush_r+0xb2>
 80072b6:	2b16      	cmp	r3, #22
 80072b8:	d101      	bne.n	80072be <__sflush_r+0xb6>
 80072ba:	602f      	str	r7, [r5, #0]
 80072bc:	e7b1      	b.n	8007222 <__sflush_r+0x1a>
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072c4:	81a3      	strh	r3, [r4, #12]
 80072c6:	e7ad      	b.n	8007224 <__sflush_r+0x1c>
 80072c8:	690f      	ldr	r7, [r1, #16]
 80072ca:	2f00      	cmp	r7, #0
 80072cc:	d0a9      	beq.n	8007222 <__sflush_r+0x1a>
 80072ce:	0793      	lsls	r3, r2, #30
 80072d0:	680e      	ldr	r6, [r1, #0]
 80072d2:	bf08      	it	eq
 80072d4:	694b      	ldreq	r3, [r1, #20]
 80072d6:	600f      	str	r7, [r1, #0]
 80072d8:	bf18      	it	ne
 80072da:	2300      	movne	r3, #0
 80072dc:	eba6 0807 	sub.w	r8, r6, r7
 80072e0:	608b      	str	r3, [r1, #8]
 80072e2:	f1b8 0f00 	cmp.w	r8, #0
 80072e6:	dd9c      	ble.n	8007222 <__sflush_r+0x1a>
 80072e8:	6a21      	ldr	r1, [r4, #32]
 80072ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072ec:	4643      	mov	r3, r8
 80072ee:	463a      	mov	r2, r7
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b0      	blx	r6
 80072f4:	2800      	cmp	r0, #0
 80072f6:	dc06      	bgt.n	8007306 <__sflush_r+0xfe>
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072fe:	81a3      	strh	r3, [r4, #12]
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	e78e      	b.n	8007224 <__sflush_r+0x1c>
 8007306:	4407      	add	r7, r0
 8007308:	eba8 0800 	sub.w	r8, r8, r0
 800730c:	e7e9      	b.n	80072e2 <__sflush_r+0xda>
 800730e:	bf00      	nop
 8007310:	20400001 	.word	0x20400001

08007314 <_fflush_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	690b      	ldr	r3, [r1, #16]
 8007318:	4605      	mov	r5, r0
 800731a:	460c      	mov	r4, r1
 800731c:	b913      	cbnz	r3, 8007324 <_fflush_r+0x10>
 800731e:	2500      	movs	r5, #0
 8007320:	4628      	mov	r0, r5
 8007322:	bd38      	pop	{r3, r4, r5, pc}
 8007324:	b118      	cbz	r0, 800732e <_fflush_r+0x1a>
 8007326:	6983      	ldr	r3, [r0, #24]
 8007328:	b90b      	cbnz	r3, 800732e <_fflush_r+0x1a>
 800732a:	f000 f887 	bl	800743c <__sinit>
 800732e:	4b14      	ldr	r3, [pc, #80]	; (8007380 <_fflush_r+0x6c>)
 8007330:	429c      	cmp	r4, r3
 8007332:	d11b      	bne.n	800736c <_fflush_r+0x58>
 8007334:	686c      	ldr	r4, [r5, #4]
 8007336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0ef      	beq.n	800731e <_fflush_r+0xa>
 800733e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007340:	07d0      	lsls	r0, r2, #31
 8007342:	d404      	bmi.n	800734e <_fflush_r+0x3a>
 8007344:	0599      	lsls	r1, r3, #22
 8007346:	d402      	bmi.n	800734e <_fflush_r+0x3a>
 8007348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800734a:	f000 f927 	bl	800759c <__retarget_lock_acquire_recursive>
 800734e:	4628      	mov	r0, r5
 8007350:	4621      	mov	r1, r4
 8007352:	f7ff ff59 	bl	8007208 <__sflush_r>
 8007356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007358:	07da      	lsls	r2, r3, #31
 800735a:	4605      	mov	r5, r0
 800735c:	d4e0      	bmi.n	8007320 <_fflush_r+0xc>
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	059b      	lsls	r3, r3, #22
 8007362:	d4dd      	bmi.n	8007320 <_fflush_r+0xc>
 8007364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007366:	f000 f91a 	bl	800759e <__retarget_lock_release_recursive>
 800736a:	e7d9      	b.n	8007320 <_fflush_r+0xc>
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <_fflush_r+0x70>)
 800736e:	429c      	cmp	r4, r3
 8007370:	d101      	bne.n	8007376 <_fflush_r+0x62>
 8007372:	68ac      	ldr	r4, [r5, #8]
 8007374:	e7df      	b.n	8007336 <_fflush_r+0x22>
 8007376:	4b04      	ldr	r3, [pc, #16]	; (8007388 <_fflush_r+0x74>)
 8007378:	429c      	cmp	r4, r3
 800737a:	bf08      	it	eq
 800737c:	68ec      	ldreq	r4, [r5, #12]
 800737e:	e7da      	b.n	8007336 <_fflush_r+0x22>
 8007380:	08008224 	.word	0x08008224
 8007384:	08008244 	.word	0x08008244
 8007388:	08008204 	.word	0x08008204

0800738c <std>:
 800738c:	2300      	movs	r3, #0
 800738e:	b510      	push	{r4, lr}
 8007390:	4604      	mov	r4, r0
 8007392:	e9c0 3300 	strd	r3, r3, [r0]
 8007396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800739a:	6083      	str	r3, [r0, #8]
 800739c:	8181      	strh	r1, [r0, #12]
 800739e:	6643      	str	r3, [r0, #100]	; 0x64
 80073a0:	81c2      	strh	r2, [r0, #14]
 80073a2:	6183      	str	r3, [r0, #24]
 80073a4:	4619      	mov	r1, r3
 80073a6:	2208      	movs	r2, #8
 80073a8:	305c      	adds	r0, #92	; 0x5c
 80073aa:	f7ff fd4d 	bl	8006e48 <memset>
 80073ae:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <std+0x38>)
 80073b0:	6263      	str	r3, [r4, #36]	; 0x24
 80073b2:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <std+0x3c>)
 80073b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80073b6:	4b05      	ldr	r3, [pc, #20]	; (80073cc <std+0x40>)
 80073b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073ba:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <std+0x44>)
 80073bc:	6224      	str	r4, [r4, #32]
 80073be:	6323      	str	r3, [r4, #48]	; 0x30
 80073c0:	bd10      	pop	{r4, pc}
 80073c2:	bf00      	nop
 80073c4:	08007e39 	.word	0x08007e39
 80073c8:	08007e5b 	.word	0x08007e5b
 80073cc:	08007e93 	.word	0x08007e93
 80073d0:	08007eb7 	.word	0x08007eb7

080073d4 <_cleanup_r>:
 80073d4:	4901      	ldr	r1, [pc, #4]	; (80073dc <_cleanup_r+0x8>)
 80073d6:	f000 b8c1 	b.w	800755c <_fwalk_reent>
 80073da:	bf00      	nop
 80073dc:	08007315 	.word	0x08007315

080073e0 <__sfmoreglue>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	2268      	movs	r2, #104	; 0x68
 80073e4:	1e4d      	subs	r5, r1, #1
 80073e6:	4355      	muls	r5, r2
 80073e8:	460e      	mov	r6, r1
 80073ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073ee:	f000 f9b1 	bl	8007754 <_malloc_r>
 80073f2:	4604      	mov	r4, r0
 80073f4:	b140      	cbz	r0, 8007408 <__sfmoreglue+0x28>
 80073f6:	2100      	movs	r1, #0
 80073f8:	e9c0 1600 	strd	r1, r6, [r0]
 80073fc:	300c      	adds	r0, #12
 80073fe:	60a0      	str	r0, [r4, #8]
 8007400:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007404:	f7ff fd20 	bl	8006e48 <memset>
 8007408:	4620      	mov	r0, r4
 800740a:	bd70      	pop	{r4, r5, r6, pc}

0800740c <__sfp_lock_acquire>:
 800740c:	4801      	ldr	r0, [pc, #4]	; (8007414 <__sfp_lock_acquire+0x8>)
 800740e:	f000 b8c5 	b.w	800759c <__retarget_lock_acquire_recursive>
 8007412:	bf00      	nop
 8007414:	20001645 	.word	0x20001645

08007418 <__sfp_lock_release>:
 8007418:	4801      	ldr	r0, [pc, #4]	; (8007420 <__sfp_lock_release+0x8>)
 800741a:	f000 b8c0 	b.w	800759e <__retarget_lock_release_recursive>
 800741e:	bf00      	nop
 8007420:	20001645 	.word	0x20001645

08007424 <__sinit_lock_acquire>:
 8007424:	4801      	ldr	r0, [pc, #4]	; (800742c <__sinit_lock_acquire+0x8>)
 8007426:	f000 b8b9 	b.w	800759c <__retarget_lock_acquire_recursive>
 800742a:	bf00      	nop
 800742c:	20001646 	.word	0x20001646

08007430 <__sinit_lock_release>:
 8007430:	4801      	ldr	r0, [pc, #4]	; (8007438 <__sinit_lock_release+0x8>)
 8007432:	f000 b8b4 	b.w	800759e <__retarget_lock_release_recursive>
 8007436:	bf00      	nop
 8007438:	20001646 	.word	0x20001646

0800743c <__sinit>:
 800743c:	b510      	push	{r4, lr}
 800743e:	4604      	mov	r4, r0
 8007440:	f7ff fff0 	bl	8007424 <__sinit_lock_acquire>
 8007444:	69a3      	ldr	r3, [r4, #24]
 8007446:	b11b      	cbz	r3, 8007450 <__sinit+0x14>
 8007448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800744c:	f7ff bff0 	b.w	8007430 <__sinit_lock_release>
 8007450:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007454:	6523      	str	r3, [r4, #80]	; 0x50
 8007456:	4b13      	ldr	r3, [pc, #76]	; (80074a4 <__sinit+0x68>)
 8007458:	4a13      	ldr	r2, [pc, #76]	; (80074a8 <__sinit+0x6c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	62a2      	str	r2, [r4, #40]	; 0x28
 800745e:	42a3      	cmp	r3, r4
 8007460:	bf04      	itt	eq
 8007462:	2301      	moveq	r3, #1
 8007464:	61a3      	streq	r3, [r4, #24]
 8007466:	4620      	mov	r0, r4
 8007468:	f000 f820 	bl	80074ac <__sfp>
 800746c:	6060      	str	r0, [r4, #4]
 800746e:	4620      	mov	r0, r4
 8007470:	f000 f81c 	bl	80074ac <__sfp>
 8007474:	60a0      	str	r0, [r4, #8]
 8007476:	4620      	mov	r0, r4
 8007478:	f000 f818 	bl	80074ac <__sfp>
 800747c:	2200      	movs	r2, #0
 800747e:	60e0      	str	r0, [r4, #12]
 8007480:	2104      	movs	r1, #4
 8007482:	6860      	ldr	r0, [r4, #4]
 8007484:	f7ff ff82 	bl	800738c <std>
 8007488:	68a0      	ldr	r0, [r4, #8]
 800748a:	2201      	movs	r2, #1
 800748c:	2109      	movs	r1, #9
 800748e:	f7ff ff7d 	bl	800738c <std>
 8007492:	68e0      	ldr	r0, [r4, #12]
 8007494:	2202      	movs	r2, #2
 8007496:	2112      	movs	r1, #18
 8007498:	f7ff ff78 	bl	800738c <std>
 800749c:	2301      	movs	r3, #1
 800749e:	61a3      	str	r3, [r4, #24]
 80074a0:	e7d2      	b.n	8007448 <__sinit+0xc>
 80074a2:	bf00      	nop
 80074a4:	08008150 	.word	0x08008150
 80074a8:	080073d5 	.word	0x080073d5

080074ac <__sfp>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	4607      	mov	r7, r0
 80074b0:	f7ff ffac 	bl	800740c <__sfp_lock_acquire>
 80074b4:	4b1e      	ldr	r3, [pc, #120]	; (8007530 <__sfp+0x84>)
 80074b6:	681e      	ldr	r6, [r3, #0]
 80074b8:	69b3      	ldr	r3, [r6, #24]
 80074ba:	b913      	cbnz	r3, 80074c2 <__sfp+0x16>
 80074bc:	4630      	mov	r0, r6
 80074be:	f7ff ffbd 	bl	800743c <__sinit>
 80074c2:	3648      	adds	r6, #72	; 0x48
 80074c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	d503      	bpl.n	80074d4 <__sfp+0x28>
 80074cc:	6833      	ldr	r3, [r6, #0]
 80074ce:	b30b      	cbz	r3, 8007514 <__sfp+0x68>
 80074d0:	6836      	ldr	r6, [r6, #0]
 80074d2:	e7f7      	b.n	80074c4 <__sfp+0x18>
 80074d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074d8:	b9d5      	cbnz	r5, 8007510 <__sfp+0x64>
 80074da:	4b16      	ldr	r3, [pc, #88]	; (8007534 <__sfp+0x88>)
 80074dc:	60e3      	str	r3, [r4, #12]
 80074de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074e2:	6665      	str	r5, [r4, #100]	; 0x64
 80074e4:	f000 f859 	bl	800759a <__retarget_lock_init_recursive>
 80074e8:	f7ff ff96 	bl	8007418 <__sfp_lock_release>
 80074ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074f4:	6025      	str	r5, [r4, #0]
 80074f6:	61a5      	str	r5, [r4, #24]
 80074f8:	2208      	movs	r2, #8
 80074fa:	4629      	mov	r1, r5
 80074fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007500:	f7ff fca2 	bl	8006e48 <memset>
 8007504:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007508:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800750c:	4620      	mov	r0, r4
 800750e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007510:	3468      	adds	r4, #104	; 0x68
 8007512:	e7d9      	b.n	80074c8 <__sfp+0x1c>
 8007514:	2104      	movs	r1, #4
 8007516:	4638      	mov	r0, r7
 8007518:	f7ff ff62 	bl	80073e0 <__sfmoreglue>
 800751c:	4604      	mov	r4, r0
 800751e:	6030      	str	r0, [r6, #0]
 8007520:	2800      	cmp	r0, #0
 8007522:	d1d5      	bne.n	80074d0 <__sfp+0x24>
 8007524:	f7ff ff78 	bl	8007418 <__sfp_lock_release>
 8007528:	230c      	movs	r3, #12
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	e7ee      	b.n	800750c <__sfp+0x60>
 800752e:	bf00      	nop
 8007530:	08008150 	.word	0x08008150
 8007534:	ffff0001 	.word	0xffff0001

08007538 <fiprintf>:
 8007538:	b40e      	push	{r1, r2, r3}
 800753a:	b503      	push	{r0, r1, lr}
 800753c:	4601      	mov	r1, r0
 800753e:	ab03      	add	r3, sp, #12
 8007540:	4805      	ldr	r0, [pc, #20]	; (8007558 <fiprintf+0x20>)
 8007542:	f853 2b04 	ldr.w	r2, [r3], #4
 8007546:	6800      	ldr	r0, [r0, #0]
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	f000 f9a1 	bl	8007890 <_vfiprintf_r>
 800754e:	b002      	add	sp, #8
 8007550:	f85d eb04 	ldr.w	lr, [sp], #4
 8007554:	b003      	add	sp, #12
 8007556:	4770      	bx	lr
 8007558:	20000028 	.word	0x20000028

0800755c <_fwalk_reent>:
 800755c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007560:	4606      	mov	r6, r0
 8007562:	4688      	mov	r8, r1
 8007564:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007568:	2700      	movs	r7, #0
 800756a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800756e:	f1b9 0901 	subs.w	r9, r9, #1
 8007572:	d505      	bpl.n	8007580 <_fwalk_reent+0x24>
 8007574:	6824      	ldr	r4, [r4, #0]
 8007576:	2c00      	cmp	r4, #0
 8007578:	d1f7      	bne.n	800756a <_fwalk_reent+0xe>
 800757a:	4638      	mov	r0, r7
 800757c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007580:	89ab      	ldrh	r3, [r5, #12]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d907      	bls.n	8007596 <_fwalk_reent+0x3a>
 8007586:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800758a:	3301      	adds	r3, #1
 800758c:	d003      	beq.n	8007596 <_fwalk_reent+0x3a>
 800758e:	4629      	mov	r1, r5
 8007590:	4630      	mov	r0, r6
 8007592:	47c0      	blx	r8
 8007594:	4307      	orrs	r7, r0
 8007596:	3568      	adds	r5, #104	; 0x68
 8007598:	e7e9      	b.n	800756e <_fwalk_reent+0x12>

0800759a <__retarget_lock_init_recursive>:
 800759a:	4770      	bx	lr

0800759c <__retarget_lock_acquire_recursive>:
 800759c:	4770      	bx	lr

0800759e <__retarget_lock_release_recursive>:
 800759e:	4770      	bx	lr

080075a0 <__swhatbuf_r>:
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	460e      	mov	r6, r1
 80075a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a8:	2900      	cmp	r1, #0
 80075aa:	b096      	sub	sp, #88	; 0x58
 80075ac:	4614      	mov	r4, r2
 80075ae:	461d      	mov	r5, r3
 80075b0:	da08      	bge.n	80075c4 <__swhatbuf_r+0x24>
 80075b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	602a      	str	r2, [r5, #0]
 80075ba:	061a      	lsls	r2, r3, #24
 80075bc:	d410      	bmi.n	80075e0 <__swhatbuf_r+0x40>
 80075be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075c2:	e00e      	b.n	80075e2 <__swhatbuf_r+0x42>
 80075c4:	466a      	mov	r2, sp
 80075c6:	f000 fca5 	bl	8007f14 <_fstat_r>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	dbf1      	blt.n	80075b2 <__swhatbuf_r+0x12>
 80075ce:	9a01      	ldr	r2, [sp, #4]
 80075d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075d8:	425a      	negs	r2, r3
 80075da:	415a      	adcs	r2, r3
 80075dc:	602a      	str	r2, [r5, #0]
 80075de:	e7ee      	b.n	80075be <__swhatbuf_r+0x1e>
 80075e0:	2340      	movs	r3, #64	; 0x40
 80075e2:	2000      	movs	r0, #0
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	b016      	add	sp, #88	; 0x58
 80075e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080075ec <__smakebuf_r>:
 80075ec:	898b      	ldrh	r3, [r1, #12]
 80075ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075f0:	079d      	lsls	r5, r3, #30
 80075f2:	4606      	mov	r6, r0
 80075f4:	460c      	mov	r4, r1
 80075f6:	d507      	bpl.n	8007608 <__smakebuf_r+0x1c>
 80075f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	6123      	str	r3, [r4, #16]
 8007600:	2301      	movs	r3, #1
 8007602:	6163      	str	r3, [r4, #20]
 8007604:	b002      	add	sp, #8
 8007606:	bd70      	pop	{r4, r5, r6, pc}
 8007608:	ab01      	add	r3, sp, #4
 800760a:	466a      	mov	r2, sp
 800760c:	f7ff ffc8 	bl	80075a0 <__swhatbuf_r>
 8007610:	9900      	ldr	r1, [sp, #0]
 8007612:	4605      	mov	r5, r0
 8007614:	4630      	mov	r0, r6
 8007616:	f000 f89d 	bl	8007754 <_malloc_r>
 800761a:	b948      	cbnz	r0, 8007630 <__smakebuf_r+0x44>
 800761c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007620:	059a      	lsls	r2, r3, #22
 8007622:	d4ef      	bmi.n	8007604 <__smakebuf_r+0x18>
 8007624:	f023 0303 	bic.w	r3, r3, #3
 8007628:	f043 0302 	orr.w	r3, r3, #2
 800762c:	81a3      	strh	r3, [r4, #12]
 800762e:	e7e3      	b.n	80075f8 <__smakebuf_r+0xc>
 8007630:	4b0d      	ldr	r3, [pc, #52]	; (8007668 <__smakebuf_r+0x7c>)
 8007632:	62b3      	str	r3, [r6, #40]	; 0x28
 8007634:	89a3      	ldrh	r3, [r4, #12]
 8007636:	6020      	str	r0, [r4, #0]
 8007638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800763c:	81a3      	strh	r3, [r4, #12]
 800763e:	9b00      	ldr	r3, [sp, #0]
 8007640:	6163      	str	r3, [r4, #20]
 8007642:	9b01      	ldr	r3, [sp, #4]
 8007644:	6120      	str	r0, [r4, #16]
 8007646:	b15b      	cbz	r3, 8007660 <__smakebuf_r+0x74>
 8007648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800764c:	4630      	mov	r0, r6
 800764e:	f000 fc73 	bl	8007f38 <_isatty_r>
 8007652:	b128      	cbz	r0, 8007660 <__smakebuf_r+0x74>
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	f023 0303 	bic.w	r3, r3, #3
 800765a:	f043 0301 	orr.w	r3, r3, #1
 800765e:	81a3      	strh	r3, [r4, #12]
 8007660:	89a0      	ldrh	r0, [r4, #12]
 8007662:	4305      	orrs	r5, r0
 8007664:	81a5      	strh	r5, [r4, #12]
 8007666:	e7cd      	b.n	8007604 <__smakebuf_r+0x18>
 8007668:	080073d5 	.word	0x080073d5

0800766c <malloc>:
 800766c:	4b02      	ldr	r3, [pc, #8]	; (8007678 <malloc+0xc>)
 800766e:	4601      	mov	r1, r0
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	f000 b86f 	b.w	8007754 <_malloc_r>
 8007676:	bf00      	nop
 8007678:	20000028 	.word	0x20000028

0800767c <_free_r>:
 800767c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800767e:	2900      	cmp	r1, #0
 8007680:	d044      	beq.n	800770c <_free_r+0x90>
 8007682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007686:	9001      	str	r0, [sp, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	f1a1 0404 	sub.w	r4, r1, #4
 800768e:	bfb8      	it	lt
 8007690:	18e4      	addlt	r4, r4, r3
 8007692:	f000 fc73 	bl	8007f7c <__malloc_lock>
 8007696:	4a1e      	ldr	r2, [pc, #120]	; (8007710 <_free_r+0x94>)
 8007698:	9801      	ldr	r0, [sp, #4]
 800769a:	6813      	ldr	r3, [r2, #0]
 800769c:	b933      	cbnz	r3, 80076ac <_free_r+0x30>
 800769e:	6063      	str	r3, [r4, #4]
 80076a0:	6014      	str	r4, [r2, #0]
 80076a2:	b003      	add	sp, #12
 80076a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076a8:	f000 bc6e 	b.w	8007f88 <__malloc_unlock>
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	d908      	bls.n	80076c2 <_free_r+0x46>
 80076b0:	6825      	ldr	r5, [r4, #0]
 80076b2:	1961      	adds	r1, r4, r5
 80076b4:	428b      	cmp	r3, r1
 80076b6:	bf01      	itttt	eq
 80076b8:	6819      	ldreq	r1, [r3, #0]
 80076ba:	685b      	ldreq	r3, [r3, #4]
 80076bc:	1949      	addeq	r1, r1, r5
 80076be:	6021      	streq	r1, [r4, #0]
 80076c0:	e7ed      	b.n	800769e <_free_r+0x22>
 80076c2:	461a      	mov	r2, r3
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	b10b      	cbz	r3, 80076cc <_free_r+0x50>
 80076c8:	42a3      	cmp	r3, r4
 80076ca:	d9fa      	bls.n	80076c2 <_free_r+0x46>
 80076cc:	6811      	ldr	r1, [r2, #0]
 80076ce:	1855      	adds	r5, r2, r1
 80076d0:	42a5      	cmp	r5, r4
 80076d2:	d10b      	bne.n	80076ec <_free_r+0x70>
 80076d4:	6824      	ldr	r4, [r4, #0]
 80076d6:	4421      	add	r1, r4
 80076d8:	1854      	adds	r4, r2, r1
 80076da:	42a3      	cmp	r3, r4
 80076dc:	6011      	str	r1, [r2, #0]
 80076de:	d1e0      	bne.n	80076a2 <_free_r+0x26>
 80076e0:	681c      	ldr	r4, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	6053      	str	r3, [r2, #4]
 80076e6:	4421      	add	r1, r4
 80076e8:	6011      	str	r1, [r2, #0]
 80076ea:	e7da      	b.n	80076a2 <_free_r+0x26>
 80076ec:	d902      	bls.n	80076f4 <_free_r+0x78>
 80076ee:	230c      	movs	r3, #12
 80076f0:	6003      	str	r3, [r0, #0]
 80076f2:	e7d6      	b.n	80076a2 <_free_r+0x26>
 80076f4:	6825      	ldr	r5, [r4, #0]
 80076f6:	1961      	adds	r1, r4, r5
 80076f8:	428b      	cmp	r3, r1
 80076fa:	bf04      	itt	eq
 80076fc:	6819      	ldreq	r1, [r3, #0]
 80076fe:	685b      	ldreq	r3, [r3, #4]
 8007700:	6063      	str	r3, [r4, #4]
 8007702:	bf04      	itt	eq
 8007704:	1949      	addeq	r1, r1, r5
 8007706:	6021      	streq	r1, [r4, #0]
 8007708:	6054      	str	r4, [r2, #4]
 800770a:	e7ca      	b.n	80076a2 <_free_r+0x26>
 800770c:	b003      	add	sp, #12
 800770e:	bd30      	pop	{r4, r5, pc}
 8007710:	20001648 	.word	0x20001648

08007714 <sbrk_aligned>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	4e0e      	ldr	r6, [pc, #56]	; (8007750 <sbrk_aligned+0x3c>)
 8007718:	460c      	mov	r4, r1
 800771a:	6831      	ldr	r1, [r6, #0]
 800771c:	4605      	mov	r5, r0
 800771e:	b911      	cbnz	r1, 8007726 <sbrk_aligned+0x12>
 8007720:	f000 fb7a 	bl	8007e18 <_sbrk_r>
 8007724:	6030      	str	r0, [r6, #0]
 8007726:	4621      	mov	r1, r4
 8007728:	4628      	mov	r0, r5
 800772a:	f000 fb75 	bl	8007e18 <_sbrk_r>
 800772e:	1c43      	adds	r3, r0, #1
 8007730:	d00a      	beq.n	8007748 <sbrk_aligned+0x34>
 8007732:	1cc4      	adds	r4, r0, #3
 8007734:	f024 0403 	bic.w	r4, r4, #3
 8007738:	42a0      	cmp	r0, r4
 800773a:	d007      	beq.n	800774c <sbrk_aligned+0x38>
 800773c:	1a21      	subs	r1, r4, r0
 800773e:	4628      	mov	r0, r5
 8007740:	f000 fb6a 	bl	8007e18 <_sbrk_r>
 8007744:	3001      	adds	r0, #1
 8007746:	d101      	bne.n	800774c <sbrk_aligned+0x38>
 8007748:	f04f 34ff 	mov.w	r4, #4294967295
 800774c:	4620      	mov	r0, r4
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	2000164c 	.word	0x2000164c

08007754 <_malloc_r>:
 8007754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007758:	1ccd      	adds	r5, r1, #3
 800775a:	f025 0503 	bic.w	r5, r5, #3
 800775e:	3508      	adds	r5, #8
 8007760:	2d0c      	cmp	r5, #12
 8007762:	bf38      	it	cc
 8007764:	250c      	movcc	r5, #12
 8007766:	2d00      	cmp	r5, #0
 8007768:	4607      	mov	r7, r0
 800776a:	db01      	blt.n	8007770 <_malloc_r+0x1c>
 800776c:	42a9      	cmp	r1, r5
 800776e:	d905      	bls.n	800777c <_malloc_r+0x28>
 8007770:	230c      	movs	r3, #12
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	2600      	movs	r6, #0
 8007776:	4630      	mov	r0, r6
 8007778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800777c:	4e2e      	ldr	r6, [pc, #184]	; (8007838 <_malloc_r+0xe4>)
 800777e:	f000 fbfd 	bl	8007f7c <__malloc_lock>
 8007782:	6833      	ldr	r3, [r6, #0]
 8007784:	461c      	mov	r4, r3
 8007786:	bb34      	cbnz	r4, 80077d6 <_malloc_r+0x82>
 8007788:	4629      	mov	r1, r5
 800778a:	4638      	mov	r0, r7
 800778c:	f7ff ffc2 	bl	8007714 <sbrk_aligned>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	4604      	mov	r4, r0
 8007794:	d14d      	bne.n	8007832 <_malloc_r+0xde>
 8007796:	6834      	ldr	r4, [r6, #0]
 8007798:	4626      	mov	r6, r4
 800779a:	2e00      	cmp	r6, #0
 800779c:	d140      	bne.n	8007820 <_malloc_r+0xcc>
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	4631      	mov	r1, r6
 80077a2:	4638      	mov	r0, r7
 80077a4:	eb04 0803 	add.w	r8, r4, r3
 80077a8:	f000 fb36 	bl	8007e18 <_sbrk_r>
 80077ac:	4580      	cmp	r8, r0
 80077ae:	d13a      	bne.n	8007826 <_malloc_r+0xd2>
 80077b0:	6821      	ldr	r1, [r4, #0]
 80077b2:	3503      	adds	r5, #3
 80077b4:	1a6d      	subs	r5, r5, r1
 80077b6:	f025 0503 	bic.w	r5, r5, #3
 80077ba:	3508      	adds	r5, #8
 80077bc:	2d0c      	cmp	r5, #12
 80077be:	bf38      	it	cc
 80077c0:	250c      	movcc	r5, #12
 80077c2:	4629      	mov	r1, r5
 80077c4:	4638      	mov	r0, r7
 80077c6:	f7ff ffa5 	bl	8007714 <sbrk_aligned>
 80077ca:	3001      	adds	r0, #1
 80077cc:	d02b      	beq.n	8007826 <_malloc_r+0xd2>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	442b      	add	r3, r5
 80077d2:	6023      	str	r3, [r4, #0]
 80077d4:	e00e      	b.n	80077f4 <_malloc_r+0xa0>
 80077d6:	6822      	ldr	r2, [r4, #0]
 80077d8:	1b52      	subs	r2, r2, r5
 80077da:	d41e      	bmi.n	800781a <_malloc_r+0xc6>
 80077dc:	2a0b      	cmp	r2, #11
 80077de:	d916      	bls.n	800780e <_malloc_r+0xba>
 80077e0:	1961      	adds	r1, r4, r5
 80077e2:	42a3      	cmp	r3, r4
 80077e4:	6025      	str	r5, [r4, #0]
 80077e6:	bf18      	it	ne
 80077e8:	6059      	strne	r1, [r3, #4]
 80077ea:	6863      	ldr	r3, [r4, #4]
 80077ec:	bf08      	it	eq
 80077ee:	6031      	streq	r1, [r6, #0]
 80077f0:	5162      	str	r2, [r4, r5]
 80077f2:	604b      	str	r3, [r1, #4]
 80077f4:	4638      	mov	r0, r7
 80077f6:	f104 060b 	add.w	r6, r4, #11
 80077fa:	f000 fbc5 	bl	8007f88 <__malloc_unlock>
 80077fe:	f026 0607 	bic.w	r6, r6, #7
 8007802:	1d23      	adds	r3, r4, #4
 8007804:	1af2      	subs	r2, r6, r3
 8007806:	d0b6      	beq.n	8007776 <_malloc_r+0x22>
 8007808:	1b9b      	subs	r3, r3, r6
 800780a:	50a3      	str	r3, [r4, r2]
 800780c:	e7b3      	b.n	8007776 <_malloc_r+0x22>
 800780e:	6862      	ldr	r2, [r4, #4]
 8007810:	42a3      	cmp	r3, r4
 8007812:	bf0c      	ite	eq
 8007814:	6032      	streq	r2, [r6, #0]
 8007816:	605a      	strne	r2, [r3, #4]
 8007818:	e7ec      	b.n	80077f4 <_malloc_r+0xa0>
 800781a:	4623      	mov	r3, r4
 800781c:	6864      	ldr	r4, [r4, #4]
 800781e:	e7b2      	b.n	8007786 <_malloc_r+0x32>
 8007820:	4634      	mov	r4, r6
 8007822:	6876      	ldr	r6, [r6, #4]
 8007824:	e7b9      	b.n	800779a <_malloc_r+0x46>
 8007826:	230c      	movs	r3, #12
 8007828:	603b      	str	r3, [r7, #0]
 800782a:	4638      	mov	r0, r7
 800782c:	f000 fbac 	bl	8007f88 <__malloc_unlock>
 8007830:	e7a1      	b.n	8007776 <_malloc_r+0x22>
 8007832:	6025      	str	r5, [r4, #0]
 8007834:	e7de      	b.n	80077f4 <_malloc_r+0xa0>
 8007836:	bf00      	nop
 8007838:	20001648 	.word	0x20001648

0800783c <__sfputc_r>:
 800783c:	6893      	ldr	r3, [r2, #8]
 800783e:	3b01      	subs	r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	b410      	push	{r4}
 8007844:	6093      	str	r3, [r2, #8]
 8007846:	da08      	bge.n	800785a <__sfputc_r+0x1e>
 8007848:	6994      	ldr	r4, [r2, #24]
 800784a:	42a3      	cmp	r3, r4
 800784c:	db01      	blt.n	8007852 <__sfputc_r+0x16>
 800784e:	290a      	cmp	r1, #10
 8007850:	d103      	bne.n	800785a <__sfputc_r+0x1e>
 8007852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007856:	f7ff bbf9 	b.w	800704c <__swbuf_r>
 800785a:	6813      	ldr	r3, [r2, #0]
 800785c:	1c58      	adds	r0, r3, #1
 800785e:	6010      	str	r0, [r2, #0]
 8007860:	7019      	strb	r1, [r3, #0]
 8007862:	4608      	mov	r0, r1
 8007864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007868:	4770      	bx	lr

0800786a <__sfputs_r>:
 800786a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786c:	4606      	mov	r6, r0
 800786e:	460f      	mov	r7, r1
 8007870:	4614      	mov	r4, r2
 8007872:	18d5      	adds	r5, r2, r3
 8007874:	42ac      	cmp	r4, r5
 8007876:	d101      	bne.n	800787c <__sfputs_r+0x12>
 8007878:	2000      	movs	r0, #0
 800787a:	e007      	b.n	800788c <__sfputs_r+0x22>
 800787c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007880:	463a      	mov	r2, r7
 8007882:	4630      	mov	r0, r6
 8007884:	f7ff ffda 	bl	800783c <__sfputc_r>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d1f3      	bne.n	8007874 <__sfputs_r+0xa>
 800788c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007890 <_vfiprintf_r>:
 8007890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007894:	460d      	mov	r5, r1
 8007896:	b09d      	sub	sp, #116	; 0x74
 8007898:	4614      	mov	r4, r2
 800789a:	4698      	mov	r8, r3
 800789c:	4606      	mov	r6, r0
 800789e:	b118      	cbz	r0, 80078a8 <_vfiprintf_r+0x18>
 80078a0:	6983      	ldr	r3, [r0, #24]
 80078a2:	b90b      	cbnz	r3, 80078a8 <_vfiprintf_r+0x18>
 80078a4:	f7ff fdca 	bl	800743c <__sinit>
 80078a8:	4b89      	ldr	r3, [pc, #548]	; (8007ad0 <_vfiprintf_r+0x240>)
 80078aa:	429d      	cmp	r5, r3
 80078ac:	d11b      	bne.n	80078e6 <_vfiprintf_r+0x56>
 80078ae:	6875      	ldr	r5, [r6, #4]
 80078b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078b2:	07d9      	lsls	r1, r3, #31
 80078b4:	d405      	bmi.n	80078c2 <_vfiprintf_r+0x32>
 80078b6:	89ab      	ldrh	r3, [r5, #12]
 80078b8:	059a      	lsls	r2, r3, #22
 80078ba:	d402      	bmi.n	80078c2 <_vfiprintf_r+0x32>
 80078bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078be:	f7ff fe6d 	bl	800759c <__retarget_lock_acquire_recursive>
 80078c2:	89ab      	ldrh	r3, [r5, #12]
 80078c4:	071b      	lsls	r3, r3, #28
 80078c6:	d501      	bpl.n	80078cc <_vfiprintf_r+0x3c>
 80078c8:	692b      	ldr	r3, [r5, #16]
 80078ca:	b9eb      	cbnz	r3, 8007908 <_vfiprintf_r+0x78>
 80078cc:	4629      	mov	r1, r5
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7ff fc0e 	bl	80070f0 <__swsetup_r>
 80078d4:	b1c0      	cbz	r0, 8007908 <_vfiprintf_r+0x78>
 80078d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078d8:	07dc      	lsls	r4, r3, #31
 80078da:	d50e      	bpl.n	80078fa <_vfiprintf_r+0x6a>
 80078dc:	f04f 30ff 	mov.w	r0, #4294967295
 80078e0:	b01d      	add	sp, #116	; 0x74
 80078e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e6:	4b7b      	ldr	r3, [pc, #492]	; (8007ad4 <_vfiprintf_r+0x244>)
 80078e8:	429d      	cmp	r5, r3
 80078ea:	d101      	bne.n	80078f0 <_vfiprintf_r+0x60>
 80078ec:	68b5      	ldr	r5, [r6, #8]
 80078ee:	e7df      	b.n	80078b0 <_vfiprintf_r+0x20>
 80078f0:	4b79      	ldr	r3, [pc, #484]	; (8007ad8 <_vfiprintf_r+0x248>)
 80078f2:	429d      	cmp	r5, r3
 80078f4:	bf08      	it	eq
 80078f6:	68f5      	ldreq	r5, [r6, #12]
 80078f8:	e7da      	b.n	80078b0 <_vfiprintf_r+0x20>
 80078fa:	89ab      	ldrh	r3, [r5, #12]
 80078fc:	0598      	lsls	r0, r3, #22
 80078fe:	d4ed      	bmi.n	80078dc <_vfiprintf_r+0x4c>
 8007900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007902:	f7ff fe4c 	bl	800759e <__retarget_lock_release_recursive>
 8007906:	e7e9      	b.n	80078dc <_vfiprintf_r+0x4c>
 8007908:	2300      	movs	r3, #0
 800790a:	9309      	str	r3, [sp, #36]	; 0x24
 800790c:	2320      	movs	r3, #32
 800790e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007912:	f8cd 800c 	str.w	r8, [sp, #12]
 8007916:	2330      	movs	r3, #48	; 0x30
 8007918:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007adc <_vfiprintf_r+0x24c>
 800791c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007920:	f04f 0901 	mov.w	r9, #1
 8007924:	4623      	mov	r3, r4
 8007926:	469a      	mov	sl, r3
 8007928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800792c:	b10a      	cbz	r2, 8007932 <_vfiprintf_r+0xa2>
 800792e:	2a25      	cmp	r2, #37	; 0x25
 8007930:	d1f9      	bne.n	8007926 <_vfiprintf_r+0x96>
 8007932:	ebba 0b04 	subs.w	fp, sl, r4
 8007936:	d00b      	beq.n	8007950 <_vfiprintf_r+0xc0>
 8007938:	465b      	mov	r3, fp
 800793a:	4622      	mov	r2, r4
 800793c:	4629      	mov	r1, r5
 800793e:	4630      	mov	r0, r6
 8007940:	f7ff ff93 	bl	800786a <__sfputs_r>
 8007944:	3001      	adds	r0, #1
 8007946:	f000 80aa 	beq.w	8007a9e <_vfiprintf_r+0x20e>
 800794a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800794c:	445a      	add	r2, fp
 800794e:	9209      	str	r2, [sp, #36]	; 0x24
 8007950:	f89a 3000 	ldrb.w	r3, [sl]
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 80a2 	beq.w	8007a9e <_vfiprintf_r+0x20e>
 800795a:	2300      	movs	r3, #0
 800795c:	f04f 32ff 	mov.w	r2, #4294967295
 8007960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007964:	f10a 0a01 	add.w	sl, sl, #1
 8007968:	9304      	str	r3, [sp, #16]
 800796a:	9307      	str	r3, [sp, #28]
 800796c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007970:	931a      	str	r3, [sp, #104]	; 0x68
 8007972:	4654      	mov	r4, sl
 8007974:	2205      	movs	r2, #5
 8007976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800797a:	4858      	ldr	r0, [pc, #352]	; (8007adc <_vfiprintf_r+0x24c>)
 800797c:	f7f8 fc28 	bl	80001d0 <memchr>
 8007980:	9a04      	ldr	r2, [sp, #16]
 8007982:	b9d8      	cbnz	r0, 80079bc <_vfiprintf_r+0x12c>
 8007984:	06d1      	lsls	r1, r2, #27
 8007986:	bf44      	itt	mi
 8007988:	2320      	movmi	r3, #32
 800798a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800798e:	0713      	lsls	r3, r2, #28
 8007990:	bf44      	itt	mi
 8007992:	232b      	movmi	r3, #43	; 0x2b
 8007994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007998:	f89a 3000 	ldrb.w	r3, [sl]
 800799c:	2b2a      	cmp	r3, #42	; 0x2a
 800799e:	d015      	beq.n	80079cc <_vfiprintf_r+0x13c>
 80079a0:	9a07      	ldr	r2, [sp, #28]
 80079a2:	4654      	mov	r4, sl
 80079a4:	2000      	movs	r0, #0
 80079a6:	f04f 0c0a 	mov.w	ip, #10
 80079aa:	4621      	mov	r1, r4
 80079ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079b0:	3b30      	subs	r3, #48	; 0x30
 80079b2:	2b09      	cmp	r3, #9
 80079b4:	d94e      	bls.n	8007a54 <_vfiprintf_r+0x1c4>
 80079b6:	b1b0      	cbz	r0, 80079e6 <_vfiprintf_r+0x156>
 80079b8:	9207      	str	r2, [sp, #28]
 80079ba:	e014      	b.n	80079e6 <_vfiprintf_r+0x156>
 80079bc:	eba0 0308 	sub.w	r3, r0, r8
 80079c0:	fa09 f303 	lsl.w	r3, r9, r3
 80079c4:	4313      	orrs	r3, r2
 80079c6:	9304      	str	r3, [sp, #16]
 80079c8:	46a2      	mov	sl, r4
 80079ca:	e7d2      	b.n	8007972 <_vfiprintf_r+0xe2>
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	1d19      	adds	r1, r3, #4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	9103      	str	r1, [sp, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	bfbb      	ittet	lt
 80079d8:	425b      	neglt	r3, r3
 80079da:	f042 0202 	orrlt.w	r2, r2, #2
 80079de:	9307      	strge	r3, [sp, #28]
 80079e0:	9307      	strlt	r3, [sp, #28]
 80079e2:	bfb8      	it	lt
 80079e4:	9204      	strlt	r2, [sp, #16]
 80079e6:	7823      	ldrb	r3, [r4, #0]
 80079e8:	2b2e      	cmp	r3, #46	; 0x2e
 80079ea:	d10c      	bne.n	8007a06 <_vfiprintf_r+0x176>
 80079ec:	7863      	ldrb	r3, [r4, #1]
 80079ee:	2b2a      	cmp	r3, #42	; 0x2a
 80079f0:	d135      	bne.n	8007a5e <_vfiprintf_r+0x1ce>
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	1d1a      	adds	r2, r3, #4
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	9203      	str	r2, [sp, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bfb8      	it	lt
 80079fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a02:	3402      	adds	r4, #2
 8007a04:	9305      	str	r3, [sp, #20]
 8007a06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007aec <_vfiprintf_r+0x25c>
 8007a0a:	7821      	ldrb	r1, [r4, #0]
 8007a0c:	2203      	movs	r2, #3
 8007a0e:	4650      	mov	r0, sl
 8007a10:	f7f8 fbde 	bl	80001d0 <memchr>
 8007a14:	b140      	cbz	r0, 8007a28 <_vfiprintf_r+0x198>
 8007a16:	2340      	movs	r3, #64	; 0x40
 8007a18:	eba0 000a 	sub.w	r0, r0, sl
 8007a1c:	fa03 f000 	lsl.w	r0, r3, r0
 8007a20:	9b04      	ldr	r3, [sp, #16]
 8007a22:	4303      	orrs	r3, r0
 8007a24:	3401      	adds	r4, #1
 8007a26:	9304      	str	r3, [sp, #16]
 8007a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a2c:	482c      	ldr	r0, [pc, #176]	; (8007ae0 <_vfiprintf_r+0x250>)
 8007a2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a32:	2206      	movs	r2, #6
 8007a34:	f7f8 fbcc 	bl	80001d0 <memchr>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d03f      	beq.n	8007abc <_vfiprintf_r+0x22c>
 8007a3c:	4b29      	ldr	r3, [pc, #164]	; (8007ae4 <_vfiprintf_r+0x254>)
 8007a3e:	bb1b      	cbnz	r3, 8007a88 <_vfiprintf_r+0x1f8>
 8007a40:	9b03      	ldr	r3, [sp, #12]
 8007a42:	3307      	adds	r3, #7
 8007a44:	f023 0307 	bic.w	r3, r3, #7
 8007a48:	3308      	adds	r3, #8
 8007a4a:	9303      	str	r3, [sp, #12]
 8007a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4e:	443b      	add	r3, r7
 8007a50:	9309      	str	r3, [sp, #36]	; 0x24
 8007a52:	e767      	b.n	8007924 <_vfiprintf_r+0x94>
 8007a54:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a58:	460c      	mov	r4, r1
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	e7a5      	b.n	80079aa <_vfiprintf_r+0x11a>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	3401      	adds	r4, #1
 8007a62:	9305      	str	r3, [sp, #20]
 8007a64:	4619      	mov	r1, r3
 8007a66:	f04f 0c0a 	mov.w	ip, #10
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a70:	3a30      	subs	r2, #48	; 0x30
 8007a72:	2a09      	cmp	r2, #9
 8007a74:	d903      	bls.n	8007a7e <_vfiprintf_r+0x1ee>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0c5      	beq.n	8007a06 <_vfiprintf_r+0x176>
 8007a7a:	9105      	str	r1, [sp, #20]
 8007a7c:	e7c3      	b.n	8007a06 <_vfiprintf_r+0x176>
 8007a7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a82:	4604      	mov	r4, r0
 8007a84:	2301      	movs	r3, #1
 8007a86:	e7f0      	b.n	8007a6a <_vfiprintf_r+0x1da>
 8007a88:	ab03      	add	r3, sp, #12
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	462a      	mov	r2, r5
 8007a8e:	4b16      	ldr	r3, [pc, #88]	; (8007ae8 <_vfiprintf_r+0x258>)
 8007a90:	a904      	add	r1, sp, #16
 8007a92:	4630      	mov	r0, r6
 8007a94:	f3af 8000 	nop.w
 8007a98:	4607      	mov	r7, r0
 8007a9a:	1c78      	adds	r0, r7, #1
 8007a9c:	d1d6      	bne.n	8007a4c <_vfiprintf_r+0x1bc>
 8007a9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aa0:	07d9      	lsls	r1, r3, #31
 8007aa2:	d405      	bmi.n	8007ab0 <_vfiprintf_r+0x220>
 8007aa4:	89ab      	ldrh	r3, [r5, #12]
 8007aa6:	059a      	lsls	r2, r3, #22
 8007aa8:	d402      	bmi.n	8007ab0 <_vfiprintf_r+0x220>
 8007aaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aac:	f7ff fd77 	bl	800759e <__retarget_lock_release_recursive>
 8007ab0:	89ab      	ldrh	r3, [r5, #12]
 8007ab2:	065b      	lsls	r3, r3, #25
 8007ab4:	f53f af12 	bmi.w	80078dc <_vfiprintf_r+0x4c>
 8007ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007aba:	e711      	b.n	80078e0 <_vfiprintf_r+0x50>
 8007abc:	ab03      	add	r3, sp, #12
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	462a      	mov	r2, r5
 8007ac2:	4b09      	ldr	r3, [pc, #36]	; (8007ae8 <_vfiprintf_r+0x258>)
 8007ac4:	a904      	add	r1, sp, #16
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	f000 f880 	bl	8007bcc <_printf_i>
 8007acc:	e7e4      	b.n	8007a98 <_vfiprintf_r+0x208>
 8007ace:	bf00      	nop
 8007ad0:	08008224 	.word	0x08008224
 8007ad4:	08008244 	.word	0x08008244
 8007ad8:	08008204 	.word	0x08008204
 8007adc:	08008264 	.word	0x08008264
 8007ae0:	0800826e 	.word	0x0800826e
 8007ae4:	00000000 	.word	0x00000000
 8007ae8:	0800786b 	.word	0x0800786b
 8007aec:	0800826a 	.word	0x0800826a

08007af0 <_printf_common>:
 8007af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af4:	4616      	mov	r6, r2
 8007af6:	4699      	mov	r9, r3
 8007af8:	688a      	ldr	r2, [r1, #8]
 8007afa:	690b      	ldr	r3, [r1, #16]
 8007afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b00:	4293      	cmp	r3, r2
 8007b02:	bfb8      	it	lt
 8007b04:	4613      	movlt	r3, r2
 8007b06:	6033      	str	r3, [r6, #0]
 8007b08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	460c      	mov	r4, r1
 8007b10:	b10a      	cbz	r2, 8007b16 <_printf_common+0x26>
 8007b12:	3301      	adds	r3, #1
 8007b14:	6033      	str	r3, [r6, #0]
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	0699      	lsls	r1, r3, #26
 8007b1a:	bf42      	ittt	mi
 8007b1c:	6833      	ldrmi	r3, [r6, #0]
 8007b1e:	3302      	addmi	r3, #2
 8007b20:	6033      	strmi	r3, [r6, #0]
 8007b22:	6825      	ldr	r5, [r4, #0]
 8007b24:	f015 0506 	ands.w	r5, r5, #6
 8007b28:	d106      	bne.n	8007b38 <_printf_common+0x48>
 8007b2a:	f104 0a19 	add.w	sl, r4, #25
 8007b2e:	68e3      	ldr	r3, [r4, #12]
 8007b30:	6832      	ldr	r2, [r6, #0]
 8007b32:	1a9b      	subs	r3, r3, r2
 8007b34:	42ab      	cmp	r3, r5
 8007b36:	dc26      	bgt.n	8007b86 <_printf_common+0x96>
 8007b38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b3c:	1e13      	subs	r3, r2, #0
 8007b3e:	6822      	ldr	r2, [r4, #0]
 8007b40:	bf18      	it	ne
 8007b42:	2301      	movne	r3, #1
 8007b44:	0692      	lsls	r2, r2, #26
 8007b46:	d42b      	bmi.n	8007ba0 <_printf_common+0xb0>
 8007b48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	4638      	mov	r0, r7
 8007b50:	47c0      	blx	r8
 8007b52:	3001      	adds	r0, #1
 8007b54:	d01e      	beq.n	8007b94 <_printf_common+0xa4>
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	68e5      	ldr	r5, [r4, #12]
 8007b5a:	6832      	ldr	r2, [r6, #0]
 8007b5c:	f003 0306 	and.w	r3, r3, #6
 8007b60:	2b04      	cmp	r3, #4
 8007b62:	bf08      	it	eq
 8007b64:	1aad      	subeq	r5, r5, r2
 8007b66:	68a3      	ldr	r3, [r4, #8]
 8007b68:	6922      	ldr	r2, [r4, #16]
 8007b6a:	bf0c      	ite	eq
 8007b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b70:	2500      	movne	r5, #0
 8007b72:	4293      	cmp	r3, r2
 8007b74:	bfc4      	itt	gt
 8007b76:	1a9b      	subgt	r3, r3, r2
 8007b78:	18ed      	addgt	r5, r5, r3
 8007b7a:	2600      	movs	r6, #0
 8007b7c:	341a      	adds	r4, #26
 8007b7e:	42b5      	cmp	r5, r6
 8007b80:	d11a      	bne.n	8007bb8 <_printf_common+0xc8>
 8007b82:	2000      	movs	r0, #0
 8007b84:	e008      	b.n	8007b98 <_printf_common+0xa8>
 8007b86:	2301      	movs	r3, #1
 8007b88:	4652      	mov	r2, sl
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	47c0      	blx	r8
 8007b90:	3001      	adds	r0, #1
 8007b92:	d103      	bne.n	8007b9c <_printf_common+0xac>
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295
 8007b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b9c:	3501      	adds	r5, #1
 8007b9e:	e7c6      	b.n	8007b2e <_printf_common+0x3e>
 8007ba0:	18e1      	adds	r1, r4, r3
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	2030      	movs	r0, #48	; 0x30
 8007ba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007baa:	4422      	add	r2, r4
 8007bac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bb4:	3302      	adds	r3, #2
 8007bb6:	e7c7      	b.n	8007b48 <_printf_common+0x58>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	4622      	mov	r2, r4
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	47c0      	blx	r8
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	d0e6      	beq.n	8007b94 <_printf_common+0xa4>
 8007bc6:	3601      	adds	r6, #1
 8007bc8:	e7d9      	b.n	8007b7e <_printf_common+0x8e>
	...

08007bcc <_printf_i>:
 8007bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd0:	7e0f      	ldrb	r7, [r1, #24]
 8007bd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bd4:	2f78      	cmp	r7, #120	; 0x78
 8007bd6:	4691      	mov	r9, r2
 8007bd8:	4680      	mov	r8, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	469a      	mov	sl, r3
 8007bde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007be2:	d807      	bhi.n	8007bf4 <_printf_i+0x28>
 8007be4:	2f62      	cmp	r7, #98	; 0x62
 8007be6:	d80a      	bhi.n	8007bfe <_printf_i+0x32>
 8007be8:	2f00      	cmp	r7, #0
 8007bea:	f000 80d8 	beq.w	8007d9e <_printf_i+0x1d2>
 8007bee:	2f58      	cmp	r7, #88	; 0x58
 8007bf0:	f000 80a3 	beq.w	8007d3a <_printf_i+0x16e>
 8007bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bfc:	e03a      	b.n	8007c74 <_printf_i+0xa8>
 8007bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c02:	2b15      	cmp	r3, #21
 8007c04:	d8f6      	bhi.n	8007bf4 <_printf_i+0x28>
 8007c06:	a101      	add	r1, pc, #4	; (adr r1, 8007c0c <_printf_i+0x40>)
 8007c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c0c:	08007c65 	.word	0x08007c65
 8007c10:	08007c79 	.word	0x08007c79
 8007c14:	08007bf5 	.word	0x08007bf5
 8007c18:	08007bf5 	.word	0x08007bf5
 8007c1c:	08007bf5 	.word	0x08007bf5
 8007c20:	08007bf5 	.word	0x08007bf5
 8007c24:	08007c79 	.word	0x08007c79
 8007c28:	08007bf5 	.word	0x08007bf5
 8007c2c:	08007bf5 	.word	0x08007bf5
 8007c30:	08007bf5 	.word	0x08007bf5
 8007c34:	08007bf5 	.word	0x08007bf5
 8007c38:	08007d85 	.word	0x08007d85
 8007c3c:	08007ca9 	.word	0x08007ca9
 8007c40:	08007d67 	.word	0x08007d67
 8007c44:	08007bf5 	.word	0x08007bf5
 8007c48:	08007bf5 	.word	0x08007bf5
 8007c4c:	08007da7 	.word	0x08007da7
 8007c50:	08007bf5 	.word	0x08007bf5
 8007c54:	08007ca9 	.word	0x08007ca9
 8007c58:	08007bf5 	.word	0x08007bf5
 8007c5c:	08007bf5 	.word	0x08007bf5
 8007c60:	08007d6f 	.word	0x08007d6f
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	1d1a      	adds	r2, r3, #4
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	602a      	str	r2, [r5, #0]
 8007c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c74:	2301      	movs	r3, #1
 8007c76:	e0a3      	b.n	8007dc0 <_printf_i+0x1f4>
 8007c78:	6820      	ldr	r0, [r4, #0]
 8007c7a:	6829      	ldr	r1, [r5, #0]
 8007c7c:	0606      	lsls	r6, r0, #24
 8007c7e:	f101 0304 	add.w	r3, r1, #4
 8007c82:	d50a      	bpl.n	8007c9a <_printf_i+0xce>
 8007c84:	680e      	ldr	r6, [r1, #0]
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	2e00      	cmp	r6, #0
 8007c8a:	da03      	bge.n	8007c94 <_printf_i+0xc8>
 8007c8c:	232d      	movs	r3, #45	; 0x2d
 8007c8e:	4276      	negs	r6, r6
 8007c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c94:	485e      	ldr	r0, [pc, #376]	; (8007e10 <_printf_i+0x244>)
 8007c96:	230a      	movs	r3, #10
 8007c98:	e019      	b.n	8007cce <_printf_i+0x102>
 8007c9a:	680e      	ldr	r6, [r1, #0]
 8007c9c:	602b      	str	r3, [r5, #0]
 8007c9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ca2:	bf18      	it	ne
 8007ca4:	b236      	sxthne	r6, r6
 8007ca6:	e7ef      	b.n	8007c88 <_printf_i+0xbc>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	6820      	ldr	r0, [r4, #0]
 8007cac:	1d19      	adds	r1, r3, #4
 8007cae:	6029      	str	r1, [r5, #0]
 8007cb0:	0601      	lsls	r1, r0, #24
 8007cb2:	d501      	bpl.n	8007cb8 <_printf_i+0xec>
 8007cb4:	681e      	ldr	r6, [r3, #0]
 8007cb6:	e002      	b.n	8007cbe <_printf_i+0xf2>
 8007cb8:	0646      	lsls	r6, r0, #25
 8007cba:	d5fb      	bpl.n	8007cb4 <_printf_i+0xe8>
 8007cbc:	881e      	ldrh	r6, [r3, #0]
 8007cbe:	4854      	ldr	r0, [pc, #336]	; (8007e10 <_printf_i+0x244>)
 8007cc0:	2f6f      	cmp	r7, #111	; 0x6f
 8007cc2:	bf0c      	ite	eq
 8007cc4:	2308      	moveq	r3, #8
 8007cc6:	230a      	movne	r3, #10
 8007cc8:	2100      	movs	r1, #0
 8007cca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cce:	6865      	ldr	r5, [r4, #4]
 8007cd0:	60a5      	str	r5, [r4, #8]
 8007cd2:	2d00      	cmp	r5, #0
 8007cd4:	bfa2      	ittt	ge
 8007cd6:	6821      	ldrge	r1, [r4, #0]
 8007cd8:	f021 0104 	bicge.w	r1, r1, #4
 8007cdc:	6021      	strge	r1, [r4, #0]
 8007cde:	b90e      	cbnz	r6, 8007ce4 <_printf_i+0x118>
 8007ce0:	2d00      	cmp	r5, #0
 8007ce2:	d04d      	beq.n	8007d80 <_printf_i+0x1b4>
 8007ce4:	4615      	mov	r5, r2
 8007ce6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cea:	fb03 6711 	mls	r7, r3, r1, r6
 8007cee:	5dc7      	ldrb	r7, [r0, r7]
 8007cf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cf4:	4637      	mov	r7, r6
 8007cf6:	42bb      	cmp	r3, r7
 8007cf8:	460e      	mov	r6, r1
 8007cfa:	d9f4      	bls.n	8007ce6 <_printf_i+0x11a>
 8007cfc:	2b08      	cmp	r3, #8
 8007cfe:	d10b      	bne.n	8007d18 <_printf_i+0x14c>
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	07de      	lsls	r6, r3, #31
 8007d04:	d508      	bpl.n	8007d18 <_printf_i+0x14c>
 8007d06:	6923      	ldr	r3, [r4, #16]
 8007d08:	6861      	ldr	r1, [r4, #4]
 8007d0a:	4299      	cmp	r1, r3
 8007d0c:	bfde      	ittt	le
 8007d0e:	2330      	movle	r3, #48	; 0x30
 8007d10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d18:	1b52      	subs	r2, r2, r5
 8007d1a:	6122      	str	r2, [r4, #16]
 8007d1c:	f8cd a000 	str.w	sl, [sp]
 8007d20:	464b      	mov	r3, r9
 8007d22:	aa03      	add	r2, sp, #12
 8007d24:	4621      	mov	r1, r4
 8007d26:	4640      	mov	r0, r8
 8007d28:	f7ff fee2 	bl	8007af0 <_printf_common>
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d14c      	bne.n	8007dca <_printf_i+0x1fe>
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	b004      	add	sp, #16
 8007d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d3a:	4835      	ldr	r0, [pc, #212]	; (8007e10 <_printf_i+0x244>)
 8007d3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d40:	6829      	ldr	r1, [r5, #0]
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d48:	6029      	str	r1, [r5, #0]
 8007d4a:	061d      	lsls	r5, r3, #24
 8007d4c:	d514      	bpl.n	8007d78 <_printf_i+0x1ac>
 8007d4e:	07df      	lsls	r7, r3, #31
 8007d50:	bf44      	itt	mi
 8007d52:	f043 0320 	orrmi.w	r3, r3, #32
 8007d56:	6023      	strmi	r3, [r4, #0]
 8007d58:	b91e      	cbnz	r6, 8007d62 <_printf_i+0x196>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	f023 0320 	bic.w	r3, r3, #32
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	2310      	movs	r3, #16
 8007d64:	e7b0      	b.n	8007cc8 <_printf_i+0xfc>
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	f043 0320 	orr.w	r3, r3, #32
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	2378      	movs	r3, #120	; 0x78
 8007d70:	4828      	ldr	r0, [pc, #160]	; (8007e14 <_printf_i+0x248>)
 8007d72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d76:	e7e3      	b.n	8007d40 <_printf_i+0x174>
 8007d78:	0659      	lsls	r1, r3, #25
 8007d7a:	bf48      	it	mi
 8007d7c:	b2b6      	uxthmi	r6, r6
 8007d7e:	e7e6      	b.n	8007d4e <_printf_i+0x182>
 8007d80:	4615      	mov	r5, r2
 8007d82:	e7bb      	b.n	8007cfc <_printf_i+0x130>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	6826      	ldr	r6, [r4, #0]
 8007d88:	6961      	ldr	r1, [r4, #20]
 8007d8a:	1d18      	adds	r0, r3, #4
 8007d8c:	6028      	str	r0, [r5, #0]
 8007d8e:	0635      	lsls	r5, r6, #24
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	d501      	bpl.n	8007d98 <_printf_i+0x1cc>
 8007d94:	6019      	str	r1, [r3, #0]
 8007d96:	e002      	b.n	8007d9e <_printf_i+0x1d2>
 8007d98:	0670      	lsls	r0, r6, #25
 8007d9a:	d5fb      	bpl.n	8007d94 <_printf_i+0x1c8>
 8007d9c:	8019      	strh	r1, [r3, #0]
 8007d9e:	2300      	movs	r3, #0
 8007da0:	6123      	str	r3, [r4, #16]
 8007da2:	4615      	mov	r5, r2
 8007da4:	e7ba      	b.n	8007d1c <_printf_i+0x150>
 8007da6:	682b      	ldr	r3, [r5, #0]
 8007da8:	1d1a      	adds	r2, r3, #4
 8007daa:	602a      	str	r2, [r5, #0]
 8007dac:	681d      	ldr	r5, [r3, #0]
 8007dae:	6862      	ldr	r2, [r4, #4]
 8007db0:	2100      	movs	r1, #0
 8007db2:	4628      	mov	r0, r5
 8007db4:	f7f8 fa0c 	bl	80001d0 <memchr>
 8007db8:	b108      	cbz	r0, 8007dbe <_printf_i+0x1f2>
 8007dba:	1b40      	subs	r0, r0, r5
 8007dbc:	6060      	str	r0, [r4, #4]
 8007dbe:	6863      	ldr	r3, [r4, #4]
 8007dc0:	6123      	str	r3, [r4, #16]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dc8:	e7a8      	b.n	8007d1c <_printf_i+0x150>
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	462a      	mov	r2, r5
 8007dce:	4649      	mov	r1, r9
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	47d0      	blx	sl
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	d0ab      	beq.n	8007d30 <_printf_i+0x164>
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	079b      	lsls	r3, r3, #30
 8007ddc:	d413      	bmi.n	8007e06 <_printf_i+0x23a>
 8007dde:	68e0      	ldr	r0, [r4, #12]
 8007de0:	9b03      	ldr	r3, [sp, #12]
 8007de2:	4298      	cmp	r0, r3
 8007de4:	bfb8      	it	lt
 8007de6:	4618      	movlt	r0, r3
 8007de8:	e7a4      	b.n	8007d34 <_printf_i+0x168>
 8007dea:	2301      	movs	r3, #1
 8007dec:	4632      	mov	r2, r6
 8007dee:	4649      	mov	r1, r9
 8007df0:	4640      	mov	r0, r8
 8007df2:	47d0      	blx	sl
 8007df4:	3001      	adds	r0, #1
 8007df6:	d09b      	beq.n	8007d30 <_printf_i+0x164>
 8007df8:	3501      	adds	r5, #1
 8007dfa:	68e3      	ldr	r3, [r4, #12]
 8007dfc:	9903      	ldr	r1, [sp, #12]
 8007dfe:	1a5b      	subs	r3, r3, r1
 8007e00:	42ab      	cmp	r3, r5
 8007e02:	dcf2      	bgt.n	8007dea <_printf_i+0x21e>
 8007e04:	e7eb      	b.n	8007dde <_printf_i+0x212>
 8007e06:	2500      	movs	r5, #0
 8007e08:	f104 0619 	add.w	r6, r4, #25
 8007e0c:	e7f5      	b.n	8007dfa <_printf_i+0x22e>
 8007e0e:	bf00      	nop
 8007e10:	08008275 	.word	0x08008275
 8007e14:	08008286 	.word	0x08008286

08007e18 <_sbrk_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4d06      	ldr	r5, [pc, #24]	; (8007e34 <_sbrk_r+0x1c>)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	4604      	mov	r4, r0
 8007e20:	4608      	mov	r0, r1
 8007e22:	602b      	str	r3, [r5, #0]
 8007e24:	f7fa fb6c 	bl	8002500 <_sbrk>
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d102      	bne.n	8007e32 <_sbrk_r+0x1a>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	b103      	cbz	r3, 8007e32 <_sbrk_r+0x1a>
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	20001650 	.word	0x20001650

08007e38 <__sread>:
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e40:	f000 f8a8 	bl	8007f94 <_read_r>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	bfab      	itete	ge
 8007e48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e4c:	181b      	addge	r3, r3, r0
 8007e4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e52:	bfac      	ite	ge
 8007e54:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e56:	81a3      	strhlt	r3, [r4, #12]
 8007e58:	bd10      	pop	{r4, pc}

08007e5a <__swrite>:
 8007e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5e:	461f      	mov	r7, r3
 8007e60:	898b      	ldrh	r3, [r1, #12]
 8007e62:	05db      	lsls	r3, r3, #23
 8007e64:	4605      	mov	r5, r0
 8007e66:	460c      	mov	r4, r1
 8007e68:	4616      	mov	r6, r2
 8007e6a:	d505      	bpl.n	8007e78 <__swrite+0x1e>
 8007e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e70:	2302      	movs	r3, #2
 8007e72:	2200      	movs	r2, #0
 8007e74:	f000 f870 	bl	8007f58 <_lseek_r>
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e82:	81a3      	strh	r3, [r4, #12]
 8007e84:	4632      	mov	r2, r6
 8007e86:	463b      	mov	r3, r7
 8007e88:	4628      	mov	r0, r5
 8007e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8e:	f000 b817 	b.w	8007ec0 <_write_r>

08007e92 <__sseek>:
 8007e92:	b510      	push	{r4, lr}
 8007e94:	460c      	mov	r4, r1
 8007e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e9a:	f000 f85d 	bl	8007f58 <_lseek_r>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	bf15      	itete	ne
 8007ea4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007eae:	81a3      	strheq	r3, [r4, #12]
 8007eb0:	bf18      	it	ne
 8007eb2:	81a3      	strhne	r3, [r4, #12]
 8007eb4:	bd10      	pop	{r4, pc}

08007eb6 <__sclose>:
 8007eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eba:	f000 b81b 	b.w	8007ef4 <_close_r>
	...

08007ec0 <_write_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d07      	ldr	r5, [pc, #28]	; (8007ee0 <_write_r+0x20>)
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	4608      	mov	r0, r1
 8007ec8:	4611      	mov	r1, r2
 8007eca:	2200      	movs	r2, #0
 8007ecc:	602a      	str	r2, [r5, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f7f8 fb28 	bl	8000524 <_write>
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	d102      	bne.n	8007ede <_write_r+0x1e>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	b103      	cbz	r3, 8007ede <_write_r+0x1e>
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	bd38      	pop	{r3, r4, r5, pc}
 8007ee0:	20001650 	.word	0x20001650

08007ee4 <abort>:
 8007ee4:	b508      	push	{r3, lr}
 8007ee6:	2006      	movs	r0, #6
 8007ee8:	f000 f88e 	bl	8008008 <raise>
 8007eec:	2001      	movs	r0, #1
 8007eee:	f7fa faac 	bl	800244a <_exit>
	...

08007ef4 <_close_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	4d06      	ldr	r5, [pc, #24]	; (8007f10 <_close_r+0x1c>)
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4604      	mov	r4, r0
 8007efc:	4608      	mov	r0, r1
 8007efe:	602b      	str	r3, [r5, #0]
 8007f00:	f7fa faca 	bl	8002498 <_close>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d102      	bne.n	8007f0e <_close_r+0x1a>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	b103      	cbz	r3, 8007f0e <_close_r+0x1a>
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	20001650 	.word	0x20001650

08007f14 <_fstat_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d07      	ldr	r5, [pc, #28]	; (8007f34 <_fstat_r+0x20>)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	f7fa fac5 	bl	80024b0 <_fstat>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	d102      	bne.n	8007f30 <_fstat_r+0x1c>
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	b103      	cbz	r3, 8007f30 <_fstat_r+0x1c>
 8007f2e:	6023      	str	r3, [r4, #0]
 8007f30:	bd38      	pop	{r3, r4, r5, pc}
 8007f32:	bf00      	nop
 8007f34:	20001650 	.word	0x20001650

08007f38 <_isatty_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4d06      	ldr	r5, [pc, #24]	; (8007f54 <_isatty_r+0x1c>)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	602b      	str	r3, [r5, #0]
 8007f44:	f7fa fac4 	bl	80024d0 <_isatty>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_isatty_r+0x1a>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_isatty_r+0x1a>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	20001650 	.word	0x20001650

08007f58 <_lseek_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4d07      	ldr	r5, [pc, #28]	; (8007f78 <_lseek_r+0x20>)
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	4608      	mov	r0, r1
 8007f60:	4611      	mov	r1, r2
 8007f62:	2200      	movs	r2, #0
 8007f64:	602a      	str	r2, [r5, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	f7fa fabd 	bl	80024e6 <_lseek>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_lseek_r+0x1e>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_lseek_r+0x1e>
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	20001650 	.word	0x20001650

08007f7c <__malloc_lock>:
 8007f7c:	4801      	ldr	r0, [pc, #4]	; (8007f84 <__malloc_lock+0x8>)
 8007f7e:	f7ff bb0d 	b.w	800759c <__retarget_lock_acquire_recursive>
 8007f82:	bf00      	nop
 8007f84:	20001644 	.word	0x20001644

08007f88 <__malloc_unlock>:
 8007f88:	4801      	ldr	r0, [pc, #4]	; (8007f90 <__malloc_unlock+0x8>)
 8007f8a:	f7ff bb08 	b.w	800759e <__retarget_lock_release_recursive>
 8007f8e:	bf00      	nop
 8007f90:	20001644 	.word	0x20001644

08007f94 <_read_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4d07      	ldr	r5, [pc, #28]	; (8007fb4 <_read_r+0x20>)
 8007f98:	4604      	mov	r4, r0
 8007f9a:	4608      	mov	r0, r1
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	602a      	str	r2, [r5, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	f7fa fa5b 	bl	800245e <_read>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d102      	bne.n	8007fb2 <_read_r+0x1e>
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	b103      	cbz	r3, 8007fb2 <_read_r+0x1e>
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	20001650 	.word	0x20001650

08007fb8 <_raise_r>:
 8007fb8:	291f      	cmp	r1, #31
 8007fba:	b538      	push	{r3, r4, r5, lr}
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	460d      	mov	r5, r1
 8007fc0:	d904      	bls.n	8007fcc <_raise_r+0x14>
 8007fc2:	2316      	movs	r3, #22
 8007fc4:	6003      	str	r3, [r0, #0]
 8007fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007fce:	b112      	cbz	r2, 8007fd6 <_raise_r+0x1e>
 8007fd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fd4:	b94b      	cbnz	r3, 8007fea <_raise_r+0x32>
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 f830 	bl	800803c <_getpid_r>
 8007fdc:	462a      	mov	r2, r5
 8007fde:	4601      	mov	r1, r0
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fe6:	f000 b817 	b.w	8008018 <_kill_r>
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d00a      	beq.n	8008004 <_raise_r+0x4c>
 8007fee:	1c59      	adds	r1, r3, #1
 8007ff0:	d103      	bne.n	8007ffa <_raise_r+0x42>
 8007ff2:	2316      	movs	r3, #22
 8007ff4:	6003      	str	r3, [r0, #0]
 8007ff6:	2001      	movs	r0, #1
 8007ff8:	e7e7      	b.n	8007fca <_raise_r+0x12>
 8007ffa:	2400      	movs	r4, #0
 8007ffc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008000:	4628      	mov	r0, r5
 8008002:	4798      	blx	r3
 8008004:	2000      	movs	r0, #0
 8008006:	e7e0      	b.n	8007fca <_raise_r+0x12>

08008008 <raise>:
 8008008:	4b02      	ldr	r3, [pc, #8]	; (8008014 <raise+0xc>)
 800800a:	4601      	mov	r1, r0
 800800c:	6818      	ldr	r0, [r3, #0]
 800800e:	f7ff bfd3 	b.w	8007fb8 <_raise_r>
 8008012:	bf00      	nop
 8008014:	20000028 	.word	0x20000028

08008018 <_kill_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4d07      	ldr	r5, [pc, #28]	; (8008038 <_kill_r+0x20>)
 800801c:	2300      	movs	r3, #0
 800801e:	4604      	mov	r4, r0
 8008020:	4608      	mov	r0, r1
 8008022:	4611      	mov	r1, r2
 8008024:	602b      	str	r3, [r5, #0]
 8008026:	f7fa fa00 	bl	800242a <_kill>
 800802a:	1c43      	adds	r3, r0, #1
 800802c:	d102      	bne.n	8008034 <_kill_r+0x1c>
 800802e:	682b      	ldr	r3, [r5, #0]
 8008030:	b103      	cbz	r3, 8008034 <_kill_r+0x1c>
 8008032:	6023      	str	r3, [r4, #0]
 8008034:	bd38      	pop	{r3, r4, r5, pc}
 8008036:	bf00      	nop
 8008038:	20001650 	.word	0x20001650

0800803c <_getpid_r>:
 800803c:	f7fa b9ed 	b.w	800241a <_getpid>

08008040 <_init>:
 8008040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008042:	bf00      	nop
 8008044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008046:	bc08      	pop	{r3}
 8008048:	469e      	mov	lr, r3
 800804a:	4770      	bx	lr

0800804c <_fini>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	bf00      	nop
 8008050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008052:	bc08      	pop	{r3}
 8008054:	469e      	mov	lr, r3
 8008056:	4770      	bx	lr
