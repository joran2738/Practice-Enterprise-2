
PE2_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e80  0800bdc8  0800bdc8  0001bdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc48  0800dc48  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800dc48  0800dc48  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dc48  0800dc48  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc48  0800dc48  0001dc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc4c  0800dc4c  0001dc4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800dc50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002938  200000cc  0800dd1c  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a04  0800dd1c  00022a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015443  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003603  00000000  00000000  0003553f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00038b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  00039c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197c7  00000000  00000000  0003abe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001934d  00000000  00000000  000543a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865d5  00000000  00000000  0006d6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3cc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005164  00000000  00000000  000f3d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bdb0 	.word	0x0800bdb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	0800bdb0 	.word	0x0800bdb0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <initBrickbreaker>:
uint8_t loopTester = 0;
uint8_t guardian = 0;
uint8_t guardianTimer = 100;
int toughnessColor[4] = {D_GREEN, GREY, DARK_GREY, BLACK};

void initBrickbreaker() {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
    person.x = SCREEN_WIDTH/2;
 8000286:	4b49      	ldr	r3, [pc, #292]	; (80003ac <initBrickbreaker+0x12c>)
 8000288:	2228      	movs	r2, #40	; 0x28
 800028a:	701a      	strb	r2, [r3, #0]
    person.y = SCREEN_HEIGHT - 5;
 800028c:	4b47      	ldr	r3, [pc, #284]	; (80003ac <initBrickbreaker+0x12c>)
 800028e:	2237      	movs	r2, #55	; 0x37
 8000290:	705a      	strb	r2, [r3, #1]
    ball.x = SCREEN_WIDTH/2;
 8000292:	4b47      	ldr	r3, [pc, #284]	; (80003b0 <initBrickbreaker+0x130>)
 8000294:	2228      	movs	r2, #40	; 0x28
 8000296:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000298:	4b45      	ldr	r3, [pc, #276]	; (80003b0 <initBrickbreaker+0x130>)
 800029a:	2236      	movs	r2, #54	; 0x36
 800029c:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 800029e:	4b44      	ldr	r3, [pc, #272]	; (80003b0 <initBrickbreaker+0x130>)
 80002a0:	2208      	movs	r2, #8
 80002a2:	721a      	strb	r2, [r3, #8]
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e041      	b.n	800032e <initBrickbreaker+0xae>
        for(int j = 0; j < 10; j++) {
 80002aa:	2300      	movs	r3, #0
 80002ac:	60bb      	str	r3, [r7, #8]
 80002ae:	e038      	b.n	8000322 <initBrickbreaker+0xa2>
            bricks[i][j].x = j * 8;
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	00d9      	lsls	r1, r3, #3
 80002b4:	483f      	ldr	r0, [pc, #252]	; (80003b4 <initBrickbreaker+0x134>)
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	4613      	mov	r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	4413      	add	r3, r2
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	68ba      	ldr	r2, [r7, #8]
 80002c2:	4413      	add	r3, r2
 80002c4:	011b      	lsls	r3, r3, #4
 80002c6:	4403      	add	r3, r0
 80002c8:	6019      	str	r1, [r3, #0]
            bricks[i][j].y = i + 8;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	f103 0108 	add.w	r1, r3, #8
 80002d0:	4838      	ldr	r0, [pc, #224]	; (80003b4 <initBrickbreaker+0x134>)
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	4613      	mov	r3, r2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4413      	add	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	4413      	add	r3, r2
 80002e0:	011b      	lsls	r3, r3, #4
 80002e2:	4403      	add	r3, r0
 80002e4:	3304      	adds	r3, #4
 80002e6:	6019      	str	r1, [r3, #0]
            bricks[i][j].visible = 0;
 80002e8:	4932      	ldr	r1, [pc, #200]	; (80003b4 <initBrickbreaker+0x134>)
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	4613      	mov	r3, r2
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	4413      	add	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	68ba      	ldr	r2, [r7, #8]
 80002f6:	4413      	add	r3, r2
 80002f8:	011b      	lsls	r3, r3, #4
 80002fa:	440b      	add	r3, r1
 80002fc:	3308      	adds	r3, #8
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = 1;
 8000302:	492c      	ldr	r1, [pc, #176]	; (80003b4 <initBrickbreaker+0x134>)
 8000304:	68fa      	ldr	r2, [r7, #12]
 8000306:	4613      	mov	r3, r2
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	4413      	add	r3, r2
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	4413      	add	r3, r2
 8000312:	011b      	lsls	r3, r3, #4
 8000314:	440b      	add	r3, r1
 8000316:	330c      	adds	r3, #12
 8000318:	2201      	movs	r2, #1
 800031a:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < 10; j++) {
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	3301      	adds	r3, #1
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	2b09      	cmp	r3, #9
 8000326:	ddc3      	ble.n	80002b0 <initBrickbreaker+0x30>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2b2f      	cmp	r3, #47	; 0x2f
 8000332:	ddba      	ble.n	80002aa <initBrickbreaker+0x2a>
        }
    }

    for (int i = 0; i < BRICK_LINES; i++) {
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	e027      	b.n	800038a <initBrickbreaker+0x10a>
        for(int j = 0; j < 10; j++) {
 800033a:	2300      	movs	r3, #0
 800033c:	603b      	str	r3, [r7, #0]
 800033e:	e01e      	b.n	800037e <initBrickbreaker+0xfe>
            bricks[i][j].visible = 1;
 8000340:	491c      	ldr	r1, [pc, #112]	; (80003b4 <initBrickbreaker+0x134>)
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	4613      	mov	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	4413      	add	r3, r2
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	683a      	ldr	r2, [r7, #0]
 800034e:	4413      	add	r3, r2
 8000350:	011b      	lsls	r3, r3, #4
 8000352:	440b      	add	r3, r1
 8000354:	3308      	adds	r3, #8
 8000356:	2201      	movs	r2, #1
 8000358:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = setBrickToughness();
 800035a:	f001 fe7f 	bl	800205c <setBrickToughness>
 800035e:	4601      	mov	r1, r0
 8000360:	4814      	ldr	r0, [pc, #80]	; (80003b4 <initBrickbreaker+0x134>)
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	4613      	mov	r3, r2
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	4413      	add	r3, r2
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	4413      	add	r3, r2
 8000370:	011b      	lsls	r3, r3, #4
 8000372:	4403      	add	r3, r0
 8000374:	330c      	adds	r3, #12
 8000376:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < 10; j++) {
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	3301      	adds	r3, #1
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b09      	cmp	r3, #9
 8000382:	dddd      	ble.n	8000340 <initBrickbreaker+0xc0>
    for (int i = 0; i < BRICK_LINES; i++) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b09      	cmp	r3, #9
 800038e:	ddd4      	ble.n	800033a <initBrickbreaker+0xba>
        }
    }
    points = 0;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <initBrickbreaker+0x138>)
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
    Displ_CLS(D_GREEN);
 8000396:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800039a:	f004 ff33 	bl	8005204 <Displ_CLS>
    drawBricks();
 800039e:	f001 fe93 	bl	80020c8 <drawBricks>
}
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000030 	.word	0x20000030
 80003b0:	20000034 	.word	0x20000034
 80003b4:	200000e8 	.word	0x200000e8
 80003b8:	20001ee8 	.word	0x20001ee8

080003bc <playBall>:

void playBall() {
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
    if (ball.y == 0) {
 80003c0:	4b3b      	ldr	r3, [pc, #236]	; (80004b0 <playBall+0xf4>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d102      	bne.n	80003ce <playBall+0x12>
        changeDirection(N);
 80003c8:	2000      	movs	r0, #0
 80003ca:	f000 f8eb 	bl	80005a4 <changeDirection>
    }
    if (ball.y == SCREEN_HEIGHT - 6) {
 80003ce:	4b38      	ldr	r3, [pc, #224]	; (80004b0 <playBall+0xf4>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	2b36      	cmp	r3, #54	; 0x36
 80003d4:	d149      	bne.n	800046a <playBall+0xae>
        if (ball.x >= person.x - (BAR_SIZE/2) && ball.x <= person.x + (BAR_SIZE/2)) {
 80003d6:	4b36      	ldr	r3, [pc, #216]	; (80004b0 <playBall+0xf4>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	4b36      	ldr	r3, [pc, #216]	; (80004b4 <playBall+0xf8>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	3b19      	subs	r3, #25
 80003e0:	429a      	cmp	r2, r3
 80003e2:	db0a      	blt.n	80003fa <playBall+0x3e>
 80003e4:	4b32      	ldr	r3, [pc, #200]	; (80004b0 <playBall+0xf4>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	4b32      	ldr	r3, [pc, #200]	; (80004b4 <playBall+0xf8>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	3319      	adds	r3, #25
 80003ee:	429a      	cmp	r2, r3
 80003f0:	dc03      	bgt.n	80003fa <playBall+0x3e>
            changeDirection(S);
 80003f2:	2004      	movs	r0, #4
 80003f4:	f000 f8d6 	bl	80005a4 <changeDirection>
 80003f8:	e037      	b.n	800046a <playBall+0xae>
        } else {
            if (ball.x == person.x - (BAR_SIZE/2) - 1) {
 80003fa:	4b2d      	ldr	r3, [pc, #180]	; (80004b0 <playBall+0xf4>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	4b2d      	ldr	r3, [pc, #180]	; (80004b4 <playBall+0xf8>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	3b1a      	subs	r3, #26
 8000404:	429a      	cmp	r2, r3
 8000406:	d110      	bne.n	800042a <playBall+0x6e>
                if (ball.dir == SE) {
 8000408:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <playBall+0xf4>)
 800040a:	7a1b      	ldrb	r3, [r3, #8]
 800040c:	2b03      	cmp	r3, #3
 800040e:	d103      	bne.n	8000418 <playBall+0x5c>
                    ball.dir = NW;
 8000410:	4b27      	ldr	r3, [pc, #156]	; (80004b0 <playBall+0xf4>)
 8000412:	2207      	movs	r2, #7
 8000414:	721a      	strb	r2, [r3, #8]
 8000416:	e028      	b.n	800046a <playBall+0xae>
                } else {
                    lives1--;
 8000418:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <playBall+0xfc>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	3b01      	subs	r3, #1
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <playBall+0xfc>)
 8000422:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 8000424:	f000 f960 	bl	80006e8 <gameEnd>
 8000428:	e01f      	b.n	800046a <playBall+0xae>
                }
            } else {
                if (ball.x == person.x + (BAR_SIZE/2) + 1) {
 800042a:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <playBall+0xf4>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <playBall+0xf8>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	331a      	adds	r3, #26
 8000434:	429a      	cmp	r2, r3
 8000436:	d110      	bne.n	800045a <playBall+0x9e>
                    if (ball.dir == SW) {
 8000438:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <playBall+0xf4>)
 800043a:	7a1b      	ldrb	r3, [r3, #8]
 800043c:	2b05      	cmp	r3, #5
 800043e:	d103      	bne.n	8000448 <playBall+0x8c>
                        ball.dir = NE;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <playBall+0xf4>)
 8000442:	2201      	movs	r2, #1
 8000444:	721a      	strb	r2, [r3, #8]
 8000446:	e010      	b.n	800046a <playBall+0xae>
                    } else {
                        lives1--;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <playBall+0xfc>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	3b01      	subs	r3, #1
 800044e:	b2da      	uxtb	r2, r3
 8000450:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <playBall+0xfc>)
 8000452:	701a      	strb	r2, [r3, #0]
                        gameEnd();
 8000454:	f000 f948 	bl	80006e8 <gameEnd>
 8000458:	e007      	b.n	800046a <playBall+0xae>
                    }
                } else {
                    lives1--;
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <playBall+0xfc>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	3b01      	subs	r3, #1
 8000460:	b2da      	uxtb	r2, r3
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <playBall+0xfc>)
 8000464:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 8000466:	f000 f93f 	bl	80006e8 <gameEnd>
                }
            }
        }
    }
    if (ball.x == 0) {
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <playBall+0xf4>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d102      	bne.n	8000478 <playBall+0xbc>
        changeDirection(W);
 8000472:	2006      	movs	r0, #6
 8000474:	f000 f896 	bl	80005a4 <changeDirection>
    }
    if (ball.x == SCREEN_WIDTH - 1) {
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <playBall+0xf4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b4f      	cmp	r3, #79	; 0x4f
 800047e:	d102      	bne.n	8000486 <playBall+0xca>
        changeDirection(E);
 8000480:	2002      	movs	r0, #2
 8000482:	f000 f88f 	bl	80005a4 <changeDirection>
    }

    if (guardian == 1) {
 8000486:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <playBall+0x100>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d109      	bne.n	80004a2 <playBall+0xe6>
        if (ball.y == person.y - 2) {
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <playBall+0xf4>)
 8000490:	685a      	ldr	r2, [r3, #4]
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <playBall+0xf8>)
 8000494:	785b      	ldrb	r3, [r3, #1]
 8000496:	3b02      	subs	r3, #2
 8000498:	429a      	cmp	r2, r3
 800049a:	d102      	bne.n	80004a2 <playBall+0xe6>
            changeDirection(S);
 800049c:	2004      	movs	r0, #4
 800049e:	f000 f881 	bl	80005a4 <changeDirection>
        }
    }

    checkBrickHit();
 80004a2:	f000 fa03 	bl	80008ac <checkBrickHit>
    moveBall();
 80004a6:	f000 f80b 	bl	80004c0 <moveBall>
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000034 	.word	0x20000034
 80004b4:	20000030 	.word	0x20000030
 80004b8:	20000002 	.word	0x20000002
 80004bc:	20001eea 	.word	0x20001eea

080004c0 <moveBall>:

void moveBall() {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af02      	add	r7, sp, #8
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80004c6:	4b35      	ldr	r3, [pc, #212]	; (800059c <moveBall+0xdc>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	b298      	uxth	r0, r3
 80004d0:	4b32      	ldr	r3, [pc, #200]	; (800059c <moveBall+0xdc>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	b299      	uxth	r1, r3
 80004da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2304      	movs	r3, #4
 80004e2:	2204      	movs	r2, #4
 80004e4:	f004 fcda 	bl	8004e9c <Displ_FillArea>
    switch (ball.dir) {
 80004e8:	4b2c      	ldr	r3, [pc, #176]	; (800059c <moveBall+0xdc>)
 80004ea:	7a1b      	ldrb	r3, [r3, #8]
 80004ec:	2b08      	cmp	r3, #8
 80004ee:	d84d      	bhi.n	800058c <moveBall+0xcc>
 80004f0:	a201      	add	r2, pc, #4	; (adr r2, 80004f8 <moveBall+0x38>)
 80004f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f6:	bf00      	nop
 80004f8:	0800051d 	.word	0x0800051d
 80004fc:	08000535 	.word	0x08000535
 8000500:	0800058d 	.word	0x0800058d
 8000504:	08000561 	.word	0x08000561
 8000508:	08000529 	.word	0x08000529
 800050c:	08000577 	.word	0x08000577
 8000510:	0800058d 	.word	0x0800058d
 8000514:	0800054b 	.word	0x0800054b
 8000518:	08000595 	.word	0x08000595
    case N:
        ball.y -= 1;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <moveBall+0xdc>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	3b01      	subs	r3, #1
 8000522:	4a1e      	ldr	r2, [pc, #120]	; (800059c <moveBall+0xdc>)
 8000524:	6053      	str	r3, [r2, #4]
        break;
 8000526:	e036      	b.n	8000596 <moveBall+0xd6>
    case S:
        ball.y += 1;
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <moveBall+0xdc>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	3301      	adds	r3, #1
 800052e:	4a1b      	ldr	r2, [pc, #108]	; (800059c <moveBall+0xdc>)
 8000530:	6053      	str	r3, [r2, #4]
        break;
 8000532:	e030      	b.n	8000596 <moveBall+0xd6>
    case NE:
        ball.y -= 1;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <moveBall+0xdc>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	3b01      	subs	r3, #1
 800053a:	4a18      	ldr	r2, [pc, #96]	; (800059c <moveBall+0xdc>)
 800053c:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 800053e:	4b17      	ldr	r3, [pc, #92]	; (800059c <moveBall+0xdc>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	4a15      	ldr	r2, [pc, #84]	; (800059c <moveBall+0xdc>)
 8000546:	6013      	str	r3, [r2, #0]
        break;
 8000548:	e025      	b.n	8000596 <moveBall+0xd6>
    case NW:
        ball.y -= 1;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <moveBall+0xdc>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	3b01      	subs	r3, #1
 8000550:	4a12      	ldr	r2, [pc, #72]	; (800059c <moveBall+0xdc>)
 8000552:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <moveBall+0xdc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	3b01      	subs	r3, #1
 800055a:	4a10      	ldr	r2, [pc, #64]	; (800059c <moveBall+0xdc>)
 800055c:	6013      	str	r3, [r2, #0]
        break;
 800055e:	e01a      	b.n	8000596 <moveBall+0xd6>
    case SE:
        ball.y += 1;
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <moveBall+0xdc>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	4a0d      	ldr	r2, [pc, #52]	; (800059c <moveBall+0xdc>)
 8000568:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <moveBall+0xdc>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	3301      	adds	r3, #1
 8000570:	4a0a      	ldr	r2, [pc, #40]	; (800059c <moveBall+0xdc>)
 8000572:	6013      	str	r3, [r2, #0]
        break;
 8000574:	e00f      	b.n	8000596 <moveBall+0xd6>
    case SW:
        ball.y += 1;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <moveBall+0xdc>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	3301      	adds	r3, #1
 800057c:	4a07      	ldr	r2, [pc, #28]	; (800059c <moveBall+0xdc>)
 800057e:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <moveBall+0xdc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3b01      	subs	r3, #1
 8000586:	4a05      	ldr	r2, [pc, #20]	; (800059c <moveBall+0xdc>)
 8000588:	6013      	str	r3, [r2, #0]
        break;
 800058a:	e004      	b.n	8000596 <moveBall+0xd6>
    case still:
        break;
    default:
        printf("You shouldn't be here\r\n");
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <moveBall+0xe0>)
 800058e:	f00a f903 	bl	800a798 <puts>
    }

}
 8000592:	e000      	b.n	8000596 <moveBall+0xd6>
        break;
 8000594:	bf00      	nop
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000034 	.word	0x20000034
 80005a0:	0800bdc8 	.word	0x0800bdc8

080005a4 <changeDirection>:

void changeDirection(directions inDir) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    if (inDir == N) {
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d129      	bne.n	8000608 <changeDirection+0x64>
        switch (ball.dir) {
 80005b4:	4b4a      	ldr	r3, [pc, #296]	; (80006e0 <changeDirection+0x13c>)
 80005b6:	7a1b      	ldrb	r3, [r3, #8]
 80005b8:	2b08      	cmp	r3, #8
 80005ba:	d821      	bhi.n	8000600 <changeDirection+0x5c>
 80005bc:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <changeDirection+0x20>)
 80005be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c2:	bf00      	nop
 80005c4:	080005e9 	.word	0x080005e9
 80005c8:	080005f9 	.word	0x080005f9
 80005cc:	08000601 	.word	0x08000601
 80005d0:	08000601 	.word	0x08000601
 80005d4:	08000601 	.word	0x08000601
 80005d8:	08000601 	.word	0x08000601
 80005dc:	08000601 	.word	0x08000601
 80005e0:	080005f1 	.word	0x080005f1
 80005e4:	0800060d 	.word	0x0800060d
        case N:
            ball.dir = S;
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <changeDirection+0x13c>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	721a      	strb	r2, [r3, #8]
            break;
 80005ee:	e00e      	b.n	800060e <changeDirection+0x6a>
        case NW:
            ball.dir = SW;
 80005f0:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <changeDirection+0x13c>)
 80005f2:	2205      	movs	r2, #5
 80005f4:	721a      	strb	r2, [r3, #8]
            break;
 80005f6:	e00a      	b.n	800060e <changeDirection+0x6a>
        case NE:
            ball.dir = SE;
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <changeDirection+0x13c>)
 80005fa:	2203      	movs	r2, #3
 80005fc:	721a      	strb	r2, [r3, #8]
            break;
 80005fe:	e006      	b.n	800060e <changeDirection+0x6a>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 8000600:	4838      	ldr	r0, [pc, #224]	; (80006e4 <changeDirection+0x140>)
 8000602:	f00a f8c9 	bl	800a798 <puts>
 8000606:	e002      	b.n	800060e <changeDirection+0x6a>
        }
    }
 8000608:	bf00      	nop
 800060a:	e000      	b.n	800060e <changeDirection+0x6a>
            break;
 800060c:	bf00      	nop

    if (inDir == E) {
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d116      	bne.n	8000642 <changeDirection+0x9e>
        switch (ball.dir) {
 8000614:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <changeDirection+0x13c>)
 8000616:	7a1b      	ldrb	r3, [r3, #8]
 8000618:	2b08      	cmp	r3, #8
 800061a:	d014      	beq.n	8000646 <changeDirection+0xa2>
 800061c:	2b08      	cmp	r3, #8
 800061e:	dc0c      	bgt.n	800063a <changeDirection+0x96>
 8000620:	2b01      	cmp	r3, #1
 8000622:	d002      	beq.n	800062a <changeDirection+0x86>
 8000624:	2b03      	cmp	r3, #3
 8000626:	d004      	beq.n	8000632 <changeDirection+0x8e>
 8000628:	e007      	b.n	800063a <changeDirection+0x96>
        case NE:
            ball.dir = NW;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <changeDirection+0x13c>)
 800062c:	2207      	movs	r2, #7
 800062e:	721a      	strb	r2, [r3, #8]
            break;
 8000630:	e00a      	b.n	8000648 <changeDirection+0xa4>
        case SE:
            ball.dir = SW;
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <changeDirection+0x13c>)
 8000634:	2205      	movs	r2, #5
 8000636:	721a      	strb	r2, [r3, #8]
            break;
 8000638:	e006      	b.n	8000648 <changeDirection+0xa4>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 800063a:	482a      	ldr	r0, [pc, #168]	; (80006e4 <changeDirection+0x140>)
 800063c:	f00a f8ac 	bl	800a798 <puts>
 8000640:	e002      	b.n	8000648 <changeDirection+0xa4>
        }
    }
 8000642:	bf00      	nop
 8000644:	e000      	b.n	8000648 <changeDirection+0xa4>
            break;
 8000646:	bf00      	nop

    if (inDir == S) {
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b04      	cmp	r3, #4
 800064c:	d124      	bne.n	8000698 <changeDirection+0xf4>
        switch (ball.dir) {
 800064e:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <changeDirection+0x13c>)
 8000650:	7a1b      	ldrb	r3, [r3, #8]
 8000652:	3b03      	subs	r3, #3
 8000654:	2b05      	cmp	r3, #5
 8000656:	d81b      	bhi.n	8000690 <changeDirection+0xec>
 8000658:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <changeDirection+0xbc>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000681 	.word	0x08000681
 8000664:	08000679 	.word	0x08000679
 8000668:	08000689 	.word	0x08000689
 800066c:	08000691 	.word	0x08000691
 8000670:	08000691 	.word	0x08000691
 8000674:	0800069d 	.word	0x0800069d
        case S:
            ball.dir = N;
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <changeDirection+0x13c>)
 800067a:	2200      	movs	r2, #0
 800067c:	721a      	strb	r2, [r3, #8]
            break;
 800067e:	e00e      	b.n	800069e <changeDirection+0xfa>
        case SE:
            ball.dir = NE;
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <changeDirection+0x13c>)
 8000682:	2201      	movs	r2, #1
 8000684:	721a      	strb	r2, [r3, #8]
            break;
 8000686:	e00a      	b.n	800069e <changeDirection+0xfa>
        case SW:
            ball.dir = NW;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <changeDirection+0x13c>)
 800068a:	2207      	movs	r2, #7
 800068c:	721a      	strb	r2, [r3, #8]
            break;
 800068e:	e006      	b.n	800069e <changeDirection+0xfa>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 8000690:	4814      	ldr	r0, [pc, #80]	; (80006e4 <changeDirection+0x140>)
 8000692:	f00a f881 	bl	800a798 <puts>
 8000696:	e002      	b.n	800069e <changeDirection+0xfa>
        }
    }
 8000698:	bf00      	nop
 800069a:	e000      	b.n	800069e <changeDirection+0xfa>
            break;
 800069c:	bf00      	nop

    if (inDir == W) {
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d115      	bne.n	80006d0 <changeDirection+0x12c>
        switch (ball.dir) {
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <changeDirection+0x13c>)
 80006a6:	7a1b      	ldrb	r3, [r3, #8]
 80006a8:	2b08      	cmp	r3, #8
 80006aa:	d013      	beq.n	80006d4 <changeDirection+0x130>
 80006ac:	2b08      	cmp	r3, #8
 80006ae:	dc0b      	bgt.n	80006c8 <changeDirection+0x124>
 80006b0:	2b05      	cmp	r3, #5
 80006b2:	d005      	beq.n	80006c0 <changeDirection+0x11c>
 80006b4:	2b07      	cmp	r3, #7
 80006b6:	d107      	bne.n	80006c8 <changeDirection+0x124>
        case NW:
            ball.dir = NE;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <changeDirection+0x13c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	721a      	strb	r2, [r3, #8]
            break;
 80006be:	e00a      	b.n	80006d6 <changeDirection+0x132>
        case SW:
            ball.dir = SE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <changeDirection+0x13c>)
 80006c2:	2203      	movs	r2, #3
 80006c4:	721a      	strb	r2, [r3, #8]
            break;
 80006c6:	e006      	b.n	80006d6 <changeDirection+0x132>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 80006c8:	4806      	ldr	r0, [pc, #24]	; (80006e4 <changeDirection+0x140>)
 80006ca:	f00a f865 	bl	800a798 <puts>
        }
    }
}
 80006ce:	e002      	b.n	80006d6 <changeDirection+0x132>
    }
 80006d0:	bf00      	nop
 80006d2:	e000      	b.n	80006d6 <changeDirection+0x132>
            break;
 80006d4:	bf00      	nop
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000034 	.word	0x20000034
 80006e4:	0800bdc8 	.word	0x0800bdc8

080006e8 <gameEnd>:

void gameEnd() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af02      	add	r7, sp, #8
    Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 10, D_GREEN);
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <gameEnd+0x74>)
 80006f0:	785b      	ldrb	r3, [r3, #1]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	b299      	uxth	r1, r3
 80006fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	230a      	movs	r3, #10
 8000702:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000706:	2000      	movs	r0, #0
 8000708:	f004 fbc8 	bl	8004e9c <Displ_FillArea>
    person.x = (SCREEN_WIDTH)/2;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <gameEnd+0x74>)
 800070e:	2228      	movs	r2, #40	; 0x28
 8000710:	701a      	strb	r2, [r3, #0]
    ball.x = person.x;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <gameEnd+0x74>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <gameEnd+0x78>)
 800071a:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 800071c:	4b10      	ldr	r3, [pc, #64]	; (8000760 <gameEnd+0x78>)
 800071e:	2236      	movs	r2, #54	; 0x36
 8000720:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <gameEnd+0x78>)
 8000724:	2208      	movs	r2, #8
 8000726:	721a      	strb	r2, [r3, #8]

    if (lives1 <= 0) {
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <gameEnd+0x7c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d112      	bne.n	8000756 <gameEnd+0x6e>
        if (points > highScore) {
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <gameEnd+0x80>)
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <gameEnd+0x84>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d903      	bls.n	8000744 <gameEnd+0x5c>
            highScore = points;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <gameEnd+0x80>)
 800073e:	781a      	ldrb	r2, [r3, #0]
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <gameEnd+0x84>)
 8000742:	701a      	strb	r2, [r3, #0]
        }

        start = 0;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <gameEnd+0x88>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
        points = 0;
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <gameEnd+0x80>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
        lives1 = 3;
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <gameEnd+0x7c>)
 8000752:	2203      	movs	r2, #3
 8000754:	701a      	strb	r2, [r3, #0]
    }
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000030 	.word	0x20000030
 8000760:	20000034 	.word	0x20000034
 8000764:	20000002 	.word	0x20000002
 8000768:	20001ee8 	.word	0x20001ee8
 800076c:	20001ee9 	.word	0x20001ee9
 8000770:	20001eef 	.word	0x20001eef

08000774 <lowerBricks>:

void lowerBricks() {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 800077a:	232e      	movs	r3, #46	; 0x2e
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e03d      	b.n	80007fc <lowerBricks+0x88>
        for (int j = 0; j < 10; j++) {
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	e034      	b.n	80007f0 <lowerBricks+0x7c>
            bricks[i + 1][j].visible = bricks[i][j].visible;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	482d      	ldr	r0, [pc, #180]	; (8000840 <lowerBricks+0xcc>)
 800078c:	68f9      	ldr	r1, [r7, #12]
 800078e:	460b      	mov	r3, r1
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	68b9      	ldr	r1, [r7, #8]
 8000798:	440b      	add	r3, r1
 800079a:	011b      	lsls	r3, r3, #4
 800079c:	4403      	add	r3, r0
 800079e:	3308      	adds	r3, #8
 80007a0:	6819      	ldr	r1, [r3, #0]
 80007a2:	4827      	ldr	r0, [pc, #156]	; (8000840 <lowerBricks+0xcc>)
 80007a4:	4613      	mov	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	4413      	add	r3, r2
 80007b0:	011b      	lsls	r3, r3, #4
 80007b2:	4403      	add	r3, r0
 80007b4:	3308      	adds	r3, #8
 80007b6:	6019      	str	r1, [r3, #0]
            bricks[i + 1][j].toughness = bricks[i][j].toughness;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	4820      	ldr	r0, [pc, #128]	; (8000840 <lowerBricks+0xcc>)
 80007be:	68f9      	ldr	r1, [r7, #12]
 80007c0:	460b      	mov	r3, r1
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	440b      	add	r3, r1
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	440b      	add	r3, r1
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	4403      	add	r3, r0
 80007d0:	330c      	adds	r3, #12
 80007d2:	6819      	ldr	r1, [r3, #0]
 80007d4:	481a      	ldr	r0, [pc, #104]	; (8000840 <lowerBricks+0xcc>)
 80007d6:	4613      	mov	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	4413      	add	r3, r2
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	4403      	add	r3, r0
 80007e6:	330c      	adds	r3, #12
 80007e8:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 10; j++) {
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	2b09      	cmp	r3, #9
 80007f4:	ddc7      	ble.n	8000786 <lowerBricks+0x12>
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	dabe      	bge.n	8000780 <lowerBricks+0xc>
        }
    }
    for(int j = 0; j < 10; j++) {
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	e012      	b.n	800082e <lowerBricks+0xba>
        bricks[0][j].visible = 1;
 8000808:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <lowerBricks+0xcc>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	2201      	movs	r2, #1
 8000814:	601a      	str	r2, [r3, #0]
        bricks[0][j].toughness = setBrickToughness();
 8000816:	f001 fc21 	bl	800205c <setBrickToughness>
 800081a:	4602      	mov	r2, r0
 800081c:	4908      	ldr	r1, [pc, #32]	; (8000840 <lowerBricks+0xcc>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	440b      	add	r3, r1
 8000824:	330c      	adds	r3, #12
 8000826:	601a      	str	r2, [r3, #0]
    for(int j = 0; j < 10; j++) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3301      	adds	r3, #1
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b09      	cmp	r3, #9
 8000832:	dde9      	ble.n	8000808 <lowerBricks+0x94>
    }

    drawBricks();
 8000834:	f001 fc48 	bl	80020c8 <drawBricks>
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200000e8 	.word	0x200000e8

08000844 <checkGameOver>:

void checkGameOver() {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
    for (int j = 0; j < 10; j++) {
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	e01c      	b.n	800088a <checkGameOver+0x46>
        if (bricks[MAX_BRICK_LINES - 1][j].visible == 1) {
 8000850:	4a12      	ldr	r2, [pc, #72]	; (800089c <checkGameOver+0x58>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	4413      	add	r3, r2
 8000858:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 800085c:	3308      	adds	r3, #8
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d10f      	bne.n	8000884 <checkGameOver+0x40>

            lives1 = 0;
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <checkGameOver+0x5c>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
            ball.x = person.x;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <checkGameOver+0x60>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <checkGameOver+0x64>)
 8000872:	601a      	str	r2, [r3, #0]
            ball.y = SCREEN_HEIGHT - 6;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <checkGameOver+0x64>)
 8000876:	2236      	movs	r2, #54	; 0x36
 8000878:	605a      	str	r2, [r3, #4]
            ball.dir = still;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <checkGameOver+0x64>)
 800087c:	2208      	movs	r2, #8
 800087e:	721a      	strb	r2, [r3, #8]
            gameEnd();
 8000880:	f7ff ff32 	bl	80006e8 <gameEnd>
    for (int j = 0; j < 10; j++) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3301      	adds	r3, #1
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b09      	cmp	r3, #9
 800088e:	dddf      	ble.n	8000850 <checkGameOver+0xc>
        }
    }
}
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000e8 	.word	0x200000e8
 80008a0:	20000002 	.word	0x20000002
 80008a4:	20000030 	.word	0x20000030
 80008a8:	20000034 	.word	0x20000034

080008ac <checkBrickHit>:

void checkBrickHit() {
 80008ac:	b5b0      	push	{r4, r5, r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af02      	add	r7, sp, #8
    uint8_t bricksHit = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	71fb      	strb	r3, [r7, #7]
    switch (ball.dir) {
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <checkBrickHit+0x3c>)
 80008b8:	7a1b      	ldrb	r3, [r3, #8]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	2b07      	cmp	r3, #7
 80008be:	f201 8240 	bhi.w	8001d42 <checkBrickHit+0x1496>
 80008c2:	a201      	add	r2, pc, #4	; (adr r2, 80008c8 <checkBrickHit+0x1c>)
 80008c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c8:	08000e15 	.word	0x08000e15
 80008cc:	08001d43 	.word	0x08001d43
 80008d0:	0800133d 	.word	0x0800133d
 80008d4:	08001d43 	.word	0x08001d43
 80008d8:	08001849 	.word	0x08001849
 80008dc:	08001d43 	.word	0x08001d43
 80008e0:	080008ed 	.word	0x080008ed
 80008e4:	08001d4d 	.word	0x08001d4d
 80008e8:	20000034 	.word	0x20000034
    case NW :
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 80008ec:	4bb6      	ldr	r3, [pc, #728]	; (8000bc8 <checkBrickHit+0x31c>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f1a3 0209 	sub.w	r2, r3, #9
 80008f4:	4bb4      	ldr	r3, [pc, #720]	; (8000bc8 <checkBrickHit+0x31c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	da00      	bge.n	80008fe <checkBrickHit+0x52>
 80008fc:	3307      	adds	r3, #7
 80008fe:	10db      	asrs	r3, r3, #3
 8000900:	4618      	mov	r0, r3
 8000902:	49b2      	ldr	r1, [pc, #712]	; (8000bcc <checkBrickHit+0x320>)
 8000904:	4613      	mov	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4413      	add	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	4403      	add	r3, r0
 800090e:	011b      	lsls	r3, r3, #4
 8000910:	440b      	add	r3, r1
 8000912:	3308      	adds	r3, #8
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b01      	cmp	r3, #1
 8000918:	f040 80b4 	bne.w	8000a84 <checkBrickHit+0x1d8>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 800091c:	4baa      	ldr	r3, [pc, #680]	; (8000bc8 <checkBrickHit+0x31c>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f1a3 0209 	sub.w	r2, r3, #9
 8000924:	4ba8      	ldr	r3, [pc, #672]	; (8000bc8 <checkBrickHit+0x31c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	da00      	bge.n	800092e <checkBrickHit+0x82>
 800092c:	3307      	adds	r3, #7
 800092e:	10db      	asrs	r3, r3, #3
 8000930:	4619      	mov	r1, r3
 8000932:	48a6      	ldr	r0, [pc, #664]	; (8000bcc <checkBrickHit+0x320>)
 8000934:	4613      	mov	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	4413      	add	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	440b      	add	r3, r1
 800093e:	011b      	lsls	r3, r3, #4
 8000940:	4403      	add	r3, r0
 8000942:	330c      	adds	r3, #12
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	1e58      	subs	r0, r3, #1
 8000948:	4ca0      	ldr	r4, [pc, #640]	; (8000bcc <checkBrickHit+0x320>)
 800094a:	4613      	mov	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	440b      	add	r3, r1
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	4423      	add	r3, r4
 8000958:	330c      	adds	r3, #12
 800095a:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 800095c:	4b9a      	ldr	r3, [pc, #616]	; (8000bc8 <checkBrickHit+0x31c>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f1a3 0209 	sub.w	r2, r3, #9
 8000964:	4b98      	ldr	r3, [pc, #608]	; (8000bc8 <checkBrickHit+0x31c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	da00      	bge.n	800096e <checkBrickHit+0xc2>
 800096c:	3307      	adds	r3, #7
 800096e:	10db      	asrs	r3, r3, #3
 8000970:	4618      	mov	r0, r3
 8000972:	4996      	ldr	r1, [pc, #600]	; (8000bcc <checkBrickHit+0x320>)
 8000974:	4613      	mov	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4413      	add	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4403      	add	r3, r0
 800097e:	011b      	lsls	r3, r3, #4
 8000980:	440b      	add	r3, r1
 8000982:	330c      	adds	r3, #12
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	dc29      	bgt.n	80009de <checkBrickHit+0x132>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 800098a:	4b8f      	ldr	r3, [pc, #572]	; (8000bc8 <checkBrickHit+0x31c>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f1a3 0209 	sub.w	r2, r3, #9
 8000992:	4b8d      	ldr	r3, [pc, #564]	; (8000bc8 <checkBrickHit+0x31c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	da00      	bge.n	800099c <checkBrickHit+0xf0>
 800099a:	3307      	adds	r3, #7
 800099c:	10db      	asrs	r3, r3, #3
 800099e:	4618      	mov	r0, r3
 80009a0:	498a      	ldr	r1, [pc, #552]	; (8000bcc <checkBrickHit+0x320>)
 80009a2:	4613      	mov	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	4403      	add	r3, r0
 80009ac:	011b      	lsls	r3, r3, #4
 80009ae:	440b      	add	r3, r1
 80009b0:	3308      	adds	r3, #8
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
                points++;
 80009b6:	4b86      	ldr	r3, [pc, #536]	; (8000bd0 <checkBrickHit+0x324>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3301      	adds	r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b84      	ldr	r3, [pc, #528]	; (8000bd0 <checkBrickHit+0x324>)
 80009c0:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 80009c2:	4b81      	ldr	r3, [pc, #516]	; (8000bc8 <checkBrickHit+0x31c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	da00      	bge.n	80009cc <checkBrickHit+0x120>
 80009ca:	3307      	adds	r3, #7
 80009cc:	10db      	asrs	r3, r3, #3
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b7d      	ldr	r3, [pc, #500]	; (8000bc8 <checkBrickHit+0x31c>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	3b09      	subs	r3, #9
 80009d6:	4619      	mov	r1, r3
 80009d8:	4610      	mov	r0, r2
 80009da:	f001 f9cd 	bl	8001d78 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 80009de:	4b7a      	ldr	r3, [pc, #488]	; (8000bc8 <checkBrickHit+0x31c>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f1a3 0209 	sub.w	r2, r3, #9
 80009e6:	4b78      	ldr	r3, [pc, #480]	; (8000bc8 <checkBrickHit+0x31c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	da00      	bge.n	80009f0 <checkBrickHit+0x144>
 80009ee:	3307      	adds	r3, #7
 80009f0:	10db      	asrs	r3, r3, #3
 80009f2:	4618      	mov	r0, r3
 80009f4:	4975      	ldr	r1, [pc, #468]	; (8000bcc <checkBrickHit+0x320>)
 80009f6:	4613      	mov	r3, r2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	4413      	add	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4403      	add	r3, r0
 8000a00:	011b      	lsls	r3, r3, #4
 8000a02:	440b      	add	r3, r1
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	b298      	uxth	r0, r3
 8000a0c:	4b6e      	ldr	r3, [pc, #440]	; (8000bc8 <checkBrickHit+0x31c>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f1a3 0209 	sub.w	r2, r3, #9
 8000a14:	4b6c      	ldr	r3, [pc, #432]	; (8000bc8 <checkBrickHit+0x31c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	da00      	bge.n	8000a1e <checkBrickHit+0x172>
 8000a1c:	3307      	adds	r3, #7
 8000a1e:	10db      	asrs	r3, r3, #3
 8000a20:	461c      	mov	r4, r3
 8000a22:	496a      	ldr	r1, [pc, #424]	; (8000bcc <checkBrickHit+0x320>)
 8000a24:	4613      	mov	r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4413      	add	r3, r2
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	4423      	add	r3, r4
 8000a2e:	011b      	lsls	r3, r3, #4
 8000a30:	440b      	add	r3, r1
 8000a32:	3304      	adds	r3, #4
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	b299      	uxth	r1, r3
 8000a3c:	4b62      	ldr	r3, [pc, #392]	; (8000bc8 <checkBrickHit+0x31c>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f1a3 0209 	sub.w	r2, r3, #9
 8000a44:	4b60      	ldr	r3, [pc, #384]	; (8000bc8 <checkBrickHit+0x31c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	da00      	bge.n	8000a4e <checkBrickHit+0x1a2>
 8000a4c:	3307      	adds	r3, #7
 8000a4e:	10db      	asrs	r3, r3, #3
 8000a50:	461d      	mov	r5, r3
 8000a52:	4c5e      	ldr	r4, [pc, #376]	; (8000bcc <checkBrickHit+0x320>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	4413      	add	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	442b      	add	r3, r5
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	4423      	add	r3, r4
 8000a62:	330c      	adds	r3, #12
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a5b      	ldr	r2, [pc, #364]	; (8000bd4 <checkBrickHit+0x328>)
 8000a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2304      	movs	r3, #4
 8000a72:	2220      	movs	r2, #32
 8000a74:	f004 fa12 	bl	8004e9c <Displ_FillArea>
            bricksHit++;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	71fb      	strb	r3, [r7, #7]
            ball.dir = SW;
 8000a7e:	4b52      	ldr	r3, [pc, #328]	; (8000bc8 <checkBrickHit+0x31c>)
 8000a80:	2205      	movs	r2, #5
 8000a82:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 8000a84:	4b50      	ldr	r3, [pc, #320]	; (8000bc8 <checkBrickHit+0x31c>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f1a3 0208 	sub.w	r2, r3, #8
 8000a8c:	4b4e      	ldr	r3, [pc, #312]	; (8000bc8 <checkBrickHit+0x31c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	da00      	bge.n	8000a98 <checkBrickHit+0x1ec>
 8000a96:	3307      	adds	r3, #7
 8000a98:	10db      	asrs	r3, r3, #3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	494b      	ldr	r1, [pc, #300]	; (8000bcc <checkBrickHit+0x320>)
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4403      	add	r3, r0
 8000aa8:	011b      	lsls	r3, r3, #4
 8000aaa:	440b      	add	r3, r1
 8000aac:	3308      	adds	r3, #8
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	f040 80d0 	bne.w	8000c56 <checkBrickHit+0x3aa>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8000ab6:	4b44      	ldr	r3, [pc, #272]	; (8000bc8 <checkBrickHit+0x31c>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f1a3 0208 	sub.w	r2, r3, #8
 8000abe:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <checkBrickHit+0x31c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	da00      	bge.n	8000aca <checkBrickHit+0x21e>
 8000ac8:	3307      	adds	r3, #7
 8000aca:	10db      	asrs	r3, r3, #3
 8000acc:	4619      	mov	r1, r3
 8000ace:	483f      	ldr	r0, [pc, #252]	; (8000bcc <checkBrickHit+0x320>)
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	440b      	add	r3, r1
 8000ada:	011b      	lsls	r3, r3, #4
 8000adc:	4403      	add	r3, r0
 8000ade:	330c      	adds	r3, #12
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	1e58      	subs	r0, r3, #1
 8000ae4:	4c39      	ldr	r4, [pc, #228]	; (8000bcc <checkBrickHit+0x320>)
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	4413      	add	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	440b      	add	r3, r1
 8000af0:	011b      	lsls	r3, r3, #4
 8000af2:	4423      	add	r3, r4
 8000af4:	330c      	adds	r3, #12
 8000af6:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8000af8:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <checkBrickHit+0x31c>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f1a3 0208 	sub.w	r2, r3, #8
 8000b00:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <checkBrickHit+0x31c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	3b01      	subs	r3, #1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	da00      	bge.n	8000b0c <checkBrickHit+0x260>
 8000b0a:	3307      	adds	r3, #7
 8000b0c:	10db      	asrs	r3, r3, #3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	492e      	ldr	r1, [pc, #184]	; (8000bcc <checkBrickHit+0x320>)
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4403      	add	r3, r0
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	440b      	add	r3, r1
 8000b20:	330c      	adds	r3, #12
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	dc2b      	bgt.n	8000b80 <checkBrickHit+0x2d4>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <checkBrickHit+0x31c>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f1a3 0208 	sub.w	r2, r3, #8
 8000b30:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <checkBrickHit+0x31c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	da00      	bge.n	8000b3c <checkBrickHit+0x290>
 8000b3a:	3307      	adds	r3, #7
 8000b3c:	10db      	asrs	r3, r3, #3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	4922      	ldr	r1, [pc, #136]	; (8000bcc <checkBrickHit+0x320>)
 8000b42:	4613      	mov	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	4403      	add	r3, r0
 8000b4c:	011b      	lsls	r3, r3, #4
 8000b4e:	440b      	add	r3, r1
 8000b50:	3308      	adds	r3, #8
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
                points++;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <checkBrickHit+0x324>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <checkBrickHit+0x324>)
 8000b60:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <checkBrickHit+0x31c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	da00      	bge.n	8000b6e <checkBrickHit+0x2c2>
 8000b6c:	3307      	adds	r3, #7
 8000b6e:	10db      	asrs	r3, r3, #3
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <checkBrickHit+0x31c>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	3b08      	subs	r3, #8
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	f001 f8fc 	bl	8001d78 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <checkBrickHit+0x31c>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f1a3 0208 	sub.w	r2, r3, #8
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <checkBrickHit+0x31c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	da00      	bge.n	8000b94 <checkBrickHit+0x2e8>
 8000b92:	3307      	adds	r3, #7
 8000b94:	10db      	asrs	r3, r3, #3
 8000b96:	4618      	mov	r0, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <checkBrickHit+0x320>)
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4413      	add	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4403      	add	r3, r0
 8000ba4:	011b      	lsls	r3, r3, #4
 8000ba6:	440b      	add	r3, r1
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	b298      	uxth	r0, r3
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <checkBrickHit+0x31c>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f1a3 0208 	sub.w	r2, r3, #8
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <checkBrickHit+0x31c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	da0a      	bge.n	8000bd8 <checkBrickHit+0x32c>
 8000bc2:	3307      	adds	r3, #7
 8000bc4:	e008      	b.n	8000bd8 <checkBrickHit+0x32c>
 8000bc6:	bf00      	nop
 8000bc8:	20000034 	.word	0x20000034
 8000bcc:	200000e8 	.word	0x200000e8
 8000bd0:	20001ee8 	.word	0x20001ee8
 8000bd4:	20000004 	.word	0x20000004
 8000bd8:	10db      	asrs	r3, r3, #3
 8000bda:	461c      	mov	r4, r3
 8000bdc:	4989      	ldr	r1, [pc, #548]	; (8000e04 <checkBrickHit+0x558>)
 8000bde:	4613      	mov	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4423      	add	r3, r4
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	440b      	add	r3, r1
 8000bec:	3304      	adds	r3, #4
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	b299      	uxth	r1, r3
 8000bf6:	4b84      	ldr	r3, [pc, #528]	; (8000e08 <checkBrickHit+0x55c>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f1a3 0208 	sub.w	r2, r3, #8
 8000bfe:	4b82      	ldr	r3, [pc, #520]	; (8000e08 <checkBrickHit+0x55c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	da00      	bge.n	8000c0a <checkBrickHit+0x35e>
 8000c08:	3307      	adds	r3, #7
 8000c0a:	10db      	asrs	r3, r3, #3
 8000c0c:	461d      	mov	r5, r3
 8000c0e:	4c7d      	ldr	r4, [pc, #500]	; (8000e04 <checkBrickHit+0x558>)
 8000c10:	4613      	mov	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	442b      	add	r3, r5
 8000c1a:	011b      	lsls	r3, r3, #4
 8000c1c:	4423      	add	r3, r4
 8000c1e:	330c      	adds	r3, #12
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a7a      	ldr	r2, [pc, #488]	; (8000e0c <checkBrickHit+0x560>)
 8000c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	2220      	movs	r2, #32
 8000c30:	f004 f934 	bl	8004e9c <Displ_FillArea>
            bricksHit++;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	3301      	adds	r3, #1
 8000c38:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NW) {
 8000c3a:	4b73      	ldr	r3, [pc, #460]	; (8000e08 <checkBrickHit+0x55c>)
 8000c3c:	7a1b      	ldrb	r3, [r3, #8]
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	d102      	bne.n	8000c48 <checkBrickHit+0x39c>
                ball.dir = NE;
 8000c42:	4b71      	ldr	r3, [pc, #452]	; (8000e08 <checkBrickHit+0x55c>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SW) {
 8000c48:	4b6f      	ldr	r3, [pc, #444]	; (8000e08 <checkBrickHit+0x55c>)
 8000c4a:	7a1b      	ldrb	r3, [r3, #8]
 8000c4c:	2b05      	cmp	r3, #5
 8000c4e:	d102      	bne.n	8000c56 <checkBrickHit+0x3aa>
                ball.dir = SE;
 8000c50:	4b6d      	ldr	r3, [pc, #436]	; (8000e08 <checkBrickHit+0x55c>)
 8000c52:	2203      	movs	r2, #3
 8000c54:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f041 8079 	bne.w	8001d50 <checkBrickHit+0x14a4>
            if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible == 1) {
 8000c5e:	4b6a      	ldr	r3, [pc, #424]	; (8000e08 <checkBrickHit+0x55c>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f1a3 0209 	sub.w	r2, r3, #9
 8000c66:	4b68      	ldr	r3, [pc, #416]	; (8000e08 <checkBrickHit+0x55c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	da00      	bge.n	8000c72 <checkBrickHit+0x3c6>
 8000c70:	3307      	adds	r3, #7
 8000c72:	10db      	asrs	r3, r3, #3
 8000c74:	4618      	mov	r0, r3
 8000c76:	4963      	ldr	r1, [pc, #396]	; (8000e04 <checkBrickHit+0x558>)
 8000c78:	4613      	mov	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	4413      	add	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4403      	add	r3, r0
 8000c82:	011b      	lsls	r3, r3, #4
 8000c84:	440b      	add	r3, r1
 8000c86:	3308      	adds	r3, #8
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	f041 8060 	bne.w	8001d50 <checkBrickHit+0x14a4>
                bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness--;
 8000c90:	4b5d      	ldr	r3, [pc, #372]	; (8000e08 <checkBrickHit+0x55c>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f1a3 0209 	sub.w	r2, r3, #9
 8000c98:	4b5b      	ldr	r3, [pc, #364]	; (8000e08 <checkBrickHit+0x55c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da00      	bge.n	8000ca4 <checkBrickHit+0x3f8>
 8000ca2:	3307      	adds	r3, #7
 8000ca4:	10db      	asrs	r3, r3, #3
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4856      	ldr	r0, [pc, #344]	; (8000e04 <checkBrickHit+0x558>)
 8000caa:	4613      	mov	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	440b      	add	r3, r1
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	4403      	add	r3, r0
 8000cb8:	330c      	adds	r3, #12
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	1e58      	subs	r0, r3, #1
 8000cbe:	4c51      	ldr	r4, [pc, #324]	; (8000e04 <checkBrickHit+0x558>)
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	440b      	add	r3, r1
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	4423      	add	r3, r4
 8000cce:	330c      	adds	r3, #12
 8000cd0:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8000cd2:	4b4d      	ldr	r3, [pc, #308]	; (8000e08 <checkBrickHit+0x55c>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f1a3 0209 	sub.w	r2, r3, #9
 8000cda:	4b4b      	ldr	r3, [pc, #300]	; (8000e08 <checkBrickHit+0x55c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	da00      	bge.n	8000ce6 <checkBrickHit+0x43a>
 8000ce4:	3307      	adds	r3, #7
 8000ce6:	10db      	asrs	r3, r3, #3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	4946      	ldr	r1, [pc, #280]	; (8000e04 <checkBrickHit+0x558>)
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4403      	add	r3, r0
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	440b      	add	r3, r1
 8000cfa:	330c      	adds	r3, #12
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	dc2b      	bgt.n	8000d5a <checkBrickHit+0x4ae>
                    bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible = 0;
 8000d02:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <checkBrickHit+0x55c>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f1a3 0209 	sub.w	r2, r3, #9
 8000d0a:	4b3f      	ldr	r3, [pc, #252]	; (8000e08 <checkBrickHit+0x55c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	da00      	bge.n	8000d16 <checkBrickHit+0x46a>
 8000d14:	3307      	adds	r3, #7
 8000d16:	10db      	asrs	r3, r3, #3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	493a      	ldr	r1, [pc, #232]	; (8000e04 <checkBrickHit+0x558>)
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4403      	add	r3, r0
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	440b      	add	r3, r1
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
                    points++;
 8000d30:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <checkBrickHit+0x564>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <checkBrickHit+0x564>)
 8000d3a:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x - 1)/8, ball.y - 1 - 8);
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <checkBrickHit+0x55c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	da00      	bge.n	8000d48 <checkBrickHit+0x49c>
 8000d46:	3307      	adds	r3, #7
 8000d48:	10db      	asrs	r3, r3, #3
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <checkBrickHit+0x55c>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	3b09      	subs	r3, #9
 8000d52:	4619      	mov	r1, r3
 8000d54:	4610      	mov	r0, r2
 8000d56:	f001 f80f 	bl	8001d78 <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness]);
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <checkBrickHit+0x55c>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f1a3 0209 	sub.w	r2, r3, #9
 8000d62:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <checkBrickHit+0x55c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	da00      	bge.n	8000d6e <checkBrickHit+0x4c2>
 8000d6c:	3307      	adds	r3, #7
 8000d6e:	10db      	asrs	r3, r3, #3
 8000d70:	4618      	mov	r0, r3
 8000d72:	4924      	ldr	r1, [pc, #144]	; (8000e04 <checkBrickHit+0x558>)
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4403      	add	r3, r0
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	440b      	add	r3, r1
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	b298      	uxth	r0, r3
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <checkBrickHit+0x55c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f1a3 0209 	sub.w	r2, r3, #9
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <checkBrickHit+0x55c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	da00      	bge.n	8000d9e <checkBrickHit+0x4f2>
 8000d9c:	3307      	adds	r3, #7
 8000d9e:	10db      	asrs	r3, r3, #3
 8000da0:	461c      	mov	r4, r3
 8000da2:	4918      	ldr	r1, [pc, #96]	; (8000e04 <checkBrickHit+0x558>)
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4423      	add	r3, r4
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	440b      	add	r3, r1
 8000db2:	3304      	adds	r3, #4
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	b299      	uxth	r1, r3
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <checkBrickHit+0x55c>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f1a3 0209 	sub.w	r2, r3, #9
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <checkBrickHit+0x55c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da00      	bge.n	8000dd0 <checkBrickHit+0x524>
 8000dce:	3307      	adds	r3, #7
 8000dd0:	10db      	asrs	r3, r3, #3
 8000dd2:	461d      	mov	r5, r3
 8000dd4:	4c0b      	ldr	r4, [pc, #44]	; (8000e04 <checkBrickHit+0x558>)
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	442b      	add	r3, r5
 8000de0:	011b      	lsls	r3, r3, #4
 8000de2:	4423      	add	r3, r4
 8000de4:	330c      	adds	r3, #12
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <checkBrickHit+0x560>)
 8000dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2304      	movs	r3, #4
 8000df4:	2220      	movs	r2, #32
 8000df6:	f004 f851 	bl	8004e9c <Displ_FillArea>
                ball.dir = SE;
 8000dfa:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <checkBrickHit+0x55c>)
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8000e00:	f000 bfa6 	b.w	8001d50 <checkBrickHit+0x14a4>
 8000e04:	200000e8 	.word	0x200000e8
 8000e08:	20000034 	.word	0x20000034
 8000e0c:	20000004 	.word	0x20000004
 8000e10:	20001ee8 	.word	0x20001ee8
    case NE:
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 8000e14:	4bb6      	ldr	r3, [pc, #728]	; (80010f0 <checkBrickHit+0x844>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f1a3 0209 	sub.w	r2, r3, #9
 8000e1c:	4bb4      	ldr	r3, [pc, #720]	; (80010f0 <checkBrickHit+0x844>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	da00      	bge.n	8000e26 <checkBrickHit+0x57a>
 8000e24:	3307      	adds	r3, #7
 8000e26:	10db      	asrs	r3, r3, #3
 8000e28:	4618      	mov	r0, r3
 8000e2a:	49b2      	ldr	r1, [pc, #712]	; (80010f4 <checkBrickHit+0x848>)
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4403      	add	r3, r0
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	440b      	add	r3, r1
 8000e3a:	3308      	adds	r3, #8
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	f040 80b4 	bne.w	8000fac <checkBrickHit+0x700>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000e44:	4baa      	ldr	r3, [pc, #680]	; (80010f0 <checkBrickHit+0x844>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f1a3 0209 	sub.w	r2, r3, #9
 8000e4c:	4ba8      	ldr	r3, [pc, #672]	; (80010f0 <checkBrickHit+0x844>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	da00      	bge.n	8000e56 <checkBrickHit+0x5aa>
 8000e54:	3307      	adds	r3, #7
 8000e56:	10db      	asrs	r3, r3, #3
 8000e58:	4619      	mov	r1, r3
 8000e5a:	48a6      	ldr	r0, [pc, #664]	; (80010f4 <checkBrickHit+0x848>)
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	440b      	add	r3, r1
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	4403      	add	r3, r0
 8000e6a:	330c      	adds	r3, #12
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	1e58      	subs	r0, r3, #1
 8000e70:	4ca0      	ldr	r4, [pc, #640]	; (80010f4 <checkBrickHit+0x848>)
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	440b      	add	r3, r1
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	4423      	add	r3, r4
 8000e80:	330c      	adds	r3, #12
 8000e82:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000e84:	4b9a      	ldr	r3, [pc, #616]	; (80010f0 <checkBrickHit+0x844>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f1a3 0209 	sub.w	r2, r3, #9
 8000e8c:	4b98      	ldr	r3, [pc, #608]	; (80010f0 <checkBrickHit+0x844>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	da00      	bge.n	8000e96 <checkBrickHit+0x5ea>
 8000e94:	3307      	adds	r3, #7
 8000e96:	10db      	asrs	r3, r3, #3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	4996      	ldr	r1, [pc, #600]	; (80010f4 <checkBrickHit+0x848>)
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4403      	add	r3, r0
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	440b      	add	r3, r1
 8000eaa:	330c      	adds	r3, #12
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	dc29      	bgt.n	8000f06 <checkBrickHit+0x65a>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 8000eb2:	4b8f      	ldr	r3, [pc, #572]	; (80010f0 <checkBrickHit+0x844>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f1a3 0209 	sub.w	r2, r3, #9
 8000eba:	4b8d      	ldr	r3, [pc, #564]	; (80010f0 <checkBrickHit+0x844>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	da00      	bge.n	8000ec4 <checkBrickHit+0x618>
 8000ec2:	3307      	adds	r3, #7
 8000ec4:	10db      	asrs	r3, r3, #3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	498a      	ldr	r1, [pc, #552]	; (80010f4 <checkBrickHit+0x848>)
 8000eca:	4613      	mov	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4403      	add	r3, r0
 8000ed4:	011b      	lsls	r3, r3, #4
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3308      	adds	r3, #8
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
                points++;
 8000ede:	4b86      	ldr	r3, [pc, #536]	; (80010f8 <checkBrickHit+0x84c>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b84      	ldr	r3, [pc, #528]	; (80010f8 <checkBrickHit+0x84c>)
 8000ee8:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 8000eea:	4b81      	ldr	r3, [pc, #516]	; (80010f0 <checkBrickHit+0x844>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	da00      	bge.n	8000ef4 <checkBrickHit+0x648>
 8000ef2:	3307      	adds	r3, #7
 8000ef4:	10db      	asrs	r3, r3, #3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b7d      	ldr	r3, [pc, #500]	; (80010f0 <checkBrickHit+0x844>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	3b09      	subs	r3, #9
 8000efe:	4619      	mov	r1, r3
 8000f00:	4610      	mov	r0, r2
 8000f02:	f000 ff39 	bl	8001d78 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 8000f06:	4b7a      	ldr	r3, [pc, #488]	; (80010f0 <checkBrickHit+0x844>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f1a3 0209 	sub.w	r2, r3, #9
 8000f0e:	4b78      	ldr	r3, [pc, #480]	; (80010f0 <checkBrickHit+0x844>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	da00      	bge.n	8000f18 <checkBrickHit+0x66c>
 8000f16:	3307      	adds	r3, #7
 8000f18:	10db      	asrs	r3, r3, #3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	4975      	ldr	r1, [pc, #468]	; (80010f4 <checkBrickHit+0x848>)
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4403      	add	r3, r0
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	440b      	add	r3, r1
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	b298      	uxth	r0, r3
 8000f34:	4b6e      	ldr	r3, [pc, #440]	; (80010f0 <checkBrickHit+0x844>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f1a3 0209 	sub.w	r2, r3, #9
 8000f3c:	4b6c      	ldr	r3, [pc, #432]	; (80010f0 <checkBrickHit+0x844>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	da00      	bge.n	8000f46 <checkBrickHit+0x69a>
 8000f44:	3307      	adds	r3, #7
 8000f46:	10db      	asrs	r3, r3, #3
 8000f48:	461c      	mov	r4, r3
 8000f4a:	496a      	ldr	r1, [pc, #424]	; (80010f4 <checkBrickHit+0x848>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4423      	add	r3, r4
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	440b      	add	r3, r1
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	b299      	uxth	r1, r3
 8000f64:	4b62      	ldr	r3, [pc, #392]	; (80010f0 <checkBrickHit+0x844>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f1a3 0209 	sub.w	r2, r3, #9
 8000f6c:	4b60      	ldr	r3, [pc, #384]	; (80010f0 <checkBrickHit+0x844>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	da00      	bge.n	8000f76 <checkBrickHit+0x6ca>
 8000f74:	3307      	adds	r3, #7
 8000f76:	10db      	asrs	r3, r3, #3
 8000f78:	461d      	mov	r5, r3
 8000f7a:	4c5e      	ldr	r4, [pc, #376]	; (80010f4 <checkBrickHit+0x848>)
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	442b      	add	r3, r5
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	4423      	add	r3, r4
 8000f8a:	330c      	adds	r3, #12
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a5b      	ldr	r2, [pc, #364]	; (80010fc <checkBrickHit+0x850>)
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2304      	movs	r3, #4
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	f003 ff7e 	bl	8004e9c <Displ_FillArea>
            bricksHit++;
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	71fb      	strb	r3, [r7, #7]
            ball.dir = SE;
 8000fa6:	4b52      	ldr	r3, [pc, #328]	; (80010f0 <checkBrickHit+0x844>)
 8000fa8:	2203      	movs	r2, #3
 8000faa:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 8000fac:	4b50      	ldr	r3, [pc, #320]	; (80010f0 <checkBrickHit+0x844>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f1a3 0208 	sub.w	r2, r3, #8
 8000fb4:	4b4e      	ldr	r3, [pc, #312]	; (80010f0 <checkBrickHit+0x844>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	da00      	bge.n	8000fc0 <checkBrickHit+0x714>
 8000fbe:	3307      	adds	r3, #7
 8000fc0:	10db      	asrs	r3, r3, #3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	494b      	ldr	r1, [pc, #300]	; (80010f4 <checkBrickHit+0x848>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4403      	add	r3, r0
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3308      	adds	r3, #8
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	f040 80d0 	bne.w	800117e <checkBrickHit+0x8d2>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 8000fde:	4b44      	ldr	r3, [pc, #272]	; (80010f0 <checkBrickHit+0x844>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f1a3 0208 	sub.w	r2, r3, #8
 8000fe6:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <checkBrickHit+0x844>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da00      	bge.n	8000ff2 <checkBrickHit+0x746>
 8000ff0:	3307      	adds	r3, #7
 8000ff2:	10db      	asrs	r3, r3, #3
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	483f      	ldr	r0, [pc, #252]	; (80010f4 <checkBrickHit+0x848>)
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	440b      	add	r3, r1
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	4403      	add	r3, r0
 8001006:	330c      	adds	r3, #12
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	1e58      	subs	r0, r3, #1
 800100c:	4c39      	ldr	r4, [pc, #228]	; (80010f4 <checkBrickHit+0x848>)
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	440b      	add	r3, r1
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	4423      	add	r3, r4
 800101c:	330c      	adds	r3, #12
 800101e:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 8001020:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <checkBrickHit+0x844>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f1a3 0208 	sub.w	r2, r3, #8
 8001028:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <checkBrickHit+0x844>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	da00      	bge.n	8001034 <checkBrickHit+0x788>
 8001032:	3307      	adds	r3, #7
 8001034:	10db      	asrs	r3, r3, #3
 8001036:	4618      	mov	r0, r3
 8001038:	492e      	ldr	r1, [pc, #184]	; (80010f4 <checkBrickHit+0x848>)
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4403      	add	r3, r0
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	440b      	add	r3, r1
 8001048:	330c      	adds	r3, #12
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	dc2b      	bgt.n	80010a8 <checkBrickHit+0x7fc>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <checkBrickHit+0x844>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f1a3 0208 	sub.w	r2, r3, #8
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <checkBrickHit+0x844>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	da00      	bge.n	8001064 <checkBrickHit+0x7b8>
 8001062:	3307      	adds	r3, #7
 8001064:	10db      	asrs	r3, r3, #3
 8001066:	4618      	mov	r0, r3
 8001068:	4922      	ldr	r1, [pc, #136]	; (80010f4 <checkBrickHit+0x848>)
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4403      	add	r3, r0
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	440b      	add	r3, r1
 8001078:	3308      	adds	r3, #8
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
                points++;
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <checkBrickHit+0x84c>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <checkBrickHit+0x84c>)
 8001088:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <checkBrickHit+0x844>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	da00      	bge.n	8001096 <checkBrickHit+0x7ea>
 8001094:	3307      	adds	r3, #7
 8001096:	10db      	asrs	r3, r3, #3
 8001098:	461a      	mov	r2, r3
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <checkBrickHit+0x844>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	3b08      	subs	r3, #8
 80010a0:	4619      	mov	r1, r3
 80010a2:	4610      	mov	r0, r2
 80010a4:	f000 fe68 	bl	8001d78 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <checkBrickHit+0x844>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f1a3 0208 	sub.w	r2, r3, #8
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <checkBrickHit+0x844>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	da00      	bge.n	80010bc <checkBrickHit+0x810>
 80010ba:	3307      	adds	r3, #7
 80010bc:	10db      	asrs	r3, r3, #3
 80010be:	4618      	mov	r0, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <checkBrickHit+0x848>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4403      	add	r3, r0
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	440b      	add	r3, r1
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	b298      	uxth	r0, r3
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <checkBrickHit+0x844>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f1a3 0208 	sub.w	r2, r3, #8
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <checkBrickHit+0x844>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	da0a      	bge.n	8001100 <checkBrickHit+0x854>
 80010ea:	3307      	adds	r3, #7
 80010ec:	e008      	b.n	8001100 <checkBrickHit+0x854>
 80010ee:	bf00      	nop
 80010f0:	20000034 	.word	0x20000034
 80010f4:	200000e8 	.word	0x200000e8
 80010f8:	20001ee8 	.word	0x20001ee8
 80010fc:	20000004 	.word	0x20000004
 8001100:	10db      	asrs	r3, r3, #3
 8001102:	461c      	mov	r4, r3
 8001104:	4989      	ldr	r1, [pc, #548]	; (800132c <checkBrickHit+0xa80>)
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4423      	add	r3, r4
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	440b      	add	r3, r1
 8001114:	3304      	adds	r3, #4
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	b29b      	uxth	r3, r3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	b299      	uxth	r1, r3
 800111e:	4b84      	ldr	r3, [pc, #528]	; (8001330 <checkBrickHit+0xa84>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f1a3 0208 	sub.w	r2, r3, #8
 8001126:	4b82      	ldr	r3, [pc, #520]	; (8001330 <checkBrickHit+0xa84>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	2b00      	cmp	r3, #0
 800112e:	da00      	bge.n	8001132 <checkBrickHit+0x886>
 8001130:	3307      	adds	r3, #7
 8001132:	10db      	asrs	r3, r3, #3
 8001134:	461d      	mov	r5, r3
 8001136:	4c7d      	ldr	r4, [pc, #500]	; (800132c <checkBrickHit+0xa80>)
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	442b      	add	r3, r5
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	4423      	add	r3, r4
 8001146:	330c      	adds	r3, #12
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a7a      	ldr	r2, [pc, #488]	; (8001334 <checkBrickHit+0xa88>)
 800114c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001150:	b29b      	uxth	r3, r3
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2304      	movs	r3, #4
 8001156:	2220      	movs	r2, #32
 8001158:	f003 fea0 	bl	8004e9c <Displ_FillArea>
            bricksHit++;
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	3301      	adds	r3, #1
 8001160:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NE) {
 8001162:	4b73      	ldr	r3, [pc, #460]	; (8001330 <checkBrickHit+0xa84>)
 8001164:	7a1b      	ldrb	r3, [r3, #8]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d102      	bne.n	8001170 <checkBrickHit+0x8c4>
                ball.dir = NW;
 800116a:	4b71      	ldr	r3, [pc, #452]	; (8001330 <checkBrickHit+0xa84>)
 800116c:	2207      	movs	r2, #7
 800116e:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SE) {
 8001170:	4b6f      	ldr	r3, [pc, #444]	; (8001330 <checkBrickHit+0xa84>)
 8001172:	7a1b      	ldrb	r3, [r3, #8]
 8001174:	2b03      	cmp	r3, #3
 8001176:	d102      	bne.n	800117e <checkBrickHit+0x8d2>
                ball.dir = SW;
 8001178:	4b6d      	ldr	r3, [pc, #436]	; (8001330 <checkBrickHit+0xa84>)
 800117a:	2205      	movs	r2, #5
 800117c:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	f040 85e7 	bne.w	8001d54 <checkBrickHit+0x14a8>
            if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible == 1) {
 8001186:	4b6a      	ldr	r3, [pc, #424]	; (8001330 <checkBrickHit+0xa84>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f1a3 0209 	sub.w	r2, r3, #9
 800118e:	4b68      	ldr	r3, [pc, #416]	; (8001330 <checkBrickHit+0xa84>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	da00      	bge.n	800119a <checkBrickHit+0x8ee>
 8001198:	3307      	adds	r3, #7
 800119a:	10db      	asrs	r3, r3, #3
 800119c:	4618      	mov	r0, r3
 800119e:	4963      	ldr	r1, [pc, #396]	; (800132c <checkBrickHit+0xa80>)
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4403      	add	r3, r0
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	440b      	add	r3, r1
 80011ae:	3308      	adds	r3, #8
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	f040 85ce 	bne.w	8001d54 <checkBrickHit+0x14a8>
                bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness--;
 80011b8:	4b5d      	ldr	r3, [pc, #372]	; (8001330 <checkBrickHit+0xa84>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f1a3 0209 	sub.w	r2, r3, #9
 80011c0:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <checkBrickHit+0xa84>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da00      	bge.n	80011cc <checkBrickHit+0x920>
 80011ca:	3307      	adds	r3, #7
 80011cc:	10db      	asrs	r3, r3, #3
 80011ce:	4619      	mov	r1, r3
 80011d0:	4856      	ldr	r0, [pc, #344]	; (800132c <checkBrickHit+0xa80>)
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	440b      	add	r3, r1
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	4403      	add	r3, r0
 80011e0:	330c      	adds	r3, #12
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	1e58      	subs	r0, r3, #1
 80011e6:	4c51      	ldr	r4, [pc, #324]	; (800132c <checkBrickHit+0xa80>)
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	440b      	add	r3, r1
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	4423      	add	r3, r4
 80011f6:	330c      	adds	r3, #12
 80011f8:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness <= 0) {
 80011fa:	4b4d      	ldr	r3, [pc, #308]	; (8001330 <checkBrickHit+0xa84>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f1a3 0209 	sub.w	r2, r3, #9
 8001202:	4b4b      	ldr	r3, [pc, #300]	; (8001330 <checkBrickHit+0xa84>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	da00      	bge.n	800120e <checkBrickHit+0x962>
 800120c:	3307      	adds	r3, #7
 800120e:	10db      	asrs	r3, r3, #3
 8001210:	4618      	mov	r0, r3
 8001212:	4946      	ldr	r1, [pc, #280]	; (800132c <checkBrickHit+0xa80>)
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4403      	add	r3, r0
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	440b      	add	r3, r1
 8001222:	330c      	adds	r3, #12
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	dc2b      	bgt.n	8001282 <checkBrickHit+0x9d6>
                    bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible = 0;
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <checkBrickHit+0xa84>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f1a3 0209 	sub.w	r2, r3, #9
 8001232:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <checkBrickHit+0xa84>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	da00      	bge.n	800123e <checkBrickHit+0x992>
 800123c:	3307      	adds	r3, #7
 800123e:	10db      	asrs	r3, r3, #3
 8001240:	4618      	mov	r0, r3
 8001242:	493a      	ldr	r1, [pc, #232]	; (800132c <checkBrickHit+0xa80>)
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4403      	add	r3, r0
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	440b      	add	r3, r1
 8001252:	3308      	adds	r3, #8
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
                    points++;
 8001258:	4b37      	ldr	r3, [pc, #220]	; (8001338 <checkBrickHit+0xa8c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b35      	ldr	r3, [pc, #212]	; (8001338 <checkBrickHit+0xa8c>)
 8001262:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x + 1)/8, ball.y - 1 - 8);
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <checkBrickHit+0xa84>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	da00      	bge.n	8001270 <checkBrickHit+0x9c4>
 800126e:	3307      	adds	r3, #7
 8001270:	10db      	asrs	r3, r3, #3
 8001272:	461a      	mov	r2, r3
 8001274:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <checkBrickHit+0xa84>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	3b09      	subs	r3, #9
 800127a:	4619      	mov	r1, r3
 800127c:	4610      	mov	r0, r2
 800127e:	f000 fd7b 	bl	8001d78 <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness]);
 8001282:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <checkBrickHit+0xa84>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f1a3 0209 	sub.w	r2, r3, #9
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <checkBrickHit+0xa84>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	da00      	bge.n	8001296 <checkBrickHit+0x9ea>
 8001294:	3307      	adds	r3, #7
 8001296:	10db      	asrs	r3, r3, #3
 8001298:	4618      	mov	r0, r3
 800129a:	4924      	ldr	r1, [pc, #144]	; (800132c <checkBrickHit+0xa80>)
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4403      	add	r3, r0
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	440b      	add	r3, r1
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	b298      	uxth	r0, r3
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <checkBrickHit+0xa84>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f1a3 0209 	sub.w	r2, r3, #9
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <checkBrickHit+0xa84>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	da00      	bge.n	80012c6 <checkBrickHit+0xa1a>
 80012c4:	3307      	adds	r3, #7
 80012c6:	10db      	asrs	r3, r3, #3
 80012c8:	461c      	mov	r4, r3
 80012ca:	4918      	ldr	r1, [pc, #96]	; (800132c <checkBrickHit+0xa80>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4423      	add	r3, r4
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	440b      	add	r3, r1
 80012da:	3304      	adds	r3, #4
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	b299      	uxth	r1, r3
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <checkBrickHit+0xa84>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f1a3 0209 	sub.w	r2, r3, #9
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <checkBrickHit+0xa84>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da00      	bge.n	80012f8 <checkBrickHit+0xa4c>
 80012f6:	3307      	adds	r3, #7
 80012f8:	10db      	asrs	r3, r3, #3
 80012fa:	461d      	mov	r5, r3
 80012fc:	4c0b      	ldr	r4, [pc, #44]	; (800132c <checkBrickHit+0xa80>)
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	442b      	add	r3, r5
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4423      	add	r3, r4
 800130c:	330c      	adds	r3, #12
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a08      	ldr	r2, [pc, #32]	; (8001334 <checkBrickHit+0xa88>)
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	b29b      	uxth	r3, r3
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2304      	movs	r3, #4
 800131c:	2220      	movs	r2, #32
 800131e:	f003 fdbd 	bl	8004e9c <Displ_FillArea>
                ball.dir = SW;
 8001322:	4b03      	ldr	r3, [pc, #12]	; (8001330 <checkBrickHit+0xa84>)
 8001324:	2205      	movs	r2, #5
 8001326:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8001328:	f000 bd14 	b.w	8001d54 <checkBrickHit+0x14a8>
 800132c:	200000e8 	.word	0x200000e8
 8001330:	20000034 	.word	0x20000034
 8001334:	20000004 	.word	0x20000004
 8001338:	20001ee8 	.word	0x20001ee8
    case SE:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 800133c:	4bb6      	ldr	r3, [pc, #728]	; (8001618 <checkBrickHit+0xd6c>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	1fda      	subs	r2, r3, #7
 8001342:	4bb5      	ldr	r3, [pc, #724]	; (8001618 <checkBrickHit+0xd6c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	da00      	bge.n	800134c <checkBrickHit+0xaa0>
 800134a:	3307      	adds	r3, #7
 800134c:	10db      	asrs	r3, r3, #3
 800134e:	4618      	mov	r0, r3
 8001350:	49b2      	ldr	r1, [pc, #712]	; (800161c <checkBrickHit+0xd70>)
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4403      	add	r3, r0
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	440b      	add	r3, r1
 8001360:	3308      	adds	r3, #8
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	f040 80ae 	bne.w	80014c6 <checkBrickHit+0xc1a>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 800136a:	4bab      	ldr	r3, [pc, #684]	; (8001618 <checkBrickHit+0xd6c>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	1fda      	subs	r2, r3, #7
 8001370:	4ba9      	ldr	r3, [pc, #676]	; (8001618 <checkBrickHit+0xd6c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	da00      	bge.n	800137a <checkBrickHit+0xace>
 8001378:	3307      	adds	r3, #7
 800137a:	10db      	asrs	r3, r3, #3
 800137c:	4619      	mov	r1, r3
 800137e:	48a7      	ldr	r0, [pc, #668]	; (800161c <checkBrickHit+0xd70>)
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	440b      	add	r3, r1
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	4403      	add	r3, r0
 800138e:	330c      	adds	r3, #12
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	1e58      	subs	r0, r3, #1
 8001394:	4ca1      	ldr	r4, [pc, #644]	; (800161c <checkBrickHit+0xd70>)
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	440b      	add	r3, r1
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	4423      	add	r3, r4
 80013a4:	330c      	adds	r3, #12
 80013a6:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 80013a8:	4b9b      	ldr	r3, [pc, #620]	; (8001618 <checkBrickHit+0xd6c>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	1fda      	subs	r2, r3, #7
 80013ae:	4b9a      	ldr	r3, [pc, #616]	; (8001618 <checkBrickHit+0xd6c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	da00      	bge.n	80013b8 <checkBrickHit+0xb0c>
 80013b6:	3307      	adds	r3, #7
 80013b8:	10db      	asrs	r3, r3, #3
 80013ba:	4618      	mov	r0, r3
 80013bc:	4997      	ldr	r1, [pc, #604]	; (800161c <checkBrickHit+0xd70>)
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4403      	add	r3, r0
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	440b      	add	r3, r1
 80013cc:	330c      	adds	r3, #12
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	dc28      	bgt.n	8001426 <checkBrickHit+0xb7a>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 80013d4:	4b90      	ldr	r3, [pc, #576]	; (8001618 <checkBrickHit+0xd6c>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	1fda      	subs	r2, r3, #7
 80013da:	4b8f      	ldr	r3, [pc, #572]	; (8001618 <checkBrickHit+0xd6c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da00      	bge.n	80013e4 <checkBrickHit+0xb38>
 80013e2:	3307      	adds	r3, #7
 80013e4:	10db      	asrs	r3, r3, #3
 80013e6:	4618      	mov	r0, r3
 80013e8:	498c      	ldr	r1, [pc, #560]	; (800161c <checkBrickHit+0xd70>)
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4403      	add	r3, r0
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	440b      	add	r3, r1
 80013f8:	3308      	adds	r3, #8
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
                points++;
 80013fe:	4b88      	ldr	r3, [pc, #544]	; (8001620 <checkBrickHit+0xd74>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b86      	ldr	r3, [pc, #536]	; (8001620 <checkBrickHit+0xd74>)
 8001408:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 800140a:	4b83      	ldr	r3, [pc, #524]	; (8001618 <checkBrickHit+0xd6c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	da00      	bge.n	8001414 <checkBrickHit+0xb68>
 8001412:	3307      	adds	r3, #7
 8001414:	10db      	asrs	r3, r3, #3
 8001416:	461a      	mov	r2, r3
 8001418:	4b7f      	ldr	r3, [pc, #508]	; (8001618 <checkBrickHit+0xd6c>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	3b07      	subs	r3, #7
 800141e:	4619      	mov	r1, r3
 8001420:	4610      	mov	r0, r2
 8001422:	f000 fca9 	bl	8001d78 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 8001426:	4b7c      	ldr	r3, [pc, #496]	; (8001618 <checkBrickHit+0xd6c>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	1fda      	subs	r2, r3, #7
 800142c:	4b7a      	ldr	r3, [pc, #488]	; (8001618 <checkBrickHit+0xd6c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	da00      	bge.n	8001436 <checkBrickHit+0xb8a>
 8001434:	3307      	adds	r3, #7
 8001436:	10db      	asrs	r3, r3, #3
 8001438:	4618      	mov	r0, r3
 800143a:	4978      	ldr	r1, [pc, #480]	; (800161c <checkBrickHit+0xd70>)
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4403      	add	r3, r0
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	440b      	add	r3, r1
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	b298      	uxth	r0, r3
 8001452:	4b71      	ldr	r3, [pc, #452]	; (8001618 <checkBrickHit+0xd6c>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	1fda      	subs	r2, r3, #7
 8001458:	4b6f      	ldr	r3, [pc, #444]	; (8001618 <checkBrickHit+0xd6c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	da00      	bge.n	8001462 <checkBrickHit+0xbb6>
 8001460:	3307      	adds	r3, #7
 8001462:	10db      	asrs	r3, r3, #3
 8001464:	461c      	mov	r4, r3
 8001466:	496d      	ldr	r1, [pc, #436]	; (800161c <checkBrickHit+0xd70>)
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4423      	add	r3, r4
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	440b      	add	r3, r1
 8001476:	3304      	adds	r3, #4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	b299      	uxth	r1, r3
 8001480:	4b65      	ldr	r3, [pc, #404]	; (8001618 <checkBrickHit+0xd6c>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	1fda      	subs	r2, r3, #7
 8001486:	4b64      	ldr	r3, [pc, #400]	; (8001618 <checkBrickHit+0xd6c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	da00      	bge.n	8001490 <checkBrickHit+0xbe4>
 800148e:	3307      	adds	r3, #7
 8001490:	10db      	asrs	r3, r3, #3
 8001492:	461d      	mov	r5, r3
 8001494:	4c61      	ldr	r4, [pc, #388]	; (800161c <checkBrickHit+0xd70>)
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	442b      	add	r3, r5
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4423      	add	r3, r4
 80014a4:	330c      	adds	r3, #12
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a5e      	ldr	r2, [pc, #376]	; (8001624 <checkBrickHit+0xd78>)
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2304      	movs	r3, #4
 80014b4:	2220      	movs	r2, #32
 80014b6:	f003 fcf1 	bl	8004e9c <Displ_FillArea>
            bricksHit++;
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	3301      	adds	r3, #1
 80014be:	71fb      	strb	r3, [r7, #7]
            ball.dir = NE;
 80014c0:	4b55      	ldr	r3, [pc, #340]	; (8001618 <checkBrickHit+0xd6c>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 80014c6:	4b54      	ldr	r3, [pc, #336]	; (8001618 <checkBrickHit+0xd6c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f1a3 0208 	sub.w	r2, r3, #8
 80014ce:	4b52      	ldr	r3, [pc, #328]	; (8001618 <checkBrickHit+0xd6c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	da00      	bge.n	80014da <checkBrickHit+0xc2e>
 80014d8:	3307      	adds	r3, #7
 80014da:	10db      	asrs	r3, r3, #3
 80014dc:	4618      	mov	r0, r3
 80014de:	494f      	ldr	r1, [pc, #316]	; (800161c <checkBrickHit+0xd70>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4403      	add	r3, r0
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	440b      	add	r3, r1
 80014ee:	3308      	adds	r3, #8
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	f040 80d0 	bne.w	8001698 <checkBrickHit+0xdec>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 80014f8:	4b47      	ldr	r3, [pc, #284]	; (8001618 <checkBrickHit+0xd6c>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f1a3 0208 	sub.w	r2, r3, #8
 8001500:	4b45      	ldr	r3, [pc, #276]	; (8001618 <checkBrickHit+0xd6c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	da00      	bge.n	800150c <checkBrickHit+0xc60>
 800150a:	3307      	adds	r3, #7
 800150c:	10db      	asrs	r3, r3, #3
 800150e:	4619      	mov	r1, r3
 8001510:	4842      	ldr	r0, [pc, #264]	; (800161c <checkBrickHit+0xd70>)
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	440b      	add	r3, r1
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	4403      	add	r3, r0
 8001520:	330c      	adds	r3, #12
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	1e58      	subs	r0, r3, #1
 8001526:	4c3d      	ldr	r4, [pc, #244]	; (800161c <checkBrickHit+0xd70>)
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	440b      	add	r3, r1
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	4423      	add	r3, r4
 8001536:	330c      	adds	r3, #12
 8001538:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 800153a:	4b37      	ldr	r3, [pc, #220]	; (8001618 <checkBrickHit+0xd6c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f1a3 0208 	sub.w	r2, r3, #8
 8001542:	4b35      	ldr	r3, [pc, #212]	; (8001618 <checkBrickHit+0xd6c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	da00      	bge.n	800154e <checkBrickHit+0xca2>
 800154c:	3307      	adds	r3, #7
 800154e:	10db      	asrs	r3, r3, #3
 8001550:	4618      	mov	r0, r3
 8001552:	4932      	ldr	r1, [pc, #200]	; (800161c <checkBrickHit+0xd70>)
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4403      	add	r3, r0
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	440b      	add	r3, r1
 8001562:	330c      	adds	r3, #12
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	dc2b      	bgt.n	80015c2 <checkBrickHit+0xd16>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 800156a:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <checkBrickHit+0xd6c>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f1a3 0208 	sub.w	r2, r3, #8
 8001572:	4b29      	ldr	r3, [pc, #164]	; (8001618 <checkBrickHit+0xd6c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	da00      	bge.n	800157e <checkBrickHit+0xcd2>
 800157c:	3307      	adds	r3, #7
 800157e:	10db      	asrs	r3, r3, #3
 8001580:	4618      	mov	r0, r3
 8001582:	4926      	ldr	r1, [pc, #152]	; (800161c <checkBrickHit+0xd70>)
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4403      	add	r3, r0
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	440b      	add	r3, r1
 8001592:	3308      	adds	r3, #8
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
                points++;
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <checkBrickHit+0xd74>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <checkBrickHit+0xd74>)
 80015a2:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 80015a4:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <checkBrickHit+0xd6c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	da00      	bge.n	80015b0 <checkBrickHit+0xd04>
 80015ae:	3307      	adds	r3, #7
 80015b0:	10db      	asrs	r3, r3, #3
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <checkBrickHit+0xd6c>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	3b08      	subs	r3, #8
 80015ba:	4619      	mov	r1, r3
 80015bc:	4610      	mov	r0, r2
 80015be:	f000 fbdb 	bl	8001d78 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <checkBrickHit+0xd6c>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f1a3 0208 	sub.w	r2, r3, #8
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <checkBrickHit+0xd6c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	da00      	bge.n	80015d6 <checkBrickHit+0xd2a>
 80015d4:	3307      	adds	r3, #7
 80015d6:	10db      	asrs	r3, r3, #3
 80015d8:	4618      	mov	r0, r3
 80015da:	4910      	ldr	r1, [pc, #64]	; (800161c <checkBrickHit+0xd70>)
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4403      	add	r3, r0
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	440b      	add	r3, r1
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	b298      	uxth	r0, r3
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <checkBrickHit+0xd6c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f1a3 0208 	sub.w	r2, r3, #8
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <checkBrickHit+0xd6c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	da00      	bge.n	8001606 <checkBrickHit+0xd5a>
 8001604:	3307      	adds	r3, #7
 8001606:	10db      	asrs	r3, r3, #3
 8001608:	461c      	mov	r4, r3
 800160a:	4904      	ldr	r1, [pc, #16]	; (800161c <checkBrickHit+0xd70>)
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	e008      	b.n	8001628 <checkBrickHit+0xd7c>
 8001616:	bf00      	nop
 8001618:	20000034 	.word	0x20000034
 800161c:	200000e8 	.word	0x200000e8
 8001620:	20001ee8 	.word	0x20001ee8
 8001624:	20000004 	.word	0x20000004
 8001628:	4423      	add	r3, r4
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	440b      	add	r3, r1
 800162e:	3304      	adds	r3, #4
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	b299      	uxth	r1, r3
 8001638:	4b7f      	ldr	r3, [pc, #508]	; (8001838 <checkBrickHit+0xf8c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f1a3 0208 	sub.w	r2, r3, #8
 8001640:	4b7d      	ldr	r3, [pc, #500]	; (8001838 <checkBrickHit+0xf8c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	da00      	bge.n	800164c <checkBrickHit+0xda0>
 800164a:	3307      	adds	r3, #7
 800164c:	10db      	asrs	r3, r3, #3
 800164e:	461d      	mov	r5, r3
 8001650:	4c7a      	ldr	r4, [pc, #488]	; (800183c <checkBrickHit+0xf90>)
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	442b      	add	r3, r5
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	4423      	add	r3, r4
 8001660:	330c      	adds	r3, #12
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a76      	ldr	r2, [pc, #472]	; (8001840 <checkBrickHit+0xf94>)
 8001666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166a:	b29b      	uxth	r3, r3
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2304      	movs	r3, #4
 8001670:	2220      	movs	r2, #32
 8001672:	f003 fc13 	bl	8004e9c <Displ_FillArea>
            bricksHit++;
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	3301      	adds	r3, #1
 800167a:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SE) {
 800167c:	4b6e      	ldr	r3, [pc, #440]	; (8001838 <checkBrickHit+0xf8c>)
 800167e:	7a1b      	ldrb	r3, [r3, #8]
 8001680:	2b03      	cmp	r3, #3
 8001682:	d102      	bne.n	800168a <checkBrickHit+0xdde>
                ball.dir = SW;
 8001684:	4b6c      	ldr	r3, [pc, #432]	; (8001838 <checkBrickHit+0xf8c>)
 8001686:	2205      	movs	r2, #5
 8001688:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NE) {
 800168a:	4b6b      	ldr	r3, [pc, #428]	; (8001838 <checkBrickHit+0xf8c>)
 800168c:	7a1b      	ldrb	r3, [r3, #8]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d102      	bne.n	8001698 <checkBrickHit+0xdec>
                ball.dir = NW;
 8001692:	4b69      	ldr	r3, [pc, #420]	; (8001838 <checkBrickHit+0xf8c>)
 8001694:	2207      	movs	r2, #7
 8001696:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f040 835c 	bne.w	8001d58 <checkBrickHit+0x14ac>
            if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible == 1) {
 80016a0:	4b65      	ldr	r3, [pc, #404]	; (8001838 <checkBrickHit+0xf8c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	1fda      	subs	r2, r3, #7
 80016a6:	4b64      	ldr	r3, [pc, #400]	; (8001838 <checkBrickHit+0xf8c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	da00      	bge.n	80016b2 <checkBrickHit+0xe06>
 80016b0:	3307      	adds	r3, #7
 80016b2:	10db      	asrs	r3, r3, #3
 80016b4:	4618      	mov	r0, r3
 80016b6:	4961      	ldr	r1, [pc, #388]	; (800183c <checkBrickHit+0xf90>)
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4403      	add	r3, r0
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	440b      	add	r3, r1
 80016c6:	3308      	adds	r3, #8
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	f040 8344 	bne.w	8001d58 <checkBrickHit+0x14ac>
                bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness--;
 80016d0:	4b59      	ldr	r3, [pc, #356]	; (8001838 <checkBrickHit+0xf8c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	1fda      	subs	r2, r3, #7
 80016d6:	4b58      	ldr	r3, [pc, #352]	; (8001838 <checkBrickHit+0xf8c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	da00      	bge.n	80016e2 <checkBrickHit+0xe36>
 80016e0:	3307      	adds	r3, #7
 80016e2:	10db      	asrs	r3, r3, #3
 80016e4:	4619      	mov	r1, r3
 80016e6:	4855      	ldr	r0, [pc, #340]	; (800183c <checkBrickHit+0xf90>)
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	440b      	add	r3, r1
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	4403      	add	r3, r0
 80016f6:	330c      	adds	r3, #12
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	1e58      	subs	r0, r3, #1
 80016fc:	4c4f      	ldr	r4, [pc, #316]	; (800183c <checkBrickHit+0xf90>)
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	440b      	add	r3, r1
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	4423      	add	r3, r4
 800170c:	330c      	adds	r3, #12
 800170e:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness <= 0) {
 8001710:	4b49      	ldr	r3, [pc, #292]	; (8001838 <checkBrickHit+0xf8c>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	1fda      	subs	r2, r3, #7
 8001716:	4b48      	ldr	r3, [pc, #288]	; (8001838 <checkBrickHit+0xf8c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	da00      	bge.n	8001722 <checkBrickHit+0xe76>
 8001720:	3307      	adds	r3, #7
 8001722:	10db      	asrs	r3, r3, #3
 8001724:	4618      	mov	r0, r3
 8001726:	4945      	ldr	r1, [pc, #276]	; (800183c <checkBrickHit+0xf90>)
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4403      	add	r3, r0
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	440b      	add	r3, r1
 8001736:	330c      	adds	r3, #12
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	dc2a      	bgt.n	8001794 <checkBrickHit+0xee8>
                    bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible = 0;
 800173e:	4b3e      	ldr	r3, [pc, #248]	; (8001838 <checkBrickHit+0xf8c>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	1fda      	subs	r2, r3, #7
 8001744:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <checkBrickHit+0xf8c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	da00      	bge.n	8001750 <checkBrickHit+0xea4>
 800174e:	3307      	adds	r3, #7
 8001750:	10db      	asrs	r3, r3, #3
 8001752:	4618      	mov	r0, r3
 8001754:	4939      	ldr	r1, [pc, #228]	; (800183c <checkBrickHit+0xf90>)
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4403      	add	r3, r0
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	440b      	add	r3, r1
 8001764:	3308      	adds	r3, #8
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
                    points++;
 800176a:	4b36      	ldr	r3, [pc, #216]	; (8001844 <checkBrickHit+0xf98>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4b34      	ldr	r3, [pc, #208]	; (8001844 <checkBrickHit+0xf98>)
 8001774:	701a      	strb	r2, [r3, #0]

                    dropPowerUp((ball.x + 1)/8, ball.y - 8 + 1);
 8001776:	4b30      	ldr	r3, [pc, #192]	; (8001838 <checkBrickHit+0xf8c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	da00      	bge.n	8001782 <checkBrickHit+0xed6>
 8001780:	3307      	adds	r3, #7
 8001782:	10db      	asrs	r3, r3, #3
 8001784:	461a      	mov	r2, r3
 8001786:	4b2c      	ldr	r3, [pc, #176]	; (8001838 <checkBrickHit+0xf8c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	3b07      	subs	r3, #7
 800178c:	4619      	mov	r1, r3
 800178e:	4610      	mov	r0, r2
 8001790:	f000 faf2 	bl	8001d78 <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 8 + 1][(ball.x + 1)/8].x*4, bricks[ball.y - 8 + 1][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness]);
 8001794:	4b28      	ldr	r3, [pc, #160]	; (8001838 <checkBrickHit+0xf8c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	1fda      	subs	r2, r3, #7
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <checkBrickHit+0xf8c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	da00      	bge.n	80017a6 <checkBrickHit+0xefa>
 80017a4:	3307      	adds	r3, #7
 80017a6:	10db      	asrs	r3, r3, #3
 80017a8:	4618      	mov	r0, r3
 80017aa:	4924      	ldr	r1, [pc, #144]	; (800183c <checkBrickHit+0xf90>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4403      	add	r3, r0
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	440b      	add	r3, r1
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	b298      	uxth	r0, r3
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <checkBrickHit+0xf8c>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	1fda      	subs	r2, r3, #7
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <checkBrickHit+0xf8c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da00      	bge.n	80017d4 <checkBrickHit+0xf28>
 80017d2:	3307      	adds	r3, #7
 80017d4:	10db      	asrs	r3, r3, #3
 80017d6:	461c      	mov	r4, r3
 80017d8:	4918      	ldr	r1, [pc, #96]	; (800183c <checkBrickHit+0xf90>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4423      	add	r3, r4
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	440b      	add	r3, r1
 80017e8:	3304      	adds	r3, #4
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	b299      	uxth	r1, r3
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <checkBrickHit+0xf8c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	1fda      	subs	r2, r3, #7
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <checkBrickHit+0xf8c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da00      	bge.n	8001804 <checkBrickHit+0xf58>
 8001802:	3307      	adds	r3, #7
 8001804:	10db      	asrs	r3, r3, #3
 8001806:	461d      	mov	r5, r3
 8001808:	4c0c      	ldr	r4, [pc, #48]	; (800183c <checkBrickHit+0xf90>)
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	442b      	add	r3, r5
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	4423      	add	r3, r4
 8001818:	330c      	adds	r3, #12
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a08      	ldr	r2, [pc, #32]	; (8001840 <checkBrickHit+0xf94>)
 800181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001822:	b29b      	uxth	r3, r3
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2304      	movs	r3, #4
 8001828:	2220      	movs	r2, #32
 800182a:	f003 fb37 	bl	8004e9c <Displ_FillArea>
                ball.dir = NW;
 800182e:	4b02      	ldr	r3, [pc, #8]	; (8001838 <checkBrickHit+0xf8c>)
 8001830:	2207      	movs	r2, #7
 8001832:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8001834:	e290      	b.n	8001d58 <checkBrickHit+0x14ac>
 8001836:	bf00      	nop
 8001838:	20000034 	.word	0x20000034
 800183c:	200000e8 	.word	0x200000e8
 8001840:	20000004 	.word	0x20000004
 8001844:	20001ee8 	.word	0x20001ee8
    case SW:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 8001848:	4bb6      	ldr	r3, [pc, #728]	; (8001b24 <checkBrickHit+0x1278>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	1fda      	subs	r2, r3, #7
 800184e:	4bb5      	ldr	r3, [pc, #724]	; (8001b24 <checkBrickHit+0x1278>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	da00      	bge.n	8001858 <checkBrickHit+0xfac>
 8001856:	3307      	adds	r3, #7
 8001858:	10db      	asrs	r3, r3, #3
 800185a:	4618      	mov	r0, r3
 800185c:	49b2      	ldr	r1, [pc, #712]	; (8001b28 <checkBrickHit+0x127c>)
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4403      	add	r3, r0
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	440b      	add	r3, r1
 800186c:	3308      	adds	r3, #8
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	f040 80ae 	bne.w	80019d2 <checkBrickHit+0x1126>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 8001876:	4bab      	ldr	r3, [pc, #684]	; (8001b24 <checkBrickHit+0x1278>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	1fda      	subs	r2, r3, #7
 800187c:	4ba9      	ldr	r3, [pc, #676]	; (8001b24 <checkBrickHit+0x1278>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	da00      	bge.n	8001886 <checkBrickHit+0xfda>
 8001884:	3307      	adds	r3, #7
 8001886:	10db      	asrs	r3, r3, #3
 8001888:	4619      	mov	r1, r3
 800188a:	48a7      	ldr	r0, [pc, #668]	; (8001b28 <checkBrickHit+0x127c>)
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	440b      	add	r3, r1
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	4403      	add	r3, r0
 800189a:	330c      	adds	r3, #12
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	1e58      	subs	r0, r3, #1
 80018a0:	4ca1      	ldr	r4, [pc, #644]	; (8001b28 <checkBrickHit+0x127c>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	440b      	add	r3, r1
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	4423      	add	r3, r4
 80018b0:	330c      	adds	r3, #12
 80018b2:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 80018b4:	4b9b      	ldr	r3, [pc, #620]	; (8001b24 <checkBrickHit+0x1278>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	1fda      	subs	r2, r3, #7
 80018ba:	4b9a      	ldr	r3, [pc, #616]	; (8001b24 <checkBrickHit+0x1278>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	da00      	bge.n	80018c4 <checkBrickHit+0x1018>
 80018c2:	3307      	adds	r3, #7
 80018c4:	10db      	asrs	r3, r3, #3
 80018c6:	4618      	mov	r0, r3
 80018c8:	4997      	ldr	r1, [pc, #604]	; (8001b28 <checkBrickHit+0x127c>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4403      	add	r3, r0
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	440b      	add	r3, r1
 80018d8:	330c      	adds	r3, #12
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	dc28      	bgt.n	8001932 <checkBrickHit+0x1086>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 80018e0:	4b90      	ldr	r3, [pc, #576]	; (8001b24 <checkBrickHit+0x1278>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	1fda      	subs	r2, r3, #7
 80018e6:	4b8f      	ldr	r3, [pc, #572]	; (8001b24 <checkBrickHit+0x1278>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	da00      	bge.n	80018f0 <checkBrickHit+0x1044>
 80018ee:	3307      	adds	r3, #7
 80018f0:	10db      	asrs	r3, r3, #3
 80018f2:	4618      	mov	r0, r3
 80018f4:	498c      	ldr	r1, [pc, #560]	; (8001b28 <checkBrickHit+0x127c>)
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4403      	add	r3, r0
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	440b      	add	r3, r1
 8001904:	3308      	adds	r3, #8
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
                points++;
 800190a:	4b88      	ldr	r3, [pc, #544]	; (8001b2c <checkBrickHit+0x1280>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	3301      	adds	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b86      	ldr	r3, [pc, #536]	; (8001b2c <checkBrickHit+0x1280>)
 8001914:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 8001916:	4b83      	ldr	r3, [pc, #524]	; (8001b24 <checkBrickHit+0x1278>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	da00      	bge.n	8001920 <checkBrickHit+0x1074>
 800191e:	3307      	adds	r3, #7
 8001920:	10db      	asrs	r3, r3, #3
 8001922:	461a      	mov	r2, r3
 8001924:	4b7f      	ldr	r3, [pc, #508]	; (8001b24 <checkBrickHit+0x1278>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	3b07      	subs	r3, #7
 800192a:	4619      	mov	r1, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f000 fa23 	bl	8001d78 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 8001932:	4b7c      	ldr	r3, [pc, #496]	; (8001b24 <checkBrickHit+0x1278>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	1fda      	subs	r2, r3, #7
 8001938:	4b7a      	ldr	r3, [pc, #488]	; (8001b24 <checkBrickHit+0x1278>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	da00      	bge.n	8001942 <checkBrickHit+0x1096>
 8001940:	3307      	adds	r3, #7
 8001942:	10db      	asrs	r3, r3, #3
 8001944:	4618      	mov	r0, r3
 8001946:	4978      	ldr	r1, [pc, #480]	; (8001b28 <checkBrickHit+0x127c>)
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4403      	add	r3, r0
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	440b      	add	r3, r1
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	b298      	uxth	r0, r3
 800195e:	4b71      	ldr	r3, [pc, #452]	; (8001b24 <checkBrickHit+0x1278>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	1fda      	subs	r2, r3, #7
 8001964:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <checkBrickHit+0x1278>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	da00      	bge.n	800196e <checkBrickHit+0x10c2>
 800196c:	3307      	adds	r3, #7
 800196e:	10db      	asrs	r3, r3, #3
 8001970:	461c      	mov	r4, r3
 8001972:	496d      	ldr	r1, [pc, #436]	; (8001b28 <checkBrickHit+0x127c>)
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4423      	add	r3, r4
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	440b      	add	r3, r1
 8001982:	3304      	adds	r3, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	b299      	uxth	r1, r3
 800198c:	4b65      	ldr	r3, [pc, #404]	; (8001b24 <checkBrickHit+0x1278>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	1fda      	subs	r2, r3, #7
 8001992:	4b64      	ldr	r3, [pc, #400]	; (8001b24 <checkBrickHit+0x1278>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	da00      	bge.n	800199c <checkBrickHit+0x10f0>
 800199a:	3307      	adds	r3, #7
 800199c:	10db      	asrs	r3, r3, #3
 800199e:	461d      	mov	r5, r3
 80019a0:	4c61      	ldr	r4, [pc, #388]	; (8001b28 <checkBrickHit+0x127c>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	442b      	add	r3, r5
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4423      	add	r3, r4
 80019b0:	330c      	adds	r3, #12
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a5e      	ldr	r2, [pc, #376]	; (8001b30 <checkBrickHit+0x1284>)
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2304      	movs	r3, #4
 80019c0:	2220      	movs	r2, #32
 80019c2:	f003 fa6b 	bl	8004e9c <Displ_FillArea>
            bricksHit++;
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	3301      	adds	r3, #1
 80019ca:	71fb      	strb	r3, [r7, #7]
            ball.dir = NW;
 80019cc:	4b55      	ldr	r3, [pc, #340]	; (8001b24 <checkBrickHit+0x1278>)
 80019ce:	2207      	movs	r2, #7
 80019d0:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 80019d2:	4b54      	ldr	r3, [pc, #336]	; (8001b24 <checkBrickHit+0x1278>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f1a3 0208 	sub.w	r2, r3, #8
 80019da:	4b52      	ldr	r3, [pc, #328]	; (8001b24 <checkBrickHit+0x1278>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	3b01      	subs	r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	da00      	bge.n	80019e6 <checkBrickHit+0x113a>
 80019e4:	3307      	adds	r3, #7
 80019e6:	10db      	asrs	r3, r3, #3
 80019e8:	4618      	mov	r0, r3
 80019ea:	494f      	ldr	r1, [pc, #316]	; (8001b28 <checkBrickHit+0x127c>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4403      	add	r3, r0
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	440b      	add	r3, r1
 80019fa:	3308      	adds	r3, #8
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	f040 80d0 	bne.w	8001ba4 <checkBrickHit+0x12f8>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8001a04:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <checkBrickHit+0x1278>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f1a3 0208 	sub.w	r2, r3, #8
 8001a0c:	4b45      	ldr	r3, [pc, #276]	; (8001b24 <checkBrickHit+0x1278>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	da00      	bge.n	8001a18 <checkBrickHit+0x116c>
 8001a16:	3307      	adds	r3, #7
 8001a18:	10db      	asrs	r3, r3, #3
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4842      	ldr	r0, [pc, #264]	; (8001b28 <checkBrickHit+0x127c>)
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	440b      	add	r3, r1
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	4403      	add	r3, r0
 8001a2c:	330c      	adds	r3, #12
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	1e58      	subs	r0, r3, #1
 8001a32:	4c3d      	ldr	r4, [pc, #244]	; (8001b28 <checkBrickHit+0x127c>)
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	440b      	add	r3, r1
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	4423      	add	r3, r4
 8001a42:	330c      	adds	r3, #12
 8001a44:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <checkBrickHit+0x1278>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f1a3 0208 	sub.w	r2, r3, #8
 8001a4e:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <checkBrickHit+0x1278>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	da00      	bge.n	8001a5a <checkBrickHit+0x11ae>
 8001a58:	3307      	adds	r3, #7
 8001a5a:	10db      	asrs	r3, r3, #3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	4932      	ldr	r1, [pc, #200]	; (8001b28 <checkBrickHit+0x127c>)
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4403      	add	r3, r0
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	440b      	add	r3, r1
 8001a6e:	330c      	adds	r3, #12
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	dc2b      	bgt.n	8001ace <checkBrickHit+0x1222>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8001a76:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <checkBrickHit+0x1278>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f1a3 0208 	sub.w	r2, r3, #8
 8001a7e:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <checkBrickHit+0x1278>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	da00      	bge.n	8001a8a <checkBrickHit+0x11de>
 8001a88:	3307      	adds	r3, #7
 8001a8a:	10db      	asrs	r3, r3, #3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	4926      	ldr	r1, [pc, #152]	; (8001b28 <checkBrickHit+0x127c>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4403      	add	r3, r0
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
                points++;
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <checkBrickHit+0x1280>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <checkBrickHit+0x1280>)
 8001aae:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <checkBrickHit+0x1278>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da00      	bge.n	8001abc <checkBrickHit+0x1210>
 8001aba:	3307      	adds	r3, #7
 8001abc:	10db      	asrs	r3, r3, #3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <checkBrickHit+0x1278>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	3b08      	subs	r3, #8
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4610      	mov	r0, r2
 8001aca:	f000 f955 	bl	8001d78 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <checkBrickHit+0x1278>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f1a3 0208 	sub.w	r2, r3, #8
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <checkBrickHit+0x1278>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	da00      	bge.n	8001ae2 <checkBrickHit+0x1236>
 8001ae0:	3307      	adds	r3, #7
 8001ae2:	10db      	asrs	r3, r3, #3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	4910      	ldr	r1, [pc, #64]	; (8001b28 <checkBrickHit+0x127c>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4403      	add	r3, r0
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	440b      	add	r3, r1
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	b298      	uxth	r0, r3
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <checkBrickHit+0x1278>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f1a3 0208 	sub.w	r2, r3, #8
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <checkBrickHit+0x1278>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	da00      	bge.n	8001b12 <checkBrickHit+0x1266>
 8001b10:	3307      	adds	r3, #7
 8001b12:	10db      	asrs	r3, r3, #3
 8001b14:	461c      	mov	r4, r3
 8001b16:	4904      	ldr	r1, [pc, #16]	; (8001b28 <checkBrickHit+0x127c>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	e008      	b.n	8001b34 <checkBrickHit+0x1288>
 8001b22:	bf00      	nop
 8001b24:	20000034 	.word	0x20000034
 8001b28:	200000e8 	.word	0x200000e8
 8001b2c:	20001ee8 	.word	0x20001ee8
 8001b30:	20000004 	.word	0x20000004
 8001b34:	4423      	add	r3, r4
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	440b      	add	r3, r1
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	b299      	uxth	r1, r3
 8001b44:	4b88      	ldr	r3, [pc, #544]	; (8001d68 <checkBrickHit+0x14bc>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f1a3 0208 	sub.w	r2, r3, #8
 8001b4c:	4b86      	ldr	r3, [pc, #536]	; (8001d68 <checkBrickHit+0x14bc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	da00      	bge.n	8001b58 <checkBrickHit+0x12ac>
 8001b56:	3307      	adds	r3, #7
 8001b58:	10db      	asrs	r3, r3, #3
 8001b5a:	461d      	mov	r5, r3
 8001b5c:	4c83      	ldr	r4, [pc, #524]	; (8001d6c <checkBrickHit+0x14c0>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	442b      	add	r3, r5
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	4423      	add	r3, r4
 8001b6c:	330c      	adds	r3, #12
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a7f      	ldr	r2, [pc, #508]	; (8001d70 <checkBrickHit+0x14c4>)
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f003 f98d 	bl	8004e9c <Displ_FillArea>
            bricksHit++;
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	3301      	adds	r3, #1
 8001b86:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SW) {
 8001b88:	4b77      	ldr	r3, [pc, #476]	; (8001d68 <checkBrickHit+0x14bc>)
 8001b8a:	7a1b      	ldrb	r3, [r3, #8]
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	d102      	bne.n	8001b96 <checkBrickHit+0x12ea>
                ball.dir = SE;
 8001b90:	4b75      	ldr	r3, [pc, #468]	; (8001d68 <checkBrickHit+0x14bc>)
 8001b92:	2203      	movs	r2, #3
 8001b94:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NW) {
 8001b96:	4b74      	ldr	r3, [pc, #464]	; (8001d68 <checkBrickHit+0x14bc>)
 8001b98:	7a1b      	ldrb	r3, [r3, #8]
 8001b9a:	2b07      	cmp	r3, #7
 8001b9c:	d102      	bne.n	8001ba4 <checkBrickHit+0x12f8>
                ball.dir = NE;
 8001b9e:	4b72      	ldr	r3, [pc, #456]	; (8001d68 <checkBrickHit+0x14bc>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 80d8 	bne.w	8001d5c <checkBrickHit+0x14b0>
            if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible == 1) {
 8001bac:	4b6e      	ldr	r3, [pc, #440]	; (8001d68 <checkBrickHit+0x14bc>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	1fda      	subs	r2, r3, #7
 8001bb2:	4b6d      	ldr	r3, [pc, #436]	; (8001d68 <checkBrickHit+0x14bc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	da00      	bge.n	8001bbe <checkBrickHit+0x1312>
 8001bbc:	3307      	adds	r3, #7
 8001bbe:	10db      	asrs	r3, r3, #3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	496a      	ldr	r1, [pc, #424]	; (8001d6c <checkBrickHit+0x14c0>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4403      	add	r3, r0
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3308      	adds	r3, #8
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	f040 80c0 	bne.w	8001d5c <checkBrickHit+0x14b0>
                bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness--;
 8001bdc:	4b62      	ldr	r3, [pc, #392]	; (8001d68 <checkBrickHit+0x14bc>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	1fda      	subs	r2, r3, #7
 8001be2:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <checkBrickHit+0x14bc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	da00      	bge.n	8001bee <checkBrickHit+0x1342>
 8001bec:	3307      	adds	r3, #7
 8001bee:	10db      	asrs	r3, r3, #3
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	485e      	ldr	r0, [pc, #376]	; (8001d6c <checkBrickHit+0x14c0>)
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	440b      	add	r3, r1
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	4403      	add	r3, r0
 8001c02:	330c      	adds	r3, #12
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	1e58      	subs	r0, r3, #1
 8001c08:	4c58      	ldr	r4, [pc, #352]	; (8001d6c <checkBrickHit+0x14c0>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	440b      	add	r3, r1
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	4423      	add	r3, r4
 8001c18:	330c      	adds	r3, #12
 8001c1a:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8001c1c:	4b52      	ldr	r3, [pc, #328]	; (8001d68 <checkBrickHit+0x14bc>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	1fda      	subs	r2, r3, #7
 8001c22:	4b51      	ldr	r3, [pc, #324]	; (8001d68 <checkBrickHit+0x14bc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da00      	bge.n	8001c2e <checkBrickHit+0x1382>
 8001c2c:	3307      	adds	r3, #7
 8001c2e:	10db      	asrs	r3, r3, #3
 8001c30:	4618      	mov	r0, r3
 8001c32:	494e      	ldr	r1, [pc, #312]	; (8001d6c <checkBrickHit+0x14c0>)
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4403      	add	r3, r0
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	440b      	add	r3, r1
 8001c42:	330c      	adds	r3, #12
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	dc2a      	bgt.n	8001ca0 <checkBrickHit+0x13f4>
                    bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible = 0;
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <checkBrickHit+0x14bc>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	1fda      	subs	r2, r3, #7
 8001c50:	4b45      	ldr	r3, [pc, #276]	; (8001d68 <checkBrickHit+0x14bc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	da00      	bge.n	8001c5c <checkBrickHit+0x13b0>
 8001c5a:	3307      	adds	r3, #7
 8001c5c:	10db      	asrs	r3, r3, #3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	4942      	ldr	r1, [pc, #264]	; (8001d6c <checkBrickHit+0x14c0>)
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4403      	add	r3, r0
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	440b      	add	r3, r1
 8001c70:	3308      	adds	r3, #8
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
                    points++;
 8001c76:	4b3f      	ldr	r3, [pc, #252]	; (8001d74 <checkBrickHit+0x14c8>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <checkBrickHit+0x14c8>)
 8001c80:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x - 1)/8, ball.y + 1 - 8);
 8001c82:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <checkBrickHit+0x14bc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	da00      	bge.n	8001c8e <checkBrickHit+0x13e2>
 8001c8c:	3307      	adds	r3, #7
 8001c8e:	10db      	asrs	r3, r3, #3
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <checkBrickHit+0x14bc>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	3b07      	subs	r3, #7
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f000 f86c 	bl	8001d78 <dropPowerUp>
                }
                ball.dir = NE;
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <checkBrickHit+0x14bc>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	721a      	strb	r2, [r3, #8]
                Displ_FillArea(bricks[ball.y + 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y + 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness]);
 8001ca6:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <checkBrickHit+0x14bc>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	1fda      	subs	r2, r3, #7
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <checkBrickHit+0x14bc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da00      	bge.n	8001cb8 <checkBrickHit+0x140c>
 8001cb6:	3307      	adds	r3, #7
 8001cb8:	10db      	asrs	r3, r3, #3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	492b      	ldr	r1, [pc, #172]	; (8001d6c <checkBrickHit+0x14c0>)
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4403      	add	r3, r0
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	440b      	add	r3, r1
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	b298      	uxth	r0, r3
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <checkBrickHit+0x14bc>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	1fda      	subs	r2, r3, #7
 8001cda:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <checkBrickHit+0x14bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	da00      	bge.n	8001ce6 <checkBrickHit+0x143a>
 8001ce4:	3307      	adds	r3, #7
 8001ce6:	10db      	asrs	r3, r3, #3
 8001ce8:	461c      	mov	r4, r3
 8001cea:	4920      	ldr	r1, [pc, #128]	; (8001d6c <checkBrickHit+0x14c0>)
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4423      	add	r3, r4
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	440b      	add	r3, r1
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	b299      	uxth	r1, r3
 8001d04:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <checkBrickHit+0x14bc>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	1fda      	subs	r2, r3, #7
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <checkBrickHit+0x14bc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	da00      	bge.n	8001d16 <checkBrickHit+0x146a>
 8001d14:	3307      	adds	r3, #7
 8001d16:	10db      	asrs	r3, r3, #3
 8001d18:	461d      	mov	r5, r3
 8001d1a:	4c14      	ldr	r4, [pc, #80]	; (8001d6c <checkBrickHit+0x14c0>)
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	442b      	add	r3, r5
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	4423      	add	r3, r4
 8001d2a:	330c      	adds	r3, #12
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <checkBrickHit+0x14c4>)
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2304      	movs	r3, #4
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f003 f8ae 	bl	8004e9c <Displ_FillArea>
            }
        }
        break;
 8001d40:	e00c      	b.n	8001d5c <checkBrickHit+0x14b0>
    case still:
        break;
    default:
        ball.dir = ball.dir;
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <checkBrickHit+0x14bc>)
 8001d44:	7a1a      	ldrb	r2, [r3, #8]
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <checkBrickHit+0x14bc>)
 8001d48:	721a      	strb	r2, [r3, #8]
    }
}
 8001d4a:	e008      	b.n	8001d5e <checkBrickHit+0x14b2>
        break;
 8001d4c:	bf00      	nop
 8001d4e:	e006      	b.n	8001d5e <checkBrickHit+0x14b2>
        break;
 8001d50:	bf00      	nop
 8001d52:	e004      	b.n	8001d5e <checkBrickHit+0x14b2>
        break;
 8001d54:	bf00      	nop
 8001d56:	e002      	b.n	8001d5e <checkBrickHit+0x14b2>
        break;
 8001d58:	bf00      	nop
 8001d5a:	e000      	b.n	8001d5e <checkBrickHit+0x14b2>
        break;
 8001d5c:	bf00      	nop
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bdb0      	pop	{r4, r5, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000034 	.word	0x20000034
 8001d6c:	200000e8 	.word	0x200000e8
 8001d70:	20000004 	.word	0x20000004
 8001d74:	20001ee8 	.word	0x20001ee8

08001d78 <dropPowerUp>:

void dropPowerUp(int x, int y) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
    uint8_t dropChance = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]
    if (guardian == 0) {
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <dropPowerUp+0x70>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d114      	bne.n	8001db8 <dropPowerUp+0x40>
        srand(HAL_GetTick());
 8001d8e:	f003 fea5 	bl	8005adc <HAL_GetTick>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f008 fd07 	bl	800a7a8 <srand>
        dropChance = rand() % 100;
 8001d9a:	f008 fd33 	bl	800a804 <rand>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4a12      	ldr	r2, [pc, #72]	; (8001dec <dropPowerUp+0x74>)
 8001da2:	fb82 1203 	smull	r1, r2, r2, r3
 8001da6:	1151      	asrs	r1, r2, #5
 8001da8:	17da      	asrs	r2, r3, #31
 8001daa:	1a8a      	subs	r2, r1, r2
 8001dac:	2164      	movs	r1, #100	; 0x64
 8001dae:	fb01 f202 	mul.w	r2, r1, r2
 8001db2:	1a9a      	subs	r2, r3, r2
 8001db4:	4613      	mov	r3, r2
 8001db6:	73fb      	strb	r3, [r7, #15]
    }

    if (dropChance <= 10 && dropChance > 0) {
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	2b0a      	cmp	r3, #10
 8001dbc:	d805      	bhi.n	8001dca <dropPowerUp+0x52>
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <dropPowerUp+0x52>
        guardian = 1;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <dropPowerUp+0x70>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
    }

    if (dropChance <= 15 && dropChance > 10) {
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	2b0f      	cmp	r3, #15
 8001dce:	d806      	bhi.n	8001dde <dropPowerUp+0x66>
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b0a      	cmp	r3, #10
 8001dd4:	d903      	bls.n	8001dde <dropPowerUp+0x66>
        explodeBricks(x, y);
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f8cd 	bl	8001f78 <explodeBricks>
    }
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20001eea 	.word	0x20001eea
 8001dec:	51eb851f 	.word	0x51eb851f

08001df0 <printScreen>:

void printScreen() {
 8001df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df2:	b08b      	sub	sp, #44	; 0x2c
 8001df4:	af06      	add	r7, sp, #24
    Displ_FillArea(SCREEN_WIDTH*4 - 8 - (3*8), 4, 30, 4, D_GREEN);
 8001df6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	221e      	movs	r2, #30
 8001e00:	2104      	movs	r1, #4
 8001e02:	f44f 7090 	mov.w	r0, #288	; 0x120
 8001e06:	f003 f849 	bl	8004e9c <Displ_FillArea>

    for (int i = 0; i < lives1; i++) {
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	e00f      	b.n	8001e30 <printScreen+0x40>
        Displ_FillArea(SCREEN_WIDTH*4 - 8 - (i*8), 4, 4, 4, D_BLUE);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	b298      	uxth	r0, r3
 8001e1c:	2318      	movs	r3, #24
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2304      	movs	r3, #4
 8001e22:	2204      	movs	r2, #4
 8001e24:	2104      	movs	r1, #4
 8001e26:	f003 f839 	bl	8004e9c <Displ_FillArea>
    for (int i = 0; i < lives1; i++) {
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <printScreen+0x108>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	dbe9      	blt.n	8001e10 <printScreen+0x20>
    }

    if (guardian == 1) {
 8001e3c:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <printScreen+0x10c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d10e      	bne.n	8001e62 <printScreen+0x72>
        Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, GREY);
 8001e44:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <printScreen+0x110>)
 8001e46:	785b      	ldrb	r3, [r3, #1]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	b299      	uxth	r1, r3
 8001e50:	f249 6396 	movw	r3, #38550	; 0x9696
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2304      	movs	r3, #4
 8001e58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f003 f81d 	bl	8004e9c <Displ_FillArea>
    }

    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, RED);
 8001e62:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <printScreen+0x110>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	3b19      	subs	r3, #25
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	b298      	uxth	r0, r3
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <printScreen+0x110>)
 8001e70:	785b      	ldrb	r3, [r3, #1]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	b299      	uxth	r1, r3
 8001e78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2304      	movs	r3, #4
 8001e80:	22c8      	movs	r2, #200	; 0xc8
 8001e82:	f003 f80b 	bl	8004e9c <Displ_FillArea>

    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_BLUE);
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <printScreen+0x114>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	b298      	uxth	r0, r3
 8001e90:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <printScreen+0x114>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	b299      	uxth	r1, r3
 8001e9a:	2318      	movs	r3, #24
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	f002 fffb 	bl	8004e9c <Displ_FillArea>

    char str[12];
    snprintf(str, 12, "%u", points);
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <printScreen+0x118>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	4638      	mov	r0, r7
 8001eac:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <printScreen+0x11c>)
 8001eae:	210c      	movs	r1, #12
 8001eb0:	f008 fce6 	bl	800a880 <sniprintf>
    Displ_WString(score.x*4, score.y, str, Font16, 1, WHITE, D_GREEN);
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <printScreen+0x120>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	b29c      	uxth	r4, r3
 8001ebe:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <printScreen+0x120>)
 8001ec0:	785b      	ldrb	r3, [r3, #1]
 8001ec2:	b29d      	uxth	r5, r3
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <printScreen+0x124>)
 8001ec6:	463e      	mov	r6, r7
 8001ec8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001ecc:	9204      	str	r2, [sp, #16]
 8001ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed2:	9203      	str	r2, [sp, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	9202      	str	r2, [sp, #8]
 8001ed8:	46ec      	mov	ip, sp
 8001eda:	1d1a      	adds	r2, r3, #4
 8001edc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4632      	mov	r2, r6
 8001ee8:	4629      	mov	r1, r5
 8001eea:	4620      	mov	r0, r4
 8001eec:	f003 fd32 	bl	8005954 <Displ_WString>
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef8:	20000002 	.word	0x20000002
 8001efc:	20001eea 	.word	0x20001eea
 8001f00:	20000030 	.word	0x20000030
 8001f04:	20000034 	.word	0x20000034
 8001f08:	20001ee8 	.word	0x20001ee8
 8001f0c:	0800bde0 	.word	0x0800bde0
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000014 	.word	0x20000014

08001f18 <checkGuardianTimer>:

void checkGuardianTimer() {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af02      	add	r7, sp, #8
    if (guardian == 1) {
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <checkGuardianTimer+0x54>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d11f      	bne.n	8001f66 <checkGuardianTimer+0x4e>
        if (guardianTimer <= 0) {
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <checkGuardianTimer+0x58>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d115      	bne.n	8001f5a <checkGuardianTimer+0x42>
            guardian = 0;
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <checkGuardianTimer+0x54>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
            guardianTimer = 100;
 8001f34:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <checkGuardianTimer+0x58>)
 8001f36:	2264      	movs	r2, #100	; 0x64
 8001f38:	701a      	strb	r2, [r3, #0]
            Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, D_GREEN);
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <checkGuardianTimer+0x5c>)
 8001f3c:	785b      	ldrb	r3, [r3, #1]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	b299      	uxth	r1, r3
 8001f46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f52:	2000      	movs	r0, #0
 8001f54:	f002 ffa2 	bl	8004e9c <Displ_FillArea>
        } else {
            guardianTimer--;
        }
    }
}
 8001f58:	e005      	b.n	8001f66 <checkGuardianTimer+0x4e>
            guardianTimer--;
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <checkGuardianTimer+0x58>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <checkGuardianTimer+0x58>)
 8001f64:	701a      	strb	r2, [r3, #0]
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20001eea 	.word	0x20001eea
 8001f70:	20000003 	.word	0x20000003
 8001f74:	20000030 	.word	0x20000030

08001f78 <explodeBricks>:

void explodeBricks(int x, int y) {
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    int ymin = y - 1;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
    int xmin = x - 1;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	61bb      	str	r3, [r7, #24]
    int ymax = y + 1;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
    int xmax = x + 1;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3301      	adds	r3, #1
 8001f98:	613b      	str	r3, [r7, #16]
    if(y == 0) {
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <explodeBricks+0x2c>
        ymin = y;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	61fb      	str	r3, [r7, #28]
    }
    if(y == MAX_BRICK_LINES) {
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b30      	cmp	r3, #48	; 0x30
 8001fa8:	d101      	bne.n	8001fae <explodeBricks+0x36>
        ymax = y;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	617b      	str	r3, [r7, #20]
    }
    if(x == 0) {
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <explodeBricks+0x40>
        xmin = x;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	61bb      	str	r3, [r7, #24]
    }
    if(x == 10) {
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b0a      	cmp	r3, #10
 8001fbc:	d101      	bne.n	8001fc2 <explodeBricks+0x4a>
        xmax = x;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
    }


    for(int i = ymin; i <= ymax; i++) {
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e03a      	b.n	800203e <explodeBricks+0xc6>
        for(int j = xmin; j <= xmax; j++) {
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	e030      	b.n	8002030 <explodeBricks+0xb8>
            if(bricks[i][j].visible == 1) {
 8001fce:	4921      	ldr	r1, [pc, #132]	; (8002054 <explodeBricks+0xdc>)
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4413      	add	r3, r2
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3308      	adds	r3, #8
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d11f      	bne.n	800202a <explodeBricks+0xb2>
                bricks[i][j].toughness = 0;
 8001fea:	491a      	ldr	r1, [pc, #104]	; (8002054 <explodeBricks+0xdc>)
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	440b      	add	r3, r1
 8001ffe:	330c      	adds	r3, #12
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
                bricks[i][j].visible = 0;
 8002004:	4913      	ldr	r1, [pc, #76]	; (8002054 <explodeBricks+0xdc>)
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	4413      	add	r3, r2
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	440b      	add	r3, r1
 8002018:	3308      	adds	r3, #8
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
                points++;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <explodeBricks+0xe0>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <explodeBricks+0xe0>)
 8002028:	701a      	strb	r2, [r3, #0]
        for(int j = xmin; j <= xmax; j++) {
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3301      	adds	r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	ddca      	ble.n	8001fce <explodeBricks+0x56>
    for(int i = ymin; i <= ymax; i++) {
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3301      	adds	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	429a      	cmp	r2, r3
 8002044:	ddc0      	ble.n	8001fc8 <explodeBricks+0x50>
            }
        }
    }
}
 8002046:	bf00      	nop
 8002048:	bf00      	nop
 800204a:	3724      	adds	r7, #36	; 0x24
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	200000e8 	.word	0x200000e8
 8002058:	20001ee8 	.word	0x20001ee8

0800205c <setBrickToughness>:

int setBrickToughness(void) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
    int toughnessPercent;
    int toughness = 1;
 8002062:	2301      	movs	r3, #1
 8002064:	607b      	str	r3, [r7, #4]

    toughnessPercent = rand() % (100) + 1;
 8002066:	f008 fbcd 	bl	800a804 <rand>
 800206a:	4602      	mov	r2, r0
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <setBrickToughness+0x68>)
 800206e:	fb83 1302 	smull	r1, r3, r3, r2
 8002072:	1159      	asrs	r1, r3, #5
 8002074:	17d3      	asrs	r3, r2, #31
 8002076:	1acb      	subs	r3, r1, r3
 8002078:	2164      	movs	r1, #100	; 0x64
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	3301      	adds	r3, #1
 8002082:	603b      	str	r3, [r7, #0]

    if(toughnessPercent > 0 && toughnessPercent <= 60) {
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	dd05      	ble.n	8002096 <setBrickToughness+0x3a>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b3c      	cmp	r3, #60	; 0x3c
 800208e:	dc02      	bgt.n	8002096 <setBrickToughness+0x3a>
        toughness = 1;
 8002090:	2301      	movs	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	e010      	b.n	80020b8 <setBrickToughness+0x5c>
    } else if(toughnessPercent > 60 && toughnessPercent < 90) {
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b3c      	cmp	r3, #60	; 0x3c
 800209a:	dd05      	ble.n	80020a8 <setBrickToughness+0x4c>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	2b59      	cmp	r3, #89	; 0x59
 80020a0:	dc02      	bgt.n	80020a8 <setBrickToughness+0x4c>
        toughness = 2;
 80020a2:	2302      	movs	r3, #2
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	e007      	b.n	80020b8 <setBrickToughness+0x5c>
    } else if(toughnessPercent > 90 && toughnessPercent < 100) {
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b5a      	cmp	r3, #90	; 0x5a
 80020ac:	dd04      	ble.n	80020b8 <setBrickToughness+0x5c>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b63      	cmp	r3, #99	; 0x63
 80020b2:	dc01      	bgt.n	80020b8 <setBrickToughness+0x5c>
        toughness = 3;
 80020b4:	2303      	movs	r3, #3
 80020b6:	607b      	str	r3, [r7, #4]
    }

    return toughness;
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	51eb851f 	.word	0x51eb851f

080020c8 <drawBricks>:

void drawBricks() {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af02      	add	r7, sp, #8
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	e0b0      	b.n	8002236 <drawBricks+0x16e>
        for(int j = 0; j < 10; j++) {
 80020d4:	2300      	movs	r3, #0
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	e0a6      	b.n	8002228 <drawBricks+0x160>
            if(bricks[i][j].visible == 1) {
 80020da:	495b      	ldr	r1, [pc, #364]	; (8002248 <drawBricks+0x180>)
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	4413      	add	r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	440b      	add	r3, r1
 80020ee:	3308      	adds	r3, #8
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	f040 8095 	bne.w	8002222 <drawBricks+0x15a>
                if (bricks[i][j].toughness == 3) {
 80020f8:	4953      	ldr	r1, [pc, #332]	; (8002248 <drawBricks+0x180>)
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	4413      	add	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	440b      	add	r3, r1
 800210c:	330c      	adds	r3, #12
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d122      	bne.n	800215a <drawBricks+0x92>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, BLACK);
 8002114:	494c      	ldr	r1, [pc, #304]	; (8002248 <drawBricks+0x180>)
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4413      	add	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	440b      	add	r3, r1
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	b298      	uxth	r0, r3
 8002130:	4945      	ldr	r1, [pc, #276]	; (8002248 <drawBricks+0x180>)
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	4413      	add	r3, r2
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	440b      	add	r3, r1
 8002144:	3304      	adds	r3, #4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	b299      	uxth	r1, r3
 800214e:	2300      	movs	r3, #0
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2304      	movs	r3, #4
 8002154:	2220      	movs	r2, #32
 8002156:	f002 fea1 	bl	8004e9c <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 2) {
 800215a:	493b      	ldr	r1, [pc, #236]	; (8002248 <drawBricks+0x180>)
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	4413      	add	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	440b      	add	r3, r1
 800216e:	330c      	adds	r3, #12
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d123      	bne.n	80021be <drawBricks+0xf6>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, DARK_GREY);
 8002176:	4934      	ldr	r1, [pc, #208]	; (8002248 <drawBricks+0x180>)
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	4413      	add	r3, r2
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	440b      	add	r3, r1
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	b29b      	uxth	r3, r3
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	b298      	uxth	r0, r3
 8002192:	492d      	ldr	r1, [pc, #180]	; (8002248 <drawBricks+0x180>)
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	440b      	add	r3, r1
 80021a6:	3304      	adds	r3, #4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	b299      	uxth	r1, r3
 80021b0:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2304      	movs	r3, #4
 80021b8:	2220      	movs	r2, #32
 80021ba:	f002 fe6f 	bl	8004e9c <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 1) {
 80021be:	4922      	ldr	r1, [pc, #136]	; (8002248 <drawBricks+0x180>)
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	440b      	add	r3, r1
 80021d2:	330c      	adds	r3, #12
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d123      	bne.n	8002222 <drawBricks+0x15a>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, GREY);
 80021da:	491b      	ldr	r1, [pc, #108]	; (8002248 <drawBricks+0x180>)
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	440b      	add	r3, r1
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	b298      	uxth	r0, r3
 80021f6:	4914      	ldr	r1, [pc, #80]	; (8002248 <drawBricks+0x180>)
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	4413      	add	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	440b      	add	r3, r1
 800220a:	3304      	adds	r3, #4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	b299      	uxth	r1, r3
 8002214:	f249 6396 	movw	r3, #38550	; 0x9696
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2304      	movs	r3, #4
 800221c:	2220      	movs	r2, #32
 800221e:	f002 fe3d 	bl	8004e9c <Displ_FillArea>
        for(int j = 0; j < 10; j++) {
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b09      	cmp	r3, #9
 800222c:	f77f af55 	ble.w	80020da <drawBricks+0x12>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3301      	adds	r3, #1
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b2f      	cmp	r3, #47	; 0x2f
 800223a:	f77f af4b 	ble.w	80020d4 <drawBricks+0xc>
                }
            }
        }
    }
}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200000e8 	.word	0x200000e8

0800224c <_write>:
#include "debug.h"

// Declare external UART handle
extern UART_HandleTypeDef huart3;

int _write(int file, char *ptr, int len) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3b01      	subs	r3, #1
    HAL_StatusTypeDef xStatus;
    switch (file) {
 800225c:	2b01      	cmp	r3, #1
 800225e:	d814      	bhi.n	800228a <_write+0x3e>
    case STDOUT_FILENO: /*stdout*/
    case STDERR_FILENO: /*stderr*/
        xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	b29a      	uxth	r2, r3
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	480f      	ldr	r0, [pc, #60]	; (80022a8 <_write+0x5c>)
 800226c:	f007 fab2 	bl	80097d4 <HAL_UART_Transmit>
 8002270:	4603      	mov	r3, r0
 8002272:	75fb      	strb	r3, [r7, #23]
        if (xStatus != HAL_OK) {
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00f      	beq.n	800229a <_write+0x4e>
            errno = EIO;
 800227a:	f008 f9d5 	bl	800a628 <__errno>
 800227e:	4603      	mov	r3, r0
 8002280:	2205      	movs	r2, #5
 8002282:	601a      	str	r2, [r3, #0]
            return -1;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
 8002288:	e009      	b.n	800229e <_write+0x52>
        }
        break;
    default:
        errno = EBADF;
 800228a:	f008 f9cd 	bl	800a628 <__errno>
 800228e:	4603      	mov	r3, r0
 8002290:	2209      	movs	r2, #9
 8002292:	601a      	str	r2, [r3, #0]
        return -1;
 8002294:	f04f 33ff 	mov.w	r3, #4294967295
 8002298:	e001      	b.n	800229e <_write+0x52>
        break;
 800229a:	bf00      	nop
    }
    return len;
 800229c:	687b      	ldr	r3, [r7, #4]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20002074 	.word	0x20002074

080022ac <init>:
ballPoint ball = {(SCREEN_WIDTH)/2, SCREEN_HEIGHT - 6, still};
uint8_t start = 0;
uint8_t delay = BRICK_SPEED;
directions ballDirection = NE;

void init (void) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
    choice = 0;
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <init+0x28>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
    if(gamechoice == 1){
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <init+0x2c>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d102      	bne.n	80022c4 <init+0x18>
        initSpaceInvaders();
 80022be:	f001 f995 	bl	80035ec <initSpaceInvaders>
    }else if(gamechoice == 2){
        initBrickbreaker();
    }


}
 80022c2:	e005      	b.n	80022d0 <init+0x24>
    }else if(gamechoice == 2){
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <init+0x2c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d101      	bne.n	80022d0 <init+0x24>
        initBrickbreaker();
 80022cc:	f7fd ffd8 	bl	8000280 <initBrickbreaker>
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20001eec 	.word	0x20001eec
 80022d8:	20001eed 	.word	0x20001eed

080022dc <loop>:

int loop (int key) {
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b085      	sub	sp, #20
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	6078      	str	r0, [r7, #4]
    updateScreen();
 80022e4:	f000 fac2 	bl	800286c <updateScreen>
    if (play == menu){
 80022e8:	4b9d      	ldr	r3, [pc, #628]	; (8002560 <loop+0x284>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d104      	bne.n	80022fa <loop+0x1e>
        max_choice = total_games;
 80022f0:	4b9c      	ldr	r3, [pc, #624]	; (8002564 <loop+0x288>)
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	4b9c      	ldr	r3, [pc, #624]	; (8002568 <loop+0x28c>)
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	e002      	b.n	8002300 <loop+0x24>
    }else{
        max_choice = 1;
 80022fa:	4b9b      	ldr	r3, [pc, #620]	; (8002568 <loop+0x28c>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
    }
    if(key == left) {
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d159      	bne.n	80023ba <loop+0xde>
        if(play < paused){
 8002306:	4b96      	ldr	r3, [pc, #600]	; (8002560 <loop+0x284>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d849      	bhi.n	80023a2 <loop+0xc6>
        	if(gamechoice == 1){
 800230e:	4b97      	ldr	r3, [pc, #604]	; (800256c <loop+0x290>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d104      	bne.n	8002320 <loop+0x44>
        		moveSpaceship(-1);
 8002316:	f04f 30ff 	mov.w	r0, #4294967295
 800231a:	f001 fdf5 	bl	8003f08 <moveSpaceship>
 800231e:	e040      	b.n	80023a2 <loop+0xc6>
        	}else if(gamechoice == 2) {
 8002320:	4b92      	ldr	r3, [pc, #584]	; (800256c <loop+0x290>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d13c      	bne.n	80023a2 <loop+0xc6>
        	    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 8002328:	4b91      	ldr	r3, [pc, #580]	; (8002570 <loop+0x294>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	3b19      	subs	r3, #25
 800232e:	b29b      	uxth	r3, r3
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	b298      	uxth	r0, r3
 8002334:	4b8e      	ldr	r3, [pc, #568]	; (8002570 <loop+0x294>)
 8002336:	785b      	ldrb	r3, [r3, #1]
 8002338:	b29b      	uxth	r3, r3
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	b299      	uxth	r1, r3
 800233e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2304      	movs	r3, #4
 8002346:	22c8      	movs	r2, #200	; 0xc8
 8002348:	f002 fda8 	bl	8004e9c <Displ_FillArea>
                person.x--;
 800234c:	4b88      	ldr	r3, [pc, #544]	; (8002570 <loop+0x294>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	3b01      	subs	r3, #1
 8002352:	b2da      	uxtb	r2, r3
 8002354:	4b86      	ldr	r3, [pc, #536]	; (8002570 <loop+0x294>)
 8002356:	701a      	strb	r2, [r3, #0]
                if(person.x < BAR_SIZE/2) {
 8002358:	4b85      	ldr	r3, [pc, #532]	; (8002570 <loop+0x294>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b18      	cmp	r3, #24
 800235e:	d803      	bhi.n	8002368 <loop+0x8c>
                    person.x = (BAR_SIZE/2);
 8002360:	4b83      	ldr	r3, [pc, #524]	; (8002570 <loop+0x294>)
 8002362:	2219      	movs	r2, #25
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	e01c      	b.n	80023a2 <loop+0xc6>
                } else {
                    if (ball.dir == still) {
 8002368:	4b82      	ldr	r3, [pc, #520]	; (8002574 <loop+0x298>)
 800236a:	7a1b      	ldrb	r3, [r3, #8]
 800236c:	2b08      	cmp	r3, #8
 800236e:	d118      	bne.n	80023a2 <loop+0xc6>
                        Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 8002370:	4b80      	ldr	r3, [pc, #512]	; (8002574 <loop+0x298>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	b298      	uxth	r0, r3
 800237a:	4b7e      	ldr	r3, [pc, #504]	; (8002574 <loop+0x298>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	b29b      	uxth	r3, r3
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	b299      	uxth	r1, r3
 8002384:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	2304      	movs	r3, #4
 800238c:	2204      	movs	r2, #4
 800238e:	f002 fd85 	bl	8004e9c <Displ_FillArea>
                        ball.x--;
 8002392:	4b78      	ldr	r3, [pc, #480]	; (8002574 <loop+0x298>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3b01      	subs	r3, #1
 8002398:	4a76      	ldr	r2, [pc, #472]	; (8002574 <loop+0x298>)
 800239a:	6013      	str	r3, [r2, #0]
                        ballDirection = NW;
 800239c:	4b76      	ldr	r3, [pc, #472]	; (8002578 <loop+0x29c>)
 800239e:	2207      	movs	r2, #7
 80023a0:	701a      	strb	r2, [r3, #0]
                    }
                }
        	}
        }
        if (choice != 0){
 80023a2:	4b76      	ldr	r3, [pc, #472]	; (800257c <loop+0x2a0>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <loop+0xda>
        	choice--;
 80023aa:	4b74      	ldr	r3, [pc, #464]	; (800257c <loop+0x2a0>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b72      	ldr	r3, [pc, #456]	; (800257c <loop+0x2a0>)
 80023b4:	701a      	strb	r2, [r3, #0]
        }

        key = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
    }
    if(key == right) {
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d159      	bne.n	8002474 <loop+0x198>
    	if(play < paused){
 80023c0:	4b67      	ldr	r3, [pc, #412]	; (8002560 <loop+0x284>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d847      	bhi.n	8002458 <loop+0x17c>
    		if(gamechoice == 1){
 80023c8:	4b68      	ldr	r3, [pc, #416]	; (800256c <loop+0x290>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d103      	bne.n	80023d8 <loop+0xfc>
    			moveSpaceship(1);
 80023d0:	2001      	movs	r0, #1
 80023d2:	f001 fd99 	bl	8003f08 <moveSpaceship>
 80023d6:	e03f      	b.n	8002458 <loop+0x17c>
    		}else if (gamechoice == 2) {
 80023d8:	4b64      	ldr	r3, [pc, #400]	; (800256c <loop+0x290>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d13b      	bne.n	8002458 <loop+0x17c>
    			Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 80023e0:	4b63      	ldr	r3, [pc, #396]	; (8002570 <loop+0x294>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	3b19      	subs	r3, #25
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	b298      	uxth	r0, r3
 80023ec:	4b60      	ldr	r3, [pc, #384]	; (8002570 <loop+0x294>)
 80023ee:	785b      	ldrb	r3, [r3, #1]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	b299      	uxth	r1, r3
 80023f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2304      	movs	r3, #4
 80023fe:	22c8      	movs	r2, #200	; 0xc8
 8002400:	f002 fd4c 	bl	8004e9c <Displ_FillArea>
    			person.x++;
 8002404:	4b5a      	ldr	r3, [pc, #360]	; (8002570 <loop+0x294>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b58      	ldr	r3, [pc, #352]	; (8002570 <loop+0x294>)
 800240e:	701a      	strb	r2, [r3, #0]
    			if(person.x > SCREEN_WIDTH - (BAR_SIZE/2) - 1) {
 8002410:	4b57      	ldr	r3, [pc, #348]	; (8002570 <loop+0x294>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b36      	cmp	r3, #54	; 0x36
 8002416:	d902      	bls.n	800241e <loop+0x142>
    				person.x = SCREEN_WIDTH - (BAR_SIZE/2) - 1;
 8002418:	4b55      	ldr	r3, [pc, #340]	; (8002570 <loop+0x294>)
 800241a:	2236      	movs	r2, #54	; 0x36
 800241c:	701a      	strb	r2, [r3, #0]
    			}
    			if (ball.dir == still) {
 800241e:	4b55      	ldr	r3, [pc, #340]	; (8002574 <loop+0x298>)
 8002420:	7a1b      	ldrb	r3, [r3, #8]
 8002422:	2b08      	cmp	r3, #8
 8002424:	d118      	bne.n	8002458 <loop+0x17c>
    				Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 8002426:	4b53      	ldr	r3, [pc, #332]	; (8002574 <loop+0x298>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	b298      	uxth	r0, r3
 8002430:	4b50      	ldr	r3, [pc, #320]	; (8002574 <loop+0x298>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	b29b      	uxth	r3, r3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	b299      	uxth	r1, r3
 800243a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2304      	movs	r3, #4
 8002442:	2204      	movs	r2, #4
 8002444:	f002 fd2a 	bl	8004e9c <Displ_FillArea>
    				ball.x++;
 8002448:	4b4a      	ldr	r3, [pc, #296]	; (8002574 <loop+0x298>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	4a49      	ldr	r2, [pc, #292]	; (8002574 <loop+0x298>)
 8002450:	6013      	str	r3, [r2, #0]
    				ballDirection = NE;
 8002452:	4b49      	ldr	r3, [pc, #292]	; (8002578 <loop+0x29c>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
    			}
    		}
    	}
    	if (choice != max_choice){
 8002458:	4b48      	ldr	r3, [pc, #288]	; (800257c <loop+0x2a0>)
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	4b42      	ldr	r3, [pc, #264]	; (8002568 <loop+0x28c>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d005      	beq.n	8002470 <loop+0x194>
    		choice++;
 8002464:	4b45      	ldr	r3, [pc, #276]	; (800257c <loop+0x2a0>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	3301      	adds	r3, #1
 800246a:	b2da      	uxtb	r2, r3
 800246c:	4b43      	ldr	r3, [pc, #268]	; (800257c <loop+0x2a0>)
 800246e:	701a      	strb	r2, [r3, #0]
    	}
    	key = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	607b      	str	r3, [r7, #4]
    }
    if(key == down){
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b04      	cmp	r3, #4
 8002478:	f040 80f2 	bne.w	8002660 <loop+0x384>
        if (play == notPlay){
 800247c:	4b38      	ldr	r3, [pc, #224]	; (8002560 <loop+0x284>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d119      	bne.n	80024b8 <loop+0x1dc>
        	Displ_FillArea(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, 140, 20, DARK_GREY);
 8002484:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	2314      	movs	r3, #20
 800248c:	228c      	movs	r2, #140	; 0x8c
 800248e:	2178      	movs	r1, #120	; 0x78
 8002490:	205a      	movs	r0, #90	; 0x5a
 8002492:	f002 fd03 	bl	8004e9c <Displ_FillArea>
            play = inPlay;
 8002496:	4b32      	ldr	r3, [pc, #200]	; (8002560 <loop+0x284>)
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
            if(returnConnection() == 1) {
 800249c:	f001 f832 	bl	8003504 <returnConnection>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	f040 80da 	bne.w	800265c <loop+0x380>
                HAL_UART_Transmit(&huart2, (uint8_t *)"S", strlen("S"), 300);
 80024a8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80024ac:	2201      	movs	r2, #1
 80024ae:	4934      	ldr	r1, [pc, #208]	; (8002580 <loop+0x2a4>)
 80024b0:	4834      	ldr	r0, [pc, #208]	; (8002584 <loop+0x2a8>)
 80024b2:	f007 f98f 	bl	80097d4 <HAL_UART_Transmit>
 80024b6:	e0d1      	b.n	800265c <loop+0x380>
            }
        }else if(play == inPlay) {
 80024b8:	4b29      	ldr	r3, [pc, #164]	; (8002560 <loop+0x284>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d115      	bne.n	80024ec <loop+0x210>
            if (ball.dir == still) {
 80024c0:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <loop+0x298>)
 80024c2:	7a1b      	ldrb	r3, [r3, #8]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d108      	bne.n	80024da <loop+0x1fe>
                ball.dir = ballDirection;
 80024c8:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <loop+0x29c>)
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	4b29      	ldr	r3, [pc, #164]	; (8002574 <loop+0x298>)
 80024ce:	721a      	strb	r2, [r3, #8]
                start = 1;
 80024d0:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <loop+0x2ac>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
                playBall();
 80024d6:	f7fd ff71 	bl	80003bc <playBall>
            }
            if(!hit){
 80024da:	4b2c      	ldr	r3, [pc, #176]	; (800258c <loop+0x2b0>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 80bc 	bne.w	800265c <loop+0x380>
                spawnBullet(0);
 80024e4:	2000      	movs	r0, #0
 80024e6:	f001 f9cb 	bl	8003880 <spawnBullet>
 80024ea:	e0b7      	b.n	800265c <loop+0x380>
            }
        }else if(play == paused){
 80024ec:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <loop+0x284>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d153      	bne.n	800259c <loop+0x2c0>
            if(choice == 0){
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <loop+0x2a0>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d114      	bne.n	8002526 <loop+0x24a>
                if(returnConnection() == 1) {
 80024fc:	f001 f802 	bl	8003504 <returnConnection>
 8002500:	4603      	mov	r3, r0
 8002502:	2b01      	cmp	r3, #1
 8002504:	d106      	bne.n	8002514 <loop+0x238>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"M", strlen("M"), 300);
 8002506:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800250a:	2201      	movs	r2, #1
 800250c:	4920      	ldr	r1, [pc, #128]	; (8002590 <loop+0x2b4>)
 800250e:	481d      	ldr	r0, [pc, #116]	; (8002584 <loop+0x2a8>)
 8002510:	f007 f960 	bl	80097d4 <HAL_UART_Transmit>
                }
                play = menu;
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <loop+0x284>)
 8002516:	2203      	movs	r2, #3
 8002518:	701a      	strb	r2, [r3, #0]
                gamechoice = 0;
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <loop+0x290>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
                init();
 8002520:	f7ff fec4 	bl	80022ac <init>
 8002524:	e09a      	b.n	800265c <loop+0x380>
            }
            else if(choice == 1){
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <loop+0x2a0>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d114      	bne.n	8002558 <loop+0x27c>
            	displayPauseMenu(1);
 800252e:	2001      	movs	r0, #1
 8002530:	f000 fd48 	bl	8002fc4 <displayPauseMenu>
                play = last_state;
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <loop+0x2b8>)
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <loop+0x284>)
 800253a:	701a      	strb	r2, [r3, #0]
                if(returnConnection() == 1) {
 800253c:	f000 ffe2 	bl	8003504 <returnConnection>
 8002540:	4603      	mov	r3, r0
 8002542:	2b01      	cmp	r3, #1
 8002544:	f040 808a 	bne.w	800265c <loop+0x380>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"C", strlen("C"), 300);
 8002548:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800254c:	2201      	movs	r2, #1
 800254e:	4912      	ldr	r1, [pc, #72]	; (8002598 <loop+0x2bc>)
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <loop+0x2a8>)
 8002552:	f007 f93f 	bl	80097d4 <HAL_UART_Transmit>
 8002556:	e081      	b.n	800265c <loop+0x380>
                }
            }else{
                displayPauseMenu(0);
 8002558:	2000      	movs	r0, #0
 800255a:	f000 fd33 	bl	8002fc4 <displayPauseMenu>
 800255e:	e07d      	b.n	800265c <loop+0x380>
 8002560:	2000004a 	.word	0x2000004a
 8002564:	20000044 	.word	0x20000044
 8002568:	2000002d 	.word	0x2000002d
 800256c:	20001eed 	.word	0x20001eed
 8002570:	20000030 	.word	0x20000030
 8002574:	20000034 	.word	0x20000034
 8002578:	20000041 	.word	0x20000041
 800257c:	20001eec 	.word	0x20001eec
 8002580:	0800bde4 	.word	0x0800bde4
 8002584:	20001fec 	.word	0x20001fec
 8002588:	20001eef 	.word	0x20001eef
 800258c:	20001eeb 	.word	0x20001eeb
 8002590:	0800bde8 	.word	0x0800bde8
 8002594:	20001eee 	.word	0x20001eee
 8002598:	0800bdec 	.word	0x0800bdec
            }

        }else if(play == menu){
 800259c:	4ba3      	ldr	r3, [pc, #652]	; (800282c <loop+0x550>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d154      	bne.n	800264e <loop+0x372>
            if(choice == 0){
 80025a4:	4ba2      	ldr	r3, [pc, #648]	; (8002830 <loop+0x554>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d11b      	bne.n	80025e4 <loop+0x308>
                //toggle_multiplayer();
                if(returnConnection() == 0) {
 80025ac:	f000 ffaa 	bl	8003504 <returnConnection>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d107      	bne.n	80025c6 <loop+0x2ea>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"?", strlen("?"), 300);
 80025b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80025ba:	2201      	movs	r2, #1
 80025bc:	499d      	ldr	r1, [pc, #628]	; (8002834 <loop+0x558>)
 80025be:	489e      	ldr	r0, [pc, #632]	; (8002838 <loop+0x55c>)
 80025c0:	f007 f908 	bl	80097d4 <HAL_UART_Transmit>
 80025c4:	e04a      	b.n	800265c <loop+0x380>
                } else if(returnConnection() == 1) {
 80025c6:	f000 ff9d 	bl	8003504 <returnConnection>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d145      	bne.n	800265c <loop+0x380>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"X", strlen("X"), 300);
 80025d0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80025d4:	2201      	movs	r2, #1
 80025d6:	4999      	ldr	r1, [pc, #612]	; (800283c <loop+0x560>)
 80025d8:	4897      	ldr	r0, [pc, #604]	; (8002838 <loop+0x55c>)
 80025da:	f007 f8fb 	bl	80097d4 <HAL_UART_Transmit>
                    closeConnection();
 80025de:	f000 ffe7 	bl	80035b0 <closeConnection>
 80025e2:	e03b      	b.n	800265c <loop+0x380>
                }

            }else if(choice == 1){
 80025e4:	4b92      	ldr	r3, [pc, #584]	; (8002830 <loop+0x554>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d114      	bne.n	8002616 <loop+0x33a>
                gamechoice = 2;
 80025ec:	4b94      	ldr	r3, [pc, #592]	; (8002840 <loop+0x564>)
 80025ee:	2202      	movs	r2, #2
 80025f0:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80025f2:	4b8e      	ldr	r3, [pc, #568]	; (800282c <loop+0x550>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
                if(returnConnection() == 1) {
 80025f8:	f000 ff84 	bl	8003504 <returnConnection>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d106      	bne.n	8002610 <loop+0x334>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"2G", strlen("2G"), 300);
 8002602:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002606:	2202      	movs	r2, #2
 8002608:	498e      	ldr	r1, [pc, #568]	; (8002844 <loop+0x568>)
 800260a:	488b      	ldr	r0, [pc, #556]	; (8002838 <loop+0x55c>)
 800260c:	f007 f8e2 	bl	80097d4 <HAL_UART_Transmit>
                }
                init();
 8002610:	f7ff fe4c 	bl	80022ac <init>
 8002614:	e022      	b.n	800265c <loop+0x380>
            }
            else if(choice == 2){
 8002616:	4b86      	ldr	r3, [pc, #536]	; (8002830 <loop+0x554>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d114      	bne.n	8002648 <loop+0x36c>
                gamechoice = 1;
 800261e:	4b88      	ldr	r3, [pc, #544]	; (8002840 <loop+0x564>)
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 8002624:	4b81      	ldr	r3, [pc, #516]	; (800282c <loop+0x550>)
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
                if(returnConnection() == 1) {
 800262a:	f000 ff6b 	bl	8003504 <returnConnection>
 800262e:	4603      	mov	r3, r0
 8002630:	2b01      	cmp	r3, #1
 8002632:	d106      	bne.n	8002642 <loop+0x366>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"1G", strlen("1G"), 300);
 8002634:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002638:	2202      	movs	r2, #2
 800263a:	4983      	ldr	r1, [pc, #524]	; (8002848 <loop+0x56c>)
 800263c:	487e      	ldr	r0, [pc, #504]	; (8002838 <loop+0x55c>)
 800263e:	f007 f8c9 	bl	80097d4 <HAL_UART_Transmit>
                }
                init();
 8002642:	f7ff fe33 	bl	80022ac <init>
 8002646:	e009      	b.n	800265c <loop+0x380>
            }else{
                displayMenu();
 8002648:	f000 fd1e 	bl	8003088 <displayMenu>
 800264c:	e006      	b.n	800265c <loop+0x380>
            }

        }
        else if(!hit){
 800264e:	4b7f      	ldr	r3, [pc, #508]	; (800284c <loop+0x570>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d102      	bne.n	800265c <loop+0x380>
            spawnBullet(0);
 8002656:	2000      	movs	r0, #0
 8002658:	f001 f912 	bl	8003880 <spawnBullet>
        }
        key = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	607b      	str	r3, [r7, #4]
    }
    if(key == up && play < 2){
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d11e      	bne.n	80026a4 <loop+0x3c8>
 8002666:	4b71      	ldr	r3, [pc, #452]	; (800282c <loop+0x550>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d81a      	bhi.n	80026a4 <loop+0x3c8>
    	last_state = play;
 800266e:	4b6f      	ldr	r3, [pc, #444]	; (800282c <loop+0x550>)
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	4b77      	ldr	r3, [pc, #476]	; (8002850 <loop+0x574>)
 8002674:	701a      	strb	r2, [r3, #0]
        play = paused;
 8002676:	4b6d      	ldr	r3, [pc, #436]	; (800282c <loop+0x550>)
 8002678:	2202      	movs	r2, #2
 800267a:	701a      	strb	r2, [r3, #0]
        choice = 1;
 800267c:	4b6c      	ldr	r3, [pc, #432]	; (8002830 <loop+0x554>)
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
        last_choice_pause = 40;
 8002682:	4b74      	ldr	r3, [pc, #464]	; (8002854 <loop+0x578>)
 8002684:	2228      	movs	r2, #40	; 0x28
 8002686:	701a      	strb	r2, [r3, #0]
        key = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	607b      	str	r3, [r7, #4]
        if(returnConnection() == 1) {
 800268c:	f000 ff3a 	bl	8003504 <returnConnection>
 8002690:	4603      	mov	r3, r0
 8002692:	2b01      	cmp	r3, #1
 8002694:	d106      	bne.n	80026a4 <loop+0x3c8>
            HAL_UART_Transmit(&huart2, (uint8_t *)"P", strlen("P"), 300);
 8002696:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800269a:	2201      	movs	r2, #1
 800269c:	496e      	ldr	r1, [pc, #440]	; (8002858 <loop+0x57c>)
 800269e:	4866      	ldr	r0, [pc, #408]	; (8002838 <loop+0x55c>)
 80026a0:	f007 f898 	bl	80097d4 <HAL_UART_Transmit>
        }
    }

    if(play == inPlay){
 80026a4:	4b61      	ldr	r3, [pc, #388]	; (800282c <loop+0x550>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d132      	bne.n	8002712 <loop+0x436>
    	if(gamechoice == 1){
 80026ac:	4b64      	ldr	r3, [pc, #400]	; (8002840 <loop+0x564>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d10a      	bne.n	80026ca <loop+0x3ee>
    		spawnComet();
 80026b4:	f001 f85e 	bl	8003774 <spawnComet>
    		delayBullet();
 80026b8:	f001 fec6 	bl	8004448 <delayBullet>
    		moveComets();
 80026bc:	f001 fab8 	bl	8003c30 <moveComets>
    		moveBullets();
 80026c0:	f001 f988 	bl	80039d4 <moveBullets>
    		moveEnemyBullets();
 80026c4:	f001 f9fa 	bl	8003abc <moveEnemyBullets>
 80026c8:	e021      	b.n	800270e <loop+0x432>
    	}else if(gamechoice == 2) {
 80026ca:	4b5d      	ldr	r3, [pc, #372]	; (8002840 <loop+0x564>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d11d      	bne.n	800270e <loop+0x432>
            if (start == 1 && ball.dir != still) {
 80026d2:	4b62      	ldr	r3, [pc, #392]	; (800285c <loop+0x580>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d115      	bne.n	8002706 <loop+0x42a>
 80026da:	4b61      	ldr	r3, [pc, #388]	; (8002860 <loop+0x584>)
 80026dc:	7a1b      	ldrb	r3, [r3, #8]
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d011      	beq.n	8002706 <loop+0x42a>
                if (delay <= 0) {
 80026e2:	4b60      	ldr	r3, [pc, #384]	; (8002864 <loop+0x588>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <loop+0x41a>
                    lowerBricks();
 80026ea:	f7fe f843 	bl	8000774 <lowerBricks>
                    delay = BRICK_SPEED;
 80026ee:	4b5d      	ldr	r3, [pc, #372]	; (8002864 <loop+0x588>)
 80026f0:	228c      	movs	r2, #140	; 0x8c
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	e005      	b.n	8002702 <loop+0x426>
                } else {
                    delay--;
 80026f6:	4b5b      	ldr	r3, [pc, #364]	; (8002864 <loop+0x588>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4b59      	ldr	r3, [pc, #356]	; (8002864 <loop+0x588>)
 8002700:	701a      	strb	r2, [r3, #0]
                }
                checkGameOver();
 8002702:	f7fe f89f 	bl	8000844 <checkGameOver>
            }
            checkGuardianTimer();
 8002706:	f7ff fc07 	bl	8001f18 <checkGuardianTimer>
            playBall();
 800270a:	f7fd fe57 	bl	80003bc <playBall>
        }

    	updateScreen();
 800270e:	f000 f8ad 	bl	800286c <updateScreen>
    }if(play < paused){
 8002712:	4b46      	ldr	r3, [pc, #280]	; (800282c <loop+0x550>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d807      	bhi.n	800272a <loop+0x44e>
    	if(gamechoice == 1){
 800271a:	4b49      	ldr	r3, [pc, #292]	; (8002840 <loop+0x564>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d103      	bne.n	800272a <loop+0x44e>
    		spawnStar();
 8002722:	f001 f8ff 	bl	8003924 <spawnStar>
    		moveStars();
 8002726:	f001 fb93 	bl	8003e50 <moveStars>
    	}

    }


    if (returnConnection() == 1 && returnTest() == 1) {
 800272a:	f000 feeb 	bl	8003504 <returnConnection>
 800272e:	4603      	mov	r3, r0
 8002730:	2b01      	cmp	r3, #1
 8002732:	d175      	bne.n	8002820 <loop+0x544>
 8002734:	f000 fece 	bl	80034d4 <returnTest>
 8002738:	4603      	mov	r3, r0
 800273a:	2b01      	cmp	r3, #1
 800273c:	d170      	bne.n	8002820 <loop+0x544>
        if (gamechoice == 2) {
 800273e:	4b40      	ldr	r3, [pc, #256]	; (8002840 <loop+0x564>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d103      	bne.n	800274e <loop+0x472>
            lowerBricks();
 8002746:	f7fe f815 	bl	8000774 <lowerBricks>
            printArray();
 800274a:	f000 feb1 	bl	80034b0 <printArray>
        }
        if(gamechoice == 0) {
 800274e:	4b3c      	ldr	r3, [pc, #240]	; (8002840 <loop+0x564>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10e      	bne.n	8002774 <loop+0x498>
            gamechoice = returnMPGameChoice();
 8002756:	f000 fef7 	bl	8003548 <returnMPGameChoice>
 800275a:	4603      	mov	r3, r0
 800275c:	461a      	mov	r2, r3
 800275e:	4b38      	ldr	r3, [pc, #224]	; (8002840 <loop+0x564>)
 8002760:	701a      	strb	r2, [r3, #0]
            printArray();
 8002762:	f000 fea5 	bl	80034b0 <printArray>
            turnOffTest();
 8002766:	f000 fec1 	bl	80034ec <turnOffTest>
            play = notPlay;
 800276a:	4b30      	ldr	r3, [pc, #192]	; (800282c <loop+0x550>)
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
            init();
 8002770:	f7ff fd9c 	bl	80022ac <init>
        }
        if(play == notPlay && returnMPMenuState() == inPlay){
 8002774:	4b2d      	ldr	r3, [pc, #180]	; (800282c <loop+0x550>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d109      	bne.n	8002790 <loop+0x4b4>
 800277c:	f000 ff2a 	bl	80035d4 <returnMPMenuState>
 8002780:	4603      	mov	r3, r0
 8002782:	2b01      	cmp	r3, #1
 8002784:	d104      	bne.n	8002790 <loop+0x4b4>
        	play = inPlay;
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <loop+0x550>)
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
        	turnOffTest();
 800278c:	f000 feae 	bl	80034ec <turnOffTest>
        }
        if (play < 2 && returnMPMenuState() == paused) {
 8002790:	4b26      	ldr	r3, [pc, #152]	; (800282c <loop+0x550>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d813      	bhi.n	80027c0 <loop+0x4e4>
 8002798:	f000 ff1c 	bl	80035d4 <returnMPMenuState>
 800279c:	4603      	mov	r3, r0
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d10e      	bne.n	80027c0 <loop+0x4e4>
            last_state = play;
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <loop+0x550>)
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <loop+0x574>)
 80027a8:	701a      	strb	r2, [r3, #0]
            play = paused;
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <loop+0x550>)
 80027ac:	2202      	movs	r2, #2
 80027ae:	701a      	strb	r2, [r3, #0]
            choice = 1;
 80027b0:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <loop+0x554>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
            last_choice_pause = 40;
 80027b6:	4b27      	ldr	r3, [pc, #156]	; (8002854 <loop+0x578>)
 80027b8:	2228      	movs	r2, #40	; 0x28
 80027ba:	701a      	strb	r2, [r3, #0]
            turnOffTest();
 80027bc:	f000 fe96 	bl	80034ec <turnOffTest>
        }
        if (play == paused && returnMPMenuState() == inPlay) {
 80027c0:	4b1a      	ldr	r3, [pc, #104]	; (800282c <loop+0x550>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d118      	bne.n	80027fa <loop+0x51e>
 80027c8:	f000 ff04 	bl	80035d4 <returnMPMenuState>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d113      	bne.n	80027fa <loop+0x51e>
            printf("play = %d, mpMenu = %d\r\n", play, returnMPMenuState());
 80027d2:	4b16      	ldr	r3, [pc, #88]	; (800282c <loop+0x550>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	461c      	mov	r4, r3
 80027d8:	f000 fefc 	bl	80035d4 <returnMPMenuState>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	4621      	mov	r1, r4
 80027e2:	4821      	ldr	r0, [pc, #132]	; (8002868 <loop+0x58c>)
 80027e4:	f007 ff52 	bl	800a68c <iprintf>
            turnOffTest();
 80027e8:	f000 fe80 	bl	80034ec <turnOffTest>
            displayPauseMenu(1);
 80027ec:	2001      	movs	r0, #1
 80027ee:	f000 fbe9 	bl	8002fc4 <displayPauseMenu>
            play = last_state;
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <loop+0x574>)
 80027f4:	781a      	ldrb	r2, [r3, #0]
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <loop+0x550>)
 80027f8:	701a      	strb	r2, [r3, #0]
        }if (play == paused && returnMPMenuState() == menu) {
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <loop+0x550>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d10e      	bne.n	8002820 <loop+0x544>
 8002802:	f000 fee7 	bl	80035d4 <returnMPMenuState>
 8002806:	4603      	mov	r3, r0
 8002808:	2b03      	cmp	r3, #3
 800280a:	d109      	bne.n	8002820 <loop+0x544>
            turnOffTest();
 800280c:	f000 fe6e 	bl	80034ec <turnOffTest>
            play = menu;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <loop+0x550>)
 8002812:	2203      	movs	r2, #3
 8002814:	701a      	strb	r2, [r3, #0]
            gamechoice = 0;
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <loop+0x564>)
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
            init();
 800281c:	f7ff fd46 	bl	80022ac <init>
        }
    }

    return key;
 8002820:	687b      	ldr	r3, [r7, #4]
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bd90      	pop	{r4, r7, pc}
 800282a:	bf00      	nop
 800282c:	2000004a 	.word	0x2000004a
 8002830:	20001eec 	.word	0x20001eec
 8002834:	0800bdf0 	.word	0x0800bdf0
 8002838:	20001fec 	.word	0x20001fec
 800283c:	0800bdf4 	.word	0x0800bdf4
 8002840:	20001eed 	.word	0x20001eed
 8002844:	0800bdf8 	.word	0x0800bdf8
 8002848:	0800bdfc 	.word	0x0800bdfc
 800284c:	20001eeb 	.word	0x20001eeb
 8002850:	20001eee 	.word	0x20001eee
 8002854:	2000002c 	.word	0x2000002c
 8002858:	0800be00 	.word	0x0800be00
 800285c:	20001eef 	.word	0x20001eef
 8002860:	20000034 	.word	0x20000034
 8002864:	20000040 	.word	0x20000040
 8002868:	0800be04 	.word	0x0800be04

0800286c <updateScreen>:


void updateScreen()
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b087      	sub	sp, #28
 8002870:	af06      	add	r7, sp, #24
    if (play == menu){
 8002872:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <updateScreen+0x8c>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d102      	bne.n	8002880 <updateScreen+0x14>
    	displayMenu();
 800287a:	f000 fc05 	bl	8003088 <displayMenu>
        return;
 800287e:	e037      	b.n	80028f0 <updateScreen+0x84>
    }

    if (gamechoice == 1){
 8002880:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <updateScreen+0x90>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d10c      	bne.n	80028a2 <updateScreen+0x36>
        //hit
        if (hit > 0) {
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <updateScreen+0x94>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <updateScreen+0x28>
            spaceShipHitColorToggle();
 8002890:	f001 fd90 	bl	80043b4 <spaceShipHitColorToggle>
        }

        //spaceship
        displaySpaceShip(RED);
 8002894:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002898:	f001 fd04 	bl	80042a4 <displaySpaceShip>

        //lives
        displayLives();
 800289c:	f001 fd40 	bl	8004320 <displayLives>
 80028a0:	e005      	b.n	80028ae <updateScreen+0x42>
    }else if(gamechoice == 2) {
 80028a2:	4b16      	ldr	r3, [pc, #88]	; (80028fc <updateScreen+0x90>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d101      	bne.n	80028ae <updateScreen+0x42>
        printScreen();
 80028aa:	f7ff faa1 	bl	8001df0 <printScreen>
    }

    //start
    if(!play){
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <updateScreen+0x8c>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d115      	bne.n	80028e2 <updateScreen+0x76>
    	Displ_WString(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, "START", Font20, 2, WHITE, DARK_GREY);
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <updateScreen+0x98>)
 80028b8:	f642 422c 	movw	r2, #11308	; 0x2c2c
 80028bc:	9204      	str	r2, [sp, #16]
 80028be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c2:	9203      	str	r2, [sp, #12]
 80028c4:	2202      	movs	r2, #2
 80028c6:	9202      	str	r2, [sp, #8]
 80028c8:	466c      	mov	r4, sp
 80028ca:	1d1a      	adds	r2, r3, #4
 80028cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <updateScreen+0x9c>)
 80028d8:	2178      	movs	r1, #120	; 0x78
 80028da:	205a      	movs	r0, #90	; 0x5a
 80028dc:	f003 f83a 	bl	8005954 <Displ_WString>
 80028e0:	e006      	b.n	80028f0 <updateScreen+0x84>
    }
    else if(play == paused){
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <updateScreen+0x8c>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d102      	bne.n	80028f0 <updateScreen+0x84>
    	displayPauseMenu(0);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f000 fb6a 	bl	8002fc4 <displayPauseMenu>
    }
}
 80028f0:	3704      	adds	r7, #4
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd90      	pop	{r4, r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2000004a 	.word	0x2000004a
 80028fc:	20001eed 	.word	0x20001eed
 8002900:	20001eeb 	.word	0x20001eeb
 8002904:	20000020 	.word	0x20000020
 8002908:	0800be20 	.word	0x0800be20

0800290c <read_MPU_mem>:
//        return -1;
//    }
//    return len;
//}

uint8_t read_MPU_mem(uint8_t reg_addr){
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af04      	add	r7, sp, #16
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	b29a      	uxth	r2, r3
 800291a:	2364      	movs	r3, #100	; 0x64
 800291c:	9302      	str	r3, [sp, #8]
 800291e:	2301      	movs	r3, #1
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	f107 030f 	add.w	r3, r7, #15
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2301      	movs	r3, #1
 800292a:	21d0      	movs	r1, #208	; 0xd0
 800292c:	4807      	ldr	r0, [pc, #28]	; (800294c <read_MPU_mem+0x40>)
 800292e:	f003 ff83 	bl	8006838 <HAL_I2C_Mem_Read>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <read_MPU_mem+0x30>
		return data;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	e003      	b.n	8002944 <read_MPU_mem+0x38>
	}
	else{
		printf("mem not read\r\n");
 800293c:	4804      	ldr	r0, [pc, #16]	; (8002950 <read_MPU_mem+0x44>)
 800293e:	f007 ff2b 	bl	800a798 <puts>
		return 0;
 8002942:	2300      	movs	r3, #0
	}
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20001ef0 	.word	0x20001ef0
 8002950:	0800be28 	.word	0x0800be28

08002954 <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af04      	add	r7, sp, #16
 800295a:	4603      	mov	r3, r0
 800295c:	460a      	mov	r2, r1
 800295e:	71fb      	strb	r3, [r7, #7]
 8002960:	4613      	mov	r3, r2
 8002962:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	b29a      	uxth	r2, r3
 8002968:	2364      	movs	r3, #100	; 0x64
 800296a:	9302      	str	r3, [sp, #8]
 800296c:	2301      	movs	r3, #1
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	1dbb      	adds	r3, r7, #6
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2301      	movs	r3, #1
 8002976:	21d1      	movs	r1, #209	; 0xd1
 8002978:	4806      	ldr	r0, [pc, #24]	; (8002994 <write_MPU_mem+0x40>)
 800297a:	f003 fe49 	bl	8006610 <HAL_I2C_Mem_Write>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 8002984:	4804      	ldr	r0, [pc, #16]	; (8002998 <write_MPU_mem+0x44>)
 8002986:	f007 ff07 	bl	800a798 <puts>
    }
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20001ef0 	.word	0x20001ef0
 8002998:	0800be38 	.word	0x0800be38

0800299c <read_y_accel>:

void read_y_accel(){
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
	uint8_t LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 80029a2:	203e      	movs	r0, #62	; 0x3e
 80029a4:	f7ff ffb2 	bl	800290c <read_MPU_mem>
 80029a8:	4603      	mov	r3, r0
 80029aa:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 80029ac:	203d      	movs	r0, #61	; 0x3d
 80029ae:	f7ff ffad 	bl	800290c <read_MPU_mem>
 80029b2:	4603      	mov	r3, r0
 80029b4:	71bb      	strb	r3, [r7, #6]

	ay = (((int16_t)MSByte << 8) | LSByte);
 80029b6:	79bb      	ldrb	r3, [r7, #6]
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	b21a      	sxth	r2, r3
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	b21b      	sxth	r3, r3
 80029c0:	4313      	orrs	r3, r2
 80029c2:	b21a      	sxth	r2, r3
 80029c4:	4b02      	ldr	r3, [pc, #8]	; (80029d0 <read_y_accel+0x34>)
 80029c6:	801a      	strh	r2, [r3, #0]

}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200020fc 	.word	0x200020fc

080029d4 <init_MPU>:

void init_MPU(){
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 80029d8:	2100      	movs	r1, #0
 80029da:	206b      	movs	r0, #107	; 0x6b
 80029dc:	f7ff ffba 	bl	8002954 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 80029e0:	2107      	movs	r1, #7
 80029e2:	2019      	movs	r0, #25
 80029e4:	f7ff ffb6 	bl	8002954 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 80029e8:	2100      	movs	r1, #0
 80029ea:	201b      	movs	r0, #27
 80029ec:	f7ff ffb2 	bl	8002954 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 80029f0:	2100      	movs	r1, #0
 80029f2:	201c      	movs	r0, #28
 80029f4:	f7ff ffae 	bl	8002954 <write_MPU_mem>
}
 80029f8:	bf00      	nop
 80029fa:	bd80      	pop	{r7, pc}

080029fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a02:	f003 f811 	bl	8005a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a06:	f000 f86d 	bl	8002ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a0a:	f000 f9c3 	bl	8002d94 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a0e:	f000 f9a3 	bl	8002d58 <MX_DMA_Init>
  MX_I2C2_Init();
 8002a12:	f000 f8bd 	bl	8002b90 <MX_I2C2_Init>
  MX_SPI2_Init();
 8002a16:	f000 f8fb 	bl	8002c10 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002a1a:	f000 f937 	bl	8002c8c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002a1e:	f000 f96b 	bl	8002cf8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8002a22:	2064      	movs	r0, #100	; 0x64
 8002a24:	f003 f866 	bl	8005af4 <HAL_Delay>
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 8002a28:	2364      	movs	r3, #100	; 0x64
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	21d0      	movs	r1, #208	; 0xd0
 8002a2e:	4826      	ldr	r0, [pc, #152]	; (8002ac8 <main+0xcc>)
 8002a30:	f004 f81c 	bl	8006a6c <HAL_I2C_IsDeviceReady>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d105      	bne.n	8002a46 <main+0x4a>
	  printf("succesfully communicated\r\n");
 8002a3a:	4824      	ldr	r0, [pc, #144]	; (8002acc <main+0xd0>)
 8002a3c:	f007 feac 	bl	800a798 <puts>
	  init_MPU();
 8002a40:	f7ff ffc8 	bl	80029d4 <init_MPU>
 8002a44:	e002      	b.n	8002a4c <main+0x50>
  }
  else{
	  printf("i2C not found\r\n");
 8002a46:	4822      	ldr	r0, [pc, #136]	; (8002ad0 <main+0xd4>)
 8002a48:	f007 fea6 	bl	800a798 <puts>
  }

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f002 f983 	bl	8004d58 <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 8002a52:	2000      	movs	r0, #0
 8002a54:	f002 fbd6 	bl	8005204 <Displ_CLS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(100);
 8002a58:	2064      	movs	r0, #100	; 0x64
 8002a5a:	f003 f84b 	bl	8005af4 <HAL_Delay>

      read_y_accel();
 8002a5e:	f7ff ff9d 	bl	800299c <read_y_accel>
      if (ay > 2000){
 8002a62:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <main+0xd8>)
 8002a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a6c:	dd07      	ble.n	8002a7e <main+0x82>
          if(x < 320 - 88){
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <main+0xdc>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	2be7      	cmp	r3, #231	; 0xe7
 8002a74:	d810      	bhi.n	8002a98 <main+0x9c>
        	  key = right;
 8002a76:	4b19      	ldr	r3, [pc, #100]	; (8002adc <main+0xe0>)
 8002a78:	2203      	movs	r2, #3
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	e00c      	b.n	8002a98 <main+0x9c>
          }
      }
      else if (ay < -2000){
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <main+0xd8>)
 8002a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a84:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8002a88:	da06      	bge.n	8002a98 <main+0x9c>
          if(x > 0){
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <main+0xdc>)
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <main+0x9c>
        	  key = left;
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <main+0xe0>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
          }
      }
      else{
      }
      key = loop(key);
 8002a98:	4b10      	ldr	r3, [pc, #64]	; (8002adc <main+0xe0>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fc1d 	bl	80022dc <loop>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <main+0xe0>)
 8002aa8:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ammo.in_play; i++){
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	e002      	b.n	8002ab6 <main+0xba>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <main+0xe4>)
 8002ab8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002abc:	461a      	mov	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	dbf5      	blt.n	8002ab0 <main+0xb4>
      HAL_Delay(100);
 8002ac4:	e7c8      	b.n	8002a58 <main+0x5c>
 8002ac6:	bf00      	nop
 8002ac8:	20001ef0 	.word	0x20001ef0
 8002acc:	0800be4c 	.word	0x0800be4c
 8002ad0:	0800be68 	.word	0x0800be68
 8002ad4:	200020fc 	.word	0x200020fc
 8002ad8:	20000042 	.word	0x20000042
 8002adc:	20002104 	.word	0x20002104
 8002ae0:	20002170 	.word	0x20002170

08002ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b09c      	sub	sp, #112	; 0x70
 8002ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002aee:	2228      	movs	r2, #40	; 0x28
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f007 fdc2 	bl	800a67c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002af8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	2230      	movs	r2, #48	; 0x30
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f007 fdb4 	bl	800a67c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b14:	2302      	movs	r3, #2
 8002b16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b20:	2302      	movs	r3, #2
 8002b22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b24:	2300      	movs	r3, #0
 8002b26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002b28:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b32:	4618      	mov	r0, r3
 8002b34:	f004 fbf4 	bl	8007320 <HAL_RCC_OscConfig>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002b3e:	f000 fa3b 	bl	8002fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b42:	230f      	movs	r3, #15
 8002b44:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b46:	2302      	movs	r3, #2
 8002b48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b54:	2300      	movs	r3, #0
 8002b56:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f005 fc1c 	bl	800839c <HAL_RCC_ClockConfig>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002b6a:	f000 fa25 	bl	8002fb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002b6e:	2340      	movs	r3, #64	; 0x40
 8002b70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f005 fe45 	bl	8008808 <HAL_RCCEx_PeriphCLKConfig>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002b84:	f000 fa18 	bl	8002fb8 <Error_Handler>
  }
}
 8002b88:	bf00      	nop
 8002b8a:	3770      	adds	r7, #112	; 0x70
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <MX_I2C2_Init+0x74>)
 8002b96:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <MX_I2C2_Init+0x78>)
 8002b98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <MX_I2C2_Init+0x74>)
 8002b9c:	4a1b      	ldr	r2, [pc, #108]	; (8002c0c <MX_I2C2_Init+0x7c>)
 8002b9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002ba0:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <MX_I2C2_Init+0x74>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <MX_I2C2_Init+0x74>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bac:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <MX_I2C2_Init+0x74>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002bb2:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <MX_I2C2_Init+0x74>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bb8:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <MX_I2C2_Init+0x74>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <MX_I2C2_Init+0x74>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <MX_I2C2_Init+0x74>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002bca:	480e      	ldr	r0, [pc, #56]	; (8002c04 <MX_I2C2_Init+0x74>)
 8002bcc:	f003 fc90 	bl	80064f0 <HAL_I2C_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002bd6:	f000 f9ef 	bl	8002fb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4809      	ldr	r0, [pc, #36]	; (8002c04 <MX_I2C2_Init+0x74>)
 8002bde:	f004 fb07 	bl	80071f0 <HAL_I2CEx_ConfigAnalogFilter>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002be8:	f000 f9e6 	bl	8002fb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002bec:	2100      	movs	r1, #0
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <MX_I2C2_Init+0x74>)
 8002bf0:	f004 fb49 	bl	8007286 <HAL_I2CEx_ConfigDigitalFilter>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002bfa:	f000 f9dd 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20001ef0 	.word	0x20001ef0
 8002c08:	40005800 	.word	0x40005800
 8002c0c:	2000090e 	.word	0x2000090e

08002c10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c16:	4a1c      	ldr	r2, [pc, #112]	; (8002c88 <MX_SPI2_Init+0x78>)
 8002c18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c22:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c28:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c2a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c2e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c36:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c42:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c5e:	2207      	movs	r2, #7
 8002c60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c62:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c6e:	4805      	ldr	r0, [pc, #20]	; (8002c84 <MX_SPI2_Init+0x74>)
 8002c70:	f005 ff4e 	bl	8008b10 <HAL_SPI_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c7a:	f000 f99d 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20001f44 	.word	0x20001f44
 8002c88:	40003800 	.word	0x40003800

08002c8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c90:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <MX_USART2_UART_Init+0x64>)
 8002c92:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <MX_USART2_UART_Init+0x68>)
 8002c94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <MX_USART2_UART_Init+0x64>)
 8002c98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <MX_USART2_UART_Init+0x64>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <MX_USART2_UART_Init+0x64>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <MX_USART2_UART_Init+0x64>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <MX_USART2_UART_Init+0x64>)
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <MX_USART2_UART_Init+0x64>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <MX_USART2_UART_Init+0x64>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <MX_USART2_UART_Init+0x64>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <MX_USART2_UART_Init+0x64>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cce:	4808      	ldr	r0, [pc, #32]	; (8002cf0 <MX_USART2_UART_Init+0x64>)
 8002cd0:	f006 fd32 	bl	8009738 <HAL_UART_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002cda:	f000 f96d 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART2->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <MX_USART2_UART_Init+0x68>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <MX_USART2_UART_Init+0x68>)
 8002ce4:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8002ce8:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20001fec 	.word	0x20001fec
 8002cf4:	40004400 	.word	0x40004400

08002cf8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002cfc:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <MX_USART3_UART_Init+0x58>)
 8002cfe:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <MX_USART3_UART_Init+0x5c>)
 8002d00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002d02:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <MX_USART3_UART_Init+0x58>)
 8002d04:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002d08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <MX_USART3_UART_Init+0x58>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <MX_USART3_UART_Init+0x58>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <MX_USART3_UART_Init+0x58>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <MX_USART3_UART_Init+0x58>)
 8002d1e:	220c      	movs	r2, #12
 8002d20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <MX_USART3_UART_Init+0x58>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <MX_USART3_UART_Init+0x58>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <MX_USART3_UART_Init+0x58>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <MX_USART3_UART_Init+0x58>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <MX_USART3_UART_Init+0x58>)
 8002d3c:	f006 fcfc 	bl	8009738 <HAL_UART_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002d46:	f000 f937 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20002074 	.word	0x20002074
 8002d54:	40004800 	.word	0x40004800

08002d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <MX_DMA_Init+0x38>)
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <MX_DMA_Init+0x38>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6153      	str	r3, [r2, #20]
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <MX_DMA_Init+0x38>)
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2100      	movs	r1, #0
 8002d7a:	200f      	movs	r0, #15
 8002d7c:	f002 ffb9 	bl	8005cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002d80:	200f      	movs	r0, #15
 8002d82:	f002 ffd2 	bl	8005d2a <HAL_NVIC_EnableIRQ>

}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000

08002d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002daa:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <MX_GPIO_Init+0x130>)
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	4a45      	ldr	r2, [pc, #276]	; (8002ec4 <MX_GPIO_Init+0x130>)
 8002db0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002db4:	6153      	str	r3, [r2, #20]
 8002db6:	4b43      	ldr	r3, [pc, #268]	; (8002ec4 <MX_GPIO_Init+0x130>)
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dc2:	4b40      	ldr	r3, [pc, #256]	; (8002ec4 <MX_GPIO_Init+0x130>)
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	4a3f      	ldr	r2, [pc, #252]	; (8002ec4 <MX_GPIO_Init+0x130>)
 8002dc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dcc:	6153      	str	r3, [r2, #20]
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <MX_GPIO_Init+0x130>)
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dda:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <MX_GPIO_Init+0x130>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	4a39      	ldr	r2, [pc, #228]	; (8002ec4 <MX_GPIO_Init+0x130>)
 8002de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de4:	6153      	str	r3, [r2, #20]
 8002de6:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <MX_GPIO_Init+0x130>)
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df2:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <MX_GPIO_Init+0x130>)
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4a33      	ldr	r2, [pc, #204]	; (8002ec4 <MX_GPIO_Init+0x130>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfc:	6153      	str	r3, [r2, #20]
 8002dfe:	4b31      	ldr	r3, [pc, #196]	; (8002ec4 <MX_GPIO_Init+0x130>)
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e10:	482d      	ldr	r0, [pc, #180]	; (8002ec8 <MX_GPIO_Init+0x134>)
 8002e12:	f003 fb3d 	bl	8006490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8002e16:	2200      	movs	r2, #0
 8002e18:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e20:	f003 fb36 	bl	8006490 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8002e24:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e2a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e30:	2301      	movs	r3, #1
 8002e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4824      	ldr	r0, [pc, #144]	; (8002ecc <MX_GPIO_Init+0x138>)
 8002e3c:	f003 f99e 	bl	800617c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8002e40:	2301      	movs	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e44:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	4619      	mov	r1, r3
 8002e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e58:	f003 f990 	bl	800617c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8002e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e62:	2301      	movs	r3, #1
 8002e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8002e6e:	f107 0314 	add.w	r3, r7, #20
 8002e72:	4619      	mov	r1, r3
 8002e74:	4814      	ldr	r0, [pc, #80]	; (8002ec8 <MX_GPIO_Init+0x134>)
 8002e76:	f003 f981 	bl	800617c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 8002e7a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e80:	2301      	movs	r3, #1
 8002e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	4619      	mov	r1, r3
 8002e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e96:	f003 f971 	bl	800617c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	2006      	movs	r0, #6
 8002ea0:	f002 ff27 	bl	8005cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ea4:	2006      	movs	r0, #6
 8002ea6:	f002 ff40 	bl	8005d2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	2028      	movs	r0, #40	; 0x28
 8002eb0:	f002 ff1f 	bl	8005cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002eb4:	2028      	movs	r0, #40	; 0x28
 8002eb6:	f002 ff38 	bl	8005d2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002eba:	bf00      	nop
 8002ebc:	3728      	adds	r7, #40	; 0x28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	48000400 	.word	0x48000400
 8002ecc:	48000800 	.word	0x48000800

08002ed0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	80fb      	strh	r3, [r7, #6]
    // Get the current time
    uint32_t current_time = HAL_GetTick();
 8002eda:	f002 fdff 	bl	8005adc <HAL_GetTick>
 8002ede:	60f8      	str	r0, [r7, #12]

    // Check if it's been long enough since the last debounce
    if (current_time - debounce_time > DEBOUNCE_DELAY) {
 8002ee0:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b1e      	cmp	r3, #30
 8002eea:	d951      	bls.n	8002f90 <HAL_GPIO_EXTI_Callback+0xc0>
        // Update debounce time
        debounce_time = current_time;
 8002eec:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6013      	str	r3, [r2, #0]
        // Your button handling code here
        printf("interrupt!\r\n");
 8002ef2:	482a      	ldr	r0, [pc, #168]	; (8002f9c <HAL_GPIO_EXTI_Callback+0xcc>)
 8002ef4:	f007 fc50 	bl	800a798 <puts>
        if (GPIO_Pin == LEFT_Pin && HAL_GPIO_ReadPin(LEFT_GPIO_Port, GPIO_Pin) == 0) {
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efe:	d10e      	bne.n	8002f1e <HAL_GPIO_EXTI_Callback+0x4e>
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	4619      	mov	r1, r3
 8002f04:	4826      	ldr	r0, [pc, #152]	; (8002fa0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002f06:	f003 faab 	bl	8006460 <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d106      	bne.n	8002f1e <HAL_GPIO_EXTI_Callback+0x4e>
            key = left;
 8002f10:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
            printf("left clicked\r\n");
 8002f16:	4824      	ldr	r0, [pc, #144]	; (8002fa8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002f18:	f007 fc3e 	bl	800a798 <puts>
 8002f1c:	e038      	b.n	8002f90 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == TOP_Pin && HAL_GPIO_ReadPin(TOP_GPIO_Port, GPIO_Pin) == 0) {
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f24:	d10e      	bne.n	8002f44 <HAL_GPIO_EXTI_Callback+0x74>
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	481d      	ldr	r0, [pc, #116]	; (8002fa0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002f2c:	f003 fa98 	bl	8006460 <HAL_GPIO_ReadPin>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_GPIO_EXTI_Callback+0x74>
            key = up;
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002f38:	2202      	movs	r2, #2
 8002f3a:	701a      	strb	r2, [r3, #0]
            printf("up clicked\r\n");
 8002f3c:	481b      	ldr	r0, [pc, #108]	; (8002fac <HAL_GPIO_EXTI_Callback+0xdc>)
 8002f3e:	f007 fc2b 	bl	800a798 <puts>
 8002f42:	e025      	b.n	8002f90 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == RIGHT_Pin && HAL_GPIO_ReadPin(RIGHT_GPIO_Port, GPIO_Pin) == 0) {
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f4a:	d10e      	bne.n	8002f6a <HAL_GPIO_EXTI_Callback+0x9a>
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4813      	ldr	r0, [pc, #76]	; (8002fa0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002f52:	f003 fa85 	bl	8006460 <HAL_GPIO_ReadPin>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d106      	bne.n	8002f6a <HAL_GPIO_EXTI_Callback+0x9a>
            key = right;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002f5e:	2203      	movs	r2, #3
 8002f60:	701a      	strb	r2, [r3, #0]
            printf("right clicked\r\n");
 8002f62:	4813      	ldr	r0, [pc, #76]	; (8002fb0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002f64:	f007 fc18 	bl	800a798 <puts>
 8002f68:	e012      	b.n	8002f90 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == MIDDLE_Pin && HAL_GPIO_ReadPin(MIDDLE_GPIO_Port, GPIO_Pin) == 0) {
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d10f      	bne.n	8002f90 <HAL_GPIO_EXTI_Callback+0xc0>
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	4619      	mov	r1, r3
 8002f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f78:	f003 fa72 	bl	8006460 <HAL_GPIO_ReadPin>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_GPIO_EXTI_Callback+0xc0>
            key = down;
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002f84:	2204      	movs	r2, #4
 8002f86:	701a      	strb	r2, [r3, #0]
            printf("down clicked\r\n");
 8002f88:	480a      	ldr	r0, [pc, #40]	; (8002fb4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002f8a:	f007 fc05 	bl	800a798 <puts>
        }
    }
}
 8002f8e:	e7ff      	b.n	8002f90 <HAL_GPIO_EXTI_Callback+0xc0>
 8002f90:	bf00      	nop
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20002100 	.word	0x20002100
 8002f9c:	0800be78 	.word	0x0800be78
 8002fa0:	48000800 	.word	0x48000800
 8002fa4:	20002104 	.word	0x20002104
 8002fa8:	0800be84 	.word	0x0800be84
 8002fac:	0800be94 	.word	0x0800be94
 8002fb0:	0800bea0 	.word	0x0800bea0
 8002fb4:	0800beb0 	.word	0x0800beb0

08002fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fbc:	b672      	cpsid	i
}
 8002fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fc0:	e7fe      	b.n	8002fc0 <Error_Handler+0x8>
	...

08002fc4 <displayPauseMenu>:

void displayMultiplayerIcon(void);
void displayBricksIcon(void);
void displaySpaceIcon(void);

void displayPauseMenu(uint8_t clear){
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af04      	add	r7, sp, #16
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
	uint16_t back_color = GREY;
 8002fce:	f249 6396 	movw	r3, #38550	; 0x9696
 8002fd2:	81fb      	strh	r3, [r7, #14]
	uint16_t continue_color = RED;
 8002fd4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fd8:	81bb      	strh	r3, [r7, #12]
	uint16_t triangle_color = WHITE;
 8002fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fde:	817b      	strh	r3, [r7, #10]
	if(choice != last_choice_pause || clear){
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <displayPauseMenu+0xbc>)
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <displayPauseMenu+0xc0>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d102      	bne.n	8002ff2 <displayPauseMenu+0x2e>
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d042      	beq.n	8003078 <displayPauseMenu+0xb4>
		last_choice_pause = choice;
 8002ff2:	4b23      	ldr	r3, [pc, #140]	; (8003080 <displayPauseMenu+0xbc>)
 8002ff4:	781a      	ldrb	r2, [r3, #0]
 8002ff6:	4b23      	ldr	r3, [pc, #140]	; (8003084 <displayPauseMenu+0xc0>)
 8002ff8:	701a      	strb	r2, [r3, #0]
		if(choice == 0){
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <displayPauseMenu+0xbc>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <displayPauseMenu+0x4c>
			back_color = RED;
 8003002:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003006:	81fb      	strh	r3, [r7, #14]
			continue_color = GREY;
 8003008:	f249 6396 	movw	r3, #38550	; 0x9696
 800300c:	81bb      	strh	r3, [r7, #12]
 800300e:	e00b      	b.n	8003028 <displayPauseMenu+0x64>
		}
		else if(clear){
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d008      	beq.n	8003028 <displayPauseMenu+0x64>
			back_color = DARK_GREY;
 8003016:	f642 432c 	movw	r3, #11308	; 0x2c2c
 800301a:	81fb      	strh	r3, [r7, #14]
			continue_color = DARK_GREY;
 800301c:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8003020:	81bb      	strh	r3, [r7, #12]
			triangle_color = DARK_GREY;
 8003022:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8003026:	817b      	strh	r3, [r7, #10]
		}
		Displ_FillArea(SCREEN_WIDTH * 2 - BUTTON_SIZE - 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, back_color);
 8003028:	89fb      	ldrh	r3, [r7, #14]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	2340      	movs	r3, #64	; 0x40
 800302e:	2240      	movs	r2, #64	; 0x40
 8003030:	2158      	movs	r1, #88	; 0x58
 8003032:	2054      	movs	r0, #84	; 0x54
 8003034:	f001 ff32 	bl	8004e9c <Displ_FillArea>
		Displ_FillArea(SCREEN_WIDTH * 2 + 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, continue_color);
 8003038:	89bb      	ldrh	r3, [r7, #12]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	2340      	movs	r3, #64	; 0x40
 800303e:	2240      	movs	r2, #64	; 0x40
 8003040:	2158      	movs	r1, #88	; 0x58
 8003042:	20ac      	movs	r0, #172	; 0xac
 8003044:	f001 ff2a 	bl	8004e9c <Displ_FillArea>

		Displ_fillTriangle(SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 + 20 + BUTTON_SIZE - 16, SCREEN_HEIGHT * 2, triangle_color);
 8003048:	897b      	ldrh	r3, [r7, #10]
 800304a:	9302      	str	r3, [sp, #8]
 800304c:	2378      	movs	r3, #120	; 0x78
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	23e4      	movs	r3, #228	; 0xe4
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2390      	movs	r3, #144	; 0x90
 8003056:	22b4      	movs	r2, #180	; 0xb4
 8003058:	2160      	movs	r1, #96	; 0x60
 800305a:	20b4      	movs	r0, #180	; 0xb4
 800305c:	f002 fa1f 	bl	800549e <Displ_fillTriangle>
		Displ_fillTriangle(SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 - 20 - BUTTON_SIZE + 16, SCREEN_HEIGHT * 2, triangle_color);
 8003060:	897b      	ldrh	r3, [r7, #10]
 8003062:	9302      	str	r3, [sp, #8]
 8003064:	2378      	movs	r3, #120	; 0x78
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	235c      	movs	r3, #92	; 0x5c
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2390      	movs	r3, #144	; 0x90
 800306e:	228c      	movs	r2, #140	; 0x8c
 8003070:	2160      	movs	r1, #96	; 0x60
 8003072:	208c      	movs	r0, #140	; 0x8c
 8003074:	f002 fa13 	bl	800549e <Displ_fillTriangle>
	}

}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20001eec 	.word	0x20001eec
 8003084:	2000002c 	.word	0x2000002c

08003088 <displayMenu>:

void displayMenu(){
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b08b      	sub	sp, #44	; 0x2c
 800308c:	af06      	add	r7, sp, #24
	int y_offset = 12;
 800308e:	230c      	movs	r3, #12
 8003090:	60fb      	str	r3, [r7, #12]
	int x_offset = 12;
 8003092:	230c      	movs	r3, #12
 8003094:	60bb      	str	r3, [r7, #8]
	//box around
	if(choice != last_choice_menu){
 8003096:	4b4c      	ldr	r3, [pc, #304]	; (80031c8 <displayMenu+0x140>)
 8003098:	781a      	ldrb	r2, [r3, #0]
 800309a:	4b4c      	ldr	r3, [pc, #304]	; (80031cc <displayMenu+0x144>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d03d      	beq.n	800311e <displayMenu+0x96>
		last_choice_menu =  choice;
 80030a2:	4b49      	ldr	r3, [pc, #292]	; (80031c8 <displayMenu+0x140>)
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	4b49      	ldr	r3, [pc, #292]	; (80031cc <displayMenu+0x144>)
 80030a8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 80030aa:	2300      	movs	r3, #0
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	e02e      	b.n	800310e <displayMenu+0x86>
			if(i == choice){
 80030b0:	4b45      	ldr	r3, [pc, #276]	; (80031c8 <displayMenu+0x140>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d10b      	bne.n	80030d4 <displayMenu+0x4c>
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, RED);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	b298      	uxth	r0, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	b299      	uxth	r1, r3
 80030c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	2340      	movs	r3, #64	; 0x40
 80030cc:	2240      	movs	r2, #64	; 0x40
 80030ce:	f001 fee5 	bl	8004e9c <Displ_FillArea>
 80030d2:	e00a      	b.n	80030ea <displayMenu+0x62>
			}else{
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, GREY);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	b298      	uxth	r0, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	b299      	uxth	r1, r3
 80030dc:	f249 6396 	movw	r3, #38550	; 0x9696
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	2340      	movs	r3, #64	; 0x40
 80030e4:	2240      	movs	r2, #64	; 0x40
 80030e6:	f001 fed9 	bl	8004e9c <Displ_FillArea>
			}if((i + 1)% 4 == 0){
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3301      	adds	r3, #1
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d105      	bne.n	8003102 <displayMenu+0x7a>
				x_offset = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
				y_offset += BUTTON_SIZE + 12;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	334c      	adds	r3, #76	; 0x4c
 80030fe:	60fb      	str	r3, [r7, #12]
				continue;
 8003100:	e002      	b.n	8003108 <displayMenu+0x80>
			}
			x_offset += BUTTON_SIZE + 12;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	334c      	adds	r3, #76	; 0x4c
 8003106:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3301      	adds	r3, #1
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <displayMenu+0x148>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	dc02      	bgt.n	800311e <displayMenu+0x96>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b07      	cmp	r3, #7
 800311c:	ddc8      	ble.n	80030b0 <displayMenu+0x28>
		}
	}
    displayMenuIcons();
 800311e:	f000 f861 	bl	80031e4 <displayMenuIcons>

    // text
    switch (choice) {
 8003122:	4b29      	ldr	r3, [pc, #164]	; (80031c8 <displayMenu+0x140>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d032      	beq.n	8003190 <displayMenu+0x108>
 800312a:	2b02      	cmp	r3, #2
 800312c:	dc46      	bgt.n	80031bc <displayMenu+0x134>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <displayMenu+0xb0>
 8003132:	2b01      	cmp	r3, #1
 8003134:	d016      	beq.n	8003164 <displayMenu+0xdc>
        break;
    case 2:
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
        break;
    default:
        break;
 8003136:	e041      	b.n	80031bc <displayMenu+0x134>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Multiplayer   ", Font20, 1, WHITE, DARK_GREY);
 8003138:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <displayMenu+0x14c>)
 800313a:	f642 422c 	movw	r2, #11308	; 0x2c2c
 800313e:	9204      	str	r2, [sp, #16]
 8003140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003144:	9203      	str	r2, [sp, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	9202      	str	r2, [sp, #8]
 800314a:	466c      	mov	r4, sp
 800314c:	1d1a      	adds	r2, r3, #4
 800314e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003152:	e884 0003 	stmia.w	r4, {r0, r1}
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1f      	ldr	r2, [pc, #124]	; (80031d8 <displayMenu+0x150>)
 800315a:	21c8      	movs	r1, #200	; 0xc8
 800315c:	2008      	movs	r0, #8
 800315e:	f002 fbf9 	bl	8005954 <Displ_WString>
        break;
 8003162:	e02c      	b.n	80031be <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Brick Breaker ", Font20, 1, WHITE, DARK_GREY);
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <displayMenu+0x14c>)
 8003166:	f642 422c 	movw	r2, #11308	; 0x2c2c
 800316a:	9204      	str	r2, [sp, #16]
 800316c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003170:	9203      	str	r2, [sp, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	9202      	str	r2, [sp, #8]
 8003176:	466c      	mov	r4, sp
 8003178:	1d1a      	adds	r2, r3, #4
 800317a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800317e:	e884 0003 	stmia.w	r4, {r0, r1}
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a15      	ldr	r2, [pc, #84]	; (80031dc <displayMenu+0x154>)
 8003186:	21c8      	movs	r1, #200	; 0xc8
 8003188:	2008      	movs	r0, #8
 800318a:	f002 fbe3 	bl	8005954 <Displ_WString>
        break;
 800318e:	e016      	b.n	80031be <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
 8003190:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <displayMenu+0x14c>)
 8003192:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8003196:	9204      	str	r2, [sp, #16]
 8003198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800319c:	9203      	str	r2, [sp, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	9202      	str	r2, [sp, #8]
 80031a2:	466c      	mov	r4, sp
 80031a4:	1d1a      	adds	r2, r3, #4
 80031a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031aa:	e884 0003 	stmia.w	r4, {r0, r1}
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <displayMenu+0x158>)
 80031b2:	21c8      	movs	r1, #200	; 0xc8
 80031b4:	2008      	movs	r0, #8
 80031b6:	f002 fbcd 	bl	8005954 <Displ_WString>
        break;
 80031ba:	e000      	b.n	80031be <displayMenu+0x136>
        break;
 80031bc:	bf00      	nop
    }
}
 80031be:	bf00      	nop
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd90      	pop	{r4, r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20001eec 	.word	0x20001eec
 80031cc:	20000048 	.word	0x20000048
 80031d0:	20000044 	.word	0x20000044
 80031d4:	20000020 	.word	0x20000020
 80031d8:	0800bec0 	.word	0x0800bec0
 80031dc:	0800bed0 	.word	0x0800bed0
 80031e0:	0800bee0 	.word	0x0800bee0

080031e4 <displayMenuIcons>:

void displayMenuIcons(){
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0

    // multiplayer
	displayMultiplayerIcon();
 80031e8:	f000 f806 	bl	80031f8 <displayMultiplayerIcon>

    // brick
	displayBricksIcon();
 80031ec:	f000 f868 	bl	80032c0 <displayBricksIcon>

    //spaceinvaders
	displaySpaceIcon();
 80031f0:	f000 f890 	bl	8003314 <displaySpaceIcon>
}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <displayMultiplayerIcon>:

void displayMultiplayerIcon(){
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af02      	add	r7, sp, #8
	if(connected){
 80031fe:	4b2f      	ldr	r3, [pc, #188]	; (80032bc <displayMultiplayerIcon+0xc4>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d023      	beq.n	800324e <displayMultiplayerIcon+0x56>
		Displ_FillArea(20, 20, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 8003206:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2304      	movs	r3, #4
 800320e:	2230      	movs	r2, #48	; 0x30
 8003210:	2114      	movs	r1, #20
 8003212:	2014      	movs	r0, #20
 8003214:	f001 fe42 	bl	8004e9c <Displ_FillArea>
		Displ_FillArea(20, 12, 4, 8, LIGHT_GREEN);
 8003218:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	2308      	movs	r3, #8
 8003220:	2204      	movs	r2, #4
 8003222:	210c      	movs	r1, #12
 8003224:	2014      	movs	r0, #20
 8003226:	f001 fe39 	bl	8004e9c <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE, 12, 4, 8, LIGHT_GREEN);
 800322a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2308      	movs	r3, #8
 8003232:	2204      	movs	r2, #4
 8003234:	210c      	movs	r1, #12
 8003236:	2040      	movs	r0, #64	; 0x40
 8003238:	f001 fe30 	bl	8004e9c <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE/2 + 8, 24, 8, BUTTON_SIZE - 24, LIGHT_GREEN);
 800323c:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	2328      	movs	r3, #40	; 0x28
 8003244:	2208      	movs	r2, #8
 8003246:	2118      	movs	r1, #24
 8003248:	2028      	movs	r0, #40	; 0x28
 800324a:	f001 fe27 	bl	8004e9c <Displ_FillArea>
	}
	Displ_FillArea(20, BUTTON_SIZE, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 800324e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	2304      	movs	r3, #4
 8003256:	2230      	movs	r2, #48	; 0x30
 8003258:	2140      	movs	r1, #64	; 0x40
 800325a:	2014      	movs	r0, #20
 800325c:	f001 fe1e 	bl	8004e9c <Displ_FillArea>
	Displ_FillArea(20, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8003260:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2308      	movs	r3, #8
 8003268:	2204      	movs	r2, #4
 800326a:	2144      	movs	r1, #68	; 0x44
 800326c:	2014      	movs	r0, #20
 800326e:	f001 fe15 	bl	8004e9c <Displ_FillArea>
	Displ_FillArea(BUTTON_SIZE, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8003272:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2308      	movs	r3, #8
 800327a:	2204      	movs	r2, #4
 800327c:	2144      	movs	r1, #68	; 0x44
 800327e:	2040      	movs	r0, #64	; 0x40
 8003280:	f001 fe0c 	bl	8004e9c <Displ_FillArea>
	if(!connected){
 8003284:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <displayMultiplayerIcon+0xc4>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d112      	bne.n	80032b2 <displayMultiplayerIcon+0xba>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 800328c:	2318      	movs	r3, #24
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	e00c      	b.n	80032ac <displayMultiplayerIcon+0xb4>
			Displ_FillArea(BUTTON_SIZE/2 + 8, k, 8, 4, LIGHT_GREEN);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	b299      	uxth	r1, r3
 8003296:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	2304      	movs	r3, #4
 800329e:	2208      	movs	r2, #8
 80032a0:	2028      	movs	r0, #40	; 0x28
 80032a2:	f001 fdfb 	bl	8004e9c <Displ_FillArea>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3308      	adds	r3, #8
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b3f      	cmp	r3, #63	; 0x3f
 80032b0:	ddef      	ble.n	8003292 <displayMultiplayerIcon+0x9a>
		}
	}
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20002105 	.word	0x20002105

080032c0 <displayBricksIcon>:

void displayBricksIcon(){
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af02      	add	r7, sp, #8
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE, 20, 4, LIGHT_GREEN);
 80032c6:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	2304      	movs	r3, #4
 80032ce:	2214      	movs	r2, #20
 80032d0:	2140      	movs	r1, #64	; 0x40
 80032d2:	2068      	movs	r0, #104	; 0x68
 80032d4:	f001 fde2 	bl	8004e9c <Displ_FillArea>
	Displ_FillArea(28+BUTTON_SIZE, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 80032d8:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2340      	movs	r3, #64	; 0x40
 80032e0:	2204      	movs	r2, #4
 80032e2:	210c      	movs	r1, #12
 80032e4:	205c      	movs	r0, #92	; 0x5c
 80032e6:	f001 fdd9 	bl	8004e9c <Displ_FillArea>
	Displ_FillArea((8+BUTTON_SIZE)*2, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 80032ea:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2340      	movs	r3, #64	; 0x40
 80032f2:	2204      	movs	r2, #4
 80032f4:	210c      	movs	r1, #12
 80032f6:	2090      	movs	r0, #144	; 0x90
 80032f8:	f001 fdd0 	bl	8004e9c <Displ_FillArea>
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE - 20, 4, 4, LIGHT_GREEN);
 80032fc:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2304      	movs	r3, #4
 8003304:	2204      	movs	r2, #4
 8003306:	212c      	movs	r1, #44	; 0x2c
 8003308:	2068      	movs	r0, #104	; 0x68
 800330a:	f001 fdc7 	bl	8004e9c <Displ_FillArea>
}
 800330e:	bf00      	nop
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <displaySpaceIcon>:

void displaySpaceIcon(){
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af02      	add	r7, sp, #8
	Displ_FillArea((BUTTON_SIZE+12)*3 - 48, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 800331a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2310      	movs	r3, #16
 8003322:	2204      	movs	r2, #4
 8003324:	2134      	movs	r1, #52	; 0x34
 8003326:	20b4      	movs	r0, #180	; 0xb4
 8003328:	f001 fdb8 	bl	8004e9c <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 32, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 800332c:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	2310      	movs	r3, #16
 8003334:	2204      	movs	r2, #4
 8003336:	2134      	movs	r1, #52	; 0x34
 8003338:	20c4      	movs	r0, #196	; 0xc4
 800333a:	f001 fdaf 	bl	8004e9c <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 44, BUTTON_SIZE -8, 12, 4, LIGHT_GREEN);
 800333e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2304      	movs	r3, #4
 8003346:	220c      	movs	r2, #12
 8003348:	2138      	movs	r1, #56	; 0x38
 800334a:	20b8      	movs	r0, #184	; 0xb8
 800334c:	f001 fda6 	bl	8004e9c <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 40, BUTTON_SIZE -16, 4, 16, LIGHT_GREEN);
 8003350:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2310      	movs	r3, #16
 8003358:	2204      	movs	r2, #4
 800335a:	2130      	movs	r1, #48	; 0x30
 800335c:	20bc      	movs	r0, #188	; 0xbc
 800335e:	f001 fd9d 	bl	8004e9c <Displ_FillArea>

	Displ_FillArea((BUTTON_SIZE+12)*3 - 36, BUTTON_SIZE -40, 12, 12, LIGHT_GREEN);
 8003362:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	230c      	movs	r3, #12
 800336a:	220c      	movs	r2, #12
 800336c:	2118      	movs	r1, #24
 800336e:	20c0      	movs	r0, #192	; 0xc0
 8003370:	f001 fd94 	bl	8004e9c <Displ_FillArea>
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <addCharacterToArray>:
        check_availability();
    }

}

void addCharacterToArray(char c) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]
    char filler[2];
    filler[0] = c;
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	733b      	strb	r3, [r7, #12]
    filler[1] = '\0';
 800338a:	2300      	movs	r3, #0
 800338c:	737b      	strb	r3, [r7, #13]

    strcat(characterArray, filler);
 800338e:	f107 030c 	add.w	r3, r7, #12
 8003392:	4619      	mov	r1, r3
 8003394:	483f      	ldr	r0, [pc, #252]	; (8003494 <addCharacterToArray+0x118>)
 8003396:	f007 faa7 	bl	800a8e8 <strcat>
    //printf("%c\r\n", c);

    if(c == 'o' && mp == enabled) {
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	2b6f      	cmp	r3, #111	; 0x6f
 800339e:	d109      	bne.n	80033b4 <addCharacterToArray+0x38>
 80033a0:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <addCharacterToArray+0x11c>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d105      	bne.n	80033b4 <addCharacterToArray+0x38>
        inSignal = 1;
 80033a8:	4b3c      	ldr	r3, [pc, #240]	; (800349c <addCharacterToArray+0x120>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	701a      	strb	r2, [r3, #0]
        printArray();
 80033ae:	f000 f87f 	bl	80034b0 <printArray>
    }else if(c == 'M') {
        inSignal = 1;
        mpMenuState = 3;
        printArray();
    }
}
 80033b2:	e06a      	b.n	800348a <addCharacterToArray+0x10e>
    }else if(c == '?') {
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	2b3f      	cmp	r3, #63	; 0x3f
 80033b8:	d10f      	bne.n	80033da <addCharacterToArray+0x5e>
        HAL_UART_Transmit(&huart2, (uint8_t *)"!", strlen("!"), 300);
 80033ba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80033be:	2201      	movs	r2, #1
 80033c0:	4937      	ldr	r1, [pc, #220]	; (80034a0 <addCharacterToArray+0x124>)
 80033c2:	4838      	ldr	r0, [pc, #224]	; (80034a4 <addCharacterToArray+0x128>)
 80033c4:	f006 fa06 	bl	80097d4 <HAL_UART_Transmit>
        printArray();
 80033c8:	f000 f872 	bl	80034b0 <printArray>
        connected = 1;
 80033cc:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <addCharacterToArray+0x12c>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
        mp = enabled;
 80033d2:	4b31      	ldr	r3, [pc, #196]	; (8003498 <addCharacterToArray+0x11c>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
}
 80033d8:	e057      	b.n	800348a <addCharacterToArray+0x10e>
    }else if(c == '!') {
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	2b21      	cmp	r3, #33	; 0x21
 80033de:	d108      	bne.n	80033f2 <addCharacterToArray+0x76>
        connected = 1;
 80033e0:	4b31      	ldr	r3, [pc, #196]	; (80034a8 <addCharacterToArray+0x12c>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
        mp = enabled;
 80033e6:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <addCharacterToArray+0x11c>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	701a      	strb	r2, [r3, #0]
        printArray();
 80033ec:	f000 f860 	bl	80034b0 <printArray>
}
 80033f0:	e04b      	b.n	800348a <addCharacterToArray+0x10e>
    }else if(c == 'G') {
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	2b47      	cmp	r3, #71	; 0x47
 80033f6:	d107      	bne.n	8003408 <addCharacterToArray+0x8c>
        inSignal = 1;
 80033f8:	4b28      	ldr	r3, [pc, #160]	; (800349c <addCharacterToArray+0x120>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
        setMPGameChoice();
 80033fe:	f000 f88d 	bl	800351c <setMPGameChoice>
        printArray();
 8003402:	f000 f855 	bl	80034b0 <printArray>
}
 8003406:	e040      	b.n	800348a <addCharacterToArray+0x10e>
    }else if(c == 'B') {
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	2b42      	cmp	r3, #66	; 0x42
 800340c:	d102      	bne.n	8003414 <addCharacterToArray+0x98>
        setCoord();
 800340e:	f000 f8a7 	bl	8003560 <setCoord>
}
 8003412:	e03a      	b.n	800348a <addCharacterToArray+0x10e>
    }else if(c == 'S'){
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	2b53      	cmp	r3, #83	; 0x53
 8003418:	d108      	bne.n	800342c <addCharacterToArray+0xb0>
        inSignal = 1;
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <addCharacterToArray+0x120>)
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
    	mpMenuState = 1;
 8003420:	4b22      	ldr	r3, [pc, #136]	; (80034ac <addCharacterToArray+0x130>)
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
    	printArray();
 8003426:	f000 f843 	bl	80034b0 <printArray>
}
 800342a:	e02e      	b.n	800348a <addCharacterToArray+0x10e>
    }else if(c == 'X') {
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	2b58      	cmp	r3, #88	; 0x58
 8003430:	d108      	bne.n	8003444 <addCharacterToArray+0xc8>
       connected = 0;
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <addCharacterToArray+0x12c>)
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
       mp = disabled;
 8003438:	4b17      	ldr	r3, [pc, #92]	; (8003498 <addCharacterToArray+0x11c>)
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
       printArray();
 800343e:	f000 f837 	bl	80034b0 <printArray>
}
 8003442:	e022      	b.n	800348a <addCharacterToArray+0x10e>
    }else if(c == 'P') {
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	2b50      	cmp	r3, #80	; 0x50
 8003448:	d108      	bne.n	800345c <addCharacterToArray+0xe0>
        inSignal = 1;
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <addCharacterToArray+0x120>)
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
        mpMenuState = 2;
 8003450:	4b16      	ldr	r3, [pc, #88]	; (80034ac <addCharacterToArray+0x130>)
 8003452:	2202      	movs	r2, #2
 8003454:	701a      	strb	r2, [r3, #0]
        printArray();
 8003456:	f000 f82b 	bl	80034b0 <printArray>
}
 800345a:	e016      	b.n	800348a <addCharacterToArray+0x10e>
    }else if(c == 'C') {
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	2b43      	cmp	r3, #67	; 0x43
 8003460:	d108      	bne.n	8003474 <addCharacterToArray+0xf8>
        inSignal = 1;
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <addCharacterToArray+0x120>)
 8003464:	2201      	movs	r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
        mpMenuState = 1;
 8003468:	4b10      	ldr	r3, [pc, #64]	; (80034ac <addCharacterToArray+0x130>)
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
        printArray();
 800346e:	f000 f81f 	bl	80034b0 <printArray>
}
 8003472:	e00a      	b.n	800348a <addCharacterToArray+0x10e>
    }else if(c == 'M') {
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	2b4d      	cmp	r3, #77	; 0x4d
 8003478:	d107      	bne.n	800348a <addCharacterToArray+0x10e>
        inSignal = 1;
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <addCharacterToArray+0x120>)
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
        mpMenuState = 3;
 8003480:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <addCharacterToArray+0x130>)
 8003482:	2203      	movs	r2, #3
 8003484:	701a      	strb	r2, [r3, #0]
        printArray();
 8003486:	f000 f813 	bl	80034b0 <printArray>
}
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20002108 	.word	0x20002108
 8003498:	20002106 	.word	0x20002106
 800349c:	2000216c 	.word	0x2000216c
 80034a0:	0800bef4 	.word	0x0800bef4
 80034a4:	20001fec 	.word	0x20001fec
 80034a8:	20002105 	.word	0x20002105
 80034ac:	2000216e 	.word	0x2000216e

080034b0 <printArray>:

void printArray() {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
    printf("%s\r\n", characterArray);
 80034b4:	4905      	ldr	r1, [pc, #20]	; (80034cc <printArray+0x1c>)
 80034b6:	4806      	ldr	r0, [pc, #24]	; (80034d0 <printArray+0x20>)
 80034b8:	f007 f8e8 	bl	800a68c <iprintf>
    memset(characterArray, '\0', sizeof(characterArray));
 80034bc:	2264      	movs	r2, #100	; 0x64
 80034be:	2100      	movs	r1, #0
 80034c0:	4802      	ldr	r0, [pc, #8]	; (80034cc <printArray+0x1c>)
 80034c2:	f007 f8db 	bl	800a67c <memset>
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20002108 	.word	0x20002108
 80034d0:	0800bef8 	.word	0x0800bef8

080034d4 <returnTest>:

int returnTest() {
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
    return inSignal;
 80034d8:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <returnTest+0x14>)
 80034da:	781b      	ldrb	r3, [r3, #0]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	2000216c 	.word	0x2000216c

080034ec <turnOffTest>:

void turnOffTest() {
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
    inSignal = 0;
 80034f0:	4b03      	ldr	r3, [pc, #12]	; (8003500 <turnOffTest+0x14>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	2000216c 	.word	0x2000216c

08003504 <returnConnection>:

int returnConnection() {
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
    return connected;
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <returnConnection+0x14>)
 800350a:	781b      	ldrb	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20002105 	.word	0x20002105

0800351c <setMPGameChoice>:

void setMPGameChoice() {
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
    mpGameChoice = characterArray[0] - '0';
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <setMPGameChoice+0x20>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	3b30      	subs	r3, #48	; 0x30
 8003526:	b2da      	uxtb	r2, r3
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <setMPGameChoice+0x24>)
 800352a:	701a      	strb	r2, [r3, #0]
    printf("%d\r\n", mpGameChoice);
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <setMPGameChoice+0x24>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	4619      	mov	r1, r3
 8003532:	4804      	ldr	r0, [pc, #16]	; (8003544 <setMPGameChoice+0x28>)
 8003534:	f007 f8aa 	bl	800a68c <iprintf>
}
 8003538:	bf00      	nop
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20002108 	.word	0x20002108
 8003540:	2000216d 	.word	0x2000216d
 8003544:	0800bf00 	.word	0x0800bf00

08003548 <returnMPGameChoice>:

uint8_t returnMPGameChoice() {
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
    return mpGameChoice;
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <returnMPGameChoice+0x14>)
 800354e:	781b      	ldrb	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	2000216d 	.word	0x2000216d

08003560 <setCoord>:

uint8_t returnCoord() {
    return x_coord;
}

void setCoord() {
 8003560:	b580      	push	{r7, lr}
 8003562:	b09a      	sub	sp, #104	; 0x68
 8003564:	af00      	add	r7, sp, #0
    char buffer[100];
    strncpy(buffer, characterArray, strlen(characterArray) - 2);
 8003566:	4810      	ldr	r0, [pc, #64]	; (80035a8 <setCoord+0x48>)
 8003568:	f7fc fe32 	bl	80001d0 <strlen>
 800356c:	4603      	mov	r3, r0
 800356e:	1e9a      	subs	r2, r3, #2
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	490d      	ldr	r1, [pc, #52]	; (80035a8 <setCoord+0x48>)
 8003574:	4618      	mov	r0, r3
 8003576:	f007 f9c6 	bl	800a906 <strncpy>
    buffer[strlen(characterArray) - 1] = '\0';
 800357a:	480b      	ldr	r0, [pc, #44]	; (80035a8 <setCoord+0x48>)
 800357c:	f7fc fe28 	bl	80001d0 <strlen>
 8003580:	4603      	mov	r3, r0
 8003582:	3b01      	subs	r3, #1
 8003584:	3368      	adds	r3, #104	; 0x68
 8003586:	443b      	add	r3, r7
 8003588:	2200      	movs	r2, #0
 800358a:	f803 2c64 	strb.w	r2, [r3, #-100]

    x_coord = (uint8_t)atoi(buffer);
 800358e:	1d3b      	adds	r3, r7, #4
 8003590:	4618      	mov	r0, r3
 8003592:	f007 f844 	bl	800a61e <atoi>
 8003596:	4603      	mov	r3, r0
 8003598:	b2da      	uxtb	r2, r3
 800359a:	4b04      	ldr	r3, [pc, #16]	; (80035ac <setCoord+0x4c>)
 800359c:	701a      	strb	r2, [r3, #0]
}
 800359e:	bf00      	nop
 80035a0:	3768      	adds	r7, #104	; 0x68
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20002108 	.word	0x20002108
 80035ac:	2000216f 	.word	0x2000216f

080035b0 <closeConnection>:

void closeConnection() {
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
    connected = 0;
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <closeConnection+0x1c>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
    mp = disabled;
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <closeConnection+0x20>)
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20002105 	.word	0x20002105
 80035d0:	20002106 	.word	0x20002106

080035d4 <returnMPMenuState>:

uint8_t returnMPMenuState() {
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
    return mpMenuState;
 80035d8:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <returnMPMenuState+0x14>)
 80035da:	781b      	ldrb	r3, [r3, #0]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	2000216e 	.word	0x2000216e

080035ec <initSpaceInvaders>:
 * initialises ammo by clearing all values using initAmmo()
 * initialises comets by clearing all values using initComets()
 * initialises stars by clearing all values using initStars()
 *
 */
void initSpaceInvaders(){
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
    money = 0;
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <initSpaceInvaders+0x6c>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
    lives = 3;
 80035f6:	4b19      	ldr	r3, [pc, #100]	; (800365c <initSpaceInvaders+0x70>)
 80035f8:	2203      	movs	r2, #3
 80035fa:	701a      	strb	r2, [r3, #0]

    Displ_CLS(DARK_GREY);
 80035fc:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003600:	f001 fe00 	bl	8005204 <Displ_CLS>
    // Seed the random number generator
    srand(HAL_GetTick());
 8003604:	f002 fa6a 	bl	8005adc <HAL_GetTick>
 8003608:	4603      	mov	r3, r0
 800360a:	4618      	mov	r0, r3
 800360c:	f007 f8cc 	bl	800a7a8 <srand>
    comet_delay = RANDOM(5,20);
 8003610:	f007 f8f8 	bl	800a804 <rand>
 8003614:	4603      	mov	r3, r0
 8003616:	425a      	negs	r2, r3
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	f002 020f 	and.w	r2, r2, #15
 8003620:	bf58      	it	pl
 8003622:	4253      	negpl	r3, r2
 8003624:	b2db      	uxtb	r3, r3
 8003626:	3305      	adds	r3, #5
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <initSpaceInvaders+0x74>)
 800362c:	701a      	strb	r2, [r3, #0]
    initSpaceShip();
 800362e:	f000 f81f 	bl	8003670 <initSpaceShip>
    initAmmo(&ammo,0);
 8003632:	2100      	movs	r1, #0
 8003634:	480b      	ldr	r0, [pc, #44]	; (8003664 <initSpaceInvaders+0x78>)
 8003636:	f000 f827 	bl	8003688 <initAmmo>
    if(in_multiplayer){
 800363a:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <initSpaceInvaders+0x7c>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <initSpaceInvaders+0x5e>
        initAmmo(&enemy_ammo,1);
 8003642:	2101      	movs	r1, #1
 8003644:	4809      	ldr	r0, [pc, #36]	; (800366c <initSpaceInvaders+0x80>)
 8003646:	f000 f81f 	bl	8003688 <initAmmo>
    }
    initComets();
 800364a:	f000 f845 	bl	80036d8 <initComets>
    initStars();
 800364e:	f000 f86d 	bl	800372c <initStars>
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200021d4 	.word	0x200021d4
 800365c:	20000049 	.word	0x20000049
 8003660:	200021d8 	.word	0x200021d8
 8003664:	20002170 	.word	0x20002170
 8003668:	20000051 	.word	0x20000051
 800366c:	20002180 	.word	0x20002180

08003670 <initSpaceShip>:

void initSpaceShip(){
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
    SpaceShip.x = SCREEN_WIDTH/2;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <initSpaceShip+0x14>)
 8003676:	2228      	movs	r2, #40	; 0x28
 8003678:	701a      	strb	r2, [r3, #0]
}
 800367a:	bf00      	nop
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	2000004c 	.word	0x2000004c

08003688 <initAmmo>:

void initAmmo(bullets *am,int enemy){
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
    am->enemy = enemy;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	b25a      	sxtb	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	701a      	strb	r2, [r3, #0]
    am->in_play=0;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	705a      	strb	r2, [r3, #1]
    for (int i = 0;i<MAX_BULLETS;i++){
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	e00e      	b.n	80036c4 <initAmmo+0x3c>
        am->bullet_ar[i].x = -1;
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	4413      	add	r3, r2
 80036ae:	22ff      	movs	r2, #255	; 0xff
 80036b0:	709a      	strb	r2, [r3, #2]
        am->bullet_ar[i].y = -1;
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	4413      	add	r3, r2
 80036ba:	22ff      	movs	r2, #255	; 0xff
 80036bc:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_BULLETS;i++){
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	3301      	adds	r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b05      	cmp	r3, #5
 80036c8:	dded      	ble.n	80036a6 <initAmmo+0x1e>
    }
}
 80036ca:	bf00      	nop
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <initComets>:

void initComets(){
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
    Comet.in_play = 0;
 80036de:	4b12      	ldr	r3, [pc, #72]	; (8003728 <initComets+0x50>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 80036e4:	2300      	movs	r3, #0
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	e014      	b.n	8003714 <initComets+0x3c>
        COMET_X(i) = -1;
 80036ea:	4a0f      	ldr	r2, [pc, #60]	; (8003728 <initComets+0x50>)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	22ff      	movs	r2, #255	; 0xff
 80036f4:	705a      	strb	r2, [r3, #1]
        COMET_Y(i) = -1;
 80036f6:	4a0c      	ldr	r2, [pc, #48]	; (8003728 <initComets+0x50>)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	22ff      	movs	r2, #255	; 0xff
 8003700:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(i) = 2;
 8003702:	4a09      	ldr	r2, [pc, #36]	; (8003728 <initComets+0x50>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	2202      	movs	r2, #2
 800370c:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_COMETS;i++){
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3301      	adds	r3, #1
 8003712:	607b      	str	r3, [r7, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b09      	cmp	r3, #9
 8003718:	dde7      	ble.n	80036ea <initComets+0x12>
    }
}
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	20002190 	.word	0x20002190

0800372c <initStars>:

void initStars(){
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
    Star.in_play = 0;
 8003732:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <initStars+0x44>)
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 8003738:	2300      	movs	r3, #0
 800373a:	607b      	str	r3, [r7, #4]
 800373c:	e00e      	b.n	800375c <initStars+0x30>
    	STAR_X(i) = -1;
 800373e:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <initStars+0x44>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	22ff      	movs	r2, #255	; 0xff
 8003748:	705a      	strb	r2, [r3, #1]
    	STAR_Y(i) = -1;
 800374a:	4a09      	ldr	r2, [pc, #36]	; (8003770 <initStars+0x44>)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	22ff      	movs	r2, #255	; 0xff
 8003754:	709a      	strb	r2, [r3, #2]
    for (int i = 0;i<MAX_COMETS;i++){
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3301      	adds	r3, #1
 800375a:	607b      	str	r3, [r7, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b09      	cmp	r3, #9
 8003760:	dded      	ble.n	800373e <initStars+0x12>
    }
}
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	200021bc 	.word	0x200021bc

08003774 <spawnComet>:

void spawnComet(){
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 8003778:	4b3d      	ldr	r3, [pc, #244]	; (8003870 <spawnComet+0xfc>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d16e      	bne.n	800385e <spawnComet+0xea>
 8003780:	4b3c      	ldr	r3, [pc, #240]	; (8003874 <spawnComet+0x100>)
 8003782:	f993 3000 	ldrsb.w	r3, [r3]
 8003786:	2b09      	cmp	r3, #9
 8003788:	dc69      	bgt.n	800385e <spawnComet+0xea>
    	COMET_X(Comet.in_play) = RANDOM(PLAYABLE_OFFSET, PLAYABLE_MAX);
 800378a:	f007 f83b 	bl	800a804 <rand>
 800378e:	4602      	mov	r2, r0
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <spawnComet+0x104>)
 8003792:	fb83 1302 	smull	r1, r3, r3, r2
 8003796:	4413      	add	r3, r2
 8003798:	1199      	asrs	r1, r3, #6
 800379a:	17d3      	asrs	r3, r2, #31
 800379c:	1ac9      	subs	r1, r1, r3
 800379e:	460b      	mov	r3, r1
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	440b      	add	r3, r1
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	1a5b      	subs	r3, r3, r1
 80037a8:	1ad1      	subs	r1, r2, r3
 80037aa:	b2cb      	uxtb	r3, r1
 80037ac:	4a31      	ldr	r2, [pc, #196]	; (8003874 <spawnComet+0x100>)
 80037ae:	f992 2000 	ldrsb.w	r2, [r2]
 80037b2:	4610      	mov	r0, r2
 80037b4:	3305      	adds	r3, #5
 80037b6:	b2d9      	uxtb	r1, r3
 80037b8:	4a2e      	ldr	r2, [pc, #184]	; (8003874 <spawnComet+0x100>)
 80037ba:	0083      	lsls	r3, r0, #2
 80037bc:	4413      	add	r3, r2
 80037be:	460a      	mov	r2, r1
 80037c0:	705a      	strb	r2, [r3, #1]
    	COMET_Y(Comet.in_play) = 0;
 80037c2:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <spawnComet+0x100>)
 80037c4:	f993 3000 	ldrsb.w	r3, [r3]
 80037c8:	4a2a      	ldr	r2, [pc, #168]	; (8003874 <spawnComet+0x100>)
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	2200      	movs	r2, #0
 80037d0:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(Comet.in_play) = RANDOM(MIN_COMET_SIZE,MAX_COMET_SIZE);
 80037d2:	f007 f817 	bl	800a804 <rand>
 80037d6:	4602      	mov	r2, r0
 80037d8:	4b28      	ldr	r3, [pc, #160]	; (800387c <spawnComet+0x108>)
 80037da:	fb83 3102 	smull	r3, r1, r3, r2
 80037de:	17d3      	asrs	r3, r2, #31
 80037e0:	1ac9      	subs	r1, r1, r3
 80037e2:	460b      	mov	r3, r1
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	440b      	add	r3, r1
 80037e8:	1ad1      	subs	r1, r2, r3
 80037ea:	b2cb      	uxtb	r3, r1
 80037ec:	3302      	adds	r3, #2
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	4b20      	ldr	r3, [pc, #128]	; (8003874 <spawnComet+0x100>)
 80037f2:	f993 3000 	ldrsb.w	r3, [r3]
 80037f6:	b251      	sxtb	r1, r2
 80037f8:	4a1e      	ldr	r2, [pc, #120]	; (8003874 <spawnComet+0x100>)
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	460a      	mov	r2, r1
 8003800:	70da      	strb	r2, [r3, #3]

        COMET_COINS(Comet.in_play) = 7 - COMET_SIZE(Comet.in_play);
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <spawnComet+0x100>)
 8003804:	f993 3000 	ldrsb.w	r3, [r3]
 8003808:	4a1a      	ldr	r2, [pc, #104]	; (8003874 <spawnComet+0x100>)
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f1c3 0307 	rsb	r3, r3, #7
 8003818:	b2da      	uxtb	r2, r3
 800381a:	4b16      	ldr	r3, [pc, #88]	; (8003874 <spawnComet+0x100>)
 800381c:	f993 3000 	ldrsb.w	r3, [r3]
 8003820:	b251      	sxtb	r1, r2
 8003822:	4a14      	ldr	r2, [pc, #80]	; (8003874 <spawnComet+0x100>)
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	460a      	mov	r2, r1
 800382a:	711a      	strb	r2, [r3, #4]
        comet_delay = RANDOM(5,20);
 800382c:	f006 ffea 	bl	800a804 <rand>
 8003830:	4603      	mov	r3, r0
 8003832:	425a      	negs	r2, r3
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	f002 020f 	and.w	r2, r2, #15
 800383c:	bf58      	it	pl
 800383e:	4253      	negpl	r3, r2
 8003840:	b2db      	uxtb	r3, r3
 8003842:	3305      	adds	r3, #5
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <spawnComet+0xfc>)
 8003848:	701a      	strb	r2, [r3, #0]
        Comet.in_play++;
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <spawnComet+0x100>)
 800384c:	f993 3000 	ldrsb.w	r3, [r3]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	3301      	adds	r3, #1
 8003854:	b2db      	uxtb	r3, r3
 8003856:	b25a      	sxtb	r2, r3
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <spawnComet+0x100>)
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e006      	b.n	800386c <spawnComet+0xf8>
    }else{
        comet_delay--;
 800385e:	4b04      	ldr	r3, [pc, #16]	; (8003870 <spawnComet+0xfc>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	3b01      	subs	r3, #1
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b02      	ldr	r3, [pc, #8]	; (8003870 <spawnComet+0xfc>)
 8003868:	701a      	strb	r2, [r3, #0]
    }

}
 800386a:	bf00      	nop
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}
 8003870:	200021d8 	.word	0x200021d8
 8003874:	20002190 	.word	0x20002190
 8003878:	e6c2b449 	.word	0xe6c2b449
 800387c:	55555556 	.word	0x55555556

08003880 <spawnBullet>:

void spawnBullet(int enemy){
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    int x_val = SpaceShip.x;
 8003888:	4b22      	ldr	r3, [pc, #136]	; (8003914 <spawnBullet+0x94>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]
    int y_val = SpaceShip.y - 3;
 800388e:	4b21      	ldr	r3, [pc, #132]	; (8003914 <spawnBullet+0x94>)
 8003890:	785b      	ldrb	r3, [r3, #1]
 8003892:	3b03      	subs	r3, #3
 8003894:	617b      	str	r3, [r7, #20]
    bullets *am_p;
    if (enemy){
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <spawnBullet+0x22>
        am_p = &enemy_ammo;
 800389c:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <spawnBullet+0x98>)
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	e001      	b.n	80038a6 <spawnBullet+0x26>
    }else{
        am_p = &ammo;
 80038a2:	4b1e      	ldr	r3, [pc, #120]	; (800391c <spawnBullet+0x9c>)
 80038a4:	613b      	str	r3, [r7, #16]
    }
    if(am_p->in_play < MAX_BULLETS && bullet_delay == 0){
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80038ac:	2b05      	cmp	r3, #5
 80038ae:	dc2a      	bgt.n	8003906 <spawnBullet+0x86>
 80038b0:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <spawnBullet+0xa0>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d126      	bne.n	8003906 <spawnBullet+0x86>
        if(am_p->enemy){
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f993 3000 	ldrsb.w	r3, [r3]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <spawnBullet+0x46>
            //x_val = read the input from multiplayer;
            y_val = 3;
 80038c2:	2303      	movs	r3, #3
 80038c4:	617b      	str	r3, [r7, #20]
        }
        am_p->bullet_ar[am_p->in_play].x = x_val;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	b2d1      	uxtb	r1, r2
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4413      	add	r3, r2
 80038d6:	460a      	mov	r2, r1
 80038d8:	709a      	strb	r2, [r3, #2]
        am_p->bullet_ar[am_p->in_play].y = y_val;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	b2d1      	uxtb	r1, r2
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	460a      	mov	r2, r1
 80038ec:	70da      	strb	r2, [r3, #3]
        am_p->in_play++;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	3301      	adds	r3, #1
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	b25a      	sxtb	r2, r3
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	705a      	strb	r2, [r3, #1]
        bullet_delay = MAX_DELAY_BULLETS;
 8003900:	4b07      	ldr	r3, [pc, #28]	; (8003920 <spawnBullet+0xa0>)
 8003902:	220a      	movs	r2, #10
 8003904:	701a      	strb	r2, [r3, #0]
    }
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	2000004c 	.word	0x2000004c
 8003918:	20002180 	.word	0x20002180
 800391c:	20002170 	.word	0x20002170
 8003920:	200021d1 	.word	0x200021d1

08003924 <spawnStar>:

void spawnStar(){
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 8003928:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <spawnStar+0xa4>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d141      	bne.n	80039b4 <spawnStar+0x90>
 8003930:	4b26      	ldr	r3, [pc, #152]	; (80039cc <spawnStar+0xa8>)
 8003932:	f993 3000 	ldrsb.w	r3, [r3]
 8003936:	2b09      	cmp	r3, #9
 8003938:	dc3c      	bgt.n	80039b4 <spawnStar+0x90>
    	STAR_X(Star.in_play) = RANDOM(PLAYABLE_OFFSET,PLAYABLE_MAX);
 800393a:	f006 ff63 	bl	800a804 <rand>
 800393e:	4602      	mov	r2, r0
 8003940:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <spawnStar+0xac>)
 8003942:	fb83 1302 	smull	r1, r3, r3, r2
 8003946:	4413      	add	r3, r2
 8003948:	1199      	asrs	r1, r3, #6
 800394a:	17d3      	asrs	r3, r2, #31
 800394c:	1ac9      	subs	r1, r1, r3
 800394e:	460b      	mov	r3, r1
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	440b      	add	r3, r1
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	1a5b      	subs	r3, r3, r1
 8003958:	1ad1      	subs	r1, r2, r3
 800395a:	b2cb      	uxtb	r3, r1
 800395c:	4a1b      	ldr	r2, [pc, #108]	; (80039cc <spawnStar+0xa8>)
 800395e:	f992 2000 	ldrsb.w	r2, [r2]
 8003962:	4610      	mov	r0, r2
 8003964:	3305      	adds	r3, #5
 8003966:	b2d9      	uxtb	r1, r3
 8003968:	4a18      	ldr	r2, [pc, #96]	; (80039cc <spawnStar+0xa8>)
 800396a:	0043      	lsls	r3, r0, #1
 800396c:	4413      	add	r3, r2
 800396e:	460a      	mov	r2, r1
 8003970:	705a      	strb	r2, [r3, #1]
    	STAR_Y(Star.in_play) = 0;
 8003972:	4b16      	ldr	r3, [pc, #88]	; (80039cc <spawnStar+0xa8>)
 8003974:	f993 3000 	ldrsb.w	r3, [r3]
 8003978:	4a14      	ldr	r2, [pc, #80]	; (80039cc <spawnStar+0xa8>)
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4413      	add	r3, r2
 800397e:	2200      	movs	r2, #0
 8003980:	709a      	strb	r2, [r3, #2]
        star_delay = RANDOM(5,20);
 8003982:	f006 ff3f 	bl	800a804 <rand>
 8003986:	4603      	mov	r3, r0
 8003988:	425a      	negs	r2, r3
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	f002 020f 	and.w	r2, r2, #15
 8003992:	bf58      	it	pl
 8003994:	4253      	negpl	r3, r2
 8003996:	b2db      	uxtb	r3, r3
 8003998:	3305      	adds	r3, #5
 800399a:	b2da      	uxtb	r2, r3
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <spawnStar+0xa4>)
 800399e:	701a      	strb	r2, [r3, #0]
        Star.in_play++;
 80039a0:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <spawnStar+0xa8>)
 80039a2:	f993 3000 	ldrsb.w	r3, [r3]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	3301      	adds	r3, #1
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	b25a      	sxtb	r2, r3
 80039ae:	4b07      	ldr	r3, [pc, #28]	; (80039cc <spawnStar+0xa8>)
 80039b0:	701a      	strb	r2, [r3, #0]
 80039b2:	e006      	b.n	80039c2 <spawnStar+0x9e>
    }else{
        star_delay--;
 80039b4:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <spawnStar+0xa4>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	4b02      	ldr	r3, [pc, #8]	; (80039c8 <spawnStar+0xa4>)
 80039be:	701a      	strb	r2, [r3, #0]
    }
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200021d9 	.word	0x200021d9
 80039cc:	200021bc 	.word	0x200021bc
 80039d0:	e6c2b449 	.word	0xe6c2b449

080039d4 <moveBullets>:

void moveBullets(){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
	displayAmmo(DARK_GREY);
 80039da:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80039de:	f000 fbc7 	bl	8004170 <displayAmmo>
	for(int i = 0; i < ammo.in_play; i++){
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	e056      	b.n	8003a96 <moveBullets+0xc2>
		for (int j = 0; j < Comet.in_play; j++){
 80039e8:	2300      	movs	r3, #0
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	e03c      	b.n	8003a68 <moveBullets+0x94>
			if(AMMO_X(i) >= COMET_X(j) && AMMO_X(i) < COMET_X(j) + COMET_SIZE(j)){
 80039ee:	4a31      	ldr	r2, [pc, #196]	; (8003ab4 <moveBullets+0xe0>)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4413      	add	r3, r2
 80039f6:	789a      	ldrb	r2, [r3, #2]
 80039f8:	492f      	ldr	r1, [pc, #188]	; (8003ab8 <moveBullets+0xe4>)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	785b      	ldrb	r3, [r3, #1]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d32d      	bcc.n	8003a62 <moveBullets+0x8e>
 8003a06:	4a2b      	ldr	r2, [pc, #172]	; (8003ab4 <moveBullets+0xe0>)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4413      	add	r3, r2
 8003a0e:	789b      	ldrb	r3, [r3, #2]
 8003a10:	4619      	mov	r1, r3
 8003a12:	4a29      	ldr	r2, [pc, #164]	; (8003ab8 <moveBullets+0xe4>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	785b      	ldrb	r3, [r3, #1]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	4a26      	ldr	r2, [pc, #152]	; (8003ab8 <moveBullets+0xe4>)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003a2a:	4403      	add	r3, r0
 8003a2c:	4299      	cmp	r1, r3
 8003a2e:	da18      	bge.n	8003a62 <moveBullets+0x8e>
				if (AMMO_Y(i) <= COMET_Y(j) + COMET_SIZE(j) - 1){
 8003a30:	4a21      	ldr	r2, [pc, #132]	; (8003ab8 <moveBullets+0xe4>)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	789b      	ldrb	r3, [r3, #2]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4a1e      	ldr	r2, [pc, #120]	; (8003ab8 <moveBullets+0xe4>)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003a48:	18ca      	adds	r2, r1, r3
 8003a4a:	491a      	ldr	r1, [pc, #104]	; (8003ab4 <moveBullets+0xe0>)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	440b      	add	r3, r1
 8003a52:	78db      	ldrb	r3, [r3, #3]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	dd04      	ble.n	8003a62 <moveBullets+0x8e>
					hitComet(i,j);
 8003a58:	6839      	ldr	r1, [r7, #0]
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fab8 	bl	8003fd0 <hitComet>
					continue;
 8003a60:	bf00      	nop
		for (int j = 0; j < Comet.in_play; j++){
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	3301      	adds	r3, #1
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <moveBullets+0xe4>)
 8003a6a:	f993 3000 	ldrsb.w	r3, [r3]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4293      	cmp	r3, r2
 8003a74:	dbbb      	blt.n	80039ee <moveBullets+0x1a>
				}
			}

		}
		AMMO_Y(i)--;
 8003a76:	4a0f      	ldr	r2, [pc, #60]	; (8003ab4 <moveBullets+0xe0>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	78db      	ldrb	r3, [r3, #3]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b2d9      	uxtb	r1, r3
 8003a84:	4a0b      	ldr	r2, [pc, #44]	; (8003ab4 <moveBullets+0xe0>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	4413      	add	r3, r2
 8003a8c:	460a      	mov	r2, r1
 8003a8e:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < ammo.in_play; i++){
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3301      	adds	r3, #1
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <moveBullets+0xe0>)
 8003a98:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	dba1      	blt.n	80039e8 <moveBullets+0x14>
				AMMO_Y(j) = AMMO_Y(j+1);
			}
			ammo.in_play--;
		}
	}
	displayAmmo(RED);
 8003aa4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003aa8:	f000 fb62 	bl	8004170 <displayAmmo>
}
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	20002170 	.word	0x20002170
 8003ab8:	20002190 	.word	0x20002190

08003abc <moveEnemyBullets>:

void moveEnemyBullets(void){
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
    if (!in_multiplayer){
 8003ac2:	4b57      	ldr	r3, [pc, #348]	; (8003c20 <moveEnemyBullets+0x164>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80a6 	beq.w	8003c18 <moveEnemyBullets+0x15c>
        //QD << "not multiplayer";  // change to uart debug
        return;
    }
    displayAmmo(DARK_GREY);
 8003acc:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003ad0:	f000 fb4e 	bl	8004170 <displayAmmo>
    for(int i = 0; i < enemy_ammo.in_play; i++){
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e091      	b.n	8003bfe <moveEnemyBullets+0x142>
        if(E_AMMO_X(i) <= SPACESHIP_X_BOUND(+) && E_AMMO_X(i) >= SPACESHIP_X_BOUND(-)){
 8003ada:	4a52      	ldr	r2, [pc, #328]	; (8003c24 <moveEnemyBullets+0x168>)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	4413      	add	r3, r2
 8003ae2:	789b      	ldrb	r3, [r3, #2]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b50      	ldr	r3, [pc, #320]	; (8003c28 <moveEnemyBullets+0x16c>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	3302      	adds	r3, #2
 8003aec:	429a      	cmp	r2, r3
 8003aee:	dc45      	bgt.n	8003b7c <moveEnemyBullets+0xc0>
 8003af0:	4a4c      	ldr	r2, [pc, #304]	; (8003c24 <moveEnemyBullets+0x168>)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4413      	add	r3, r2
 8003af8:	789b      	ldrb	r3, [r3, #2]
 8003afa:	461a      	mov	r2, r3
 8003afc:	4b4a      	ldr	r3, [pc, #296]	; (8003c28 <moveEnemyBullets+0x16c>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	3b02      	subs	r3, #2
 8003b02:	429a      	cmp	r2, r3
 8003b04:	db3a      	blt.n	8003b7c <moveEnemyBullets+0xc0>
            if (E_AMMO_Y(i) >= SPACESHIP_Y_BOUND && hit == 0){
 8003b06:	4a47      	ldr	r2, [pc, #284]	; (8003c24 <moveEnemyBullets+0x168>)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	4413      	add	r3, r2
 8003b0e:	78db      	ldrb	r3, [r3, #3]
 8003b10:	461a      	mov	r2, r3
 8003b12:	4b45      	ldr	r3, [pc, #276]	; (8003c28 <moveEnemyBullets+0x16c>)
 8003b14:	785b      	ldrb	r3, [r3, #1]
 8003b16:	3b02      	subs	r3, #2
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	db2f      	blt.n	8003b7c <moveEnemyBullets+0xc0>
 8003b1c:	4b43      	ldr	r3, [pc, #268]	; (8003c2c <moveEnemyBullets+0x170>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d12b      	bne.n	8003b7c <moveEnemyBullets+0xc0>
                beenHit();
 8003b24:	f000 fca4 	bl	8004470 <beenHit>
                for(int j = i; j < MAX_BULLETS - 1; j++){
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	e01a      	b.n	8003b64 <moveEnemyBullets+0xa8>
                	E_AMMO_X(j) = E_AMMO_X(j+1);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	3301      	adds	r3, #1
 8003b32:	4a3c      	ldr	r2, [pc, #240]	; (8003c24 <moveEnemyBullets+0x168>)
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	4413      	add	r3, r2
 8003b38:	7899      	ldrb	r1, [r3, #2]
 8003b3a:	4a3a      	ldr	r2, [pc, #232]	; (8003c24 <moveEnemyBullets+0x168>)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	460a      	mov	r2, r1
 8003b44:	709a      	strb	r2, [r3, #2]
                	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	4a36      	ldr	r2, [pc, #216]	; (8003c24 <moveEnemyBullets+0x168>)
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	4413      	add	r3, r2
 8003b50:	78d9      	ldrb	r1, [r3, #3]
 8003b52:	4a34      	ldr	r2, [pc, #208]	; (8003c24 <moveEnemyBullets+0x168>)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	4413      	add	r3, r2
 8003b5a:	460a      	mov	r2, r1
 8003b5c:	70da      	strb	r2, [r3, #3]
                for(int j = i; j < MAX_BULLETS - 1; j++){
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	3301      	adds	r3, #1
 8003b62:	60bb      	str	r3, [r7, #8]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	dde1      	ble.n	8003b2e <moveEnemyBullets+0x72>
                }
                enemy_ammo.in_play--;
 8003b6a:	4b2e      	ldr	r3, [pc, #184]	; (8003c24 <moveEnemyBullets+0x168>)
 8003b6c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	b25a      	sxtb	r2, r3
 8003b78:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <moveEnemyBullets+0x168>)
 8003b7a:	705a      	strb	r2, [r3, #1]
            }
        }
        E_AMMO_Y(i)++;
 8003b7c:	4a29      	ldr	r2, [pc, #164]	; (8003c24 <moveEnemyBullets+0x168>)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	4413      	add	r3, r2
 8003b84:	78db      	ldrb	r3, [r3, #3]
 8003b86:	3301      	adds	r3, #1
 8003b88:	b2d9      	uxtb	r1, r3
 8003b8a:	4a26      	ldr	r2, [pc, #152]	; (8003c24 <moveEnemyBullets+0x168>)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4413      	add	r3, r2
 8003b92:	460a      	mov	r2, r1
 8003b94:	70da      	strb	r2, [r3, #3]
        if (E_AMMO_Y(i) > SCREEN_HEIGHT - 1){
 8003b96:	4a23      	ldr	r2, [pc, #140]	; (8003c24 <moveEnemyBullets+0x168>)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4413      	add	r3, r2
 8003b9e:	78db      	ldrb	r3, [r3, #3]
 8003ba0:	2b3b      	cmp	r3, #59	; 0x3b
 8003ba2:	d929      	bls.n	8003bf8 <moveEnemyBullets+0x13c>
            for(int j = i; j < MAX_BULLETS - 1; j++){
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	e01a      	b.n	8003be0 <moveEnemyBullets+0x124>
            	E_AMMO_X(j) = E_AMMO_X(j+1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3301      	adds	r3, #1
 8003bae:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <moveEnemyBullets+0x168>)
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	7899      	ldrb	r1, [r3, #2]
 8003bb6:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <moveEnemyBullets+0x168>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	709a      	strb	r2, [r3, #2]
            	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <moveEnemyBullets+0x168>)
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	78d9      	ldrb	r1, [r3, #3]
 8003bce:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <moveEnemyBullets+0x168>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4413      	add	r3, r2
 8003bd6:	460a      	mov	r2, r1
 8003bd8:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_BULLETS - 1; j++){
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	dde1      	ble.n	8003baa <moveEnemyBullets+0xee>
            }
            enemy_ammo.in_play--;
 8003be6:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <moveEnemyBullets+0x168>)
 8003be8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	b25a      	sxtb	r2, r3
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <moveEnemyBullets+0x168>)
 8003bf6:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < enemy_ammo.in_play; i++){
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <moveEnemyBullets+0x168>)
 8003c00:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003c04:	461a      	mov	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	f6ff af66 	blt.w	8003ada <moveEnemyBullets+0x1e>
        }
    }
    displayAmmo(LIGHT_BLUE);
 8003c0e:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003c12:	f000 faad 	bl	8004170 <displayAmmo>
 8003c16:	e000      	b.n	8003c1a <moveEnemyBullets+0x15e>
        return;
 8003c18:	bf00      	nop
}
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000051 	.word	0x20000051
 8003c24:	20002180 	.word	0x20002180
 8003c28:	2000004c 	.word	0x2000004c
 8003c2c:	20001eeb 	.word	0x20001eeb

08003c30 <moveComets>:

void moveComets(){
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
	displayComets(DARK_GREY);
 8003c36:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003c3a:	f000 faf3 	bl	8004224 <displayComets>
	for (int i = 0; i<Comet.in_play; i++){
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e0eb      	b.n	8003e1c <moveComets+0x1ec>
		for(int j = 0; j < COMET_SIZE(i); j++){
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	e05b      	b.n	8003d02 <moveComets+0xd2>
			if(COMET_X(i) + j <= SPACESHIP_X_BOUND(+) && COMET_X(i) + j >= SPACESHIP_X_BOUND(-)){
 8003c4a:	4a7c      	ldr	r2, [pc, #496]	; (8003e3c <moveComets+0x20c>)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	785b      	ldrb	r3, [r3, #1]
 8003c54:	461a      	mov	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	441a      	add	r2, r3
 8003c5a:	4b79      	ldr	r3, [pc, #484]	; (8003e40 <moveComets+0x210>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	3302      	adds	r3, #2
 8003c60:	429a      	cmp	r2, r3
 8003c62:	dc4b      	bgt.n	8003cfc <moveComets+0xcc>
 8003c64:	4a75      	ldr	r2, [pc, #468]	; (8003e3c <moveComets+0x20c>)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	785b      	ldrb	r3, [r3, #1]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	441a      	add	r2, r3
 8003c74:	4b72      	ldr	r3, [pc, #456]	; (8003e40 <moveComets+0x210>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	3b02      	subs	r3, #2
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	db3e      	blt.n	8003cfc <moveComets+0xcc>
				if(powerUp == 2 && COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND){
 8003c7e:	4b71      	ldr	r3, [pc, #452]	; (8003e44 <moveComets+0x214>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d11d      	bne.n	8003cc2 <moveComets+0x92>
 8003c86:	4a6d      	ldr	r2, [pc, #436]	; (8003e3c <moveComets+0x20c>)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	789b      	ldrb	r3, [r3, #2]
 8003c90:	4619      	mov	r1, r3
 8003c92:	4a6a      	ldr	r2, [pc, #424]	; (8003e3c <moveComets+0x20c>)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003c9e:	18ca      	adds	r2, r1, r3
 8003ca0:	4b67      	ldr	r3, [pc, #412]	; (8003e40 <moveComets+0x210>)
 8003ca2:	785b      	ldrb	r3, [r3, #1]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	db0b      	blt.n	8003cc2 <moveComets+0x92>
					hitComet(420,i);
 8003caa:	68f9      	ldr	r1, [r7, #12]
 8003cac:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003cb0:	f000 f98e 	bl	8003fd0 <hitComet>
					displayPowerup(DARK_GREY);
 8003cb4:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003cb8:	f000 fc3e 	bl	8004538 <displayPowerup>
					powerUp = 0;
 8003cbc:	4b61      	ldr	r3, [pc, #388]	; (8003e44 <moveComets+0x214>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
				}
                if (COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND && hit == 0){
 8003cc2:	4a5e      	ldr	r2, [pc, #376]	; (8003e3c <moveComets+0x20c>)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	789b      	ldrb	r3, [r3, #2]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4a5b      	ldr	r2, [pc, #364]	; (8003e3c <moveComets+0x20c>)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003cda:	18ca      	adds	r2, r1, r3
 8003cdc:	4b58      	ldr	r3, [pc, #352]	; (8003e40 <moveComets+0x210>)
 8003cde:	785b      	ldrb	r3, [r3, #1]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	db0a      	blt.n	8003cfc <moveComets+0xcc>
 8003ce6:	4b58      	ldr	r3, [pc, #352]	; (8003e48 <moveComets+0x218>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <moveComets+0xcc>
                    hitComet(420,i);
 8003cee:	68f9      	ldr	r1, [r7, #12]
 8003cf0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003cf4:	f000 f96c 	bl	8003fd0 <hitComet>
                    beenHit();
 8003cf8:	f000 fbba 	bl	8004470 <beenHit>
		for(int j = 0; j < COMET_SIZE(i); j++){
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	4a4e      	ldr	r2, [pc, #312]	; (8003e3c <moveComets+0x20c>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4293      	cmp	r3, r2
 8003d14:	db99      	blt.n	8003c4a <moveComets+0x1a>
                }
            }
        }
        if(powerUp == 1 && SpaceShip.x >= COMET_X(i) && SpaceShip.x <= COMET_X(i) + COMET_SIZE(i)){
 8003d16:	4b4b      	ldr	r3, [pc, #300]	; (8003e44 <moveComets+0x214>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d130      	bne.n	8003d80 <moveComets+0x150>
 8003d1e:	4b48      	ldr	r3, [pc, #288]	; (8003e40 <moveComets+0x210>)
 8003d20:	781a      	ldrb	r2, [r3, #0]
 8003d22:	4946      	ldr	r1, [pc, #280]	; (8003e3c <moveComets+0x20c>)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	785b      	ldrb	r3, [r3, #1]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d327      	bcc.n	8003d80 <moveComets+0x150>
 8003d30:	4b43      	ldr	r3, [pc, #268]	; (8003e40 <moveComets+0x210>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	4619      	mov	r1, r3
 8003d36:	4a41      	ldr	r2, [pc, #260]	; (8003e3c <moveComets+0x20c>)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	785b      	ldrb	r3, [r3, #1]
 8003d40:	4618      	mov	r0, r3
 8003d42:	4a3e      	ldr	r2, [pc, #248]	; (8003e3c <moveComets+0x20c>)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003d4e:	4403      	add	r3, r0
 8003d50:	4299      	cmp	r1, r3
 8003d52:	dc15      	bgt.n	8003d80 <moveComets+0x150>
        	hitComet(420,i);
 8003d54:	68f9      	ldr	r1, [r7, #12]
 8003d56:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003d5a:	f000 f939 	bl	8003fd0 <hitComet>
        	if(powerUp_delay == 0){
 8003d5e:	4b3b      	ldr	r3, [pc, #236]	; (8003e4c <moveComets+0x21c>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <moveComets+0x144>
        		displayPowerup(DARK_GREY);
 8003d66:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003d6a:	f000 fbe5 	bl	8004538 <displayPowerup>
        		powerUp = 0;
 8003d6e:	4b35      	ldr	r3, [pc, #212]	; (8003e44 <moveComets+0x214>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]

        	}
        	powerUp_delay--;
 8003d74:	4b35      	ldr	r3, [pc, #212]	; (8003e4c <moveComets+0x21c>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <moveComets+0x21c>)
 8003d7e:	701a      	strb	r2, [r3, #0]
        }
        COMET_Y(i)++;
 8003d80:	4a2e      	ldr	r2, [pc, #184]	; (8003e3c <moveComets+0x20c>)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	789b      	ldrb	r3, [r3, #2]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	b2d9      	uxtb	r1, r3
 8003d8e:	4a2b      	ldr	r2, [pc, #172]	; (8003e3c <moveComets+0x20c>)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	460a      	mov	r2, r1
 8003d98:	709a      	strb	r2, [r3, #2]
        if (COMET_Y(i) > SCREEN_HEIGHT - 1){
 8003d9a:	4a28      	ldr	r2, [pc, #160]	; (8003e3c <moveComets+0x20c>)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	789b      	ldrb	r3, [r3, #2]
 8003da4:	2b3b      	cmp	r3, #59	; 0x3b
 8003da6:	d936      	bls.n	8003e16 <moveComets+0x1e6>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	607b      	str	r3, [r7, #4]
 8003dac:	e027      	b.n	8003dfe <moveComets+0x1ce>
            	COMET_X(j) = COMET_X(j+1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3301      	adds	r3, #1
 8003db2:	4a22      	ldr	r2, [pc, #136]	; (8003e3c <moveComets+0x20c>)
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	7859      	ldrb	r1, [r3, #1]
 8003dba:	4a20      	ldr	r2, [pc, #128]	; (8003e3c <moveComets+0x20c>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	460a      	mov	r2, r1
 8003dc4:	705a      	strb	r2, [r3, #1]
            	COMET_Y(j) = COMET_Y(j+1);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	4a1c      	ldr	r2, [pc, #112]	; (8003e3c <moveComets+0x20c>)
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	7899      	ldrb	r1, [r3, #2]
 8003dd2:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <moveComets+0x20c>)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	460a      	mov	r2, r1
 8003ddc:	709a      	strb	r2, [r3, #2]
                COMET_SIZE(j) = COMET_SIZE(j+1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3301      	adds	r3, #1
 8003de2:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <moveComets+0x20c>)
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003dec:	4a13      	ldr	r2, [pc, #76]	; (8003e3c <moveComets+0x20c>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	460a      	mov	r2, r1
 8003df6:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	607b      	str	r3, [r7, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	ddd4      	ble.n	8003dae <moveComets+0x17e>
            }
            Comet.in_play--;
 8003e04:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <moveComets+0x20c>)
 8003e06:	f993 3000 	ldrsb.w	r3, [r3]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	b25a      	sxtb	r2, r3
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <moveComets+0x20c>)
 8003e14:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<Comet.in_play; i++){
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <moveComets+0x20c>)
 8003e1e:	f993 3000 	ldrsb.w	r3, [r3]
 8003e22:	461a      	mov	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4293      	cmp	r3, r2
 8003e28:	f6ff af0c 	blt.w	8003c44 <moveComets+0x14>
        }
    }
    displayComets(GREY);
 8003e2c:	f249 6096 	movw	r0, #38550	; 0x9696
 8003e30:	f000 f9f8 	bl	8004224 <displayComets>
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20002190 	.word	0x20002190
 8003e40:	2000004c 	.word	0x2000004c
 8003e44:	200021da 	.word	0x200021da
 8003e48:	20001eeb 	.word	0x20001eeb
 8003e4c:	200021db 	.word	0x200021db

08003e50 <moveStars>:

void moveStars(){
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
	displayStars(DARK_GREY);
 8003e56:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003e5a:	f000 f959 	bl	8004110 <displayStars>
    for (int i = 0; i<Star.in_play; i++){
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	e040      	b.n	8003ee6 <moveStars+0x96>
    	STAR_Y(i)++;
 8003e64:	4a27      	ldr	r2, [pc, #156]	; (8003f04 <moveStars+0xb4>)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4413      	add	r3, r2
 8003e6c:	789b      	ldrb	r3, [r3, #2]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	b2d9      	uxtb	r1, r3
 8003e72:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <moveStars+0xb4>)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	4413      	add	r3, r2
 8003e7a:	460a      	mov	r2, r1
 8003e7c:	709a      	strb	r2, [r3, #2]
        if (STAR_Y(i) > SCREEN_HEIGHT - 4){
 8003e7e:	4a21      	ldr	r2, [pc, #132]	; (8003f04 <moveStars+0xb4>)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	789b      	ldrb	r3, [r3, #2]
 8003e88:	2b38      	cmp	r3, #56	; 0x38
 8003e8a:	d929      	bls.n	8003ee0 <moveStars+0x90>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	e01a      	b.n	8003ec8 <moveStars+0x78>
            	STAR_X(j) = STAR_X(j+1);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <moveStars+0xb4>)
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	7859      	ldrb	r1, [r3, #1]
 8003e9e:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <moveStars+0xb4>)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	460a      	mov	r2, r1
 8003ea8:	705a      	strb	r2, [r3, #1]
            	STAR_Y(j) = STAR_Y(j+1);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	3301      	adds	r3, #1
 8003eae:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <moveStars+0xb4>)
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	7899      	ldrb	r1, [r3, #2]
 8003eb6:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <moveStars+0xb4>)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	4413      	add	r3, r2
 8003ebe:	460a      	mov	r2, r1
 8003ec0:	709a      	strb	r2, [r3, #2]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	dde1      	ble.n	8003e92 <moveStars+0x42>
            }
            Star.in_play--;
 8003ece:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <moveStars+0xb4>)
 8003ed0:	f993 3000 	ldrsb.w	r3, [r3]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	b25a      	sxtb	r2, r3
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <moveStars+0xb4>)
 8003ede:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Star.in_play; i++){
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <moveStars+0xb4>)
 8003ee8:	f993 3000 	ldrsb.w	r3, [r3]
 8003eec:	461a      	mov	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	dbb7      	blt.n	8003e64 <moveStars+0x14>
        }
    }
    displayStars(YELLOW);
 8003ef4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003ef8:	f000 f90a 	bl	8004110 <displayStars>
}
 8003efc:	bf00      	nop
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	200021bc 	.word	0x200021bc

08003f08 <moveSpaceship>:

void moveSpaceship(int direction){
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	displaySpaceShip(DARK_GREY);
 8003f10:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003f14:	f000 f9c6 	bl	80042a4 <displaySpaceShip>
	if(powerUp > 0){
 8003f18:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <moveSpaceship+0xbc>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <moveSpaceship+0x20>
		displayPowerup(DARK_GREY);
 8003f20:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003f24:	f000 fb08 	bl	8004538 <displayPowerup>
	}
    if(direction < 0){
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	da22      	bge.n	8003f74 <moveSpaceship+0x6c>
        SpaceShip.x--;
 8003f2e:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <moveSpaceship+0xc0>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <moveSpaceship+0xc0>)
 8003f38:	701a      	strb	r2, [r3, #0]
        if(SpaceShip.x < SPACESHIP_WIDTH/2) {
 8003f3a:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <moveSpaceship+0xc0>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d802      	bhi.n	8003f48 <moveSpaceship+0x40>
        	SpaceShip.x = (SPACESHIP_WIDTH/2);
 8003f42:	4b21      	ldr	r3, [pc, #132]	; (8003fc8 <moveSpaceship+0xc0>)
 8003f44:	2202      	movs	r2, #2
 8003f46:	701a      	strb	r2, [r3, #0]
        }
        displaySpaceShip(spaceshipCurrentColor);
 8003f48:	4b20      	ldr	r3, [pc, #128]	; (8003fcc <moveSpaceship+0xc4>)
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 f9a9 	bl	80042a4 <displaySpaceShip>
        if(powerUp == 1){
 8003f52:	4b1c      	ldr	r3, [pc, #112]	; (8003fc4 <moveSpaceship+0xbc>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d103      	bne.n	8003f62 <moveSpaceship+0x5a>
        	displayPowerup(RED);
 8003f5a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003f5e:	f000 faeb 	bl	8004538 <displayPowerup>
        }
        if(powerUp == 2){
 8003f62:	4b18      	ldr	r3, [pc, #96]	; (8003fc4 <moveSpaceship+0xbc>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d127      	bne.n	8003fba <moveSpaceship+0xb2>
        	displayPowerup(LIGHT_BLUE);
 8003f6a:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003f6e:	f000 fae3 	bl	8004538 <displayPowerup>
        }
        return;
 8003f72:	e022      	b.n	8003fba <moveSpaceship+0xb2>
    }
    SpaceShip.x++;
 8003f74:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <moveSpaceship+0xc0>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <moveSpaceship+0xc0>)
 8003f7e:	701a      	strb	r2, [r3, #0]
    if(SpaceShip.x > SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1) {
 8003f80:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <moveSpaceship+0xc0>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b4d      	cmp	r3, #77	; 0x4d
 8003f86:	d902      	bls.n	8003f8e <moveSpaceship+0x86>
    	SpaceShip.x = SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1;
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <moveSpaceship+0xc0>)
 8003f8a:	224d      	movs	r2, #77	; 0x4d
 8003f8c:	701a      	strb	r2, [r3, #0]
    }
    displaySpaceShip(spaceshipCurrentColor);
 8003f8e:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <moveSpaceship+0xc4>)
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f986 	bl	80042a4 <displaySpaceShip>
    if(powerUp == 1){
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <moveSpaceship+0xbc>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d103      	bne.n	8003fa8 <moveSpaceship+0xa0>
    	displayPowerup(RED);
 8003fa0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003fa4:	f000 fac8 	bl	8004538 <displayPowerup>
    }
	if(powerUp == 2){
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <moveSpaceship+0xbc>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d105      	bne.n	8003fbc <moveSpaceship+0xb4>
		displayPowerup(LIGHT_BLUE);
 8003fb0:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003fb4:	f000 fac0 	bl	8004538 <displayPowerup>
 8003fb8:	e000      	b.n	8003fbc <moveSpaceship+0xb4>
        return;
 8003fba:	bf00      	nop
	}
}
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	200021da 	.word	0x200021da
 8003fc8:	2000004c 	.word	0x2000004c
 8003fcc:	2000004e 	.word	0x2000004e

08003fd0 <hitComet>:

void hitComet(int bul,int com){
 8003fd0:	b590      	push	{r4, r7, lr}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
    money += COMET_COINS(com);
 8003fda:	4a4a      	ldr	r2, [pc, #296]	; (8004104 <hitComet+0x134>)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4b47      	ldr	r3, [pc, #284]	; (8004108 <hitComet+0x138>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4413      	add	r3, r2
 8003fee:	4a46      	ldr	r2, [pc, #280]	; (8004108 <hitComet+0x138>)
 8003ff0:	6013      	str	r3, [r2, #0]
    Displ_FillArea(COMET_X(com) * 4, COMET_Y(com) * 4, COMET_SIZE(com) * 4, COMET_SIZE(com) * 4, DARK_GREY);
 8003ff2:	4a44      	ldr	r2, [pc, #272]	; (8004104 <hitComet+0x134>)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	785b      	ldrb	r3, [r3, #1]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	b298      	uxth	r0, r3
 8004002:	4a40      	ldr	r2, [pc, #256]	; (8004104 <hitComet+0x134>)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	789b      	ldrb	r3, [r3, #2]
 800400c:	b29b      	uxth	r3, r3
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	b299      	uxth	r1, r3
 8004012:	4a3c      	ldr	r2, [pc, #240]	; (8004104 <hitComet+0x134>)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800401e:	b29b      	uxth	r3, r3
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	b29a      	uxth	r2, r3
 8004024:	4c37      	ldr	r4, [pc, #220]	; (8004104 <hitComet+0x134>)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4423      	add	r3, r4
 800402c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004030:	b29b      	uxth	r3, r3
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	b29b      	uxth	r3, r3
 8004036:	f642 442c 	movw	r4, #11308	; 0x2c2c
 800403a:	9400      	str	r4, [sp, #0]
 800403c:	f000 ff2e 	bl	8004e9c <Displ_FillArea>
    if(bul != 420){
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8004046:	d022      	beq.n	800408e <hitComet+0xbe>
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e01a      	b.n	8004084 <hitComet+0xb4>
        	AMMO_X(j)= AMMO_X(j+1);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3301      	adds	r3, #1
 8004052:	4a2e      	ldr	r2, [pc, #184]	; (800410c <hitComet+0x13c>)
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	7899      	ldrb	r1, [r3, #2]
 800405a:	4a2c      	ldr	r2, [pc, #176]	; (800410c <hitComet+0x13c>)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	460a      	mov	r2, r1
 8004064:	709a      	strb	r2, [r3, #2]
        	AMMO_Y(j) = AMMO_Y(j+1);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3301      	adds	r3, #1
 800406a:	4a28      	ldr	r2, [pc, #160]	; (800410c <hitComet+0x13c>)
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	78d9      	ldrb	r1, [r3, #3]
 8004072:	4a26      	ldr	r2, [pc, #152]	; (800410c <hitComet+0x13c>)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	460a      	mov	r2, r1
 800407c:	70da      	strb	r2, [r3, #3]
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3301      	adds	r3, #1
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b04      	cmp	r3, #4
 8004088:	dde1      	ble.n	800404e <hitComet+0x7e>
        }
        powerups();
 800408a:	f000 fa11 	bl	80044b0 <powerups>
    }

    for(int j = com; j < MAX_COMETS - 1; j++){
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	e027      	b.n	80040e4 <hitComet+0x114>
    	COMET_X(j) = COMET_X(j+1);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	3301      	adds	r3, #1
 8004098:	4a1a      	ldr	r2, [pc, #104]	; (8004104 <hitComet+0x134>)
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	7859      	ldrb	r1, [r3, #1]
 80040a0:	4a18      	ldr	r2, [pc, #96]	; (8004104 <hitComet+0x134>)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	460a      	mov	r2, r1
 80040aa:	705a      	strb	r2, [r3, #1]
    	COMET_Y(j) = COMET_Y(j+1);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	3301      	adds	r3, #1
 80040b0:	4a14      	ldr	r2, [pc, #80]	; (8004104 <hitComet+0x134>)
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	7899      	ldrb	r1, [r3, #2]
 80040b8:	4a12      	ldr	r2, [pc, #72]	; (8004104 <hitComet+0x134>)
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	460a      	mov	r2, r1
 80040c2:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(j) = COMET_SIZE(j+1);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	3301      	adds	r3, #1
 80040c8:	4a0e      	ldr	r2, [pc, #56]	; (8004104 <hitComet+0x134>)
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80040d2:	4a0c      	ldr	r2, [pc, #48]	; (8004104 <hitComet+0x134>)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	460a      	mov	r2, r1
 80040dc:	70da      	strb	r2, [r3, #3]
    for(int j = com; j < MAX_COMETS - 1; j++){
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	3301      	adds	r3, #1
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	ddd4      	ble.n	8004094 <hitComet+0xc4>
    }
    Comet.in_play--;
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <hitComet+0x134>)
 80040ec:	f993 3000 	ldrsb.w	r3, [r3]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	b25a      	sxtb	r2, r3
 80040f8:	4b02      	ldr	r3, [pc, #8]	; (8004104 <hitComet+0x134>)
 80040fa:	701a      	strb	r2, [r3, #0]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	bd90      	pop	{r4, r7, pc}
 8004104:	20002190 	.word	0x20002190
 8004108:	200021d4 	.word	0x200021d4
 800410c:	20002170 	.word	0x20002170

08004110 <displayStars>:




void displayStars(uint16_t color){
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af02      	add	r7, sp, #8
 8004116:	4603      	mov	r3, r0
 8004118:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < Star.in_play; i++){
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	e018      	b.n	8004152 <displayStars+0x42>
    	Displ_FillArea(STAR_X(i)* 4, STAR_Y(i) * 4, 4, 4, color);
 8004120:	4a12      	ldr	r2, [pc, #72]	; (800416c <displayStars+0x5c>)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	785b      	ldrb	r3, [r3, #1]
 800412a:	b29b      	uxth	r3, r3
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	b298      	uxth	r0, r3
 8004130:	4a0e      	ldr	r2, [pc, #56]	; (800416c <displayStars+0x5c>)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4413      	add	r3, r2
 8004138:	789b      	ldrb	r3, [r3, #2]
 800413a:	b29b      	uxth	r3, r3
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	b299      	uxth	r1, r3
 8004140:	88fb      	ldrh	r3, [r7, #6]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2304      	movs	r3, #4
 8004146:	2204      	movs	r2, #4
 8004148:	f000 fea8 	bl	8004e9c <Displ_FillArea>
    for(int i = 0; i < Star.in_play; i++){
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3301      	adds	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <displayStars+0x5c>)
 8004154:	f993 3000 	ldrsb.w	r3, [r3]
 8004158:	461a      	mov	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4293      	cmp	r3, r2
 800415e:	dbdf      	blt.n	8004120 <displayStars+0x10>
    }
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	200021bc 	.word	0x200021bc

08004170 <displayAmmo>:

void displayAmmo(uint16_t color){
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af02      	add	r7, sp, #8
 8004176:	4603      	mov	r3, r0
 8004178:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < ammo.in_play; i++){
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e018      	b.n	80041b2 <displayAmmo+0x42>
    	Displ_FillArea(AMMO_X(i) * 4, AMMO_Y(i) * 4, 4, 4, color);
 8004180:	4a25      	ldr	r2, [pc, #148]	; (8004218 <displayAmmo+0xa8>)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4413      	add	r3, r2
 8004188:	789b      	ldrb	r3, [r3, #2]
 800418a:	b29b      	uxth	r3, r3
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	b298      	uxth	r0, r3
 8004190:	4a21      	ldr	r2, [pc, #132]	; (8004218 <displayAmmo+0xa8>)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	4413      	add	r3, r2
 8004198:	78db      	ldrb	r3, [r3, #3]
 800419a:	b29b      	uxth	r3, r3
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	b299      	uxth	r1, r3
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	2304      	movs	r3, #4
 80041a6:	2204      	movs	r2, #4
 80041a8:	f000 fe78 	bl	8004e9c <Displ_FillArea>
    for(int i = 0; i < ammo.in_play; i++){
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3301      	adds	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	4b19      	ldr	r3, [pc, #100]	; (8004218 <displayAmmo+0xa8>)
 80041b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80041b8:	461a      	mov	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4293      	cmp	r3, r2
 80041be:	dbdf      	blt.n	8004180 <displayAmmo+0x10>
    }
    if(in_multiplayer){
 80041c0:	4b16      	ldr	r3, [pc, #88]	; (800421c <displayAmmo+0xac>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d023      	beq.n	8004210 <displayAmmo+0xa0>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 80041c8:	2300      	movs	r3, #0
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	e019      	b.n	8004202 <displayAmmo+0x92>
            Displ_FillArea(E_AMMO_X(i) * 4, E_AMMO_Y(i) * 4, 4, 4, LIGHT_BLUE);
 80041ce:	4a14      	ldr	r2, [pc, #80]	; (8004220 <displayAmmo+0xb0>)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	4413      	add	r3, r2
 80041d6:	789b      	ldrb	r3, [r3, #2]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	b298      	uxth	r0, r3
 80041de:	4a10      	ldr	r2, [pc, #64]	; (8004220 <displayAmmo+0xb0>)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	4413      	add	r3, r2
 80041e6:	78db      	ldrb	r3, [r3, #3]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	b299      	uxth	r1, r3
 80041ee:	f24f 73db 	movw	r3, #63451	; 0xf7db
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	2304      	movs	r3, #4
 80041f6:	2204      	movs	r2, #4
 80041f8:	f000 fe50 	bl	8004e9c <Displ_FillArea>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	3301      	adds	r3, #1
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	4b07      	ldr	r3, [pc, #28]	; (8004220 <displayAmmo+0xb0>)
 8004204:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004208:	461a      	mov	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4293      	cmp	r3, r2
 800420e:	dbde      	blt.n	80041ce <displayAmmo+0x5e>
        }
    }
}
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20002170 	.word	0x20002170
 800421c:	20000051 	.word	0x20000051
 8004220:	20002180 	.word	0x20002180

08004224 <displayComets>:

void displayComets(uint16_t color){
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b087      	sub	sp, #28
 8004228:	af02      	add	r7, sp, #8
 800422a:	4603      	mov	r3, r0
 800422c:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < Comet.in_play; i++){
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	e029      	b.n	8004288 <displayComets+0x64>
        Displ_FillArea(COMET_X(i) * 4, COMET_Y(i)  * 4, COMET_SIZE(i) * 4, COMET_SIZE(i) * 4, color);
 8004234:	4a1a      	ldr	r2, [pc, #104]	; (80042a0 <displayComets+0x7c>)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	785b      	ldrb	r3, [r3, #1]
 800423e:	b29b      	uxth	r3, r3
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	b298      	uxth	r0, r3
 8004244:	4a16      	ldr	r2, [pc, #88]	; (80042a0 <displayComets+0x7c>)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	789b      	ldrb	r3, [r3, #2]
 800424e:	b29b      	uxth	r3, r3
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	b299      	uxth	r1, r3
 8004254:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <displayComets+0x7c>)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004260:	b29b      	uxth	r3, r3
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	b29a      	uxth	r2, r3
 8004266:	4c0e      	ldr	r4, [pc, #56]	; (80042a0 <displayComets+0x7c>)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4423      	add	r3, r4
 800426e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004272:	b29b      	uxth	r3, r3
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	b29c      	uxth	r4, r3
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	4623      	mov	r3, r4
 800427e:	f000 fe0d 	bl	8004e9c <Displ_FillArea>
    for (int i = 0; i < Comet.in_play; i++){
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3301      	adds	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <displayComets+0x7c>)
 800428a:	f993 3000 	ldrsb.w	r3, [r3]
 800428e:	461a      	mov	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4293      	cmp	r3, r2
 8004294:	dbce      	blt.n	8004234 <displayComets+0x10>
    }
}
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	bd90      	pop	{r4, r7, pc}
 80042a0:	20002190 	.word	0x20002190

080042a4 <displaySpaceShip>:

void displaySpaceShip(uint16_t color){
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	4603      	mov	r3, r0
 80042ac:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(SpaceShip.x*4 - 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 80042ae:	4b1b      	ldr	r3, [pc, #108]	; (800431c <displaySpaceShip+0x78>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	3b02      	subs	r3, #2
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	b298      	uxth	r0, r3
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	2310      	movs	r3, #16
 80042c0:	2204      	movs	r2, #4
 80042c2:	21d8      	movs	r1, #216	; 0xd8
 80042c4:	f000 fdea 	bl	8004e9c <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 + 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 80042c8:	4b14      	ldr	r3, [pc, #80]	; (800431c <displaySpaceShip+0x78>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	3302      	adds	r3, #2
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	b298      	uxth	r0, r3
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	2310      	movs	r3, #16
 80042da:	2204      	movs	r2, #4
 80042dc:	21d8      	movs	r1, #216	; 0xd8
 80042de:	f000 fddd 	bl	8004e9c <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 - 4, SCREEN_HEIGHT*4 -20, 12, 4, color);
 80042e2:	4b0e      	ldr	r3, [pc, #56]	; (800431c <displaySpaceShip+0x78>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	b298      	uxth	r0, r3
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	2304      	movs	r3, #4
 80042f4:	220c      	movs	r2, #12
 80042f6:	21dc      	movs	r1, #220	; 0xdc
 80042f8:	f000 fdd0 	bl	8004e9c <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4, SCREEN_HEIGHT*4 -28, 4, 16, color);
 80042fc:	4b07      	ldr	r3, [pc, #28]	; (800431c <displaySpaceShip+0x78>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	b298      	uxth	r0, r3
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	2310      	movs	r3, #16
 800430c:	2204      	movs	r2, #4
 800430e:	21d4      	movs	r1, #212	; 0xd4
 8004310:	f000 fdc4 	bl	8004e9c <Displ_FillArea>

}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	2000004c 	.word	0x2000004c

08004320 <displayLives>:

void displayLives(){
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af02      	add	r7, sp, #8
    for(int i = 0; i < lives; i++){
 8004326:	2300      	movs	r3, #0
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	e013      	b.n	8004354 <displayLives+0x34>
    	Displ_FillArea(HEARTS_X+HEARTS_OFFSET*i, HEARTS_Y, 4, 4, LIGHT_GREEN);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	b29b      	uxth	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	0052      	lsls	r2, r2, #1
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	b29b      	uxth	r3, r3
 800433a:	3308      	adds	r3, #8
 800433c:	b298      	uxth	r0, r3
 800433e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	2304      	movs	r3, #4
 8004346:	2204      	movs	r2, #4
 8004348:	2108      	movs	r1, #8
 800434a:	f000 fda7 	bl	8004e9c <Displ_FillArea>
    for(int i = 0; i < lives; i++){
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3301      	adds	r3, #1
 8004352:	607b      	str	r3, [r7, #4]
 8004354:	4b16      	ldr	r3, [pc, #88]	; (80043b0 <displayLives+0x90>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4293      	cmp	r3, r2
 800435e:	dbe5      	blt.n	800432c <displayLives+0xc>
    }
    if(lives < 3){
 8004360:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <displayLives+0x90>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d81f      	bhi.n	80043a8 <displayLives+0x88>
    	for(int i = 0; i < 3 - lives; i++){
 8004368:	2300      	movs	r3, #0
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	e015      	b.n	800439a <displayLives+0x7a>
    		Displ_FillArea(HEARTS_X+HEARTS_OFFSET*(3-i), HEARTS_Y, 4, 4, DARK_GREY);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	f1c3 0303 	rsb	r3, r3, #3
 8004374:	b29b      	uxth	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	0052      	lsls	r2, r2, #1
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	b29b      	uxth	r3, r3
 8004380:	3308      	adds	r3, #8
 8004382:	b298      	uxth	r0, r3
 8004384:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	2304      	movs	r3, #4
 800438c:	2204      	movs	r2, #4
 800438e:	2108      	movs	r1, #8
 8004390:	f000 fd84 	bl	8004e9c <Displ_FillArea>
    	for(int i = 0; i < 3 - lives; i++){
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	3301      	adds	r3, #1
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <displayLives+0x90>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	f1c3 0303 	rsb	r3, r3, #3
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	dbe2      	blt.n	800436e <displayLives+0x4e>
    	}
    }
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000049 	.word	0x20000049

080043b4 <spaceShipHitColorToggle>:


void spaceShipHitColorToggle(){
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
    if(spaceshipCurrentColor == RED && hit % 10 == 0){
 80043b8:	4b1f      	ldr	r3, [pc, #124]	; (8004438 <spaceShipHitColorToggle+0x84>)
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 80043c0:	d112      	bne.n	80043e8 <spaceShipHitColorToggle+0x34>
 80043c2:	4b1e      	ldr	r3, [pc, #120]	; (800443c <spaceShipHitColorToggle+0x88>)
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <spaceShipHitColorToggle+0x8c>)
 80043c8:	fba3 1302 	umull	r1, r3, r3, r2
 80043cc:	08d9      	lsrs	r1, r3, #3
 80043ce:	460b      	mov	r3, r1
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <spaceShipHitColorToggle+0x34>
        spaceshipCurrentColor = WHITE;
 80043de:	4b16      	ldr	r3, [pc, #88]	; (8004438 <spaceShipHitColorToggle+0x84>)
 80043e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043e4:	801a      	strh	r2, [r3, #0]
 80043e6:	e011      	b.n	800440c <spaceShipHitColorToggle+0x58>
    }else if(hit % 10 == 0){
 80043e8:	4b14      	ldr	r3, [pc, #80]	; (800443c <spaceShipHitColorToggle+0x88>)
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	4b14      	ldr	r3, [pc, #80]	; (8004440 <spaceShipHitColorToggle+0x8c>)
 80043ee:	fba3 1302 	umull	r1, r3, r3, r2
 80043f2:	08d9      	lsrs	r1, r3, #3
 80043f4:	460b      	mov	r3, r1
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d103      	bne.n	800440c <spaceShipHitColorToggle+0x58>
        spaceshipCurrentColor = RED;
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <spaceShipHitColorToggle+0x84>)
 8004406:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800440a:	801a      	strh	r2, [r3, #0]
    }
    if(hit < hit_graph_counter){
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <spaceShipHitColorToggle+0x88>)
 800440e:	781a      	ldrb	r2, [r3, #0]
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <spaceShipHitColorToggle+0x90>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d206      	bcs.n	8004426 <spaceShipHitColorToggle+0x72>
        hit++;
 8004418:	4b08      	ldr	r3, [pc, #32]	; (800443c <spaceShipHitColorToggle+0x88>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	3301      	adds	r3, #1
 800441e:	b2da      	uxtb	r2, r3
 8004420:	4b06      	ldr	r3, [pc, #24]	; (800443c <spaceShipHitColorToggle+0x88>)
 8004422:	701a      	strb	r2, [r3, #0]
    }else{
        hit = 0;
    }
}
 8004424:	e002      	b.n	800442c <spaceShipHitColorToggle+0x78>
        hit = 0;
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <spaceShipHitColorToggle+0x88>)
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]
}
 800442c:	bf00      	nop
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	2000004e 	.word	0x2000004e
 800443c:	20001eeb 	.word	0x20001eeb
 8004440:	cccccccd 	.word	0xcccccccd
 8004444:	20000050 	.word	0x20000050

08004448 <delayBullet>:

void delayBullet(){
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
    if (bullet_delay > 0){
 800444c:	4b07      	ldr	r3, [pc, #28]	; (800446c <delayBullet+0x24>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d005      	beq.n	8004460 <delayBullet+0x18>
        bullet_delay--;
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <delayBullet+0x24>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	3b01      	subs	r3, #1
 800445a:	b2da      	uxtb	r2, r3
 800445c:	4b03      	ldr	r3, [pc, #12]	; (800446c <delayBullet+0x24>)
 800445e:	701a      	strb	r2, [r3, #0]
    }
}
 8004460:	bf00      	nop
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	200021d1 	.word	0x200021d1

08004470 <beenHit>:

void beenHit(){
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
    hit = 1;
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <beenHit+0x34>)
 8004476:	2201      	movs	r2, #1
 8004478:	701a      	strb	r2, [r3, #0]
    lives--;
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <beenHit+0x38>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	3b01      	subs	r3, #1
 8004480:	b2da      	uxtb	r2, r3
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <beenHit+0x38>)
 8004484:	701a      	strb	r2, [r3, #0]
    if(lives <= 0){
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <beenHit+0x38>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d107      	bne.n	800449e <beenHit+0x2e>
        play = 0;
 800448e:	4b07      	ldr	r3, [pc, #28]	; (80044ac <beenHit+0x3c>)
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]
        hit = 0;
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <beenHit+0x34>)
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
        initSpaceInvaders();
 800449a:	f7ff f8a7 	bl	80035ec <initSpaceInvaders>

    }
}
 800449e:	bf00      	nop
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20001eeb 	.word	0x20001eeb
 80044a8:	20000049 	.word	0x20000049
 80044ac:	2000004a 	.word	0x2000004a

080044b0 <powerups>:
            star_delay--;
        }
    }
}

void powerups(){
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
    uint8_t powerupornot = RANDOM(0,3);
 80044b6:	f006 f9a5 	bl	800a804 <rand>
 80044ba:	4603      	mov	r3, r0
 80044bc:	425a      	negs	r2, r3
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	f002 0203 	and.w	r2, r2, #3
 80044c6:	bf58      	it	pl
 80044c8:	4253      	negpl	r3, r2
 80044ca:	71fb      	strb	r3, [r7, #7]
    if(powerUp == 0 && powerupornot == 0){
 80044cc:	4b17      	ldr	r3, [pc, #92]	; (800452c <powerups+0x7c>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d127      	bne.n	8004524 <powerups+0x74>
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d124      	bne.n	8004524 <powerups+0x74>
        powerUp = RANDOM(1,3);
 80044da:	f006 f993 	bl	800a804 <rand>
 80044de:	4602      	mov	r2, r0
 80044e0:	4b13      	ldr	r3, [pc, #76]	; (8004530 <powerups+0x80>)
 80044e2:	fb83 3102 	smull	r3, r1, r3, r2
 80044e6:	17d3      	asrs	r3, r2, #31
 80044e8:	1ac9      	subs	r1, r1, r3
 80044ea:	460b      	mov	r3, r1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	440b      	add	r3, r1
 80044f0:	1ad1      	subs	r1, r2, r3
 80044f2:	b2cb      	uxtb	r3, r1
 80044f4:	3301      	adds	r3, #1
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <powerups+0x7c>)
 80044fa:	701a      	strb	r2, [r3, #0]
        if(powerUp == 1){
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <powerups+0x7c>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d104      	bne.n	800450e <powerups+0x5e>
        	displayPowerup(RED);
 8004504:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004508:	f000 f816 	bl	8004538 <displayPowerup>
 800450c:	e007      	b.n	800451e <powerups+0x6e>
        }
        else if(powerUp == 2){
 800450e:	4b07      	ldr	r3, [pc, #28]	; (800452c <powerups+0x7c>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d103      	bne.n	800451e <powerups+0x6e>
        	displayPowerup(LIGHT_BLUE);
 8004516:	f24f 70db 	movw	r0, #63451	; 0xf7db
 800451a:	f000 f80d 	bl	8004538 <displayPowerup>
        }
        powerUp_delay = MAX_DELAY_POWERUP;
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <powerups+0x84>)
 8004520:	2205      	movs	r2, #5
 8004522:	701a      	strb	r2, [r3, #0]
    }
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	200021da 	.word	0x200021da
 8004530:	55555556 	.word	0x55555556
 8004534:	200021db 	.word	0x200021db

08004538 <displayPowerup>:

void displayPowerup(uint16_t color){
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af02      	add	r7, sp, #8
 800453e:	4603      	mov	r3, r0
 8004540:	80fb      	strh	r3, [r7, #6]

    if(powerUp == 1){
 8004542:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <displayPowerup+0x80>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d11a      	bne.n	8004580 <displayPowerup+0x48>
		Displ_FillArea(SpaceShip.x * 4, 0, 4, 180, color);
 800454a:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <displayPowerup+0x84>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	b298      	uxth	r0, r3
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	23b4      	movs	r3, #180	; 0xb4
 800455a:	2204      	movs	r2, #4
 800455c:	2100      	movs	r1, #0
 800455e:	f000 fc9d 	bl	8004e9c <Displ_FillArea>
		Displ_FillArea(SpaceShip.x * 4 + 1, 180, 2, 30, color);
 8004562:	4b16      	ldr	r3, [pc, #88]	; (80045bc <displayPowerup+0x84>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	b29b      	uxth	r3, r3
 800456c:	3301      	adds	r3, #1
 800456e:	b298      	uxth	r0, r3
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	231e      	movs	r3, #30
 8004576:	2202      	movs	r2, #2
 8004578:	21b4      	movs	r1, #180	; 0xb4
 800457a:	f000 fc8f 	bl	8004e9c <Displ_FillArea>
    }
    else if(powerUp == 2){
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
    }
}
 800457e:	e017      	b.n	80045b0 <displayPowerup+0x78>
    else if(powerUp == 2){
 8004580:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <displayPowerup+0x80>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d113      	bne.n	80045b0 <displayPowerup+0x78>
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <displayPowerup+0x84>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	b29b      	uxth	r3, r3
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	b29b      	uxth	r3, r3
 8004592:	3301      	adds	r3, #1
 8004594:	b29b      	uxth	r3, r3
 8004596:	b218      	sxth	r0, r3
 8004598:	4b08      	ldr	r3, [pc, #32]	; (80045bc <displayPowerup+0x84>)
 800459a:	785b      	ldrb	r3, [r3, #1]
 800459c:	b29b      	uxth	r3, r3
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3302      	adds	r3, #2
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	b219      	sxth	r1, r3
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	220e      	movs	r2, #14
 80045ac:	f000 fd56 	bl	800505c <Displ_drawCircle>
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	200021da 	.word	0x200021da
 80045bc:	2000004c 	.word	0x2000004c

080045c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <HAL_MspInit+0x44>)
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	4a0e      	ldr	r2, [pc, #56]	; (8004604 <HAL_MspInit+0x44>)
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	6193      	str	r3, [r2, #24]
 80045d2:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <HAL_MspInit+0x44>)
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	607b      	str	r3, [r7, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <HAL_MspInit+0x44>)
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	4a08      	ldr	r2, [pc, #32]	; (8004604 <HAL_MspInit+0x44>)
 80045e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e8:	61d3      	str	r3, [r2, #28]
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_MspInit+0x44>)
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000

08004608 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	; 0x28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004610:	f107 0314 	add.w	r3, r7, #20
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	605a      	str	r2, [r3, #4]
 800461a:	609a      	str	r2, [r3, #8]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a17      	ldr	r2, [pc, #92]	; (8004684 <HAL_I2C_MspInit+0x7c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d127      	bne.n	800467a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800462a:	4b17      	ldr	r3, [pc, #92]	; (8004688 <HAL_I2C_MspInit+0x80>)
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	4a16      	ldr	r2, [pc, #88]	; (8004688 <HAL_I2C_MspInit+0x80>)
 8004630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004634:	6153      	str	r3, [r2, #20]
 8004636:	4b14      	ldr	r3, [pc, #80]	; (8004688 <HAL_I2C_MspInit+0x80>)
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004642:	2303      	movs	r3, #3
 8004644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004646:	2312      	movs	r3, #18
 8004648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800464a:	2301      	movs	r3, #1
 800464c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800464e:	2303      	movs	r3, #3
 8004650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004652:	2304      	movs	r3, #4
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004656:	f107 0314 	add.w	r3, r7, #20
 800465a:	4619      	mov	r1, r3
 800465c:	480b      	ldr	r0, [pc, #44]	; (800468c <HAL_I2C_MspInit+0x84>)
 800465e:	f001 fd8d 	bl	800617c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004662:	4b09      	ldr	r3, [pc, #36]	; (8004688 <HAL_I2C_MspInit+0x80>)
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	4a08      	ldr	r2, [pc, #32]	; (8004688 <HAL_I2C_MspInit+0x80>)
 8004668:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800466c:	61d3      	str	r3, [r2, #28]
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_I2C_MspInit+0x80>)
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800467a:	bf00      	nop
 800467c:	3728      	adds	r7, #40	; 0x28
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40005800 	.word	0x40005800
 8004688:	40021000 	.word	0x40021000
 800468c:	48001400 	.word	0x48001400

08004690 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2e      	ldr	r2, [pc, #184]	; (8004768 <HAL_SPI_MspInit+0xd8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d156      	bne.n	8004760 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046b2:	4b2e      	ldr	r3, [pc, #184]	; (800476c <HAL_SPI_MspInit+0xdc>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	4a2d      	ldr	r2, [pc, #180]	; (800476c <HAL_SPI_MspInit+0xdc>)
 80046b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046bc:	61d3      	str	r3, [r2, #28]
 80046be:	4b2b      	ldr	r3, [pc, #172]	; (800476c <HAL_SPI_MspInit+0xdc>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ca:	4b28      	ldr	r3, [pc, #160]	; (800476c <HAL_SPI_MspInit+0xdc>)
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	4a27      	ldr	r2, [pc, #156]	; (800476c <HAL_SPI_MspInit+0xdc>)
 80046d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d4:	6153      	str	r3, [r2, #20]
 80046d6:	4b25      	ldr	r3, [pc, #148]	; (800476c <HAL_SPI_MspInit+0xdc>)
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80046e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80046e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e8:	2302      	movs	r3, #2
 80046ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046f0:	2303      	movs	r3, #3
 80046f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046f4:	2305      	movs	r3, #5
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046f8:	f107 0314 	add.w	r3, r7, #20
 80046fc:	4619      	mov	r1, r3
 80046fe:	481c      	ldr	r0, [pc, #112]	; (8004770 <HAL_SPI_MspInit+0xe0>)
 8004700:	f001 fd3c 	bl	800617c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8004704:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <HAL_SPI_MspInit+0xe4>)
 8004706:	4a1c      	ldr	r2, [pc, #112]	; (8004778 <HAL_SPI_MspInit+0xe8>)
 8004708:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800470a:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <HAL_SPI_MspInit+0xe4>)
 800470c:	2210      	movs	r2, #16
 800470e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004710:	4b18      	ldr	r3, [pc, #96]	; (8004774 <HAL_SPI_MspInit+0xe4>)
 8004712:	2200      	movs	r2, #0
 8004714:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004716:	4b17      	ldr	r3, [pc, #92]	; (8004774 <HAL_SPI_MspInit+0xe4>)
 8004718:	2280      	movs	r2, #128	; 0x80
 800471a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800471c:	4b15      	ldr	r3, [pc, #84]	; (8004774 <HAL_SPI_MspInit+0xe4>)
 800471e:	2200      	movs	r2, #0
 8004720:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004722:	4b14      	ldr	r3, [pc, #80]	; (8004774 <HAL_SPI_MspInit+0xe4>)
 8004724:	2200      	movs	r2, #0
 8004726:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004728:	4b12      	ldr	r3, [pc, #72]	; (8004774 <HAL_SPI_MspInit+0xe4>)
 800472a:	2200      	movs	r2, #0
 800472c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <HAL_SPI_MspInit+0xe4>)
 8004730:	2200      	movs	r2, #0
 8004732:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004734:	480f      	ldr	r0, [pc, #60]	; (8004774 <HAL_SPI_MspInit+0xe4>)
 8004736:	f001 fb12 	bl	8005d5e <HAL_DMA_Init>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8004740:	f7fe fc3a 	bl	8002fb8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a0b      	ldr	r2, [pc, #44]	; (8004774 <HAL_SPI_MspInit+0xe4>)
 8004748:	655a      	str	r2, [r3, #84]	; 0x54
 800474a:	4a0a      	ldr	r2, [pc, #40]	; (8004774 <HAL_SPI_MspInit+0xe4>)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004750:	2200      	movs	r2, #0
 8004752:	2100      	movs	r1, #0
 8004754:	2024      	movs	r0, #36	; 0x24
 8004756:	f001 facc 	bl	8005cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800475a:	2024      	movs	r0, #36	; 0x24
 800475c:	f001 fae5 	bl	8005d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004760:	bf00      	nop
 8004762:	3728      	adds	r7, #40	; 0x28
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40003800 	.word	0x40003800
 800476c:	40021000 	.word	0x40021000
 8004770:	48000400 	.word	0x48000400
 8004774:	20001fa8 	.word	0x20001fa8
 8004778:	40020058 	.word	0x40020058

0800477c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08c      	sub	sp, #48	; 0x30
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004784:	f107 031c 	add.w	r3, r7, #28
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	609a      	str	r2, [r3, #8]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a33      	ldr	r2, [pc, #204]	; (8004868 <HAL_UART_MspInit+0xec>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d131      	bne.n	8004802 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800479e:	4b33      	ldr	r3, [pc, #204]	; (800486c <HAL_UART_MspInit+0xf0>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	4a32      	ldr	r2, [pc, #200]	; (800486c <HAL_UART_MspInit+0xf0>)
 80047a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a8:	61d3      	str	r3, [r2, #28]
 80047aa:	4b30      	ldr	r3, [pc, #192]	; (800486c <HAL_UART_MspInit+0xf0>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b6:	4b2d      	ldr	r3, [pc, #180]	; (800486c <HAL_UART_MspInit+0xf0>)
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	4a2c      	ldr	r2, [pc, #176]	; (800486c <HAL_UART_MspInit+0xf0>)
 80047bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c0:	6153      	str	r3, [r2, #20]
 80047c2:	4b2a      	ldr	r3, [pc, #168]	; (800486c <HAL_UART_MspInit+0xf0>)
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80047ce:	230c      	movs	r3, #12
 80047d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d2:	2302      	movs	r3, #2
 80047d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047da:	2303      	movs	r3, #3
 80047dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047de:	2307      	movs	r3, #7
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e2:	f107 031c 	add.w	r3, r7, #28
 80047e6:	4619      	mov	r1, r3
 80047e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047ec:	f001 fcc6 	bl	800617c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80047f0:	2200      	movs	r2, #0
 80047f2:	2100      	movs	r1, #0
 80047f4:	2026      	movs	r0, #38	; 0x26
 80047f6:	f001 fa7c 	bl	8005cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047fa:	2026      	movs	r0, #38	; 0x26
 80047fc:	f001 fa95 	bl	8005d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004800:	e02d      	b.n	800485e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1a      	ldr	r2, [pc, #104]	; (8004870 <HAL_UART_MspInit+0xf4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d128      	bne.n	800485e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800480c:	4b17      	ldr	r3, [pc, #92]	; (800486c <HAL_UART_MspInit+0xf0>)
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	4a16      	ldr	r2, [pc, #88]	; (800486c <HAL_UART_MspInit+0xf0>)
 8004812:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004816:	61d3      	str	r3, [r2, #28]
 8004818:	4b14      	ldr	r3, [pc, #80]	; (800486c <HAL_UART_MspInit+0xf0>)
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <HAL_UART_MspInit+0xf0>)
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	4a10      	ldr	r2, [pc, #64]	; (800486c <HAL_UART_MspInit+0xf0>)
 800482a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800482e:	6153      	str	r3, [r2, #20]
 8004830:	4b0e      	ldr	r3, [pc, #56]	; (800486c <HAL_UART_MspInit+0xf0>)
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800483c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004842:	2302      	movs	r3, #2
 8004844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004846:	2300      	movs	r3, #0
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800484a:	2303      	movs	r3, #3
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800484e:	2307      	movs	r3, #7
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004852:	f107 031c 	add.w	r3, r7, #28
 8004856:	4619      	mov	r1, r3
 8004858:	4806      	ldr	r0, [pc, #24]	; (8004874 <HAL_UART_MspInit+0xf8>)
 800485a:	f001 fc8f 	bl	800617c <HAL_GPIO_Init>
}
 800485e:	bf00      	nop
 8004860:	3730      	adds	r7, #48	; 0x30
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40004400 	.word	0x40004400
 800486c:	40021000 	.word	0x40021000
 8004870:	40004800 	.word	0x40004800
 8004874:	48000400 	.word	0x48000400

08004878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800487c:	e7fe      	b.n	800487c <NMI_Handler+0x4>

0800487e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800487e:	b480      	push	{r7}
 8004880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004882:	e7fe      	b.n	8004882 <HardFault_Handler+0x4>

08004884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004888:	e7fe      	b.n	8004888 <MemManage_Handler+0x4>

0800488a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800488a:	b480      	push	{r7}
 800488c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800488e:	e7fe      	b.n	800488e <BusFault_Handler+0x4>

08004890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004894:	e7fe      	b.n	8004894 <UsageFault_Handler+0x4>

08004896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004896:	b480      	push	{r7}
 8004898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800489a:	bf00      	nop
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048b2:	b480      	push	{r7}
 80048b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048b6:	bf00      	nop
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048c4:	f001 f8f6 	bl	8005ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048c8:	bf00      	nop
 80048ca:	bd80      	pop	{r7, pc}

080048cc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 80048d0:	2001      	movs	r0, #1
 80048d2:	f001 fdf5 	bl	80064c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80048e0:	4802      	ldr	r0, [pc, #8]	; (80048ec <DMA1_Channel5_IRQHandler+0x10>)
 80048e2:	f001 fb59 	bl	8005f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80048e6:	bf00      	nop
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20001fa8 	.word	0x20001fa8

080048f0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80048f4:	4802      	ldr	r0, [pc, #8]	; (8004900 <SPI2_IRQHandler+0x10>)
 80048f6:	f004 fc1b 	bl	8009130 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80048fa:	bf00      	nop
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20001f44 	.word	0x20001f44

08004904 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char ch;
    uint16_t number;

    uint32_t isrflags = READ_REG(huart2.Instance->ISR);
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <USART2_IRQHandler+0x50>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	60fb      	str	r3, [r7, #12]
    uint32_t crlits = READ_REG(huart2.Instance->CR1);
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <USART2_IRQHandler+0x50>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60bb      	str	r3, [r7, #8]

    if (((isrflags & USART_ISR_RXNE) != RESET) && ((crlits & USART_CR1_RXNEIE) != RESET)) {
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b00      	cmp	r3, #0
 8004922:	d010      	beq.n	8004946 <USART2_IRQHandler+0x42>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <USART2_IRQHandler+0x42>
        huart2.Instance->ISR;
 800492e:	4b09      	ldr	r3, [pc, #36]	; (8004954 <USART2_IRQHandler+0x50>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69db      	ldr	r3, [r3, #28]
        //number = huart2.Instance->RDR;
        ch = huart2.Instance->RDR;
 8004934:	4b07      	ldr	r3, [pc, #28]	; (8004954 <USART2_IRQHandler+0x50>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800493a:	b29b      	uxth	r3, r3
 800493c:	71fb      	strb	r3, [r7, #7]
        //printf("%ul\r\n", number);
        //printf("%c\r\n", ch);
        addCharacterToArray(ch);
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	4618      	mov	r0, r3
 8004942:	f7fe fd1b 	bl	800337c <addCharacterToArray>
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004946:	4803      	ldr	r0, [pc, #12]	; (8004954 <USART2_IRQHandler+0x50>)
 8004948:	f004 ffce 	bl	80098e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20001fec 	.word	0x20001fec

08004958 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 800495c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004960:	f001 fdae 	bl	80064c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8004964:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004968:	f001 fdaa 	bl	80064c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 800496c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004970:	f001 fda6 	bl	80064c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004974:	bf00      	nop
 8004976:	bd80      	pop	{r7, pc}

08004978 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  return 1;
 800497c:	2301      	movs	r3, #1
}
 800497e:	4618      	mov	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <_kill>:

int _kill(int pid, int sig)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004992:	f005 fe49 	bl	800a628 <__errno>
 8004996:	4603      	mov	r3, r0
 8004998:	2216      	movs	r2, #22
 800499a:	601a      	str	r2, [r3, #0]
  return -1;
 800499c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <_exit>:

void _exit (int status)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80049b0:	f04f 31ff 	mov.w	r1, #4294967295
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff ffe7 	bl	8004988 <_kill>
  while (1) {}    /* Make sure we hang here */
 80049ba:	e7fe      	b.n	80049ba <_exit+0x12>

080049bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	e00a      	b.n	80049e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80049ce:	f3af 8000 	nop.w
 80049d2:	4601      	mov	r1, r0
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	60ba      	str	r2, [r7, #8]
 80049da:	b2ca      	uxtb	r2, r1
 80049dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	3301      	adds	r3, #1
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	dbf0      	blt.n	80049ce <_read+0x12>
  }

  return len;
 80049ec:	687b      	ldr	r3, [r7, #4]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80049fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a1e:	605a      	str	r2, [r3, #4]
  return 0;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <_isatty>:

int _isatty(int file)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a36:	2301      	movs	r3, #1
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a68:	4a14      	ldr	r2, [pc, #80]	; (8004abc <_sbrk+0x5c>)
 8004a6a:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <_sbrk+0x60>)
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a74:	4b13      	ldr	r3, [pc, #76]	; (8004ac4 <_sbrk+0x64>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a7c:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <_sbrk+0x64>)
 8004a7e:	4a12      	ldr	r2, [pc, #72]	; (8004ac8 <_sbrk+0x68>)
 8004a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a82:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <_sbrk+0x64>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4413      	add	r3, r2
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d207      	bcs.n	8004aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a90:	f005 fdca 	bl	800a628 <__errno>
 8004a94:	4603      	mov	r3, r0
 8004a96:	220c      	movs	r2, #12
 8004a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9e:	e009      	b.n	8004ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004aa0:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <_sbrk+0x64>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004aa6:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <_sbrk+0x64>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4413      	add	r3, r2
 8004aae:	4a05      	ldr	r2, [pc, #20]	; (8004ac4 <_sbrk+0x64>)
 8004ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	20004000 	.word	0x20004000
 8004ac0:	00000400 	.word	0x00000400
 8004ac4:	200021dc 	.word	0x200021dc
 8004ac8:	20002a08 	.word	0x20002a08

08004acc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <SystemInit+0x20>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	4a05      	ldr	r2, [pc, #20]	; (8004aec <SystemInit+0x20>)
 8004ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ae0:	bf00      	nop
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	e000ed00 	.word	0xe000ed00

08004af0 <Displ_Select>:

/******************************************
 * @brief   enable display, disabling touch
 *          device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
    if (TOUCH_SPI==DISPL_SPI){                                                      // if SPI port shared (display <-> touch)
        if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {                   // if display not yet selected
 8004af4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004afc:	f001 fcb0 	bl	8006460 <HAL_GPIO_ReadPin>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d017      	beq.n	8004b36 <Displ_Select+0x46>
            HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch
 8004b06:	2201      	movs	r2, #1
 8004b08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b0c:	480b      	ldr	r0, [pc, #44]	; (8004b3c <Displ_Select+0x4c>)
 8004b0e:	f001 fcbf 	bl	8006490 <HAL_GPIO_WritePin>
            SET_DISPL_SPI_BAUDRATE;                                                 //change SPI port speed as per display needs
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <Displ_Select+0x50>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	490a      	ldr	r1, [pc, #40]	; (8004b40 <Displ_Select+0x50>)
 8004b18:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	600b      	str	r3, [r1, #0]
 8004b20:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <Displ_Select+0x50>)
 8004b22:	4a07      	ldr	r2, [pc, #28]	; (8004b40 <Displ_Select+0x50>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b32:	f001 fcad 	bl	8006490 <HAL_GPIO_WritePin>
        }
    }
}
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	48000400 	.word	0x48000400
 8004b40:	40003800 	.word	0x40003800

08004b44 <Displ_Transmit>:
 * @PARAM   DC_Status   indicates if sending command or data
 *          data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6039      	str	r1, [r7, #0]
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4603      	mov	r3, r0
 8004b52:	71fb      	strb	r3, [r7, #7]
 8004b54:	460b      	mov	r3, r1
 8004b56:	80bb      	strh	r3, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	71bb      	strb	r3, [r7, #6]

    while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8004b5c:	bf00      	nop
 8004b5e:	4b23      	ldr	r3, [pc, #140]	; (8004bec <Displ_Transmit+0xa8>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0fa      	beq.n	8004b5e <Displ_Transmit+0x1a>

    Displ_Select();
 8004b68:	f7ff ffc2 	bl	8004af0 <Displ_Select>
    HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b78:	f001 fc8a 	bl	8006490 <HAL_GPIO_WritePin>

    if (isTouchGFXBuffer){
 8004b7c:	79bb      	ldrb	r3, [r7, #6]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d016      	beq.n	8004bb0 <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
        uint32_t *limit=(uint32_t*)(data+dataSize);
 8004b82:	88bb      	ldrh	r3, [r7, #4]
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	4413      	add	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	e00b      	b.n	8004ba8 <Displ_Transmit+0x64>
            *data32=__REV16(*data32);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	ba5b      	rev16	r3, r3
 8004b9a:	60bb      	str	r3, [r7, #8]
  return result;
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	601a      	str	r2, [r3, #0]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d3ef      	bcc.n	8004b90 <Displ_Transmit+0x4c>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
        Displ_SpiAvailable=0;
        HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
        if (dataSize<DISPL_DMA_CUTOFF) {
 8004bb0:	88bb      	ldrh	r3, [r7, #4]
 8004bb2:	2b13      	cmp	r3, #19
 8004bb4:	d80d      	bhi.n	8004bd2 <Displ_Transmit+0x8e>
#endif //DISPLAY_SPI_DMA_MODE
            Displ_SpiAvailable=0;
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <Displ_Transmit+0xa8>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8004bbc:	88ba      	ldrh	r2, [r7, #4]
 8004bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc2:	6839      	ldr	r1, [r7, #0]
 8004bc4:	480a      	ldr	r0, [pc, #40]	; (8004bf0 <Displ_Transmit+0xac>)
 8004bc6:	f004 f84e 	bl	8008c66 <HAL_SPI_Transmit>
            Displ_SpiAvailable=1;
 8004bca:	4b08      	ldr	r3, [pc, #32]	; (8004bec <Displ_Transmit+0xa8>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	701a      	strb	r2, [r3, #0]
            Displ_SpiAvailable=0;
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
        }
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
    }
 8004bd0:	e008      	b.n	8004be4 <Displ_Transmit+0xa0>
            Displ_SpiAvailable=0;
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <Displ_Transmit+0xa8>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8004bd8:	88bb      	ldrh	r3, [r7, #4]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6839      	ldr	r1, [r7, #0]
 8004bde:	4804      	ldr	r0, [pc, #16]	; (8004bf0 <Displ_Transmit+0xac>)
 8004be0:	f004 f9b6 	bl	8008f50 <HAL_SPI_Transmit_DMA>
    }
 8004be4:	bf00      	nop
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20000058 	.word	0x20000058
 8004bf0:	20001f44 	.word	0x20001f44

08004bf4 <Displ_WriteCommand>:


/**********************************
 * @BRIEF   transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
    Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8004bfe:	1df9      	adds	r1, r7, #7
 8004c00:	2300      	movs	r3, #0
 8004c02:	2201      	movs	r2, #1
 8004c04:	2000      	movs	r0, #0
 8004c06:	f7ff ff9d 	bl	8004b44 <Displ_Transmit>
}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <Displ_WriteData>:
 * @BRIEF   transmit a set of data in a SPI_DATA format
 * @PARAM   data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	71fb      	strb	r3, [r7, #7]
    if (buff_size==0) return;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <Displ_WriteData+0x24>
    Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	68f9      	ldr	r1, [r7, #12]
 8004c2e:	2001      	movs	r0, #1
 8004c30:	f7ff ff88 	bl	8004b44 <Displ_Transmit>
 8004c34:	e000      	b.n	8004c38 <Displ_WriteData+0x26>
    if (buff_size==0) return;
 8004c36:	bf00      	nop
}
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <ILI9XXX_Init>:


/**********************************
 * @brief   ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
    Displ_Select();
 8004c44:	f7ff ff54 	bl	8004af0 <Displ_Select>

    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c52:	f001 fc1d 	bl	8006490 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8004c56:	2001      	movs	r0, #1
 8004c58:	f000 ff4c 	bl	8005af4 <HAL_Delay>
    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c66:	f001 fc13 	bl	8006490 <HAL_GPIO_WritePin>
    HAL_Delay(150);
 8004c6a:	2096      	movs	r0, #150	; 0x96
 8004c6c:	f000 ff42 	bl	8005af4 <HAL_Delay>
        Displ_WriteData(data,3);
    #endif
*/


    Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8004c70:	203a      	movs	r0, #58	; 0x3a
 8004c72:	f7ff ffbf 	bl	8004bf4 <Displ_WriteCommand>
#ifdef Z_RGB666
    Displ_WriteData((uint8_t *)"\x66",1,0);     // RGB666
#endif
#ifdef Z_RGB565
    Displ_WriteData((uint8_t *)"\x55",1,0);     // RGB565
 8004c76:	2200      	movs	r2, #0
 8004c78:	2101      	movs	r1, #1
 8004c7a:	4810      	ldr	r0, [pc, #64]	; (8004cbc <ILI9XXX_Init+0x7c>)
 8004c7c:	f7ff ffc9 	bl	8004c12 <Displ_WriteData>
#endif
    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004c80:	20b0      	movs	r0, #176	; 0xb0
 8004c82:	f7ff ffb7 	bl	8004bf4 <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004c86:	2200      	movs	r2, #0
 8004c88:	2101      	movs	r1, #1
 8004c8a:	480d      	ldr	r0, [pc, #52]	; (8004cc0 <ILI9XXX_Init+0x80>)
 8004c8c:	f7ff ffc1 	bl	8004c12 <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004c90:	20b0      	movs	r0, #176	; 0xb0
 8004c92:	f7ff ffaf 	bl	8004bf4 <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004c96:	2200      	movs	r2, #0
 8004c98:	2101      	movs	r1, #1
 8004c9a:	4809      	ldr	r0, [pc, #36]	; (8004cc0 <ILI9XXX_Init+0x80>)
 8004c9c:	f7ff ffb9 	bl	8004c12 <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8004ca0:	2011      	movs	r0, #17
 8004ca2:	f7ff ffa7 	bl	8004bf4 <Displ_WriteCommand>
    HAL_Delay(120);
 8004ca6:	2078      	movs	r0, #120	; 0x78
 8004ca8:	f000 ff24 	bl	8005af4 <HAL_Delay>

    Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8004cac:	2029      	movs	r0, #41	; 0x29
 8004cae:	f7ff ffa1 	bl	8004bf4 <Displ_WriteCommand>
    HAL_Delay(5);
 8004cb2:	2005      	movs	r0, #5
 8004cb4:	f000 ff1e 	bl	8005af4 <HAL_Delay>

}
 8004cb8:	bf00      	nop
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	0800bf08 	.word	0x0800bf08
 8004cc0:	0800bf0c 	.word	0x0800bf0c

08004cc4 <Displ_SetAddressWindow>:
 *          information
 * @param  x1,y1,x2,y2 top left and bottom
 *                     right corner of the area
 *                     to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004cc4:	b590      	push	{r4, r7, lr}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	4604      	mov	r4, r0
 8004ccc:	4608      	mov	r0, r1
 8004cce:	4611      	mov	r1, r2
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4623      	mov	r3, r4
 8004cd4:	80fb      	strh	r3, [r7, #6]
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	80bb      	strh	r3, [r7, #4]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	807b      	strh	r3, [r7, #2]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	803b      	strh	r3, [r7, #0]
    static uint8_t data[4];

    ((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8004ce2:	887b      	ldrh	r3, [r7, #2]
 8004ce4:	061a      	lsls	r2, r3, #24
 8004ce6:	887b      	ldrh	r3, [r7, #2]
 8004ce8:	021b      	lsls	r3, r3, #8
 8004cea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	88fa      	ldrh	r2, [r7, #6]
 8004cfa:	0a12      	lsrs	r2, r2, #8
 8004cfc:	b292      	uxth	r2, r2
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <Displ_SetAddressWindow+0x90>)
 8004d02:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8004d04:	202a      	movs	r0, #42	; 0x2a
 8004d06:	f7ff ff75 	bl	8004bf4 <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2104      	movs	r1, #4
 8004d0e:	4811      	ldr	r0, [pc, #68]	; (8004d54 <Displ_SetAddressWindow+0x90>)
 8004d10:	f7ff ff7f 	bl	8004c12 <Displ_WriteData>

    ((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8004d14:	883b      	ldrh	r3, [r7, #0]
 8004d16:	061a      	lsls	r2, r3, #24
 8004d18:	883b      	ldrh	r3, [r7, #0]
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d20:	431a      	orrs	r2, r3
 8004d22:	88bb      	ldrh	r3, [r7, #4]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	88ba      	ldrh	r2, [r7, #4]
 8004d2c:	0a12      	lsrs	r2, r2, #8
 8004d2e:	b292      	uxth	r2, r2
 8004d30:	431a      	orrs	r2, r3
 8004d32:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <Displ_SetAddressWindow+0x90>)
 8004d34:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8004d36:	202b      	movs	r0, #43	; 0x2b
 8004d38:	f7ff ff5c 	bl	8004bf4 <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2104      	movs	r1, #4
 8004d40:	4804      	ldr	r0, [pc, #16]	; (8004d54 <Displ_SetAddressWindow+0x90>)
 8004d42:	f7ff ff66 	bl	8004c12 <Displ_WriteData>
    Displ_WriteCommand(ILI9XXX_MEMWR);
 8004d46:	202c      	movs	r0, #44	; 0x2c
 8004d48:	f7ff ff54 	bl	8004bf4 <Displ_WriteCommand>
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd90      	pop	{r4, r7, pc}
 8004d54:	200029e8 	.word	0x200029e8

08004d58 <Displ_Init>:

/*****************************************************
 * @brief               first display initialization.
 * @param   orientation display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
    if (TOUCH_SPI==DISPL_SPI){                                                  // if touch and display share the same SPI port
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);      // unselect display (will be selected at writing time)
 8004d62:	2201      	movs	r2, #1
 8004d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d6c:	f001 fb90 	bl	8006490 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch (will be selected at writing time)
 8004d70:	2201      	movs	r2, #1
 8004d72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d76:	4806      	ldr	r0, [pc, #24]	; (8004d90 <Displ_Init+0x38>)
 8004d78:	f001 fb8a 	bl	8006490 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
        SET_DISPL_SPI_BAUDRATE;
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);    // select touch
        SET_TOUCH_SPI_BAUDRATE;
    }
    ILI9XXX_Init();
 8004d7c:	f7ff ff60 	bl	8004c40 <ILI9XXX_Init>
    Displ_Orientation(orientation);
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f806 	bl	8004d94 <Displ_Orientation>
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	48000400 	.word	0x48000400

08004d94 <Displ_Orientation>:

/**********************************************
 * @brief       set orientation of the display
 * @param   m   orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	71fb      	strb	r3, [r7, #7]
    static uint8_t data[1];
    switch(orientation) {
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d837      	bhi.n	8004e14 <Displ_Orientation+0x80>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <Displ_Orientation+0x18>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004dbd 	.word	0x08004dbd
 8004db0:	08004dd3 	.word	0x08004dd3
 8004db4:	08004de9 	.word	0x08004de9
 8004db8:	08004dff 	.word	0x08004dff
        case Displ_Orientat_0:
            data[0]=ILI9XXX_MADCTL_0DEG;
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <Displ_Orientation+0xa0>)
 8004dbe:	2288      	movs	r2, #136	; 0x88
 8004dc0:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <Displ_Orientation+0xa4>)
 8004dc4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004dc8:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 8004dca:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <Displ_Orientation+0xa8>)
 8004dcc:	22f0      	movs	r2, #240	; 0xf0
 8004dce:	801a      	strh	r2, [r3, #0]
            break;
 8004dd0:	e020      	b.n	8004e14 <Displ_Orientation+0x80>
        case Displ_Orientat_90:
            data[0]=ILI9XXX_MADCTL_90DEG;
 8004dd2:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <Displ_Orientation+0xa0>)
 8004dd4:	22e8      	movs	r2, #232	; 0xe8
 8004dd6:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 8004dd8:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <Displ_Orientation+0xa4>)
 8004dda:	22f0      	movs	r2, #240	; 0xf0
 8004ddc:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 8004dde:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <Displ_Orientation+0xa8>)
 8004de0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004de4:	801a      	strh	r2, [r3, #0]
            break;
 8004de6:	e015      	b.n	8004e14 <Displ_Orientation+0x80>
        case Displ_Orientat_180:
            data[0]=ILI9XXX_MADCTL_180DEG;
 8004de8:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <Displ_Orientation+0xa0>)
 8004dea:	2248      	movs	r2, #72	; 0x48
 8004dec:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8004dee:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <Displ_Orientation+0xa4>)
 8004df0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004df4:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 8004df6:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <Displ_Orientation+0xa8>)
 8004df8:	22f0      	movs	r2, #240	; 0xf0
 8004dfa:	801a      	strh	r2, [r3, #0]
            break;
 8004dfc:	e00a      	b.n	8004e14 <Displ_Orientation+0x80>
        case Displ_Orientat_270:
            data[0]=ILI9XXX_MADCTL_270DEG;
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <Displ_Orientation+0xa0>)
 8004e00:	2228      	movs	r2, #40	; 0x28
 8004e02:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 8004e04:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <Displ_Orientation+0xa4>)
 8004e06:	22f0      	movs	r2, #240	; 0xf0
 8004e08:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <Displ_Orientation+0xa8>)
 8004e0c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e10:	801a      	strh	r2, [r3, #0]
            break;
 8004e12:	bf00      	nop
    }
    Displ_WriteCommand(ILI9XXX_MADCTL);
 8004e14:	2036      	movs	r0, #54	; 0x36
 8004e16:	f7ff feed 	bl	8004bf4 <Displ_WriteCommand>
    Displ_WriteData(data,1,0);
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4805      	ldr	r0, [pc, #20]	; (8004e34 <Displ_Orientation+0xa0>)
 8004e20:	f7ff fef7 	bl	8004c12 <Displ_WriteData>
    current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8004e24:	4a06      	ldr	r2, [pc, #24]	; (8004e40 <Displ_Orientation+0xac>)
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	7013      	strb	r3, [r2, #0]
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	200029ec 	.word	0x200029ec
 8004e38:	200021e4 	.word	0x200021e4
 8004e3c:	200021e2 	.word	0x200021e2
 8004e40:	200021e0 	.word	0x200021e0

08004e44 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a05      	ldr	r2, [pc, #20]	; (8004e68 <HAL_SPI_ErrorCallback+0x24>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d102      	bne.n	8004e5c <HAL_SPI_ErrorCallback+0x18>
        Displ_SpiAvailable=1;
 8004e56:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <HAL_SPI_ErrorCallback+0x28>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
    }
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	40003800 	.word	0x40003800
 8004e6c:	20000058 	.word	0x20000058

08004e70 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a05      	ldr	r2, [pc, #20]	; (8004e94 <HAL_SPI_TxCpltCallback+0x24>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d102      	bne.n	8004e88 <HAL_SPI_TxCpltCallback+0x18>
        Displ_SpiAvailable=1;
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <HAL_SPI_TxCpltCallback+0x28>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	701a      	strb	r2, [r3, #0]
    #ifdef DISPLAY_USING_TOUCHGFX
        DisplayDriver_TransferCompleteCallback();
    #endif

    }
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40003800 	.word	0x40003800
 8004e98:	20000058 	.word	0x20000058

08004e9c <Displ_FillArea>:
/*****************************
 * @brief   fill a rectangle with a color
 * @param   x, y    top left corner of the rectangle
 *          w, h    width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b08b      	sub	sp, #44	; 0x2c
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4623      	mov	r3, r4
 8004eac:	80fb      	strh	r3, [r7, #6]
 8004eae:	4603      	mov	r3, r0
 8004eb0:	80bb      	strh	r3, [r7, #4]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	807b      	strh	r3, [r7, #2]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	803b      	strh	r3, [r7, #0]
 * -    swap buffers
 */

    uint32_t k,x1,y1,area,times;

    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	4a4f      	ldr	r2, [pc, #316]	; (8004ffc <Displ_FillArea+0x160>)
 8004ebe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	f280 8096 	bge.w	8004ff4 <Displ_FillArea+0x158>
 8004ec8:	88bb      	ldrh	r3, [r7, #4]
 8004eca:	4a4d      	ldr	r2, [pc, #308]	; (8005000 <Displ_FillArea+0x164>)
 8004ecc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	f280 808f 	bge.w	8004ff4 <Displ_FillArea+0x158>
 8004ed6:	887b      	ldrh	r3, [r7, #2]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 808b 	beq.w	8004ff4 <Displ_FillArea+0x158>
 8004ede:	883b      	ldrh	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8087 	beq.w	8004ff4 <Displ_FillArea+0x158>

    x1=x + w - 1;
 8004ee6:	88fa      	ldrh	r2, [r7, #6]
 8004ee8:	887b      	ldrh	r3, [r7, #2]
 8004eea:	4413      	add	r3, r2
 8004eec:	3b01      	subs	r3, #1
 8004eee:	623b      	str	r3, [r7, #32]
    if (x1 > _width) {
 8004ef0:	4b42      	ldr	r3, [pc, #264]	; (8004ffc <Displ_FillArea+0x160>)
 8004ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d903      	bls.n	8004f06 <Displ_FillArea+0x6a>
        x1=_width;
 8004efe:	4b3f      	ldr	r3, [pc, #252]	; (8004ffc <Displ_FillArea+0x160>)
 8004f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f04:	623b      	str	r3, [r7, #32]
    }

    y1=y + h - 1;
 8004f06:	88ba      	ldrh	r2, [r7, #4]
 8004f08:	883b      	ldrh	r3, [r7, #0]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
    if (y1 > _height) {
 8004f10:	4b3b      	ldr	r3, [pc, #236]	; (8005000 <Displ_FillArea+0x164>)
 8004f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f16:	461a      	mov	r2, r3
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d903      	bls.n	8004f26 <Displ_FillArea+0x8a>
        y1=_height;
 8004f1e:	4b38      	ldr	r3, [pc, #224]	; (8005000 <Displ_FillArea+0x164>)
 8004f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f24:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

    uint32_t data32;

    data32=(color>>8) | (color<<8) | (color<<24);   // supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8004f26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f28:	0a1b      	lsrs	r3, r3, #8
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	431a      	orrs	r2, r3
 8004f34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f36:	061b      	lsls	r3, r3, #24
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
    area=((y1-y+1)*(x1-x+1));                       // area to fill in 16bit pixels
 8004f3c:	88bb      	ldrh	r3, [r7, #4]
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	3301      	adds	r3, #1
 8004f44:	88fa      	ldrh	r2, [r7, #6]
 8004f46:	6a39      	ldr	r1, [r7, #32]
 8004f48:	1a8a      	subs	r2, r1, r2
 8004f4a:	3201      	adds	r2, #1
 8004f4c:	fb02 f303 	mul.w	r3, r2, r3
 8004f50:	60fb      	str	r3, [r7, #12]
    uint32_t *buf32Pos=(uint32_t *)dispBuffer;      //dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8004f52:	4b2c      	ldr	r3, [pc, #176]	; (8005004 <Displ_FillArea+0x168>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	617b      	str	r3, [r7, #20]
    if (area<(SIZEBUF>>1))                          // if area is smaller than dispBuffer
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f5e:	d204      	bcs.n	8004f6a <Displ_FillArea+0xce>
        times=(area>>1)+1;                          // number of times data32 has to be loaded into buffer
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	3301      	adds	r3, #1
 8004f66:	61bb      	str	r3, [r7, #24]
 8004f68:	e002      	b.n	8004f70 <Displ_FillArea+0xd4>
    else
        times=(SIZEBUF>>2);                         // dispBuffer size as 32bit-words
 8004f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f6e:	61bb      	str	r3, [r7, #24]
    for (k = 0; k < times; k++)
 8004f70:	2300      	movs	r3, #0
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
 8004f74:	e007      	b.n	8004f86 <Displ_FillArea+0xea>
        *(buf32Pos++)=data32;                       // loads buffer moving 32bit-words
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	1d1a      	adds	r2, r3, #4
 8004f7a:	617a      	str	r2, [r7, #20]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	601a      	str	r2, [r3, #0]
    for (k = 0; k < times; k++)
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	3301      	adds	r3, #1
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
 8004f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d3f3      	bcc.n	8004f76 <Displ_FillArea+0xda>
    }
    datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
    Displ_SetAddressWindow(x, y, x1, y1);
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	88b9      	ldrh	r1, [r7, #4]
 8004f98:	88f8      	ldrh	r0, [r7, #6]
 8004f9a:	f7ff fe93 	bl	8004cc4 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
    times=(area>>(BUFLEVEL-1));                     //how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	0a5b      	lsrs	r3, r3, #9
 8004fa2:	61bb      	str	r3, [r7, #24]
    for  (k=0;k<times;k++) {
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa8:	e00a      	b.n	8004fc0 <Displ_FillArea+0x124>
        Displ_WriteData(dispBuffer,SIZEBUF,0);
 8004faa:	4b16      	ldr	r3, [pc, #88]	; (8005004 <Displ_FillArea+0x168>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff fe2c 	bl	8004c12 <Displ_WriteData>
    for  (k=0;k<times;k++) {
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d3f0      	bcc.n	8004faa <Displ_FillArea+0x10e>
    }
    Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8004fc8:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <Displ_FillArea+0x168>)
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	005a      	lsls	r2, r3, #1
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	029b      	lsls	r3, r3, #10
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	4619      	mov	r1, r3
 8004fda:	f7ff fe1a 	bl	8004c12 <Displ_WriteData>
    }
    Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8004fde:	4b09      	ldr	r3, [pc, #36]	; (8005004 <Displ_FillArea+0x168>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a09      	ldr	r2, [pc, #36]	; (8005008 <Displ_FillArea+0x16c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d101      	bne.n	8004fec <Displ_FillArea+0x150>
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <Displ_FillArea+0x170>)
 8004fea:	e000      	b.n	8004fee <Displ_FillArea+0x152>
 8004fec:	4b06      	ldr	r3, [pc, #24]	; (8005008 <Displ_FillArea+0x16c>)
 8004fee:	4a05      	ldr	r2, [pc, #20]	; (8005004 <Displ_FillArea+0x168>)
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	e000      	b.n	8004ff6 <Displ_FillArea+0x15a>
    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004ff4:	bf00      	nop

}
 8004ff6:	372c      	adds	r7, #44	; 0x2c
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd90      	pop	{r4, r7, pc}
 8004ffc:	200021e2 	.word	0x200021e2
 8005000:	200021e4 	.word	0x200021e4
 8005004:	2000005c 	.word	0x2000005c
 8005008:	200021e8 	.word	0x200021e8
 800500c:	200025e8 	.word	0x200025e8

08005010 <Displ_Pixel>:
/***********************
 * @brief   print a single pixel
 * @params  x, y    pixel position on display
 *          color   ... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af02      	add	r7, sp, #8
 8005016:	4603      	mov	r3, r0
 8005018:	80fb      	strh	r3, [r7, #6]
 800501a:	460b      	mov	r3, r1
 800501c:	80bb      	strh	r3, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	4a0b      	ldr	r2, [pc, #44]	; (8005054 <Displ_Pixel+0x44>)
 8005026:	f9b2 2000 	ldrsh.w	r2, [r2]
 800502a:	4293      	cmp	r3, r2
 800502c:	da0e      	bge.n	800504c <Displ_Pixel+0x3c>
 800502e:	88bb      	ldrh	r3, [r7, #4]
 8005030:	4a09      	ldr	r2, [pc, #36]	; (8005058 <Displ_Pixel+0x48>)
 8005032:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005036:	4293      	cmp	r3, r2
 8005038:	da08      	bge.n	800504c <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 800503a:	88b9      	ldrh	r1, [r7, #4]
 800503c:	88f8      	ldrh	r0, [r7, #6]
 800503e:	887b      	ldrh	r3, [r7, #2]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	2301      	movs	r3, #1
 8005044:	2201      	movs	r2, #1
 8005046:	f7ff ff29 	bl	8004e9c <Displ_FillArea>
 800504a:	e000      	b.n	800504e <Displ_Pixel+0x3e>
        return;
 800504c:	bf00      	nop

}
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	200021e2 	.word	0x200021e2
 8005058:	200021e4 	.word	0x200021e4

0800505c <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 800505c:	b590      	push	{r4, r7, lr}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	4604      	mov	r4, r0
 8005064:	4608      	mov	r0, r1
 8005066:	4611      	mov	r1, r2
 8005068:	461a      	mov	r2, r3
 800506a:	4623      	mov	r3, r4
 800506c:	80fb      	strh	r3, [r7, #6]
 800506e:	4603      	mov	r3, r0
 8005070:	80bb      	strh	r3, [r7, #4]
 8005072:	460b      	mov	r3, r1
 8005074:	807b      	strh	r3, [r7, #2]
 8005076:	4613      	mov	r3, r2
 8005078:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800507a:	887b      	ldrh	r3, [r7, #2]
 800507c:	f1c3 0301 	rsb	r3, r3, #1
 8005080:	b29b      	uxth	r3, r3
 8005082:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005084:	2301      	movs	r3, #1
 8005086:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8005088:	887b      	ldrh	r3, [r7, #2]
 800508a:	461a      	mov	r2, r3
 800508c:	03d2      	lsls	r2, r2, #15
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	b29b      	uxth	r3, r3
 8005094:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8005096:	2300      	movs	r3, #0
 8005098:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800509a:	887b      	ldrh	r3, [r7, #2]
 800509c:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 800509e:	88f8      	ldrh	r0, [r7, #6]
 80050a0:	88ba      	ldrh	r2, [r7, #4]
 80050a2:	887b      	ldrh	r3, [r7, #2]
 80050a4:	4413      	add	r3, r2
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	883a      	ldrh	r2, [r7, #0]
 80050aa:	4619      	mov	r1, r3
 80050ac:	f7ff ffb0 	bl	8005010 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 80050b0:	88f8      	ldrh	r0, [r7, #6]
 80050b2:	88ba      	ldrh	r2, [r7, #4]
 80050b4:	887b      	ldrh	r3, [r7, #2]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	883a      	ldrh	r2, [r7, #0]
 80050bc:	4619      	mov	r1, r3
 80050be:	f7ff ffa7 	bl	8005010 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	887b      	ldrh	r3, [r7, #2]
 80050c6:	4413      	add	r3, r2
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	88b9      	ldrh	r1, [r7, #4]
 80050cc:	883a      	ldrh	r2, [r7, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff ff9e 	bl	8005010 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 80050d4:	88fa      	ldrh	r2, [r7, #6]
 80050d6:	887b      	ldrh	r3, [r7, #2]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	b29b      	uxth	r3, r3
 80050dc:	88b9      	ldrh	r1, [r7, #4]
 80050de:	883a      	ldrh	r2, [r7, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff ff95 	bl	8005010 <Displ_Pixel>

    while (x<y) {
 80050e6:	e081      	b.n	80051ec <Displ_drawCircle+0x190>
        if (f >= 0) {
 80050e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	db0e      	blt.n	800510e <Displ_drawCircle+0xb2>
            y--;
 80050f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80050fc:	8a7b      	ldrh	r3, [r7, #18]
 80050fe:	3302      	adds	r3, #2
 8005100:	b29b      	uxth	r3, r3
 8005102:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8005104:	8afa      	ldrh	r2, [r7, #22]
 8005106:	8a7b      	ldrh	r3, [r7, #18]
 8005108:	4413      	add	r3, r2
 800510a:	b29b      	uxth	r3, r3
 800510c:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800510e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005112:	b29b      	uxth	r3, r3
 8005114:	3301      	adds	r3, #1
 8005116:	b29b      	uxth	r3, r3
 8005118:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800511a:	8abb      	ldrh	r3, [r7, #20]
 800511c:	3302      	adds	r3, #2
 800511e:	b29b      	uxth	r3, r3
 8005120:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8005122:	8afa      	ldrh	r2, [r7, #22]
 8005124:	8abb      	ldrh	r3, [r7, #20]
 8005126:	4413      	add	r3, r2
 8005128:	b29b      	uxth	r3, r3
 800512a:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 800512c:	88fa      	ldrh	r2, [r7, #6]
 800512e:	8a3b      	ldrh	r3, [r7, #16]
 8005130:	4413      	add	r3, r2
 8005132:	b298      	uxth	r0, r3
 8005134:	88ba      	ldrh	r2, [r7, #4]
 8005136:	89fb      	ldrh	r3, [r7, #14]
 8005138:	4413      	add	r3, r2
 800513a:	b29b      	uxth	r3, r3
 800513c:	883a      	ldrh	r2, [r7, #0]
 800513e:	4619      	mov	r1, r3
 8005140:	f7ff ff66 	bl	8005010 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8005144:	88fa      	ldrh	r2, [r7, #6]
 8005146:	8a3b      	ldrh	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	b298      	uxth	r0, r3
 800514c:	88ba      	ldrh	r2, [r7, #4]
 800514e:	89fb      	ldrh	r3, [r7, #14]
 8005150:	4413      	add	r3, r2
 8005152:	b29b      	uxth	r3, r3
 8005154:	883a      	ldrh	r2, [r7, #0]
 8005156:	4619      	mov	r1, r3
 8005158:	f7ff ff5a 	bl	8005010 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 800515c:	88fa      	ldrh	r2, [r7, #6]
 800515e:	8a3b      	ldrh	r3, [r7, #16]
 8005160:	4413      	add	r3, r2
 8005162:	b298      	uxth	r0, r3
 8005164:	88ba      	ldrh	r2, [r7, #4]
 8005166:	89fb      	ldrh	r3, [r7, #14]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	b29b      	uxth	r3, r3
 800516c:	883a      	ldrh	r2, [r7, #0]
 800516e:	4619      	mov	r1, r3
 8005170:	f7ff ff4e 	bl	8005010 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	8a3b      	ldrh	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	b298      	uxth	r0, r3
 800517c:	88ba      	ldrh	r2, [r7, #4]
 800517e:	89fb      	ldrh	r3, [r7, #14]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	b29b      	uxth	r3, r3
 8005184:	883a      	ldrh	r2, [r7, #0]
 8005186:	4619      	mov	r1, r3
 8005188:	f7ff ff42 	bl	8005010 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 800518c:	88fa      	ldrh	r2, [r7, #6]
 800518e:	89fb      	ldrh	r3, [r7, #14]
 8005190:	4413      	add	r3, r2
 8005192:	b298      	uxth	r0, r3
 8005194:	88ba      	ldrh	r2, [r7, #4]
 8005196:	8a3b      	ldrh	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	b29b      	uxth	r3, r3
 800519c:	883a      	ldrh	r2, [r7, #0]
 800519e:	4619      	mov	r1, r3
 80051a0:	f7ff ff36 	bl	8005010 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 80051a4:	88fa      	ldrh	r2, [r7, #6]
 80051a6:	89fb      	ldrh	r3, [r7, #14]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	b298      	uxth	r0, r3
 80051ac:	88ba      	ldrh	r2, [r7, #4]
 80051ae:	8a3b      	ldrh	r3, [r7, #16]
 80051b0:	4413      	add	r3, r2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	883a      	ldrh	r2, [r7, #0]
 80051b6:	4619      	mov	r1, r3
 80051b8:	f7ff ff2a 	bl	8005010 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 80051bc:	88fa      	ldrh	r2, [r7, #6]
 80051be:	89fb      	ldrh	r3, [r7, #14]
 80051c0:	4413      	add	r3, r2
 80051c2:	b298      	uxth	r0, r3
 80051c4:	88ba      	ldrh	r2, [r7, #4]
 80051c6:	8a3b      	ldrh	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	883a      	ldrh	r2, [r7, #0]
 80051ce:	4619      	mov	r1, r3
 80051d0:	f7ff ff1e 	bl	8005010 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 80051d4:	88fa      	ldrh	r2, [r7, #6]
 80051d6:	89fb      	ldrh	r3, [r7, #14]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	b298      	uxth	r0, r3
 80051dc:	88ba      	ldrh	r2, [r7, #4]
 80051de:	8a3b      	ldrh	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	883a      	ldrh	r2, [r7, #0]
 80051e6:	4619      	mov	r1, r3
 80051e8:	f7ff ff12 	bl	8005010 <Displ_Pixel>
    while (x<y) {
 80051ec:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80051f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	f6ff af77 	blt.w	80050e8 <Displ_drawCircle+0x8c>
    }
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	bd90      	pop	{r4, r7, pc}

08005204 <Displ_CLS>:

/*****************
 * @brief   clear display with a color.
 * @param   bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af02      	add	r7, sp, #8
 800520a:	4603      	mov	r3, r0
 800520c:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(0, 0, _width, _height, bgcolor);
 800520e:	4b09      	ldr	r3, [pc, #36]	; (8005234 <Displ_CLS+0x30>)
 8005210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005214:	b29a      	uxth	r2, r3
 8005216:	4b08      	ldr	r3, [pc, #32]	; (8005238 <Displ_CLS+0x34>)
 8005218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800521c:	b299      	uxth	r1, r3
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	460b      	mov	r3, r1
 8005224:	2100      	movs	r1, #0
 8005226:	2000      	movs	r0, #0
 8005228:	f7ff fe38 	bl	8004e9c <Displ_FillArea>
}
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	200021e2 	.word	0x200021e2
 8005238:	200021e4 	.word	0x200021e4

0800523c <Displ_Line>:

/************************************************************************
 * @brief   draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800523c:	b590      	push	{r4, r7, lr}
 800523e:	b08b      	sub	sp, #44	; 0x2c
 8005240:	af02      	add	r7, sp, #8
 8005242:	4604      	mov	r4, r0
 8005244:	4608      	mov	r0, r1
 8005246:	4611      	mov	r1, r2
 8005248:	461a      	mov	r2, r3
 800524a:	4623      	mov	r3, r4
 800524c:	80fb      	strh	r3, [r7, #6]
 800524e:	4603      	mov	r3, r0
 8005250:	80bb      	strh	r3, [r7, #4]
 8005252:	460b      	mov	r3, r1
 8005254:	807b      	strh	r3, [r7, #2]
 8005256:	4613      	mov	r3, r2
 8005258:	803b      	strh	r3, [r7, #0]
    int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 800525a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800525e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005262:	429a      	cmp	r2, r3
 8005264:	d123      	bne.n	80052ae <Displ_Line+0x72>
        if (y1>y0){
 8005266:	f9b7 2000 	ldrsh.w	r2, [r7]
 800526a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800526e:	429a      	cmp	r2, r3
 8005270:	dd0e      	ble.n	8005290 <Displ_Line+0x54>
            Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8005272:	88f8      	ldrh	r0, [r7, #6]
 8005274:	88b9      	ldrh	r1, [r7, #4]
 8005276:	883a      	ldrh	r2, [r7, #0]
 8005278:	88bb      	ldrh	r3, [r7, #4]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	b29b      	uxth	r3, r3
 800527e:	3301      	adds	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	4613      	mov	r3, r2
 8005288:	2201      	movs	r2, #1
 800528a:	f7ff fe07 	bl	8004e9c <Displ_FillArea>
        }
        else {
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
        }
        return;
 800528e:	e103      	b.n	8005498 <Displ_Line+0x25c>
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8005290:	88f8      	ldrh	r0, [r7, #6]
 8005292:	8839      	ldrh	r1, [r7, #0]
 8005294:	88ba      	ldrh	r2, [r7, #4]
 8005296:	883b      	ldrh	r3, [r7, #0]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	b29b      	uxth	r3, r3
 800529c:	3301      	adds	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	2201      	movs	r2, #1
 80052a8:	f7ff fdf8 	bl	8004e9c <Displ_FillArea>
        return;
 80052ac:	e0f4      	b.n	8005498 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 80052ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80052b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d121      	bne.n	80052fe <Displ_Line+0xc2>
        if (x1>x0)
 80052ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80052be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	dd0d      	ble.n	80052e2 <Displ_Line+0xa6>
            Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 80052c6:	88f8      	ldrh	r0, [r7, #6]
 80052c8:	88b9      	ldrh	r1, [r7, #4]
 80052ca:	887a      	ldrh	r2, [r7, #2]
 80052cc:	88fb      	ldrh	r3, [r7, #6]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3301      	adds	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	2301      	movs	r3, #1
 80052dc:	f7ff fdde 	bl	8004e9c <Displ_FillArea>
        else
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
        return;
 80052e0:	e0da      	b.n	8005498 <Displ_Line+0x25c>
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 80052e2:	8878      	ldrh	r0, [r7, #2]
 80052e4:	8839      	ldrh	r1, [r7, #0]
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	887b      	ldrh	r3, [r7, #2]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3301      	adds	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	2301      	movs	r3, #1
 80052f8:	f7ff fdd0 	bl	8004e9c <Displ_FillArea>
        return;
 80052fc:	e0cc      	b.n	8005498 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 80052fe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005302:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005306:	429a      	cmp	r2, r3
 8005308:	dd05      	ble.n	8005316 <Displ_Line+0xda>
 800530a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800530e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005312:	1ad2      	subs	r2, r2, r3
 8005314:	e004      	b.n	8005320 <Displ_Line+0xe4>
 8005316:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800531a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800531e:	1ad2      	subs	r2, r2, r3
 8005320:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005328:	4299      	cmp	r1, r3
 800532a:	dd05      	ble.n	8005338 <Displ_Line+0xfc>
 800532c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005330:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005334:	1acb      	subs	r3, r1, r3
 8005336:	e004      	b.n	8005342 <Displ_Line+0x106>
 8005338:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800533c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005340:	1acb      	subs	r3, r1, r3
 8005342:	429a      	cmp	r2, r3
 8005344:	bfcc      	ite	gt
 8005346:	2301      	movgt	r3, #1
 8005348:	2300      	movle	r3, #0
 800534a:	b2db      	uxtb	r3, r3
 800534c:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 800534e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00b      	beq.n	800536e <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	827b      	strh	r3, [r7, #18]
 800535a:	88bb      	ldrh	r3, [r7, #4]
 800535c:	80fb      	strh	r3, [r7, #6]
 800535e:	8a7b      	ldrh	r3, [r7, #18]
 8005360:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8005362:	887b      	ldrh	r3, [r7, #2]
 8005364:	823b      	strh	r3, [r7, #16]
 8005366:	883b      	ldrh	r3, [r7, #0]
 8005368:	807b      	strh	r3, [r7, #2]
 800536a:	8a3b      	ldrh	r3, [r7, #16]
 800536c:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800536e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005372:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005376:	429a      	cmp	r2, r3
 8005378:	dd0b      	ble.n	8005392 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	81fb      	strh	r3, [r7, #14]
 800537e:	887b      	ldrh	r3, [r7, #2]
 8005380:	80fb      	strh	r3, [r7, #6]
 8005382:	89fb      	ldrh	r3, [r7, #14]
 8005384:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8005386:	88bb      	ldrh	r3, [r7, #4]
 8005388:	81bb      	strh	r3, [r7, #12]
 800538a:	883b      	ldrh	r3, [r7, #0]
 800538c:	80bb      	strh	r3, [r7, #4]
 800538e:	89bb      	ldrh	r3, [r7, #12]
 8005390:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8005392:	887a      	ldrh	r2, [r7, #2]
 8005394:	88fb      	ldrh	r3, [r7, #6]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	b29b      	uxth	r3, r3
 800539a:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 800539c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80053a0:	105b      	asrs	r3, r3, #1
 80053a2:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 80053a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80053a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	da07      	bge.n	80053c0 <Displ_Line+0x184>
        dy = y1-y0;
 80053b0:	883a      	ldrh	r2, [r7, #0]
 80053b2:	88bb      	ldrh	r3, [r7, #4]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 80053ba:	2301      	movs	r3, #1
 80053bc:	837b      	strh	r3, [r7, #26]
 80053be:	e007      	b.n	80053d0 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 80053c0:	88ba      	ldrh	r2, [r7, #4]
 80053c2:	883b      	ldrh	r3, [r7, #0]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 80053ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053ce:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 80053d0:	2300      	movs	r3, #0
 80053d2:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	83bb      	strh	r3, [r7, #28]
 80053d8:	e03a      	b.n	8005450 <Displ_Line+0x214>
        l++;
 80053da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3301      	adds	r3, #1
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 80053e6:	8b3a      	ldrh	r2, [r7, #24]
 80053e8:	8afb      	ldrh	r3, [r7, #22]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 80053f0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	da25      	bge.n	8005444 <Displ_Line+0x208>
            if (steep) {
 80053f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d009      	beq.n	8005414 <Displ_Line+0x1d8>
                Displ_FillArea(y0, x0, 1, l, color);
 8005400:	88b8      	ldrh	r0, [r7, #4]
 8005402:	88f9      	ldrh	r1, [r7, #6]
 8005404:	8bfa      	ldrh	r2, [r7, #30]
 8005406:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	4613      	mov	r3, r2
 800540c:	2201      	movs	r2, #1
 800540e:	f7ff fd45 	bl	8004e9c <Displ_FillArea>
 8005412:	e007      	b.n	8005424 <Displ_Line+0x1e8>
            } else {
                Displ_FillArea(x0, y0, l, 1, color);
 8005414:	88f8      	ldrh	r0, [r7, #6]
 8005416:	88b9      	ldrh	r1, [r7, #4]
 8005418:	8bfa      	ldrh	r2, [r7, #30]
 800541a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	2301      	movs	r3, #1
 8005420:	f7ff fd3c 	bl	8004e9c <Displ_FillArea>
            }
            y0 += ystep;
 8005424:	88ba      	ldrh	r2, [r7, #4]
 8005426:	8b7b      	ldrh	r3, [r7, #26]
 8005428:	4413      	add	r3, r2
 800542a:	b29b      	uxth	r3, r3
 800542c:	80bb      	strh	r3, [r7, #4]
            l=0;
 800542e:	2300      	movs	r3, #0
 8005430:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8005432:	8bbb      	ldrh	r3, [r7, #28]
 8005434:	3301      	adds	r3, #1
 8005436:	b29b      	uxth	r3, r3
 8005438:	80fb      	strh	r3, [r7, #6]
            err += dx;
 800543a:	8b3a      	ldrh	r2, [r7, #24]
 800543c:	897b      	ldrh	r3, [r7, #10]
 800543e:	4413      	add	r3, r2
 8005440:	b29b      	uxth	r3, r3
 8005442:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8005444:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005448:	b29b      	uxth	r3, r3
 800544a:	3301      	adds	r3, #1
 800544c:	b29b      	uxth	r3, r3
 800544e:	83bb      	strh	r3, [r7, #28]
 8005450:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005454:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005458:	429a      	cmp	r2, r3
 800545a:	ddbe      	ble.n	80053da <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 800545c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d019      	beq.n	8005498 <Displ_Line+0x25c>
        if (steep) {
 8005464:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00b      	beq.n	8005484 <Displ_Line+0x248>
            Displ_FillArea(y0, x0, 1, l-1, color);
 800546c:	88b8      	ldrh	r0, [r7, #4]
 800546e:	88f9      	ldrh	r1, [r7, #6]
 8005470:	8bfb      	ldrh	r3, [r7, #30]
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	4613      	mov	r3, r2
 800547c:	2201      	movs	r2, #1
 800547e:	f7ff fd0d 	bl	8004e9c <Displ_FillArea>
 8005482:	e009      	b.n	8005498 <Displ_Line+0x25c>
        } else {
            Displ_FillArea(x0, y0, l-1,1, color);
 8005484:	88f8      	ldrh	r0, [r7, #6]
 8005486:	88b9      	ldrh	r1, [r7, #4]
 8005488:	8bfb      	ldrh	r3, [r7, #30]
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	2301      	movs	r3, #1
 8005494:	f7ff fd02 	bl	8004e9c <Displ_FillArea>
        }
    }
}
 8005498:	3724      	adds	r7, #36	; 0x24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd90      	pop	{r4, r7, pc}

0800549e <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800549e:	b590      	push	{r4, r7, lr}
 80054a0:	b091      	sub	sp, #68	; 0x44
 80054a2:	af02      	add	r7, sp, #8
 80054a4:	4604      	mov	r4, r0
 80054a6:	4608      	mov	r0, r1
 80054a8:	4611      	mov	r1, r2
 80054aa:	461a      	mov	r2, r3
 80054ac:	4623      	mov	r3, r4
 80054ae:	80fb      	strh	r3, [r7, #6]
 80054b0:	4603      	mov	r3, r0
 80054b2:	80bb      	strh	r3, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	807b      	strh	r3, [r7, #2]
 80054b8:	4613      	mov	r3, r2
 80054ba:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 80054bc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80054c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	dd0b      	ble.n	80054e0 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80054c8:	88bb      	ldrh	r3, [r7, #4]
 80054ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80054cc:	883b      	ldrh	r3, [r7, #0]
 80054ce:	80bb      	strh	r3, [r7, #4]
 80054d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054d2:	803b      	strh	r3, [r7, #0]
 80054d4:	88fb      	ldrh	r3, [r7, #6]
 80054d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80054d8:	887b      	ldrh	r3, [r7, #2]
 80054da:	80fb      	strh	r3, [r7, #6]
 80054dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054de:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 80054e0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80054e4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80054e8:	429a      	cmp	r2, r3
 80054ea:	dd0f      	ble.n	800550c <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 80054ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80054f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80054f2:	883b      	ldrh	r3, [r7, #0]
 80054f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80054f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054fa:	803b      	strh	r3, [r7, #0]
 80054fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005500:	843b      	strh	r3, [r7, #32]
 8005502:	887b      	ldrh	r3, [r7, #2]
 8005504:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005508:	8c3b      	ldrh	r3, [r7, #32]
 800550a:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 800550c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005510:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005514:	429a      	cmp	r2, r3
 8005516:	dd0b      	ble.n	8005530 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005518:	88bb      	ldrh	r3, [r7, #4]
 800551a:	83fb      	strh	r3, [r7, #30]
 800551c:	883b      	ldrh	r3, [r7, #0]
 800551e:	80bb      	strh	r3, [r7, #4]
 8005520:	8bfb      	ldrh	r3, [r7, #30]
 8005522:	803b      	strh	r3, [r7, #0]
 8005524:	88fb      	ldrh	r3, [r7, #6]
 8005526:	83bb      	strh	r3, [r7, #28]
 8005528:	887b      	ldrh	r3, [r7, #2]
 800552a:	80fb      	strh	r3, [r7, #6]
 800552c:	8bbb      	ldrh	r3, [r7, #28]
 800552e:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8005530:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005534:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005538:	429a      	cmp	r2, r3
 800553a:	d136      	bne.n	80055aa <Displ_fillTriangle+0x10c>
        a = b = x0;
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005540:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005542:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8005544:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005548:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800554c:	429a      	cmp	r2, r3
 800554e:	da02      	bge.n	8005556 <Displ_fillTriangle+0xb8>
 8005550:	887b      	ldrh	r3, [r7, #2]
 8005552:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005554:	e007      	b.n	8005566 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8005556:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800555a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800555e:	429a      	cmp	r2, r3
 8005560:	dd01      	ble.n	8005566 <Displ_fillTriangle+0xc8>
 8005562:	887b      	ldrh	r3, [r7, #2]
 8005564:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8005566:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800556a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800556e:	429a      	cmp	r2, r3
 8005570:	da03      	bge.n	800557a <Displ_fillTriangle+0xdc>
 8005572:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005576:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005578:	e008      	b.n	800558c <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 800557a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800557e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005582:	429a      	cmp	r2, r3
 8005584:	dd02      	ble.n	800558c <Displ_fillTriangle+0xee>
 8005586:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800558a:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 800558c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005590:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005594:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005598:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800559c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	4623      	mov	r3, r4
 80055a4:	f7ff fe4a 	bl	800523c <Displ_Line>
        return;
 80055a8:	e0d2      	b.n	8005750 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 80055aa:	887a      	ldrh	r2, [r7, #2]
 80055ac:	88fb      	ldrh	r3, [r7, #6]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 80055b4:	883a      	ldrh	r2, [r7, #0]
 80055b6:	88bb      	ldrh	r3, [r7, #4]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 80055be:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 80055ca:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80055ce:	88bb      	ldrh	r3, [r7, #4]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 80055d6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80055da:	887b      	ldrh	r3, [r7, #2]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	b29b      	uxth	r3, r3
 80055e0:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 80055e2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80055e6:	883b      	ldrh	r3, [r7, #0]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 80055ee:	2300      	movs	r3, #0
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80055f6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80055fa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80055fe:	429a      	cmp	r2, r3
 8005600:	d102      	bne.n	8005608 <Displ_fillTriangle+0x16a>
 8005602:	883b      	ldrh	r3, [r7, #0]
 8005604:	863b      	strh	r3, [r7, #48]	; 0x30
 8005606:	e003      	b.n	8005610 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8005608:	883b      	ldrh	r3, [r7, #0]
 800560a:	3b01      	subs	r3, #1
 800560c:	b29b      	uxth	r3, r3
 800560e:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8005610:	88bb      	ldrh	r3, [r7, #4]
 8005612:	867b      	strh	r3, [r7, #50]	; 0x32
 8005614:	e03d      	b.n	8005692 <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8005616:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800561a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800561c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005620:	b29a      	uxth	r2, r3
 8005622:	88fb      	ldrh	r3, [r7, #6]
 8005624:	4413      	add	r3, r2
 8005626:	b29b      	uxth	r3, r3
 8005628:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 800562a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800562e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005630:	fb92 f3f3 	sdiv	r3, r2, r3
 8005634:	b29a      	uxth	r2, r3
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	4413      	add	r3, r2
 800563a:	b29b      	uxth	r3, r3
 800563c:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 800563e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005644:	4413      	add	r3, r2
 8005646:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005648:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800564c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800564e:	4413      	add	r3, r2
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005652:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005656:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800565a:	429a      	cmp	r2, r3
 800565c:	dd05      	ble.n	800566a <Displ_fillTriangle+0x1cc>
 800565e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005660:	81bb      	strh	r3, [r7, #12]
 8005662:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005664:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005666:	89bb      	ldrh	r3, [r7, #12]
 8005668:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 800566a:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 800566e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005672:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005676:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800567a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	4623      	mov	r3, r4
 8005682:	f7ff fddb 	bl	800523c <Displ_Line>
    for(y=y0; y<=last; y++) {
 8005686:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800568a:	b29b      	uxth	r3, r3
 800568c:	3301      	adds	r3, #1
 800568e:	b29b      	uxth	r3, r3
 8005690:	867b      	strh	r3, [r7, #50]	; 0x32
 8005692:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005696:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800569a:	429a      	cmp	r2, r3
 800569c:	ddbb      	ble.n	8005616 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 800569e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80056a2:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80056a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80056aa:	1a8a      	subs	r2, r1, r2
 80056ac:	fb02 f303 	mul.w	r3, r2, r3
 80056b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 80056b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80056b6:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80056ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80056be:	1a8a      	subs	r2, r1, r2
 80056c0:	fb02 f303 	mul.w	r3, r2, r3
 80056c4:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 80056c6:	e03d      	b.n	8005744 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 80056c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80056cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	887b      	ldrh	r3, [r7, #2]
 80056d6:	4413      	add	r3, r2
 80056d8:	b29b      	uxth	r3, r3
 80056da:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 80056dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80056e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	4413      	add	r3, r2
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 80056f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80056f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056f6:	4413      	add	r3, r2
 80056f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80056fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80056fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005700:	4413      	add	r3, r2
 8005702:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005704:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005708:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800570c:	429a      	cmp	r2, r3
 800570e:	dd05      	ble.n	800571c <Displ_fillTriangle+0x27e>
 8005710:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005712:	81fb      	strh	r3, [r7, #14]
 8005714:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005716:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005718:	89fb      	ldrh	r3, [r7, #14]
 800571a:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 800571c:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005720:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005724:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005728:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800572c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	4623      	mov	r3, r4
 8005734:	f7ff fd82 	bl	800523c <Displ_Line>
    for(; y<=y2; y++) {
 8005738:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800573c:	b29b      	uxth	r3, r3
 800573e:	3301      	adds	r3, #1
 8005740:	b29b      	uxth	r3, r3
 8005742:	867b      	strh	r3, [r7, #50]	; 0x32
 8005744:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005748:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800574c:	429a      	cmp	r2, r3
 800574e:	ddbb      	ble.n	80056c8 <Displ_fillTriangle+0x22a>
    }
}
 8005750:	373c      	adds	r7, #60	; 0x3c
 8005752:	46bd      	mov	sp, r7
 8005754:	bd90      	pop	{r4, r7, pc}
	...

08005758 <Displ_WChar>:
 * @brief   display one character on the display
 * @param   x,y: top left corner of the character to be printed
 *          ch, font, color, bgcolor: as per parameter name
 *          size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005758:	b082      	sub	sp, #8
 800575a:	b590      	push	{r4, r7, lr}
 800575c:	b08d      	sub	sp, #52	; 0x34
 800575e:	af00      	add	r7, sp, #0
 8005760:	647b      	str	r3, [r7, #68]	; 0x44
 8005762:	4603      	mov	r3, r0
 8005764:	80fb      	strh	r3, [r7, #6]
 8005766:	460b      	mov	r3, r1
 8005768:	80bb      	strh	r3, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
    uint8_t wsize=font.Width; //printing char width
 800576e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005772:	76fb      	strb	r3, [r7, #27]

    if (size==2)
 8005774:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005778:	2b02      	cmp	r3, #2
 800577a:	d102      	bne.n	8005782 <Displ_WChar+0x2a>
        wsize<<= 1;
 800577c:	7efb      	ldrb	r3, [r7, #27]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	76fb      	strb	r3, [r7, #27]
    bufSize=0;
 8005782:	2300      	movs	r3, #0
 8005784:	623b      	str	r3, [r7, #32]
    bytes=font.Height * font.Size ;
 8005786:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800578a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800578e:	fb02 f303 	mul.w	r3, r2, r3
 8005792:	617b      	str	r3, [r7, #20]
    pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8005794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005796:	78fb      	ldrb	r3, [r7, #3]
 8005798:	3b20      	subs	r3, #32
 800579a:	4619      	mov	r1, r3
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	fb01 f303 	mul.w	r3, r1, r3
 80057a2:	4413      	add	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
    switch (font.Size) {
 80057a6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d005      	beq.n	80057ba <Displ_WChar+0x62>
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d107      	bne.n	80057c2 <Displ_WChar+0x6a>
        case 3:
            mask=0x800000;
 80057b2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80057b6:	61fb      	str	r3, [r7, #28]
            break;
 80057b8:	e005      	b.n	80057c6 <Displ_WChar+0x6e>
        case 2:
            mask=0x8000;
 80057ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057be:	61fb      	str	r3, [r7, #28]
            break;
 80057c0:	e001      	b.n	80057c6 <Displ_WChar+0x6e>
        default:
            mask=0x80;
 80057c2:	2380      	movs	r3, #128	; 0x80
 80057c4:	61fb      	str	r3, [r7, #28]
    }

#ifdef Z_RGB565

    uint16_t color1, bgcolor1;
    uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 80057c6:	4b60      	ldr	r3, [pc, #384]	; (8005948 <Displ_WChar+0x1f0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]

    color1 = ((color & 0xFF)<<8 | (color >> 8));            //swapping byte endian: STM32 is little endian, ST7735 is big endian
 80057cc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	b21a      	sxth	r2, r3
 80057d4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80057d8:	0a1b      	lsrs	r3, r3, #8
 80057da:	b29b      	uxth	r3, r3
 80057dc:	b21b      	sxth	r3, r3
 80057de:	4313      	orrs	r3, r2
 80057e0:	b21b      	sxth	r3, r3
 80057e2:	817b      	strh	r3, [r7, #10]
    bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));      //swapping byte endian: STM32 is little endian, ST7735 is big endian
 80057e4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	b21a      	sxth	r2, r3
 80057ec:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80057f0:	0a1b      	lsrs	r3, r3, #8
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	b21b      	sxth	r3, r3
 80057f6:	4313      	orrs	r3, r2
 80057f8:	b21b      	sxth	r3, r3
 80057fa:	813b      	strh	r3, [r7, #8]

    for(i = 0; i < (bytes); i+=font.Size){
 80057fc:	2300      	movs	r3, #0
 80057fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005800:	e06f      	b.n	80058e2 <Displ_WChar+0x18a>
        b=0;
 8005802:	2300      	movs	r3, #0
 8005804:	62bb      	str	r3, [r7, #40]	; 0x28
        switch (font.Size) {
 8005806:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800580a:	2b02      	cmp	r3, #2
 800580c:	d015      	beq.n	800583a <Displ_WChar+0xe2>
 800580e:	2b03      	cmp	r3, #3
 8005810:	d120      	bne.n	8005854 <Displ_WChar+0xfc>
            case 3:
                b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	4413      	add	r3, r2
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	041a      	lsls	r2, r3, #16
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	3301      	adds	r3, #1
 8005820:	6939      	ldr	r1, [r7, #16]
 8005822:	440b      	add	r3, r1
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	4313      	orrs	r3, r2
 800582a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800582c:	3202      	adds	r2, #2
 800582e:	6939      	ldr	r1, [r7, #16]
 8005830:	440a      	add	r2, r1
 8005832:	7812      	ldrb	r2, [r2, #0]
 8005834:	4313      	orrs	r3, r2
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8005838:	e011      	b.n	800585e <Displ_WChar+0x106>
            case 2:
                b=pos[i]<<8 | pos[i+1];
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583e:	4413      	add	r3, r2
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005846:	3201      	adds	r2, #1
 8005848:	6939      	ldr	r1, [r7, #16]
 800584a:	440a      	add	r2, r1
 800584c:	7812      	ldrb	r2, [r2, #0]
 800584e:	4313      	orrs	r3, r2
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8005852:	e004      	b.n	800585e <Displ_WChar+0x106>
            default:
                b=pos[i];
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	4413      	add	r3, r2
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        for(j = 0; j < font.Width; j++) {
 800585e:	2300      	movs	r3, #0
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
 8005862:	e032      	b.n	80058ca <Displ_WChar+0x172>
            if((b << j) & mask)  {
 8005864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	409a      	lsls	r2, r3
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	4013      	ands	r3, r2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d014      	beq.n	800589c <Displ_WChar+0x144>
                dispBuffer16[bufSize++] = color1;
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	623a      	str	r2, [r7, #32]
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	897a      	ldrh	r2, [r7, #10]
 8005880:	801a      	strh	r2, [r3, #0]
                if (size==2){
 8005882:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005886:	2b02      	cmp	r3, #2
 8005888:	d11c      	bne.n	80058c4 <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = color1;
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	623a      	str	r2, [r7, #32]
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	897a      	ldrh	r2, [r7, #10]
 8005898:	801a      	strh	r2, [r3, #0]
 800589a:	e013      	b.n	80058c4 <Displ_WChar+0x16c>
                }
            } else {
                dispBuffer16[bufSize++] = bgcolor1;
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	623a      	str	r2, [r7, #32]
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	893a      	ldrh	r2, [r7, #8]
 80058aa:	801a      	strh	r2, [r3, #0]
                if (size==2) {
 80058ac:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d107      	bne.n	80058c4 <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = bgcolor1;
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	623a      	str	r2, [r7, #32]
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	893a      	ldrh	r2, [r7, #8]
 80058c2:	801a      	strh	r2, [r3, #0]
        for(j = 0; j < font.Width; j++) {
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	3301      	adds	r3, #1
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80058ce:	461a      	mov	r2, r3
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d3c6      	bcc.n	8005864 <Displ_WChar+0x10c>
    for(i = 0; i < (bytes); i+=font.Size){
 80058d6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80058da:	461a      	mov	r2, r3
 80058dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058de:	4413      	add	r3, r2
 80058e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d38b      	bcc.n	8005802 <Displ_WChar+0xaa>
                }
            }
        }
    }
    bufSize<<=1;
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	623b      	str	r3, [r7, #32]
            }
        }
    }
#endif

    Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 80058f0:	7efb      	ldrb	r3, [r7, #27]
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	4413      	add	r3, r2
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29c      	uxth	r4, r3
 80058fe:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005902:	88bb      	ldrh	r3, [r7, #4]
 8005904:	4413      	add	r3, r2
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29b      	uxth	r3, r3
 800590c:	88b9      	ldrh	r1, [r7, #4]
 800590e:	88f8      	ldrh	r0, [r7, #6]
 8005910:	4622      	mov	r2, r4
 8005912:	f7ff f9d7 	bl	8004cc4 <Displ_SetAddressWindow>
    Displ_WriteData(dispBuffer,bufSize,0);
 8005916:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <Displ_WChar+0x1f0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	6a39      	ldr	r1, [r7, #32]
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff f977 	bl	8004c12 <Displ_WriteData>
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8005924:	4b08      	ldr	r3, [pc, #32]	; (8005948 <Displ_WChar+0x1f0>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a08      	ldr	r2, [pc, #32]	; (800594c <Displ_WChar+0x1f4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d101      	bne.n	8005932 <Displ_WChar+0x1da>
 800592e:	4b08      	ldr	r3, [pc, #32]	; (8005950 <Displ_WChar+0x1f8>)
 8005930:	e000      	b.n	8005934 <Displ_WChar+0x1dc>
 8005932:	4b06      	ldr	r3, [pc, #24]	; (800594c <Displ_WChar+0x1f4>)
 8005934:	4a04      	ldr	r2, [pc, #16]	; (8005948 <Displ_WChar+0x1f0>)
 8005936:	6013      	str	r3, [r2, #0]

}
 8005938:	bf00      	nop
 800593a:	3734      	adds	r7, #52	; 0x34
 800593c:	46bd      	mov	sp, r7
 800593e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005942:	b002      	add	sp, #8
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	2000005c 	.word	0x2000005c
 800594c:	200021e8 	.word	0x200021e8
 8005950:	200025e8 	.word	0x200025e8

08005954 <Displ_WString>:
 *          font    to bu used
 *          size    1 (normal), 2 (double width)
 *          color   font color
 *          bgcolor background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005954:	b082      	sub	sp, #8
 8005956:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005958:	b08b      	sub	sp, #44	; 0x2c
 800595a:	af06      	add	r7, sp, #24
 800595c:	603a      	str	r2, [r7, #0]
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005960:	4603      	mov	r3, r0
 8005962:	80fb      	strh	r3, [r7, #6]
 8005964:	460b      	mov	r3, r1
 8005966:	80bb      	strh	r3, [r7, #4]
    uint16_t delta=font.Width;
 8005968:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800596a:	81fb      	strh	r3, [r7, #14]
    if (size>1)
 800596c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005970:	2b01      	cmp	r3, #1
 8005972:	d922      	bls.n	80059ba <Displ_WString+0x66>
        delta<<=1;
 8005974:	89fb      	ldrh	r3, [r7, #14]
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 800597a:	e01e      	b.n	80059ba <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781a      	ldrb	r2, [r3, #0]
 8005980:	88bd      	ldrh	r5, [r7, #4]
 8005982:	88fc      	ldrh	r4, [r7, #6]
 8005984:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005988:	9304      	str	r3, [sp, #16]
 800598a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800598c:	9303      	str	r3, [sp, #12]
 800598e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005992:	9302      	str	r3, [sp, #8]
 8005994:	466e      	mov	r6, sp
 8005996:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800599a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800599e:	e886 0003 	stmia.w	r6, {r0, r1}
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	4629      	mov	r1, r5
 80059a6:	4620      	mov	r0, r4
 80059a8:	f7ff fed6 	bl	8005758 <Displ_WChar>
        x += delta;
 80059ac:	88fa      	ldrh	r2, [r7, #6]
 80059ae:	89fb      	ldrh	r3, [r7, #14]
 80059b0:	4413      	add	r3, r2
 80059b2:	80fb      	strh	r3, [r7, #6]
        str++;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	3301      	adds	r3, #1
 80059b8:	603b      	str	r3, [r7, #0]
    while(*str) {
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1dc      	bne.n	800597c <Displ_WString+0x28>
    }
}
 80059c2:	bf00      	nop
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80059ce:	b002      	add	sp, #8
 80059d0:	4770      	bx	lr
	...

080059d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80059d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a0c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80059d8:	f7ff f878 	bl	8004acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059dc:	480c      	ldr	r0, [pc, #48]	; (8005a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80059de:	490d      	ldr	r1, [pc, #52]	; (8005a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80059e0:	4a0d      	ldr	r2, [pc, #52]	; (8005a18 <LoopForever+0xe>)
  movs r3, #0
 80059e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059e4:	e002      	b.n	80059ec <LoopCopyDataInit>

080059e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059ea:	3304      	adds	r3, #4

080059ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059f0:	d3f9      	bcc.n	80059e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059f2:	4a0a      	ldr	r2, [pc, #40]	; (8005a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80059f4:	4c0a      	ldr	r4, [pc, #40]	; (8005a20 <LoopForever+0x16>)
  movs r3, #0
 80059f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059f8:	e001      	b.n	80059fe <LoopFillZerobss>

080059fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059fc:	3204      	adds	r2, #4

080059fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a00:	d3fb      	bcc.n	80059fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a02:	f004 fe17 	bl	800a634 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005a06:	f7fc fff9 	bl	80029fc <main>

08005a0a <LoopForever>:

LoopForever:
    b LoopForever
 8005a0a:	e7fe      	b.n	8005a0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005a0c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a14:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8005a18:	0800dc50 	.word	0x0800dc50
  ldr r2, =_sbss
 8005a1c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8005a20:	20002a04 	.word	0x20002a04

08005a24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005a24:	e7fe      	b.n	8005a24 <ADC1_IRQHandler>
	...

08005a28 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a2c:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <HAL_Init+0x28>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a07      	ldr	r2, [pc, #28]	; (8005a50 <HAL_Init+0x28>)
 8005a32:	f043 0310 	orr.w	r3, r3, #16
 8005a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a38:	2003      	movs	r0, #3
 8005a3a:	f000 f94f 	bl	8005cdc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a3e:	200f      	movs	r0, #15
 8005a40:	f000 f808 	bl	8005a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a44:	f7fe fdbc 	bl	80045c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40022000 	.word	0x40022000

08005a54 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a5c:	4b12      	ldr	r3, [pc, #72]	; (8005aa8 <HAL_InitTick+0x54>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	4b12      	ldr	r3, [pc, #72]	; (8005aac <HAL_InitTick+0x58>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	4619      	mov	r1, r3
 8005a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f967 	bl	8005d46 <HAL_SYSTICK_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e00e      	b.n	8005aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b0f      	cmp	r3, #15
 8005a86:	d80a      	bhi.n	8005a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a88:	2200      	movs	r2, #0
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	f000 f92f 	bl	8005cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a94:	4a06      	ldr	r2, [pc, #24]	; (8005ab0 <HAL_InitTick+0x5c>)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e000      	b.n	8005aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20000054 	.word	0x20000054
 8005aac:	20000064 	.word	0x20000064
 8005ab0:	20000060 	.word	0x20000060

08005ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ab8:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <HAL_IncTick+0x20>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <HAL_IncTick+0x24>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	4a04      	ldr	r2, [pc, #16]	; (8005ad8 <HAL_IncTick+0x24>)
 8005ac6:	6013      	str	r3, [r2, #0]
}
 8005ac8:	bf00      	nop
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	20000064 	.word	0x20000064
 8005ad8:	200029f0 	.word	0x200029f0

08005adc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  return uwTick;  
 8005ae0:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <HAL_GetTick+0x14>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	200029f0 	.word	0x200029f0

08005af4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005afc:	f7ff ffee 	bl	8005adc <HAL_GetTick>
 8005b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0c:	d005      	beq.n	8005b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b0e:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <HAL_Delay+0x44>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	461a      	mov	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005b1a:	bf00      	nop
 8005b1c:	f7ff ffde 	bl	8005adc <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d8f7      	bhi.n	8005b1c <HAL_Delay+0x28>
  {
  }
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000064 	.word	0x20000064

08005b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b4c:	4b0c      	ldr	r3, [pc, #48]	; (8005b80 <__NVIC_SetPriorityGrouping+0x44>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b58:	4013      	ands	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b6e:	4a04      	ldr	r2, [pc, #16]	; (8005b80 <__NVIC_SetPriorityGrouping+0x44>)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	60d3      	str	r3, [r2, #12]
}
 8005b74:	bf00      	nop
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	e000ed00 	.word	0xe000ed00

08005b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b88:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <__NVIC_GetPriorityGrouping+0x18>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	0a1b      	lsrs	r3, r3, #8
 8005b8e:	f003 0307 	and.w	r3, r3, #7
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	e000ed00 	.word	0xe000ed00

08005ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	db0b      	blt.n	8005bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	f003 021f 	and.w	r2, r3, #31
 8005bb8:	4907      	ldr	r1, [pc, #28]	; (8005bd8 <__NVIC_EnableIRQ+0x38>)
 8005bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8005bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	e000e100 	.word	0xe000e100

08005bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4603      	mov	r3, r0
 8005be4:	6039      	str	r1, [r7, #0]
 8005be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	db0a      	blt.n	8005c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	490c      	ldr	r1, [pc, #48]	; (8005c28 <__NVIC_SetPriority+0x4c>)
 8005bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfa:	0112      	lsls	r2, r2, #4
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	440b      	add	r3, r1
 8005c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c04:	e00a      	b.n	8005c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	4908      	ldr	r1, [pc, #32]	; (8005c2c <__NVIC_SetPriority+0x50>)
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	3b04      	subs	r3, #4
 8005c14:	0112      	lsls	r2, r2, #4
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	440b      	add	r3, r1
 8005c1a:	761a      	strb	r2, [r3, #24]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	e000e100 	.word	0xe000e100
 8005c2c:	e000ed00 	.word	0xe000ed00

08005c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b089      	sub	sp, #36	; 0x24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f1c3 0307 	rsb	r3, r3, #7
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	bf28      	it	cs
 8005c4e:	2304      	movcs	r3, #4
 8005c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	3304      	adds	r3, #4
 8005c56:	2b06      	cmp	r3, #6
 8005c58:	d902      	bls.n	8005c60 <NVIC_EncodePriority+0x30>
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	3b03      	subs	r3, #3
 8005c5e:	e000      	b.n	8005c62 <NVIC_EncodePriority+0x32>
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	43da      	mvns	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	401a      	ands	r2, r3
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c78:	f04f 31ff 	mov.w	r1, #4294967295
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c82:	43d9      	mvns	r1, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c88:	4313      	orrs	r3, r2
         );
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3724      	adds	r7, #36	; 0x24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
	...

08005c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ca8:	d301      	bcc.n	8005cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005caa:	2301      	movs	r3, #1
 8005cac:	e00f      	b.n	8005cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cae:	4a0a      	ldr	r2, [pc, #40]	; (8005cd8 <SysTick_Config+0x40>)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cb6:	210f      	movs	r1, #15
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbc:	f7ff ff8e 	bl	8005bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <SysTick_Config+0x40>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cc6:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <SysTick_Config+0x40>)
 8005cc8:	2207      	movs	r2, #7
 8005cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	e000e010 	.word	0xe000e010

08005cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff ff29 	bl	8005b3c <__NVIC_SetPriorityGrouping>
}
 8005cea:	bf00      	nop
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b086      	sub	sp, #24
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
 8005cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d04:	f7ff ff3e 	bl	8005b84 <__NVIC_GetPriorityGrouping>
 8005d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	6978      	ldr	r0, [r7, #20]
 8005d10:	f7ff ff8e 	bl	8005c30 <NVIC_EncodePriority>
 8005d14:	4602      	mov	r2, r0
 8005d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff ff5d 	bl	8005bdc <__NVIC_SetPriority>
}
 8005d22:	bf00      	nop
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	4603      	mov	r3, r0
 8005d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff ff31 	bl	8005ba0 <__NVIC_EnableIRQ>
}
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b082      	sub	sp, #8
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff ffa2 	bl	8005c98 <SysTick_Config>
 8005d54:	4603      	mov	r3, r0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e037      	b.n	8005de4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005d8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005d8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005db0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f9b8 	bl	800613c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}  
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_DMA_Start_IT+0x20>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e04a      	b.n	8005ea2 <HAL_DMA_Start_IT+0xb6>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d13a      	bne.n	8005e94 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2202      	movs	r2, #2
 8005e22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f94b 	bl	80060de <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 020e 	orr.w	r2, r2, #14
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e00f      	b.n	8005e82 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 020a 	orr.w	r2, r2, #10
 8005e70:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0204 	bic.w	r2, r2, #4
 8005e80:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0201 	orr.w	r2, r2, #1
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	e005      	b.n	8005ea0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d008      	beq.n	8005ece <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2204      	movs	r2, #4
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e020      	b.n	8005f10 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 020e 	bic.w	r2, r2, #14
 8005edc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0201 	bic.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8005efc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d005      	beq.n	8005f3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2204      	movs	r2, #4
 8005f36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	73fb      	strb	r3, [r7, #15]
 8005f3c:	e027      	b.n	8005f8e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 020e 	bic.w	r2, r2, #14
 8005f4c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0201 	bic.w	r2, r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f66:	2101      	movs	r1, #1
 8005f68:	fa01 f202 	lsl.w	r2, r1, r2
 8005f6c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	4798      	blx	r3
    } 
  }
  return status;
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	2204      	movs	r2, #4
 8005fb6:	409a      	lsls	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d024      	beq.n	800600a <HAL_DMA_IRQHandler+0x72>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d01f      	beq.n	800600a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d107      	bne.n	8005fe8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0204 	bic.w	r2, r2, #4
 8005fe6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff0:	2104      	movs	r1, #4
 8005ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ff6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d06a      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8006008:	e065      	b.n	80060d6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	2202      	movs	r2, #2
 8006010:	409a      	lsls	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	4013      	ands	r3, r2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d02c      	beq.n	8006074 <HAL_DMA_IRQHandler+0xdc>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d027      	beq.n	8006074 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 020a 	bic.w	r2, r2, #10
 8006040:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006052:	2102      	movs	r1, #2
 8006054:	fa01 f202 	lsl.w	r2, r1, r2
 8006058:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006066:	2b00      	cmp	r3, #0
 8006068:	d035      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006072:	e030      	b.n	80060d6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	2208      	movs	r2, #8
 800607a:	409a      	lsls	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4013      	ands	r3, r2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d028      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x13e>
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d023      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 020e 	bic.w	r2, r2, #14
 800609c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	2101      	movs	r1, #1
 80060a8:	fa01 f202 	lsl.w	r2, r1, r2
 80060ac:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d004      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	4798      	blx	r3
    }
  }
}  
 80060d4:	e7ff      	b.n	80060d6 <HAL_DMA_IRQHandler+0x13e>
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	607a      	str	r2, [r7, #4]
 80060ea:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f4:	2101      	movs	r1, #1
 80060f6:	fa01 f202 	lsl.w	r2, r1, r2
 80060fa:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b10      	cmp	r3, #16
 800610a:	d108      	bne.n	800611e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800611c:	e007      	b.n	800612e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	60da      	str	r2, [r3, #12]
}
 800612e:	bf00      	nop
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
	...

0800613c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	4b09      	ldr	r3, [pc, #36]	; (8006170 <DMA_CalcBaseAndBitshift+0x34>)
 800614c:	4413      	add	r3, r2
 800614e:	4a09      	ldr	r2, [pc, #36]	; (8006174 <DMA_CalcBaseAndBitshift+0x38>)
 8006150:	fba2 2303 	umull	r2, r3, r2, r3
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	009a      	lsls	r2, r3, #2
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a06      	ldr	r2, [pc, #24]	; (8006178 <DMA_CalcBaseAndBitshift+0x3c>)
 8006160:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	bffdfff8 	.word	0xbffdfff8
 8006174:	cccccccd 	.word	0xcccccccd
 8006178:	40020000 	.word	0x40020000

0800617c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006186:	2300      	movs	r3, #0
 8006188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800618a:	e14e      	b.n	800642a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	2101      	movs	r1, #1
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	fa01 f303 	lsl.w	r3, r1, r3
 8006198:	4013      	ands	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 8140 	beq.w	8006424 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f003 0303 	and.w	r3, r3, #3
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d005      	beq.n	80061bc <HAL_GPIO_Init+0x40>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f003 0303 	and.w	r3, r3, #3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d130      	bne.n	800621e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	2203      	movs	r2, #3
 80061c8:	fa02 f303 	lsl.w	r3, r2, r3
 80061cc:	43db      	mvns	r3, r3
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4013      	ands	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061f2:	2201      	movs	r2, #1
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	43db      	mvns	r3, r3
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4013      	ands	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	091b      	lsrs	r3, r3, #4
 8006208:	f003 0201 	and.w	r2, r3, #1
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	fa02 f303 	lsl.w	r3, r2, r3
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4313      	orrs	r3, r2
 8006216:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	2b03      	cmp	r3, #3
 8006228:	d017      	beq.n	800625a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	2203      	movs	r2, #3
 8006236:	fa02 f303 	lsl.w	r3, r2, r3
 800623a:	43db      	mvns	r3, r3
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4013      	ands	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	4313      	orrs	r3, r2
 8006252:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d123      	bne.n	80062ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	08da      	lsrs	r2, r3, #3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3208      	adds	r2, #8
 800626e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	220f      	movs	r2, #15
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	43db      	mvns	r3, r3
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4013      	ands	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	4313      	orrs	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	08da      	lsrs	r2, r3, #3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3208      	adds	r2, #8
 80062a8:	6939      	ldr	r1, [r7, #16]
 80062aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	2203      	movs	r2, #3
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	43db      	mvns	r3, r3
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4013      	ands	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f003 0203 	and.w	r2, r3, #3
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 809a 	beq.w	8006424 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062f0:	4b55      	ldr	r3, [pc, #340]	; (8006448 <HAL_GPIO_Init+0x2cc>)
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	4a54      	ldr	r2, [pc, #336]	; (8006448 <HAL_GPIO_Init+0x2cc>)
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	6193      	str	r3, [r2, #24]
 80062fc:	4b52      	ldr	r3, [pc, #328]	; (8006448 <HAL_GPIO_Init+0x2cc>)
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	60bb      	str	r3, [r7, #8]
 8006306:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006308:	4a50      	ldr	r2, [pc, #320]	; (800644c <HAL_GPIO_Init+0x2d0>)
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	089b      	lsrs	r3, r3, #2
 800630e:	3302      	adds	r3, #2
 8006310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	220f      	movs	r2, #15
 8006320:	fa02 f303 	lsl.w	r3, r2, r3
 8006324:	43db      	mvns	r3, r3
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4013      	ands	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006332:	d013      	beq.n	800635c <HAL_GPIO_Init+0x1e0>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a46      	ldr	r2, [pc, #280]	; (8006450 <HAL_GPIO_Init+0x2d4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00d      	beq.n	8006358 <HAL_GPIO_Init+0x1dc>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a45      	ldr	r2, [pc, #276]	; (8006454 <HAL_GPIO_Init+0x2d8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d007      	beq.n	8006354 <HAL_GPIO_Init+0x1d8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a44      	ldr	r2, [pc, #272]	; (8006458 <HAL_GPIO_Init+0x2dc>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d101      	bne.n	8006350 <HAL_GPIO_Init+0x1d4>
 800634c:	2303      	movs	r3, #3
 800634e:	e006      	b.n	800635e <HAL_GPIO_Init+0x1e2>
 8006350:	2305      	movs	r3, #5
 8006352:	e004      	b.n	800635e <HAL_GPIO_Init+0x1e2>
 8006354:	2302      	movs	r3, #2
 8006356:	e002      	b.n	800635e <HAL_GPIO_Init+0x1e2>
 8006358:	2301      	movs	r3, #1
 800635a:	e000      	b.n	800635e <HAL_GPIO_Init+0x1e2>
 800635c:	2300      	movs	r3, #0
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	f002 0203 	and.w	r2, r2, #3
 8006364:	0092      	lsls	r2, r2, #2
 8006366:	4093      	lsls	r3, r2
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800636e:	4937      	ldr	r1, [pc, #220]	; (800644c <HAL_GPIO_Init+0x2d0>)
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	089b      	lsrs	r3, r3, #2
 8006374:	3302      	adds	r3, #2
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800637c:	4b37      	ldr	r3, [pc, #220]	; (800645c <HAL_GPIO_Init+0x2e0>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	43db      	mvns	r3, r3
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4013      	ands	r3, r2
 800638a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80063a0:	4a2e      	ldr	r2, [pc, #184]	; (800645c <HAL_GPIO_Init+0x2e0>)
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063a6:	4b2d      	ldr	r3, [pc, #180]	; (800645c <HAL_GPIO_Init+0x2e0>)
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	43db      	mvns	r3, r3
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4013      	ands	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80063ca:	4a24      	ldr	r2, [pc, #144]	; (800645c <HAL_GPIO_Init+0x2e0>)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063d0:	4b22      	ldr	r3, [pc, #136]	; (800645c <HAL_GPIO_Init+0x2e0>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	43db      	mvns	r3, r3
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4013      	ands	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80063f4:	4a19      	ldr	r2, [pc, #100]	; (800645c <HAL_GPIO_Init+0x2e0>)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063fa:	4b18      	ldr	r3, [pc, #96]	; (800645c <HAL_GPIO_Init+0x2e0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	43db      	mvns	r3, r3
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4013      	ands	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800641e:	4a0f      	ldr	r2, [pc, #60]	; (800645c <HAL_GPIO_Init+0x2e0>)
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	3301      	adds	r3, #1
 8006428:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	fa22 f303 	lsr.w	r3, r2, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	f47f aea9 	bne.w	800618c <HAL_GPIO_Init+0x10>
  }
}
 800643a:	bf00      	nop
 800643c:	bf00      	nop
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	40021000 	.word	0x40021000
 800644c:	40010000 	.word	0x40010000
 8006450:	48000400 	.word	0x48000400
 8006454:	48000800 	.word	0x48000800
 8006458:	48000c00 	.word	0x48000c00
 800645c:	40010400 	.word	0x40010400

08006460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691a      	ldr	r2, [r3, #16]
 8006470:	887b      	ldrh	r3, [r7, #2]
 8006472:	4013      	ands	r3, r2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006478:	2301      	movs	r3, #1
 800647a:	73fb      	strb	r3, [r7, #15]
 800647c:	e001      	b.n	8006482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800647e:	2300      	movs	r3, #0
 8006480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006482:	7bfb      	ldrb	r3, [r7, #15]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	807b      	strh	r3, [r7, #2]
 800649c:	4613      	mov	r3, r2
 800649e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064a0:	787b      	ldrb	r3, [r7, #1]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064a6:	887a      	ldrh	r2, [r7, #2]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064ac:	e002      	b.n	80064b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064ae:	887a      	ldrh	r2, [r7, #2]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064ca:	4b08      	ldr	r3, [pc, #32]	; (80064ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064cc:	695a      	ldr	r2, [r3, #20]
 80064ce:	88fb      	ldrh	r3, [r7, #6]
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d006      	beq.n	80064e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064d6:	4a05      	ldr	r2, [pc, #20]	; (80064ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fc fcf6 	bl	8002ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40010400 	.word	0x40010400

080064f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e081      	b.n	8006606 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fe f876 	bl	8004608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2224      	movs	r2, #36	; 0x24
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0201 	bic.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006540:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006550:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d107      	bne.n	800656a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006566:	609a      	str	r2, [r3, #8]
 8006568:	e006      	b.n	8006578 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006576:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d104      	bne.n	800658a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006588:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800659c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69d9      	ldr	r1, [r3, #28]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1a      	ldr	r2, [r3, #32]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af02      	add	r7, sp, #8
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	4608      	mov	r0, r1
 800661a:	4611      	mov	r1, r2
 800661c:	461a      	mov	r2, r3
 800661e:	4603      	mov	r3, r0
 8006620:	817b      	strh	r3, [r7, #10]
 8006622:	460b      	mov	r3, r1
 8006624:	813b      	strh	r3, [r7, #8]
 8006626:	4613      	mov	r3, r2
 8006628:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b20      	cmp	r3, #32
 8006634:	f040 80f9 	bne.w	800682a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <HAL_I2C_Mem_Write+0x34>
 800663e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d105      	bne.n	8006650 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800664a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e0ed      	b.n	800682c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_I2C_Mem_Write+0x4e>
 800665a:	2302      	movs	r3, #2
 800665c:	e0e6      	b.n	800682c <HAL_I2C_Mem_Write+0x21c>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006666:	f7ff fa39 	bl	8005adc <HAL_GetTick>
 800666a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	2319      	movs	r3, #25
 8006672:	2201      	movs	r2, #1
 8006674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 fbcd 	bl	8006e18 <I2C_WaitOnFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e0d1      	b.n	800682c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2221      	movs	r2, #33	; 0x21
 800668c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2240      	movs	r2, #64	; 0x40
 8006694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a3a      	ldr	r2, [r7, #32]
 80066a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80066a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066b0:	88f8      	ldrh	r0, [r7, #6]
 80066b2:	893a      	ldrh	r2, [r7, #8]
 80066b4:	8979      	ldrh	r1, [r7, #10]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	9301      	str	r3, [sp, #4]
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	4603      	mov	r3, r0
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 fadd 	bl	8006c80 <I2C_RequestMemoryWrite>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0a9      	b.n	800682c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2bff      	cmp	r3, #255	; 0xff
 80066e0:	d90e      	bls.n	8006700 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	22ff      	movs	r2, #255	; 0xff
 80066e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	8979      	ldrh	r1, [r7, #10]
 80066f0:	2300      	movs	r3, #0
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 fd47 	bl	800718c <I2C_TransferConfig>
 80066fe:	e00f      	b.n	8006720 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006704:	b29a      	uxth	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670e:	b2da      	uxtb	r2, r3
 8006710:	8979      	ldrh	r1, [r7, #10]
 8006712:	2300      	movs	r3, #0
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 fd36 	bl	800718c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 fbc6 	bl	8006eb6 <I2C_WaitOnTXISFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e07b      	b.n	800682c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	781a      	ldrb	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800675c:	3b01      	subs	r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d034      	beq.n	80067d8 <HAL_I2C_Mem_Write+0x1c8>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006772:	2b00      	cmp	r3, #0
 8006774:	d130      	bne.n	80067d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	2200      	movs	r2, #0
 800677e:	2180      	movs	r1, #128	; 0x80
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 fb49 	bl	8006e18 <I2C_WaitOnFlagUntilTimeout>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e04d      	b.n	800682c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006794:	b29b      	uxth	r3, r3
 8006796:	2bff      	cmp	r3, #255	; 0xff
 8006798:	d90e      	bls.n	80067b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	22ff      	movs	r2, #255	; 0xff
 800679e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	8979      	ldrh	r1, [r7, #10]
 80067a8:	2300      	movs	r3, #0
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 fceb 	bl	800718c <I2C_TransferConfig>
 80067b6:	e00f      	b.n	80067d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	8979      	ldrh	r1, [r7, #10]
 80067ca:	2300      	movs	r3, #0
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 fcda 	bl	800718c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d19e      	bne.n	8006720 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fbac 	bl	8006f44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e01a      	b.n	800682c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2220      	movs	r2, #32
 80067fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6859      	ldr	r1, [r3, #4]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <HAL_I2C_Mem_Write+0x224>)
 800680a:	400b      	ands	r3, r1
 800680c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	e000      	b.n	800682c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800682a:	2302      	movs	r3, #2
  }
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	fe00e800 	.word	0xfe00e800

08006838 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af02      	add	r7, sp, #8
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	4608      	mov	r0, r1
 8006842:	4611      	mov	r1, r2
 8006844:	461a      	mov	r2, r3
 8006846:	4603      	mov	r3, r0
 8006848:	817b      	strh	r3, [r7, #10]
 800684a:	460b      	mov	r3, r1
 800684c:	813b      	strh	r3, [r7, #8]
 800684e:	4613      	mov	r3, r2
 8006850:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b20      	cmp	r3, #32
 800685c:	f040 80fd 	bne.w	8006a5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <HAL_I2C_Mem_Read+0x34>
 8006866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006868:	2b00      	cmp	r3, #0
 800686a:	d105      	bne.n	8006878 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006872:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0f1      	b.n	8006a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_I2C_Mem_Read+0x4e>
 8006882:	2302      	movs	r3, #2
 8006884:	e0ea      	b.n	8006a5c <HAL_I2C_Mem_Read+0x224>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800688e:	f7ff f925 	bl	8005adc <HAL_GetTick>
 8006892:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	2319      	movs	r3, #25
 800689a:	2201      	movs	r2, #1
 800689c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 fab9 	bl	8006e18 <I2C_WaitOnFlagUntilTimeout>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e0d5      	b.n	8006a5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2222      	movs	r2, #34	; 0x22
 80068b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2240      	movs	r2, #64	; 0x40
 80068bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a3a      	ldr	r2, [r7, #32]
 80068ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068d8:	88f8      	ldrh	r0, [r7, #6]
 80068da:	893a      	ldrh	r2, [r7, #8]
 80068dc:	8979      	ldrh	r1, [r7, #10]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	4603      	mov	r3, r0
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 fa1d 	bl	8006d28 <I2C_RequestMemoryRead>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e0ad      	b.n	8006a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006904:	b29b      	uxth	r3, r3
 8006906:	2bff      	cmp	r3, #255	; 0xff
 8006908:	d90e      	bls.n	8006928 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	22ff      	movs	r2, #255	; 0xff
 800690e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006914:	b2da      	uxtb	r2, r3
 8006916:	8979      	ldrh	r1, [r7, #10]
 8006918:	4b52      	ldr	r3, [pc, #328]	; (8006a64 <HAL_I2C_Mem_Read+0x22c>)
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 fc33 	bl	800718c <I2C_TransferConfig>
 8006926:	e00f      	b.n	8006948 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006936:	b2da      	uxtb	r2, r3
 8006938:	8979      	ldrh	r1, [r7, #10]
 800693a:	4b4a      	ldr	r3, [pc, #296]	; (8006a64 <HAL_I2C_Mem_Read+0x22c>)
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fc22 	bl	800718c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	2200      	movs	r2, #0
 8006950:	2104      	movs	r1, #4
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 fa60 	bl	8006e18 <I2C_WaitOnFlagUntilTimeout>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e07c      	b.n	8006a5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	1c5a      	adds	r2, r3, #1
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d034      	beq.n	8006a08 <HAL_I2C_Mem_Read+0x1d0>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d130      	bne.n	8006a08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	2200      	movs	r2, #0
 80069ae:	2180      	movs	r1, #128	; 0x80
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 fa31 	bl	8006e18 <I2C_WaitOnFlagUntilTimeout>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e04d      	b.n	8006a5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2bff      	cmp	r3, #255	; 0xff
 80069c8:	d90e      	bls.n	80069e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	22ff      	movs	r2, #255	; 0xff
 80069ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	8979      	ldrh	r1, [r7, #10]
 80069d8:	2300      	movs	r3, #0
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 fbd3 	bl	800718c <I2C_TransferConfig>
 80069e6:	e00f      	b.n	8006a08 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	8979      	ldrh	r1, [r7, #10]
 80069fa:	2300      	movs	r3, #0
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 fbc2 	bl	800718c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d19a      	bne.n	8006948 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 fa94 	bl	8006f44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e01a      	b.n	8006a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6859      	ldr	r1, [r3, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	4b0b      	ldr	r3, [pc, #44]	; (8006a68 <HAL_I2C_Mem_Read+0x230>)
 8006a3a:	400b      	ands	r3, r1
 8006a3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	e000      	b.n	8006a5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006a5a:	2302      	movs	r3, #2
  }
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	80002400 	.word	0x80002400
 8006a68:	fe00e800 	.word	0xfe00e800

08006a6c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08a      	sub	sp, #40	; 0x28
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	607a      	str	r2, [r7, #4]
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	f040 80f3 	bne.w	8006c74 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a9c:	d101      	bne.n	8006aa2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e0e9      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_I2C_IsDeviceReady+0x44>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e0e2      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x20a>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2224      	movs	r2, #36	; 0x24
 8006abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d107      	bne.n	8006ade <HAL_I2C_IsDeviceReady+0x72>
 8006ace:	897b      	ldrh	r3, [r7, #10]
 8006ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ad4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ad8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006adc:	e006      	b.n	8006aec <HAL_I2C_IsDeviceReady+0x80>
 8006ade:	897b      	ldrh	r3, [r7, #10]
 8006ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ae8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	6812      	ldr	r2, [r2, #0]
 8006af0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006af2:	f7fe fff3 	bl	8005adc <HAL_GetTick>
 8006af6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	bf0c      	ite	eq
 8006b06:	2301      	moveq	r3, #1
 8006b08:	2300      	movne	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	f003 0310 	and.w	r3, r3, #16
 8006b18:	2b10      	cmp	r3, #16
 8006b1a:	bf0c      	ite	eq
 8006b1c:	2301      	moveq	r3, #1
 8006b1e:	2300      	movne	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006b24:	e034      	b.n	8006b90 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d01a      	beq.n	8006b64 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b2e:	f7fe ffd5 	bl	8005adc <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d302      	bcc.n	8006b44 <HAL_I2C_IsDeviceReady+0xd8>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10f      	bne.n	8006b64 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b50:	f043 0220 	orr.w	r2, r3, #32
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e088      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	2b20      	cmp	r3, #32
 8006b70:	bf0c      	ite	eq
 8006b72:	2301      	moveq	r3, #1
 8006b74:	2300      	movne	r3, #0
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	f003 0310 	and.w	r3, r3, #16
 8006b84:	2b10      	cmp	r3, #16
 8006b86:	bf0c      	ite	eq
 8006b88:	2301      	moveq	r3, #1
 8006b8a:	2300      	movne	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006b90:	7ffb      	ldrb	r3, [r7, #31]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d102      	bne.n	8006b9c <HAL_I2C_IsDeviceReady+0x130>
 8006b96:	7fbb      	ldrb	r3, [r7, #30]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0c4      	beq.n	8006b26 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	f003 0310 	and.w	r3, r3, #16
 8006ba6:	2b10      	cmp	r3, #16
 8006ba8:	d01a      	beq.n	8006be0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2120      	movs	r1, #32
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f92f 	bl	8006e18 <I2C_WaitOnFlagUntilTimeout>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e058      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	e04a      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2200      	movs	r2, #0
 8006be8:	2120      	movs	r1, #32
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f914 	bl	8006e18 <I2C_WaitOnFlagUntilTimeout>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e03d      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2210      	movs	r2, #16
 8006c00:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2220      	movs	r2, #32
 8006c08:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d118      	bne.n	8006c44 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c20:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2120      	movs	r1, #32
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 f8f3 	bl	8006e18 <I2C_WaitOnFlagUntilTimeout>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e01c      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2220      	movs	r2, #32
 8006c42:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	3301      	adds	r3, #1
 8006c48:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	f63f af39 	bhi.w	8006ac6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c60:	f043 0220 	orr.w	r2, r3, #32
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8006c74:	2302      	movs	r3, #2
  }
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3720      	adds	r7, #32
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	4608      	mov	r0, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4603      	mov	r3, r0
 8006c90:	817b      	strh	r3, [r7, #10]
 8006c92:	460b      	mov	r3, r1
 8006c94:	813b      	strh	r3, [r7, #8]
 8006c96:	4613      	mov	r3, r2
 8006c98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c9a:	88fb      	ldrh	r3, [r7, #6]
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	8979      	ldrh	r1, [r7, #10]
 8006ca0:	4b20      	ldr	r3, [pc, #128]	; (8006d24 <I2C_RequestMemoryWrite+0xa4>)
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 fa6f 	bl	800718c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	69b9      	ldr	r1, [r7, #24]
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 f8ff 	bl	8006eb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e02c      	b.n	8006d1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cc2:	88fb      	ldrh	r3, [r7, #6]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d105      	bne.n	8006cd4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cc8:	893b      	ldrh	r3, [r7, #8]
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	629a      	str	r2, [r3, #40]	; 0x28
 8006cd2:	e015      	b.n	8006d00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006cd4:	893b      	ldrh	r3, [r7, #8]
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	69b9      	ldr	r1, [r7, #24]
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f8e5 	bl	8006eb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e012      	b.n	8006d1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cf6:	893b      	ldrh	r3, [r7, #8]
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	2200      	movs	r2, #0
 8006d08:	2180      	movs	r1, #128	; 0x80
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 f884 	bl	8006e18 <I2C_WaitOnFlagUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e000      	b.n	8006d1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	80002000 	.word	0x80002000

08006d28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	4608      	mov	r0, r1
 8006d32:	4611      	mov	r1, r2
 8006d34:	461a      	mov	r2, r3
 8006d36:	4603      	mov	r3, r0
 8006d38:	817b      	strh	r3, [r7, #10]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	813b      	strh	r3, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d42:	88fb      	ldrh	r3, [r7, #6]
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	8979      	ldrh	r1, [r7, #10]
 8006d48:	4b20      	ldr	r3, [pc, #128]	; (8006dcc <I2C_RequestMemoryRead+0xa4>)
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fa1c 	bl	800718c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d54:	69fa      	ldr	r2, [r7, #28]
 8006d56:	69b9      	ldr	r1, [r7, #24]
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 f8ac 	bl	8006eb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e02c      	b.n	8006dc2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d68:	88fb      	ldrh	r3, [r7, #6]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d105      	bne.n	8006d7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d6e:	893b      	ldrh	r3, [r7, #8]
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	629a      	str	r2, [r3, #40]	; 0x28
 8006d78:	e015      	b.n	8006da6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d7a:	893b      	ldrh	r3, [r7, #8]
 8006d7c:	0a1b      	lsrs	r3, r3, #8
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d88:	69fa      	ldr	r2, [r7, #28]
 8006d8a:	69b9      	ldr	r1, [r7, #24]
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f892 	bl	8006eb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e012      	b.n	8006dc2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d9c:	893b      	ldrh	r3, [r7, #8]
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2200      	movs	r2, #0
 8006dae:	2140      	movs	r1, #64	; 0x40
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 f831 	bl	8006e18 <I2C_WaitOnFlagUntilTimeout>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	80002000 	.word	0x80002000

08006dd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d103      	bne.n	8006dee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2200      	movs	r2, #0
 8006dec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d007      	beq.n	8006e0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0201 	orr.w	r2, r2, #1
 8006e0a:	619a      	str	r2, [r3, #24]
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	4613      	mov	r3, r2
 8006e26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e28:	e031      	b.n	8006e8e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d02d      	beq.n	8006e8e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e32:	f7fe fe53 	bl	8005adc <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d302      	bcc.n	8006e48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d122      	bne.n	8006e8e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	4013      	ands	r3, r2
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	bf0c      	ite	eq
 8006e58:	2301      	moveq	r3, #1
 8006e5a:	2300      	movne	r3, #0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d113      	bne.n	8006e8e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6a:	f043 0220 	orr.w	r2, r3, #32
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e00f      	b.n	8006eae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699a      	ldr	r2, [r3, #24]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4013      	ands	r3, r2
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	bf0c      	ite	eq
 8006e9e:	2301      	moveq	r3, #1
 8006ea0:	2300      	movne	r3, #0
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d0be      	beq.n	8006e2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	60f8      	str	r0, [r7, #12]
 8006ebe:	60b9      	str	r1, [r7, #8]
 8006ec0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ec2:	e033      	b.n	8006f2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	68b9      	ldr	r1, [r7, #8]
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 f87f 	bl	8006fcc <I2C_IsErrorOccurred>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e031      	b.n	8006f3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ede:	d025      	beq.n	8006f2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ee0:	f7fe fdfc 	bl	8005adc <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d302      	bcc.n	8006ef6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d11a      	bne.n	8006f2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d013      	beq.n	8006f2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f08:	f043 0220 	orr.w	r2, r3, #32
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e007      	b.n	8006f3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d1c4      	bne.n	8006ec4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f50:	e02f      	b.n	8006fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	68b9      	ldr	r1, [r7, #8]
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 f838 	bl	8006fcc <I2C_IsErrorOccurred>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e02d      	b.n	8006fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f66:	f7fe fdb9 	bl	8005adc <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d302      	bcc.n	8006f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d11a      	bne.n	8006fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b20      	cmp	r3, #32
 8006f88:	d013      	beq.n	8006fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8e:	f043 0220 	orr.w	r2, r3, #32
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e007      	b.n	8006fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	f003 0320 	and.w	r3, r3, #32
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	d1c8      	bne.n	8006f52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08a      	sub	sp, #40	; 0x28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d068      	beq.n	80070ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2210      	movs	r2, #16
 8006ffe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007000:	e049      	b.n	8007096 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d045      	beq.n	8007096 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800700a:	f7fe fd67 	bl	8005adc <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	429a      	cmp	r2, r3
 8007018:	d302      	bcc.n	8007020 <I2C_IsErrorOccurred+0x54>
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d13a      	bne.n	8007096 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800702a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007032:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800703e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007042:	d121      	bne.n	8007088 <I2C_IsErrorOccurred+0xbc>
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800704a:	d01d      	beq.n	8007088 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800704c:	7cfb      	ldrb	r3, [r7, #19]
 800704e:	2b20      	cmp	r3, #32
 8007050:	d01a      	beq.n	8007088 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007060:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007062:	f7fe fd3b 	bl	8005adc <HAL_GetTick>
 8007066:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007068:	e00e      	b.n	8007088 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800706a:	f7fe fd37 	bl	8005adc <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b19      	cmp	r3, #25
 8007076:	d907      	bls.n	8007088 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	f043 0320 	orr.w	r3, r3, #32
 800707e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007086:	e006      	b.n	8007096 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	2b20      	cmp	r3, #32
 8007094:	d1e9      	bne.n	800706a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	f003 0320 	and.w	r3, r3, #32
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	d003      	beq.n	80070ac <I2C_IsErrorOccurred+0xe0>
 80070a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0aa      	beq.n	8007002 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80070ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d103      	bne.n	80070bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2220      	movs	r2, #32
 80070ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	f043 0304 	orr.w	r3, r3, #4
 80070c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00b      	beq.n	8007116 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	f043 0308 	orr.w	r3, r3, #8
 8007104:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800710e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	f043 0302 	orr.w	r3, r3, #2
 8007126:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007130:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01c      	beq.n	800717a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f7ff fe45 	bl	8006dd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6859      	ldr	r1, [r3, #4]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <I2C_IsErrorOccurred+0x1bc>)
 8007152:	400b      	ands	r3, r1
 8007154:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	431a      	orrs	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2220      	movs	r2, #32
 8007166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800717a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800717e:	4618      	mov	r0, r3
 8007180:	3728      	adds	r7, #40	; 0x28
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	fe00e800 	.word	0xfe00e800

0800718c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	607b      	str	r3, [r7, #4]
 8007196:	460b      	mov	r3, r1
 8007198:	817b      	strh	r3, [r7, #10]
 800719a:	4613      	mov	r3, r2
 800719c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800719e:	897b      	ldrh	r3, [r7, #10]
 80071a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80071a4:	7a7b      	ldrb	r3, [r7, #9]
 80071a6:	041b      	lsls	r3, r3, #16
 80071a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	0d5b      	lsrs	r3, r3, #21
 80071c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80071ca:	4b08      	ldr	r3, [pc, #32]	; (80071ec <I2C_TransferConfig+0x60>)
 80071cc:	430b      	orrs	r3, r1
 80071ce:	43db      	mvns	r3, r3
 80071d0:	ea02 0103 	and.w	r1, r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	430a      	orrs	r2, r1
 80071dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	03ff63ff 	.word	0x03ff63ff

080071f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b20      	cmp	r3, #32
 8007204:	d138      	bne.n	8007278 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800720c:	2b01      	cmp	r3, #1
 800720e:	d101      	bne.n	8007214 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007210:	2302      	movs	r3, #2
 8007212:	e032      	b.n	800727a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2224      	movs	r2, #36	; 0x24
 8007220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0201 	bic.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007242:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6819      	ldr	r1, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0201 	orr.w	r2, r2, #1
 8007262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2220      	movs	r2, #32
 8007268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	e000      	b.n	800727a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007278:	2302      	movs	r3, #2
  }
}
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007286:	b480      	push	{r7}
 8007288:	b085      	sub	sp, #20
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b20      	cmp	r3, #32
 800729a:	d139      	bne.n	8007310 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d101      	bne.n	80072aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e033      	b.n	8007312 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2224      	movs	r2, #36	; 0x24
 80072b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f022 0201 	bic.w	r2, r2, #1
 80072c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80072d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	021b      	lsls	r3, r3, #8
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0201 	orr.w	r2, r2, #1
 80072fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	e000      	b.n	8007312 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007310:	2302      	movs	r3, #2
  }
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
	...

08007320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8007326:	af00      	add	r7, sp, #0
 8007328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800732c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007330:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007336:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d102      	bne.n	8007346 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	f001 b823 	b.w	800838c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800734a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 817d 	beq.w	8007656 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800735c:	4bbc      	ldr	r3, [pc, #752]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f003 030c 	and.w	r3, r3, #12
 8007364:	2b04      	cmp	r3, #4
 8007366:	d00c      	beq.n	8007382 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007368:	4bb9      	ldr	r3, [pc, #740]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f003 030c 	and.w	r3, r3, #12
 8007370:	2b08      	cmp	r3, #8
 8007372:	d15c      	bne.n	800742e <HAL_RCC_OscConfig+0x10e>
 8007374:	4bb6      	ldr	r3, [pc, #728]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800737c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007380:	d155      	bne.n	800742e <HAL_RCC_OscConfig+0x10e>
 8007382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007386:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800738a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800738e:	fa93 f3a3 	rbit	r3, r3
 8007392:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007396:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800739a:	fab3 f383 	clz	r3, r3
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	095b      	lsrs	r3, r3, #5
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	f043 0301 	orr.w	r3, r3, #1
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d102      	bne.n	80073b4 <HAL_RCC_OscConfig+0x94>
 80073ae:	4ba8      	ldr	r3, [pc, #672]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	e015      	b.n	80073e0 <HAL_RCC_OscConfig+0xc0>
 80073b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80073c0:	fa93 f3a3 	rbit	r3, r3
 80073c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80073c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80073d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80073d4:	fa93 f3a3 	rbit	r3, r3
 80073d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80073dc:	4b9c      	ldr	r3, [pc, #624]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80073e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80073e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80073ec:	fa92 f2a2 	rbit	r2, r2
 80073f0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80073f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80073f8:	fab2 f282 	clz	r2, r2
 80073fc:	b2d2      	uxtb	r2, r2
 80073fe:	f042 0220 	orr.w	r2, r2, #32
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	f002 021f 	and.w	r2, r2, #31
 8007408:	2101      	movs	r1, #1
 800740a:	fa01 f202 	lsl.w	r2, r1, r2
 800740e:	4013      	ands	r3, r2
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 811f 	beq.w	8007654 <HAL_RCC_OscConfig+0x334>
 8007416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800741a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	f040 8116 	bne.w	8007654 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	f000 bfaf 	b.w	800838c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800742e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800743e:	d106      	bne.n	800744e <HAL_RCC_OscConfig+0x12e>
 8007440:	4b83      	ldr	r3, [pc, #524]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a82      	ldr	r2, [pc, #520]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 8007446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	e036      	b.n	80074bc <HAL_RCC_OscConfig+0x19c>
 800744e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007452:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10c      	bne.n	8007478 <HAL_RCC_OscConfig+0x158>
 800745e:	4b7c      	ldr	r3, [pc, #496]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a7b      	ldr	r2, [pc, #492]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 8007464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	4b79      	ldr	r3, [pc, #484]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a78      	ldr	r2, [pc, #480]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 8007470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	e021      	b.n	80074bc <HAL_RCC_OscConfig+0x19c>
 8007478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800747c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007488:	d10c      	bne.n	80074a4 <HAL_RCC_OscConfig+0x184>
 800748a:	4b71      	ldr	r3, [pc, #452]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a70      	ldr	r2, [pc, #448]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 8007490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	4b6e      	ldr	r3, [pc, #440]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a6d      	ldr	r2, [pc, #436]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 800749c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	e00b      	b.n	80074bc <HAL_RCC_OscConfig+0x19c>
 80074a4:	4b6a      	ldr	r3, [pc, #424]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a69      	ldr	r2, [pc, #420]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 80074aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	4b67      	ldr	r3, [pc, #412]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a66      	ldr	r2, [pc, #408]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 80074b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074ba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80074bc:	4b64      	ldr	r3, [pc, #400]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	f023 020f 	bic.w	r2, r3, #15
 80074c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	495f      	ldr	r1, [pc, #380]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d059      	beq.n	800759a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e6:	f7fe faf9 	bl	8005adc <HAL_GetTick>
 80074ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ee:	e00a      	b.n	8007506 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074f0:	f7fe faf4 	bl	8005adc <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b64      	cmp	r3, #100	; 0x64
 80074fe:	d902      	bls.n	8007506 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	f000 bf43 	b.w	800838c <HAL_RCC_OscConfig+0x106c>
 8007506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800750a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800750e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007512:	fa93 f3a3 	rbit	r3, r3
 8007516:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800751a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800751e:	fab3 f383 	clz	r3, r3
 8007522:	b2db      	uxtb	r3, r3
 8007524:	095b      	lsrs	r3, r3, #5
 8007526:	b2db      	uxtb	r3, r3
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b01      	cmp	r3, #1
 8007530:	d102      	bne.n	8007538 <HAL_RCC_OscConfig+0x218>
 8007532:	4b47      	ldr	r3, [pc, #284]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	e015      	b.n	8007564 <HAL_RCC_OscConfig+0x244>
 8007538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800753c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007540:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007544:	fa93 f3a3 	rbit	r3, r3
 8007548:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800754c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007550:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007554:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007558:	fa93 f3a3 	rbit	r3, r3
 800755c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007560:	4b3b      	ldr	r3, [pc, #236]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007568:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800756c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007570:	fa92 f2a2 	rbit	r2, r2
 8007574:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007578:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800757c:	fab2 f282 	clz	r2, r2
 8007580:	b2d2      	uxtb	r2, r2
 8007582:	f042 0220 	orr.w	r2, r2, #32
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	f002 021f 	and.w	r2, r2, #31
 800758c:	2101      	movs	r1, #1
 800758e:	fa01 f202 	lsl.w	r2, r1, r2
 8007592:	4013      	ands	r3, r2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0ab      	beq.n	80074f0 <HAL_RCC_OscConfig+0x1d0>
 8007598:	e05d      	b.n	8007656 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800759a:	f7fe fa9f 	bl	8005adc <HAL_GetTick>
 800759e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075a2:	e00a      	b.n	80075ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075a4:	f7fe fa9a 	bl	8005adc <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b64      	cmp	r3, #100	; 0x64
 80075b2:	d902      	bls.n	80075ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	f000 bee9 	b.w	800838c <HAL_RCC_OscConfig+0x106c>
 80075ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075be:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80075c6:	fa93 f3a3 	rbit	r3, r3
 80075ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80075ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075d2:	fab3 f383 	clz	r3, r3
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	095b      	lsrs	r3, r3, #5
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f043 0301 	orr.w	r3, r3, #1
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d102      	bne.n	80075ec <HAL_RCC_OscConfig+0x2cc>
 80075e6:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	e015      	b.n	8007618 <HAL_RCC_OscConfig+0x2f8>
 80075ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075f0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80075f8:	fa93 f3a3 	rbit	r3, r3
 80075fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007604:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007608:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800760c:	fa93 f3a3 	rbit	r3, r3
 8007610:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007614:	4b0e      	ldr	r3, [pc, #56]	; (8007650 <HAL_RCC_OscConfig+0x330>)
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800761c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007620:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007624:	fa92 f2a2 	rbit	r2, r2
 8007628:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800762c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007630:	fab2 f282 	clz	r2, r2
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	f042 0220 	orr.w	r2, r2, #32
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	f002 021f 	and.w	r2, r2, #31
 8007640:	2101      	movs	r1, #1
 8007642:	fa01 f202 	lsl.w	r2, r1, r2
 8007646:	4013      	ands	r3, r2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1ab      	bne.n	80075a4 <HAL_RCC_OscConfig+0x284>
 800764c:	e003      	b.n	8007656 <HAL_RCC_OscConfig+0x336>
 800764e:	bf00      	nop
 8007650:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800765a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 817d 	beq.w	8007966 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800766c:	4ba6      	ldr	r3, [pc, #664]	; (8007908 <HAL_RCC_OscConfig+0x5e8>)
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f003 030c 	and.w	r3, r3, #12
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007678:	4ba3      	ldr	r3, [pc, #652]	; (8007908 <HAL_RCC_OscConfig+0x5e8>)
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f003 030c 	and.w	r3, r3, #12
 8007680:	2b08      	cmp	r3, #8
 8007682:	d172      	bne.n	800776a <HAL_RCC_OscConfig+0x44a>
 8007684:	4ba0      	ldr	r3, [pc, #640]	; (8007908 <HAL_RCC_OscConfig+0x5e8>)
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d16c      	bne.n	800776a <HAL_RCC_OscConfig+0x44a>
 8007690:	2302      	movs	r3, #2
 8007692:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007696:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800769a:	fa93 f3a3 	rbit	r3, r3
 800769e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80076a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076a6:	fab3 f383 	clz	r3, r3
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	095b      	lsrs	r3, r3, #5
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	f043 0301 	orr.w	r3, r3, #1
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d102      	bne.n	80076c0 <HAL_RCC_OscConfig+0x3a0>
 80076ba:	4b93      	ldr	r3, [pc, #588]	; (8007908 <HAL_RCC_OscConfig+0x5e8>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	e013      	b.n	80076e8 <HAL_RCC_OscConfig+0x3c8>
 80076c0:	2302      	movs	r3, #2
 80076c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80076ca:	fa93 f3a3 	rbit	r3, r3
 80076ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80076d2:	2302      	movs	r3, #2
 80076d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80076d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80076dc:	fa93 f3a3 	rbit	r3, r3
 80076e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80076e4:	4b88      	ldr	r3, [pc, #544]	; (8007908 <HAL_RCC_OscConfig+0x5e8>)
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	2202      	movs	r2, #2
 80076ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80076ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80076f2:	fa92 f2a2 	rbit	r2, r2
 80076f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80076fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80076fe:	fab2 f282 	clz	r2, r2
 8007702:	b2d2      	uxtb	r2, r2
 8007704:	f042 0220 	orr.w	r2, r2, #32
 8007708:	b2d2      	uxtb	r2, r2
 800770a:	f002 021f 	and.w	r2, r2, #31
 800770e:	2101      	movs	r1, #1
 8007710:	fa01 f202 	lsl.w	r2, r1, r2
 8007714:	4013      	ands	r3, r2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00a      	beq.n	8007730 <HAL_RCC_OscConfig+0x410>
 800771a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800771e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d002      	beq.n	8007730 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	f000 be2e 	b.w	800838c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007730:	4b75      	ldr	r3, [pc, #468]	; (8007908 <HAL_RCC_OscConfig+0x5e8>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800773c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	21f8      	movs	r1, #248	; 0xf8
 8007746:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800774a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800774e:	fa91 f1a1 	rbit	r1, r1
 8007752:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007756:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800775a:	fab1 f181 	clz	r1, r1
 800775e:	b2c9      	uxtb	r1, r1
 8007760:	408b      	lsls	r3, r1
 8007762:	4969      	ldr	r1, [pc, #420]	; (8007908 <HAL_RCC_OscConfig+0x5e8>)
 8007764:	4313      	orrs	r3, r2
 8007766:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007768:	e0fd      	b.n	8007966 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800776a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800776e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 8088 	beq.w	800788c <HAL_RCC_OscConfig+0x56c>
 800777c:	2301      	movs	r3, #1
 800777e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007782:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007786:	fa93 f3a3 	rbit	r3, r3
 800778a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800778e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007792:	fab3 f383 	clz	r3, r3
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800779c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	461a      	mov	r2, r3
 80077a4:	2301      	movs	r3, #1
 80077a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077a8:	f7fe f998 	bl	8005adc <HAL_GetTick>
 80077ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077b0:	e00a      	b.n	80077c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077b2:	f7fe f993 	bl	8005adc <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d902      	bls.n	80077c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	f000 bde2 	b.w	800838c <HAL_RCC_OscConfig+0x106c>
 80077c8:	2302      	movs	r3, #2
 80077ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80077d2:	fa93 f3a3 	rbit	r3, r3
 80077d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80077da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077de:	fab3 f383 	clz	r3, r3
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	095b      	lsrs	r3, r3, #5
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f043 0301 	orr.w	r3, r3, #1
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d102      	bne.n	80077f8 <HAL_RCC_OscConfig+0x4d8>
 80077f2:	4b45      	ldr	r3, [pc, #276]	; (8007908 <HAL_RCC_OscConfig+0x5e8>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	e013      	b.n	8007820 <HAL_RCC_OscConfig+0x500>
 80077f8:	2302      	movs	r3, #2
 80077fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007802:	fa93 f3a3 	rbit	r3, r3
 8007806:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800780a:	2302      	movs	r3, #2
 800780c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007810:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007814:	fa93 f3a3 	rbit	r3, r3
 8007818:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800781c:	4b3a      	ldr	r3, [pc, #232]	; (8007908 <HAL_RCC_OscConfig+0x5e8>)
 800781e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007820:	2202      	movs	r2, #2
 8007822:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007826:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800782a:	fa92 f2a2 	rbit	r2, r2
 800782e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007832:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007836:	fab2 f282 	clz	r2, r2
 800783a:	b2d2      	uxtb	r2, r2
 800783c:	f042 0220 	orr.w	r2, r2, #32
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	f002 021f 	and.w	r2, r2, #31
 8007846:	2101      	movs	r1, #1
 8007848:	fa01 f202 	lsl.w	r2, r1, r2
 800784c:	4013      	ands	r3, r2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0af      	beq.n	80077b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007852:	4b2d      	ldr	r3, [pc, #180]	; (8007908 <HAL_RCC_OscConfig+0x5e8>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800785a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800785e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	21f8      	movs	r1, #248	; 0xf8
 8007868:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800786c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007870:	fa91 f1a1 	rbit	r1, r1
 8007874:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007878:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800787c:	fab1 f181 	clz	r1, r1
 8007880:	b2c9      	uxtb	r1, r1
 8007882:	408b      	lsls	r3, r1
 8007884:	4920      	ldr	r1, [pc, #128]	; (8007908 <HAL_RCC_OscConfig+0x5e8>)
 8007886:	4313      	orrs	r3, r2
 8007888:	600b      	str	r3, [r1, #0]
 800788a:	e06c      	b.n	8007966 <HAL_RCC_OscConfig+0x646>
 800788c:	2301      	movs	r3, #1
 800788e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007892:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007896:	fa93 f3a3 	rbit	r3, r3
 800789a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800789e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078a2:	fab3 f383 	clz	r3, r3
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80078ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	461a      	mov	r2, r3
 80078b4:	2300      	movs	r3, #0
 80078b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078b8:	f7fe f910 	bl	8005adc <HAL_GetTick>
 80078bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078c0:	e00a      	b.n	80078d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078c2:	f7fe f90b 	bl	8005adc <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d902      	bls.n	80078d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	f000 bd5a 	b.w	800838c <HAL_RCC_OscConfig+0x106c>
 80078d8:	2302      	movs	r3, #2
 80078da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80078e2:	fa93 f3a3 	rbit	r3, r3
 80078e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80078ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ee:	fab3 f383 	clz	r3, r3
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	095b      	lsrs	r3, r3, #5
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f043 0301 	orr.w	r3, r3, #1
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d104      	bne.n	800790c <HAL_RCC_OscConfig+0x5ec>
 8007902:	4b01      	ldr	r3, [pc, #4]	; (8007908 <HAL_RCC_OscConfig+0x5e8>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	e015      	b.n	8007934 <HAL_RCC_OscConfig+0x614>
 8007908:	40021000 	.word	0x40021000
 800790c:	2302      	movs	r3, #2
 800790e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007912:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007916:	fa93 f3a3 	rbit	r3, r3
 800791a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800791e:	2302      	movs	r3, #2
 8007920:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007924:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007928:	fa93 f3a3 	rbit	r3, r3
 800792c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007930:	4bc8      	ldr	r3, [pc, #800]	; (8007c54 <HAL_RCC_OscConfig+0x934>)
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	2202      	movs	r2, #2
 8007936:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800793a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800793e:	fa92 f2a2 	rbit	r2, r2
 8007942:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007946:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800794a:	fab2 f282 	clz	r2, r2
 800794e:	b2d2      	uxtb	r2, r2
 8007950:	f042 0220 	orr.w	r2, r2, #32
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	f002 021f 	and.w	r2, r2, #31
 800795a:	2101      	movs	r1, #1
 800795c:	fa01 f202 	lsl.w	r2, r1, r2
 8007960:	4013      	ands	r3, r2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1ad      	bne.n	80078c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800796a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0308 	and.w	r3, r3, #8
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 8110 	beq.w	8007b9c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800797c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007980:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d079      	beq.n	8007a80 <HAL_RCC_OscConfig+0x760>
 800798c:	2301      	movs	r3, #1
 800798e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007992:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007996:	fa93 f3a3 	rbit	r3, r3
 800799a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800799e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079a2:	fab3 f383 	clz	r3, r3
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	461a      	mov	r2, r3
 80079aa:	4bab      	ldr	r3, [pc, #684]	; (8007c58 <HAL_RCC_OscConfig+0x938>)
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	461a      	mov	r2, r3
 80079b2:	2301      	movs	r3, #1
 80079b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079b6:	f7fe f891 	bl	8005adc <HAL_GetTick>
 80079ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079be:	e00a      	b.n	80079d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079c0:	f7fe f88c 	bl	8005adc <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d902      	bls.n	80079d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	f000 bcdb 	b.w	800838c <HAL_RCC_OscConfig+0x106c>
 80079d6:	2302      	movs	r3, #2
 80079d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079e0:	fa93 f3a3 	rbit	r3, r3
 80079e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80079f0:	2202      	movs	r2, #2
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	fa93 f2a3 	rbit	r2, r3
 8007a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a14:	2202      	movs	r2, #2
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	fa93 f2a3 	rbit	r2, r3
 8007a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007a2e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a30:	4b88      	ldr	r3, [pc, #544]	; (8007c54 <HAL_RCC_OscConfig+0x934>)
 8007a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007a3c:	2102      	movs	r1, #2
 8007a3e:	6019      	str	r1, [r3, #0]
 8007a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	fa93 f1a3 	rbit	r1, r3
 8007a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007a56:	6019      	str	r1, [r3, #0]
  return result;
 8007a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a5c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	fab3 f383 	clz	r3, r3
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	f003 031f 	and.w	r3, r3, #31
 8007a72:	2101      	movs	r1, #1
 8007a74:	fa01 f303 	lsl.w	r3, r1, r3
 8007a78:	4013      	ands	r3, r2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0a0      	beq.n	80079c0 <HAL_RCC_OscConfig+0x6a0>
 8007a7e:	e08d      	b.n	8007b9c <HAL_RCC_OscConfig+0x87c>
 8007a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a84:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007a88:	2201      	movs	r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	fa93 f2a3 	rbit	r2, r3
 8007a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007aa2:	601a      	str	r2, [r3, #0]
  return result;
 8007aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aa8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007aac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007aae:	fab3 f383 	clz	r3, r3
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4b68      	ldr	r3, [pc, #416]	; (8007c58 <HAL_RCC_OscConfig+0x938>)
 8007ab8:	4413      	add	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	461a      	mov	r2, r3
 8007abe:	2300      	movs	r3, #0
 8007ac0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ac2:	f7fe f80b 	bl	8005adc <HAL_GetTick>
 8007ac6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007aca:	e00a      	b.n	8007ae2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007acc:	f7fe f806 	bl	8005adc <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d902      	bls.n	8007ae2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	f000 bc55 	b.w	800838c <HAL_RCC_OscConfig+0x106c>
 8007ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ae6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007aea:	2202      	movs	r2, #2
 8007aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007af2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	fa93 f2a3 	rbit	r2, r3
 8007afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007b0e:	2202      	movs	r2, #2
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	fa93 f2a3 	rbit	r2, r3
 8007b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b32:	2202      	movs	r2, #2
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	fa93 f2a3 	rbit	r2, r3
 8007b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b48:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007b4c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b4e:	4b41      	ldr	r3, [pc, #260]	; (8007c54 <HAL_RCC_OscConfig+0x934>)
 8007b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b56:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007b5a:	2102      	movs	r1, #2
 8007b5c:	6019      	str	r1, [r3, #0]
 8007b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	fa93 f1a3 	rbit	r1, r3
 8007b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b70:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007b74:	6019      	str	r1, [r3, #0]
  return result;
 8007b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b7a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	fab3 f383 	clz	r3, r3
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	f003 031f 	and.w	r3, r3, #31
 8007b90:	2101      	movs	r1, #1
 8007b92:	fa01 f303 	lsl.w	r3, r1, r3
 8007b96:	4013      	ands	r3, r2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d197      	bne.n	8007acc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ba0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 81a1 	beq.w	8007ef4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bb8:	4b26      	ldr	r3, [pc, #152]	; (8007c54 <HAL_RCC_OscConfig+0x934>)
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d116      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bc4:	4b23      	ldr	r3, [pc, #140]	; (8007c54 <HAL_RCC_OscConfig+0x934>)
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	4a22      	ldr	r2, [pc, #136]	; (8007c54 <HAL_RCC_OscConfig+0x934>)
 8007bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bce:	61d3      	str	r3, [r2, #28]
 8007bd0:	4b20      	ldr	r3, [pc, #128]	; (8007c54 <HAL_RCC_OscConfig+0x934>)
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bdc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007be6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007bea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007bec:	2301      	movs	r3, #1
 8007bee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bf2:	4b1a      	ldr	r3, [pc, #104]	; (8007c5c <HAL_RCC_OscConfig+0x93c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d11a      	bne.n	8007c34 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bfe:	4b17      	ldr	r3, [pc, #92]	; (8007c5c <HAL_RCC_OscConfig+0x93c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a16      	ldr	r2, [pc, #88]	; (8007c5c <HAL_RCC_OscConfig+0x93c>)
 8007c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c0a:	f7fd ff67 	bl	8005adc <HAL_GetTick>
 8007c0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c12:	e009      	b.n	8007c28 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c14:	f7fd ff62 	bl	8005adc <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b64      	cmp	r3, #100	; 0x64
 8007c22:	d901      	bls.n	8007c28 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e3b1      	b.n	800838c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c28:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <HAL_RCC_OscConfig+0x93c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d0ef      	beq.n	8007c14 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d10d      	bne.n	8007c60 <HAL_RCC_OscConfig+0x940>
 8007c44:	4b03      	ldr	r3, [pc, #12]	; (8007c54 <HAL_RCC_OscConfig+0x934>)
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	4a02      	ldr	r2, [pc, #8]	; (8007c54 <HAL_RCC_OscConfig+0x934>)
 8007c4a:	f043 0301 	orr.w	r3, r3, #1
 8007c4e:	6213      	str	r3, [r2, #32]
 8007c50:	e03c      	b.n	8007ccc <HAL_RCC_OscConfig+0x9ac>
 8007c52:	bf00      	nop
 8007c54:	40021000 	.word	0x40021000
 8007c58:	10908120 	.word	0x10908120
 8007c5c:	40007000 	.word	0x40007000
 8007c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10c      	bne.n	8007c8a <HAL_RCC_OscConfig+0x96a>
 8007c70:	4bc1      	ldr	r3, [pc, #772]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	4ac0      	ldr	r2, [pc, #768]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007c76:	f023 0301 	bic.w	r3, r3, #1
 8007c7a:	6213      	str	r3, [r2, #32]
 8007c7c:	4bbe      	ldr	r3, [pc, #760]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	4abd      	ldr	r2, [pc, #756]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007c82:	f023 0304 	bic.w	r3, r3, #4
 8007c86:	6213      	str	r3, [r2, #32]
 8007c88:	e020      	b.n	8007ccc <HAL_RCC_OscConfig+0x9ac>
 8007c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	2b05      	cmp	r3, #5
 8007c98:	d10c      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x994>
 8007c9a:	4bb7      	ldr	r3, [pc, #732]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	4ab6      	ldr	r2, [pc, #728]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007ca0:	f043 0304 	orr.w	r3, r3, #4
 8007ca4:	6213      	str	r3, [r2, #32]
 8007ca6:	4bb4      	ldr	r3, [pc, #720]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	4ab3      	ldr	r2, [pc, #716]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	6213      	str	r3, [r2, #32]
 8007cb2:	e00b      	b.n	8007ccc <HAL_RCC_OscConfig+0x9ac>
 8007cb4:	4bb0      	ldr	r3, [pc, #704]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	4aaf      	ldr	r2, [pc, #700]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007cba:	f023 0301 	bic.w	r3, r3, #1
 8007cbe:	6213      	str	r3, [r2, #32]
 8007cc0:	4bad      	ldr	r3, [pc, #692]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	4aac      	ldr	r2, [pc, #688]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007cc6:	f023 0304 	bic.w	r3, r3, #4
 8007cca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 8081 	beq.w	8007de0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cde:	f7fd fefd 	bl	8005adc <HAL_GetTick>
 8007ce2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ce6:	e00b      	b.n	8007d00 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ce8:	f7fd fef8 	bl	8005adc <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d901      	bls.n	8007d00 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e345      	b.n	800838c <HAL_RCC_OscConfig+0x106c>
 8007d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007d08:	2202      	movs	r2, #2
 8007d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	fa93 f2a3 	rbit	r2, r3
 8007d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	fa93 f2a3 	rbit	r2, r3
 8007d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d42:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007d46:	601a      	str	r2, [r3, #0]
  return result;
 8007d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d4c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007d50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d52:	fab3 f383 	clz	r3, r3
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	095b      	lsrs	r3, r3, #5
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	f043 0302 	orr.w	r3, r3, #2
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d102      	bne.n	8007d6c <HAL_RCC_OscConfig+0xa4c>
 8007d66:	4b84      	ldr	r3, [pc, #528]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	e013      	b.n	8007d94 <HAL_RCC_OscConfig+0xa74>
 8007d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007d74:	2202      	movs	r2, #2
 8007d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	fa93 f2a3 	rbit	r2, r3
 8007d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d8a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	4b79      	ldr	r3, [pc, #484]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d98:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007d9c:	2102      	movs	r1, #2
 8007d9e:	6011      	str	r1, [r2, #0]
 8007da0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007da4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	fa92 f1a2 	rbit	r1, r2
 8007dae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007db2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007db6:	6011      	str	r1, [r2, #0]
  return result;
 8007db8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007dbc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007dc0:	6812      	ldr	r2, [r2, #0]
 8007dc2:	fab2 f282 	clz	r2, r2
 8007dc6:	b2d2      	uxtb	r2, r2
 8007dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	f002 021f 	and.w	r2, r2, #31
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8007dd8:	4013      	ands	r3, r2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d084      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x9c8>
 8007dde:	e07f      	b.n	8007ee0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007de0:	f7fd fe7c 	bl	8005adc <HAL_GetTick>
 8007de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007de8:	e00b      	b.n	8007e02 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dea:	f7fd fe77 	bl	8005adc <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d901      	bls.n	8007e02 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e2c4      	b.n	800838c <HAL_RCC_OscConfig+0x106c>
 8007e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e06:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e12:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	fa93 f2a3 	rbit	r2, r3
 8007e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e20:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e2a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007e2e:	2202      	movs	r2, #2
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	fa93 f2a3 	rbit	r2, r3
 8007e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e44:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007e48:	601a      	str	r2, [r3, #0]
  return result;
 8007e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e4e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007e52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e54:	fab3 f383 	clz	r3, r3
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	095b      	lsrs	r3, r3, #5
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	f043 0302 	orr.w	r3, r3, #2
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d102      	bne.n	8007e6e <HAL_RCC_OscConfig+0xb4e>
 8007e68:	4b43      	ldr	r3, [pc, #268]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	e013      	b.n	8007e96 <HAL_RCC_OscConfig+0xb76>
 8007e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e72:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007e76:	2202      	movs	r2, #2
 8007e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e7e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	fa93 f2a3 	rbit	r2, r3
 8007e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	4b39      	ldr	r3, [pc, #228]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e9a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007e9e:	2102      	movs	r1, #2
 8007ea0:	6011      	str	r1, [r2, #0]
 8007ea2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ea6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007eaa:	6812      	ldr	r2, [r2, #0]
 8007eac:	fa92 f1a2 	rbit	r1, r2
 8007eb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007eb4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007eb8:	6011      	str	r1, [r2, #0]
  return result;
 8007eba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ebe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007ec2:	6812      	ldr	r2, [r2, #0]
 8007ec4:	fab2 f282 	clz	r2, r2
 8007ec8:	b2d2      	uxtb	r2, r2
 8007eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ece:	b2d2      	uxtb	r2, r2
 8007ed0:	f002 021f 	and.w	r2, r2, #31
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8007eda:	4013      	ands	r3, r2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d184      	bne.n	8007dea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007ee0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d105      	bne.n	8007ef4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ee8:	4b23      	ldr	r3, [pc, #140]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	4a22      	ldr	r2, [pc, #136]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ef2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ef8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69db      	ldr	r3, [r3, #28]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 8242 	beq.w	800838a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f06:	4b1c      	ldr	r3, [pc, #112]	; (8007f78 <HAL_RCC_OscConfig+0xc58>)
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f003 030c 	and.w	r3, r3, #12
 8007f0e:	2b08      	cmp	r3, #8
 8007f10:	f000 8213 	beq.w	800833a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69db      	ldr	r3, [r3, #28]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	f040 8162 	bne.w	80081ea <HAL_RCC_OscConfig+0xeca>
 8007f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f2a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007f2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f38:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	fa93 f2a3 	rbit	r2, r3
 8007f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f46:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007f4a:	601a      	str	r2, [r3, #0]
  return result;
 8007f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f50:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007f54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f56:	fab3 f383 	clz	r3, r3
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007f60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	461a      	mov	r2, r3
 8007f68:	2300      	movs	r3, #0
 8007f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f6c:	f7fd fdb6 	bl	8005adc <HAL_GetTick>
 8007f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f74:	e00c      	b.n	8007f90 <HAL_RCC_OscConfig+0xc70>
 8007f76:	bf00      	nop
 8007f78:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f7c:	f7fd fdae 	bl	8005adc <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d901      	bls.n	8007f90 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e1fd      	b.n	800838c <HAL_RCC_OscConfig+0x106c>
 8007f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f94:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007f98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fa2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	fa93 f2a3 	rbit	r2, r3
 8007fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fb0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007fb4:	601a      	str	r2, [r3, #0]
  return result;
 8007fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007fbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007fc0:	fab3 f383 	clz	r3, r3
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	095b      	lsrs	r3, r3, #5
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f043 0301 	orr.w	r3, r3, #1
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d102      	bne.n	8007fda <HAL_RCC_OscConfig+0xcba>
 8007fd4:	4bb0      	ldr	r3, [pc, #704]	; (8008298 <HAL_RCC_OscConfig+0xf78>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	e027      	b.n	800802a <HAL_RCC_OscConfig+0xd0a>
 8007fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fde:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007fe2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	fa93 f2a3 	rbit	r2, r3
 8007ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ffa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008004:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008012:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	fa93 f2a3 	rbit	r2, r3
 800801c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008020:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	4b9c      	ldr	r3, [pc, #624]	; (8008298 <HAL_RCC_OscConfig+0xf78>)
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800802e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008032:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008036:	6011      	str	r1, [r2, #0]
 8008038:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800803c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008040:	6812      	ldr	r2, [r2, #0]
 8008042:	fa92 f1a2 	rbit	r1, r2
 8008046:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800804a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800804e:	6011      	str	r1, [r2, #0]
  return result;
 8008050:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008054:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008058:	6812      	ldr	r2, [r2, #0]
 800805a:	fab2 f282 	clz	r2, r2
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	f042 0220 	orr.w	r2, r2, #32
 8008064:	b2d2      	uxtb	r2, r2
 8008066:	f002 021f 	and.w	r2, r2, #31
 800806a:	2101      	movs	r1, #1
 800806c:	fa01 f202 	lsl.w	r2, r1, r2
 8008070:	4013      	ands	r3, r2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d182      	bne.n	8007f7c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008076:	4b88      	ldr	r3, [pc, #544]	; (8008298 <HAL_RCC_OscConfig+0xf78>)
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800807e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008082:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800808a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800808e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	430b      	orrs	r3, r1
 8008098:	497f      	ldr	r1, [pc, #508]	; (8008298 <HAL_RCC_OscConfig+0xf78>)
 800809a:	4313      	orrs	r3, r2
 800809c:	604b      	str	r3, [r1, #4]
 800809e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80080a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	fa93 f2a3 	rbit	r2, r3
 80080ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80080c2:	601a      	str	r2, [r3, #0]
  return result;
 80080c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80080cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080ce:	fab3 f383 	clz	r3, r3
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80080d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	461a      	mov	r2, r3
 80080e0:	2301      	movs	r3, #1
 80080e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080e4:	f7fd fcfa 	bl	8005adc <HAL_GetTick>
 80080e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80080ec:	e009      	b.n	8008102 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080ee:	f7fd fcf5 	bl	8005adc <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d901      	bls.n	8008102 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e144      	b.n	800838c <HAL_RCC_OscConfig+0x106c>
 8008102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008106:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800810a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800810e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008114:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	fa93 f2a3 	rbit	r2, r3
 800811e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008122:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008126:	601a      	str	r2, [r3, #0]
  return result;
 8008128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800812c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008130:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008132:	fab3 f383 	clz	r3, r3
 8008136:	b2db      	uxtb	r3, r3
 8008138:	095b      	lsrs	r3, r3, #5
 800813a:	b2db      	uxtb	r3, r3
 800813c:	f043 0301 	orr.w	r3, r3, #1
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b01      	cmp	r3, #1
 8008144:	d102      	bne.n	800814c <HAL_RCC_OscConfig+0xe2c>
 8008146:	4b54      	ldr	r3, [pc, #336]	; (8008298 <HAL_RCC_OscConfig+0xf78>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	e027      	b.n	800819c <HAL_RCC_OscConfig+0xe7c>
 800814c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008150:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800815a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800815e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	fa93 f2a3 	rbit	r2, r3
 8008168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800816c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008176:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800817a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008184:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	fa93 f2a3 	rbit	r2, r3
 800818e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008192:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	4b3f      	ldr	r3, [pc, #252]	; (8008298 <HAL_RCC_OscConfig+0xf78>)
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081a0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80081a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80081a8:	6011      	str	r1, [r2, #0]
 80081aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081ae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80081b2:	6812      	ldr	r2, [r2, #0]
 80081b4:	fa92 f1a2 	rbit	r1, r2
 80081b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80081c0:	6011      	str	r1, [r2, #0]
  return result;
 80081c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80081ca:	6812      	ldr	r2, [r2, #0]
 80081cc:	fab2 f282 	clz	r2, r2
 80081d0:	b2d2      	uxtb	r2, r2
 80081d2:	f042 0220 	orr.w	r2, r2, #32
 80081d6:	b2d2      	uxtb	r2, r2
 80081d8:	f002 021f 	and.w	r2, r2, #31
 80081dc:	2101      	movs	r1, #1
 80081de:	fa01 f202 	lsl.w	r2, r1, r2
 80081e2:	4013      	ands	r3, r2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d082      	beq.n	80080ee <HAL_RCC_OscConfig+0xdce>
 80081e8:	e0cf      	b.n	800838a <HAL_RCC_OscConfig+0x106a>
 80081ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80081f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	fa93 f2a3 	rbit	r2, r3
 8008206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800820a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800820e:	601a      	str	r2, [r3, #0]
  return result;
 8008210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008214:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008218:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800821a:	fab3 f383 	clz	r3, r3
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008224:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	461a      	mov	r2, r3
 800822c:	2300      	movs	r3, #0
 800822e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008230:	f7fd fc54 	bl	8005adc <HAL_GetTick>
 8008234:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008238:	e009      	b.n	800824e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800823a:	f7fd fc4f 	bl	8005adc <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b02      	cmp	r3, #2
 8008248:	d901      	bls.n	800824e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e09e      	b.n	800838c <HAL_RCC_OscConfig+0x106c>
 800824e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008252:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008256:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800825a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800825c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008260:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	fa93 f2a3 	rbit	r2, r3
 800826a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800826e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008272:	601a      	str	r2, [r3, #0]
  return result;
 8008274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008278:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800827c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800827e:	fab3 f383 	clz	r3, r3
 8008282:	b2db      	uxtb	r3, r3
 8008284:	095b      	lsrs	r3, r3, #5
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f043 0301 	orr.w	r3, r3, #1
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b01      	cmp	r3, #1
 8008290:	d104      	bne.n	800829c <HAL_RCC_OscConfig+0xf7c>
 8008292:	4b01      	ldr	r3, [pc, #4]	; (8008298 <HAL_RCC_OscConfig+0xf78>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	e029      	b.n	80082ec <HAL_RCC_OscConfig+0xfcc>
 8008298:	40021000 	.word	0x40021000
 800829c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80082a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80082a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082ae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	fa93 f2a3 	rbit	r2, r3
 80082b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80082ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80082ce:	601a      	str	r2, [r3, #0]
 80082d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082d4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	fa93 f2a3 	rbit	r2, r3
 80082de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	4b2b      	ldr	r3, [pc, #172]	; (8008398 <HAL_RCC_OscConfig+0x1078>)
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082f0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80082f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80082f8:	6011      	str	r1, [r2, #0]
 80082fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082fe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008302:	6812      	ldr	r2, [r2, #0]
 8008304:	fa92 f1a2 	rbit	r1, r2
 8008308:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800830c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008310:	6011      	str	r1, [r2, #0]
  return result;
 8008312:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008316:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800831a:	6812      	ldr	r2, [r2, #0]
 800831c:	fab2 f282 	clz	r2, r2
 8008320:	b2d2      	uxtb	r2, r2
 8008322:	f042 0220 	orr.w	r2, r2, #32
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	f002 021f 	and.w	r2, r2, #31
 800832c:	2101      	movs	r1, #1
 800832e:	fa01 f202 	lsl.w	r2, r1, r2
 8008332:	4013      	ands	r3, r2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d180      	bne.n	800823a <HAL_RCC_OscConfig+0xf1a>
 8008338:	e027      	b.n	800838a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800833a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800833e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	69db      	ldr	r3, [r3, #28]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d101      	bne.n	800834e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e01e      	b.n	800838c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800834e:	4b12      	ldr	r3, [pc, #72]	; (8008398 <HAL_RCC_OscConfig+0x1078>)
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008356:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800835a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800835e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	429a      	cmp	r2, r3
 800836c:	d10b      	bne.n	8008386 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800836e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008372:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800837a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008382:	429a      	cmp	r2, r3
 8008384:	d001      	beq.n	800838a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e000      	b.n	800838c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	40021000 	.word	0x40021000

0800839c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b09e      	sub	sp, #120	; 0x78
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80083a6:	2300      	movs	r3, #0
 80083a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e162      	b.n	800867a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083b4:	4b90      	ldr	r3, [pc, #576]	; (80085f8 <HAL_RCC_ClockConfig+0x25c>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0307 	and.w	r3, r3, #7
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d910      	bls.n	80083e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083c2:	4b8d      	ldr	r3, [pc, #564]	; (80085f8 <HAL_RCC_ClockConfig+0x25c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f023 0207 	bic.w	r2, r3, #7
 80083ca:	498b      	ldr	r1, [pc, #556]	; (80085f8 <HAL_RCC_ClockConfig+0x25c>)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083d2:	4b89      	ldr	r3, [pc, #548]	; (80085f8 <HAL_RCC_ClockConfig+0x25c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d001      	beq.n	80083e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e14a      	b.n	800867a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0302 	and.w	r3, r3, #2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d008      	beq.n	8008402 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083f0:	4b82      	ldr	r3, [pc, #520]	; (80085fc <HAL_RCC_ClockConfig+0x260>)
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	497f      	ldr	r1, [pc, #508]	; (80085fc <HAL_RCC_ClockConfig+0x260>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 80dc 	beq.w	80085c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d13c      	bne.n	8008492 <HAL_RCC_ClockConfig+0xf6>
 8008418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800841c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800841e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008420:	fa93 f3a3 	rbit	r3, r3
 8008424:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008428:	fab3 f383 	clz	r3, r3
 800842c:	b2db      	uxtb	r3, r3
 800842e:	095b      	lsrs	r3, r3, #5
 8008430:	b2db      	uxtb	r3, r3
 8008432:	f043 0301 	orr.w	r3, r3, #1
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b01      	cmp	r3, #1
 800843a:	d102      	bne.n	8008442 <HAL_RCC_ClockConfig+0xa6>
 800843c:	4b6f      	ldr	r3, [pc, #444]	; (80085fc <HAL_RCC_ClockConfig+0x260>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	e00f      	b.n	8008462 <HAL_RCC_ClockConfig+0xc6>
 8008442:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008446:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800844a:	fa93 f3a3 	rbit	r3, r3
 800844e:	667b      	str	r3, [r7, #100]	; 0x64
 8008450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008454:	663b      	str	r3, [r7, #96]	; 0x60
 8008456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008458:	fa93 f3a3 	rbit	r3, r3
 800845c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800845e:	4b67      	ldr	r3, [pc, #412]	; (80085fc <HAL_RCC_ClockConfig+0x260>)
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008466:	65ba      	str	r2, [r7, #88]	; 0x58
 8008468:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800846a:	fa92 f2a2 	rbit	r2, r2
 800846e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008470:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008472:	fab2 f282 	clz	r2, r2
 8008476:	b2d2      	uxtb	r2, r2
 8008478:	f042 0220 	orr.w	r2, r2, #32
 800847c:	b2d2      	uxtb	r2, r2
 800847e:	f002 021f 	and.w	r2, r2, #31
 8008482:	2101      	movs	r1, #1
 8008484:	fa01 f202 	lsl.w	r2, r1, r2
 8008488:	4013      	ands	r3, r2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d17b      	bne.n	8008586 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e0f3      	b.n	800867a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	2b02      	cmp	r3, #2
 8008498:	d13c      	bne.n	8008514 <HAL_RCC_ClockConfig+0x178>
 800849a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800849e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084a2:	fa93 f3a3 	rbit	r3, r3
 80084a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80084a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084aa:	fab3 f383 	clz	r3, r3
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	095b      	lsrs	r3, r3, #5
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	f043 0301 	orr.w	r3, r3, #1
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d102      	bne.n	80084c4 <HAL_RCC_ClockConfig+0x128>
 80084be:	4b4f      	ldr	r3, [pc, #316]	; (80085fc <HAL_RCC_ClockConfig+0x260>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	e00f      	b.n	80084e4 <HAL_RCC_ClockConfig+0x148>
 80084c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084cc:	fa93 f3a3 	rbit	r3, r3
 80084d0:	647b      	str	r3, [r7, #68]	; 0x44
 80084d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084d6:	643b      	str	r3, [r7, #64]	; 0x40
 80084d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084da:	fa93 f3a3 	rbit	r3, r3
 80084de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e0:	4b46      	ldr	r3, [pc, #280]	; (80085fc <HAL_RCC_ClockConfig+0x260>)
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80084e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80084ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084ec:	fa92 f2a2 	rbit	r2, r2
 80084f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80084f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084f4:	fab2 f282 	clz	r2, r2
 80084f8:	b2d2      	uxtb	r2, r2
 80084fa:	f042 0220 	orr.w	r2, r2, #32
 80084fe:	b2d2      	uxtb	r2, r2
 8008500:	f002 021f 	and.w	r2, r2, #31
 8008504:	2101      	movs	r1, #1
 8008506:	fa01 f202 	lsl.w	r2, r1, r2
 800850a:	4013      	ands	r3, r2
 800850c:	2b00      	cmp	r3, #0
 800850e:	d13a      	bne.n	8008586 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e0b2      	b.n	800867a <HAL_RCC_ClockConfig+0x2de>
 8008514:	2302      	movs	r3, #2
 8008516:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851a:	fa93 f3a3 	rbit	r3, r3
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008522:	fab3 f383 	clz	r3, r3
 8008526:	b2db      	uxtb	r3, r3
 8008528:	095b      	lsrs	r3, r3, #5
 800852a:	b2db      	uxtb	r3, r3
 800852c:	f043 0301 	orr.w	r3, r3, #1
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b01      	cmp	r3, #1
 8008534:	d102      	bne.n	800853c <HAL_RCC_ClockConfig+0x1a0>
 8008536:	4b31      	ldr	r3, [pc, #196]	; (80085fc <HAL_RCC_ClockConfig+0x260>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	e00d      	b.n	8008558 <HAL_RCC_ClockConfig+0x1bc>
 800853c:	2302      	movs	r3, #2
 800853e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	fa93 f3a3 	rbit	r3, r3
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
 8008548:	2302      	movs	r3, #2
 800854a:	623b      	str	r3, [r7, #32]
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	fa93 f3a3 	rbit	r3, r3
 8008552:	61fb      	str	r3, [r7, #28]
 8008554:	4b29      	ldr	r3, [pc, #164]	; (80085fc <HAL_RCC_ClockConfig+0x260>)
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	2202      	movs	r2, #2
 800855a:	61ba      	str	r2, [r7, #24]
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	fa92 f2a2 	rbit	r2, r2
 8008562:	617a      	str	r2, [r7, #20]
  return result;
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	fab2 f282 	clz	r2, r2
 800856a:	b2d2      	uxtb	r2, r2
 800856c:	f042 0220 	orr.w	r2, r2, #32
 8008570:	b2d2      	uxtb	r2, r2
 8008572:	f002 021f 	and.w	r2, r2, #31
 8008576:	2101      	movs	r1, #1
 8008578:	fa01 f202 	lsl.w	r2, r1, r2
 800857c:	4013      	ands	r3, r2
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e079      	b.n	800867a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008586:	4b1d      	ldr	r3, [pc, #116]	; (80085fc <HAL_RCC_ClockConfig+0x260>)
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f023 0203 	bic.w	r2, r3, #3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	491a      	ldr	r1, [pc, #104]	; (80085fc <HAL_RCC_ClockConfig+0x260>)
 8008594:	4313      	orrs	r3, r2
 8008596:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008598:	f7fd faa0 	bl	8005adc <HAL_GetTick>
 800859c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800859e:	e00a      	b.n	80085b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085a0:	f7fd fa9c 	bl	8005adc <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e061      	b.n	800867a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085b6:	4b11      	ldr	r3, [pc, #68]	; (80085fc <HAL_RCC_ClockConfig+0x260>)
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f003 020c 	and.w	r2, r3, #12
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d1eb      	bne.n	80085a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085c8:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <HAL_RCC_ClockConfig+0x25c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d214      	bcs.n	8008600 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085d6:	4b08      	ldr	r3, [pc, #32]	; (80085f8 <HAL_RCC_ClockConfig+0x25c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f023 0207 	bic.w	r2, r3, #7
 80085de:	4906      	ldr	r1, [pc, #24]	; (80085f8 <HAL_RCC_ClockConfig+0x25c>)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085e6:	4b04      	ldr	r3, [pc, #16]	; (80085f8 <HAL_RCC_ClockConfig+0x25c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0307 	and.w	r3, r3, #7
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d005      	beq.n	8008600 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e040      	b.n	800867a <HAL_RCC_ClockConfig+0x2de>
 80085f8:	40022000 	.word	0x40022000
 80085fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b00      	cmp	r3, #0
 800860a:	d008      	beq.n	800861e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800860c:	4b1d      	ldr	r3, [pc, #116]	; (8008684 <HAL_RCC_ClockConfig+0x2e8>)
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	491a      	ldr	r1, [pc, #104]	; (8008684 <HAL_RCC_ClockConfig+0x2e8>)
 800861a:	4313      	orrs	r3, r2
 800861c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0308 	and.w	r3, r3, #8
 8008626:	2b00      	cmp	r3, #0
 8008628:	d009      	beq.n	800863e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800862a:	4b16      	ldr	r3, [pc, #88]	; (8008684 <HAL_RCC_ClockConfig+0x2e8>)
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	4912      	ldr	r1, [pc, #72]	; (8008684 <HAL_RCC_ClockConfig+0x2e8>)
 800863a:	4313      	orrs	r3, r2
 800863c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800863e:	f000 f829 	bl	8008694 <HAL_RCC_GetSysClockFreq>
 8008642:	4601      	mov	r1, r0
 8008644:	4b0f      	ldr	r3, [pc, #60]	; (8008684 <HAL_RCC_ClockConfig+0x2e8>)
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800864c:	22f0      	movs	r2, #240	; 0xf0
 800864e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	fa92 f2a2 	rbit	r2, r2
 8008656:	60fa      	str	r2, [r7, #12]
  return result;
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	fab2 f282 	clz	r2, r2
 800865e:	b2d2      	uxtb	r2, r2
 8008660:	40d3      	lsrs	r3, r2
 8008662:	4a09      	ldr	r2, [pc, #36]	; (8008688 <HAL_RCC_ClockConfig+0x2ec>)
 8008664:	5cd3      	ldrb	r3, [r2, r3]
 8008666:	fa21 f303 	lsr.w	r3, r1, r3
 800866a:	4a08      	ldr	r2, [pc, #32]	; (800868c <HAL_RCC_ClockConfig+0x2f0>)
 800866c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800866e:	4b08      	ldr	r3, [pc, #32]	; (8008690 <HAL_RCC_ClockConfig+0x2f4>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f7fd f9ee 	bl	8005a54 <HAL_InitTick>
  
  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3778      	adds	r7, #120	; 0x78
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	40021000 	.word	0x40021000
 8008688:	0800d9c8 	.word	0x0800d9c8
 800868c:	20000054 	.word	0x20000054
 8008690:	20000060 	.word	0x20000060

08008694 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008694:	b480      	push	{r7}
 8008696:	b08b      	sub	sp, #44	; 0x2c
 8008698:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	61fb      	str	r3, [r7, #28]
 800869e:	2300      	movs	r3, #0
 80086a0:	61bb      	str	r3, [r7, #24]
 80086a2:	2300      	movs	r3, #0
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80086ae:	4b29      	ldr	r3, [pc, #164]	; (8008754 <HAL_RCC_GetSysClockFreq+0xc0>)
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	f003 030c 	and.w	r3, r3, #12
 80086ba:	2b04      	cmp	r3, #4
 80086bc:	d002      	beq.n	80086c4 <HAL_RCC_GetSysClockFreq+0x30>
 80086be:	2b08      	cmp	r3, #8
 80086c0:	d003      	beq.n	80086ca <HAL_RCC_GetSysClockFreq+0x36>
 80086c2:	e03c      	b.n	800873e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80086c4:	4b24      	ldr	r3, [pc, #144]	; (8008758 <HAL_RCC_GetSysClockFreq+0xc4>)
 80086c6:	623b      	str	r3, [r7, #32]
      break;
 80086c8:	e03c      	b.n	8008744 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80086d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80086d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	fa92 f2a2 	rbit	r2, r2
 80086dc:	607a      	str	r2, [r7, #4]
  return result;
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	fab2 f282 	clz	r2, r2
 80086e4:	b2d2      	uxtb	r2, r2
 80086e6:	40d3      	lsrs	r3, r2
 80086e8:	4a1c      	ldr	r2, [pc, #112]	; (800875c <HAL_RCC_GetSysClockFreq+0xc8>)
 80086ea:	5cd3      	ldrb	r3, [r2, r3]
 80086ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80086ee:	4b19      	ldr	r3, [pc, #100]	; (8008754 <HAL_RCC_GetSysClockFreq+0xc0>)
 80086f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f2:	f003 030f 	and.w	r3, r3, #15
 80086f6:	220f      	movs	r2, #15
 80086f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	fa92 f2a2 	rbit	r2, r2
 8008700:	60fa      	str	r2, [r7, #12]
  return result;
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	fab2 f282 	clz	r2, r2
 8008708:	b2d2      	uxtb	r2, r2
 800870a:	40d3      	lsrs	r3, r2
 800870c:	4a14      	ldr	r2, [pc, #80]	; (8008760 <HAL_RCC_GetSysClockFreq+0xcc>)
 800870e:	5cd3      	ldrb	r3, [r2, r3]
 8008710:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d008      	beq.n	800872e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800871c:	4a0e      	ldr	r2, [pc, #56]	; (8008758 <HAL_RCC_GetSysClockFreq+0xc4>)
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	fbb2 f2f3 	udiv	r2, r2, r3
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	fb02 f303 	mul.w	r3, r2, r3
 800872a:	627b      	str	r3, [r7, #36]	; 0x24
 800872c:	e004      	b.n	8008738 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	4a0c      	ldr	r2, [pc, #48]	; (8008764 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008732:	fb02 f303 	mul.w	r3, r2, r3
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	623b      	str	r3, [r7, #32]
      break;
 800873c:	e002      	b.n	8008744 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800873e:	4b06      	ldr	r3, [pc, #24]	; (8008758 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008740:	623b      	str	r3, [r7, #32]
      break;
 8008742:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008744:	6a3b      	ldr	r3, [r7, #32]
}
 8008746:	4618      	mov	r0, r3
 8008748:	372c      	adds	r7, #44	; 0x2c
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	40021000 	.word	0x40021000
 8008758:	007a1200 	.word	0x007a1200
 800875c:	0800d9e0 	.word	0x0800d9e0
 8008760:	0800d9f0 	.word	0x0800d9f0
 8008764:	003d0900 	.word	0x003d0900

08008768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008768:	b480      	push	{r7}
 800876a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800876c:	4b03      	ldr	r3, [pc, #12]	; (800877c <HAL_RCC_GetHCLKFreq+0x14>)
 800876e:	681b      	ldr	r3, [r3, #0]
}
 8008770:	4618      	mov	r0, r3
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	20000054 	.word	0x20000054

08008780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008786:	f7ff ffef 	bl	8008768 <HAL_RCC_GetHCLKFreq>
 800878a:	4601      	mov	r1, r0
 800878c:	4b0b      	ldr	r3, [pc, #44]	; (80087bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008794:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008798:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	fa92 f2a2 	rbit	r2, r2
 80087a0:	603a      	str	r2, [r7, #0]
  return result;
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	fab2 f282 	clz	r2, r2
 80087a8:	b2d2      	uxtb	r2, r2
 80087aa:	40d3      	lsrs	r3, r2
 80087ac:	4a04      	ldr	r2, [pc, #16]	; (80087c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80087ae:	5cd3      	ldrb	r3, [r2, r3]
 80087b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80087b4:	4618      	mov	r0, r3
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	40021000 	.word	0x40021000
 80087c0:	0800d9d8 	.word	0x0800d9d8

080087c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80087ca:	f7ff ffcd 	bl	8008768 <HAL_RCC_GetHCLKFreq>
 80087ce:	4601      	mov	r1, r0
 80087d0:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80087d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80087dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	fa92 f2a2 	rbit	r2, r2
 80087e4:	603a      	str	r2, [r7, #0]
  return result;
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	fab2 f282 	clz	r2, r2
 80087ec:	b2d2      	uxtb	r2, r2
 80087ee:	40d3      	lsrs	r3, r2
 80087f0:	4a04      	ldr	r2, [pc, #16]	; (8008804 <HAL_RCC_GetPCLK2Freq+0x40>)
 80087f2:	5cd3      	ldrb	r3, [r2, r3]
 80087f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	40021000 	.word	0x40021000
 8008804:	0800d9d8 	.word	0x0800d9d8

08008808 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b092      	sub	sp, #72	; 0x48
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008818:	2300      	movs	r3, #0
 800881a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 80d4 	beq.w	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800882c:	4b4e      	ldr	r3, [pc, #312]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10e      	bne.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008838:	4b4b      	ldr	r3, [pc, #300]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	4a4a      	ldr	r2, [pc, #296]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800883e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008842:	61d3      	str	r3, [r2, #28]
 8008844:	4b48      	ldr	r3, [pc, #288]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008846:	69db      	ldr	r3, [r3, #28]
 8008848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800884c:	60bb      	str	r3, [r7, #8]
 800884e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008850:	2301      	movs	r3, #1
 8008852:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008856:	4b45      	ldr	r3, [pc, #276]	; (800896c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800885e:	2b00      	cmp	r3, #0
 8008860:	d118      	bne.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008862:	4b42      	ldr	r3, [pc, #264]	; (800896c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a41      	ldr	r2, [pc, #260]	; (800896c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800886c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800886e:	f7fd f935 	bl	8005adc <HAL_GetTick>
 8008872:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008874:	e008      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008876:	f7fd f931 	bl	8005adc <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	2b64      	cmp	r3, #100	; 0x64
 8008882:	d901      	bls.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e13c      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008888:	4b38      	ldr	r3, [pc, #224]	; (800896c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008890:	2b00      	cmp	r3, #0
 8008892:	d0f0      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008894:	4b34      	ldr	r3, [pc, #208]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800889c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800889e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 8084 	beq.w	80089ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d07c      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80088b4:	4b2c      	ldr	r3, [pc, #176]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	fa93 f3a3 	rbit	r3, r3
 80088ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80088cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80088ce:	fab3 f383 	clz	r3, r3
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	461a      	mov	r2, r3
 80088d6:	4b26      	ldr	r3, [pc, #152]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80088d8:	4413      	add	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	461a      	mov	r2, r3
 80088de:	2301      	movs	r3, #1
 80088e0:	6013      	str	r3, [r2, #0]
 80088e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ea:	fa93 f3a3 	rbit	r3, r3
 80088ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80088f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80088f2:	fab3 f383 	clz	r3, r3
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	461a      	mov	r2, r3
 80088fa:	4b1d      	ldr	r3, [pc, #116]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80088fc:	4413      	add	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	461a      	mov	r2, r3
 8008902:	2300      	movs	r3, #0
 8008904:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008906:	4a18      	ldr	r2, [pc, #96]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800890c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d04b      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008916:	f7fd f8e1 	bl	8005adc <HAL_GetTick>
 800891a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800891c:	e00a      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800891e:	f7fd f8dd 	bl	8005adc <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	f241 3288 	movw	r2, #5000	; 0x1388
 800892c:	4293      	cmp	r3, r2
 800892e:	d901      	bls.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e0e6      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8008934:	2302      	movs	r3, #2
 8008936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	fa93 f3a3 	rbit	r3, r3
 800893e:	627b      	str	r3, [r7, #36]	; 0x24
 8008940:	2302      	movs	r3, #2
 8008942:	623b      	str	r3, [r7, #32]
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	fa93 f3a3 	rbit	r3, r3
 800894a:	61fb      	str	r3, [r7, #28]
  return result;
 800894c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800894e:	fab3 f383 	clz	r3, r3
 8008952:	b2db      	uxtb	r3, r3
 8008954:	095b      	lsrs	r3, r3, #5
 8008956:	b2db      	uxtb	r3, r3
 8008958:	f043 0302 	orr.w	r3, r3, #2
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b02      	cmp	r3, #2
 8008960:	d108      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008962:	4b01      	ldr	r3, [pc, #4]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	e00d      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008968:	40021000 	.word	0x40021000
 800896c:	40007000 	.word	0x40007000
 8008970:	10908100 	.word	0x10908100
 8008974:	2302      	movs	r3, #2
 8008976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	fa93 f3a3 	rbit	r3, r3
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	4b62      	ldr	r3, [pc, #392]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	2202      	movs	r2, #2
 8008986:	613a      	str	r2, [r7, #16]
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	fa92 f2a2 	rbit	r2, r2
 800898e:	60fa      	str	r2, [r7, #12]
  return result;
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	fab2 f282 	clz	r2, r2
 8008996:	b2d2      	uxtb	r2, r2
 8008998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800899c:	b2d2      	uxtb	r2, r2
 800899e:	f002 021f 	and.w	r2, r2, #31
 80089a2:	2101      	movs	r1, #1
 80089a4:	fa01 f202 	lsl.w	r2, r1, r2
 80089a8:	4013      	ands	r3, r2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0b7      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80089ae:	4b57      	ldr	r3, [pc, #348]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	4954      	ldr	r1, [pc, #336]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80089c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d105      	bne.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089c8:	4b50      	ldr	r3, [pc, #320]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	4a4f      	ldr	r2, [pc, #316]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d008      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80089e0:	4b4a      	ldr	r3, [pc, #296]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e4:	f023 0203 	bic.w	r2, r3, #3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	4947      	ldr	r1, [pc, #284]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0320 	and.w	r3, r3, #32
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d008      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80089fe:	4b43      	ldr	r3, [pc, #268]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	f023 0210 	bic.w	r2, r3, #16
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	4940      	ldr	r1, [pc, #256]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d008      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008a1c:	4b3b      	ldr	r3, [pc, #236]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a20:	f023 0220 	bic.w	r2, r3, #32
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	4938      	ldr	r1, [pc, #224]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d008      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a3a:	4b34      	ldr	r3, [pc, #208]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	4931      	ldr	r1, [pc, #196]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d008      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008a58:	4b2c      	ldr	r3, [pc, #176]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	69db      	ldr	r3, [r3, #28]
 8008a64:	4929      	ldr	r1, [pc, #164]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d008      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8008a76:	4b25      	ldr	r3, [pc, #148]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	4922      	ldr	r1, [pc, #136]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d008      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008a94:	4b1d      	ldr	r3, [pc, #116]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	491a      	ldr	r1, [pc, #104]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d008      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008ab2:	4b16      	ldr	r3, [pc, #88]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	4913      	ldr	r1, [pc, #76]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d008      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8008ad0:	4b0e      	ldr	r3, [pc, #56]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008adc:	490b      	ldr	r1, [pc, #44]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d008      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8008aee:	4b07      	ldr	r3, [pc, #28]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afa:	4904      	ldr	r1, [pc, #16]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3748      	adds	r7, #72	; 0x48
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	40021000 	.word	0x40021000

08008b10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e09d      	b.n	8008c5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d108      	bne.n	8008b3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b32:	d009      	beq.n	8008b48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	61da      	str	r2, [r3, #28]
 8008b3a:	e005      	b.n	8008b48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d106      	bne.n	8008b68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7fb fd94 	bl	8004690 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b88:	d902      	bls.n	8008b90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	e002      	b.n	8008b96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008b9e:	d007      	beq.n	8008bb0 <HAL_SPI_Init+0xa0>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ba8:	d002      	beq.n	8008bb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008bc0:	431a      	orrs	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bde:	431a      	orrs	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	69db      	ldr	r3, [r3, #28]
 8008be4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008be8:	431a      	orrs	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf2:	ea42 0103 	orr.w	r1, r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	0c1b      	lsrs	r3, r3, #16
 8008c0c:	f003 0204 	and.w	r2, r3, #4
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	f003 0310 	and.w	r3, r3, #16
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1e:	f003 0308 	and.w	r3, r3, #8
 8008c22:	431a      	orrs	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008c2c:	ea42 0103 	orr.w	r1, r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69da      	ldr	r2, [r3, #28]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b088      	sub	sp, #32
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	60b9      	str	r1, [r7, #8]
 8008c70:	603b      	str	r3, [r7, #0]
 8008c72:	4613      	mov	r3, r2
 8008c74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_SPI_Transmit+0x22>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e15f      	b.n	8008f48 <HAL_SPI_Transmit+0x2e2>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c90:	f7fc ff24 	bl	8005adc <HAL_GetTick>
 8008c94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008c96:	88fb      	ldrh	r3, [r7, #6]
 8008c98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d002      	beq.n	8008cac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008caa:	e148      	b.n	8008f3e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d002      	beq.n	8008cb8 <HAL_SPI_Transmit+0x52>
 8008cb2:	88fb      	ldrh	r3, [r7, #6]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d102      	bne.n	8008cbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008cbc:	e13f      	b.n	8008f3e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2203      	movs	r2, #3
 8008cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	88fa      	ldrh	r2, [r7, #6]
 8008cd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	88fa      	ldrh	r2, [r7, #6]
 8008cdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d08:	d10f      	bne.n	8008d2a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d34:	2b40      	cmp	r3, #64	; 0x40
 8008d36:	d007      	beq.n	8008d48 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d50:	d94f      	bls.n	8008df2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <HAL_SPI_Transmit+0xfa>
 8008d5a:	8afb      	ldrh	r3, [r7, #22]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d142      	bne.n	8008de6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d64:	881a      	ldrh	r2, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	1c9a      	adds	r2, r3, #2
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008d84:	e02f      	b.n	8008de6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f003 0302 	and.w	r3, r3, #2
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d112      	bne.n	8008dba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d98:	881a      	ldrh	r2, [r3, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da4:	1c9a      	adds	r2, r3, #2
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	3b01      	subs	r3, #1
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008db8:	e015      	b.n	8008de6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dba:	f7fc fe8f 	bl	8005adc <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d803      	bhi.n	8008dd2 <HAL_SPI_Transmit+0x16c>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd0:	d102      	bne.n	8008dd8 <HAL_SPI_Transmit+0x172>
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d106      	bne.n	8008de6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008de4:	e0ab      	b.n	8008f3e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1ca      	bne.n	8008d86 <HAL_SPI_Transmit+0x120>
 8008df0:	e080      	b.n	8008ef4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <HAL_SPI_Transmit+0x19a>
 8008dfa:	8afb      	ldrh	r3, [r7, #22]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d174      	bne.n	8008eea <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d912      	bls.n	8008e30 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0e:	881a      	ldrh	r2, [r3, #0]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1a:	1c9a      	adds	r2, r3, #2
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	3b02      	subs	r3, #2
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e2e:	e05c      	b.n	8008eea <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	330c      	adds	r3, #12
 8008e3a:	7812      	ldrb	r2, [r2, #0]
 8008e3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008e56:	e048      	b.n	8008eea <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d12b      	bne.n	8008ebe <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d912      	bls.n	8008e96 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e74:	881a      	ldrh	r2, [r3, #0]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e80:	1c9a      	adds	r2, r3, #2
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	3b02      	subs	r3, #2
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e94:	e029      	b.n	8008eea <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	330c      	adds	r3, #12
 8008ea0:	7812      	ldrb	r2, [r2, #0]
 8008ea2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ebc:	e015      	b.n	8008eea <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ebe:	f7fc fe0d 	bl	8005adc <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d803      	bhi.n	8008ed6 <HAL_SPI_Transmit+0x270>
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed4:	d102      	bne.n	8008edc <HAL_SPI_Transmit+0x276>
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d106      	bne.n	8008eea <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008ee8:	e029      	b.n	8008f3e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1b1      	bne.n	8008e58 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 fbd7 	bl	80096ac <SPI_EndRxTxTransaction>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d002      	beq.n	8008f0a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2220      	movs	r2, #32
 8008f08:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10a      	bne.n	8008f28 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f12:	2300      	movs	r3, #0
 8008f14:	613b      	str	r3, [r7, #16]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	613b      	str	r3, [r7, #16]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	613b      	str	r3, [r7, #16]
 8008f26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	77fb      	strb	r3, [r7, #31]
 8008f34:	e003      	b.n	8008f3e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f46:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3720      	adds	r7, #32
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d101      	bne.n	8008f70 <HAL_SPI_Transmit_DMA+0x20>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	e0d4      	b.n	800911a <HAL_SPI_Transmit_DMA+0x1ca>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d002      	beq.n	8008f8a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008f84:	2302      	movs	r3, #2
 8008f86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f88:	e0c2      	b.n	8009110 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <HAL_SPI_Transmit_DMA+0x46>
 8008f90:	88fb      	ldrh	r3, [r7, #6]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d102      	bne.n	8008f9c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f9a:	e0b9      	b.n	8009110 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2203      	movs	r2, #3
 8008fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	88fa      	ldrh	r2, [r7, #6]
 8008fb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	88fa      	ldrh	r2, [r7, #6]
 8008fba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe6:	d10f      	bne.n	8009008 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ff6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009006:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800900c:	4a45      	ldr	r2, [pc, #276]	; (8009124 <HAL_SPI_Transmit_DMA+0x1d4>)
 800900e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009014:	4a44      	ldr	r2, [pc, #272]	; (8009128 <HAL_SPI_Transmit_DMA+0x1d8>)
 8009016:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800901c:	4a43      	ldr	r2, [pc, #268]	; (800912c <HAL_SPI_Transmit_DMA+0x1dc>)
 800901e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009024:	2200      	movs	r2, #0
 8009026:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009036:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009040:	d82d      	bhi.n	800909e <HAL_SPI_Transmit_DMA+0x14e>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800904c:	d127      	bne.n	800909e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009052:	b29b      	uxth	r3, r3
 8009054:	f003 0301 	and.w	r3, r3, #1
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10f      	bne.n	800907c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800906a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009070:	b29b      	uxth	r3, r3
 8009072:	085b      	lsrs	r3, r3, #1
 8009074:	b29a      	uxth	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	87da      	strh	r2, [r3, #62]	; 0x3e
 800907a:	e010      	b.n	800909e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800908a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009090:	b29b      	uxth	r3, r3
 8009092:	085b      	lsrs	r3, r3, #1
 8009094:	b29b      	uxth	r3, r3
 8009096:	3301      	adds	r3, #1
 8009098:	b29a      	uxth	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a6:	4619      	mov	r1, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	330c      	adds	r3, #12
 80090ae:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090b4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80090b6:	f7fc fe99 	bl	8005dec <HAL_DMA_Start_IT>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d008      	beq.n	80090d2 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090c4:	f043 0210 	orr.w	r2, r3, #16
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	75fb      	strb	r3, [r7, #23]

    goto error;
 80090d0:	e01e      	b.n	8009110 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090dc:	2b40      	cmp	r3, #64	; 0x40
 80090de:	d007      	beq.n	80090f0 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090ee:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f042 0220 	orr.w	r2, r2, #32
 80090fe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f042 0202 	orr.w	r2, r2, #2
 800910e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009118:	7dfb      	ldrb	r3, [r7, #23]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	080093eb 	.word	0x080093eb
 8009128:	08009345 	.word	0x08009345
 800912c:	08009407 	.word	0x08009407

08009130 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	099b      	lsrs	r3, r3, #6
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10f      	bne.n	8009174 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00a      	beq.n	8009174 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	099b      	lsrs	r3, r3, #6
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d004      	beq.n	8009174 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	4798      	blx	r3
    return;
 8009172:	e0d7      	b.n	8009324 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	085b      	lsrs	r3, r3, #1
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00a      	beq.n	8009196 <HAL_SPI_IRQHandler+0x66>
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	09db      	lsrs	r3, r3, #7
 8009184:	f003 0301 	and.w	r3, r3, #1
 8009188:	2b00      	cmp	r3, #0
 800918a:	d004      	beq.n	8009196 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	4798      	blx	r3
    return;
 8009194:	e0c6      	b.n	8009324 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	095b      	lsrs	r3, r3, #5
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10c      	bne.n	80091bc <HAL_SPI_IRQHandler+0x8c>
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	099b      	lsrs	r3, r3, #6
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d106      	bne.n	80091bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	0a1b      	lsrs	r3, r3, #8
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 80b4 	beq.w	8009324 <HAL_SPI_IRQHandler+0x1f4>
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	095b      	lsrs	r3, r3, #5
 80091c0:	f003 0301 	and.w	r3, r3, #1
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 80ad 	beq.w	8009324 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	099b      	lsrs	r3, r3, #6
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d023      	beq.n	800921e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b03      	cmp	r3, #3
 80091e0:	d011      	beq.n	8009206 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091e6:	f043 0204 	orr.w	r2, r3, #4
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091ee:	2300      	movs	r3, #0
 80091f0:	617b      	str	r3, [r7, #20]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	617b      	str	r3, [r7, #20]
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	e00b      	b.n	800921e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009206:	2300      	movs	r3, #0
 8009208:	613b      	str	r3, [r7, #16]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	613b      	str	r3, [r7, #16]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	613b      	str	r3, [r7, #16]
 800921a:	693b      	ldr	r3, [r7, #16]
        return;
 800921c:	e082      	b.n	8009324 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	095b      	lsrs	r3, r3, #5
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d014      	beq.n	8009254 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800922e:	f043 0201 	orr.w	r2, r3, #1
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	60fb      	str	r3, [r7, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	0a1b      	lsrs	r3, r3, #8
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00c      	beq.n	800927a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009264:	f043 0208 	orr.w	r2, r3, #8
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800926c:	2300      	movs	r3, #0
 800926e:	60bb      	str	r3, [r7, #8]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	60bb      	str	r3, [r7, #8]
 8009278:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800927e:	2b00      	cmp	r3, #0
 8009280:	d04f      	beq.n	8009322 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009290:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d104      	bne.n	80092ae <HAL_SPI_IRQHandler+0x17e>
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	f003 0301 	and.w	r3, r3, #1
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d034      	beq.n	8009318 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 0203 	bic.w	r2, r2, #3
 80092bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d011      	beq.n	80092ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ca:	4a18      	ldr	r2, [pc, #96]	; (800932c <HAL_SPI_IRQHandler+0x1fc>)
 80092cc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fc fe22 	bl	8005f1c <HAL_DMA_Abort_IT>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d005      	beq.n	80092ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d016      	beq.n	8009320 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f6:	4a0d      	ldr	r2, [pc, #52]	; (800932c <HAL_SPI_IRQHandler+0x1fc>)
 80092f8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fc fe0c 	bl	8005f1c <HAL_DMA_Abort_IT>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00a      	beq.n	8009320 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800930e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009316:	e003      	b.n	8009320 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f7fb fd93 	bl	8004e44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800931e:	e000      	b.n	8009322 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009320:	bf00      	nop
    return;
 8009322:	bf00      	nop
  }
}
 8009324:	3720      	adds	r7, #32
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	08009447 	.word	0x08009447

08009330 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009352:	f7fc fbc3 	bl	8005adc <HAL_GetTick>
 8009356:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0320 	and.w	r3, r3, #32
 8009362:	2b20      	cmp	r3, #32
 8009364:	d03b      	beq.n	80093de <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0220 	bic.w	r2, r2, #32
 8009374:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f022 0202 	bic.w	r2, r2, #2
 8009384:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	2164      	movs	r1, #100	; 0x64
 800938a:	6978      	ldr	r0, [r7, #20]
 800938c:	f000 f98e 	bl	80096ac <SPI_EndRxTxTransaction>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d005      	beq.n	80093a2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800939a:	f043 0220 	orr.w	r2, r3, #32
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10a      	bne.n	80093c0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093aa:	2300      	movs	r3, #0
 80093ac:	60fb      	str	r3, [r7, #12]
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	60fb      	str	r3, [r7, #12]
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	60fb      	str	r3, [r7, #12]
 80093be:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	2200      	movs	r2, #0
 80093c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80093d6:	6978      	ldr	r0, [r7, #20]
 80093d8:	f7fb fd34 	bl	8004e44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80093dc:	e002      	b.n	80093e4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80093de:	6978      	ldr	r0, [r7, #20]
 80093e0:	f7fb fd46 	bl	8004e70 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093e4:	3718      	adds	r7, #24
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f7ff ff99 	bl	8009330 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093fe:	bf00      	nop
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b084      	sub	sp, #16
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685a      	ldr	r2, [r3, #4]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f022 0203 	bic.w	r2, r2, #3
 8009422:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009428:	f043 0210 	orr.w	r2, r3, #16
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f7fb fd03 	bl	8004e44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800943e:	bf00      	nop
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f7fb fcee 	bl	8004e44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009468:	bf00      	nop
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b088      	sub	sp, #32
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	603b      	str	r3, [r7, #0]
 800947c:	4613      	mov	r3, r2
 800947e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009480:	f7fc fb2c 	bl	8005adc <HAL_GetTick>
 8009484:	4602      	mov	r2, r0
 8009486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009488:	1a9b      	subs	r3, r3, r2
 800948a:	683a      	ldr	r2, [r7, #0]
 800948c:	4413      	add	r3, r2
 800948e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009490:	f7fc fb24 	bl	8005adc <HAL_GetTick>
 8009494:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009496:	4b39      	ldr	r3, [pc, #228]	; (800957c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	015b      	lsls	r3, r3, #5
 800949c:	0d1b      	lsrs	r3, r3, #20
 800949e:	69fa      	ldr	r2, [r7, #28]
 80094a0:	fb02 f303 	mul.w	r3, r2, r3
 80094a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094a6:	e054      	b.n	8009552 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ae:	d050      	beq.n	8009552 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094b0:	f7fc fb14 	bl	8005adc <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	69fa      	ldr	r2, [r7, #28]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d902      	bls.n	80094c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d13d      	bne.n	8009542 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80094d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094de:	d111      	bne.n	8009504 <SPI_WaitFlagStateUntilTimeout+0x94>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094e8:	d004      	beq.n	80094f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094f2:	d107      	bne.n	8009504 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009502:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800950c:	d10f      	bne.n	800952e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800952c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e017      	b.n	8009572 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d101      	bne.n	800954c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	3b01      	subs	r3, #1
 8009550:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	689a      	ldr	r2, [r3, #8]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	4013      	ands	r3, r2
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	429a      	cmp	r2, r3
 8009560:	bf0c      	ite	eq
 8009562:	2301      	moveq	r3, #1
 8009564:	2300      	movne	r3, #0
 8009566:	b2db      	uxtb	r3, r3
 8009568:	461a      	mov	r2, r3
 800956a:	79fb      	ldrb	r3, [r7, #7]
 800956c:	429a      	cmp	r2, r3
 800956e:	d19b      	bne.n	80094a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3720      	adds	r7, #32
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	20000054 	.word	0x20000054

08009580 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b08a      	sub	sp, #40	; 0x28
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
 800958c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009592:	f7fc faa3 	bl	8005adc <HAL_GetTick>
 8009596:	4602      	mov	r2, r0
 8009598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959a:	1a9b      	subs	r3, r3, r2
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	4413      	add	r3, r2
 80095a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80095a2:	f7fc fa9b 	bl	8005adc <HAL_GetTick>
 80095a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	330c      	adds	r3, #12
 80095ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80095b0:	4b3d      	ldr	r3, [pc, #244]	; (80096a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	00da      	lsls	r2, r3, #3
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	0d1b      	lsrs	r3, r3, #20
 80095c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095c2:	fb02 f303 	mul.w	r3, r2, r3
 80095c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80095c8:	e060      	b.n	800968c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80095d0:	d107      	bne.n	80095e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d104      	bne.n	80095e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80095e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e8:	d050      	beq.n	800968c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80095ea:	f7fc fa77 	bl	8005adc <HAL_GetTick>
 80095ee:	4602      	mov	r2, r0
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d902      	bls.n	8009600 <SPI_WaitFifoStateUntilTimeout+0x80>
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d13d      	bne.n	800967c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800960e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009618:	d111      	bne.n	800963e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009622:	d004      	beq.n	800962e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800962c:	d107      	bne.n	800963e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800963c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009646:	d10f      	bne.n	8009668 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009666:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009678:	2303      	movs	r3, #3
 800967a:	e010      	b.n	800969e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009682:	2300      	movs	r3, #0
 8009684:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	3b01      	subs	r3, #1
 800968a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	689a      	ldr	r2, [r3, #8]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	4013      	ands	r3, r2
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	429a      	cmp	r2, r3
 800969a:	d196      	bne.n	80095ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3728      	adds	r7, #40	; 0x28
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20000054 	.word	0x20000054

080096ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af02      	add	r7, sp, #8
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2200      	movs	r2, #0
 80096c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f7ff ff5b 	bl	8009580 <SPI_WaitFifoStateUntilTimeout>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d007      	beq.n	80096e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096d4:	f043 0220 	orr.w	r2, r3, #32
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e027      	b.n	8009730 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2200      	movs	r2, #0
 80096e8:	2180      	movs	r1, #128	; 0x80
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f7ff fec0 	bl	8009470 <SPI_WaitFlagStateUntilTimeout>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d007      	beq.n	8009706 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096fa:	f043 0220 	orr.w	r2, r3, #32
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e014      	b.n	8009730 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2200      	movs	r2, #0
 800970e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f7ff ff34 	bl	8009580 <SPI_WaitFifoStateUntilTimeout>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d007      	beq.n	800972e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009722:	f043 0220 	orr.w	r2, r3, #32
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800972a:	2303      	movs	r3, #3
 800972c:	e000      	b.n	8009730 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e040      	b.n	80097cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800974e:	2b00      	cmp	r3, #0
 8009750:	d106      	bne.n	8009760 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7fb f80e 	bl	800477c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2224      	movs	r2, #36	; 0x24
 8009764:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f022 0201 	bic.w	r2, r2, #1
 8009774:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fbbc 	bl	8009ef4 <UART_SetConfig>
 800977c:	4603      	mov	r3, r0
 800977e:	2b01      	cmp	r3, #1
 8009780:	d101      	bne.n	8009786 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e022      	b.n	80097cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fce6 	bl	800a160 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685a      	ldr	r2, [r3, #4]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689a      	ldr	r2, [r3, #8]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f042 0201 	orr.w	r2, r2, #1
 80097c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fd6d 	bl	800a2a4 <UART_CheckIdleState>
 80097ca:	4603      	mov	r3, r0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08a      	sub	sp, #40	; 0x28
 80097d8:	af02      	add	r7, sp, #8
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	4613      	mov	r3, r2
 80097e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	d178      	bne.n	80098de <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <HAL_UART_Transmit+0x24>
 80097f2:	88fb      	ldrh	r3, [r7, #6]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e071      	b.n	80098e0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2221      	movs	r2, #33	; 0x21
 8009808:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800980a:	f7fc f967 	bl	8005adc <HAL_GetTick>
 800980e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	88fa      	ldrh	r2, [r7, #6]
 8009814:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	88fa      	ldrh	r2, [r7, #6]
 800981c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009828:	d108      	bne.n	800983c <HAL_UART_Transmit+0x68>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d104      	bne.n	800983c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009832:	2300      	movs	r3, #0
 8009834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	61bb      	str	r3, [r7, #24]
 800983a:	e003      	b.n	8009844 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009840:	2300      	movs	r3, #0
 8009842:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009844:	e030      	b.n	80098a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2200      	movs	r2, #0
 800984e:	2180      	movs	r1, #128	; 0x80
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 fdcf 	bl	800a3f4 <UART_WaitOnFlagUntilTimeout>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d004      	beq.n	8009866 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2220      	movs	r2, #32
 8009860:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009862:	2303      	movs	r3, #3
 8009864:	e03c      	b.n	80098e0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10b      	bne.n	8009884 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	881a      	ldrh	r2, [r3, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009878:	b292      	uxth	r2, r2
 800987a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	3302      	adds	r3, #2
 8009880:	61bb      	str	r3, [r7, #24]
 8009882:	e008      	b.n	8009896 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	781a      	ldrb	r2, [r3, #0]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	b292      	uxth	r2, r2
 800988e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	3301      	adds	r3, #1
 8009894:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800989c:	b29b      	uxth	r3, r3
 800989e:	3b01      	subs	r3, #1
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1c8      	bne.n	8009846 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	2200      	movs	r2, #0
 80098bc:	2140      	movs	r1, #64	; 0x40
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 fd98 	bl	800a3f4 <UART_WaitOnFlagUntilTimeout>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d004      	beq.n	80098d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2220      	movs	r2, #32
 80098ce:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e005      	b.n	80098e0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2220      	movs	r2, #32
 80098d8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	e000      	b.n	80098e0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80098de:	2302      	movs	r3, #2
  }
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3720      	adds	r7, #32
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b0ba      	sub	sp, #232	; 0xe8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	69db      	ldr	r3, [r3, #28]
 80098f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800990e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009912:	f640 030f 	movw	r3, #2063	; 0x80f
 8009916:	4013      	ands	r3, r2
 8009918:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800991c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009920:	2b00      	cmp	r3, #0
 8009922:	d115      	bne.n	8009950 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009928:	f003 0320 	and.w	r3, r3, #32
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00f      	beq.n	8009950 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009934:	f003 0320 	and.w	r3, r3, #32
 8009938:	2b00      	cmp	r3, #0
 800993a:	d009      	beq.n	8009950 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 82ab 	beq.w	8009e9c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	4798      	blx	r3
      }
      return;
 800994e:	e2a5      	b.n	8009e9c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009950:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 8117 	beq.w	8009b88 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800995a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	2b00      	cmp	r3, #0
 8009964:	d106      	bne.n	8009974 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009966:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800996a:	4b85      	ldr	r3, [pc, #532]	; (8009b80 <HAL_UART_IRQHandler+0x298>)
 800996c:	4013      	ands	r3, r2
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 810a 	beq.w	8009b88 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	2b00      	cmp	r3, #0
 800997e:	d011      	beq.n	80099a4 <HAL_UART_IRQHandler+0xbc>
 8009980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00b      	beq.n	80099a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2201      	movs	r2, #1
 8009992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800999a:	f043 0201 	orr.w	r2, r3, #1
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099a8:	f003 0302 	and.w	r3, r3, #2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d011      	beq.n	80099d4 <HAL_UART_IRQHandler+0xec>
 80099b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00b      	beq.n	80099d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2202      	movs	r2, #2
 80099c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ca:	f043 0204 	orr.w	r2, r3, #4
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099d8:	f003 0304 	and.w	r3, r3, #4
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d011      	beq.n	8009a04 <HAL_UART_IRQHandler+0x11c>
 80099e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00b      	beq.n	8009a04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2204      	movs	r2, #4
 80099f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099fa:	f043 0202 	orr.w	r2, r3, #2
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a08:	f003 0308 	and.w	r3, r3, #8
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d017      	beq.n	8009a40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a14:	f003 0320 	and.w	r3, r3, #32
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d105      	bne.n	8009a28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2208      	movs	r2, #8
 8009a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a36:	f043 0208 	orr.w	r2, r3, #8
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d012      	beq.n	8009a72 <HAL_UART_IRQHandler+0x18a>
 8009a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00c      	beq.n	8009a72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a68:	f043 0220 	orr.w	r2, r3, #32
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 8211 	beq.w	8009ea0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a82:	f003 0320 	and.w	r3, r3, #32
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00d      	beq.n	8009aa6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a8e:	f003 0320 	and.w	r3, r3, #32
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d007      	beq.n	8009aa6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aba:	2b40      	cmp	r3, #64	; 0x40
 8009abc:	d005      	beq.n	8009aca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ac2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d04f      	beq.n	8009b6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fcf9 	bl	800a4c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ada:	2b40      	cmp	r3, #64	; 0x40
 8009adc:	d141      	bne.n	8009b62 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009aec:	e853 3f00 	ldrex	r3, [r3]
 8009af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3308      	adds	r3, #8
 8009b06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009b0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b1a:	e841 2300 	strex	r3, r2, [r1]
 8009b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1d9      	bne.n	8009ade <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d013      	beq.n	8009b5a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b36:	4a13      	ldr	r2, [pc, #76]	; (8009b84 <HAL_UART_IRQHandler+0x29c>)
 8009b38:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fc f9ec 	bl	8005f1c <HAL_DMA_Abort_IT>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d017      	beq.n	8009b7a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009b54:	4610      	mov	r0, r2
 8009b56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b58:	e00f      	b.n	8009b7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f9b4 	bl	8009ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b60:	e00b      	b.n	8009b7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f9b0 	bl	8009ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b68:	e007      	b.n	8009b7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f9ac 	bl	8009ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009b78:	e192      	b.n	8009ea0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b7a:	bf00      	nop
    return;
 8009b7c:	e190      	b.n	8009ea0 <HAL_UART_IRQHandler+0x5b8>
 8009b7e:	bf00      	nop
 8009b80:	04000120 	.word	0x04000120
 8009b84:	0800a58b 	.word	0x0800a58b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	f040 814b 	bne.w	8009e28 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b96:	f003 0310 	and.w	r3, r3, #16
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 8144 	beq.w	8009e28 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ba4:	f003 0310 	and.w	r3, r3, #16
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 813d 	beq.w	8009e28 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2210      	movs	r2, #16
 8009bb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc0:	2b40      	cmp	r3, #64	; 0x40
 8009bc2:	f040 80b5 	bne.w	8009d30 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009bd2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f000 8164 	beq.w	8009ea4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009be6:	429a      	cmp	r2, r3
 8009be8:	f080 815c 	bcs.w	8009ea4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	2b20      	cmp	r3, #32
 8009bfe:	f000 8086 	beq.w	8009d0e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c0e:	e853 3f00 	ldrex	r3, [r3]
 8009c12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009c30:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c34:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c3c:	e841 2300 	strex	r3, r2, [r1]
 8009c40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1da      	bne.n	8009c02 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	3308      	adds	r3, #8
 8009c52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c56:	e853 3f00 	ldrex	r3, [r3]
 8009c5a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c5e:	f023 0301 	bic.w	r3, r3, #1
 8009c62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c7c:	e841 2300 	strex	r3, r2, [r1]
 8009c80:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1e1      	bne.n	8009c4c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3308      	adds	r3, #8
 8009c8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c92:	e853 3f00 	ldrex	r3, [r3]
 8009c96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009cac:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009cae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009cb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009cb4:	e841 2300 	strex	r3, r2, [r1]
 8009cb8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1e3      	bne.n	8009c88 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cd6:	e853 3f00 	ldrex	r3, [r3]
 8009cda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cde:	f023 0310 	bic.w	r3, r3, #16
 8009ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	461a      	mov	r2, r3
 8009cec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cf2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009cf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009cf8:	e841 2300 	strex	r3, r2, [r1]
 8009cfc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1e4      	bne.n	8009cce <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fc f8ce 	bl	8005eaa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2202      	movs	r2, #2
 8009d12:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f8d7 	bl	8009edc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d2e:	e0b9      	b.n	8009ea4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 80ab 	beq.w	8009ea8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8009d52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f000 80a6 	beq.w	8009ea8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d64:	e853 3f00 	ldrex	r3, [r3]
 8009d68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8009d80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d86:	e841 2300 	strex	r3, r2, [r1]
 8009d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1e4      	bne.n	8009d5c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3308      	adds	r3, #8
 8009d98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	e853 3f00 	ldrex	r3, [r3]
 8009da0:	623b      	str	r3, [r7, #32]
   return(result);
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	f023 0301 	bic.w	r3, r3, #1
 8009da8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3308      	adds	r3, #8
 8009db2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009db6:	633a      	str	r2, [r7, #48]	; 0x30
 8009db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dbe:	e841 2300 	strex	r3, r2, [r1]
 8009dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1e3      	bne.n	8009d92 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2220      	movs	r2, #32
 8009dce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	e853 3f00 	ldrex	r3, [r3]
 8009dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f023 0310 	bic.w	r3, r3, #16
 8009df2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e00:	61fb      	str	r3, [r7, #28]
 8009e02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e04:	69b9      	ldr	r1, [r7, #24]
 8009e06:	69fa      	ldr	r2, [r7, #28]
 8009e08:	e841 2300 	strex	r3, r2, [r1]
 8009e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1e4      	bne.n	8009dde <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2202      	movs	r2, #2
 8009e18:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f85b 	bl	8009edc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e26:	e03f      	b.n	8009ea8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00e      	beq.n	8009e52 <HAL_UART_IRQHandler+0x56a>
 8009e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d008      	beq.n	8009e52 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fbdd 	bl	800a60a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e50:	e02d      	b.n	8009eae <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00e      	beq.n	8009e7c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d008      	beq.n	8009e7c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d01c      	beq.n	8009eac <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	4798      	blx	r3
    }
    return;
 8009e7a:	e017      	b.n	8009eac <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d012      	beq.n	8009eae <HAL_UART_IRQHandler+0x5c6>
 8009e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00c      	beq.n	8009eae <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fb8e 	bl	800a5b6 <UART_EndTransmit_IT>
    return;
 8009e9a:	e008      	b.n	8009eae <HAL_UART_IRQHandler+0x5c6>
      return;
 8009e9c:	bf00      	nop
 8009e9e:	e006      	b.n	8009eae <HAL_UART_IRQHandler+0x5c6>
    return;
 8009ea0:	bf00      	nop
 8009ea2:	e004      	b.n	8009eae <HAL_UART_IRQHandler+0x5c6>
      return;
 8009ea4:	bf00      	nop
 8009ea6:	e002      	b.n	8009eae <HAL_UART_IRQHandler+0x5c6>
      return;
 8009ea8:	bf00      	nop
 8009eaa:	e000      	b.n	8009eae <HAL_UART_IRQHandler+0x5c6>
    return;
 8009eac:	bf00      	nop
  }

}
 8009eae:	37e8      	adds	r7, #232	; 0xe8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b088      	sub	sp, #32
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009efc:	2300      	movs	r3, #0
 8009efe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	431a      	orrs	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	431a      	orrs	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	4b8a      	ldr	r3, [pc, #552]	; (800a148 <UART_SetConfig+0x254>)
 8009f20:	4013      	ands	r3, r2
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	6812      	ldr	r2, [r2, #0]
 8009f26:	6979      	ldr	r1, [r7, #20]
 8009f28:	430b      	orrs	r3, r1
 8009f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68da      	ldr	r2, [r3, #12]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a1b      	ldr	r3, [r3, #32]
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a78      	ldr	r2, [pc, #480]	; (800a14c <UART_SetConfig+0x258>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d120      	bne.n	8009fb2 <UART_SetConfig+0xbe>
 8009f70:	4b77      	ldr	r3, [pc, #476]	; (800a150 <UART_SetConfig+0x25c>)
 8009f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f74:	f003 0303 	and.w	r3, r3, #3
 8009f78:	2b03      	cmp	r3, #3
 8009f7a:	d817      	bhi.n	8009fac <UART_SetConfig+0xb8>
 8009f7c:	a201      	add	r2, pc, #4	; (adr r2, 8009f84 <UART_SetConfig+0x90>)
 8009f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f82:	bf00      	nop
 8009f84:	08009f95 	.word	0x08009f95
 8009f88:	08009fa1 	.word	0x08009fa1
 8009f8c:	08009fa7 	.word	0x08009fa7
 8009f90:	08009f9b 	.word	0x08009f9b
 8009f94:	2300      	movs	r3, #0
 8009f96:	77fb      	strb	r3, [r7, #31]
 8009f98:	e01d      	b.n	8009fd6 <UART_SetConfig+0xe2>
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	77fb      	strb	r3, [r7, #31]
 8009f9e:	e01a      	b.n	8009fd6 <UART_SetConfig+0xe2>
 8009fa0:	2304      	movs	r3, #4
 8009fa2:	77fb      	strb	r3, [r7, #31]
 8009fa4:	e017      	b.n	8009fd6 <UART_SetConfig+0xe2>
 8009fa6:	2308      	movs	r3, #8
 8009fa8:	77fb      	strb	r3, [r7, #31]
 8009faa:	e014      	b.n	8009fd6 <UART_SetConfig+0xe2>
 8009fac:	2310      	movs	r3, #16
 8009fae:	77fb      	strb	r3, [r7, #31]
 8009fb0:	e011      	b.n	8009fd6 <UART_SetConfig+0xe2>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a67      	ldr	r2, [pc, #412]	; (800a154 <UART_SetConfig+0x260>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d102      	bne.n	8009fc2 <UART_SetConfig+0xce>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	77fb      	strb	r3, [r7, #31]
 8009fc0:	e009      	b.n	8009fd6 <UART_SetConfig+0xe2>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a64      	ldr	r2, [pc, #400]	; (800a158 <UART_SetConfig+0x264>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d102      	bne.n	8009fd2 <UART_SetConfig+0xde>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	77fb      	strb	r3, [r7, #31]
 8009fd0:	e001      	b.n	8009fd6 <UART_SetConfig+0xe2>
 8009fd2:	2310      	movs	r3, #16
 8009fd4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fde:	d15a      	bne.n	800a096 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8009fe0:	7ffb      	ldrb	r3, [r7, #31]
 8009fe2:	2b08      	cmp	r3, #8
 8009fe4:	d827      	bhi.n	800a036 <UART_SetConfig+0x142>
 8009fe6:	a201      	add	r2, pc, #4	; (adr r2, 8009fec <UART_SetConfig+0xf8>)
 8009fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fec:	0800a011 	.word	0x0800a011
 8009ff0:	0800a019 	.word	0x0800a019
 8009ff4:	0800a021 	.word	0x0800a021
 8009ff8:	0800a037 	.word	0x0800a037
 8009ffc:	0800a027 	.word	0x0800a027
 800a000:	0800a037 	.word	0x0800a037
 800a004:	0800a037 	.word	0x0800a037
 800a008:	0800a037 	.word	0x0800a037
 800a00c:	0800a02f 	.word	0x0800a02f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a010:	f7fe fbb6 	bl	8008780 <HAL_RCC_GetPCLK1Freq>
 800a014:	61b8      	str	r0, [r7, #24]
        break;
 800a016:	e013      	b.n	800a040 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a018:	f7fe fbd4 	bl	80087c4 <HAL_RCC_GetPCLK2Freq>
 800a01c:	61b8      	str	r0, [r7, #24]
        break;
 800a01e:	e00f      	b.n	800a040 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a020:	4b4e      	ldr	r3, [pc, #312]	; (800a15c <UART_SetConfig+0x268>)
 800a022:	61bb      	str	r3, [r7, #24]
        break;
 800a024:	e00c      	b.n	800a040 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a026:	f7fe fb35 	bl	8008694 <HAL_RCC_GetSysClockFreq>
 800a02a:	61b8      	str	r0, [r7, #24]
        break;
 800a02c:	e008      	b.n	800a040 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a02e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a032:	61bb      	str	r3, [r7, #24]
        break;
 800a034:	e004      	b.n	800a040 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800a036:	2300      	movs	r3, #0
 800a038:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	77bb      	strb	r3, [r7, #30]
        break;
 800a03e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d074      	beq.n	800a130 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	005a      	lsls	r2, r3, #1
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	085b      	lsrs	r3, r3, #1
 800a050:	441a      	add	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	fbb2 f3f3 	udiv	r3, r2, r3
 800a05a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	2b0f      	cmp	r3, #15
 800a060:	d916      	bls.n	800a090 <UART_SetConfig+0x19c>
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a068:	d212      	bcs.n	800a090 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	f023 030f 	bic.w	r3, r3, #15
 800a072:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	085b      	lsrs	r3, r3, #1
 800a078:	b29b      	uxth	r3, r3
 800a07a:	f003 0307 	and.w	r3, r3, #7
 800a07e:	b29a      	uxth	r2, r3
 800a080:	89fb      	ldrh	r3, [r7, #14]
 800a082:	4313      	orrs	r3, r2
 800a084:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	89fa      	ldrh	r2, [r7, #14]
 800a08c:	60da      	str	r2, [r3, #12]
 800a08e:	e04f      	b.n	800a130 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	77bb      	strb	r3, [r7, #30]
 800a094:	e04c      	b.n	800a130 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a096:	7ffb      	ldrb	r3, [r7, #31]
 800a098:	2b08      	cmp	r3, #8
 800a09a:	d828      	bhi.n	800a0ee <UART_SetConfig+0x1fa>
 800a09c:	a201      	add	r2, pc, #4	; (adr r2, 800a0a4 <UART_SetConfig+0x1b0>)
 800a09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a2:	bf00      	nop
 800a0a4:	0800a0c9 	.word	0x0800a0c9
 800a0a8:	0800a0d1 	.word	0x0800a0d1
 800a0ac:	0800a0d9 	.word	0x0800a0d9
 800a0b0:	0800a0ef 	.word	0x0800a0ef
 800a0b4:	0800a0df 	.word	0x0800a0df
 800a0b8:	0800a0ef 	.word	0x0800a0ef
 800a0bc:	0800a0ef 	.word	0x0800a0ef
 800a0c0:	0800a0ef 	.word	0x0800a0ef
 800a0c4:	0800a0e7 	.word	0x0800a0e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0c8:	f7fe fb5a 	bl	8008780 <HAL_RCC_GetPCLK1Freq>
 800a0cc:	61b8      	str	r0, [r7, #24]
        break;
 800a0ce:	e013      	b.n	800a0f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0d0:	f7fe fb78 	bl	80087c4 <HAL_RCC_GetPCLK2Freq>
 800a0d4:	61b8      	str	r0, [r7, #24]
        break;
 800a0d6:	e00f      	b.n	800a0f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0d8:	4b20      	ldr	r3, [pc, #128]	; (800a15c <UART_SetConfig+0x268>)
 800a0da:	61bb      	str	r3, [r7, #24]
        break;
 800a0dc:	e00c      	b.n	800a0f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0de:	f7fe fad9 	bl	8008694 <HAL_RCC_GetSysClockFreq>
 800a0e2:	61b8      	str	r0, [r7, #24]
        break;
 800a0e4:	e008      	b.n	800a0f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0ea:	61bb      	str	r3, [r7, #24]
        break;
 800a0ec:	e004      	b.n	800a0f8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	77bb      	strb	r3, [r7, #30]
        break;
 800a0f6:	bf00      	nop
    }

    if (pclk != 0U)
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d018      	beq.n	800a130 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	085a      	lsrs	r2, r3, #1
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	441a      	add	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a110:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2b0f      	cmp	r3, #15
 800a116:	d909      	bls.n	800a12c <UART_SetConfig+0x238>
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a11e:	d205      	bcs.n	800a12c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	b29a      	uxth	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	60da      	str	r2, [r3, #12]
 800a12a:	e001      	b.n	800a130 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a13c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3720      	adds	r7, #32
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	efff69f3 	.word	0xefff69f3
 800a14c:	40013800 	.word	0x40013800
 800a150:	40021000 	.word	0x40021000
 800a154:	40004400 	.word	0x40004400
 800a158:	40004800 	.word	0x40004800
 800a15c:	007a1200 	.word	0x007a1200

0800a160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16c:	f003 0301 	and.w	r3, r3, #1
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00a      	beq.n	800a18a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	f003 0302 	and.w	r3, r3, #2
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00a      	beq.n	800a1ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	430a      	orrs	r2, r1
 800a1aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00a      	beq.n	800a1ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	430a      	orrs	r2, r1
 800a1cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d2:	f003 0308 	and.w	r3, r3, #8
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00a      	beq.n	800a1f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f4:	f003 0310 	and.w	r3, r3, #16
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00a      	beq.n	800a212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	430a      	orrs	r2, r1
 800a210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a216:	f003 0320 	and.w	r3, r3, #32
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00a      	beq.n	800a234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	430a      	orrs	r2, r1
 800a232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d01a      	beq.n	800a276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a25e:	d10a      	bne.n	800a276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	430a      	orrs	r2, r1
 800a274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00a      	beq.n	800a298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	430a      	orrs	r2, r1
 800a296:	605a      	str	r2, [r3, #4]
  }
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b098      	sub	sp, #96	; 0x60
 800a2a8:	af02      	add	r7, sp, #8
 800a2aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2b4:	f7fb fc12 	bl	8005adc <HAL_GetTick>
 800a2b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f003 0308 	and.w	r3, r3, #8
 800a2c4:	2b08      	cmp	r3, #8
 800a2c6:	d12e      	bne.n	800a326 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f88c 	bl	800a3f4 <UART_WaitOnFlagUntilTimeout>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d021      	beq.n	800a326 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ea:	e853 3f00 	ldrex	r3, [r3]
 800a2ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2f6:	653b      	str	r3, [r7, #80]	; 0x50
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a300:	647b      	str	r3, [r7, #68]	; 0x44
 800a302:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a304:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a308:	e841 2300 	strex	r3, r2, [r1]
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1e6      	bne.n	800a2e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2220      	movs	r2, #32
 800a318:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e062      	b.n	800a3ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0304 	and.w	r3, r3, #4
 800a330:	2b04      	cmp	r3, #4
 800a332:	d149      	bne.n	800a3c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a334:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a33c:	2200      	movs	r2, #0
 800a33e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f856 	bl	800a3f4 <UART_WaitOnFlagUntilTimeout>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d03c      	beq.n	800a3c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	e853 3f00 	ldrex	r3, [r3]
 800a35a:	623b      	str	r3, [r7, #32]
   return(result);
 800a35c:	6a3b      	ldr	r3, [r7, #32]
 800a35e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a362:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	461a      	mov	r2, r3
 800a36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a36c:	633b      	str	r3, [r7, #48]	; 0x30
 800a36e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a370:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a374:	e841 2300 	strex	r3, r2, [r1]
 800a378:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d1e6      	bne.n	800a34e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3308      	adds	r3, #8
 800a386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	e853 3f00 	ldrex	r3, [r3]
 800a38e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f023 0301 	bic.w	r3, r3, #1
 800a396:	64bb      	str	r3, [r7, #72]	; 0x48
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3308      	adds	r3, #8
 800a39e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3a0:	61fa      	str	r2, [r7, #28]
 800a3a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a4:	69b9      	ldr	r1, [r7, #24]
 800a3a6:	69fa      	ldr	r2, [r7, #28]
 800a3a8:	e841 2300 	strex	r3, r2, [r1]
 800a3ac:	617b      	str	r3, [r7, #20]
   return(result);
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1e5      	bne.n	800a380 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2220      	movs	r2, #32
 800a3b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e011      	b.n	800a3ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2220      	movs	r2, #32
 800a3cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2220      	movs	r2, #32
 800a3d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3758      	adds	r7, #88	; 0x58
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	603b      	str	r3, [r7, #0]
 800a400:	4613      	mov	r3, r2
 800a402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a404:	e049      	b.n	800a49a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40c:	d045      	beq.n	800a49a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a40e:	f7fb fb65 	bl	8005adc <HAL_GetTick>
 800a412:	4602      	mov	r2, r0
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	69ba      	ldr	r2, [r7, #24]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d302      	bcc.n	800a424 <UART_WaitOnFlagUntilTimeout+0x30>
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a424:	2303      	movs	r3, #3
 800a426:	e048      	b.n	800a4ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 0304 	and.w	r3, r3, #4
 800a432:	2b00      	cmp	r3, #0
 800a434:	d031      	beq.n	800a49a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	69db      	ldr	r3, [r3, #28]
 800a43c:	f003 0308 	and.w	r3, r3, #8
 800a440:	2b08      	cmp	r3, #8
 800a442:	d110      	bne.n	800a466 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2208      	movs	r2, #8
 800a44a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f000 f838 	bl	800a4c2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2208      	movs	r2, #8
 800a456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e029      	b.n	800a4ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	69db      	ldr	r3, [r3, #28]
 800a46c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a474:	d111      	bne.n	800a49a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a47e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f000 f81e 	bl	800a4c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2220      	movs	r2, #32
 800a48a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a496:	2303      	movs	r3, #3
 800a498:	e00f      	b.n	800a4ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	69da      	ldr	r2, [r3, #28]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	4013      	ands	r3, r2
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	bf0c      	ite	eq
 800a4aa:	2301      	moveq	r3, #1
 800a4ac:	2300      	movne	r3, #0
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	79fb      	ldrb	r3, [r7, #7]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d0a6      	beq.n	800a406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b095      	sub	sp, #84	; 0x54
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d2:	e853 3f00 	ldrex	r3, [r3]
 800a4d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4e8:	643b      	str	r3, [r7, #64]	; 0x40
 800a4ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a4ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4f0:	e841 2300 	strex	r3, r2, [r1]
 800a4f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1e6      	bne.n	800a4ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	3308      	adds	r3, #8
 800a502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a504:	6a3b      	ldr	r3, [r7, #32]
 800a506:	e853 3f00 	ldrex	r3, [r3]
 800a50a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	f023 0301 	bic.w	r3, r3, #1
 800a512:	64bb      	str	r3, [r7, #72]	; 0x48
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	3308      	adds	r3, #8
 800a51a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a51c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a51e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a524:	e841 2300 	strex	r3, r2, [r1]
 800a528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d1e5      	bne.n	800a4fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a534:	2b01      	cmp	r3, #1
 800a536:	d118      	bne.n	800a56a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	e853 3f00 	ldrex	r3, [r3]
 800a544:	60bb      	str	r3, [r7, #8]
   return(result);
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	f023 0310 	bic.w	r3, r3, #16
 800a54c:	647b      	str	r3, [r7, #68]	; 0x44
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	461a      	mov	r2, r3
 800a554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a556:	61bb      	str	r3, [r7, #24]
 800a558:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55a:	6979      	ldr	r1, [r7, #20]
 800a55c:	69ba      	ldr	r2, [r7, #24]
 800a55e:	e841 2300 	strex	r3, r2, [r1]
 800a562:	613b      	str	r3, [r7, #16]
   return(result);
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1e6      	bne.n	800a538 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2220      	movs	r2, #32
 800a56e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a57e:	bf00      	nop
 800a580:	3754      	adds	r7, #84	; 0x54
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a596:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f7ff fc8d 	bl	8009ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5ae:	bf00      	nop
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b088      	sub	sp, #32
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	e853 3f00 	ldrex	r3, [r3]
 800a5ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5d2:	61fb      	str	r3, [r7, #28]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	61bb      	str	r3, [r7, #24]
 800a5de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e0:	6979      	ldr	r1, [r7, #20]
 800a5e2:	69ba      	ldr	r2, [r7, #24]
 800a5e4:	e841 2300 	strex	r3, r2, [r1]
 800a5e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1e6      	bne.n	800a5be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2220      	movs	r2, #32
 800a5f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7ff fc59 	bl	8009eb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a602:	bf00      	nop
 800a604:	3720      	adds	r7, #32
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a612:	bf00      	nop
 800a614:	370c      	adds	r7, #12
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr

0800a61e <atoi>:
 800a61e:	220a      	movs	r2, #10
 800a620:	2100      	movs	r1, #0
 800a622:	f000 ba05 	b.w	800aa30 <strtol>
	...

0800a628 <__errno>:
 800a628:	4b01      	ldr	r3, [pc, #4]	; (800a630 <__errno+0x8>)
 800a62a:	6818      	ldr	r0, [r3, #0]
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	20000068 	.word	0x20000068

0800a634 <__libc_init_array>:
 800a634:	b570      	push	{r4, r5, r6, lr}
 800a636:	4d0d      	ldr	r5, [pc, #52]	; (800a66c <__libc_init_array+0x38>)
 800a638:	4c0d      	ldr	r4, [pc, #52]	; (800a670 <__libc_init_array+0x3c>)
 800a63a:	1b64      	subs	r4, r4, r5
 800a63c:	10a4      	asrs	r4, r4, #2
 800a63e:	2600      	movs	r6, #0
 800a640:	42a6      	cmp	r6, r4
 800a642:	d109      	bne.n	800a658 <__libc_init_array+0x24>
 800a644:	4d0b      	ldr	r5, [pc, #44]	; (800a674 <__libc_init_array+0x40>)
 800a646:	4c0c      	ldr	r4, [pc, #48]	; (800a678 <__libc_init_array+0x44>)
 800a648:	f001 fbb2 	bl	800bdb0 <_init>
 800a64c:	1b64      	subs	r4, r4, r5
 800a64e:	10a4      	asrs	r4, r4, #2
 800a650:	2600      	movs	r6, #0
 800a652:	42a6      	cmp	r6, r4
 800a654:	d105      	bne.n	800a662 <__libc_init_array+0x2e>
 800a656:	bd70      	pop	{r4, r5, r6, pc}
 800a658:	f855 3b04 	ldr.w	r3, [r5], #4
 800a65c:	4798      	blx	r3
 800a65e:	3601      	adds	r6, #1
 800a660:	e7ee      	b.n	800a640 <__libc_init_array+0xc>
 800a662:	f855 3b04 	ldr.w	r3, [r5], #4
 800a666:	4798      	blx	r3
 800a668:	3601      	adds	r6, #1
 800a66a:	e7f2      	b.n	800a652 <__libc_init_array+0x1e>
 800a66c:	0800dc48 	.word	0x0800dc48
 800a670:	0800dc48 	.word	0x0800dc48
 800a674:	0800dc48 	.word	0x0800dc48
 800a678:	0800dc4c 	.word	0x0800dc4c

0800a67c <memset>:
 800a67c:	4402      	add	r2, r0
 800a67e:	4603      	mov	r3, r0
 800a680:	4293      	cmp	r3, r2
 800a682:	d100      	bne.n	800a686 <memset+0xa>
 800a684:	4770      	bx	lr
 800a686:	f803 1b01 	strb.w	r1, [r3], #1
 800a68a:	e7f9      	b.n	800a680 <memset+0x4>

0800a68c <iprintf>:
 800a68c:	b40f      	push	{r0, r1, r2, r3}
 800a68e:	4b0a      	ldr	r3, [pc, #40]	; (800a6b8 <iprintf+0x2c>)
 800a690:	b513      	push	{r0, r1, r4, lr}
 800a692:	681c      	ldr	r4, [r3, #0]
 800a694:	b124      	cbz	r4, 800a6a0 <iprintf+0x14>
 800a696:	69a3      	ldr	r3, [r4, #24]
 800a698:	b913      	cbnz	r3, 800a6a0 <iprintf+0x14>
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 fbca 	bl	800ae34 <__sinit>
 800a6a0:	ab05      	add	r3, sp, #20
 800a6a2:	9a04      	ldr	r2, [sp, #16]
 800a6a4:	68a1      	ldr	r1, [r4, #8]
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 ff49 	bl	800b540 <_vfiprintf_r>
 800a6ae:	b002      	add	sp, #8
 800a6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b4:	b004      	add	sp, #16
 800a6b6:	4770      	bx	lr
 800a6b8:	20000068 	.word	0x20000068

0800a6bc <_puts_r>:
 800a6bc:	b570      	push	{r4, r5, r6, lr}
 800a6be:	460e      	mov	r6, r1
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	b118      	cbz	r0, 800a6cc <_puts_r+0x10>
 800a6c4:	6983      	ldr	r3, [r0, #24]
 800a6c6:	b90b      	cbnz	r3, 800a6cc <_puts_r+0x10>
 800a6c8:	f000 fbb4 	bl	800ae34 <__sinit>
 800a6cc:	69ab      	ldr	r3, [r5, #24]
 800a6ce:	68ac      	ldr	r4, [r5, #8]
 800a6d0:	b913      	cbnz	r3, 800a6d8 <_puts_r+0x1c>
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f000 fbae 	bl	800ae34 <__sinit>
 800a6d8:	4b2c      	ldr	r3, [pc, #176]	; (800a78c <_puts_r+0xd0>)
 800a6da:	429c      	cmp	r4, r3
 800a6dc:	d120      	bne.n	800a720 <_puts_r+0x64>
 800a6de:	686c      	ldr	r4, [r5, #4]
 800a6e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6e2:	07db      	lsls	r3, r3, #31
 800a6e4:	d405      	bmi.n	800a6f2 <_puts_r+0x36>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	0598      	lsls	r0, r3, #22
 800a6ea:	d402      	bmi.n	800a6f2 <_puts_r+0x36>
 800a6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ee:	f000 fc51 	bl	800af94 <__retarget_lock_acquire_recursive>
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	0719      	lsls	r1, r3, #28
 800a6f6:	d51d      	bpl.n	800a734 <_puts_r+0x78>
 800a6f8:	6923      	ldr	r3, [r4, #16]
 800a6fa:	b1db      	cbz	r3, 800a734 <_puts_r+0x78>
 800a6fc:	3e01      	subs	r6, #1
 800a6fe:	68a3      	ldr	r3, [r4, #8]
 800a700:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a704:	3b01      	subs	r3, #1
 800a706:	60a3      	str	r3, [r4, #8]
 800a708:	bb39      	cbnz	r1, 800a75a <_puts_r+0x9e>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	da38      	bge.n	800a780 <_puts_r+0xc4>
 800a70e:	4622      	mov	r2, r4
 800a710:	210a      	movs	r1, #10
 800a712:	4628      	mov	r0, r5
 800a714:	f000 f996 	bl	800aa44 <__swbuf_r>
 800a718:	3001      	adds	r0, #1
 800a71a:	d011      	beq.n	800a740 <_puts_r+0x84>
 800a71c:	250a      	movs	r5, #10
 800a71e:	e011      	b.n	800a744 <_puts_r+0x88>
 800a720:	4b1b      	ldr	r3, [pc, #108]	; (800a790 <_puts_r+0xd4>)
 800a722:	429c      	cmp	r4, r3
 800a724:	d101      	bne.n	800a72a <_puts_r+0x6e>
 800a726:	68ac      	ldr	r4, [r5, #8]
 800a728:	e7da      	b.n	800a6e0 <_puts_r+0x24>
 800a72a:	4b1a      	ldr	r3, [pc, #104]	; (800a794 <_puts_r+0xd8>)
 800a72c:	429c      	cmp	r4, r3
 800a72e:	bf08      	it	eq
 800a730:	68ec      	ldreq	r4, [r5, #12]
 800a732:	e7d5      	b.n	800a6e0 <_puts_r+0x24>
 800a734:	4621      	mov	r1, r4
 800a736:	4628      	mov	r0, r5
 800a738:	f000 f9d6 	bl	800aae8 <__swsetup_r>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	d0dd      	beq.n	800a6fc <_puts_r+0x40>
 800a740:	f04f 35ff 	mov.w	r5, #4294967295
 800a744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a746:	07da      	lsls	r2, r3, #31
 800a748:	d405      	bmi.n	800a756 <_puts_r+0x9a>
 800a74a:	89a3      	ldrh	r3, [r4, #12]
 800a74c:	059b      	lsls	r3, r3, #22
 800a74e:	d402      	bmi.n	800a756 <_puts_r+0x9a>
 800a750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a752:	f000 fc20 	bl	800af96 <__retarget_lock_release_recursive>
 800a756:	4628      	mov	r0, r5
 800a758:	bd70      	pop	{r4, r5, r6, pc}
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	da04      	bge.n	800a768 <_puts_r+0xac>
 800a75e:	69a2      	ldr	r2, [r4, #24]
 800a760:	429a      	cmp	r2, r3
 800a762:	dc06      	bgt.n	800a772 <_puts_r+0xb6>
 800a764:	290a      	cmp	r1, #10
 800a766:	d004      	beq.n	800a772 <_puts_r+0xb6>
 800a768:	6823      	ldr	r3, [r4, #0]
 800a76a:	1c5a      	adds	r2, r3, #1
 800a76c:	6022      	str	r2, [r4, #0]
 800a76e:	7019      	strb	r1, [r3, #0]
 800a770:	e7c5      	b.n	800a6fe <_puts_r+0x42>
 800a772:	4622      	mov	r2, r4
 800a774:	4628      	mov	r0, r5
 800a776:	f000 f965 	bl	800aa44 <__swbuf_r>
 800a77a:	3001      	adds	r0, #1
 800a77c:	d1bf      	bne.n	800a6fe <_puts_r+0x42>
 800a77e:	e7df      	b.n	800a740 <_puts_r+0x84>
 800a780:	6823      	ldr	r3, [r4, #0]
 800a782:	250a      	movs	r5, #10
 800a784:	1c5a      	adds	r2, r3, #1
 800a786:	6022      	str	r2, [r4, #0]
 800a788:	701d      	strb	r5, [r3, #0]
 800a78a:	e7db      	b.n	800a744 <_puts_r+0x88>
 800a78c:	0800dbd4 	.word	0x0800dbd4
 800a790:	0800dbf4 	.word	0x0800dbf4
 800a794:	0800dbb4 	.word	0x0800dbb4

0800a798 <puts>:
 800a798:	4b02      	ldr	r3, [pc, #8]	; (800a7a4 <puts+0xc>)
 800a79a:	4601      	mov	r1, r0
 800a79c:	6818      	ldr	r0, [r3, #0]
 800a79e:	f7ff bf8d 	b.w	800a6bc <_puts_r>
 800a7a2:	bf00      	nop
 800a7a4:	20000068 	.word	0x20000068

0800a7a8 <srand>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	4b10      	ldr	r3, [pc, #64]	; (800a7ec <srand+0x44>)
 800a7ac:	681d      	ldr	r5, [r3, #0]
 800a7ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	b9b3      	cbnz	r3, 800a7e2 <srand+0x3a>
 800a7b4:	2018      	movs	r0, #24
 800a7b6:	f000 fc55 	bl	800b064 <malloc>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	63a8      	str	r0, [r5, #56]	; 0x38
 800a7be:	b920      	cbnz	r0, 800a7ca <srand+0x22>
 800a7c0:	4b0b      	ldr	r3, [pc, #44]	; (800a7f0 <srand+0x48>)
 800a7c2:	480c      	ldr	r0, [pc, #48]	; (800a7f4 <srand+0x4c>)
 800a7c4:	2142      	movs	r1, #66	; 0x42
 800a7c6:	f000 f9fd 	bl	800abc4 <__assert_func>
 800a7ca:	490b      	ldr	r1, [pc, #44]	; (800a7f8 <srand+0x50>)
 800a7cc:	4b0b      	ldr	r3, [pc, #44]	; (800a7fc <srand+0x54>)
 800a7ce:	e9c0 1300 	strd	r1, r3, [r0]
 800a7d2:	4b0b      	ldr	r3, [pc, #44]	; (800a800 <srand+0x58>)
 800a7d4:	6083      	str	r3, [r0, #8]
 800a7d6:	230b      	movs	r3, #11
 800a7d8:	8183      	strh	r3, [r0, #12]
 800a7da:	2100      	movs	r1, #0
 800a7dc:	2001      	movs	r0, #1
 800a7de:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a7e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	611c      	str	r4, [r3, #16]
 800a7e8:	615a      	str	r2, [r3, #20]
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	20000068 	.word	0x20000068
 800a7f0:	0800da04 	.word	0x0800da04
 800a7f4:	0800da1b 	.word	0x0800da1b
 800a7f8:	abcd330e 	.word	0xabcd330e
 800a7fc:	e66d1234 	.word	0xe66d1234
 800a800:	0005deec 	.word	0x0005deec

0800a804 <rand>:
 800a804:	4b16      	ldr	r3, [pc, #88]	; (800a860 <rand+0x5c>)
 800a806:	b510      	push	{r4, lr}
 800a808:	681c      	ldr	r4, [r3, #0]
 800a80a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a80c:	b9b3      	cbnz	r3, 800a83c <rand+0x38>
 800a80e:	2018      	movs	r0, #24
 800a810:	f000 fc28 	bl	800b064 <malloc>
 800a814:	63a0      	str	r0, [r4, #56]	; 0x38
 800a816:	b928      	cbnz	r0, 800a824 <rand+0x20>
 800a818:	4602      	mov	r2, r0
 800a81a:	4b12      	ldr	r3, [pc, #72]	; (800a864 <rand+0x60>)
 800a81c:	4812      	ldr	r0, [pc, #72]	; (800a868 <rand+0x64>)
 800a81e:	214e      	movs	r1, #78	; 0x4e
 800a820:	f000 f9d0 	bl	800abc4 <__assert_func>
 800a824:	4a11      	ldr	r2, [pc, #68]	; (800a86c <rand+0x68>)
 800a826:	4b12      	ldr	r3, [pc, #72]	; (800a870 <rand+0x6c>)
 800a828:	e9c0 2300 	strd	r2, r3, [r0]
 800a82c:	4b11      	ldr	r3, [pc, #68]	; (800a874 <rand+0x70>)
 800a82e:	6083      	str	r3, [r0, #8]
 800a830:	230b      	movs	r3, #11
 800a832:	8183      	strh	r3, [r0, #12]
 800a834:	2201      	movs	r2, #1
 800a836:	2300      	movs	r3, #0
 800a838:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a83c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a83e:	4a0e      	ldr	r2, [pc, #56]	; (800a878 <rand+0x74>)
 800a840:	6920      	ldr	r0, [r4, #16]
 800a842:	6963      	ldr	r3, [r4, #20]
 800a844:	490d      	ldr	r1, [pc, #52]	; (800a87c <rand+0x78>)
 800a846:	4342      	muls	r2, r0
 800a848:	fb01 2203 	mla	r2, r1, r3, r2
 800a84c:	fba0 0101 	umull	r0, r1, r0, r1
 800a850:	1c43      	adds	r3, r0, #1
 800a852:	eb42 0001 	adc.w	r0, r2, r1
 800a856:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800a85a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a85e:	bd10      	pop	{r4, pc}
 800a860:	20000068 	.word	0x20000068
 800a864:	0800da04 	.word	0x0800da04
 800a868:	0800da1b 	.word	0x0800da1b
 800a86c:	abcd330e 	.word	0xabcd330e
 800a870:	e66d1234 	.word	0xe66d1234
 800a874:	0005deec 	.word	0x0005deec
 800a878:	5851f42d 	.word	0x5851f42d
 800a87c:	4c957f2d 	.word	0x4c957f2d

0800a880 <sniprintf>:
 800a880:	b40c      	push	{r2, r3}
 800a882:	b530      	push	{r4, r5, lr}
 800a884:	4b17      	ldr	r3, [pc, #92]	; (800a8e4 <sniprintf+0x64>)
 800a886:	1e0c      	subs	r4, r1, #0
 800a888:	681d      	ldr	r5, [r3, #0]
 800a88a:	b09d      	sub	sp, #116	; 0x74
 800a88c:	da08      	bge.n	800a8a0 <sniprintf+0x20>
 800a88e:	238b      	movs	r3, #139	; 0x8b
 800a890:	602b      	str	r3, [r5, #0]
 800a892:	f04f 30ff 	mov.w	r0, #4294967295
 800a896:	b01d      	add	sp, #116	; 0x74
 800a898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a89c:	b002      	add	sp, #8
 800a89e:	4770      	bx	lr
 800a8a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a8a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a8a8:	bf14      	ite	ne
 800a8aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a8ae:	4623      	moveq	r3, r4
 800a8b0:	9304      	str	r3, [sp, #16]
 800a8b2:	9307      	str	r3, [sp, #28]
 800a8b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8b8:	9002      	str	r0, [sp, #8]
 800a8ba:	9006      	str	r0, [sp, #24]
 800a8bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a8c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a8c2:	ab21      	add	r3, sp, #132	; 0x84
 800a8c4:	a902      	add	r1, sp, #8
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	9301      	str	r3, [sp, #4]
 800a8ca:	f000 fd0f 	bl	800b2ec <_svfiprintf_r>
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	bfbc      	itt	lt
 800a8d2:	238b      	movlt	r3, #139	; 0x8b
 800a8d4:	602b      	strlt	r3, [r5, #0]
 800a8d6:	2c00      	cmp	r4, #0
 800a8d8:	d0dd      	beq.n	800a896 <sniprintf+0x16>
 800a8da:	9b02      	ldr	r3, [sp, #8]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	701a      	strb	r2, [r3, #0]
 800a8e0:	e7d9      	b.n	800a896 <sniprintf+0x16>
 800a8e2:	bf00      	nop
 800a8e4:	20000068 	.word	0x20000068

0800a8e8 <strcat>:
 800a8e8:	b510      	push	{r4, lr}
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	7814      	ldrb	r4, [r2, #0]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	3201      	adds	r2, #1
 800a8f2:	2c00      	cmp	r4, #0
 800a8f4:	d1fa      	bne.n	800a8ec <strcat+0x4>
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a900:	2a00      	cmp	r2, #0
 800a902:	d1f9      	bne.n	800a8f8 <strcat+0x10>
 800a904:	bd10      	pop	{r4, pc}

0800a906 <strncpy>:
 800a906:	b510      	push	{r4, lr}
 800a908:	3901      	subs	r1, #1
 800a90a:	4603      	mov	r3, r0
 800a90c:	b132      	cbz	r2, 800a91c <strncpy+0x16>
 800a90e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a912:	f803 4b01 	strb.w	r4, [r3], #1
 800a916:	3a01      	subs	r2, #1
 800a918:	2c00      	cmp	r4, #0
 800a91a:	d1f7      	bne.n	800a90c <strncpy+0x6>
 800a91c:	441a      	add	r2, r3
 800a91e:	2100      	movs	r1, #0
 800a920:	4293      	cmp	r3, r2
 800a922:	d100      	bne.n	800a926 <strncpy+0x20>
 800a924:	bd10      	pop	{r4, pc}
 800a926:	f803 1b01 	strb.w	r1, [r3], #1
 800a92a:	e7f9      	b.n	800a920 <strncpy+0x1a>

0800a92c <_strtol_l.constprop.0>:
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a932:	d001      	beq.n	800a938 <_strtol_l.constprop.0+0xc>
 800a934:	2b24      	cmp	r3, #36	; 0x24
 800a936:	d906      	bls.n	800a946 <_strtol_l.constprop.0+0x1a>
 800a938:	f7ff fe76 	bl	800a628 <__errno>
 800a93c:	2316      	movs	r3, #22
 800a93e:	6003      	str	r3, [r0, #0]
 800a940:	2000      	movs	r0, #0
 800a942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a946:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800aa2c <_strtol_l.constprop.0+0x100>
 800a94a:	460d      	mov	r5, r1
 800a94c:	462e      	mov	r6, r5
 800a94e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a952:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a956:	f017 0708 	ands.w	r7, r7, #8
 800a95a:	d1f7      	bne.n	800a94c <_strtol_l.constprop.0+0x20>
 800a95c:	2c2d      	cmp	r4, #45	; 0x2d
 800a95e:	d132      	bne.n	800a9c6 <_strtol_l.constprop.0+0x9a>
 800a960:	782c      	ldrb	r4, [r5, #0]
 800a962:	2701      	movs	r7, #1
 800a964:	1cb5      	adds	r5, r6, #2
 800a966:	2b00      	cmp	r3, #0
 800a968:	d05b      	beq.n	800aa22 <_strtol_l.constprop.0+0xf6>
 800a96a:	2b10      	cmp	r3, #16
 800a96c:	d109      	bne.n	800a982 <_strtol_l.constprop.0+0x56>
 800a96e:	2c30      	cmp	r4, #48	; 0x30
 800a970:	d107      	bne.n	800a982 <_strtol_l.constprop.0+0x56>
 800a972:	782c      	ldrb	r4, [r5, #0]
 800a974:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a978:	2c58      	cmp	r4, #88	; 0x58
 800a97a:	d14d      	bne.n	800aa18 <_strtol_l.constprop.0+0xec>
 800a97c:	786c      	ldrb	r4, [r5, #1]
 800a97e:	2310      	movs	r3, #16
 800a980:	3502      	adds	r5, #2
 800a982:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a986:	f108 38ff 	add.w	r8, r8, #4294967295
 800a98a:	f04f 0c00 	mov.w	ip, #0
 800a98e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a992:	4666      	mov	r6, ip
 800a994:	fb03 8a19 	mls	sl, r3, r9, r8
 800a998:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a99c:	f1be 0f09 	cmp.w	lr, #9
 800a9a0:	d816      	bhi.n	800a9d0 <_strtol_l.constprop.0+0xa4>
 800a9a2:	4674      	mov	r4, lr
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	dd24      	ble.n	800a9f2 <_strtol_l.constprop.0+0xc6>
 800a9a8:	f1bc 0f00 	cmp.w	ip, #0
 800a9ac:	db1e      	blt.n	800a9ec <_strtol_l.constprop.0+0xc0>
 800a9ae:	45b1      	cmp	r9, r6
 800a9b0:	d31c      	bcc.n	800a9ec <_strtol_l.constprop.0+0xc0>
 800a9b2:	d101      	bne.n	800a9b8 <_strtol_l.constprop.0+0x8c>
 800a9b4:	45a2      	cmp	sl, r4
 800a9b6:	db19      	blt.n	800a9ec <_strtol_l.constprop.0+0xc0>
 800a9b8:	fb06 4603 	mla	r6, r6, r3, r4
 800a9bc:	f04f 0c01 	mov.w	ip, #1
 800a9c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9c4:	e7e8      	b.n	800a998 <_strtol_l.constprop.0+0x6c>
 800a9c6:	2c2b      	cmp	r4, #43	; 0x2b
 800a9c8:	bf04      	itt	eq
 800a9ca:	782c      	ldrbeq	r4, [r5, #0]
 800a9cc:	1cb5      	addeq	r5, r6, #2
 800a9ce:	e7ca      	b.n	800a966 <_strtol_l.constprop.0+0x3a>
 800a9d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a9d4:	f1be 0f19 	cmp.w	lr, #25
 800a9d8:	d801      	bhi.n	800a9de <_strtol_l.constprop.0+0xb2>
 800a9da:	3c37      	subs	r4, #55	; 0x37
 800a9dc:	e7e2      	b.n	800a9a4 <_strtol_l.constprop.0+0x78>
 800a9de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a9e2:	f1be 0f19 	cmp.w	lr, #25
 800a9e6:	d804      	bhi.n	800a9f2 <_strtol_l.constprop.0+0xc6>
 800a9e8:	3c57      	subs	r4, #87	; 0x57
 800a9ea:	e7db      	b.n	800a9a4 <_strtol_l.constprop.0+0x78>
 800a9ec:	f04f 3cff 	mov.w	ip, #4294967295
 800a9f0:	e7e6      	b.n	800a9c0 <_strtol_l.constprop.0+0x94>
 800a9f2:	f1bc 0f00 	cmp.w	ip, #0
 800a9f6:	da05      	bge.n	800aa04 <_strtol_l.constprop.0+0xd8>
 800a9f8:	2322      	movs	r3, #34	; 0x22
 800a9fa:	6003      	str	r3, [r0, #0]
 800a9fc:	4646      	mov	r6, r8
 800a9fe:	b942      	cbnz	r2, 800aa12 <_strtol_l.constprop.0+0xe6>
 800aa00:	4630      	mov	r0, r6
 800aa02:	e79e      	b.n	800a942 <_strtol_l.constprop.0+0x16>
 800aa04:	b107      	cbz	r7, 800aa08 <_strtol_l.constprop.0+0xdc>
 800aa06:	4276      	negs	r6, r6
 800aa08:	2a00      	cmp	r2, #0
 800aa0a:	d0f9      	beq.n	800aa00 <_strtol_l.constprop.0+0xd4>
 800aa0c:	f1bc 0f00 	cmp.w	ip, #0
 800aa10:	d000      	beq.n	800aa14 <_strtol_l.constprop.0+0xe8>
 800aa12:	1e69      	subs	r1, r5, #1
 800aa14:	6011      	str	r1, [r2, #0]
 800aa16:	e7f3      	b.n	800aa00 <_strtol_l.constprop.0+0xd4>
 800aa18:	2430      	movs	r4, #48	; 0x30
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1b1      	bne.n	800a982 <_strtol_l.constprop.0+0x56>
 800aa1e:	2308      	movs	r3, #8
 800aa20:	e7af      	b.n	800a982 <_strtol_l.constprop.0+0x56>
 800aa22:	2c30      	cmp	r4, #48	; 0x30
 800aa24:	d0a5      	beq.n	800a972 <_strtol_l.constprop.0+0x46>
 800aa26:	230a      	movs	r3, #10
 800aa28:	e7ab      	b.n	800a982 <_strtol_l.constprop.0+0x56>
 800aa2a:	bf00      	nop
 800aa2c:	0800dab3 	.word	0x0800dab3

0800aa30 <strtol>:
 800aa30:	4613      	mov	r3, r2
 800aa32:	460a      	mov	r2, r1
 800aa34:	4601      	mov	r1, r0
 800aa36:	4802      	ldr	r0, [pc, #8]	; (800aa40 <strtol+0x10>)
 800aa38:	6800      	ldr	r0, [r0, #0]
 800aa3a:	f7ff bf77 	b.w	800a92c <_strtol_l.constprop.0>
 800aa3e:	bf00      	nop
 800aa40:	20000068 	.word	0x20000068

0800aa44 <__swbuf_r>:
 800aa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa46:	460e      	mov	r6, r1
 800aa48:	4614      	mov	r4, r2
 800aa4a:	4605      	mov	r5, r0
 800aa4c:	b118      	cbz	r0, 800aa56 <__swbuf_r+0x12>
 800aa4e:	6983      	ldr	r3, [r0, #24]
 800aa50:	b90b      	cbnz	r3, 800aa56 <__swbuf_r+0x12>
 800aa52:	f000 f9ef 	bl	800ae34 <__sinit>
 800aa56:	4b21      	ldr	r3, [pc, #132]	; (800aadc <__swbuf_r+0x98>)
 800aa58:	429c      	cmp	r4, r3
 800aa5a:	d12b      	bne.n	800aab4 <__swbuf_r+0x70>
 800aa5c:	686c      	ldr	r4, [r5, #4]
 800aa5e:	69a3      	ldr	r3, [r4, #24]
 800aa60:	60a3      	str	r3, [r4, #8]
 800aa62:	89a3      	ldrh	r3, [r4, #12]
 800aa64:	071a      	lsls	r2, r3, #28
 800aa66:	d52f      	bpl.n	800aac8 <__swbuf_r+0x84>
 800aa68:	6923      	ldr	r3, [r4, #16]
 800aa6a:	b36b      	cbz	r3, 800aac8 <__swbuf_r+0x84>
 800aa6c:	6923      	ldr	r3, [r4, #16]
 800aa6e:	6820      	ldr	r0, [r4, #0]
 800aa70:	1ac0      	subs	r0, r0, r3
 800aa72:	6963      	ldr	r3, [r4, #20]
 800aa74:	b2f6      	uxtb	r6, r6
 800aa76:	4283      	cmp	r3, r0
 800aa78:	4637      	mov	r7, r6
 800aa7a:	dc04      	bgt.n	800aa86 <__swbuf_r+0x42>
 800aa7c:	4621      	mov	r1, r4
 800aa7e:	4628      	mov	r0, r5
 800aa80:	f000 f944 	bl	800ad0c <_fflush_r>
 800aa84:	bb30      	cbnz	r0, 800aad4 <__swbuf_r+0x90>
 800aa86:	68a3      	ldr	r3, [r4, #8]
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	60a3      	str	r3, [r4, #8]
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	1c5a      	adds	r2, r3, #1
 800aa90:	6022      	str	r2, [r4, #0]
 800aa92:	701e      	strb	r6, [r3, #0]
 800aa94:	6963      	ldr	r3, [r4, #20]
 800aa96:	3001      	adds	r0, #1
 800aa98:	4283      	cmp	r3, r0
 800aa9a:	d004      	beq.n	800aaa6 <__swbuf_r+0x62>
 800aa9c:	89a3      	ldrh	r3, [r4, #12]
 800aa9e:	07db      	lsls	r3, r3, #31
 800aaa0:	d506      	bpl.n	800aab0 <__swbuf_r+0x6c>
 800aaa2:	2e0a      	cmp	r6, #10
 800aaa4:	d104      	bne.n	800aab0 <__swbuf_r+0x6c>
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	f000 f92f 	bl	800ad0c <_fflush_r>
 800aaae:	b988      	cbnz	r0, 800aad4 <__swbuf_r+0x90>
 800aab0:	4638      	mov	r0, r7
 800aab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aab4:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <__swbuf_r+0x9c>)
 800aab6:	429c      	cmp	r4, r3
 800aab8:	d101      	bne.n	800aabe <__swbuf_r+0x7a>
 800aaba:	68ac      	ldr	r4, [r5, #8]
 800aabc:	e7cf      	b.n	800aa5e <__swbuf_r+0x1a>
 800aabe:	4b09      	ldr	r3, [pc, #36]	; (800aae4 <__swbuf_r+0xa0>)
 800aac0:	429c      	cmp	r4, r3
 800aac2:	bf08      	it	eq
 800aac4:	68ec      	ldreq	r4, [r5, #12]
 800aac6:	e7ca      	b.n	800aa5e <__swbuf_r+0x1a>
 800aac8:	4621      	mov	r1, r4
 800aaca:	4628      	mov	r0, r5
 800aacc:	f000 f80c 	bl	800aae8 <__swsetup_r>
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d0cb      	beq.n	800aa6c <__swbuf_r+0x28>
 800aad4:	f04f 37ff 	mov.w	r7, #4294967295
 800aad8:	e7ea      	b.n	800aab0 <__swbuf_r+0x6c>
 800aada:	bf00      	nop
 800aadc:	0800dbd4 	.word	0x0800dbd4
 800aae0:	0800dbf4 	.word	0x0800dbf4
 800aae4:	0800dbb4 	.word	0x0800dbb4

0800aae8 <__swsetup_r>:
 800aae8:	4b32      	ldr	r3, [pc, #200]	; (800abb4 <__swsetup_r+0xcc>)
 800aaea:	b570      	push	{r4, r5, r6, lr}
 800aaec:	681d      	ldr	r5, [r3, #0]
 800aaee:	4606      	mov	r6, r0
 800aaf0:	460c      	mov	r4, r1
 800aaf2:	b125      	cbz	r5, 800aafe <__swsetup_r+0x16>
 800aaf4:	69ab      	ldr	r3, [r5, #24]
 800aaf6:	b913      	cbnz	r3, 800aafe <__swsetup_r+0x16>
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f000 f99b 	bl	800ae34 <__sinit>
 800aafe:	4b2e      	ldr	r3, [pc, #184]	; (800abb8 <__swsetup_r+0xd0>)
 800ab00:	429c      	cmp	r4, r3
 800ab02:	d10f      	bne.n	800ab24 <__swsetup_r+0x3c>
 800ab04:	686c      	ldr	r4, [r5, #4]
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab0c:	0719      	lsls	r1, r3, #28
 800ab0e:	d42c      	bmi.n	800ab6a <__swsetup_r+0x82>
 800ab10:	06dd      	lsls	r5, r3, #27
 800ab12:	d411      	bmi.n	800ab38 <__swsetup_r+0x50>
 800ab14:	2309      	movs	r3, #9
 800ab16:	6033      	str	r3, [r6, #0]
 800ab18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab1c:	81a3      	strh	r3, [r4, #12]
 800ab1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab22:	e03e      	b.n	800aba2 <__swsetup_r+0xba>
 800ab24:	4b25      	ldr	r3, [pc, #148]	; (800abbc <__swsetup_r+0xd4>)
 800ab26:	429c      	cmp	r4, r3
 800ab28:	d101      	bne.n	800ab2e <__swsetup_r+0x46>
 800ab2a:	68ac      	ldr	r4, [r5, #8]
 800ab2c:	e7eb      	b.n	800ab06 <__swsetup_r+0x1e>
 800ab2e:	4b24      	ldr	r3, [pc, #144]	; (800abc0 <__swsetup_r+0xd8>)
 800ab30:	429c      	cmp	r4, r3
 800ab32:	bf08      	it	eq
 800ab34:	68ec      	ldreq	r4, [r5, #12]
 800ab36:	e7e6      	b.n	800ab06 <__swsetup_r+0x1e>
 800ab38:	0758      	lsls	r0, r3, #29
 800ab3a:	d512      	bpl.n	800ab62 <__swsetup_r+0x7a>
 800ab3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab3e:	b141      	cbz	r1, 800ab52 <__swsetup_r+0x6a>
 800ab40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab44:	4299      	cmp	r1, r3
 800ab46:	d002      	beq.n	800ab4e <__swsetup_r+0x66>
 800ab48:	4630      	mov	r0, r6
 800ab4a:	f000 fa93 	bl	800b074 <_free_r>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	6363      	str	r3, [r4, #52]	; 0x34
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab58:	81a3      	strh	r3, [r4, #12]
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	6063      	str	r3, [r4, #4]
 800ab5e:	6923      	ldr	r3, [r4, #16]
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	f043 0308 	orr.w	r3, r3, #8
 800ab68:	81a3      	strh	r3, [r4, #12]
 800ab6a:	6923      	ldr	r3, [r4, #16]
 800ab6c:	b94b      	cbnz	r3, 800ab82 <__swsetup_r+0x9a>
 800ab6e:	89a3      	ldrh	r3, [r4, #12]
 800ab70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab78:	d003      	beq.n	800ab82 <__swsetup_r+0x9a>
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f000 fa31 	bl	800afe4 <__smakebuf_r>
 800ab82:	89a0      	ldrh	r0, [r4, #12]
 800ab84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab88:	f010 0301 	ands.w	r3, r0, #1
 800ab8c:	d00a      	beq.n	800aba4 <__swsetup_r+0xbc>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60a3      	str	r3, [r4, #8]
 800ab92:	6963      	ldr	r3, [r4, #20]
 800ab94:	425b      	negs	r3, r3
 800ab96:	61a3      	str	r3, [r4, #24]
 800ab98:	6923      	ldr	r3, [r4, #16]
 800ab9a:	b943      	cbnz	r3, 800abae <__swsetup_r+0xc6>
 800ab9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aba0:	d1ba      	bne.n	800ab18 <__swsetup_r+0x30>
 800aba2:	bd70      	pop	{r4, r5, r6, pc}
 800aba4:	0781      	lsls	r1, r0, #30
 800aba6:	bf58      	it	pl
 800aba8:	6963      	ldrpl	r3, [r4, #20]
 800abaa:	60a3      	str	r3, [r4, #8]
 800abac:	e7f4      	b.n	800ab98 <__swsetup_r+0xb0>
 800abae:	2000      	movs	r0, #0
 800abb0:	e7f7      	b.n	800aba2 <__swsetup_r+0xba>
 800abb2:	bf00      	nop
 800abb4:	20000068 	.word	0x20000068
 800abb8:	0800dbd4 	.word	0x0800dbd4
 800abbc:	0800dbf4 	.word	0x0800dbf4
 800abc0:	0800dbb4 	.word	0x0800dbb4

0800abc4 <__assert_func>:
 800abc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abc6:	4614      	mov	r4, r2
 800abc8:	461a      	mov	r2, r3
 800abca:	4b09      	ldr	r3, [pc, #36]	; (800abf0 <__assert_func+0x2c>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4605      	mov	r5, r0
 800abd0:	68d8      	ldr	r0, [r3, #12]
 800abd2:	b14c      	cbz	r4, 800abe8 <__assert_func+0x24>
 800abd4:	4b07      	ldr	r3, [pc, #28]	; (800abf4 <__assert_func+0x30>)
 800abd6:	9100      	str	r1, [sp, #0]
 800abd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abdc:	4906      	ldr	r1, [pc, #24]	; (800abf8 <__assert_func+0x34>)
 800abde:	462b      	mov	r3, r5
 800abe0:	f000 f9a6 	bl	800af30 <fiprintf>
 800abe4:	f000 ffd6 	bl	800bb94 <abort>
 800abe8:	4b04      	ldr	r3, [pc, #16]	; (800abfc <__assert_func+0x38>)
 800abea:	461c      	mov	r4, r3
 800abec:	e7f3      	b.n	800abd6 <__assert_func+0x12>
 800abee:	bf00      	nop
 800abf0:	20000068 	.word	0x20000068
 800abf4:	0800da76 	.word	0x0800da76
 800abf8:	0800da83 	.word	0x0800da83
 800abfc:	0800dab1 	.word	0x0800dab1

0800ac00 <__sflush_r>:
 800ac00:	898a      	ldrh	r2, [r1, #12]
 800ac02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac06:	4605      	mov	r5, r0
 800ac08:	0710      	lsls	r0, r2, #28
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	d458      	bmi.n	800acc0 <__sflush_r+0xc0>
 800ac0e:	684b      	ldr	r3, [r1, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	dc05      	bgt.n	800ac20 <__sflush_r+0x20>
 800ac14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	dc02      	bgt.n	800ac20 <__sflush_r+0x20>
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac22:	2e00      	cmp	r6, #0
 800ac24:	d0f9      	beq.n	800ac1a <__sflush_r+0x1a>
 800ac26:	2300      	movs	r3, #0
 800ac28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac2c:	682f      	ldr	r7, [r5, #0]
 800ac2e:	602b      	str	r3, [r5, #0]
 800ac30:	d032      	beq.n	800ac98 <__sflush_r+0x98>
 800ac32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	075a      	lsls	r2, r3, #29
 800ac38:	d505      	bpl.n	800ac46 <__sflush_r+0x46>
 800ac3a:	6863      	ldr	r3, [r4, #4]
 800ac3c:	1ac0      	subs	r0, r0, r3
 800ac3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac40:	b10b      	cbz	r3, 800ac46 <__sflush_r+0x46>
 800ac42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac44:	1ac0      	subs	r0, r0, r3
 800ac46:	2300      	movs	r3, #0
 800ac48:	4602      	mov	r2, r0
 800ac4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac4c:	6a21      	ldr	r1, [r4, #32]
 800ac4e:	4628      	mov	r0, r5
 800ac50:	47b0      	blx	r6
 800ac52:	1c43      	adds	r3, r0, #1
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	d106      	bne.n	800ac66 <__sflush_r+0x66>
 800ac58:	6829      	ldr	r1, [r5, #0]
 800ac5a:	291d      	cmp	r1, #29
 800ac5c:	d82c      	bhi.n	800acb8 <__sflush_r+0xb8>
 800ac5e:	4a2a      	ldr	r2, [pc, #168]	; (800ad08 <__sflush_r+0x108>)
 800ac60:	40ca      	lsrs	r2, r1
 800ac62:	07d6      	lsls	r6, r2, #31
 800ac64:	d528      	bpl.n	800acb8 <__sflush_r+0xb8>
 800ac66:	2200      	movs	r2, #0
 800ac68:	6062      	str	r2, [r4, #4]
 800ac6a:	04d9      	lsls	r1, r3, #19
 800ac6c:	6922      	ldr	r2, [r4, #16]
 800ac6e:	6022      	str	r2, [r4, #0]
 800ac70:	d504      	bpl.n	800ac7c <__sflush_r+0x7c>
 800ac72:	1c42      	adds	r2, r0, #1
 800ac74:	d101      	bne.n	800ac7a <__sflush_r+0x7a>
 800ac76:	682b      	ldr	r3, [r5, #0]
 800ac78:	b903      	cbnz	r3, 800ac7c <__sflush_r+0x7c>
 800ac7a:	6560      	str	r0, [r4, #84]	; 0x54
 800ac7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac7e:	602f      	str	r7, [r5, #0]
 800ac80:	2900      	cmp	r1, #0
 800ac82:	d0ca      	beq.n	800ac1a <__sflush_r+0x1a>
 800ac84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac88:	4299      	cmp	r1, r3
 800ac8a:	d002      	beq.n	800ac92 <__sflush_r+0x92>
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	f000 f9f1 	bl	800b074 <_free_r>
 800ac92:	2000      	movs	r0, #0
 800ac94:	6360      	str	r0, [r4, #52]	; 0x34
 800ac96:	e7c1      	b.n	800ac1c <__sflush_r+0x1c>
 800ac98:	6a21      	ldr	r1, [r4, #32]
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	47b0      	blx	r6
 800aca0:	1c41      	adds	r1, r0, #1
 800aca2:	d1c7      	bne.n	800ac34 <__sflush_r+0x34>
 800aca4:	682b      	ldr	r3, [r5, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d0c4      	beq.n	800ac34 <__sflush_r+0x34>
 800acaa:	2b1d      	cmp	r3, #29
 800acac:	d001      	beq.n	800acb2 <__sflush_r+0xb2>
 800acae:	2b16      	cmp	r3, #22
 800acb0:	d101      	bne.n	800acb6 <__sflush_r+0xb6>
 800acb2:	602f      	str	r7, [r5, #0]
 800acb4:	e7b1      	b.n	800ac1a <__sflush_r+0x1a>
 800acb6:	89a3      	ldrh	r3, [r4, #12]
 800acb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acbc:	81a3      	strh	r3, [r4, #12]
 800acbe:	e7ad      	b.n	800ac1c <__sflush_r+0x1c>
 800acc0:	690f      	ldr	r7, [r1, #16]
 800acc2:	2f00      	cmp	r7, #0
 800acc4:	d0a9      	beq.n	800ac1a <__sflush_r+0x1a>
 800acc6:	0793      	lsls	r3, r2, #30
 800acc8:	680e      	ldr	r6, [r1, #0]
 800acca:	bf08      	it	eq
 800accc:	694b      	ldreq	r3, [r1, #20]
 800acce:	600f      	str	r7, [r1, #0]
 800acd0:	bf18      	it	ne
 800acd2:	2300      	movne	r3, #0
 800acd4:	eba6 0807 	sub.w	r8, r6, r7
 800acd8:	608b      	str	r3, [r1, #8]
 800acda:	f1b8 0f00 	cmp.w	r8, #0
 800acde:	dd9c      	ble.n	800ac1a <__sflush_r+0x1a>
 800ace0:	6a21      	ldr	r1, [r4, #32]
 800ace2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ace4:	4643      	mov	r3, r8
 800ace6:	463a      	mov	r2, r7
 800ace8:	4628      	mov	r0, r5
 800acea:	47b0      	blx	r6
 800acec:	2800      	cmp	r0, #0
 800acee:	dc06      	bgt.n	800acfe <__sflush_r+0xfe>
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acf6:	81a3      	strh	r3, [r4, #12]
 800acf8:	f04f 30ff 	mov.w	r0, #4294967295
 800acfc:	e78e      	b.n	800ac1c <__sflush_r+0x1c>
 800acfe:	4407      	add	r7, r0
 800ad00:	eba8 0800 	sub.w	r8, r8, r0
 800ad04:	e7e9      	b.n	800acda <__sflush_r+0xda>
 800ad06:	bf00      	nop
 800ad08:	20400001 	.word	0x20400001

0800ad0c <_fflush_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	690b      	ldr	r3, [r1, #16]
 800ad10:	4605      	mov	r5, r0
 800ad12:	460c      	mov	r4, r1
 800ad14:	b913      	cbnz	r3, 800ad1c <_fflush_r+0x10>
 800ad16:	2500      	movs	r5, #0
 800ad18:	4628      	mov	r0, r5
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	b118      	cbz	r0, 800ad26 <_fflush_r+0x1a>
 800ad1e:	6983      	ldr	r3, [r0, #24]
 800ad20:	b90b      	cbnz	r3, 800ad26 <_fflush_r+0x1a>
 800ad22:	f000 f887 	bl	800ae34 <__sinit>
 800ad26:	4b14      	ldr	r3, [pc, #80]	; (800ad78 <_fflush_r+0x6c>)
 800ad28:	429c      	cmp	r4, r3
 800ad2a:	d11b      	bne.n	800ad64 <_fflush_r+0x58>
 800ad2c:	686c      	ldr	r4, [r5, #4]
 800ad2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d0ef      	beq.n	800ad16 <_fflush_r+0xa>
 800ad36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad38:	07d0      	lsls	r0, r2, #31
 800ad3a:	d404      	bmi.n	800ad46 <_fflush_r+0x3a>
 800ad3c:	0599      	lsls	r1, r3, #22
 800ad3e:	d402      	bmi.n	800ad46 <_fflush_r+0x3a>
 800ad40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad42:	f000 f927 	bl	800af94 <__retarget_lock_acquire_recursive>
 800ad46:	4628      	mov	r0, r5
 800ad48:	4621      	mov	r1, r4
 800ad4a:	f7ff ff59 	bl	800ac00 <__sflush_r>
 800ad4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad50:	07da      	lsls	r2, r3, #31
 800ad52:	4605      	mov	r5, r0
 800ad54:	d4e0      	bmi.n	800ad18 <_fflush_r+0xc>
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	059b      	lsls	r3, r3, #22
 800ad5a:	d4dd      	bmi.n	800ad18 <_fflush_r+0xc>
 800ad5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad5e:	f000 f91a 	bl	800af96 <__retarget_lock_release_recursive>
 800ad62:	e7d9      	b.n	800ad18 <_fflush_r+0xc>
 800ad64:	4b05      	ldr	r3, [pc, #20]	; (800ad7c <_fflush_r+0x70>)
 800ad66:	429c      	cmp	r4, r3
 800ad68:	d101      	bne.n	800ad6e <_fflush_r+0x62>
 800ad6a:	68ac      	ldr	r4, [r5, #8]
 800ad6c:	e7df      	b.n	800ad2e <_fflush_r+0x22>
 800ad6e:	4b04      	ldr	r3, [pc, #16]	; (800ad80 <_fflush_r+0x74>)
 800ad70:	429c      	cmp	r4, r3
 800ad72:	bf08      	it	eq
 800ad74:	68ec      	ldreq	r4, [r5, #12]
 800ad76:	e7da      	b.n	800ad2e <_fflush_r+0x22>
 800ad78:	0800dbd4 	.word	0x0800dbd4
 800ad7c:	0800dbf4 	.word	0x0800dbf4
 800ad80:	0800dbb4 	.word	0x0800dbb4

0800ad84 <std>:
 800ad84:	2300      	movs	r3, #0
 800ad86:	b510      	push	{r4, lr}
 800ad88:	4604      	mov	r4, r0
 800ad8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ad8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad92:	6083      	str	r3, [r0, #8]
 800ad94:	8181      	strh	r1, [r0, #12]
 800ad96:	6643      	str	r3, [r0, #100]	; 0x64
 800ad98:	81c2      	strh	r2, [r0, #14]
 800ad9a:	6183      	str	r3, [r0, #24]
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	2208      	movs	r2, #8
 800ada0:	305c      	adds	r0, #92	; 0x5c
 800ada2:	f7ff fc6b 	bl	800a67c <memset>
 800ada6:	4b05      	ldr	r3, [pc, #20]	; (800adbc <std+0x38>)
 800ada8:	6263      	str	r3, [r4, #36]	; 0x24
 800adaa:	4b05      	ldr	r3, [pc, #20]	; (800adc0 <std+0x3c>)
 800adac:	62a3      	str	r3, [r4, #40]	; 0x28
 800adae:	4b05      	ldr	r3, [pc, #20]	; (800adc4 <std+0x40>)
 800adb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800adb2:	4b05      	ldr	r3, [pc, #20]	; (800adc8 <std+0x44>)
 800adb4:	6224      	str	r4, [r4, #32]
 800adb6:	6323      	str	r3, [r4, #48]	; 0x30
 800adb8:	bd10      	pop	{r4, pc}
 800adba:	bf00      	nop
 800adbc:	0800bae9 	.word	0x0800bae9
 800adc0:	0800bb0b 	.word	0x0800bb0b
 800adc4:	0800bb43 	.word	0x0800bb43
 800adc8:	0800bb67 	.word	0x0800bb67

0800adcc <_cleanup_r>:
 800adcc:	4901      	ldr	r1, [pc, #4]	; (800add4 <_cleanup_r+0x8>)
 800adce:	f000 b8c1 	b.w	800af54 <_fwalk_reent>
 800add2:	bf00      	nop
 800add4:	0800ad0d 	.word	0x0800ad0d

0800add8 <__sfmoreglue>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	2268      	movs	r2, #104	; 0x68
 800addc:	1e4d      	subs	r5, r1, #1
 800adde:	4355      	muls	r5, r2
 800ade0:	460e      	mov	r6, r1
 800ade2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ade6:	f000 f9b1 	bl	800b14c <_malloc_r>
 800adea:	4604      	mov	r4, r0
 800adec:	b140      	cbz	r0, 800ae00 <__sfmoreglue+0x28>
 800adee:	2100      	movs	r1, #0
 800adf0:	e9c0 1600 	strd	r1, r6, [r0]
 800adf4:	300c      	adds	r0, #12
 800adf6:	60a0      	str	r0, [r4, #8]
 800adf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800adfc:	f7ff fc3e 	bl	800a67c <memset>
 800ae00:	4620      	mov	r0, r4
 800ae02:	bd70      	pop	{r4, r5, r6, pc}

0800ae04 <__sfp_lock_acquire>:
 800ae04:	4801      	ldr	r0, [pc, #4]	; (800ae0c <__sfp_lock_acquire+0x8>)
 800ae06:	f000 b8c5 	b.w	800af94 <__retarget_lock_acquire_recursive>
 800ae0a:	bf00      	nop
 800ae0c:	200029f5 	.word	0x200029f5

0800ae10 <__sfp_lock_release>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__sfp_lock_release+0x8>)
 800ae12:	f000 b8c0 	b.w	800af96 <__retarget_lock_release_recursive>
 800ae16:	bf00      	nop
 800ae18:	200029f5 	.word	0x200029f5

0800ae1c <__sinit_lock_acquire>:
 800ae1c:	4801      	ldr	r0, [pc, #4]	; (800ae24 <__sinit_lock_acquire+0x8>)
 800ae1e:	f000 b8b9 	b.w	800af94 <__retarget_lock_acquire_recursive>
 800ae22:	bf00      	nop
 800ae24:	200029f6 	.word	0x200029f6

0800ae28 <__sinit_lock_release>:
 800ae28:	4801      	ldr	r0, [pc, #4]	; (800ae30 <__sinit_lock_release+0x8>)
 800ae2a:	f000 b8b4 	b.w	800af96 <__retarget_lock_release_recursive>
 800ae2e:	bf00      	nop
 800ae30:	200029f6 	.word	0x200029f6

0800ae34 <__sinit>:
 800ae34:	b510      	push	{r4, lr}
 800ae36:	4604      	mov	r4, r0
 800ae38:	f7ff fff0 	bl	800ae1c <__sinit_lock_acquire>
 800ae3c:	69a3      	ldr	r3, [r4, #24]
 800ae3e:	b11b      	cbz	r3, 800ae48 <__sinit+0x14>
 800ae40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae44:	f7ff bff0 	b.w	800ae28 <__sinit_lock_release>
 800ae48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae4c:	6523      	str	r3, [r4, #80]	; 0x50
 800ae4e:	4b13      	ldr	r3, [pc, #76]	; (800ae9c <__sinit+0x68>)
 800ae50:	4a13      	ldr	r2, [pc, #76]	; (800aea0 <__sinit+0x6c>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae56:	42a3      	cmp	r3, r4
 800ae58:	bf04      	itt	eq
 800ae5a:	2301      	moveq	r3, #1
 800ae5c:	61a3      	streq	r3, [r4, #24]
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 f820 	bl	800aea4 <__sfp>
 800ae64:	6060      	str	r0, [r4, #4]
 800ae66:	4620      	mov	r0, r4
 800ae68:	f000 f81c 	bl	800aea4 <__sfp>
 800ae6c:	60a0      	str	r0, [r4, #8]
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f000 f818 	bl	800aea4 <__sfp>
 800ae74:	2200      	movs	r2, #0
 800ae76:	60e0      	str	r0, [r4, #12]
 800ae78:	2104      	movs	r1, #4
 800ae7a:	6860      	ldr	r0, [r4, #4]
 800ae7c:	f7ff ff82 	bl	800ad84 <std>
 800ae80:	68a0      	ldr	r0, [r4, #8]
 800ae82:	2201      	movs	r2, #1
 800ae84:	2109      	movs	r1, #9
 800ae86:	f7ff ff7d 	bl	800ad84 <std>
 800ae8a:	68e0      	ldr	r0, [r4, #12]
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	2112      	movs	r1, #18
 800ae90:	f7ff ff78 	bl	800ad84 <std>
 800ae94:	2301      	movs	r3, #1
 800ae96:	61a3      	str	r3, [r4, #24]
 800ae98:	e7d2      	b.n	800ae40 <__sinit+0xc>
 800ae9a:	bf00      	nop
 800ae9c:	0800da00 	.word	0x0800da00
 800aea0:	0800adcd 	.word	0x0800adcd

0800aea4 <__sfp>:
 800aea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea6:	4607      	mov	r7, r0
 800aea8:	f7ff ffac 	bl	800ae04 <__sfp_lock_acquire>
 800aeac:	4b1e      	ldr	r3, [pc, #120]	; (800af28 <__sfp+0x84>)
 800aeae:	681e      	ldr	r6, [r3, #0]
 800aeb0:	69b3      	ldr	r3, [r6, #24]
 800aeb2:	b913      	cbnz	r3, 800aeba <__sfp+0x16>
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	f7ff ffbd 	bl	800ae34 <__sinit>
 800aeba:	3648      	adds	r6, #72	; 0x48
 800aebc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	d503      	bpl.n	800aecc <__sfp+0x28>
 800aec4:	6833      	ldr	r3, [r6, #0]
 800aec6:	b30b      	cbz	r3, 800af0c <__sfp+0x68>
 800aec8:	6836      	ldr	r6, [r6, #0]
 800aeca:	e7f7      	b.n	800aebc <__sfp+0x18>
 800aecc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aed0:	b9d5      	cbnz	r5, 800af08 <__sfp+0x64>
 800aed2:	4b16      	ldr	r3, [pc, #88]	; (800af2c <__sfp+0x88>)
 800aed4:	60e3      	str	r3, [r4, #12]
 800aed6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aeda:	6665      	str	r5, [r4, #100]	; 0x64
 800aedc:	f000 f859 	bl	800af92 <__retarget_lock_init_recursive>
 800aee0:	f7ff ff96 	bl	800ae10 <__sfp_lock_release>
 800aee4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aee8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aeec:	6025      	str	r5, [r4, #0]
 800aeee:	61a5      	str	r5, [r4, #24]
 800aef0:	2208      	movs	r2, #8
 800aef2:	4629      	mov	r1, r5
 800aef4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aef8:	f7ff fbc0 	bl	800a67c <memset>
 800aefc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af04:	4620      	mov	r0, r4
 800af06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af08:	3468      	adds	r4, #104	; 0x68
 800af0a:	e7d9      	b.n	800aec0 <__sfp+0x1c>
 800af0c:	2104      	movs	r1, #4
 800af0e:	4638      	mov	r0, r7
 800af10:	f7ff ff62 	bl	800add8 <__sfmoreglue>
 800af14:	4604      	mov	r4, r0
 800af16:	6030      	str	r0, [r6, #0]
 800af18:	2800      	cmp	r0, #0
 800af1a:	d1d5      	bne.n	800aec8 <__sfp+0x24>
 800af1c:	f7ff ff78 	bl	800ae10 <__sfp_lock_release>
 800af20:	230c      	movs	r3, #12
 800af22:	603b      	str	r3, [r7, #0]
 800af24:	e7ee      	b.n	800af04 <__sfp+0x60>
 800af26:	bf00      	nop
 800af28:	0800da00 	.word	0x0800da00
 800af2c:	ffff0001 	.word	0xffff0001

0800af30 <fiprintf>:
 800af30:	b40e      	push	{r1, r2, r3}
 800af32:	b503      	push	{r0, r1, lr}
 800af34:	4601      	mov	r1, r0
 800af36:	ab03      	add	r3, sp, #12
 800af38:	4805      	ldr	r0, [pc, #20]	; (800af50 <fiprintf+0x20>)
 800af3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af3e:	6800      	ldr	r0, [r0, #0]
 800af40:	9301      	str	r3, [sp, #4]
 800af42:	f000 fafd 	bl	800b540 <_vfiprintf_r>
 800af46:	b002      	add	sp, #8
 800af48:	f85d eb04 	ldr.w	lr, [sp], #4
 800af4c:	b003      	add	sp, #12
 800af4e:	4770      	bx	lr
 800af50:	20000068 	.word	0x20000068

0800af54 <_fwalk_reent>:
 800af54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af58:	4606      	mov	r6, r0
 800af5a:	4688      	mov	r8, r1
 800af5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af60:	2700      	movs	r7, #0
 800af62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af66:	f1b9 0901 	subs.w	r9, r9, #1
 800af6a:	d505      	bpl.n	800af78 <_fwalk_reent+0x24>
 800af6c:	6824      	ldr	r4, [r4, #0]
 800af6e:	2c00      	cmp	r4, #0
 800af70:	d1f7      	bne.n	800af62 <_fwalk_reent+0xe>
 800af72:	4638      	mov	r0, r7
 800af74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af78:	89ab      	ldrh	r3, [r5, #12]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d907      	bls.n	800af8e <_fwalk_reent+0x3a>
 800af7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af82:	3301      	adds	r3, #1
 800af84:	d003      	beq.n	800af8e <_fwalk_reent+0x3a>
 800af86:	4629      	mov	r1, r5
 800af88:	4630      	mov	r0, r6
 800af8a:	47c0      	blx	r8
 800af8c:	4307      	orrs	r7, r0
 800af8e:	3568      	adds	r5, #104	; 0x68
 800af90:	e7e9      	b.n	800af66 <_fwalk_reent+0x12>

0800af92 <__retarget_lock_init_recursive>:
 800af92:	4770      	bx	lr

0800af94 <__retarget_lock_acquire_recursive>:
 800af94:	4770      	bx	lr

0800af96 <__retarget_lock_release_recursive>:
 800af96:	4770      	bx	lr

0800af98 <__swhatbuf_r>:
 800af98:	b570      	push	{r4, r5, r6, lr}
 800af9a:	460e      	mov	r6, r1
 800af9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa0:	2900      	cmp	r1, #0
 800afa2:	b096      	sub	sp, #88	; 0x58
 800afa4:	4614      	mov	r4, r2
 800afa6:	461d      	mov	r5, r3
 800afa8:	da08      	bge.n	800afbc <__swhatbuf_r+0x24>
 800afaa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	602a      	str	r2, [r5, #0]
 800afb2:	061a      	lsls	r2, r3, #24
 800afb4:	d410      	bmi.n	800afd8 <__swhatbuf_r+0x40>
 800afb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afba:	e00e      	b.n	800afda <__swhatbuf_r+0x42>
 800afbc:	466a      	mov	r2, sp
 800afbe:	f000 fe01 	bl	800bbc4 <_fstat_r>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	dbf1      	blt.n	800afaa <__swhatbuf_r+0x12>
 800afc6:	9a01      	ldr	r2, [sp, #4]
 800afc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800afcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afd0:	425a      	negs	r2, r3
 800afd2:	415a      	adcs	r2, r3
 800afd4:	602a      	str	r2, [r5, #0]
 800afd6:	e7ee      	b.n	800afb6 <__swhatbuf_r+0x1e>
 800afd8:	2340      	movs	r3, #64	; 0x40
 800afda:	2000      	movs	r0, #0
 800afdc:	6023      	str	r3, [r4, #0]
 800afde:	b016      	add	sp, #88	; 0x58
 800afe0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800afe4 <__smakebuf_r>:
 800afe4:	898b      	ldrh	r3, [r1, #12]
 800afe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afe8:	079d      	lsls	r5, r3, #30
 800afea:	4606      	mov	r6, r0
 800afec:	460c      	mov	r4, r1
 800afee:	d507      	bpl.n	800b000 <__smakebuf_r+0x1c>
 800aff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	6123      	str	r3, [r4, #16]
 800aff8:	2301      	movs	r3, #1
 800affa:	6163      	str	r3, [r4, #20]
 800affc:	b002      	add	sp, #8
 800affe:	bd70      	pop	{r4, r5, r6, pc}
 800b000:	ab01      	add	r3, sp, #4
 800b002:	466a      	mov	r2, sp
 800b004:	f7ff ffc8 	bl	800af98 <__swhatbuf_r>
 800b008:	9900      	ldr	r1, [sp, #0]
 800b00a:	4605      	mov	r5, r0
 800b00c:	4630      	mov	r0, r6
 800b00e:	f000 f89d 	bl	800b14c <_malloc_r>
 800b012:	b948      	cbnz	r0, 800b028 <__smakebuf_r+0x44>
 800b014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b018:	059a      	lsls	r2, r3, #22
 800b01a:	d4ef      	bmi.n	800affc <__smakebuf_r+0x18>
 800b01c:	f023 0303 	bic.w	r3, r3, #3
 800b020:	f043 0302 	orr.w	r3, r3, #2
 800b024:	81a3      	strh	r3, [r4, #12]
 800b026:	e7e3      	b.n	800aff0 <__smakebuf_r+0xc>
 800b028:	4b0d      	ldr	r3, [pc, #52]	; (800b060 <__smakebuf_r+0x7c>)
 800b02a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	6020      	str	r0, [r4, #0]
 800b030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b034:	81a3      	strh	r3, [r4, #12]
 800b036:	9b00      	ldr	r3, [sp, #0]
 800b038:	6163      	str	r3, [r4, #20]
 800b03a:	9b01      	ldr	r3, [sp, #4]
 800b03c:	6120      	str	r0, [r4, #16]
 800b03e:	b15b      	cbz	r3, 800b058 <__smakebuf_r+0x74>
 800b040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b044:	4630      	mov	r0, r6
 800b046:	f000 fdcf 	bl	800bbe8 <_isatty_r>
 800b04a:	b128      	cbz	r0, 800b058 <__smakebuf_r+0x74>
 800b04c:	89a3      	ldrh	r3, [r4, #12]
 800b04e:	f023 0303 	bic.w	r3, r3, #3
 800b052:	f043 0301 	orr.w	r3, r3, #1
 800b056:	81a3      	strh	r3, [r4, #12]
 800b058:	89a0      	ldrh	r0, [r4, #12]
 800b05a:	4305      	orrs	r5, r0
 800b05c:	81a5      	strh	r5, [r4, #12]
 800b05e:	e7cd      	b.n	800affc <__smakebuf_r+0x18>
 800b060:	0800adcd 	.word	0x0800adcd

0800b064 <malloc>:
 800b064:	4b02      	ldr	r3, [pc, #8]	; (800b070 <malloc+0xc>)
 800b066:	4601      	mov	r1, r0
 800b068:	6818      	ldr	r0, [r3, #0]
 800b06a:	f000 b86f 	b.w	800b14c <_malloc_r>
 800b06e:	bf00      	nop
 800b070:	20000068 	.word	0x20000068

0800b074 <_free_r>:
 800b074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b076:	2900      	cmp	r1, #0
 800b078:	d044      	beq.n	800b104 <_free_r+0x90>
 800b07a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b07e:	9001      	str	r0, [sp, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	f1a1 0404 	sub.w	r4, r1, #4
 800b086:	bfb8      	it	lt
 800b088:	18e4      	addlt	r4, r4, r3
 800b08a:	f000 fdf7 	bl	800bc7c <__malloc_lock>
 800b08e:	4a1e      	ldr	r2, [pc, #120]	; (800b108 <_free_r+0x94>)
 800b090:	9801      	ldr	r0, [sp, #4]
 800b092:	6813      	ldr	r3, [r2, #0]
 800b094:	b933      	cbnz	r3, 800b0a4 <_free_r+0x30>
 800b096:	6063      	str	r3, [r4, #4]
 800b098:	6014      	str	r4, [r2, #0]
 800b09a:	b003      	add	sp, #12
 800b09c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0a0:	f000 bdf2 	b.w	800bc88 <__malloc_unlock>
 800b0a4:	42a3      	cmp	r3, r4
 800b0a6:	d908      	bls.n	800b0ba <_free_r+0x46>
 800b0a8:	6825      	ldr	r5, [r4, #0]
 800b0aa:	1961      	adds	r1, r4, r5
 800b0ac:	428b      	cmp	r3, r1
 800b0ae:	bf01      	itttt	eq
 800b0b0:	6819      	ldreq	r1, [r3, #0]
 800b0b2:	685b      	ldreq	r3, [r3, #4]
 800b0b4:	1949      	addeq	r1, r1, r5
 800b0b6:	6021      	streq	r1, [r4, #0]
 800b0b8:	e7ed      	b.n	800b096 <_free_r+0x22>
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	b10b      	cbz	r3, 800b0c4 <_free_r+0x50>
 800b0c0:	42a3      	cmp	r3, r4
 800b0c2:	d9fa      	bls.n	800b0ba <_free_r+0x46>
 800b0c4:	6811      	ldr	r1, [r2, #0]
 800b0c6:	1855      	adds	r5, r2, r1
 800b0c8:	42a5      	cmp	r5, r4
 800b0ca:	d10b      	bne.n	800b0e4 <_free_r+0x70>
 800b0cc:	6824      	ldr	r4, [r4, #0]
 800b0ce:	4421      	add	r1, r4
 800b0d0:	1854      	adds	r4, r2, r1
 800b0d2:	42a3      	cmp	r3, r4
 800b0d4:	6011      	str	r1, [r2, #0]
 800b0d6:	d1e0      	bne.n	800b09a <_free_r+0x26>
 800b0d8:	681c      	ldr	r4, [r3, #0]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	6053      	str	r3, [r2, #4]
 800b0de:	4421      	add	r1, r4
 800b0e0:	6011      	str	r1, [r2, #0]
 800b0e2:	e7da      	b.n	800b09a <_free_r+0x26>
 800b0e4:	d902      	bls.n	800b0ec <_free_r+0x78>
 800b0e6:	230c      	movs	r3, #12
 800b0e8:	6003      	str	r3, [r0, #0]
 800b0ea:	e7d6      	b.n	800b09a <_free_r+0x26>
 800b0ec:	6825      	ldr	r5, [r4, #0]
 800b0ee:	1961      	adds	r1, r4, r5
 800b0f0:	428b      	cmp	r3, r1
 800b0f2:	bf04      	itt	eq
 800b0f4:	6819      	ldreq	r1, [r3, #0]
 800b0f6:	685b      	ldreq	r3, [r3, #4]
 800b0f8:	6063      	str	r3, [r4, #4]
 800b0fa:	bf04      	itt	eq
 800b0fc:	1949      	addeq	r1, r1, r5
 800b0fe:	6021      	streq	r1, [r4, #0]
 800b100:	6054      	str	r4, [r2, #4]
 800b102:	e7ca      	b.n	800b09a <_free_r+0x26>
 800b104:	b003      	add	sp, #12
 800b106:	bd30      	pop	{r4, r5, pc}
 800b108:	200029f8 	.word	0x200029f8

0800b10c <sbrk_aligned>:
 800b10c:	b570      	push	{r4, r5, r6, lr}
 800b10e:	4e0e      	ldr	r6, [pc, #56]	; (800b148 <sbrk_aligned+0x3c>)
 800b110:	460c      	mov	r4, r1
 800b112:	6831      	ldr	r1, [r6, #0]
 800b114:	4605      	mov	r5, r0
 800b116:	b911      	cbnz	r1, 800b11e <sbrk_aligned+0x12>
 800b118:	f000 fcd6 	bl	800bac8 <_sbrk_r>
 800b11c:	6030      	str	r0, [r6, #0]
 800b11e:	4621      	mov	r1, r4
 800b120:	4628      	mov	r0, r5
 800b122:	f000 fcd1 	bl	800bac8 <_sbrk_r>
 800b126:	1c43      	adds	r3, r0, #1
 800b128:	d00a      	beq.n	800b140 <sbrk_aligned+0x34>
 800b12a:	1cc4      	adds	r4, r0, #3
 800b12c:	f024 0403 	bic.w	r4, r4, #3
 800b130:	42a0      	cmp	r0, r4
 800b132:	d007      	beq.n	800b144 <sbrk_aligned+0x38>
 800b134:	1a21      	subs	r1, r4, r0
 800b136:	4628      	mov	r0, r5
 800b138:	f000 fcc6 	bl	800bac8 <_sbrk_r>
 800b13c:	3001      	adds	r0, #1
 800b13e:	d101      	bne.n	800b144 <sbrk_aligned+0x38>
 800b140:	f04f 34ff 	mov.w	r4, #4294967295
 800b144:	4620      	mov	r0, r4
 800b146:	bd70      	pop	{r4, r5, r6, pc}
 800b148:	200029fc 	.word	0x200029fc

0800b14c <_malloc_r>:
 800b14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b150:	1ccd      	adds	r5, r1, #3
 800b152:	f025 0503 	bic.w	r5, r5, #3
 800b156:	3508      	adds	r5, #8
 800b158:	2d0c      	cmp	r5, #12
 800b15a:	bf38      	it	cc
 800b15c:	250c      	movcc	r5, #12
 800b15e:	2d00      	cmp	r5, #0
 800b160:	4607      	mov	r7, r0
 800b162:	db01      	blt.n	800b168 <_malloc_r+0x1c>
 800b164:	42a9      	cmp	r1, r5
 800b166:	d905      	bls.n	800b174 <_malloc_r+0x28>
 800b168:	230c      	movs	r3, #12
 800b16a:	603b      	str	r3, [r7, #0]
 800b16c:	2600      	movs	r6, #0
 800b16e:	4630      	mov	r0, r6
 800b170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b174:	4e2e      	ldr	r6, [pc, #184]	; (800b230 <_malloc_r+0xe4>)
 800b176:	f000 fd81 	bl	800bc7c <__malloc_lock>
 800b17a:	6833      	ldr	r3, [r6, #0]
 800b17c:	461c      	mov	r4, r3
 800b17e:	bb34      	cbnz	r4, 800b1ce <_malloc_r+0x82>
 800b180:	4629      	mov	r1, r5
 800b182:	4638      	mov	r0, r7
 800b184:	f7ff ffc2 	bl	800b10c <sbrk_aligned>
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	4604      	mov	r4, r0
 800b18c:	d14d      	bne.n	800b22a <_malloc_r+0xde>
 800b18e:	6834      	ldr	r4, [r6, #0]
 800b190:	4626      	mov	r6, r4
 800b192:	2e00      	cmp	r6, #0
 800b194:	d140      	bne.n	800b218 <_malloc_r+0xcc>
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	4631      	mov	r1, r6
 800b19a:	4638      	mov	r0, r7
 800b19c:	eb04 0803 	add.w	r8, r4, r3
 800b1a0:	f000 fc92 	bl	800bac8 <_sbrk_r>
 800b1a4:	4580      	cmp	r8, r0
 800b1a6:	d13a      	bne.n	800b21e <_malloc_r+0xd2>
 800b1a8:	6821      	ldr	r1, [r4, #0]
 800b1aa:	3503      	adds	r5, #3
 800b1ac:	1a6d      	subs	r5, r5, r1
 800b1ae:	f025 0503 	bic.w	r5, r5, #3
 800b1b2:	3508      	adds	r5, #8
 800b1b4:	2d0c      	cmp	r5, #12
 800b1b6:	bf38      	it	cc
 800b1b8:	250c      	movcc	r5, #12
 800b1ba:	4629      	mov	r1, r5
 800b1bc:	4638      	mov	r0, r7
 800b1be:	f7ff ffa5 	bl	800b10c <sbrk_aligned>
 800b1c2:	3001      	adds	r0, #1
 800b1c4:	d02b      	beq.n	800b21e <_malloc_r+0xd2>
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	442b      	add	r3, r5
 800b1ca:	6023      	str	r3, [r4, #0]
 800b1cc:	e00e      	b.n	800b1ec <_malloc_r+0xa0>
 800b1ce:	6822      	ldr	r2, [r4, #0]
 800b1d0:	1b52      	subs	r2, r2, r5
 800b1d2:	d41e      	bmi.n	800b212 <_malloc_r+0xc6>
 800b1d4:	2a0b      	cmp	r2, #11
 800b1d6:	d916      	bls.n	800b206 <_malloc_r+0xba>
 800b1d8:	1961      	adds	r1, r4, r5
 800b1da:	42a3      	cmp	r3, r4
 800b1dc:	6025      	str	r5, [r4, #0]
 800b1de:	bf18      	it	ne
 800b1e0:	6059      	strne	r1, [r3, #4]
 800b1e2:	6863      	ldr	r3, [r4, #4]
 800b1e4:	bf08      	it	eq
 800b1e6:	6031      	streq	r1, [r6, #0]
 800b1e8:	5162      	str	r2, [r4, r5]
 800b1ea:	604b      	str	r3, [r1, #4]
 800b1ec:	4638      	mov	r0, r7
 800b1ee:	f104 060b 	add.w	r6, r4, #11
 800b1f2:	f000 fd49 	bl	800bc88 <__malloc_unlock>
 800b1f6:	f026 0607 	bic.w	r6, r6, #7
 800b1fa:	1d23      	adds	r3, r4, #4
 800b1fc:	1af2      	subs	r2, r6, r3
 800b1fe:	d0b6      	beq.n	800b16e <_malloc_r+0x22>
 800b200:	1b9b      	subs	r3, r3, r6
 800b202:	50a3      	str	r3, [r4, r2]
 800b204:	e7b3      	b.n	800b16e <_malloc_r+0x22>
 800b206:	6862      	ldr	r2, [r4, #4]
 800b208:	42a3      	cmp	r3, r4
 800b20a:	bf0c      	ite	eq
 800b20c:	6032      	streq	r2, [r6, #0]
 800b20e:	605a      	strne	r2, [r3, #4]
 800b210:	e7ec      	b.n	800b1ec <_malloc_r+0xa0>
 800b212:	4623      	mov	r3, r4
 800b214:	6864      	ldr	r4, [r4, #4]
 800b216:	e7b2      	b.n	800b17e <_malloc_r+0x32>
 800b218:	4634      	mov	r4, r6
 800b21a:	6876      	ldr	r6, [r6, #4]
 800b21c:	e7b9      	b.n	800b192 <_malloc_r+0x46>
 800b21e:	230c      	movs	r3, #12
 800b220:	603b      	str	r3, [r7, #0]
 800b222:	4638      	mov	r0, r7
 800b224:	f000 fd30 	bl	800bc88 <__malloc_unlock>
 800b228:	e7a1      	b.n	800b16e <_malloc_r+0x22>
 800b22a:	6025      	str	r5, [r4, #0]
 800b22c:	e7de      	b.n	800b1ec <_malloc_r+0xa0>
 800b22e:	bf00      	nop
 800b230:	200029f8 	.word	0x200029f8

0800b234 <__ssputs_r>:
 800b234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b238:	688e      	ldr	r6, [r1, #8]
 800b23a:	429e      	cmp	r6, r3
 800b23c:	4682      	mov	sl, r0
 800b23e:	460c      	mov	r4, r1
 800b240:	4690      	mov	r8, r2
 800b242:	461f      	mov	r7, r3
 800b244:	d838      	bhi.n	800b2b8 <__ssputs_r+0x84>
 800b246:	898a      	ldrh	r2, [r1, #12]
 800b248:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b24c:	d032      	beq.n	800b2b4 <__ssputs_r+0x80>
 800b24e:	6825      	ldr	r5, [r4, #0]
 800b250:	6909      	ldr	r1, [r1, #16]
 800b252:	eba5 0901 	sub.w	r9, r5, r1
 800b256:	6965      	ldr	r5, [r4, #20]
 800b258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b25c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b260:	3301      	adds	r3, #1
 800b262:	444b      	add	r3, r9
 800b264:	106d      	asrs	r5, r5, #1
 800b266:	429d      	cmp	r5, r3
 800b268:	bf38      	it	cc
 800b26a:	461d      	movcc	r5, r3
 800b26c:	0553      	lsls	r3, r2, #21
 800b26e:	d531      	bpl.n	800b2d4 <__ssputs_r+0xa0>
 800b270:	4629      	mov	r1, r5
 800b272:	f7ff ff6b 	bl	800b14c <_malloc_r>
 800b276:	4606      	mov	r6, r0
 800b278:	b950      	cbnz	r0, 800b290 <__ssputs_r+0x5c>
 800b27a:	230c      	movs	r3, #12
 800b27c:	f8ca 3000 	str.w	r3, [sl]
 800b280:	89a3      	ldrh	r3, [r4, #12]
 800b282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b286:	81a3      	strh	r3, [r4, #12]
 800b288:	f04f 30ff 	mov.w	r0, #4294967295
 800b28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b290:	6921      	ldr	r1, [r4, #16]
 800b292:	464a      	mov	r2, r9
 800b294:	f000 fcca 	bl	800bc2c <memcpy>
 800b298:	89a3      	ldrh	r3, [r4, #12]
 800b29a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b29e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2a2:	81a3      	strh	r3, [r4, #12]
 800b2a4:	6126      	str	r6, [r4, #16]
 800b2a6:	6165      	str	r5, [r4, #20]
 800b2a8:	444e      	add	r6, r9
 800b2aa:	eba5 0509 	sub.w	r5, r5, r9
 800b2ae:	6026      	str	r6, [r4, #0]
 800b2b0:	60a5      	str	r5, [r4, #8]
 800b2b2:	463e      	mov	r6, r7
 800b2b4:	42be      	cmp	r6, r7
 800b2b6:	d900      	bls.n	800b2ba <__ssputs_r+0x86>
 800b2b8:	463e      	mov	r6, r7
 800b2ba:	6820      	ldr	r0, [r4, #0]
 800b2bc:	4632      	mov	r2, r6
 800b2be:	4641      	mov	r1, r8
 800b2c0:	f000 fcc2 	bl	800bc48 <memmove>
 800b2c4:	68a3      	ldr	r3, [r4, #8]
 800b2c6:	1b9b      	subs	r3, r3, r6
 800b2c8:	60a3      	str	r3, [r4, #8]
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	4433      	add	r3, r6
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	e7db      	b.n	800b28c <__ssputs_r+0x58>
 800b2d4:	462a      	mov	r2, r5
 800b2d6:	f000 fcdd 	bl	800bc94 <_realloc_r>
 800b2da:	4606      	mov	r6, r0
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d1e1      	bne.n	800b2a4 <__ssputs_r+0x70>
 800b2e0:	6921      	ldr	r1, [r4, #16]
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	f7ff fec6 	bl	800b074 <_free_r>
 800b2e8:	e7c7      	b.n	800b27a <__ssputs_r+0x46>
	...

0800b2ec <_svfiprintf_r>:
 800b2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f0:	4698      	mov	r8, r3
 800b2f2:	898b      	ldrh	r3, [r1, #12]
 800b2f4:	061b      	lsls	r3, r3, #24
 800b2f6:	b09d      	sub	sp, #116	; 0x74
 800b2f8:	4607      	mov	r7, r0
 800b2fa:	460d      	mov	r5, r1
 800b2fc:	4614      	mov	r4, r2
 800b2fe:	d50e      	bpl.n	800b31e <_svfiprintf_r+0x32>
 800b300:	690b      	ldr	r3, [r1, #16]
 800b302:	b963      	cbnz	r3, 800b31e <_svfiprintf_r+0x32>
 800b304:	2140      	movs	r1, #64	; 0x40
 800b306:	f7ff ff21 	bl	800b14c <_malloc_r>
 800b30a:	6028      	str	r0, [r5, #0]
 800b30c:	6128      	str	r0, [r5, #16]
 800b30e:	b920      	cbnz	r0, 800b31a <_svfiprintf_r+0x2e>
 800b310:	230c      	movs	r3, #12
 800b312:	603b      	str	r3, [r7, #0]
 800b314:	f04f 30ff 	mov.w	r0, #4294967295
 800b318:	e0d1      	b.n	800b4be <_svfiprintf_r+0x1d2>
 800b31a:	2340      	movs	r3, #64	; 0x40
 800b31c:	616b      	str	r3, [r5, #20]
 800b31e:	2300      	movs	r3, #0
 800b320:	9309      	str	r3, [sp, #36]	; 0x24
 800b322:	2320      	movs	r3, #32
 800b324:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b328:	f8cd 800c 	str.w	r8, [sp, #12]
 800b32c:	2330      	movs	r3, #48	; 0x30
 800b32e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b4d8 <_svfiprintf_r+0x1ec>
 800b332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b336:	f04f 0901 	mov.w	r9, #1
 800b33a:	4623      	mov	r3, r4
 800b33c:	469a      	mov	sl, r3
 800b33e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b342:	b10a      	cbz	r2, 800b348 <_svfiprintf_r+0x5c>
 800b344:	2a25      	cmp	r2, #37	; 0x25
 800b346:	d1f9      	bne.n	800b33c <_svfiprintf_r+0x50>
 800b348:	ebba 0b04 	subs.w	fp, sl, r4
 800b34c:	d00b      	beq.n	800b366 <_svfiprintf_r+0x7a>
 800b34e:	465b      	mov	r3, fp
 800b350:	4622      	mov	r2, r4
 800b352:	4629      	mov	r1, r5
 800b354:	4638      	mov	r0, r7
 800b356:	f7ff ff6d 	bl	800b234 <__ssputs_r>
 800b35a:	3001      	adds	r0, #1
 800b35c:	f000 80aa 	beq.w	800b4b4 <_svfiprintf_r+0x1c8>
 800b360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b362:	445a      	add	r2, fp
 800b364:	9209      	str	r2, [sp, #36]	; 0x24
 800b366:	f89a 3000 	ldrb.w	r3, [sl]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f000 80a2 	beq.w	800b4b4 <_svfiprintf_r+0x1c8>
 800b370:	2300      	movs	r3, #0
 800b372:	f04f 32ff 	mov.w	r2, #4294967295
 800b376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b37a:	f10a 0a01 	add.w	sl, sl, #1
 800b37e:	9304      	str	r3, [sp, #16]
 800b380:	9307      	str	r3, [sp, #28]
 800b382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b386:	931a      	str	r3, [sp, #104]	; 0x68
 800b388:	4654      	mov	r4, sl
 800b38a:	2205      	movs	r2, #5
 800b38c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b390:	4851      	ldr	r0, [pc, #324]	; (800b4d8 <_svfiprintf_r+0x1ec>)
 800b392:	f7f4 ff25 	bl	80001e0 <memchr>
 800b396:	9a04      	ldr	r2, [sp, #16]
 800b398:	b9d8      	cbnz	r0, 800b3d2 <_svfiprintf_r+0xe6>
 800b39a:	06d0      	lsls	r0, r2, #27
 800b39c:	bf44      	itt	mi
 800b39e:	2320      	movmi	r3, #32
 800b3a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3a4:	0711      	lsls	r1, r2, #28
 800b3a6:	bf44      	itt	mi
 800b3a8:	232b      	movmi	r3, #43	; 0x2b
 800b3aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b3b4:	d015      	beq.n	800b3e2 <_svfiprintf_r+0xf6>
 800b3b6:	9a07      	ldr	r2, [sp, #28]
 800b3b8:	4654      	mov	r4, sl
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	f04f 0c0a 	mov.w	ip, #10
 800b3c0:	4621      	mov	r1, r4
 800b3c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3c6:	3b30      	subs	r3, #48	; 0x30
 800b3c8:	2b09      	cmp	r3, #9
 800b3ca:	d94e      	bls.n	800b46a <_svfiprintf_r+0x17e>
 800b3cc:	b1b0      	cbz	r0, 800b3fc <_svfiprintf_r+0x110>
 800b3ce:	9207      	str	r2, [sp, #28]
 800b3d0:	e014      	b.n	800b3fc <_svfiprintf_r+0x110>
 800b3d2:	eba0 0308 	sub.w	r3, r0, r8
 800b3d6:	fa09 f303 	lsl.w	r3, r9, r3
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	9304      	str	r3, [sp, #16]
 800b3de:	46a2      	mov	sl, r4
 800b3e0:	e7d2      	b.n	800b388 <_svfiprintf_r+0x9c>
 800b3e2:	9b03      	ldr	r3, [sp, #12]
 800b3e4:	1d19      	adds	r1, r3, #4
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	9103      	str	r1, [sp, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	bfbb      	ittet	lt
 800b3ee:	425b      	neglt	r3, r3
 800b3f0:	f042 0202 	orrlt.w	r2, r2, #2
 800b3f4:	9307      	strge	r3, [sp, #28]
 800b3f6:	9307      	strlt	r3, [sp, #28]
 800b3f8:	bfb8      	it	lt
 800b3fa:	9204      	strlt	r2, [sp, #16]
 800b3fc:	7823      	ldrb	r3, [r4, #0]
 800b3fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b400:	d10c      	bne.n	800b41c <_svfiprintf_r+0x130>
 800b402:	7863      	ldrb	r3, [r4, #1]
 800b404:	2b2a      	cmp	r3, #42	; 0x2a
 800b406:	d135      	bne.n	800b474 <_svfiprintf_r+0x188>
 800b408:	9b03      	ldr	r3, [sp, #12]
 800b40a:	1d1a      	adds	r2, r3, #4
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	9203      	str	r2, [sp, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	bfb8      	it	lt
 800b414:	f04f 33ff 	movlt.w	r3, #4294967295
 800b418:	3402      	adds	r4, #2
 800b41a:	9305      	str	r3, [sp, #20]
 800b41c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b4e8 <_svfiprintf_r+0x1fc>
 800b420:	7821      	ldrb	r1, [r4, #0]
 800b422:	2203      	movs	r2, #3
 800b424:	4650      	mov	r0, sl
 800b426:	f7f4 fedb 	bl	80001e0 <memchr>
 800b42a:	b140      	cbz	r0, 800b43e <_svfiprintf_r+0x152>
 800b42c:	2340      	movs	r3, #64	; 0x40
 800b42e:	eba0 000a 	sub.w	r0, r0, sl
 800b432:	fa03 f000 	lsl.w	r0, r3, r0
 800b436:	9b04      	ldr	r3, [sp, #16]
 800b438:	4303      	orrs	r3, r0
 800b43a:	3401      	adds	r4, #1
 800b43c:	9304      	str	r3, [sp, #16]
 800b43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b442:	4826      	ldr	r0, [pc, #152]	; (800b4dc <_svfiprintf_r+0x1f0>)
 800b444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b448:	2206      	movs	r2, #6
 800b44a:	f7f4 fec9 	bl	80001e0 <memchr>
 800b44e:	2800      	cmp	r0, #0
 800b450:	d038      	beq.n	800b4c4 <_svfiprintf_r+0x1d8>
 800b452:	4b23      	ldr	r3, [pc, #140]	; (800b4e0 <_svfiprintf_r+0x1f4>)
 800b454:	bb1b      	cbnz	r3, 800b49e <_svfiprintf_r+0x1b2>
 800b456:	9b03      	ldr	r3, [sp, #12]
 800b458:	3307      	adds	r3, #7
 800b45a:	f023 0307 	bic.w	r3, r3, #7
 800b45e:	3308      	adds	r3, #8
 800b460:	9303      	str	r3, [sp, #12]
 800b462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b464:	4433      	add	r3, r6
 800b466:	9309      	str	r3, [sp, #36]	; 0x24
 800b468:	e767      	b.n	800b33a <_svfiprintf_r+0x4e>
 800b46a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b46e:	460c      	mov	r4, r1
 800b470:	2001      	movs	r0, #1
 800b472:	e7a5      	b.n	800b3c0 <_svfiprintf_r+0xd4>
 800b474:	2300      	movs	r3, #0
 800b476:	3401      	adds	r4, #1
 800b478:	9305      	str	r3, [sp, #20]
 800b47a:	4619      	mov	r1, r3
 800b47c:	f04f 0c0a 	mov.w	ip, #10
 800b480:	4620      	mov	r0, r4
 800b482:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b486:	3a30      	subs	r2, #48	; 0x30
 800b488:	2a09      	cmp	r2, #9
 800b48a:	d903      	bls.n	800b494 <_svfiprintf_r+0x1a8>
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0c5      	beq.n	800b41c <_svfiprintf_r+0x130>
 800b490:	9105      	str	r1, [sp, #20]
 800b492:	e7c3      	b.n	800b41c <_svfiprintf_r+0x130>
 800b494:	fb0c 2101 	mla	r1, ip, r1, r2
 800b498:	4604      	mov	r4, r0
 800b49a:	2301      	movs	r3, #1
 800b49c:	e7f0      	b.n	800b480 <_svfiprintf_r+0x194>
 800b49e:	ab03      	add	r3, sp, #12
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	4b0f      	ldr	r3, [pc, #60]	; (800b4e4 <_svfiprintf_r+0x1f8>)
 800b4a6:	a904      	add	r1, sp, #16
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	f3af 8000 	nop.w
 800b4ae:	1c42      	adds	r2, r0, #1
 800b4b0:	4606      	mov	r6, r0
 800b4b2:	d1d6      	bne.n	800b462 <_svfiprintf_r+0x176>
 800b4b4:	89ab      	ldrh	r3, [r5, #12]
 800b4b6:	065b      	lsls	r3, r3, #25
 800b4b8:	f53f af2c 	bmi.w	800b314 <_svfiprintf_r+0x28>
 800b4bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4be:	b01d      	add	sp, #116	; 0x74
 800b4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c4:	ab03      	add	r3, sp, #12
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	462a      	mov	r2, r5
 800b4ca:	4b06      	ldr	r3, [pc, #24]	; (800b4e4 <_svfiprintf_r+0x1f8>)
 800b4cc:	a904      	add	r1, sp, #16
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	f000 f9d4 	bl	800b87c <_printf_i>
 800b4d4:	e7eb      	b.n	800b4ae <_svfiprintf_r+0x1c2>
 800b4d6:	bf00      	nop
 800b4d8:	0800dc14 	.word	0x0800dc14
 800b4dc:	0800dc1e 	.word	0x0800dc1e
 800b4e0:	00000000 	.word	0x00000000
 800b4e4:	0800b235 	.word	0x0800b235
 800b4e8:	0800dc1a 	.word	0x0800dc1a

0800b4ec <__sfputc_r>:
 800b4ec:	6893      	ldr	r3, [r2, #8]
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	b410      	push	{r4}
 800b4f4:	6093      	str	r3, [r2, #8]
 800b4f6:	da08      	bge.n	800b50a <__sfputc_r+0x1e>
 800b4f8:	6994      	ldr	r4, [r2, #24]
 800b4fa:	42a3      	cmp	r3, r4
 800b4fc:	db01      	blt.n	800b502 <__sfputc_r+0x16>
 800b4fe:	290a      	cmp	r1, #10
 800b500:	d103      	bne.n	800b50a <__sfputc_r+0x1e>
 800b502:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b506:	f7ff ba9d 	b.w	800aa44 <__swbuf_r>
 800b50a:	6813      	ldr	r3, [r2, #0]
 800b50c:	1c58      	adds	r0, r3, #1
 800b50e:	6010      	str	r0, [r2, #0]
 800b510:	7019      	strb	r1, [r3, #0]
 800b512:	4608      	mov	r0, r1
 800b514:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b518:	4770      	bx	lr

0800b51a <__sfputs_r>:
 800b51a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51c:	4606      	mov	r6, r0
 800b51e:	460f      	mov	r7, r1
 800b520:	4614      	mov	r4, r2
 800b522:	18d5      	adds	r5, r2, r3
 800b524:	42ac      	cmp	r4, r5
 800b526:	d101      	bne.n	800b52c <__sfputs_r+0x12>
 800b528:	2000      	movs	r0, #0
 800b52a:	e007      	b.n	800b53c <__sfputs_r+0x22>
 800b52c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b530:	463a      	mov	r2, r7
 800b532:	4630      	mov	r0, r6
 800b534:	f7ff ffda 	bl	800b4ec <__sfputc_r>
 800b538:	1c43      	adds	r3, r0, #1
 800b53a:	d1f3      	bne.n	800b524 <__sfputs_r+0xa>
 800b53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b540 <_vfiprintf_r>:
 800b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	460d      	mov	r5, r1
 800b546:	b09d      	sub	sp, #116	; 0x74
 800b548:	4614      	mov	r4, r2
 800b54a:	4698      	mov	r8, r3
 800b54c:	4606      	mov	r6, r0
 800b54e:	b118      	cbz	r0, 800b558 <_vfiprintf_r+0x18>
 800b550:	6983      	ldr	r3, [r0, #24]
 800b552:	b90b      	cbnz	r3, 800b558 <_vfiprintf_r+0x18>
 800b554:	f7ff fc6e 	bl	800ae34 <__sinit>
 800b558:	4b89      	ldr	r3, [pc, #548]	; (800b780 <_vfiprintf_r+0x240>)
 800b55a:	429d      	cmp	r5, r3
 800b55c:	d11b      	bne.n	800b596 <_vfiprintf_r+0x56>
 800b55e:	6875      	ldr	r5, [r6, #4]
 800b560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b562:	07d9      	lsls	r1, r3, #31
 800b564:	d405      	bmi.n	800b572 <_vfiprintf_r+0x32>
 800b566:	89ab      	ldrh	r3, [r5, #12]
 800b568:	059a      	lsls	r2, r3, #22
 800b56a:	d402      	bmi.n	800b572 <_vfiprintf_r+0x32>
 800b56c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b56e:	f7ff fd11 	bl	800af94 <__retarget_lock_acquire_recursive>
 800b572:	89ab      	ldrh	r3, [r5, #12]
 800b574:	071b      	lsls	r3, r3, #28
 800b576:	d501      	bpl.n	800b57c <_vfiprintf_r+0x3c>
 800b578:	692b      	ldr	r3, [r5, #16]
 800b57a:	b9eb      	cbnz	r3, 800b5b8 <_vfiprintf_r+0x78>
 800b57c:	4629      	mov	r1, r5
 800b57e:	4630      	mov	r0, r6
 800b580:	f7ff fab2 	bl	800aae8 <__swsetup_r>
 800b584:	b1c0      	cbz	r0, 800b5b8 <_vfiprintf_r+0x78>
 800b586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b588:	07dc      	lsls	r4, r3, #31
 800b58a:	d50e      	bpl.n	800b5aa <_vfiprintf_r+0x6a>
 800b58c:	f04f 30ff 	mov.w	r0, #4294967295
 800b590:	b01d      	add	sp, #116	; 0x74
 800b592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b596:	4b7b      	ldr	r3, [pc, #492]	; (800b784 <_vfiprintf_r+0x244>)
 800b598:	429d      	cmp	r5, r3
 800b59a:	d101      	bne.n	800b5a0 <_vfiprintf_r+0x60>
 800b59c:	68b5      	ldr	r5, [r6, #8]
 800b59e:	e7df      	b.n	800b560 <_vfiprintf_r+0x20>
 800b5a0:	4b79      	ldr	r3, [pc, #484]	; (800b788 <_vfiprintf_r+0x248>)
 800b5a2:	429d      	cmp	r5, r3
 800b5a4:	bf08      	it	eq
 800b5a6:	68f5      	ldreq	r5, [r6, #12]
 800b5a8:	e7da      	b.n	800b560 <_vfiprintf_r+0x20>
 800b5aa:	89ab      	ldrh	r3, [r5, #12]
 800b5ac:	0598      	lsls	r0, r3, #22
 800b5ae:	d4ed      	bmi.n	800b58c <_vfiprintf_r+0x4c>
 800b5b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5b2:	f7ff fcf0 	bl	800af96 <__retarget_lock_release_recursive>
 800b5b6:	e7e9      	b.n	800b58c <_vfiprintf_r+0x4c>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b5bc:	2320      	movs	r3, #32
 800b5be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5c6:	2330      	movs	r3, #48	; 0x30
 800b5c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b78c <_vfiprintf_r+0x24c>
 800b5cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5d0:	f04f 0901 	mov.w	r9, #1
 800b5d4:	4623      	mov	r3, r4
 800b5d6:	469a      	mov	sl, r3
 800b5d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5dc:	b10a      	cbz	r2, 800b5e2 <_vfiprintf_r+0xa2>
 800b5de:	2a25      	cmp	r2, #37	; 0x25
 800b5e0:	d1f9      	bne.n	800b5d6 <_vfiprintf_r+0x96>
 800b5e2:	ebba 0b04 	subs.w	fp, sl, r4
 800b5e6:	d00b      	beq.n	800b600 <_vfiprintf_r+0xc0>
 800b5e8:	465b      	mov	r3, fp
 800b5ea:	4622      	mov	r2, r4
 800b5ec:	4629      	mov	r1, r5
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	f7ff ff93 	bl	800b51a <__sfputs_r>
 800b5f4:	3001      	adds	r0, #1
 800b5f6:	f000 80aa 	beq.w	800b74e <_vfiprintf_r+0x20e>
 800b5fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5fc:	445a      	add	r2, fp
 800b5fe:	9209      	str	r2, [sp, #36]	; 0x24
 800b600:	f89a 3000 	ldrb.w	r3, [sl]
 800b604:	2b00      	cmp	r3, #0
 800b606:	f000 80a2 	beq.w	800b74e <_vfiprintf_r+0x20e>
 800b60a:	2300      	movs	r3, #0
 800b60c:	f04f 32ff 	mov.w	r2, #4294967295
 800b610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b614:	f10a 0a01 	add.w	sl, sl, #1
 800b618:	9304      	str	r3, [sp, #16]
 800b61a:	9307      	str	r3, [sp, #28]
 800b61c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b620:	931a      	str	r3, [sp, #104]	; 0x68
 800b622:	4654      	mov	r4, sl
 800b624:	2205      	movs	r2, #5
 800b626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b62a:	4858      	ldr	r0, [pc, #352]	; (800b78c <_vfiprintf_r+0x24c>)
 800b62c:	f7f4 fdd8 	bl	80001e0 <memchr>
 800b630:	9a04      	ldr	r2, [sp, #16]
 800b632:	b9d8      	cbnz	r0, 800b66c <_vfiprintf_r+0x12c>
 800b634:	06d1      	lsls	r1, r2, #27
 800b636:	bf44      	itt	mi
 800b638:	2320      	movmi	r3, #32
 800b63a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b63e:	0713      	lsls	r3, r2, #28
 800b640:	bf44      	itt	mi
 800b642:	232b      	movmi	r3, #43	; 0x2b
 800b644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b648:	f89a 3000 	ldrb.w	r3, [sl]
 800b64c:	2b2a      	cmp	r3, #42	; 0x2a
 800b64e:	d015      	beq.n	800b67c <_vfiprintf_r+0x13c>
 800b650:	9a07      	ldr	r2, [sp, #28]
 800b652:	4654      	mov	r4, sl
 800b654:	2000      	movs	r0, #0
 800b656:	f04f 0c0a 	mov.w	ip, #10
 800b65a:	4621      	mov	r1, r4
 800b65c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b660:	3b30      	subs	r3, #48	; 0x30
 800b662:	2b09      	cmp	r3, #9
 800b664:	d94e      	bls.n	800b704 <_vfiprintf_r+0x1c4>
 800b666:	b1b0      	cbz	r0, 800b696 <_vfiprintf_r+0x156>
 800b668:	9207      	str	r2, [sp, #28]
 800b66a:	e014      	b.n	800b696 <_vfiprintf_r+0x156>
 800b66c:	eba0 0308 	sub.w	r3, r0, r8
 800b670:	fa09 f303 	lsl.w	r3, r9, r3
 800b674:	4313      	orrs	r3, r2
 800b676:	9304      	str	r3, [sp, #16]
 800b678:	46a2      	mov	sl, r4
 800b67a:	e7d2      	b.n	800b622 <_vfiprintf_r+0xe2>
 800b67c:	9b03      	ldr	r3, [sp, #12]
 800b67e:	1d19      	adds	r1, r3, #4
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	9103      	str	r1, [sp, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	bfbb      	ittet	lt
 800b688:	425b      	neglt	r3, r3
 800b68a:	f042 0202 	orrlt.w	r2, r2, #2
 800b68e:	9307      	strge	r3, [sp, #28]
 800b690:	9307      	strlt	r3, [sp, #28]
 800b692:	bfb8      	it	lt
 800b694:	9204      	strlt	r2, [sp, #16]
 800b696:	7823      	ldrb	r3, [r4, #0]
 800b698:	2b2e      	cmp	r3, #46	; 0x2e
 800b69a:	d10c      	bne.n	800b6b6 <_vfiprintf_r+0x176>
 800b69c:	7863      	ldrb	r3, [r4, #1]
 800b69e:	2b2a      	cmp	r3, #42	; 0x2a
 800b6a0:	d135      	bne.n	800b70e <_vfiprintf_r+0x1ce>
 800b6a2:	9b03      	ldr	r3, [sp, #12]
 800b6a4:	1d1a      	adds	r2, r3, #4
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	9203      	str	r2, [sp, #12]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	bfb8      	it	lt
 800b6ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6b2:	3402      	adds	r4, #2
 800b6b4:	9305      	str	r3, [sp, #20]
 800b6b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b79c <_vfiprintf_r+0x25c>
 800b6ba:	7821      	ldrb	r1, [r4, #0]
 800b6bc:	2203      	movs	r2, #3
 800b6be:	4650      	mov	r0, sl
 800b6c0:	f7f4 fd8e 	bl	80001e0 <memchr>
 800b6c4:	b140      	cbz	r0, 800b6d8 <_vfiprintf_r+0x198>
 800b6c6:	2340      	movs	r3, #64	; 0x40
 800b6c8:	eba0 000a 	sub.w	r0, r0, sl
 800b6cc:	fa03 f000 	lsl.w	r0, r3, r0
 800b6d0:	9b04      	ldr	r3, [sp, #16]
 800b6d2:	4303      	orrs	r3, r0
 800b6d4:	3401      	adds	r4, #1
 800b6d6:	9304      	str	r3, [sp, #16]
 800b6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6dc:	482c      	ldr	r0, [pc, #176]	; (800b790 <_vfiprintf_r+0x250>)
 800b6de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6e2:	2206      	movs	r2, #6
 800b6e4:	f7f4 fd7c 	bl	80001e0 <memchr>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d03f      	beq.n	800b76c <_vfiprintf_r+0x22c>
 800b6ec:	4b29      	ldr	r3, [pc, #164]	; (800b794 <_vfiprintf_r+0x254>)
 800b6ee:	bb1b      	cbnz	r3, 800b738 <_vfiprintf_r+0x1f8>
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	3307      	adds	r3, #7
 800b6f4:	f023 0307 	bic.w	r3, r3, #7
 800b6f8:	3308      	adds	r3, #8
 800b6fa:	9303      	str	r3, [sp, #12]
 800b6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6fe:	443b      	add	r3, r7
 800b700:	9309      	str	r3, [sp, #36]	; 0x24
 800b702:	e767      	b.n	800b5d4 <_vfiprintf_r+0x94>
 800b704:	fb0c 3202 	mla	r2, ip, r2, r3
 800b708:	460c      	mov	r4, r1
 800b70a:	2001      	movs	r0, #1
 800b70c:	e7a5      	b.n	800b65a <_vfiprintf_r+0x11a>
 800b70e:	2300      	movs	r3, #0
 800b710:	3401      	adds	r4, #1
 800b712:	9305      	str	r3, [sp, #20]
 800b714:	4619      	mov	r1, r3
 800b716:	f04f 0c0a 	mov.w	ip, #10
 800b71a:	4620      	mov	r0, r4
 800b71c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b720:	3a30      	subs	r2, #48	; 0x30
 800b722:	2a09      	cmp	r2, #9
 800b724:	d903      	bls.n	800b72e <_vfiprintf_r+0x1ee>
 800b726:	2b00      	cmp	r3, #0
 800b728:	d0c5      	beq.n	800b6b6 <_vfiprintf_r+0x176>
 800b72a:	9105      	str	r1, [sp, #20]
 800b72c:	e7c3      	b.n	800b6b6 <_vfiprintf_r+0x176>
 800b72e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b732:	4604      	mov	r4, r0
 800b734:	2301      	movs	r3, #1
 800b736:	e7f0      	b.n	800b71a <_vfiprintf_r+0x1da>
 800b738:	ab03      	add	r3, sp, #12
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	462a      	mov	r2, r5
 800b73e:	4b16      	ldr	r3, [pc, #88]	; (800b798 <_vfiprintf_r+0x258>)
 800b740:	a904      	add	r1, sp, #16
 800b742:	4630      	mov	r0, r6
 800b744:	f3af 8000 	nop.w
 800b748:	4607      	mov	r7, r0
 800b74a:	1c78      	adds	r0, r7, #1
 800b74c:	d1d6      	bne.n	800b6fc <_vfiprintf_r+0x1bc>
 800b74e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b750:	07d9      	lsls	r1, r3, #31
 800b752:	d405      	bmi.n	800b760 <_vfiprintf_r+0x220>
 800b754:	89ab      	ldrh	r3, [r5, #12]
 800b756:	059a      	lsls	r2, r3, #22
 800b758:	d402      	bmi.n	800b760 <_vfiprintf_r+0x220>
 800b75a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b75c:	f7ff fc1b 	bl	800af96 <__retarget_lock_release_recursive>
 800b760:	89ab      	ldrh	r3, [r5, #12]
 800b762:	065b      	lsls	r3, r3, #25
 800b764:	f53f af12 	bmi.w	800b58c <_vfiprintf_r+0x4c>
 800b768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b76a:	e711      	b.n	800b590 <_vfiprintf_r+0x50>
 800b76c:	ab03      	add	r3, sp, #12
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	462a      	mov	r2, r5
 800b772:	4b09      	ldr	r3, [pc, #36]	; (800b798 <_vfiprintf_r+0x258>)
 800b774:	a904      	add	r1, sp, #16
 800b776:	4630      	mov	r0, r6
 800b778:	f000 f880 	bl	800b87c <_printf_i>
 800b77c:	e7e4      	b.n	800b748 <_vfiprintf_r+0x208>
 800b77e:	bf00      	nop
 800b780:	0800dbd4 	.word	0x0800dbd4
 800b784:	0800dbf4 	.word	0x0800dbf4
 800b788:	0800dbb4 	.word	0x0800dbb4
 800b78c:	0800dc14 	.word	0x0800dc14
 800b790:	0800dc1e 	.word	0x0800dc1e
 800b794:	00000000 	.word	0x00000000
 800b798:	0800b51b 	.word	0x0800b51b
 800b79c:	0800dc1a 	.word	0x0800dc1a

0800b7a0 <_printf_common>:
 800b7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a4:	4616      	mov	r6, r2
 800b7a6:	4699      	mov	r9, r3
 800b7a8:	688a      	ldr	r2, [r1, #8]
 800b7aa:	690b      	ldr	r3, [r1, #16]
 800b7ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	bfb8      	it	lt
 800b7b4:	4613      	movlt	r3, r2
 800b7b6:	6033      	str	r3, [r6, #0]
 800b7b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7bc:	4607      	mov	r7, r0
 800b7be:	460c      	mov	r4, r1
 800b7c0:	b10a      	cbz	r2, 800b7c6 <_printf_common+0x26>
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	6033      	str	r3, [r6, #0]
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	0699      	lsls	r1, r3, #26
 800b7ca:	bf42      	ittt	mi
 800b7cc:	6833      	ldrmi	r3, [r6, #0]
 800b7ce:	3302      	addmi	r3, #2
 800b7d0:	6033      	strmi	r3, [r6, #0]
 800b7d2:	6825      	ldr	r5, [r4, #0]
 800b7d4:	f015 0506 	ands.w	r5, r5, #6
 800b7d8:	d106      	bne.n	800b7e8 <_printf_common+0x48>
 800b7da:	f104 0a19 	add.w	sl, r4, #25
 800b7de:	68e3      	ldr	r3, [r4, #12]
 800b7e0:	6832      	ldr	r2, [r6, #0]
 800b7e2:	1a9b      	subs	r3, r3, r2
 800b7e4:	42ab      	cmp	r3, r5
 800b7e6:	dc26      	bgt.n	800b836 <_printf_common+0x96>
 800b7e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7ec:	1e13      	subs	r3, r2, #0
 800b7ee:	6822      	ldr	r2, [r4, #0]
 800b7f0:	bf18      	it	ne
 800b7f2:	2301      	movne	r3, #1
 800b7f4:	0692      	lsls	r2, r2, #26
 800b7f6:	d42b      	bmi.n	800b850 <_printf_common+0xb0>
 800b7f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	4638      	mov	r0, r7
 800b800:	47c0      	blx	r8
 800b802:	3001      	adds	r0, #1
 800b804:	d01e      	beq.n	800b844 <_printf_common+0xa4>
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	68e5      	ldr	r5, [r4, #12]
 800b80a:	6832      	ldr	r2, [r6, #0]
 800b80c:	f003 0306 	and.w	r3, r3, #6
 800b810:	2b04      	cmp	r3, #4
 800b812:	bf08      	it	eq
 800b814:	1aad      	subeq	r5, r5, r2
 800b816:	68a3      	ldr	r3, [r4, #8]
 800b818:	6922      	ldr	r2, [r4, #16]
 800b81a:	bf0c      	ite	eq
 800b81c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b820:	2500      	movne	r5, #0
 800b822:	4293      	cmp	r3, r2
 800b824:	bfc4      	itt	gt
 800b826:	1a9b      	subgt	r3, r3, r2
 800b828:	18ed      	addgt	r5, r5, r3
 800b82a:	2600      	movs	r6, #0
 800b82c:	341a      	adds	r4, #26
 800b82e:	42b5      	cmp	r5, r6
 800b830:	d11a      	bne.n	800b868 <_printf_common+0xc8>
 800b832:	2000      	movs	r0, #0
 800b834:	e008      	b.n	800b848 <_printf_common+0xa8>
 800b836:	2301      	movs	r3, #1
 800b838:	4652      	mov	r2, sl
 800b83a:	4649      	mov	r1, r9
 800b83c:	4638      	mov	r0, r7
 800b83e:	47c0      	blx	r8
 800b840:	3001      	adds	r0, #1
 800b842:	d103      	bne.n	800b84c <_printf_common+0xac>
 800b844:	f04f 30ff 	mov.w	r0, #4294967295
 800b848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b84c:	3501      	adds	r5, #1
 800b84e:	e7c6      	b.n	800b7de <_printf_common+0x3e>
 800b850:	18e1      	adds	r1, r4, r3
 800b852:	1c5a      	adds	r2, r3, #1
 800b854:	2030      	movs	r0, #48	; 0x30
 800b856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b85a:	4422      	add	r2, r4
 800b85c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b864:	3302      	adds	r3, #2
 800b866:	e7c7      	b.n	800b7f8 <_printf_common+0x58>
 800b868:	2301      	movs	r3, #1
 800b86a:	4622      	mov	r2, r4
 800b86c:	4649      	mov	r1, r9
 800b86e:	4638      	mov	r0, r7
 800b870:	47c0      	blx	r8
 800b872:	3001      	adds	r0, #1
 800b874:	d0e6      	beq.n	800b844 <_printf_common+0xa4>
 800b876:	3601      	adds	r6, #1
 800b878:	e7d9      	b.n	800b82e <_printf_common+0x8e>
	...

0800b87c <_printf_i>:
 800b87c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b880:	7e0f      	ldrb	r7, [r1, #24]
 800b882:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b884:	2f78      	cmp	r7, #120	; 0x78
 800b886:	4691      	mov	r9, r2
 800b888:	4680      	mov	r8, r0
 800b88a:	460c      	mov	r4, r1
 800b88c:	469a      	mov	sl, r3
 800b88e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b892:	d807      	bhi.n	800b8a4 <_printf_i+0x28>
 800b894:	2f62      	cmp	r7, #98	; 0x62
 800b896:	d80a      	bhi.n	800b8ae <_printf_i+0x32>
 800b898:	2f00      	cmp	r7, #0
 800b89a:	f000 80d8 	beq.w	800ba4e <_printf_i+0x1d2>
 800b89e:	2f58      	cmp	r7, #88	; 0x58
 800b8a0:	f000 80a3 	beq.w	800b9ea <_printf_i+0x16e>
 800b8a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b8ac:	e03a      	b.n	800b924 <_printf_i+0xa8>
 800b8ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b8b2:	2b15      	cmp	r3, #21
 800b8b4:	d8f6      	bhi.n	800b8a4 <_printf_i+0x28>
 800b8b6:	a101      	add	r1, pc, #4	; (adr r1, 800b8bc <_printf_i+0x40>)
 800b8b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8bc:	0800b915 	.word	0x0800b915
 800b8c0:	0800b929 	.word	0x0800b929
 800b8c4:	0800b8a5 	.word	0x0800b8a5
 800b8c8:	0800b8a5 	.word	0x0800b8a5
 800b8cc:	0800b8a5 	.word	0x0800b8a5
 800b8d0:	0800b8a5 	.word	0x0800b8a5
 800b8d4:	0800b929 	.word	0x0800b929
 800b8d8:	0800b8a5 	.word	0x0800b8a5
 800b8dc:	0800b8a5 	.word	0x0800b8a5
 800b8e0:	0800b8a5 	.word	0x0800b8a5
 800b8e4:	0800b8a5 	.word	0x0800b8a5
 800b8e8:	0800ba35 	.word	0x0800ba35
 800b8ec:	0800b959 	.word	0x0800b959
 800b8f0:	0800ba17 	.word	0x0800ba17
 800b8f4:	0800b8a5 	.word	0x0800b8a5
 800b8f8:	0800b8a5 	.word	0x0800b8a5
 800b8fc:	0800ba57 	.word	0x0800ba57
 800b900:	0800b8a5 	.word	0x0800b8a5
 800b904:	0800b959 	.word	0x0800b959
 800b908:	0800b8a5 	.word	0x0800b8a5
 800b90c:	0800b8a5 	.word	0x0800b8a5
 800b910:	0800ba1f 	.word	0x0800ba1f
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	1d1a      	adds	r2, r3, #4
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	602a      	str	r2, [r5, #0]
 800b91c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b924:	2301      	movs	r3, #1
 800b926:	e0a3      	b.n	800ba70 <_printf_i+0x1f4>
 800b928:	6820      	ldr	r0, [r4, #0]
 800b92a:	6829      	ldr	r1, [r5, #0]
 800b92c:	0606      	lsls	r6, r0, #24
 800b92e:	f101 0304 	add.w	r3, r1, #4
 800b932:	d50a      	bpl.n	800b94a <_printf_i+0xce>
 800b934:	680e      	ldr	r6, [r1, #0]
 800b936:	602b      	str	r3, [r5, #0]
 800b938:	2e00      	cmp	r6, #0
 800b93a:	da03      	bge.n	800b944 <_printf_i+0xc8>
 800b93c:	232d      	movs	r3, #45	; 0x2d
 800b93e:	4276      	negs	r6, r6
 800b940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b944:	485e      	ldr	r0, [pc, #376]	; (800bac0 <_printf_i+0x244>)
 800b946:	230a      	movs	r3, #10
 800b948:	e019      	b.n	800b97e <_printf_i+0x102>
 800b94a:	680e      	ldr	r6, [r1, #0]
 800b94c:	602b      	str	r3, [r5, #0]
 800b94e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b952:	bf18      	it	ne
 800b954:	b236      	sxthne	r6, r6
 800b956:	e7ef      	b.n	800b938 <_printf_i+0xbc>
 800b958:	682b      	ldr	r3, [r5, #0]
 800b95a:	6820      	ldr	r0, [r4, #0]
 800b95c:	1d19      	adds	r1, r3, #4
 800b95e:	6029      	str	r1, [r5, #0]
 800b960:	0601      	lsls	r1, r0, #24
 800b962:	d501      	bpl.n	800b968 <_printf_i+0xec>
 800b964:	681e      	ldr	r6, [r3, #0]
 800b966:	e002      	b.n	800b96e <_printf_i+0xf2>
 800b968:	0646      	lsls	r6, r0, #25
 800b96a:	d5fb      	bpl.n	800b964 <_printf_i+0xe8>
 800b96c:	881e      	ldrh	r6, [r3, #0]
 800b96e:	4854      	ldr	r0, [pc, #336]	; (800bac0 <_printf_i+0x244>)
 800b970:	2f6f      	cmp	r7, #111	; 0x6f
 800b972:	bf0c      	ite	eq
 800b974:	2308      	moveq	r3, #8
 800b976:	230a      	movne	r3, #10
 800b978:	2100      	movs	r1, #0
 800b97a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b97e:	6865      	ldr	r5, [r4, #4]
 800b980:	60a5      	str	r5, [r4, #8]
 800b982:	2d00      	cmp	r5, #0
 800b984:	bfa2      	ittt	ge
 800b986:	6821      	ldrge	r1, [r4, #0]
 800b988:	f021 0104 	bicge.w	r1, r1, #4
 800b98c:	6021      	strge	r1, [r4, #0]
 800b98e:	b90e      	cbnz	r6, 800b994 <_printf_i+0x118>
 800b990:	2d00      	cmp	r5, #0
 800b992:	d04d      	beq.n	800ba30 <_printf_i+0x1b4>
 800b994:	4615      	mov	r5, r2
 800b996:	fbb6 f1f3 	udiv	r1, r6, r3
 800b99a:	fb03 6711 	mls	r7, r3, r1, r6
 800b99e:	5dc7      	ldrb	r7, [r0, r7]
 800b9a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b9a4:	4637      	mov	r7, r6
 800b9a6:	42bb      	cmp	r3, r7
 800b9a8:	460e      	mov	r6, r1
 800b9aa:	d9f4      	bls.n	800b996 <_printf_i+0x11a>
 800b9ac:	2b08      	cmp	r3, #8
 800b9ae:	d10b      	bne.n	800b9c8 <_printf_i+0x14c>
 800b9b0:	6823      	ldr	r3, [r4, #0]
 800b9b2:	07de      	lsls	r6, r3, #31
 800b9b4:	d508      	bpl.n	800b9c8 <_printf_i+0x14c>
 800b9b6:	6923      	ldr	r3, [r4, #16]
 800b9b8:	6861      	ldr	r1, [r4, #4]
 800b9ba:	4299      	cmp	r1, r3
 800b9bc:	bfde      	ittt	le
 800b9be:	2330      	movle	r3, #48	; 0x30
 800b9c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9c8:	1b52      	subs	r2, r2, r5
 800b9ca:	6122      	str	r2, [r4, #16]
 800b9cc:	f8cd a000 	str.w	sl, [sp]
 800b9d0:	464b      	mov	r3, r9
 800b9d2:	aa03      	add	r2, sp, #12
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	4640      	mov	r0, r8
 800b9d8:	f7ff fee2 	bl	800b7a0 <_printf_common>
 800b9dc:	3001      	adds	r0, #1
 800b9de:	d14c      	bne.n	800ba7a <_printf_i+0x1fe>
 800b9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e4:	b004      	add	sp, #16
 800b9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ea:	4835      	ldr	r0, [pc, #212]	; (800bac0 <_printf_i+0x244>)
 800b9ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b9f0:	6829      	ldr	r1, [r5, #0]
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b9f8:	6029      	str	r1, [r5, #0]
 800b9fa:	061d      	lsls	r5, r3, #24
 800b9fc:	d514      	bpl.n	800ba28 <_printf_i+0x1ac>
 800b9fe:	07df      	lsls	r7, r3, #31
 800ba00:	bf44      	itt	mi
 800ba02:	f043 0320 	orrmi.w	r3, r3, #32
 800ba06:	6023      	strmi	r3, [r4, #0]
 800ba08:	b91e      	cbnz	r6, 800ba12 <_printf_i+0x196>
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	f023 0320 	bic.w	r3, r3, #32
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	2310      	movs	r3, #16
 800ba14:	e7b0      	b.n	800b978 <_printf_i+0xfc>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	f043 0320 	orr.w	r3, r3, #32
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	2378      	movs	r3, #120	; 0x78
 800ba20:	4828      	ldr	r0, [pc, #160]	; (800bac4 <_printf_i+0x248>)
 800ba22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba26:	e7e3      	b.n	800b9f0 <_printf_i+0x174>
 800ba28:	0659      	lsls	r1, r3, #25
 800ba2a:	bf48      	it	mi
 800ba2c:	b2b6      	uxthmi	r6, r6
 800ba2e:	e7e6      	b.n	800b9fe <_printf_i+0x182>
 800ba30:	4615      	mov	r5, r2
 800ba32:	e7bb      	b.n	800b9ac <_printf_i+0x130>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	6826      	ldr	r6, [r4, #0]
 800ba38:	6961      	ldr	r1, [r4, #20]
 800ba3a:	1d18      	adds	r0, r3, #4
 800ba3c:	6028      	str	r0, [r5, #0]
 800ba3e:	0635      	lsls	r5, r6, #24
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	d501      	bpl.n	800ba48 <_printf_i+0x1cc>
 800ba44:	6019      	str	r1, [r3, #0]
 800ba46:	e002      	b.n	800ba4e <_printf_i+0x1d2>
 800ba48:	0670      	lsls	r0, r6, #25
 800ba4a:	d5fb      	bpl.n	800ba44 <_printf_i+0x1c8>
 800ba4c:	8019      	strh	r1, [r3, #0]
 800ba4e:	2300      	movs	r3, #0
 800ba50:	6123      	str	r3, [r4, #16]
 800ba52:	4615      	mov	r5, r2
 800ba54:	e7ba      	b.n	800b9cc <_printf_i+0x150>
 800ba56:	682b      	ldr	r3, [r5, #0]
 800ba58:	1d1a      	adds	r2, r3, #4
 800ba5a:	602a      	str	r2, [r5, #0]
 800ba5c:	681d      	ldr	r5, [r3, #0]
 800ba5e:	6862      	ldr	r2, [r4, #4]
 800ba60:	2100      	movs	r1, #0
 800ba62:	4628      	mov	r0, r5
 800ba64:	f7f4 fbbc 	bl	80001e0 <memchr>
 800ba68:	b108      	cbz	r0, 800ba6e <_printf_i+0x1f2>
 800ba6a:	1b40      	subs	r0, r0, r5
 800ba6c:	6060      	str	r0, [r4, #4]
 800ba6e:	6863      	ldr	r3, [r4, #4]
 800ba70:	6123      	str	r3, [r4, #16]
 800ba72:	2300      	movs	r3, #0
 800ba74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba78:	e7a8      	b.n	800b9cc <_printf_i+0x150>
 800ba7a:	6923      	ldr	r3, [r4, #16]
 800ba7c:	462a      	mov	r2, r5
 800ba7e:	4649      	mov	r1, r9
 800ba80:	4640      	mov	r0, r8
 800ba82:	47d0      	blx	sl
 800ba84:	3001      	adds	r0, #1
 800ba86:	d0ab      	beq.n	800b9e0 <_printf_i+0x164>
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	079b      	lsls	r3, r3, #30
 800ba8c:	d413      	bmi.n	800bab6 <_printf_i+0x23a>
 800ba8e:	68e0      	ldr	r0, [r4, #12]
 800ba90:	9b03      	ldr	r3, [sp, #12]
 800ba92:	4298      	cmp	r0, r3
 800ba94:	bfb8      	it	lt
 800ba96:	4618      	movlt	r0, r3
 800ba98:	e7a4      	b.n	800b9e4 <_printf_i+0x168>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	4632      	mov	r2, r6
 800ba9e:	4649      	mov	r1, r9
 800baa0:	4640      	mov	r0, r8
 800baa2:	47d0      	blx	sl
 800baa4:	3001      	adds	r0, #1
 800baa6:	d09b      	beq.n	800b9e0 <_printf_i+0x164>
 800baa8:	3501      	adds	r5, #1
 800baaa:	68e3      	ldr	r3, [r4, #12]
 800baac:	9903      	ldr	r1, [sp, #12]
 800baae:	1a5b      	subs	r3, r3, r1
 800bab0:	42ab      	cmp	r3, r5
 800bab2:	dcf2      	bgt.n	800ba9a <_printf_i+0x21e>
 800bab4:	e7eb      	b.n	800ba8e <_printf_i+0x212>
 800bab6:	2500      	movs	r5, #0
 800bab8:	f104 0619 	add.w	r6, r4, #25
 800babc:	e7f5      	b.n	800baaa <_printf_i+0x22e>
 800babe:	bf00      	nop
 800bac0:	0800dc25 	.word	0x0800dc25
 800bac4:	0800dc36 	.word	0x0800dc36

0800bac8 <_sbrk_r>:
 800bac8:	b538      	push	{r3, r4, r5, lr}
 800baca:	4d06      	ldr	r5, [pc, #24]	; (800bae4 <_sbrk_r+0x1c>)
 800bacc:	2300      	movs	r3, #0
 800bace:	4604      	mov	r4, r0
 800bad0:	4608      	mov	r0, r1
 800bad2:	602b      	str	r3, [r5, #0]
 800bad4:	f7f8 ffc4 	bl	8004a60 <_sbrk>
 800bad8:	1c43      	adds	r3, r0, #1
 800bada:	d102      	bne.n	800bae2 <_sbrk_r+0x1a>
 800badc:	682b      	ldr	r3, [r5, #0]
 800bade:	b103      	cbz	r3, 800bae2 <_sbrk_r+0x1a>
 800bae0:	6023      	str	r3, [r4, #0]
 800bae2:	bd38      	pop	{r3, r4, r5, pc}
 800bae4:	20002a00 	.word	0x20002a00

0800bae8 <__sread>:
 800bae8:	b510      	push	{r4, lr}
 800baea:	460c      	mov	r4, r1
 800baec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf0:	f000 f900 	bl	800bcf4 <_read_r>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	bfab      	itete	ge
 800baf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bafa:	89a3      	ldrhlt	r3, [r4, #12]
 800bafc:	181b      	addge	r3, r3, r0
 800bafe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb02:	bfac      	ite	ge
 800bb04:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb06:	81a3      	strhlt	r3, [r4, #12]
 800bb08:	bd10      	pop	{r4, pc}

0800bb0a <__swrite>:
 800bb0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0e:	461f      	mov	r7, r3
 800bb10:	898b      	ldrh	r3, [r1, #12]
 800bb12:	05db      	lsls	r3, r3, #23
 800bb14:	4605      	mov	r5, r0
 800bb16:	460c      	mov	r4, r1
 800bb18:	4616      	mov	r6, r2
 800bb1a:	d505      	bpl.n	800bb28 <__swrite+0x1e>
 800bb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb20:	2302      	movs	r3, #2
 800bb22:	2200      	movs	r2, #0
 800bb24:	f000 f870 	bl	800bc08 <_lseek_r>
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb32:	81a3      	strh	r3, [r4, #12]
 800bb34:	4632      	mov	r2, r6
 800bb36:	463b      	mov	r3, r7
 800bb38:	4628      	mov	r0, r5
 800bb3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb3e:	f000 b817 	b.w	800bb70 <_write_r>

0800bb42 <__sseek>:
 800bb42:	b510      	push	{r4, lr}
 800bb44:	460c      	mov	r4, r1
 800bb46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb4a:	f000 f85d 	bl	800bc08 <_lseek_r>
 800bb4e:	1c43      	adds	r3, r0, #1
 800bb50:	89a3      	ldrh	r3, [r4, #12]
 800bb52:	bf15      	itete	ne
 800bb54:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb5e:	81a3      	strheq	r3, [r4, #12]
 800bb60:	bf18      	it	ne
 800bb62:	81a3      	strhne	r3, [r4, #12]
 800bb64:	bd10      	pop	{r4, pc}

0800bb66 <__sclose>:
 800bb66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb6a:	f000 b81b 	b.w	800bba4 <_close_r>
	...

0800bb70 <_write_r>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	4d07      	ldr	r5, [pc, #28]	; (800bb90 <_write_r+0x20>)
 800bb74:	4604      	mov	r4, r0
 800bb76:	4608      	mov	r0, r1
 800bb78:	4611      	mov	r1, r2
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	602a      	str	r2, [r5, #0]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f7f6 fb64 	bl	800224c <_write>
 800bb84:	1c43      	adds	r3, r0, #1
 800bb86:	d102      	bne.n	800bb8e <_write_r+0x1e>
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	b103      	cbz	r3, 800bb8e <_write_r+0x1e>
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	bd38      	pop	{r3, r4, r5, pc}
 800bb90:	20002a00 	.word	0x20002a00

0800bb94 <abort>:
 800bb94:	b508      	push	{r3, lr}
 800bb96:	2006      	movs	r0, #6
 800bb98:	f000 f8e6 	bl	800bd68 <raise>
 800bb9c:	2001      	movs	r0, #1
 800bb9e:	f7f8 ff03 	bl	80049a8 <_exit>
	...

0800bba4 <_close_r>:
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	4d06      	ldr	r5, [pc, #24]	; (800bbc0 <_close_r+0x1c>)
 800bba8:	2300      	movs	r3, #0
 800bbaa:	4604      	mov	r4, r0
 800bbac:	4608      	mov	r0, r1
 800bbae:	602b      	str	r3, [r5, #0]
 800bbb0:	f7f8 ff21 	bl	80049f6 <_close>
 800bbb4:	1c43      	adds	r3, r0, #1
 800bbb6:	d102      	bne.n	800bbbe <_close_r+0x1a>
 800bbb8:	682b      	ldr	r3, [r5, #0]
 800bbba:	b103      	cbz	r3, 800bbbe <_close_r+0x1a>
 800bbbc:	6023      	str	r3, [r4, #0]
 800bbbe:	bd38      	pop	{r3, r4, r5, pc}
 800bbc0:	20002a00 	.word	0x20002a00

0800bbc4 <_fstat_r>:
 800bbc4:	b538      	push	{r3, r4, r5, lr}
 800bbc6:	4d07      	ldr	r5, [pc, #28]	; (800bbe4 <_fstat_r+0x20>)
 800bbc8:	2300      	movs	r3, #0
 800bbca:	4604      	mov	r4, r0
 800bbcc:	4608      	mov	r0, r1
 800bbce:	4611      	mov	r1, r2
 800bbd0:	602b      	str	r3, [r5, #0]
 800bbd2:	f7f8 ff1c 	bl	8004a0e <_fstat>
 800bbd6:	1c43      	adds	r3, r0, #1
 800bbd8:	d102      	bne.n	800bbe0 <_fstat_r+0x1c>
 800bbda:	682b      	ldr	r3, [r5, #0]
 800bbdc:	b103      	cbz	r3, 800bbe0 <_fstat_r+0x1c>
 800bbde:	6023      	str	r3, [r4, #0]
 800bbe0:	bd38      	pop	{r3, r4, r5, pc}
 800bbe2:	bf00      	nop
 800bbe4:	20002a00 	.word	0x20002a00

0800bbe8 <_isatty_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	4d06      	ldr	r5, [pc, #24]	; (800bc04 <_isatty_r+0x1c>)
 800bbec:	2300      	movs	r3, #0
 800bbee:	4604      	mov	r4, r0
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	602b      	str	r3, [r5, #0]
 800bbf4:	f7f8 ff1b 	bl	8004a2e <_isatty>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d102      	bne.n	800bc02 <_isatty_r+0x1a>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b103      	cbz	r3, 800bc02 <_isatty_r+0x1a>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	20002a00 	.word	0x20002a00

0800bc08 <_lseek_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	4d07      	ldr	r5, [pc, #28]	; (800bc28 <_lseek_r+0x20>)
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	4608      	mov	r0, r1
 800bc10:	4611      	mov	r1, r2
 800bc12:	2200      	movs	r2, #0
 800bc14:	602a      	str	r2, [r5, #0]
 800bc16:	461a      	mov	r2, r3
 800bc18:	f7f8 ff14 	bl	8004a44 <_lseek>
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	d102      	bne.n	800bc26 <_lseek_r+0x1e>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	b103      	cbz	r3, 800bc26 <_lseek_r+0x1e>
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	20002a00 	.word	0x20002a00

0800bc2c <memcpy>:
 800bc2c:	440a      	add	r2, r1
 800bc2e:	4291      	cmp	r1, r2
 800bc30:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc34:	d100      	bne.n	800bc38 <memcpy+0xc>
 800bc36:	4770      	bx	lr
 800bc38:	b510      	push	{r4, lr}
 800bc3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc42:	4291      	cmp	r1, r2
 800bc44:	d1f9      	bne.n	800bc3a <memcpy+0xe>
 800bc46:	bd10      	pop	{r4, pc}

0800bc48 <memmove>:
 800bc48:	4288      	cmp	r0, r1
 800bc4a:	b510      	push	{r4, lr}
 800bc4c:	eb01 0402 	add.w	r4, r1, r2
 800bc50:	d902      	bls.n	800bc58 <memmove+0x10>
 800bc52:	4284      	cmp	r4, r0
 800bc54:	4623      	mov	r3, r4
 800bc56:	d807      	bhi.n	800bc68 <memmove+0x20>
 800bc58:	1e43      	subs	r3, r0, #1
 800bc5a:	42a1      	cmp	r1, r4
 800bc5c:	d008      	beq.n	800bc70 <memmove+0x28>
 800bc5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc66:	e7f8      	b.n	800bc5a <memmove+0x12>
 800bc68:	4402      	add	r2, r0
 800bc6a:	4601      	mov	r1, r0
 800bc6c:	428a      	cmp	r2, r1
 800bc6e:	d100      	bne.n	800bc72 <memmove+0x2a>
 800bc70:	bd10      	pop	{r4, pc}
 800bc72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc7a:	e7f7      	b.n	800bc6c <memmove+0x24>

0800bc7c <__malloc_lock>:
 800bc7c:	4801      	ldr	r0, [pc, #4]	; (800bc84 <__malloc_lock+0x8>)
 800bc7e:	f7ff b989 	b.w	800af94 <__retarget_lock_acquire_recursive>
 800bc82:	bf00      	nop
 800bc84:	200029f4 	.word	0x200029f4

0800bc88 <__malloc_unlock>:
 800bc88:	4801      	ldr	r0, [pc, #4]	; (800bc90 <__malloc_unlock+0x8>)
 800bc8a:	f7ff b984 	b.w	800af96 <__retarget_lock_release_recursive>
 800bc8e:	bf00      	nop
 800bc90:	200029f4 	.word	0x200029f4

0800bc94 <_realloc_r>:
 800bc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc98:	4680      	mov	r8, r0
 800bc9a:	4614      	mov	r4, r2
 800bc9c:	460e      	mov	r6, r1
 800bc9e:	b921      	cbnz	r1, 800bcaa <_realloc_r+0x16>
 800bca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bca4:	4611      	mov	r1, r2
 800bca6:	f7ff ba51 	b.w	800b14c <_malloc_r>
 800bcaa:	b92a      	cbnz	r2, 800bcb8 <_realloc_r+0x24>
 800bcac:	f7ff f9e2 	bl	800b074 <_free_r>
 800bcb0:	4625      	mov	r5, r4
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb8:	f000 f872 	bl	800bda0 <_malloc_usable_size_r>
 800bcbc:	4284      	cmp	r4, r0
 800bcbe:	4607      	mov	r7, r0
 800bcc0:	d802      	bhi.n	800bcc8 <_realloc_r+0x34>
 800bcc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bcc6:	d812      	bhi.n	800bcee <_realloc_r+0x5a>
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4640      	mov	r0, r8
 800bccc:	f7ff fa3e 	bl	800b14c <_malloc_r>
 800bcd0:	4605      	mov	r5, r0
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d0ed      	beq.n	800bcb2 <_realloc_r+0x1e>
 800bcd6:	42bc      	cmp	r4, r7
 800bcd8:	4622      	mov	r2, r4
 800bcda:	4631      	mov	r1, r6
 800bcdc:	bf28      	it	cs
 800bcde:	463a      	movcs	r2, r7
 800bce0:	f7ff ffa4 	bl	800bc2c <memcpy>
 800bce4:	4631      	mov	r1, r6
 800bce6:	4640      	mov	r0, r8
 800bce8:	f7ff f9c4 	bl	800b074 <_free_r>
 800bcec:	e7e1      	b.n	800bcb2 <_realloc_r+0x1e>
 800bcee:	4635      	mov	r5, r6
 800bcf0:	e7df      	b.n	800bcb2 <_realloc_r+0x1e>
	...

0800bcf4 <_read_r>:
 800bcf4:	b538      	push	{r3, r4, r5, lr}
 800bcf6:	4d07      	ldr	r5, [pc, #28]	; (800bd14 <_read_r+0x20>)
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	4608      	mov	r0, r1
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	2200      	movs	r2, #0
 800bd00:	602a      	str	r2, [r5, #0]
 800bd02:	461a      	mov	r2, r3
 800bd04:	f7f8 fe5a 	bl	80049bc <_read>
 800bd08:	1c43      	adds	r3, r0, #1
 800bd0a:	d102      	bne.n	800bd12 <_read_r+0x1e>
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	b103      	cbz	r3, 800bd12 <_read_r+0x1e>
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	bd38      	pop	{r3, r4, r5, pc}
 800bd14:	20002a00 	.word	0x20002a00

0800bd18 <_raise_r>:
 800bd18:	291f      	cmp	r1, #31
 800bd1a:	b538      	push	{r3, r4, r5, lr}
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	460d      	mov	r5, r1
 800bd20:	d904      	bls.n	800bd2c <_raise_r+0x14>
 800bd22:	2316      	movs	r3, #22
 800bd24:	6003      	str	r3, [r0, #0]
 800bd26:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd2e:	b112      	cbz	r2, 800bd36 <_raise_r+0x1e>
 800bd30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd34:	b94b      	cbnz	r3, 800bd4a <_raise_r+0x32>
 800bd36:	4620      	mov	r0, r4
 800bd38:	f000 f830 	bl	800bd9c <_getpid_r>
 800bd3c:	462a      	mov	r2, r5
 800bd3e:	4601      	mov	r1, r0
 800bd40:	4620      	mov	r0, r4
 800bd42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd46:	f000 b817 	b.w	800bd78 <_kill_r>
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d00a      	beq.n	800bd64 <_raise_r+0x4c>
 800bd4e:	1c59      	adds	r1, r3, #1
 800bd50:	d103      	bne.n	800bd5a <_raise_r+0x42>
 800bd52:	2316      	movs	r3, #22
 800bd54:	6003      	str	r3, [r0, #0]
 800bd56:	2001      	movs	r0, #1
 800bd58:	e7e7      	b.n	800bd2a <_raise_r+0x12>
 800bd5a:	2400      	movs	r4, #0
 800bd5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd60:	4628      	mov	r0, r5
 800bd62:	4798      	blx	r3
 800bd64:	2000      	movs	r0, #0
 800bd66:	e7e0      	b.n	800bd2a <_raise_r+0x12>

0800bd68 <raise>:
 800bd68:	4b02      	ldr	r3, [pc, #8]	; (800bd74 <raise+0xc>)
 800bd6a:	4601      	mov	r1, r0
 800bd6c:	6818      	ldr	r0, [r3, #0]
 800bd6e:	f7ff bfd3 	b.w	800bd18 <_raise_r>
 800bd72:	bf00      	nop
 800bd74:	20000068 	.word	0x20000068

0800bd78 <_kill_r>:
 800bd78:	b538      	push	{r3, r4, r5, lr}
 800bd7a:	4d07      	ldr	r5, [pc, #28]	; (800bd98 <_kill_r+0x20>)
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	4604      	mov	r4, r0
 800bd80:	4608      	mov	r0, r1
 800bd82:	4611      	mov	r1, r2
 800bd84:	602b      	str	r3, [r5, #0]
 800bd86:	f7f8 fdff 	bl	8004988 <_kill>
 800bd8a:	1c43      	adds	r3, r0, #1
 800bd8c:	d102      	bne.n	800bd94 <_kill_r+0x1c>
 800bd8e:	682b      	ldr	r3, [r5, #0]
 800bd90:	b103      	cbz	r3, 800bd94 <_kill_r+0x1c>
 800bd92:	6023      	str	r3, [r4, #0]
 800bd94:	bd38      	pop	{r3, r4, r5, pc}
 800bd96:	bf00      	nop
 800bd98:	20002a00 	.word	0x20002a00

0800bd9c <_getpid_r>:
 800bd9c:	f7f8 bdec 	b.w	8004978 <_getpid>

0800bda0 <_malloc_usable_size_r>:
 800bda0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bda4:	1f18      	subs	r0, r3, #4
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	bfbc      	itt	lt
 800bdaa:	580b      	ldrlt	r3, [r1, r0]
 800bdac:	18c0      	addlt	r0, r0, r3
 800bdae:	4770      	bx	lr

0800bdb0 <_init>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	bf00      	nop
 800bdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdb6:	bc08      	pop	{r3}
 800bdb8:	469e      	mov	lr, r3
 800bdba:	4770      	bx	lr

0800bdbc <_fini>:
 800bdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdbe:	bf00      	nop
 800bdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdc2:	bc08      	pop	{r3}
 800bdc4:	469e      	mov	lr, r3
 800bdc6:	4770      	bx	lr
