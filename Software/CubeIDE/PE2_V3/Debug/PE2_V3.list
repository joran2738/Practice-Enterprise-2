
PE2_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c150  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ea0  0800c2e0  0800c2e0  0001c2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e180  0800e180  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e180  0800e180  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e180  0800e180  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e180  0800e180  0001e180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e184  0800e184  0001e184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800e188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000293c  200000d0  0800e258  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a0c  0800e258  00022a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164a5  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003887  00000000  00000000  000365a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00039e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  0003af98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019017  00000000  00000000  0003bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001922d  00000000  00000000  00054ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865b2  00000000  00000000  0006e224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f47d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000528c  00000000  00000000  000f4828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c2c8 	.word	0x0800c2c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	0800c2c8 	.word	0x0800c2c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <initBrickbreaker>:
 *      -sets score to 0
 *      -sets the first lines of bricks to visible
 *      -draws the bricks
 *
 */
void initBrickbreaker() {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
    person.x = SCREEN_WIDTH/2;
 8000286:	4b4b      	ldr	r3, [pc, #300]	; (80003b4 <initBrickbreaker+0x134>)
 8000288:	2228      	movs	r2, #40	; 0x28
 800028a:	701a      	strb	r2, [r3, #0]
    person.y = SCREEN_HEIGHT - 5;
 800028c:	4b49      	ldr	r3, [pc, #292]	; (80003b4 <initBrickbreaker+0x134>)
 800028e:	2237      	movs	r2, #55	; 0x37
 8000290:	705a      	strb	r2, [r3, #1]
    ball.x = SCREEN_WIDTH/2;
 8000292:	4b49      	ldr	r3, [pc, #292]	; (80003b8 <initBrickbreaker+0x138>)
 8000294:	2228      	movs	r2, #40	; 0x28
 8000296:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000298:	4b47      	ldr	r3, [pc, #284]	; (80003b8 <initBrickbreaker+0x138>)
 800029a:	2236      	movs	r2, #54	; 0x36
 800029c:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 800029e:	4b46      	ldr	r3, [pc, #280]	; (80003b8 <initBrickbreaker+0x138>)
 80002a0:	2208      	movs	r2, #8
 80002a2:	721a      	strb	r2, [r3, #8]
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e041      	b.n	800032e <initBrickbreaker+0xae>
        for(int j = 0; j < 10; j++) {
 80002aa:	2300      	movs	r3, #0
 80002ac:	60bb      	str	r3, [r7, #8]
 80002ae:	e038      	b.n	8000322 <initBrickbreaker+0xa2>
            bricks[i][j].x = j * 8;
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	00d9      	lsls	r1, r3, #3
 80002b4:	4841      	ldr	r0, [pc, #260]	; (80003bc <initBrickbreaker+0x13c>)
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	4613      	mov	r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	4413      	add	r3, r2
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	68ba      	ldr	r2, [r7, #8]
 80002c2:	4413      	add	r3, r2
 80002c4:	011b      	lsls	r3, r3, #4
 80002c6:	4403      	add	r3, r0
 80002c8:	6019      	str	r1, [r3, #0]
            bricks[i][j].y = i + 8;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	f103 0108 	add.w	r1, r3, #8
 80002d0:	483a      	ldr	r0, [pc, #232]	; (80003bc <initBrickbreaker+0x13c>)
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	4613      	mov	r3, r2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4413      	add	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	4413      	add	r3, r2
 80002e0:	011b      	lsls	r3, r3, #4
 80002e2:	4403      	add	r3, r0
 80002e4:	3304      	adds	r3, #4
 80002e6:	6019      	str	r1, [r3, #0]
            bricks[i][j].visible = 0;
 80002e8:	4934      	ldr	r1, [pc, #208]	; (80003bc <initBrickbreaker+0x13c>)
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	4613      	mov	r3, r2
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	4413      	add	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	68ba      	ldr	r2, [r7, #8]
 80002f6:	4413      	add	r3, r2
 80002f8:	011b      	lsls	r3, r3, #4
 80002fa:	440b      	add	r3, r1
 80002fc:	3308      	adds	r3, #8
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = 1;
 8000302:	492e      	ldr	r1, [pc, #184]	; (80003bc <initBrickbreaker+0x13c>)
 8000304:	68fa      	ldr	r2, [r7, #12]
 8000306:	4613      	mov	r3, r2
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	4413      	add	r3, r2
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	4413      	add	r3, r2
 8000312:	011b      	lsls	r3, r3, #4
 8000314:	440b      	add	r3, r1
 8000316:	330c      	adds	r3, #12
 8000318:	2201      	movs	r2, #1
 800031a:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < 10; j++) {
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	3301      	adds	r3, #1
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	2b09      	cmp	r3, #9
 8000326:	ddc3      	ble.n	80002b0 <initBrickbreaker+0x30>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2b2f      	cmp	r3, #47	; 0x2f
 8000332:	ddba      	ble.n	80002aa <initBrickbreaker+0x2a>
        }
    }

    for (int i = 0; i < BRICK_LINES; i++) {
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	e027      	b.n	800038a <initBrickbreaker+0x10a>
        for(int j = 0; j < 10; j++) {
 800033a:	2300      	movs	r3, #0
 800033c:	603b      	str	r3, [r7, #0]
 800033e:	e01e      	b.n	800037e <initBrickbreaker+0xfe>
            bricks[i][j].visible = 1;
 8000340:	491e      	ldr	r1, [pc, #120]	; (80003bc <initBrickbreaker+0x13c>)
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	4613      	mov	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	4413      	add	r3, r2
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	683a      	ldr	r2, [r7, #0]
 800034e:	4413      	add	r3, r2
 8000350:	011b      	lsls	r3, r3, #4
 8000352:	440b      	add	r3, r1
 8000354:	3308      	adds	r3, #8
 8000356:	2201      	movs	r2, #1
 8000358:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = setBrickToughness();
 800035a:	f001 ff25 	bl	80021a8 <setBrickToughness>
 800035e:	4601      	mov	r1, r0
 8000360:	4816      	ldr	r0, [pc, #88]	; (80003bc <initBrickbreaker+0x13c>)
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	4613      	mov	r3, r2
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	4413      	add	r3, r2
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	4413      	add	r3, r2
 8000370:	011b      	lsls	r3, r3, #4
 8000372:	4403      	add	r3, r0
 8000374:	330c      	adds	r3, #12
 8000376:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < 10; j++) {
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	3301      	adds	r3, #1
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b09      	cmp	r3, #9
 8000382:	dddd      	ble.n	8000340 <initBrickbreaker+0xc0>
    for (int i = 0; i < BRICK_LINES; i++) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b09      	cmp	r3, #9
 800038e:	ddd4      	ble.n	800033a <initBrickbreaker+0xba>
        }
    }
    points = 0;
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <initBrickbreaker+0x140>)
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
    Displ_CLS(D_GREEN);
 8000396:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800039a:	f005 f9bf 	bl	800571c <Displ_CLS>
    setBgColor(D_GREEN);
 800039e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80003a2:	f002 f82b 	bl	80023fc <setBgColor>
    drawBricks();
 80003a6:	f001 ff33 	bl	8002210 <drawBricks>
}
 80003aa:	bf00      	nop
 80003ac:	3710      	adds	r7, #16
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000034 	.word	0x20000034
 80003b8:	20000038 	.word	0x20000038
 80003bc:	200000ec 	.word	0x200000ec
 80003c0:	20001eec 	.word	0x20001eec

080003c4 <playBall>:
 * @fn void playBall()
 * @brief handles the movement of the ball, changes its direction when needed
 * also checks if the ball hit a brick or the user bar
 *
 */
void playBall() {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
    if (ball.y == 0) {
 80003c8:	4b3d      	ldr	r3, [pc, #244]	; (80004c0 <playBall+0xfc>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d102      	bne.n	80003d6 <playBall+0x12>
        changeDirection(N);
 80003d0:	2000      	movs	r0, #0
 80003d2:	f000 f8ef 	bl	80005b4 <changeDirection>
    }
    if (ball.y == SCREEN_HEIGHT - 6) {
 80003d6:	4b3a      	ldr	r3, [pc, #232]	; (80004c0 <playBall+0xfc>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	2b36      	cmp	r3, #54	; 0x36
 80003dc:	d14d      	bne.n	800047a <playBall+0xb6>
        if (ball.x >= person.x - (BAR_SIZE/2) && ball.x <= person.x + (BAR_SIZE/2)) {
 80003de:	4b38      	ldr	r3, [pc, #224]	; (80004c0 <playBall+0xfc>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	4b38      	ldr	r3, [pc, #224]	; (80004c4 <playBall+0x100>)
 80003e4:	f993 3000 	ldrsb.w	r3, [r3]
 80003e8:	3b19      	subs	r3, #25
 80003ea:	429a      	cmp	r2, r3
 80003ec:	db0b      	blt.n	8000406 <playBall+0x42>
 80003ee:	4b34      	ldr	r3, [pc, #208]	; (80004c0 <playBall+0xfc>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	4b34      	ldr	r3, [pc, #208]	; (80004c4 <playBall+0x100>)
 80003f4:	f993 3000 	ldrsb.w	r3, [r3]
 80003f8:	3319      	adds	r3, #25
 80003fa:	429a      	cmp	r2, r3
 80003fc:	dc03      	bgt.n	8000406 <playBall+0x42>
            changeDirection(S);
 80003fe:	2004      	movs	r0, #4
 8000400:	f000 f8d8 	bl	80005b4 <changeDirection>
 8000404:	e039      	b.n	800047a <playBall+0xb6>
        } else {
            if (ball.x == person.x - (BAR_SIZE/2) - 1) {
 8000406:	4b2e      	ldr	r3, [pc, #184]	; (80004c0 <playBall+0xfc>)
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <playBall+0x100>)
 800040c:	f993 3000 	ldrsb.w	r3, [r3]
 8000410:	3b1a      	subs	r3, #26
 8000412:	429a      	cmp	r2, r3
 8000414:	d110      	bne.n	8000438 <playBall+0x74>
                if (ball.dir == SE) {
 8000416:	4b2a      	ldr	r3, [pc, #168]	; (80004c0 <playBall+0xfc>)
 8000418:	7a1b      	ldrb	r3, [r3, #8]
 800041a:	2b03      	cmp	r3, #3
 800041c:	d103      	bne.n	8000426 <playBall+0x62>
                    ball.dir = NW;
 800041e:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <playBall+0xfc>)
 8000420:	2207      	movs	r2, #7
 8000422:	721a      	strb	r2, [r3, #8]
 8000424:	e029      	b.n	800047a <playBall+0xb6>
                } else {
                    lives1--;
 8000426:	4b28      	ldr	r3, [pc, #160]	; (80004c8 <playBall+0x104>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	3b01      	subs	r3, #1
 800042c:	b2da      	uxtb	r2, r3
 800042e:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <playBall+0x104>)
 8000430:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 8000432:	f000 f961 	bl	80006f8 <gameEnd>
 8000436:	e020      	b.n	800047a <playBall+0xb6>
                }
            } else {
                if (ball.x == person.x + (BAR_SIZE/2) + 1) {
 8000438:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <playBall+0xfc>)
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <playBall+0x100>)
 800043e:	f993 3000 	ldrsb.w	r3, [r3]
 8000442:	331a      	adds	r3, #26
 8000444:	429a      	cmp	r2, r3
 8000446:	d110      	bne.n	800046a <playBall+0xa6>
                    if (ball.dir == SW) {
 8000448:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <playBall+0xfc>)
 800044a:	7a1b      	ldrb	r3, [r3, #8]
 800044c:	2b05      	cmp	r3, #5
 800044e:	d103      	bne.n	8000458 <playBall+0x94>
                        ball.dir = NE;
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <playBall+0xfc>)
 8000452:	2201      	movs	r2, #1
 8000454:	721a      	strb	r2, [r3, #8]
 8000456:	e010      	b.n	800047a <playBall+0xb6>
                    } else {
                        lives1--;
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <playBall+0x104>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	3b01      	subs	r3, #1
 800045e:	b2da      	uxtb	r2, r3
 8000460:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <playBall+0x104>)
 8000462:	701a      	strb	r2, [r3, #0]
                        gameEnd();
 8000464:	f000 f948 	bl	80006f8 <gameEnd>
 8000468:	e007      	b.n	800047a <playBall+0xb6>
                    }
                } else {
                    lives1--;
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <playBall+0x104>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	3b01      	subs	r3, #1
 8000470:	b2da      	uxtb	r2, r3
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <playBall+0x104>)
 8000474:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 8000476:	f000 f93f 	bl	80006f8 <gameEnd>
                }
            }
        }
    }
    if (ball.x == 0) {
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <playBall+0xfc>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d102      	bne.n	8000488 <playBall+0xc4>
        changeDirection(W);
 8000482:	2006      	movs	r0, #6
 8000484:	f000 f896 	bl	80005b4 <changeDirection>
    }
    if (ball.x == SCREEN_WIDTH - 1) {
 8000488:	4b0d      	ldr	r3, [pc, #52]	; (80004c0 <playBall+0xfc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b4f      	cmp	r3, #79	; 0x4f
 800048e:	d102      	bne.n	8000496 <playBall+0xd2>
        changeDirection(E);
 8000490:	2002      	movs	r0, #2
 8000492:	f000 f88f 	bl	80005b4 <changeDirection>
    }

    if (guardian == 1) {
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <playBall+0x108>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d10a      	bne.n	80004b4 <playBall+0xf0>
        if (ball.y == person.y - 2) {
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <playBall+0xfc>)
 80004a0:	685a      	ldr	r2, [r3, #4]
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <playBall+0x100>)
 80004a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80004a8:	3b02      	subs	r3, #2
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d102      	bne.n	80004b4 <playBall+0xf0>
            changeDirection(S);
 80004ae:	2004      	movs	r0, #4
 80004b0:	f000 f880 	bl	80005b4 <changeDirection>
        }
    }

    checkBrickHit();
 80004b4:	f000 fa14 	bl	80008e0 <checkBrickHit>
    moveBall();
 80004b8:	f000 f80a 	bl	80004d0 <moveBall>
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000038 	.word	0x20000038
 80004c4:	20000034 	.word	0x20000034
 80004c8:	20000002 	.word	0x20000002
 80004cc:	20001eee 	.word	0x20001eee

080004d0 <moveBall>:
/**
 * @fn void moveBall()
 * @brief moves the ball along it's direction
 *
 */
void moveBall() {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80004d6:	4b35      	ldr	r3, [pc, #212]	; (80005ac <moveBall+0xdc>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	b29b      	uxth	r3, r3
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	b298      	uxth	r0, r3
 80004e0:	4b32      	ldr	r3, [pc, #200]	; (80005ac <moveBall+0xdc>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	b299      	uxth	r1, r3
 80004ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2304      	movs	r3, #4
 80004f2:	2204      	movs	r2, #4
 80004f4:	f004 ff5e 	bl	80053b4 <Displ_FillArea>
    switch (ball.dir) {
 80004f8:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <moveBall+0xdc>)
 80004fa:	7a1b      	ldrb	r3, [r3, #8]
 80004fc:	2b08      	cmp	r3, #8
 80004fe:	d84d      	bhi.n	800059c <moveBall+0xcc>
 8000500:	a201      	add	r2, pc, #4	; (adr r2, 8000508 <moveBall+0x38>)
 8000502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000506:	bf00      	nop
 8000508:	0800052d 	.word	0x0800052d
 800050c:	08000545 	.word	0x08000545
 8000510:	0800059d 	.word	0x0800059d
 8000514:	08000571 	.word	0x08000571
 8000518:	08000539 	.word	0x08000539
 800051c:	08000587 	.word	0x08000587
 8000520:	0800059d 	.word	0x0800059d
 8000524:	0800055b 	.word	0x0800055b
 8000528:	080005a5 	.word	0x080005a5
    case N:
        ball.y -= 1;
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <moveBall+0xdc>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	4a1e      	ldr	r2, [pc, #120]	; (80005ac <moveBall+0xdc>)
 8000534:	6053      	str	r3, [r2, #4]
        break;
 8000536:	e036      	b.n	80005a6 <moveBall+0xd6>
    case S:
        ball.y += 1;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <moveBall+0xdc>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	3301      	adds	r3, #1
 800053e:	4a1b      	ldr	r2, [pc, #108]	; (80005ac <moveBall+0xdc>)
 8000540:	6053      	str	r3, [r2, #4]
        break;
 8000542:	e030      	b.n	80005a6 <moveBall+0xd6>
    case NE:
        ball.y -= 1;
 8000544:	4b19      	ldr	r3, [pc, #100]	; (80005ac <moveBall+0xdc>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	3b01      	subs	r3, #1
 800054a:	4a18      	ldr	r2, [pc, #96]	; (80005ac <moveBall+0xdc>)
 800054c:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <moveBall+0xdc>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	4a15      	ldr	r2, [pc, #84]	; (80005ac <moveBall+0xdc>)
 8000556:	6013      	str	r3, [r2, #0]
        break;
 8000558:	e025      	b.n	80005a6 <moveBall+0xd6>
    case NW:
        ball.y -= 1;
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <moveBall+0xdc>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	3b01      	subs	r3, #1
 8000560:	4a12      	ldr	r2, [pc, #72]	; (80005ac <moveBall+0xdc>)
 8000562:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <moveBall+0xdc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3b01      	subs	r3, #1
 800056a:	4a10      	ldr	r2, [pc, #64]	; (80005ac <moveBall+0xdc>)
 800056c:	6013      	str	r3, [r2, #0]
        break;
 800056e:	e01a      	b.n	80005a6 <moveBall+0xd6>
    case SE:
        ball.y += 1;
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <moveBall+0xdc>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	3301      	adds	r3, #1
 8000576:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <moveBall+0xdc>)
 8000578:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <moveBall+0xdc>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <moveBall+0xdc>)
 8000582:	6013      	str	r3, [r2, #0]
        break;
 8000584:	e00f      	b.n	80005a6 <moveBall+0xd6>
    case SW:
        ball.y += 1;
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <moveBall+0xdc>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <moveBall+0xdc>)
 800058e:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <moveBall+0xdc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3b01      	subs	r3, #1
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <moveBall+0xdc>)
 8000598:	6013      	str	r3, [r2, #0]
        break;
 800059a:	e004      	b.n	80005a6 <moveBall+0xd6>
    case still:
        break;
    default:
        printf("You shouldn't be here\r\n");
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <moveBall+0xe0>)
 800059e:	f00a fb87 	bl	800acb0 <puts>
    }

}
 80005a2:	e000      	b.n	80005a6 <moveBall+0xd6>
        break;
 80005a4:	bf00      	nop
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000038 	.word	0x20000038
 80005b0:	0800c2e0 	.word	0x0800c2e0

080005b4 <changeDirection>:
 * @fn void changeDirection(directions)
 * @brief changes the direction of the ball based on the direction of the obstacle the ball hit
 *
 * @param dirHit the direction where the ball hit an obstacle
 */
void changeDirection(directions dirHit) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
    if (dirHit == N) {
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d129      	bne.n	8000618 <changeDirection+0x64>
        switch (ball.dir) {
 80005c4:	4b4a      	ldr	r3, [pc, #296]	; (80006f0 <changeDirection+0x13c>)
 80005c6:	7a1b      	ldrb	r3, [r3, #8]
 80005c8:	2b08      	cmp	r3, #8
 80005ca:	d821      	bhi.n	8000610 <changeDirection+0x5c>
 80005cc:	a201      	add	r2, pc, #4	; (adr r2, 80005d4 <changeDirection+0x20>)
 80005ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d2:	bf00      	nop
 80005d4:	080005f9 	.word	0x080005f9
 80005d8:	08000609 	.word	0x08000609
 80005dc:	08000611 	.word	0x08000611
 80005e0:	08000611 	.word	0x08000611
 80005e4:	08000611 	.word	0x08000611
 80005e8:	08000611 	.word	0x08000611
 80005ec:	08000611 	.word	0x08000611
 80005f0:	08000601 	.word	0x08000601
 80005f4:	0800061d 	.word	0x0800061d
        case N:
            ball.dir = S;
 80005f8:	4b3d      	ldr	r3, [pc, #244]	; (80006f0 <changeDirection+0x13c>)
 80005fa:	2204      	movs	r2, #4
 80005fc:	721a      	strb	r2, [r3, #8]
            break;
 80005fe:	e00e      	b.n	800061e <changeDirection+0x6a>
        case NW:
            ball.dir = SW;
 8000600:	4b3b      	ldr	r3, [pc, #236]	; (80006f0 <changeDirection+0x13c>)
 8000602:	2205      	movs	r2, #5
 8000604:	721a      	strb	r2, [r3, #8]
            break;
 8000606:	e00a      	b.n	800061e <changeDirection+0x6a>
        case NE:
            ball.dir = SE;
 8000608:	4b39      	ldr	r3, [pc, #228]	; (80006f0 <changeDirection+0x13c>)
 800060a:	2203      	movs	r2, #3
 800060c:	721a      	strb	r2, [r3, #8]
            break;
 800060e:	e006      	b.n	800061e <changeDirection+0x6a>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 8000610:	4838      	ldr	r0, [pc, #224]	; (80006f4 <changeDirection+0x140>)
 8000612:	f00a fb4d 	bl	800acb0 <puts>
 8000616:	e002      	b.n	800061e <changeDirection+0x6a>
        }
    }
 8000618:	bf00      	nop
 800061a:	e000      	b.n	800061e <changeDirection+0x6a>
            break;
 800061c:	bf00      	nop

    if (dirHit == E) {
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d116      	bne.n	8000652 <changeDirection+0x9e>
        switch (ball.dir) {
 8000624:	4b32      	ldr	r3, [pc, #200]	; (80006f0 <changeDirection+0x13c>)
 8000626:	7a1b      	ldrb	r3, [r3, #8]
 8000628:	2b08      	cmp	r3, #8
 800062a:	d014      	beq.n	8000656 <changeDirection+0xa2>
 800062c:	2b08      	cmp	r3, #8
 800062e:	dc0c      	bgt.n	800064a <changeDirection+0x96>
 8000630:	2b01      	cmp	r3, #1
 8000632:	d002      	beq.n	800063a <changeDirection+0x86>
 8000634:	2b03      	cmp	r3, #3
 8000636:	d004      	beq.n	8000642 <changeDirection+0x8e>
 8000638:	e007      	b.n	800064a <changeDirection+0x96>
        case NE:
            ball.dir = NW;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <changeDirection+0x13c>)
 800063c:	2207      	movs	r2, #7
 800063e:	721a      	strb	r2, [r3, #8]
            break;
 8000640:	e00a      	b.n	8000658 <changeDirection+0xa4>
        case SE:
            ball.dir = SW;
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <changeDirection+0x13c>)
 8000644:	2205      	movs	r2, #5
 8000646:	721a      	strb	r2, [r3, #8]
            break;
 8000648:	e006      	b.n	8000658 <changeDirection+0xa4>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 800064a:	482a      	ldr	r0, [pc, #168]	; (80006f4 <changeDirection+0x140>)
 800064c:	f00a fb30 	bl	800acb0 <puts>
 8000650:	e002      	b.n	8000658 <changeDirection+0xa4>
        }
    }
 8000652:	bf00      	nop
 8000654:	e000      	b.n	8000658 <changeDirection+0xa4>
            break;
 8000656:	bf00      	nop

    if (dirHit == S) {
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b04      	cmp	r3, #4
 800065c:	d124      	bne.n	80006a8 <changeDirection+0xf4>
        switch (ball.dir) {
 800065e:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <changeDirection+0x13c>)
 8000660:	7a1b      	ldrb	r3, [r3, #8]
 8000662:	3b03      	subs	r3, #3
 8000664:	2b05      	cmp	r3, #5
 8000666:	d81b      	bhi.n	80006a0 <changeDirection+0xec>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <changeDirection+0xbc>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	08000691 	.word	0x08000691
 8000674:	08000689 	.word	0x08000689
 8000678:	08000699 	.word	0x08000699
 800067c:	080006a1 	.word	0x080006a1
 8000680:	080006a1 	.word	0x080006a1
 8000684:	080006ad 	.word	0x080006ad
        case S:
            ball.dir = N;
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <changeDirection+0x13c>)
 800068a:	2200      	movs	r2, #0
 800068c:	721a      	strb	r2, [r3, #8]
            break;
 800068e:	e00e      	b.n	80006ae <changeDirection+0xfa>
        case SE:
            ball.dir = NE;
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <changeDirection+0x13c>)
 8000692:	2201      	movs	r2, #1
 8000694:	721a      	strb	r2, [r3, #8]
            break;
 8000696:	e00a      	b.n	80006ae <changeDirection+0xfa>
        case SW:
            ball.dir = NW;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <changeDirection+0x13c>)
 800069a:	2207      	movs	r2, #7
 800069c:	721a      	strb	r2, [r3, #8]
            break;
 800069e:	e006      	b.n	80006ae <changeDirection+0xfa>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 80006a0:	4814      	ldr	r0, [pc, #80]	; (80006f4 <changeDirection+0x140>)
 80006a2:	f00a fb05 	bl	800acb0 <puts>
 80006a6:	e002      	b.n	80006ae <changeDirection+0xfa>
        }
    }
 80006a8:	bf00      	nop
 80006aa:	e000      	b.n	80006ae <changeDirection+0xfa>
            break;
 80006ac:	bf00      	nop

    if (dirHit == W) {
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d115      	bne.n	80006e0 <changeDirection+0x12c>
        switch (ball.dir) {
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <changeDirection+0x13c>)
 80006b6:	7a1b      	ldrb	r3, [r3, #8]
 80006b8:	2b08      	cmp	r3, #8
 80006ba:	d013      	beq.n	80006e4 <changeDirection+0x130>
 80006bc:	2b08      	cmp	r3, #8
 80006be:	dc0b      	bgt.n	80006d8 <changeDirection+0x124>
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d005      	beq.n	80006d0 <changeDirection+0x11c>
 80006c4:	2b07      	cmp	r3, #7
 80006c6:	d107      	bne.n	80006d8 <changeDirection+0x124>
        case NW:
            ball.dir = NE;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <changeDirection+0x13c>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	721a      	strb	r2, [r3, #8]
            break;
 80006ce:	e00a      	b.n	80006e6 <changeDirection+0x132>
        case SW:
            ball.dir = SE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <changeDirection+0x13c>)
 80006d2:	2203      	movs	r2, #3
 80006d4:	721a      	strb	r2, [r3, #8]
            break;
 80006d6:	e006      	b.n	80006e6 <changeDirection+0x132>
        case still:
            break;
        default:
            printf("You shouldn't be here\r\n");
 80006d8:	4806      	ldr	r0, [pc, #24]	; (80006f4 <changeDirection+0x140>)
 80006da:	f00a fae9 	bl	800acb0 <puts>
        }
    }
}
 80006de:	e002      	b.n	80006e6 <changeDirection+0x132>
    }
 80006e0:	bf00      	nop
 80006e2:	e000      	b.n	80006e6 <changeDirection+0x132>
            break;
 80006e4:	bf00      	nop
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000038 	.word	0x20000038
 80006f4:	0800c2e0 	.word	0x0800c2e0

080006f8 <gameEnd>:
 * @fn void gameEnd()
 * @brief called when the player has lost a life, resets the player bar and ball to the initial position
 * if the player has lost all his lives, also resets score
 *
 */
void gameEnd() {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af02      	add	r7, sp, #8
    Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 10, D_GREEN);
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <gameEnd+0x90>)
 8000700:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000704:	3b01      	subs	r3, #1
 8000706:	b29b      	uxth	r3, r3
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	b299      	uxth	r1, r3
 800070c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	230a      	movs	r3, #10
 8000714:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000718:	2000      	movs	r0, #0
 800071a:	f004 fe4b 	bl	80053b4 <Displ_FillArea>
    person.x = (SCREEN_WIDTH)/2;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <gameEnd+0x90>)
 8000720:	2228      	movs	r2, #40	; 0x28
 8000722:	701a      	strb	r2, [r3, #0]
    ball.x = person.x;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <gameEnd+0x90>)
 8000726:	f993 3000 	ldrsb.w	r3, [r3]
 800072a:	461a      	mov	r2, r3
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <gameEnd+0x94>)
 800072e:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <gameEnd+0x94>)
 8000732:	2236      	movs	r2, #54	; 0x36
 8000734:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <gameEnd+0x94>)
 8000738:	2208      	movs	r2, #8
 800073a:	721a      	strb	r2, [r3, #8]

    if (lives1 <= 0) {
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <gameEnd+0x98>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d11e      	bne.n	8000782 <gameEnd+0x8a>
        if (points > highScore) {
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <gameEnd+0x9c>)
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <gameEnd+0xa0>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d903      	bls.n	8000758 <gameEnd+0x60>
            highScore = points;
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <gameEnd+0x9c>)
 8000752:	781a      	ldrb	r2, [r3, #0]
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <gameEnd+0xa0>)
 8000756:	701a      	strb	r2, [r3, #0]
        }

        start = 0;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <gameEnd+0xa4>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
        points = 0;
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <gameEnd+0x9c>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
        lives1 = 3;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <gameEnd+0x98>)
 8000766:	2203      	movs	r2, #3
 8000768:	701a      	strb	r2, [r3, #0]
        initBrickbreaker();
 800076a:	f7ff fd89 	bl	8000280 <initBrickbreaker>
        HAL_UART_Transmit(&huart2, (uint8_t *)"L", strlen("L"), 300);
 800076e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000772:	2201      	movs	r2, #1
 8000774:	490a      	ldr	r1, [pc, #40]	; (80007a0 <gameEnd+0xa8>)
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <gameEnd+0xac>)
 8000778:	f009 fab8 	bl	8009cec <HAL_UART_Transmit>
        setGameState(loss);
 800077c:	2002      	movs	r0, #2
 800077e:	f003 f8c3 	bl	8003908 <setGameState>
    }
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000034 	.word	0x20000034
 800078c:	20000038 	.word	0x20000038
 8000790:	20000002 	.word	0x20000002
 8000794:	20001eec 	.word	0x20001eec
 8000798:	20001eed 	.word	0x20001eed
 800079c:	20001ef3 	.word	0x20001ef3
 80007a0:	0800c2f8 	.word	0x0800c2f8
 80007a4:	20001ff0 	.word	0x20001ff0

080007a8 <lowerBricks>:
/**
 * @fn void lowerBricks()
 * @brief lowers the bricks to the next level
 *
 */
void lowerBricks() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 80007ae:	232e      	movs	r3, #46	; 0x2e
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e03d      	b.n	8000830 <lowerBricks+0x88>
        for (int j = 0; j < 10; j++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	e034      	b.n	8000824 <lowerBricks+0x7c>
            bricks[i + 1][j].visible = bricks[i][j].visible;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	482d      	ldr	r0, [pc, #180]	; (8000874 <lowerBricks+0xcc>)
 80007c0:	68f9      	ldr	r1, [r7, #12]
 80007c2:	460b      	mov	r3, r1
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	68b9      	ldr	r1, [r7, #8]
 80007cc:	440b      	add	r3, r1
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	4403      	add	r3, r0
 80007d2:	3308      	adds	r3, #8
 80007d4:	6819      	ldr	r1, [r3, #0]
 80007d6:	4827      	ldr	r0, [pc, #156]	; (8000874 <lowerBricks+0xcc>)
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	4413      	add	r3, r2
 80007e4:	011b      	lsls	r3, r3, #4
 80007e6:	4403      	add	r3, r0
 80007e8:	3308      	adds	r3, #8
 80007ea:	6019      	str	r1, [r3, #0]
            bricks[i + 1][j].toughness = bricks[i][j].toughness;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	4820      	ldr	r0, [pc, #128]	; (8000874 <lowerBricks+0xcc>)
 80007f2:	68f9      	ldr	r1, [r7, #12]
 80007f4:	460b      	mov	r3, r1
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	440b      	add	r3, r1
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	440b      	add	r3, r1
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	4403      	add	r3, r0
 8000804:	330c      	adds	r3, #12
 8000806:	6819      	ldr	r1, [r3, #0]
 8000808:	481a      	ldr	r0, [pc, #104]	; (8000874 <lowerBricks+0xcc>)
 800080a:	4613      	mov	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4413      	add	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	4413      	add	r3, r2
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	4403      	add	r3, r0
 800081a:	330c      	adds	r3, #12
 800081c:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 10; j++) {
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	3301      	adds	r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	2b09      	cmp	r3, #9
 8000828:	ddc7      	ble.n	80007ba <lowerBricks+0x12>
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	3b01      	subs	r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	dabe      	bge.n	80007b4 <lowerBricks+0xc>
        }
    }
    for(int j = 0; j < 10; j++) {
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	e012      	b.n	8000862 <lowerBricks+0xba>
        bricks[0][j].visible = 1;
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <lowerBricks+0xcc>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	011b      	lsls	r3, r3, #4
 8000842:	4413      	add	r3, r2
 8000844:	3308      	adds	r3, #8
 8000846:	2201      	movs	r2, #1
 8000848:	601a      	str	r2, [r3, #0]
        bricks[0][j].toughness = setBrickToughness();
 800084a:	f001 fcad 	bl	80021a8 <setBrickToughness>
 800084e:	4602      	mov	r2, r0
 8000850:	4908      	ldr	r1, [pc, #32]	; (8000874 <lowerBricks+0xcc>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	440b      	add	r3, r1
 8000858:	330c      	adds	r3, #12
 800085a:	601a      	str	r2, [r3, #0]
    for(int j = 0; j < 10; j++) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3301      	adds	r3, #1
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b09      	cmp	r3, #9
 8000866:	dde9      	ble.n	800083c <lowerBricks+0x94>
    }

    drawBricks();
 8000868:	f001 fcd2 	bl	8002210 <drawBricks>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000ec 	.word	0x200000ec

08000878 <checkGameOver>:
/**
 * @fn void checkGameOver()
 * @brief checks if the final line of active bricks has reaches the player bar
 *
 */
void checkGameOver() {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
    for (int j = 0; j < 10; j++) {
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	e01d      	b.n	80008c0 <checkGameOver+0x48>
        if (bricks[MAX_BRICK_LINES - 1][j].visible == 1) {
 8000884:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <checkGameOver+0x58>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	011b      	lsls	r3, r3, #4
 800088a:	4413      	add	r3, r2
 800088c:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8000890:	3308      	adds	r3, #8
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d110      	bne.n	80008ba <checkGameOver+0x42>

            lives1 = 0;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <checkGameOver+0x5c>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
            ball.x = person.x;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <checkGameOver+0x60>)
 80008a0:	f993 3000 	ldrsb.w	r3, [r3]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <checkGameOver+0x64>)
 80008a8:	601a      	str	r2, [r3, #0]
            ball.y = SCREEN_HEIGHT - 6;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <checkGameOver+0x64>)
 80008ac:	2236      	movs	r2, #54	; 0x36
 80008ae:	605a      	str	r2, [r3, #4]
            ball.dir = still;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <checkGameOver+0x64>)
 80008b2:	2208      	movs	r2, #8
 80008b4:	721a      	strb	r2, [r3, #8]
            gameEnd();
 80008b6:	f7ff ff1f 	bl	80006f8 <gameEnd>
    for (int j = 0; j < 10; j++) {
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3301      	adds	r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b09      	cmp	r3, #9
 80008c4:	ddde      	ble.n	8000884 <checkGameOver+0xc>
        }
    }
}
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200000ec 	.word	0x200000ec
 80008d4:	20000002 	.word	0x20000002
 80008d8:	20000034 	.word	0x20000034
 80008dc:	20000038 	.word	0x20000038

080008e0 <checkBrickHit>:
/**
 * @fn void checkBrickHit()
 * @brief checks if the ball hit one or more bricks
 *
 */
void checkBrickHit() {
 80008e0:	b5b0      	push	{r4, r5, r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af02      	add	r7, sp, #8
    uint8_t bricksHit = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	71fb      	strb	r3, [r7, #7]
    switch (ball.dir) {
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <checkBrickHit+0x3c>)
 80008ec:	7a1b      	ldrb	r3, [r3, #8]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	2b07      	cmp	r3, #7
 80008f2:	f201 829d 	bhi.w	8001e30 <checkBrickHit+0x1550>
 80008f6:	a201      	add	r2, pc, #4	; (adr r2, 80008fc <checkBrickHit+0x1c>)
 80008f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fc:	08000e79 	.word	0x08000e79
 8000900:	08001e31 	.word	0x08001e31
 8000904:	080013d1 	.word	0x080013d1
 8000908:	08001e31 	.word	0x08001e31
 800090c:	08001909 	.word	0x08001909
 8000910:	08001e31 	.word	0x08001e31
 8000914:	08000921 	.word	0x08000921
 8000918:	08001e3b 	.word	0x08001e3b
 800091c:	20000038 	.word	0x20000038
    case NW :
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 8000920:	4bb7      	ldr	r3, [pc, #732]	; (8000c00 <checkBrickHit+0x320>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f1a3 0209 	sub.w	r2, r3, #9
 8000928:	4bb5      	ldr	r3, [pc, #724]	; (8000c00 <checkBrickHit+0x320>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	da00      	bge.n	8000932 <checkBrickHit+0x52>
 8000930:	3307      	adds	r3, #7
 8000932:	10db      	asrs	r3, r3, #3
 8000934:	4618      	mov	r0, r3
 8000936:	49b3      	ldr	r1, [pc, #716]	; (8000c04 <checkBrickHit+0x324>)
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4403      	add	r3, r0
 8000942:	011b      	lsls	r3, r3, #4
 8000944:	440b      	add	r3, r1
 8000946:	3308      	adds	r3, #8
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b01      	cmp	r3, #1
 800094c:	f040 80bc 	bne.w	8000ac8 <checkBrickHit+0x1e8>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000950:	4bab      	ldr	r3, [pc, #684]	; (8000c00 <checkBrickHit+0x320>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f1a3 0209 	sub.w	r2, r3, #9
 8000958:	4ba9      	ldr	r3, [pc, #676]	; (8000c00 <checkBrickHit+0x320>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	da00      	bge.n	8000962 <checkBrickHit+0x82>
 8000960:	3307      	adds	r3, #7
 8000962:	10db      	asrs	r3, r3, #3
 8000964:	4619      	mov	r1, r3
 8000966:	48a7      	ldr	r0, [pc, #668]	; (8000c04 <checkBrickHit+0x324>)
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	440b      	add	r3, r1
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	4403      	add	r3, r0
 8000976:	330c      	adds	r3, #12
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	1e58      	subs	r0, r3, #1
 800097c:	4ca1      	ldr	r4, [pc, #644]	; (8000c04 <checkBrickHit+0x324>)
 800097e:	4613      	mov	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	440b      	add	r3, r1
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	4423      	add	r3, r4
 800098c:	330c      	adds	r3, #12
 800098e:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000990:	4b9b      	ldr	r3, [pc, #620]	; (8000c00 <checkBrickHit+0x320>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f1a3 0209 	sub.w	r2, r3, #9
 8000998:	4b99      	ldr	r3, [pc, #612]	; (8000c00 <checkBrickHit+0x320>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	da00      	bge.n	80009a2 <checkBrickHit+0xc2>
 80009a0:	3307      	adds	r3, #7
 80009a2:	10db      	asrs	r3, r3, #3
 80009a4:	4618      	mov	r0, r3
 80009a6:	4997      	ldr	r1, [pc, #604]	; (8000c04 <checkBrickHit+0x324>)
 80009a8:	4613      	mov	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4403      	add	r3, r0
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	440b      	add	r3, r1
 80009b6:	330c      	adds	r3, #12
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	dc31      	bgt.n	8000a22 <checkBrickHit+0x142>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 80009be:	4b90      	ldr	r3, [pc, #576]	; (8000c00 <checkBrickHit+0x320>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f1a3 0209 	sub.w	r2, r3, #9
 80009c6:	4b8e      	ldr	r3, [pc, #568]	; (8000c00 <checkBrickHit+0x320>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	da00      	bge.n	80009d0 <checkBrickHit+0xf0>
 80009ce:	3307      	adds	r3, #7
 80009d0:	10db      	asrs	r3, r3, #3
 80009d2:	4618      	mov	r0, r3
 80009d4:	498b      	ldr	r1, [pc, #556]	; (8000c04 <checkBrickHit+0x324>)
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4403      	add	r3, r0
 80009e0:	011b      	lsls	r3, r3, #4
 80009e2:	440b      	add	r3, r1
 80009e4:	3308      	adds	r3, #8
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
                points++;
 80009ea:	4b87      	ldr	r3, [pc, #540]	; (8000c08 <checkBrickHit+0x328>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	3301      	adds	r3, #1
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b85      	ldr	r3, [pc, #532]	; (8000c08 <checkBrickHit+0x328>)
 80009f4:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 80009f6:	4b82      	ldr	r3, [pc, #520]	; (8000c00 <checkBrickHit+0x320>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	da00      	bge.n	8000a00 <checkBrickHit+0x120>
 80009fe:	3307      	adds	r3, #7
 8000a00:	10db      	asrs	r3, r3, #3
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b7e      	ldr	r3, [pc, #504]	; (8000c00 <checkBrickHit+0x320>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	3b09      	subs	r3, #9
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4610      	mov	r0, r2
 8000a0e:	f001 fa29 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y - 1 - 8);
 8000a12:	4b7b      	ldr	r3, [pc, #492]	; (8000c00 <checkBrickHit+0x320>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	3b09      	subs	r3, #9
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 fcb9 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 8000a22:	4b77      	ldr	r3, [pc, #476]	; (8000c00 <checkBrickHit+0x320>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f1a3 0209 	sub.w	r2, r3, #9
 8000a2a:	4b75      	ldr	r3, [pc, #468]	; (8000c00 <checkBrickHit+0x320>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	da00      	bge.n	8000a34 <checkBrickHit+0x154>
 8000a32:	3307      	adds	r3, #7
 8000a34:	10db      	asrs	r3, r3, #3
 8000a36:	4618      	mov	r0, r3
 8000a38:	4972      	ldr	r1, [pc, #456]	; (8000c04 <checkBrickHit+0x324>)
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	4413      	add	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4403      	add	r3, r0
 8000a44:	011b      	lsls	r3, r3, #4
 8000a46:	440b      	add	r3, r1
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	b298      	uxth	r0, r3
 8000a50:	4b6b      	ldr	r3, [pc, #428]	; (8000c00 <checkBrickHit+0x320>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f1a3 0209 	sub.w	r2, r3, #9
 8000a58:	4b69      	ldr	r3, [pc, #420]	; (8000c00 <checkBrickHit+0x320>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	da00      	bge.n	8000a62 <checkBrickHit+0x182>
 8000a60:	3307      	adds	r3, #7
 8000a62:	10db      	asrs	r3, r3, #3
 8000a64:	461c      	mov	r4, r3
 8000a66:	4967      	ldr	r1, [pc, #412]	; (8000c04 <checkBrickHit+0x324>)
 8000a68:	4613      	mov	r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4423      	add	r3, r4
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	440b      	add	r3, r1
 8000a76:	3304      	adds	r3, #4
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	b299      	uxth	r1, r3
 8000a80:	4b5f      	ldr	r3, [pc, #380]	; (8000c00 <checkBrickHit+0x320>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f1a3 0209 	sub.w	r2, r3, #9
 8000a88:	4b5d      	ldr	r3, [pc, #372]	; (8000c00 <checkBrickHit+0x320>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	da00      	bge.n	8000a92 <checkBrickHit+0x1b2>
 8000a90:	3307      	adds	r3, #7
 8000a92:	10db      	asrs	r3, r3, #3
 8000a94:	461d      	mov	r5, r3
 8000a96:	4c5b      	ldr	r4, [pc, #364]	; (8000c04 <checkBrickHit+0x324>)
 8000a98:	4613      	mov	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	442b      	add	r3, r5
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	4423      	add	r3, r4
 8000aa6:	330c      	adds	r3, #12
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a58      	ldr	r2, [pc, #352]	; (8000c0c <checkBrickHit+0x32c>)
 8000aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	f004 fc7c 	bl	80053b4 <Displ_FillArea>
            bricksHit++;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]
            ball.dir = SW;
 8000ac2:	4b4f      	ldr	r3, [pc, #316]	; (8000c00 <checkBrickHit+0x320>)
 8000ac4:	2205      	movs	r2, #5
 8000ac6:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 8000ac8:	4b4d      	ldr	r3, [pc, #308]	; (8000c00 <checkBrickHit+0x320>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f1a3 0208 	sub.w	r2, r3, #8
 8000ad0:	4b4b      	ldr	r3, [pc, #300]	; (8000c00 <checkBrickHit+0x320>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	da00      	bge.n	8000adc <checkBrickHit+0x1fc>
 8000ada:	3307      	adds	r3, #7
 8000adc:	10db      	asrs	r3, r3, #3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	4948      	ldr	r1, [pc, #288]	; (8000c04 <checkBrickHit+0x324>)
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	4403      	add	r3, r0
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	440b      	add	r3, r1
 8000af0:	3308      	adds	r3, #8
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	f040 80d8 	bne.w	8000caa <checkBrickHit+0x3ca>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8000afa:	4b41      	ldr	r3, [pc, #260]	; (8000c00 <checkBrickHit+0x320>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f1a3 0208 	sub.w	r2, r3, #8
 8000b02:	4b3f      	ldr	r3, [pc, #252]	; (8000c00 <checkBrickHit+0x320>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	da00      	bge.n	8000b0e <checkBrickHit+0x22e>
 8000b0c:	3307      	adds	r3, #7
 8000b0e:	10db      	asrs	r3, r3, #3
 8000b10:	4619      	mov	r1, r3
 8000b12:	483c      	ldr	r0, [pc, #240]	; (8000c04 <checkBrickHit+0x324>)
 8000b14:	4613      	mov	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	440b      	add	r3, r1
 8000b1e:	011b      	lsls	r3, r3, #4
 8000b20:	4403      	add	r3, r0
 8000b22:	330c      	adds	r3, #12
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	1e58      	subs	r0, r3, #1
 8000b28:	4c36      	ldr	r4, [pc, #216]	; (8000c04 <checkBrickHit+0x324>)
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	440b      	add	r3, r1
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	4423      	add	r3, r4
 8000b38:	330c      	adds	r3, #12
 8000b3a:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8000b3c:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <checkBrickHit+0x320>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f1a3 0208 	sub.w	r2, r3, #8
 8000b44:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <checkBrickHit+0x320>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	da00      	bge.n	8000b50 <checkBrickHit+0x270>
 8000b4e:	3307      	adds	r3, #7
 8000b50:	10db      	asrs	r3, r3, #3
 8000b52:	4618      	mov	r0, r3
 8000b54:	492b      	ldr	r1, [pc, #172]	; (8000c04 <checkBrickHit+0x324>)
 8000b56:	4613      	mov	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4413      	add	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4403      	add	r3, r0
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	440b      	add	r3, r1
 8000b64:	330c      	adds	r3, #12
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	dc33      	bgt.n	8000bd4 <checkBrickHit+0x2f4>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <checkBrickHit+0x320>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f1a3 0208 	sub.w	r2, r3, #8
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <checkBrickHit+0x320>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	da00      	bge.n	8000b80 <checkBrickHit+0x2a0>
 8000b7e:	3307      	adds	r3, #7
 8000b80:	10db      	asrs	r3, r3, #3
 8000b82:	4618      	mov	r0, r3
 8000b84:	491f      	ldr	r1, [pc, #124]	; (8000c04 <checkBrickHit+0x324>)
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	4403      	add	r3, r0
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	440b      	add	r3, r1
 8000b94:	3308      	adds	r3, #8
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
                points++;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <checkBrickHit+0x328>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <checkBrickHit+0x328>)
 8000ba4:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <checkBrickHit+0x320>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	da00      	bge.n	8000bb2 <checkBrickHit+0x2d2>
 8000bb0:	3307      	adds	r3, #7
 8000bb2:	10db      	asrs	r3, r3, #3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <checkBrickHit+0x320>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	3b08      	subs	r3, #8
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4610      	mov	r0, r2
 8000bc0:	f001 f950 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <checkBrickHit+0x320>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	3b08      	subs	r3, #8
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fbe0 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <checkBrickHit+0x320>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f1a3 0208 	sub.w	r2, r3, #8
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <checkBrickHit+0x320>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	da00      	bge.n	8000be8 <checkBrickHit+0x308>
 8000be6:	3307      	adds	r3, #7
 8000be8:	10db      	asrs	r3, r3, #3
 8000bea:	4618      	mov	r0, r3
 8000bec:	4905      	ldr	r1, [pc, #20]	; (8000c04 <checkBrickHit+0x324>)
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4403      	add	r3, r0
 8000bf8:	011b      	lsls	r3, r3, #4
 8000bfa:	440b      	add	r3, r1
 8000bfc:	e008      	b.n	8000c10 <checkBrickHit+0x330>
 8000bfe:	bf00      	nop
 8000c00:	20000038 	.word	0x20000038
 8000c04:	200000ec 	.word	0x200000ec
 8000c08:	20001eec 	.word	0x20001eec
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	b298      	uxth	r0, r3
 8000c18:	4b93      	ldr	r3, [pc, #588]	; (8000e68 <checkBrickHit+0x588>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f1a3 0208 	sub.w	r2, r3, #8
 8000c20:	4b91      	ldr	r3, [pc, #580]	; (8000e68 <checkBrickHit+0x588>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	da00      	bge.n	8000c2c <checkBrickHit+0x34c>
 8000c2a:	3307      	adds	r3, #7
 8000c2c:	10db      	asrs	r3, r3, #3
 8000c2e:	461c      	mov	r4, r3
 8000c30:	498e      	ldr	r1, [pc, #568]	; (8000e6c <checkBrickHit+0x58c>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	4423      	add	r3, r4
 8000c3c:	011b      	lsls	r3, r3, #4
 8000c3e:	440b      	add	r3, r1
 8000c40:	3304      	adds	r3, #4
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	b299      	uxth	r1, r3
 8000c4a:	4b87      	ldr	r3, [pc, #540]	; (8000e68 <checkBrickHit+0x588>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f1a3 0208 	sub.w	r2, r3, #8
 8000c52:	4b85      	ldr	r3, [pc, #532]	; (8000e68 <checkBrickHit+0x588>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	da00      	bge.n	8000c5e <checkBrickHit+0x37e>
 8000c5c:	3307      	adds	r3, #7
 8000c5e:	10db      	asrs	r3, r3, #3
 8000c60:	461d      	mov	r5, r3
 8000c62:	4c82      	ldr	r4, [pc, #520]	; (8000e6c <checkBrickHit+0x58c>)
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	442b      	add	r3, r5
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	4423      	add	r3, r4
 8000c72:	330c      	adds	r3, #12
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a7e      	ldr	r2, [pc, #504]	; (8000e70 <checkBrickHit+0x590>)
 8000c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2304      	movs	r3, #4
 8000c82:	2220      	movs	r2, #32
 8000c84:	f004 fb96 	bl	80053b4 <Displ_FillArea>
            bricksHit++;
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NW) {
 8000c8e:	4b76      	ldr	r3, [pc, #472]	; (8000e68 <checkBrickHit+0x588>)
 8000c90:	7a1b      	ldrb	r3, [r3, #8]
 8000c92:	2b07      	cmp	r3, #7
 8000c94:	d102      	bne.n	8000c9c <checkBrickHit+0x3bc>
                ball.dir = NE;
 8000c96:	4b74      	ldr	r3, [pc, #464]	; (8000e68 <checkBrickHit+0x588>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SW) {
 8000c9c:	4b72      	ldr	r3, [pc, #456]	; (8000e68 <checkBrickHit+0x588>)
 8000c9e:	7a1b      	ldrb	r3, [r3, #8]
 8000ca0:	2b05      	cmp	r3, #5
 8000ca2:	d102      	bne.n	8000caa <checkBrickHit+0x3ca>
                ball.dir = SE;
 8000ca4:	4b70      	ldr	r3, [pc, #448]	; (8000e68 <checkBrickHit+0x588>)
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f041 80c6 	bne.w	8001e3e <checkBrickHit+0x155e>
            if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible == 1) {
 8000cb2:	4b6d      	ldr	r3, [pc, #436]	; (8000e68 <checkBrickHit+0x588>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f1a3 0209 	sub.w	r2, r3, #9
 8000cba:	4b6b      	ldr	r3, [pc, #428]	; (8000e68 <checkBrickHit+0x588>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	da00      	bge.n	8000cc6 <checkBrickHit+0x3e6>
 8000cc4:	3307      	adds	r3, #7
 8000cc6:	10db      	asrs	r3, r3, #3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	4968      	ldr	r1, [pc, #416]	; (8000e6c <checkBrickHit+0x58c>)
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4403      	add	r3, r0
 8000cd6:	011b      	lsls	r3, r3, #4
 8000cd8:	440b      	add	r3, r1
 8000cda:	3308      	adds	r3, #8
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	f041 80ad 	bne.w	8001e3e <checkBrickHit+0x155e>
                bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness--;
 8000ce4:	4b60      	ldr	r3, [pc, #384]	; (8000e68 <checkBrickHit+0x588>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f1a3 0209 	sub.w	r2, r3, #9
 8000cec:	4b5e      	ldr	r3, [pc, #376]	; (8000e68 <checkBrickHit+0x588>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	da00      	bge.n	8000cf8 <checkBrickHit+0x418>
 8000cf6:	3307      	adds	r3, #7
 8000cf8:	10db      	asrs	r3, r3, #3
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	485b      	ldr	r0, [pc, #364]	; (8000e6c <checkBrickHit+0x58c>)
 8000cfe:	4613      	mov	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	440b      	add	r3, r1
 8000d08:	011b      	lsls	r3, r3, #4
 8000d0a:	4403      	add	r3, r0
 8000d0c:	330c      	adds	r3, #12
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	1e58      	subs	r0, r3, #1
 8000d12:	4c56      	ldr	r4, [pc, #344]	; (8000e6c <checkBrickHit+0x58c>)
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	440b      	add	r3, r1
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4423      	add	r3, r4
 8000d22:	330c      	adds	r3, #12
 8000d24:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8000d26:	4b50      	ldr	r3, [pc, #320]	; (8000e68 <checkBrickHit+0x588>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f1a3 0209 	sub.w	r2, r3, #9
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	; (8000e68 <checkBrickHit+0x588>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da00      	bge.n	8000d3a <checkBrickHit+0x45a>
 8000d38:	3307      	adds	r3, #7
 8000d3a:	10db      	asrs	r3, r3, #3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	494b      	ldr	r1, [pc, #300]	; (8000e6c <checkBrickHit+0x58c>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4403      	add	r3, r0
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	440b      	add	r3, r1
 8000d4e:	330c      	adds	r3, #12
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	dc33      	bgt.n	8000dbe <checkBrickHit+0x4de>
                    bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible = 0;
 8000d56:	4b44      	ldr	r3, [pc, #272]	; (8000e68 <checkBrickHit+0x588>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f1a3 0209 	sub.w	r2, r3, #9
 8000d5e:	4b42      	ldr	r3, [pc, #264]	; (8000e68 <checkBrickHit+0x588>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	da00      	bge.n	8000d6a <checkBrickHit+0x48a>
 8000d68:	3307      	adds	r3, #7
 8000d6a:	10db      	asrs	r3, r3, #3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	493f      	ldr	r1, [pc, #252]	; (8000e6c <checkBrickHit+0x58c>)
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4403      	add	r3, r0
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	440b      	add	r3, r1
 8000d7e:	3308      	adds	r3, #8
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
                    points++;
 8000d84:	4b3b      	ldr	r3, [pc, #236]	; (8000e74 <checkBrickHit+0x594>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <checkBrickHit+0x594>)
 8000d8e:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x - 1)/8, ball.y - 1 - 8);
 8000d90:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <checkBrickHit+0x588>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	da00      	bge.n	8000d9c <checkBrickHit+0x4bc>
 8000d9a:	3307      	adds	r3, #7
 8000d9c:	10db      	asrs	r3, r3, #3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <checkBrickHit+0x588>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	3b09      	subs	r3, #9
 8000da6:	4619      	mov	r1, r3
 8000da8:	4610      	mov	r0, r2
 8000daa:	f001 f85b 	bl	8001e64 <dropPowerUp>
                    checkEmptyRow(ball.y - 1 - 8);
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <checkBrickHit+0x588>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	3b09      	subs	r3, #9
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 faeb 	bl	8002394 <checkEmptyRow>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness]);
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <checkBrickHit+0x588>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f1a3 0209 	sub.w	r2, r3, #9
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <checkBrickHit+0x588>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	da00      	bge.n	8000dd2 <checkBrickHit+0x4f2>
 8000dd0:	3307      	adds	r3, #7
 8000dd2:	10db      	asrs	r3, r3, #3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	4925      	ldr	r1, [pc, #148]	; (8000e6c <checkBrickHit+0x58c>)
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4403      	add	r3, r0
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	440b      	add	r3, r1
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	b298      	uxth	r0, r3
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <checkBrickHit+0x588>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f1a3 0209 	sub.w	r2, r3, #9
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <checkBrickHit+0x588>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	da00      	bge.n	8000e02 <checkBrickHit+0x522>
 8000e00:	3307      	adds	r3, #7
 8000e02:	10db      	asrs	r3, r3, #3
 8000e04:	461c      	mov	r4, r3
 8000e06:	4919      	ldr	r1, [pc, #100]	; (8000e6c <checkBrickHit+0x58c>)
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4423      	add	r3, r4
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	440b      	add	r3, r1
 8000e16:	3304      	adds	r3, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	b299      	uxth	r1, r3
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <checkBrickHit+0x588>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f1a3 0209 	sub.w	r2, r3, #9
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <checkBrickHit+0x588>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	da00      	bge.n	8000e34 <checkBrickHit+0x554>
 8000e32:	3307      	adds	r3, #7
 8000e34:	10db      	asrs	r3, r3, #3
 8000e36:	461d      	mov	r5, r3
 8000e38:	4c0c      	ldr	r4, [pc, #48]	; (8000e6c <checkBrickHit+0x58c>)
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	442b      	add	r3, r5
 8000e44:	011b      	lsls	r3, r3, #4
 8000e46:	4423      	add	r3, r4
 8000e48:	330c      	adds	r3, #12
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <checkBrickHit+0x590>)
 8000e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2304      	movs	r3, #4
 8000e58:	2220      	movs	r2, #32
 8000e5a:	f004 faab 	bl	80053b4 <Displ_FillArea>
                ball.dir = SE;
 8000e5e:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <checkBrickHit+0x588>)
 8000e60:	2203      	movs	r2, #3
 8000e62:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8000e64:	f000 bfeb 	b.w	8001e3e <checkBrickHit+0x155e>
 8000e68:	20000038 	.word	0x20000038
 8000e6c:	200000ec 	.word	0x200000ec
 8000e70:	20000004 	.word	0x20000004
 8000e74:	20001eec 	.word	0x20001eec
    case NE:
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 8000e78:	4bb7      	ldr	r3, [pc, #732]	; (8001158 <checkBrickHit+0x878>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f1a3 0209 	sub.w	r2, r3, #9
 8000e80:	4bb5      	ldr	r3, [pc, #724]	; (8001158 <checkBrickHit+0x878>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	da00      	bge.n	8000e8a <checkBrickHit+0x5aa>
 8000e88:	3307      	adds	r3, #7
 8000e8a:	10db      	asrs	r3, r3, #3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	49b3      	ldr	r1, [pc, #716]	; (800115c <checkBrickHit+0x87c>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4403      	add	r3, r0
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	440b      	add	r3, r1
 8000e9e:	3308      	adds	r3, #8
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	f040 80bc 	bne.w	8001020 <checkBrickHit+0x740>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000ea8:	4bab      	ldr	r3, [pc, #684]	; (8001158 <checkBrickHit+0x878>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f1a3 0209 	sub.w	r2, r3, #9
 8000eb0:	4ba9      	ldr	r3, [pc, #676]	; (8001158 <checkBrickHit+0x878>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	da00      	bge.n	8000eba <checkBrickHit+0x5da>
 8000eb8:	3307      	adds	r3, #7
 8000eba:	10db      	asrs	r3, r3, #3
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	48a7      	ldr	r0, [pc, #668]	; (800115c <checkBrickHit+0x87c>)
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	440b      	add	r3, r1
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4403      	add	r3, r0
 8000ece:	330c      	adds	r3, #12
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	1e58      	subs	r0, r3, #1
 8000ed4:	4ca1      	ldr	r4, [pc, #644]	; (800115c <checkBrickHit+0x87c>)
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	440b      	add	r3, r1
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	4423      	add	r3, r4
 8000ee4:	330c      	adds	r3, #12
 8000ee6:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000ee8:	4b9b      	ldr	r3, [pc, #620]	; (8001158 <checkBrickHit+0x878>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f1a3 0209 	sub.w	r2, r3, #9
 8000ef0:	4b99      	ldr	r3, [pc, #612]	; (8001158 <checkBrickHit+0x878>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	da00      	bge.n	8000efa <checkBrickHit+0x61a>
 8000ef8:	3307      	adds	r3, #7
 8000efa:	10db      	asrs	r3, r3, #3
 8000efc:	4618      	mov	r0, r3
 8000efe:	4997      	ldr	r1, [pc, #604]	; (800115c <checkBrickHit+0x87c>)
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4403      	add	r3, r0
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	440b      	add	r3, r1
 8000f0e:	330c      	adds	r3, #12
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	dc31      	bgt.n	8000f7a <checkBrickHit+0x69a>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 8000f16:	4b90      	ldr	r3, [pc, #576]	; (8001158 <checkBrickHit+0x878>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f1a3 0209 	sub.w	r2, r3, #9
 8000f1e:	4b8e      	ldr	r3, [pc, #568]	; (8001158 <checkBrickHit+0x878>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	da00      	bge.n	8000f28 <checkBrickHit+0x648>
 8000f26:	3307      	adds	r3, #7
 8000f28:	10db      	asrs	r3, r3, #3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	498b      	ldr	r1, [pc, #556]	; (800115c <checkBrickHit+0x87c>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4403      	add	r3, r0
 8000f38:	011b      	lsls	r3, r3, #4
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3308      	adds	r3, #8
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
                points++;
 8000f42:	4b87      	ldr	r3, [pc, #540]	; (8001160 <checkBrickHit+0x880>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b85      	ldr	r3, [pc, #532]	; (8001160 <checkBrickHit+0x880>)
 8000f4c:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 8000f4e:	4b82      	ldr	r3, [pc, #520]	; (8001158 <checkBrickHit+0x878>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	da00      	bge.n	8000f58 <checkBrickHit+0x678>
 8000f56:	3307      	adds	r3, #7
 8000f58:	10db      	asrs	r3, r3, #3
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b7e      	ldr	r3, [pc, #504]	; (8001158 <checkBrickHit+0x878>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	3b09      	subs	r3, #9
 8000f62:	4619      	mov	r1, r3
 8000f64:	4610      	mov	r0, r2
 8000f66:	f000 ff7d 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y - 1 - 8);
 8000f6a:	4b7b      	ldr	r3, [pc, #492]	; (8001158 <checkBrickHit+0x878>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	3b09      	subs	r3, #9
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 fa0d 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 8000f7a:	4b77      	ldr	r3, [pc, #476]	; (8001158 <checkBrickHit+0x878>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f1a3 0209 	sub.w	r2, r3, #9
 8000f82:	4b75      	ldr	r3, [pc, #468]	; (8001158 <checkBrickHit+0x878>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	da00      	bge.n	8000f8c <checkBrickHit+0x6ac>
 8000f8a:	3307      	adds	r3, #7
 8000f8c:	10db      	asrs	r3, r3, #3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	4972      	ldr	r1, [pc, #456]	; (800115c <checkBrickHit+0x87c>)
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4403      	add	r3, r0
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	440b      	add	r3, r1
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	b298      	uxth	r0, r3
 8000fa8:	4b6b      	ldr	r3, [pc, #428]	; (8001158 <checkBrickHit+0x878>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f1a3 0209 	sub.w	r2, r3, #9
 8000fb0:	4b69      	ldr	r3, [pc, #420]	; (8001158 <checkBrickHit+0x878>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	da00      	bge.n	8000fba <checkBrickHit+0x6da>
 8000fb8:	3307      	adds	r3, #7
 8000fba:	10db      	asrs	r3, r3, #3
 8000fbc:	461c      	mov	r4, r3
 8000fbe:	4967      	ldr	r1, [pc, #412]	; (800115c <checkBrickHit+0x87c>)
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4423      	add	r3, r4
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	440b      	add	r3, r1
 8000fce:	3304      	adds	r3, #4
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	b299      	uxth	r1, r3
 8000fd8:	4b5f      	ldr	r3, [pc, #380]	; (8001158 <checkBrickHit+0x878>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f1a3 0209 	sub.w	r2, r3, #9
 8000fe0:	4b5d      	ldr	r3, [pc, #372]	; (8001158 <checkBrickHit+0x878>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	da00      	bge.n	8000fea <checkBrickHit+0x70a>
 8000fe8:	3307      	adds	r3, #7
 8000fea:	10db      	asrs	r3, r3, #3
 8000fec:	461d      	mov	r5, r3
 8000fee:	4c5b      	ldr	r4, [pc, #364]	; (800115c <checkBrickHit+0x87c>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	442b      	add	r3, r5
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	4423      	add	r3, r4
 8000ffe:	330c      	adds	r3, #12
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a58      	ldr	r2, [pc, #352]	; (8001164 <checkBrickHit+0x884>)
 8001004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001008:	b29b      	uxth	r3, r3
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2304      	movs	r3, #4
 800100e:	2220      	movs	r2, #32
 8001010:	f004 f9d0 	bl	80053b4 <Displ_FillArea>
            bricksHit++;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	3301      	adds	r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
            ball.dir = SE;
 800101a:	4b4f      	ldr	r3, [pc, #316]	; (8001158 <checkBrickHit+0x878>)
 800101c:	2203      	movs	r2, #3
 800101e:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 8001020:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <checkBrickHit+0x878>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f1a3 0208 	sub.w	r2, r3, #8
 8001028:	4b4b      	ldr	r3, [pc, #300]	; (8001158 <checkBrickHit+0x878>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	da00      	bge.n	8001034 <checkBrickHit+0x754>
 8001032:	3307      	adds	r3, #7
 8001034:	10db      	asrs	r3, r3, #3
 8001036:	4618      	mov	r0, r3
 8001038:	4948      	ldr	r1, [pc, #288]	; (800115c <checkBrickHit+0x87c>)
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4403      	add	r3, r0
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	440b      	add	r3, r1
 8001048:	3308      	adds	r3, #8
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	f040 80d8 	bne.w	8001202 <checkBrickHit+0x922>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 8001052:	4b41      	ldr	r3, [pc, #260]	; (8001158 <checkBrickHit+0x878>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f1a3 0208 	sub.w	r2, r3, #8
 800105a:	4b3f      	ldr	r3, [pc, #252]	; (8001158 <checkBrickHit+0x878>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	da00      	bge.n	8001066 <checkBrickHit+0x786>
 8001064:	3307      	adds	r3, #7
 8001066:	10db      	asrs	r3, r3, #3
 8001068:	4619      	mov	r1, r3
 800106a:	483c      	ldr	r0, [pc, #240]	; (800115c <checkBrickHit+0x87c>)
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	440b      	add	r3, r1
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	4403      	add	r3, r0
 800107a:	330c      	adds	r3, #12
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	1e58      	subs	r0, r3, #1
 8001080:	4c36      	ldr	r4, [pc, #216]	; (800115c <checkBrickHit+0x87c>)
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	440b      	add	r3, r1
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	4423      	add	r3, r4
 8001090:	330c      	adds	r3, #12
 8001092:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 8001094:	4b30      	ldr	r3, [pc, #192]	; (8001158 <checkBrickHit+0x878>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f1a3 0208 	sub.w	r2, r3, #8
 800109c:	4b2e      	ldr	r3, [pc, #184]	; (8001158 <checkBrickHit+0x878>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	da00      	bge.n	80010a8 <checkBrickHit+0x7c8>
 80010a6:	3307      	adds	r3, #7
 80010a8:	10db      	asrs	r3, r3, #3
 80010aa:	4618      	mov	r0, r3
 80010ac:	492b      	ldr	r1, [pc, #172]	; (800115c <checkBrickHit+0x87c>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4403      	add	r3, r0
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	440b      	add	r3, r1
 80010bc:	330c      	adds	r3, #12
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	dc33      	bgt.n	800112c <checkBrickHit+0x84c>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <checkBrickHit+0x878>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f1a3 0208 	sub.w	r2, r3, #8
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <checkBrickHit+0x878>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	da00      	bge.n	80010d8 <checkBrickHit+0x7f8>
 80010d6:	3307      	adds	r3, #7
 80010d8:	10db      	asrs	r3, r3, #3
 80010da:	4618      	mov	r0, r3
 80010dc:	491f      	ldr	r1, [pc, #124]	; (800115c <checkBrickHit+0x87c>)
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4403      	add	r3, r0
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	440b      	add	r3, r1
 80010ec:	3308      	adds	r3, #8
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
                points++;
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <checkBrickHit+0x880>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <checkBrickHit+0x880>)
 80010fc:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <checkBrickHit+0x878>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	da00      	bge.n	800110a <checkBrickHit+0x82a>
 8001108:	3307      	adds	r3, #7
 800110a:	10db      	asrs	r3, r3, #3
 800110c:	461a      	mov	r2, r3
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <checkBrickHit+0x878>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	3b08      	subs	r3, #8
 8001114:	4619      	mov	r1, r3
 8001116:	4610      	mov	r0, r2
 8001118:	f000 fea4 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <checkBrickHit+0x878>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	3b08      	subs	r3, #8
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f001 f934 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <checkBrickHit+0x878>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f1a3 0208 	sub.w	r2, r3, #8
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <checkBrickHit+0x878>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	da00      	bge.n	8001140 <checkBrickHit+0x860>
 800113e:	3307      	adds	r3, #7
 8001140:	10db      	asrs	r3, r3, #3
 8001142:	4618      	mov	r0, r3
 8001144:	4905      	ldr	r1, [pc, #20]	; (800115c <checkBrickHit+0x87c>)
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4403      	add	r3, r0
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	440b      	add	r3, r1
 8001154:	e008      	b.n	8001168 <checkBrickHit+0x888>
 8001156:	bf00      	nop
 8001158:	20000038 	.word	0x20000038
 800115c:	200000ec 	.word	0x200000ec
 8001160:	20001eec 	.word	0x20001eec
 8001164:	20000004 	.word	0x20000004
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	b29b      	uxth	r3, r3
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	b298      	uxth	r0, r3
 8001170:	4b93      	ldr	r3, [pc, #588]	; (80013c0 <checkBrickHit+0xae0>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f1a3 0208 	sub.w	r2, r3, #8
 8001178:	4b91      	ldr	r3, [pc, #580]	; (80013c0 <checkBrickHit+0xae0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	da00      	bge.n	8001184 <checkBrickHit+0x8a4>
 8001182:	3307      	adds	r3, #7
 8001184:	10db      	asrs	r3, r3, #3
 8001186:	461c      	mov	r4, r3
 8001188:	498e      	ldr	r1, [pc, #568]	; (80013c4 <checkBrickHit+0xae4>)
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4423      	add	r3, r4
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	440b      	add	r3, r1
 8001198:	3304      	adds	r3, #4
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	b299      	uxth	r1, r3
 80011a2:	4b87      	ldr	r3, [pc, #540]	; (80013c0 <checkBrickHit+0xae0>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f1a3 0208 	sub.w	r2, r3, #8
 80011aa:	4b85      	ldr	r3, [pc, #532]	; (80013c0 <checkBrickHit+0xae0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	da00      	bge.n	80011b6 <checkBrickHit+0x8d6>
 80011b4:	3307      	adds	r3, #7
 80011b6:	10db      	asrs	r3, r3, #3
 80011b8:	461d      	mov	r5, r3
 80011ba:	4c82      	ldr	r4, [pc, #520]	; (80013c4 <checkBrickHit+0xae4>)
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	442b      	add	r3, r5
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4423      	add	r3, r4
 80011ca:	330c      	adds	r3, #12
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a7e      	ldr	r2, [pc, #504]	; (80013c8 <checkBrickHit+0xae8>)
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2304      	movs	r3, #4
 80011da:	2220      	movs	r2, #32
 80011dc:	f004 f8ea 	bl	80053b4 <Displ_FillArea>
            bricksHit++;
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	3301      	adds	r3, #1
 80011e4:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NE) {
 80011e6:	4b76      	ldr	r3, [pc, #472]	; (80013c0 <checkBrickHit+0xae0>)
 80011e8:	7a1b      	ldrb	r3, [r3, #8]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d102      	bne.n	80011f4 <checkBrickHit+0x914>
                ball.dir = NW;
 80011ee:	4b74      	ldr	r3, [pc, #464]	; (80013c0 <checkBrickHit+0xae0>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SE) {
 80011f4:	4b72      	ldr	r3, [pc, #456]	; (80013c0 <checkBrickHit+0xae0>)
 80011f6:	7a1b      	ldrb	r3, [r3, #8]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d102      	bne.n	8001202 <checkBrickHit+0x922>
                ball.dir = SW;
 80011fc:	4b70      	ldr	r3, [pc, #448]	; (80013c0 <checkBrickHit+0xae0>)
 80011fe:	2205      	movs	r2, #5
 8001200:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	f040 861c 	bne.w	8001e42 <checkBrickHit+0x1562>
            if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible == 1) {
 800120a:	4b6d      	ldr	r3, [pc, #436]	; (80013c0 <checkBrickHit+0xae0>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f1a3 0209 	sub.w	r2, r3, #9
 8001212:	4b6b      	ldr	r3, [pc, #428]	; (80013c0 <checkBrickHit+0xae0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	da00      	bge.n	800121e <checkBrickHit+0x93e>
 800121c:	3307      	adds	r3, #7
 800121e:	10db      	asrs	r3, r3, #3
 8001220:	4618      	mov	r0, r3
 8001222:	4968      	ldr	r1, [pc, #416]	; (80013c4 <checkBrickHit+0xae4>)
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4403      	add	r3, r0
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	440b      	add	r3, r1
 8001232:	3308      	adds	r3, #8
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b01      	cmp	r3, #1
 8001238:	f040 8603 	bne.w	8001e42 <checkBrickHit+0x1562>
                bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness--;
 800123c:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <checkBrickHit+0xae0>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f1a3 0209 	sub.w	r2, r3, #9
 8001244:	4b5e      	ldr	r3, [pc, #376]	; (80013c0 <checkBrickHit+0xae0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	da00      	bge.n	8001250 <checkBrickHit+0x970>
 800124e:	3307      	adds	r3, #7
 8001250:	10db      	asrs	r3, r3, #3
 8001252:	4619      	mov	r1, r3
 8001254:	485b      	ldr	r0, [pc, #364]	; (80013c4 <checkBrickHit+0xae4>)
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	440b      	add	r3, r1
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	4403      	add	r3, r0
 8001264:	330c      	adds	r3, #12
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	1e58      	subs	r0, r3, #1
 800126a:	4c56      	ldr	r4, [pc, #344]	; (80013c4 <checkBrickHit+0xae4>)
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	440b      	add	r3, r1
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	4423      	add	r3, r4
 800127a:	330c      	adds	r3, #12
 800127c:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness <= 0) {
 800127e:	4b50      	ldr	r3, [pc, #320]	; (80013c0 <checkBrickHit+0xae0>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f1a3 0209 	sub.w	r2, r3, #9
 8001286:	4b4e      	ldr	r3, [pc, #312]	; (80013c0 <checkBrickHit+0xae0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	da00      	bge.n	8001292 <checkBrickHit+0x9b2>
 8001290:	3307      	adds	r3, #7
 8001292:	10db      	asrs	r3, r3, #3
 8001294:	4618      	mov	r0, r3
 8001296:	494b      	ldr	r1, [pc, #300]	; (80013c4 <checkBrickHit+0xae4>)
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4403      	add	r3, r0
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	440b      	add	r3, r1
 80012a6:	330c      	adds	r3, #12
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dc33      	bgt.n	8001316 <checkBrickHit+0xa36>
                    bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible = 0;
 80012ae:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <checkBrickHit+0xae0>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f1a3 0209 	sub.w	r2, r3, #9
 80012b6:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <checkBrickHit+0xae0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	da00      	bge.n	80012c2 <checkBrickHit+0x9e2>
 80012c0:	3307      	adds	r3, #7
 80012c2:	10db      	asrs	r3, r3, #3
 80012c4:	4618      	mov	r0, r3
 80012c6:	493f      	ldr	r1, [pc, #252]	; (80013c4 <checkBrickHit+0xae4>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4403      	add	r3, r0
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	440b      	add	r3, r1
 80012d6:	3308      	adds	r3, #8
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
                    points++;
 80012dc:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <checkBrickHit+0xaec>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b39      	ldr	r3, [pc, #228]	; (80013cc <checkBrickHit+0xaec>)
 80012e6:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x + 1)/8, ball.y - 1 - 8);
 80012e8:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <checkBrickHit+0xae0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	da00      	bge.n	80012f4 <checkBrickHit+0xa14>
 80012f2:	3307      	adds	r3, #7
 80012f4:	10db      	asrs	r3, r3, #3
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <checkBrickHit+0xae0>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	3b09      	subs	r3, #9
 80012fe:	4619      	mov	r1, r3
 8001300:	4610      	mov	r0, r2
 8001302:	f000 fdaf 	bl	8001e64 <dropPowerUp>
                    checkEmptyRow(ball.y - 1 - 8);
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <checkBrickHit+0xae0>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	3b09      	subs	r3, #9
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f001 f83f 	bl	8002394 <checkEmptyRow>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness]);
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <checkBrickHit+0xae0>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f1a3 0209 	sub.w	r2, r3, #9
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <checkBrickHit+0xae0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	da00      	bge.n	800132a <checkBrickHit+0xa4a>
 8001328:	3307      	adds	r3, #7
 800132a:	10db      	asrs	r3, r3, #3
 800132c:	4618      	mov	r0, r3
 800132e:	4925      	ldr	r1, [pc, #148]	; (80013c4 <checkBrickHit+0xae4>)
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4403      	add	r3, r0
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	440b      	add	r3, r1
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	b298      	uxth	r0, r3
 8001346:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <checkBrickHit+0xae0>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f1a3 0209 	sub.w	r2, r3, #9
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <checkBrickHit+0xae0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	da00      	bge.n	800135a <checkBrickHit+0xa7a>
 8001358:	3307      	adds	r3, #7
 800135a:	10db      	asrs	r3, r3, #3
 800135c:	461c      	mov	r4, r3
 800135e:	4919      	ldr	r1, [pc, #100]	; (80013c4 <checkBrickHit+0xae4>)
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4423      	add	r3, r4
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	440b      	add	r3, r1
 800136e:	3304      	adds	r3, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	b299      	uxth	r1, r3
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <checkBrickHit+0xae0>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f1a3 0209 	sub.w	r2, r3, #9
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <checkBrickHit+0xae0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	da00      	bge.n	800138c <checkBrickHit+0xaac>
 800138a:	3307      	adds	r3, #7
 800138c:	10db      	asrs	r3, r3, #3
 800138e:	461d      	mov	r5, r3
 8001390:	4c0c      	ldr	r4, [pc, #48]	; (80013c4 <checkBrickHit+0xae4>)
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	442b      	add	r3, r5
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4423      	add	r3, r4
 80013a0:	330c      	adds	r3, #12
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <checkBrickHit+0xae8>)
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2304      	movs	r3, #4
 80013b0:	2220      	movs	r2, #32
 80013b2:	f003 ffff 	bl	80053b4 <Displ_FillArea>
                ball.dir = SW;
 80013b6:	4b02      	ldr	r3, [pc, #8]	; (80013c0 <checkBrickHit+0xae0>)
 80013b8:	2205      	movs	r2, #5
 80013ba:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 80013bc:	f000 bd41 	b.w	8001e42 <checkBrickHit+0x1562>
 80013c0:	20000038 	.word	0x20000038
 80013c4:	200000ec 	.word	0x200000ec
 80013c8:	20000004 	.word	0x20000004
 80013cc:	20001eec 	.word	0x20001eec
    case SE:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 80013d0:	4bb5      	ldr	r3, [pc, #724]	; (80016a8 <checkBrickHit+0xdc8>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	1fda      	subs	r2, r3, #7
 80013d6:	4bb4      	ldr	r3, [pc, #720]	; (80016a8 <checkBrickHit+0xdc8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	da00      	bge.n	80013e0 <checkBrickHit+0xb00>
 80013de:	3307      	adds	r3, #7
 80013e0:	10db      	asrs	r3, r3, #3
 80013e2:	4618      	mov	r0, r3
 80013e4:	49b1      	ldr	r1, [pc, #708]	; (80016ac <checkBrickHit+0xdcc>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4403      	add	r3, r0
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	440b      	add	r3, r1
 80013f4:	3308      	adds	r3, #8
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	f040 80b6 	bne.w	800156a <checkBrickHit+0xc8a>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 80013fe:	4baa      	ldr	r3, [pc, #680]	; (80016a8 <checkBrickHit+0xdc8>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	1fda      	subs	r2, r3, #7
 8001404:	4ba8      	ldr	r3, [pc, #672]	; (80016a8 <checkBrickHit+0xdc8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	da00      	bge.n	800140e <checkBrickHit+0xb2e>
 800140c:	3307      	adds	r3, #7
 800140e:	10db      	asrs	r3, r3, #3
 8001410:	4619      	mov	r1, r3
 8001412:	48a6      	ldr	r0, [pc, #664]	; (80016ac <checkBrickHit+0xdcc>)
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	440b      	add	r3, r1
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	4403      	add	r3, r0
 8001422:	330c      	adds	r3, #12
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1e58      	subs	r0, r3, #1
 8001428:	4ca0      	ldr	r4, [pc, #640]	; (80016ac <checkBrickHit+0xdcc>)
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	440b      	add	r3, r1
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	4423      	add	r3, r4
 8001438:	330c      	adds	r3, #12
 800143a:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 800143c:	4b9a      	ldr	r3, [pc, #616]	; (80016a8 <checkBrickHit+0xdc8>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	1fda      	subs	r2, r3, #7
 8001442:	4b99      	ldr	r3, [pc, #612]	; (80016a8 <checkBrickHit+0xdc8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	da00      	bge.n	800144c <checkBrickHit+0xb6c>
 800144a:	3307      	adds	r3, #7
 800144c:	10db      	asrs	r3, r3, #3
 800144e:	4618      	mov	r0, r3
 8001450:	4996      	ldr	r1, [pc, #600]	; (80016ac <checkBrickHit+0xdcc>)
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4403      	add	r3, r0
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	440b      	add	r3, r1
 8001460:	330c      	adds	r3, #12
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	dc30      	bgt.n	80014ca <checkBrickHit+0xbea>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 8001468:	4b8f      	ldr	r3, [pc, #572]	; (80016a8 <checkBrickHit+0xdc8>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	1fda      	subs	r2, r3, #7
 800146e:	4b8e      	ldr	r3, [pc, #568]	; (80016a8 <checkBrickHit+0xdc8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	da00      	bge.n	8001478 <checkBrickHit+0xb98>
 8001476:	3307      	adds	r3, #7
 8001478:	10db      	asrs	r3, r3, #3
 800147a:	4618      	mov	r0, r3
 800147c:	498b      	ldr	r1, [pc, #556]	; (80016ac <checkBrickHit+0xdcc>)
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4403      	add	r3, r0
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	440b      	add	r3, r1
 800148c:	3308      	adds	r3, #8
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
                points++;
 8001492:	4b87      	ldr	r3, [pc, #540]	; (80016b0 <checkBrickHit+0xdd0>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <checkBrickHit+0xdd0>)
 800149c:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 800149e:	4b82      	ldr	r3, [pc, #520]	; (80016a8 <checkBrickHit+0xdc8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	da00      	bge.n	80014a8 <checkBrickHit+0xbc8>
 80014a6:	3307      	adds	r3, #7
 80014a8:	10db      	asrs	r3, r3, #3
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b7e      	ldr	r3, [pc, #504]	; (80016a8 <checkBrickHit+0xdc8>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	3b07      	subs	r3, #7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4610      	mov	r0, r2
 80014b6:	f000 fcd5 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y + 1 - 8);
 80014ba:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <checkBrickHit+0xdc8>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	3b07      	subs	r3, #7
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 ff65 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 80014ca:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <checkBrickHit+0xdc8>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	1fda      	subs	r2, r3, #7
 80014d0:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <checkBrickHit+0xdc8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	da00      	bge.n	80014da <checkBrickHit+0xbfa>
 80014d8:	3307      	adds	r3, #7
 80014da:	10db      	asrs	r3, r3, #3
 80014dc:	4618      	mov	r0, r3
 80014de:	4973      	ldr	r1, [pc, #460]	; (80016ac <checkBrickHit+0xdcc>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4403      	add	r3, r0
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	440b      	add	r3, r1
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	b298      	uxth	r0, r3
 80014f6:	4b6c      	ldr	r3, [pc, #432]	; (80016a8 <checkBrickHit+0xdc8>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	1fda      	subs	r2, r3, #7
 80014fc:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <checkBrickHit+0xdc8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	da00      	bge.n	8001506 <checkBrickHit+0xc26>
 8001504:	3307      	adds	r3, #7
 8001506:	10db      	asrs	r3, r3, #3
 8001508:	461c      	mov	r4, r3
 800150a:	4968      	ldr	r1, [pc, #416]	; (80016ac <checkBrickHit+0xdcc>)
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4423      	add	r3, r4
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	440b      	add	r3, r1
 800151a:	3304      	adds	r3, #4
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	b299      	uxth	r1, r3
 8001524:	4b60      	ldr	r3, [pc, #384]	; (80016a8 <checkBrickHit+0xdc8>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	1fda      	subs	r2, r3, #7
 800152a:	4b5f      	ldr	r3, [pc, #380]	; (80016a8 <checkBrickHit+0xdc8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	da00      	bge.n	8001534 <checkBrickHit+0xc54>
 8001532:	3307      	adds	r3, #7
 8001534:	10db      	asrs	r3, r3, #3
 8001536:	461d      	mov	r5, r3
 8001538:	4c5c      	ldr	r4, [pc, #368]	; (80016ac <checkBrickHit+0xdcc>)
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	442b      	add	r3, r5
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	4423      	add	r3, r4
 8001548:	330c      	adds	r3, #12
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a59      	ldr	r2, [pc, #356]	; (80016b4 <checkBrickHit+0xdd4>)
 800154e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001552:	b29b      	uxth	r3, r3
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2304      	movs	r3, #4
 8001558:	2220      	movs	r2, #32
 800155a:	f003 ff2b 	bl	80053b4 <Displ_FillArea>
            bricksHit++;
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	3301      	adds	r3, #1
 8001562:	71fb      	strb	r3, [r7, #7]
            ball.dir = NE;
 8001564:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <checkBrickHit+0xdc8>)
 8001566:	2201      	movs	r2, #1
 8001568:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 800156a:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <checkBrickHit+0xdc8>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f1a3 0208 	sub.w	r2, r3, #8
 8001572:	4b4d      	ldr	r3, [pc, #308]	; (80016a8 <checkBrickHit+0xdc8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	da00      	bge.n	800157e <checkBrickHit+0xc9e>
 800157c:	3307      	adds	r3, #7
 800157e:	10db      	asrs	r3, r3, #3
 8001580:	4618      	mov	r0, r3
 8001582:	494a      	ldr	r1, [pc, #296]	; (80016ac <checkBrickHit+0xdcc>)
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4403      	add	r3, r0
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	440b      	add	r3, r1
 8001592:	3308      	adds	r3, #8
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b01      	cmp	r3, #1
 8001598:	f040 80d7 	bne.w	800174a <checkBrickHit+0xe6a>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 800159c:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <checkBrickHit+0xdc8>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f1a3 0208 	sub.w	r2, r3, #8
 80015a4:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <checkBrickHit+0xdc8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	da00      	bge.n	80015b0 <checkBrickHit+0xcd0>
 80015ae:	3307      	adds	r3, #7
 80015b0:	10db      	asrs	r3, r3, #3
 80015b2:	4619      	mov	r1, r3
 80015b4:	483d      	ldr	r0, [pc, #244]	; (80016ac <checkBrickHit+0xdcc>)
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	440b      	add	r3, r1
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	4403      	add	r3, r0
 80015c4:	330c      	adds	r3, #12
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	1e58      	subs	r0, r3, #1
 80015ca:	4c38      	ldr	r4, [pc, #224]	; (80016ac <checkBrickHit+0xdcc>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	440b      	add	r3, r1
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	4423      	add	r3, r4
 80015da:	330c      	adds	r3, #12
 80015dc:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 80015de:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <checkBrickHit+0xdc8>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f1a3 0208 	sub.w	r2, r3, #8
 80015e6:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <checkBrickHit+0xdc8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da00      	bge.n	80015f2 <checkBrickHit+0xd12>
 80015f0:	3307      	adds	r3, #7
 80015f2:	10db      	asrs	r3, r3, #3
 80015f4:	4618      	mov	r0, r3
 80015f6:	492d      	ldr	r1, [pc, #180]	; (80016ac <checkBrickHit+0xdcc>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4403      	add	r3, r0
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	440b      	add	r3, r1
 8001606:	330c      	adds	r3, #12
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	dc33      	bgt.n	8001676 <checkBrickHit+0xd96>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <checkBrickHit+0xdc8>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f1a3 0208 	sub.w	r2, r3, #8
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <checkBrickHit+0xdc8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	da00      	bge.n	8001622 <checkBrickHit+0xd42>
 8001620:	3307      	adds	r3, #7
 8001622:	10db      	asrs	r3, r3, #3
 8001624:	4618      	mov	r0, r3
 8001626:	4921      	ldr	r1, [pc, #132]	; (80016ac <checkBrickHit+0xdcc>)
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4403      	add	r3, r0
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	440b      	add	r3, r1
 8001636:	3308      	adds	r3, #8
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
                points++;
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <checkBrickHit+0xdd0>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <checkBrickHit+0xdd0>)
 8001646:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <checkBrickHit+0xdc8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	da00      	bge.n	8001654 <checkBrickHit+0xd74>
 8001652:	3307      	adds	r3, #7
 8001654:	10db      	asrs	r3, r3, #3
 8001656:	461a      	mov	r2, r3
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <checkBrickHit+0xdc8>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	3b08      	subs	r3, #8
 800165e:	4619      	mov	r1, r3
 8001660:	4610      	mov	r0, r2
 8001662:	f000 fbff 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <checkBrickHit+0xdc8>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	3b08      	subs	r3, #8
 800166e:	b2db      	uxtb	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fe8f 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <checkBrickHit+0xdc8>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f1a3 0208 	sub.w	r2, r3, #8
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <checkBrickHit+0xdc8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	da00      	bge.n	800168a <checkBrickHit+0xdaa>
 8001688:	3307      	adds	r3, #7
 800168a:	10db      	asrs	r3, r3, #3
 800168c:	4618      	mov	r0, r3
 800168e:	4907      	ldr	r1, [pc, #28]	; (80016ac <checkBrickHit+0xdcc>)
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4403      	add	r3, r0
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	440b      	add	r3, r1
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	b298      	uxth	r0, r3
 80016a6:	e007      	b.n	80016b8 <checkBrickHit+0xdd8>
 80016a8:	20000038 	.word	0x20000038
 80016ac:	200000ec 	.word	0x200000ec
 80016b0:	20001eec 	.word	0x20001eec
 80016b4:	20000004 	.word	0x20000004
 80016b8:	4b8f      	ldr	r3, [pc, #572]	; (80018f8 <checkBrickHit+0x1018>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f1a3 0208 	sub.w	r2, r3, #8
 80016c0:	4b8d      	ldr	r3, [pc, #564]	; (80018f8 <checkBrickHit+0x1018>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	da00      	bge.n	80016cc <checkBrickHit+0xdec>
 80016ca:	3307      	adds	r3, #7
 80016cc:	10db      	asrs	r3, r3, #3
 80016ce:	461c      	mov	r4, r3
 80016d0:	498a      	ldr	r1, [pc, #552]	; (80018fc <checkBrickHit+0x101c>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4423      	add	r3, r4
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	440b      	add	r3, r1
 80016e0:	3304      	adds	r3, #4
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	b299      	uxth	r1, r3
 80016ea:	4b83      	ldr	r3, [pc, #524]	; (80018f8 <checkBrickHit+0x1018>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f1a3 0208 	sub.w	r2, r3, #8
 80016f2:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <checkBrickHit+0x1018>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	da00      	bge.n	80016fe <checkBrickHit+0xe1e>
 80016fc:	3307      	adds	r3, #7
 80016fe:	10db      	asrs	r3, r3, #3
 8001700:	461d      	mov	r5, r3
 8001702:	4c7e      	ldr	r4, [pc, #504]	; (80018fc <checkBrickHit+0x101c>)
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	442b      	add	r3, r5
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	4423      	add	r3, r4
 8001712:	330c      	adds	r3, #12
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a7a      	ldr	r2, [pc, #488]	; (8001900 <checkBrickHit+0x1020>)
 8001718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171c:	b29b      	uxth	r3, r3
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2304      	movs	r3, #4
 8001722:	2220      	movs	r2, #32
 8001724:	f003 fe46 	bl	80053b4 <Displ_FillArea>
            bricksHit++;
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	3301      	adds	r3, #1
 800172c:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SE) {
 800172e:	4b72      	ldr	r3, [pc, #456]	; (80018f8 <checkBrickHit+0x1018>)
 8001730:	7a1b      	ldrb	r3, [r3, #8]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d102      	bne.n	800173c <checkBrickHit+0xe5c>
                ball.dir = SW;
 8001736:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <checkBrickHit+0x1018>)
 8001738:	2205      	movs	r2, #5
 800173a:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NE) {
 800173c:	4b6e      	ldr	r3, [pc, #440]	; (80018f8 <checkBrickHit+0x1018>)
 800173e:	7a1b      	ldrb	r3, [r3, #8]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d102      	bne.n	800174a <checkBrickHit+0xe6a>
                ball.dir = NW;
 8001744:	4b6c      	ldr	r3, [pc, #432]	; (80018f8 <checkBrickHit+0x1018>)
 8001746:	2207      	movs	r2, #7
 8001748:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f040 837a 	bne.w	8001e46 <checkBrickHit+0x1566>
            if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible == 1) {
 8001752:	4b69      	ldr	r3, [pc, #420]	; (80018f8 <checkBrickHit+0x1018>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	1fda      	subs	r2, r3, #7
 8001758:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <checkBrickHit+0x1018>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	da00      	bge.n	8001764 <checkBrickHit+0xe84>
 8001762:	3307      	adds	r3, #7
 8001764:	10db      	asrs	r3, r3, #3
 8001766:	4618      	mov	r0, r3
 8001768:	4964      	ldr	r1, [pc, #400]	; (80018fc <checkBrickHit+0x101c>)
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4403      	add	r3, r0
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	440b      	add	r3, r1
 8001778:	3308      	adds	r3, #8
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	f040 8362 	bne.w	8001e46 <checkBrickHit+0x1566>
                bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness--;
 8001782:	4b5d      	ldr	r3, [pc, #372]	; (80018f8 <checkBrickHit+0x1018>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	1fda      	subs	r2, r3, #7
 8001788:	4b5b      	ldr	r3, [pc, #364]	; (80018f8 <checkBrickHit+0x1018>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	da00      	bge.n	8001794 <checkBrickHit+0xeb4>
 8001792:	3307      	adds	r3, #7
 8001794:	10db      	asrs	r3, r3, #3
 8001796:	4619      	mov	r1, r3
 8001798:	4858      	ldr	r0, [pc, #352]	; (80018fc <checkBrickHit+0x101c>)
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	440b      	add	r3, r1
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	4403      	add	r3, r0
 80017a8:	330c      	adds	r3, #12
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	1e58      	subs	r0, r3, #1
 80017ae:	4c53      	ldr	r4, [pc, #332]	; (80018fc <checkBrickHit+0x101c>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	440b      	add	r3, r1
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	4423      	add	r3, r4
 80017be:	330c      	adds	r3, #12
 80017c0:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness <= 0) {
 80017c2:	4b4d      	ldr	r3, [pc, #308]	; (80018f8 <checkBrickHit+0x1018>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	1fda      	subs	r2, r3, #7
 80017c8:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <checkBrickHit+0x1018>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da00      	bge.n	80017d4 <checkBrickHit+0xef4>
 80017d2:	3307      	adds	r3, #7
 80017d4:	10db      	asrs	r3, r3, #3
 80017d6:	4618      	mov	r0, r3
 80017d8:	4948      	ldr	r1, [pc, #288]	; (80018fc <checkBrickHit+0x101c>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4403      	add	r3, r0
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	440b      	add	r3, r1
 80017e8:	330c      	adds	r3, #12
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	dc32      	bgt.n	8001856 <checkBrickHit+0xf76>
                    bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible = 0;
 80017f0:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <checkBrickHit+0x1018>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	1fda      	subs	r2, r3, #7
 80017f6:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <checkBrickHit+0x1018>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da00      	bge.n	8001802 <checkBrickHit+0xf22>
 8001800:	3307      	adds	r3, #7
 8001802:	10db      	asrs	r3, r3, #3
 8001804:	4618      	mov	r0, r3
 8001806:	493d      	ldr	r1, [pc, #244]	; (80018fc <checkBrickHit+0x101c>)
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4403      	add	r3, r0
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	440b      	add	r3, r1
 8001816:	3308      	adds	r3, #8
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
                    points++;
 800181c:	4b39      	ldr	r3, [pc, #228]	; (8001904 <checkBrickHit+0x1024>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	3301      	adds	r3, #1
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b37      	ldr	r3, [pc, #220]	; (8001904 <checkBrickHit+0x1024>)
 8001826:	701a      	strb	r2, [r3, #0]

                    dropPowerUp((ball.x + 1)/8, ball.y - 8 + 1);
 8001828:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <checkBrickHit+0x1018>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	da00      	bge.n	8001834 <checkBrickHit+0xf54>
 8001832:	3307      	adds	r3, #7
 8001834:	10db      	asrs	r3, r3, #3
 8001836:	461a      	mov	r2, r3
 8001838:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <checkBrickHit+0x1018>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	3b07      	subs	r3, #7
 800183e:	4619      	mov	r1, r3
 8001840:	4610      	mov	r0, r2
 8001842:	f000 fb0f 	bl	8001e64 <dropPowerUp>
                    checkEmptyRow(ball.y + 1 - 8);
 8001846:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <checkBrickHit+0x1018>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	3b07      	subs	r3, #7
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fd9f 	bl	8002394 <checkEmptyRow>
                }
                Displ_FillArea(bricks[ball.y - 8 + 1][(ball.x + 1)/8].x*4, bricks[ball.y - 8 + 1][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness]);
 8001856:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <checkBrickHit+0x1018>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	1fda      	subs	r2, r3, #7
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <checkBrickHit+0x1018>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	da00      	bge.n	8001868 <checkBrickHit+0xf88>
 8001866:	3307      	adds	r3, #7
 8001868:	10db      	asrs	r3, r3, #3
 800186a:	4618      	mov	r0, r3
 800186c:	4923      	ldr	r1, [pc, #140]	; (80018fc <checkBrickHit+0x101c>)
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4403      	add	r3, r0
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	440b      	add	r3, r1
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	b298      	uxth	r0, r3
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <checkBrickHit+0x1018>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	1fda      	subs	r2, r3, #7
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <checkBrickHit+0x1018>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	da00      	bge.n	8001896 <checkBrickHit+0xfb6>
 8001894:	3307      	adds	r3, #7
 8001896:	10db      	asrs	r3, r3, #3
 8001898:	461c      	mov	r4, r3
 800189a:	4918      	ldr	r1, [pc, #96]	; (80018fc <checkBrickHit+0x101c>)
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4423      	add	r3, r4
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	440b      	add	r3, r1
 80018aa:	3304      	adds	r3, #4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	b299      	uxth	r1, r3
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <checkBrickHit+0x1018>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	1fda      	subs	r2, r3, #7
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <checkBrickHit+0x1018>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da00      	bge.n	80018c6 <checkBrickHit+0xfe6>
 80018c4:	3307      	adds	r3, #7
 80018c6:	10db      	asrs	r3, r3, #3
 80018c8:	461d      	mov	r5, r3
 80018ca:	4c0c      	ldr	r4, [pc, #48]	; (80018fc <checkBrickHit+0x101c>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	442b      	add	r3, r5
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	4423      	add	r3, r4
 80018da:	330c      	adds	r3, #12
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a08      	ldr	r2, [pc, #32]	; (8001900 <checkBrickHit+0x1020>)
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2304      	movs	r3, #4
 80018ea:	2220      	movs	r2, #32
 80018ec:	f003 fd62 	bl	80053b4 <Displ_FillArea>
                ball.dir = NW;
 80018f0:	4b01      	ldr	r3, [pc, #4]	; (80018f8 <checkBrickHit+0x1018>)
 80018f2:	2207      	movs	r2, #7
 80018f4:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 80018f6:	e2a6      	b.n	8001e46 <checkBrickHit+0x1566>
 80018f8:	20000038 	.word	0x20000038
 80018fc:	200000ec 	.word	0x200000ec
 8001900:	20000004 	.word	0x20000004
 8001904:	20001eec 	.word	0x20001eec
    case SW:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 8001908:	4bb5      	ldr	r3, [pc, #724]	; (8001be0 <checkBrickHit+0x1300>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	1fda      	subs	r2, r3, #7
 800190e:	4bb4      	ldr	r3, [pc, #720]	; (8001be0 <checkBrickHit+0x1300>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	da00      	bge.n	8001918 <checkBrickHit+0x1038>
 8001916:	3307      	adds	r3, #7
 8001918:	10db      	asrs	r3, r3, #3
 800191a:	4618      	mov	r0, r3
 800191c:	49b1      	ldr	r1, [pc, #708]	; (8001be4 <checkBrickHit+0x1304>)
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4403      	add	r3, r0
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	440b      	add	r3, r1
 800192c:	3308      	adds	r3, #8
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	f040 80b6 	bne.w	8001aa2 <checkBrickHit+0x11c2>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 8001936:	4baa      	ldr	r3, [pc, #680]	; (8001be0 <checkBrickHit+0x1300>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	1fda      	subs	r2, r3, #7
 800193c:	4ba8      	ldr	r3, [pc, #672]	; (8001be0 <checkBrickHit+0x1300>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	da00      	bge.n	8001946 <checkBrickHit+0x1066>
 8001944:	3307      	adds	r3, #7
 8001946:	10db      	asrs	r3, r3, #3
 8001948:	4619      	mov	r1, r3
 800194a:	48a6      	ldr	r0, [pc, #664]	; (8001be4 <checkBrickHit+0x1304>)
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	440b      	add	r3, r1
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	4403      	add	r3, r0
 800195a:	330c      	adds	r3, #12
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	1e58      	subs	r0, r3, #1
 8001960:	4ca0      	ldr	r4, [pc, #640]	; (8001be4 <checkBrickHit+0x1304>)
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	440b      	add	r3, r1
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4423      	add	r3, r4
 8001970:	330c      	adds	r3, #12
 8001972:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 8001974:	4b9a      	ldr	r3, [pc, #616]	; (8001be0 <checkBrickHit+0x1300>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	1fda      	subs	r2, r3, #7
 800197a:	4b99      	ldr	r3, [pc, #612]	; (8001be0 <checkBrickHit+0x1300>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	da00      	bge.n	8001984 <checkBrickHit+0x10a4>
 8001982:	3307      	adds	r3, #7
 8001984:	10db      	asrs	r3, r3, #3
 8001986:	4618      	mov	r0, r3
 8001988:	4996      	ldr	r1, [pc, #600]	; (8001be4 <checkBrickHit+0x1304>)
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4403      	add	r3, r0
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	440b      	add	r3, r1
 8001998:	330c      	adds	r3, #12
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	dc30      	bgt.n	8001a02 <checkBrickHit+0x1122>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 80019a0:	4b8f      	ldr	r3, [pc, #572]	; (8001be0 <checkBrickHit+0x1300>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	1fda      	subs	r2, r3, #7
 80019a6:	4b8e      	ldr	r3, [pc, #568]	; (8001be0 <checkBrickHit+0x1300>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	da00      	bge.n	80019b0 <checkBrickHit+0x10d0>
 80019ae:	3307      	adds	r3, #7
 80019b0:	10db      	asrs	r3, r3, #3
 80019b2:	4618      	mov	r0, r3
 80019b4:	498b      	ldr	r1, [pc, #556]	; (8001be4 <checkBrickHit+0x1304>)
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4403      	add	r3, r0
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	440b      	add	r3, r1
 80019c4:	3308      	adds	r3, #8
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
                points++;
 80019ca:	4b87      	ldr	r3, [pc, #540]	; (8001be8 <checkBrickHit+0x1308>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b85      	ldr	r3, [pc, #532]	; (8001be8 <checkBrickHit+0x1308>)
 80019d4:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 80019d6:	4b82      	ldr	r3, [pc, #520]	; (8001be0 <checkBrickHit+0x1300>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	da00      	bge.n	80019e0 <checkBrickHit+0x1100>
 80019de:	3307      	adds	r3, #7
 80019e0:	10db      	asrs	r3, r3, #3
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b7e      	ldr	r3, [pc, #504]	; (8001be0 <checkBrickHit+0x1300>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	3b07      	subs	r3, #7
 80019ea:	4619      	mov	r1, r3
 80019ec:	4610      	mov	r0, r2
 80019ee:	f000 fa39 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y + 1 - 8);
 80019f2:	4b7b      	ldr	r3, [pc, #492]	; (8001be0 <checkBrickHit+0x1300>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3b07      	subs	r3, #7
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fcc9 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 8001a02:	4b77      	ldr	r3, [pc, #476]	; (8001be0 <checkBrickHit+0x1300>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	1fda      	subs	r2, r3, #7
 8001a08:	4b75      	ldr	r3, [pc, #468]	; (8001be0 <checkBrickHit+0x1300>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da00      	bge.n	8001a12 <checkBrickHit+0x1132>
 8001a10:	3307      	adds	r3, #7
 8001a12:	10db      	asrs	r3, r3, #3
 8001a14:	4618      	mov	r0, r3
 8001a16:	4973      	ldr	r1, [pc, #460]	; (8001be4 <checkBrickHit+0x1304>)
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4403      	add	r3, r0
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	440b      	add	r3, r1
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	b298      	uxth	r0, r3
 8001a2e:	4b6c      	ldr	r3, [pc, #432]	; (8001be0 <checkBrickHit+0x1300>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	1fda      	subs	r2, r3, #7
 8001a34:	4b6a      	ldr	r3, [pc, #424]	; (8001be0 <checkBrickHit+0x1300>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	da00      	bge.n	8001a3e <checkBrickHit+0x115e>
 8001a3c:	3307      	adds	r3, #7
 8001a3e:	10db      	asrs	r3, r3, #3
 8001a40:	461c      	mov	r4, r3
 8001a42:	4968      	ldr	r1, [pc, #416]	; (8001be4 <checkBrickHit+0x1304>)
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4423      	add	r3, r4
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	440b      	add	r3, r1
 8001a52:	3304      	adds	r3, #4
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	b299      	uxth	r1, r3
 8001a5c:	4b60      	ldr	r3, [pc, #384]	; (8001be0 <checkBrickHit+0x1300>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	1fda      	subs	r2, r3, #7
 8001a62:	4b5f      	ldr	r3, [pc, #380]	; (8001be0 <checkBrickHit+0x1300>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da00      	bge.n	8001a6c <checkBrickHit+0x118c>
 8001a6a:	3307      	adds	r3, #7
 8001a6c:	10db      	asrs	r3, r3, #3
 8001a6e:	461d      	mov	r5, r3
 8001a70:	4c5c      	ldr	r4, [pc, #368]	; (8001be4 <checkBrickHit+0x1304>)
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	442b      	add	r3, r5
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	4423      	add	r3, r4
 8001a80:	330c      	adds	r3, #12
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a59      	ldr	r2, [pc, #356]	; (8001bec <checkBrickHit+0x130c>)
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2304      	movs	r3, #4
 8001a90:	2220      	movs	r2, #32
 8001a92:	f003 fc8f 	bl	80053b4 <Displ_FillArea>
            bricksHit++;
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	71fb      	strb	r3, [r7, #7]
            ball.dir = NW;
 8001a9c:	4b50      	ldr	r3, [pc, #320]	; (8001be0 <checkBrickHit+0x1300>)
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 8001aa2:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <checkBrickHit+0x1300>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f1a3 0208 	sub.w	r2, r3, #8
 8001aaa:	4b4d      	ldr	r3, [pc, #308]	; (8001be0 <checkBrickHit+0x1300>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da00      	bge.n	8001ab6 <checkBrickHit+0x11d6>
 8001ab4:	3307      	adds	r3, #7
 8001ab6:	10db      	asrs	r3, r3, #3
 8001ab8:	4618      	mov	r0, r3
 8001aba:	494a      	ldr	r1, [pc, #296]	; (8001be4 <checkBrickHit+0x1304>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4403      	add	r3, r0
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	440b      	add	r3, r1
 8001aca:	3308      	adds	r3, #8
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	f040 80d7 	bne.w	8001c82 <checkBrickHit+0x13a2>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8001ad4:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <checkBrickHit+0x1300>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f1a3 0208 	sub.w	r2, r3, #8
 8001adc:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <checkBrickHit+0x1300>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	da00      	bge.n	8001ae8 <checkBrickHit+0x1208>
 8001ae6:	3307      	adds	r3, #7
 8001ae8:	10db      	asrs	r3, r3, #3
 8001aea:	4619      	mov	r1, r3
 8001aec:	483d      	ldr	r0, [pc, #244]	; (8001be4 <checkBrickHit+0x1304>)
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	440b      	add	r3, r1
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	4403      	add	r3, r0
 8001afc:	330c      	adds	r3, #12
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1e58      	subs	r0, r3, #1
 8001b02:	4c38      	ldr	r4, [pc, #224]	; (8001be4 <checkBrickHit+0x1304>)
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	440b      	add	r3, r1
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	4423      	add	r3, r4
 8001b12:	330c      	adds	r3, #12
 8001b14:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8001b16:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <checkBrickHit+0x1300>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f1a3 0208 	sub.w	r2, r3, #8
 8001b1e:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <checkBrickHit+0x1300>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da00      	bge.n	8001b2a <checkBrickHit+0x124a>
 8001b28:	3307      	adds	r3, #7
 8001b2a:	10db      	asrs	r3, r3, #3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	492d      	ldr	r1, [pc, #180]	; (8001be4 <checkBrickHit+0x1304>)
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4403      	add	r3, r0
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	440b      	add	r3, r1
 8001b3e:	330c      	adds	r3, #12
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	dc33      	bgt.n	8001bae <checkBrickHit+0x12ce>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8001b46:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <checkBrickHit+0x1300>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f1a3 0208 	sub.w	r2, r3, #8
 8001b4e:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <checkBrickHit+0x1300>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	da00      	bge.n	8001b5a <checkBrickHit+0x127a>
 8001b58:	3307      	adds	r3, #7
 8001b5a:	10db      	asrs	r3, r3, #3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	4921      	ldr	r1, [pc, #132]	; (8001be4 <checkBrickHit+0x1304>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4403      	add	r3, r0
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	440b      	add	r3, r1
 8001b6e:	3308      	adds	r3, #8
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
                points++;
 8001b74:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <checkBrickHit+0x1308>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <checkBrickHit+0x1308>)
 8001b7e:	701a      	strb	r2, [r3, #0]
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <checkBrickHit+0x1300>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	da00      	bge.n	8001b8c <checkBrickHit+0x12ac>
 8001b8a:	3307      	adds	r3, #7
 8001b8c:	10db      	asrs	r3, r3, #3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <checkBrickHit+0x1300>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	3b08      	subs	r3, #8
 8001b96:	4619      	mov	r1, r3
 8001b98:	4610      	mov	r0, r2
 8001b9a:	f000 f963 	bl	8001e64 <dropPowerUp>
                checkEmptyRow(ball.y - 8);
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <checkBrickHit+0x1300>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	3b08      	subs	r3, #8
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fbf3 	bl	8002394 <checkEmptyRow>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <checkBrickHit+0x1300>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f1a3 0208 	sub.w	r2, r3, #8
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <checkBrickHit+0x1300>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da00      	bge.n	8001bc2 <checkBrickHit+0x12e2>
 8001bc0:	3307      	adds	r3, #7
 8001bc2:	10db      	asrs	r3, r3, #3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	4907      	ldr	r1, [pc, #28]	; (8001be4 <checkBrickHit+0x1304>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4403      	add	r3, r0
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	440b      	add	r3, r1
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	b298      	uxth	r0, r3
 8001bde:	e007      	b.n	8001bf0 <checkBrickHit+0x1310>
 8001be0:	20000038 	.word	0x20000038
 8001be4:	200000ec 	.word	0x200000ec
 8001be8:	20001eec 	.word	0x20001eec
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	4b98      	ldr	r3, [pc, #608]	; (8001e54 <checkBrickHit+0x1574>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f1a3 0208 	sub.w	r2, r3, #8
 8001bf8:	4b96      	ldr	r3, [pc, #600]	; (8001e54 <checkBrickHit+0x1574>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	da00      	bge.n	8001c04 <checkBrickHit+0x1324>
 8001c02:	3307      	adds	r3, #7
 8001c04:	10db      	asrs	r3, r3, #3
 8001c06:	461c      	mov	r4, r3
 8001c08:	4993      	ldr	r1, [pc, #588]	; (8001e58 <checkBrickHit+0x1578>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4423      	add	r3, r4
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	440b      	add	r3, r1
 8001c18:	3304      	adds	r3, #4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	b299      	uxth	r1, r3
 8001c22:	4b8c      	ldr	r3, [pc, #560]	; (8001e54 <checkBrickHit+0x1574>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f1a3 0208 	sub.w	r2, r3, #8
 8001c2a:	4b8a      	ldr	r3, [pc, #552]	; (8001e54 <checkBrickHit+0x1574>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	da00      	bge.n	8001c36 <checkBrickHit+0x1356>
 8001c34:	3307      	adds	r3, #7
 8001c36:	10db      	asrs	r3, r3, #3
 8001c38:	461d      	mov	r5, r3
 8001c3a:	4c87      	ldr	r4, [pc, #540]	; (8001e58 <checkBrickHit+0x1578>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	442b      	add	r3, r5
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	4423      	add	r3, r4
 8001c4a:	330c      	adds	r3, #12
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a83      	ldr	r2, [pc, #524]	; (8001e5c <checkBrickHit+0x157c>)
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2304      	movs	r3, #4
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	f003 fbaa 	bl	80053b4 <Displ_FillArea>
            bricksHit++;
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	3301      	adds	r3, #1
 8001c64:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SW) {
 8001c66:	4b7b      	ldr	r3, [pc, #492]	; (8001e54 <checkBrickHit+0x1574>)
 8001c68:	7a1b      	ldrb	r3, [r3, #8]
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d102      	bne.n	8001c74 <checkBrickHit+0x1394>
                ball.dir = SE;
 8001c6e:	4b79      	ldr	r3, [pc, #484]	; (8001e54 <checkBrickHit+0x1574>)
 8001c70:	2203      	movs	r2, #3
 8001c72:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NW) {
 8001c74:	4b77      	ldr	r3, [pc, #476]	; (8001e54 <checkBrickHit+0x1574>)
 8001c76:	7a1b      	ldrb	r3, [r3, #8]
 8001c78:	2b07      	cmp	r3, #7
 8001c7a:	d102      	bne.n	8001c82 <checkBrickHit+0x13a2>
                ball.dir = NE;
 8001c7c:	4b75      	ldr	r3, [pc, #468]	; (8001e54 <checkBrickHit+0x1574>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f040 80e0 	bne.w	8001e4a <checkBrickHit+0x156a>
            if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible == 1) {
 8001c8a:	4b72      	ldr	r3, [pc, #456]	; (8001e54 <checkBrickHit+0x1574>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	1fda      	subs	r2, r3, #7
 8001c90:	4b70      	ldr	r3, [pc, #448]	; (8001e54 <checkBrickHit+0x1574>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	da00      	bge.n	8001c9c <checkBrickHit+0x13bc>
 8001c9a:	3307      	adds	r3, #7
 8001c9c:	10db      	asrs	r3, r3, #3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	496d      	ldr	r1, [pc, #436]	; (8001e58 <checkBrickHit+0x1578>)
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4403      	add	r3, r0
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	440b      	add	r3, r1
 8001cb0:	3308      	adds	r3, #8
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	f040 80c8 	bne.w	8001e4a <checkBrickHit+0x156a>
                bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness--;
 8001cba:	4b66      	ldr	r3, [pc, #408]	; (8001e54 <checkBrickHit+0x1574>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	1fda      	subs	r2, r3, #7
 8001cc0:	4b64      	ldr	r3, [pc, #400]	; (8001e54 <checkBrickHit+0x1574>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	da00      	bge.n	8001ccc <checkBrickHit+0x13ec>
 8001cca:	3307      	adds	r3, #7
 8001ccc:	10db      	asrs	r3, r3, #3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4861      	ldr	r0, [pc, #388]	; (8001e58 <checkBrickHit+0x1578>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	440b      	add	r3, r1
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	4403      	add	r3, r0
 8001ce0:	330c      	adds	r3, #12
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	1e58      	subs	r0, r3, #1
 8001ce6:	4c5c      	ldr	r4, [pc, #368]	; (8001e58 <checkBrickHit+0x1578>)
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	440b      	add	r3, r1
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	4423      	add	r3, r4
 8001cf6:	330c      	adds	r3, #12
 8001cf8:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8001cfa:	4b56      	ldr	r3, [pc, #344]	; (8001e54 <checkBrickHit+0x1574>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	1fda      	subs	r2, r3, #7
 8001d00:	4b54      	ldr	r3, [pc, #336]	; (8001e54 <checkBrickHit+0x1574>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	da00      	bge.n	8001d0c <checkBrickHit+0x142c>
 8001d0a:	3307      	adds	r3, #7
 8001d0c:	10db      	asrs	r3, r3, #3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	4951      	ldr	r1, [pc, #324]	; (8001e58 <checkBrickHit+0x1578>)
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4403      	add	r3, r0
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	440b      	add	r3, r1
 8001d20:	330c      	adds	r3, #12
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	dc32      	bgt.n	8001d8e <checkBrickHit+0x14ae>
                    bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible = 0;
 8001d28:	4b4a      	ldr	r3, [pc, #296]	; (8001e54 <checkBrickHit+0x1574>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	1fda      	subs	r2, r3, #7
 8001d2e:	4b49      	ldr	r3, [pc, #292]	; (8001e54 <checkBrickHit+0x1574>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	da00      	bge.n	8001d3a <checkBrickHit+0x145a>
 8001d38:	3307      	adds	r3, #7
 8001d3a:	10db      	asrs	r3, r3, #3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	4946      	ldr	r1, [pc, #280]	; (8001e58 <checkBrickHit+0x1578>)
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4403      	add	r3, r0
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3308      	adds	r3, #8
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
                    points++;
 8001d54:	4b42      	ldr	r3, [pc, #264]	; (8001e60 <checkBrickHit+0x1580>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b40      	ldr	r3, [pc, #256]	; (8001e60 <checkBrickHit+0x1580>)
 8001d5e:	701a      	strb	r2, [r3, #0]
                    dropPowerUp((ball.x - 1)/8, ball.y + 1 - 8);
 8001d60:	4b3c      	ldr	r3, [pc, #240]	; (8001e54 <checkBrickHit+0x1574>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	da00      	bge.n	8001d6c <checkBrickHit+0x148c>
 8001d6a:	3307      	adds	r3, #7
 8001d6c:	10db      	asrs	r3, r3, #3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <checkBrickHit+0x1574>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	3b07      	subs	r3, #7
 8001d76:	4619      	mov	r1, r3
 8001d78:	4610      	mov	r0, r2
 8001d7a:	f000 f873 	bl	8001e64 <dropPowerUp>
                    checkEmptyRow(ball.y + 1 - 8);
 8001d7e:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <checkBrickHit+0x1574>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	3b07      	subs	r3, #7
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fb03 	bl	8002394 <checkEmptyRow>
                }
                ball.dir = NE;
 8001d8e:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <checkBrickHit+0x1574>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	721a      	strb	r2, [r3, #8]
                Displ_FillArea(bricks[ball.y + 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y + 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness]);
 8001d94:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <checkBrickHit+0x1574>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	1fda      	subs	r2, r3, #7
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <checkBrickHit+0x1574>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	da00      	bge.n	8001da6 <checkBrickHit+0x14c6>
 8001da4:	3307      	adds	r3, #7
 8001da6:	10db      	asrs	r3, r3, #3
 8001da8:	4618      	mov	r0, r3
 8001daa:	492b      	ldr	r1, [pc, #172]	; (8001e58 <checkBrickHit+0x1578>)
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4403      	add	r3, r0
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	440b      	add	r3, r1
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	b298      	uxth	r0, r3
 8001dc2:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <checkBrickHit+0x1574>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	1fda      	subs	r2, r3, #7
 8001dc8:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <checkBrickHit+0x1574>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	da00      	bge.n	8001dd4 <checkBrickHit+0x14f4>
 8001dd2:	3307      	adds	r3, #7
 8001dd4:	10db      	asrs	r3, r3, #3
 8001dd6:	461c      	mov	r4, r3
 8001dd8:	491f      	ldr	r1, [pc, #124]	; (8001e58 <checkBrickHit+0x1578>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4423      	add	r3, r4
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	440b      	add	r3, r1
 8001de8:	3304      	adds	r3, #4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	b299      	uxth	r1, r3
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <checkBrickHit+0x1574>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	1fda      	subs	r2, r3, #7
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <checkBrickHit+0x1574>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da00      	bge.n	8001e04 <checkBrickHit+0x1524>
 8001e02:	3307      	adds	r3, #7
 8001e04:	10db      	asrs	r3, r3, #3
 8001e06:	461d      	mov	r5, r3
 8001e08:	4c13      	ldr	r4, [pc, #76]	; (8001e58 <checkBrickHit+0x1578>)
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	442b      	add	r3, r5
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	4423      	add	r3, r4
 8001e18:	330c      	adds	r3, #12
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <checkBrickHit+0x157c>)
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2304      	movs	r3, #4
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f003 fac3 	bl	80053b4 <Displ_FillArea>
            }
        }
        break;
 8001e2e:	e00c      	b.n	8001e4a <checkBrickHit+0x156a>
    case still:
        break;
    default:
        ball.dir = ball.dir;
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <checkBrickHit+0x1574>)
 8001e32:	7a1a      	ldrb	r2, [r3, #8]
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <checkBrickHit+0x1574>)
 8001e36:	721a      	strb	r2, [r3, #8]
    }
}
 8001e38:	e008      	b.n	8001e4c <checkBrickHit+0x156c>
        break;
 8001e3a:	bf00      	nop
 8001e3c:	e006      	b.n	8001e4c <checkBrickHit+0x156c>
        break;
 8001e3e:	bf00      	nop
 8001e40:	e004      	b.n	8001e4c <checkBrickHit+0x156c>
        break;
 8001e42:	bf00      	nop
 8001e44:	e002      	b.n	8001e4c <checkBrickHit+0x156c>
        break;
 8001e46:	bf00      	nop
 8001e48:	e000      	b.n	8001e4c <checkBrickHit+0x156c>
        break;
 8001e4a:	bf00      	nop
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bdb0      	pop	{r4, r5, r7, pc}
 8001e54:	20000038 	.word	0x20000038
 8001e58:	200000ec 	.word	0x200000ec
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	20001eec 	.word	0x20001eec

08001e64 <dropPowerUp>:
 * @brief drops a potential powerup when a brick has been destroyed
 *
 * @param x x-coordinate of the destroyed brick
 * @param y y-coordinate of the destroyed brick
 */
void dropPowerUp(int x, int y) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
    uint8_t dropChance = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	73fb      	strb	r3, [r7, #15]
    if (guardian == 0) {
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <dropPowerUp+0x70>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d114      	bne.n	8001ea4 <dropPowerUp+0x40>
        srand(HAL_GetTick());
 8001e7a:	f004 f8bb 	bl	8005ff4 <HAL_GetTick>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f008 ff1d 	bl	800acc0 <srand>
        dropChance = RANDOM(0, 100);
 8001e86:	f008 ff49 	bl	800ad1c <rand>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <dropPowerUp+0x74>)
 8001e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001e92:	1111      	asrs	r1, r2, #4
 8001e94:	17da      	asrs	r2, r3, #31
 8001e96:	1a8a      	subs	r2, r1, r2
 8001e98:	2165      	movs	r1, #101	; 0x65
 8001e9a:	fb01 f202 	mul.w	r2, r1, r2
 8001e9e:	1a9a      	subs	r2, r3, r2
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	73fb      	strb	r3, [r7, #15]
    }

    if (dropChance <= 10 && dropChance > 0) {
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	2b0a      	cmp	r3, #10
 8001ea8:	d805      	bhi.n	8001eb6 <dropPowerUp+0x52>
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <dropPowerUp+0x52>
        guardian = 1;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <dropPowerUp+0x70>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
    }

    if (dropChance <= 15 && dropChance > 10) {
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b0f      	cmp	r3, #15
 8001eba:	d806      	bhi.n	8001eca <dropPowerUp+0x66>
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	2b0a      	cmp	r3, #10
 8001ec0:	d903      	bls.n	8001eca <dropPowerUp+0x66>
        explodeBricks(x, y);
 8001ec2:	6839      	ldr	r1, [r7, #0]
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f8d5 	bl	8002074 <explodeBricks>
    }
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20001eee 	.word	0x20001eee
 8001ed8:	288df0cb 	.word	0x288df0cb

08001edc <printScreen>:
/**
 * @fn void printScreen()
 * @brief prints the game screen
 *
 */
void printScreen() {
 8001edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ede:	b08b      	sub	sp, #44	; 0x2c
 8001ee0:	af06      	add	r7, sp, #24
    Displ_FillArea(SCREEN_WIDTH*4 - 8 - (3*8), 4, 30, 4, D_GREEN);
 8001ee2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2304      	movs	r3, #4
 8001eea:	221e      	movs	r2, #30
 8001eec:	2104      	movs	r1, #4
 8001eee:	f44f 7090 	mov.w	r0, #288	; 0x120
 8001ef2:	f003 fa5f 	bl	80053b4 <Displ_FillArea>

    for (int i = 0; i < lives1; i++) {
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e00f      	b.n	8001f1c <printScreen+0x40>
        Displ_FillArea(SCREEN_WIDTH*4 - 8 - (i*8), 4, 4, 4, D_BLUE);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	b298      	uxth	r0, r3
 8001f08:	2318      	movs	r3, #24
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	2204      	movs	r2, #4
 8001f10:	2104      	movs	r1, #4
 8001f12:	f003 fa4f 	bl	80053b4 <Displ_FillArea>
    for (int i = 0; i < lives1; i++) {
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	4b34      	ldr	r3, [pc, #208]	; (8001ff0 <printScreen+0x114>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4293      	cmp	r3, r2
 8001f26:	dbe9      	blt.n	8001efc <printScreen+0x20>
    }

    if (guardian == 1) {
 8001f28:	4b32      	ldr	r3, [pc, #200]	; (8001ff4 <printScreen+0x118>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d10f      	bne.n	8001f50 <printScreen+0x74>
        Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, GREY);
 8001f30:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <printScreen+0x11c>)
 8001f32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	b299      	uxth	r1, r3
 8001f3e:	f249 6396 	movw	r3, #38550	; 0x9696
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2304      	movs	r3, #4
 8001f46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f003 fa32 	bl	80053b4 <Displ_FillArea>
    }

    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, RED);
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <printScreen+0x11c>)
 8001f52:	f993 3000 	ldrsb.w	r3, [r3]
 8001f56:	3b19      	subs	r3, #25
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	b298      	uxth	r0, r3
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <printScreen+0x11c>)
 8001f60:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	b299      	uxth	r1, r3
 8001f6a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2304      	movs	r3, #4
 8001f72:	22c8      	movs	r2, #200	; 0xc8
 8001f74:	f003 fa1e 	bl	80053b4 <Displ_FillArea>

    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_BLUE);
 8001f78:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <printScreen+0x120>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	b298      	uxth	r0, r3
 8001f82:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <printScreen+0x120>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	b299      	uxth	r1, r3
 8001f8c:	2318      	movs	r3, #24
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2304      	movs	r3, #4
 8001f92:	2204      	movs	r2, #4
 8001f94:	f003 fa0e 	bl	80053b4 <Displ_FillArea>

    char str[12];
    snprintf(str, 12, "%u", points);
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <printScreen+0x124>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4638      	mov	r0, r7
 8001f9e:	4a19      	ldr	r2, [pc, #100]	; (8002004 <printScreen+0x128>)
 8001fa0:	210c      	movs	r1, #12
 8001fa2:	f008 fef9 	bl	800ad98 <sniprintf>
    Displ_WString(score.x*4, score.y, str, Font16, 1, WHITE, D_GREEN);
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <printScreen+0x12c>)
 8001fa8:	f993 3000 	ldrsb.w	r3, [r3]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	b29c      	uxth	r4, r3
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <printScreen+0x12c>)
 8001fb4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001fb8:	b29d      	uxth	r5, r3
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <printScreen+0x130>)
 8001fbc:	463e      	mov	r6, r7
 8001fbe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001fc2:	9204      	str	r2, [sp, #16]
 8001fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc8:	9203      	str	r2, [sp, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	9202      	str	r2, [sp, #8]
 8001fce:	46ec      	mov	ip, sp
 8001fd0:	1d1a      	adds	r2, r3, #4
 8001fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fd6:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4632      	mov	r2, r6
 8001fde:	4629      	mov	r1, r5
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f003 ff43 	bl	8005e6c <Displ_WString>
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000002 	.word	0x20000002
 8001ff4:	20001eee 	.word	0x20001eee
 8001ff8:	20000034 	.word	0x20000034
 8001ffc:	20000038 	.word	0x20000038
 8002000:	20001eec 	.word	0x20001eec
 8002004:	0800c2fc 	.word	0x0800c2fc
 8002008:	20000000 	.word	0x20000000
 800200c:	20000018 	.word	0x20000018

08002010 <checkGuardianTimer>:
/**
 * @fn void checkGuardianTimer()
 * @brief checks the timer for the guardian power up
 *
 */
void checkGuardianTimer() {
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af02      	add	r7, sp, #8
    if (guardian == 1) {
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <checkGuardianTimer+0x58>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d120      	bne.n	8002060 <checkGuardianTimer+0x50>
        if (guardianTimer <= 0) {
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <checkGuardianTimer+0x5c>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <checkGuardianTimer+0x44>
            guardian = 0;
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <checkGuardianTimer+0x58>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
            guardianTimer = 100;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <checkGuardianTimer+0x5c>)
 800202e:	2264      	movs	r2, #100	; 0x64
 8002030:	701a      	strb	r2, [r3, #0]
            Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, D_GREEN);
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <checkGuardianTimer+0x60>)
 8002034:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002038:	3b01      	subs	r3, #1
 800203a:	b29b      	uxth	r3, r3
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	b299      	uxth	r1, r3
 8002040:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2304      	movs	r3, #4
 8002048:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800204c:	2000      	movs	r0, #0
 800204e:	f003 f9b1 	bl	80053b4 <Displ_FillArea>
        } else {
            guardianTimer--;
        }
    }
}
 8002052:	e005      	b.n	8002060 <checkGuardianTimer+0x50>
            guardianTimer--;
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <checkGuardianTimer+0x5c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	3b01      	subs	r3, #1
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b03      	ldr	r3, [pc, #12]	; (800206c <checkGuardianTimer+0x5c>)
 800205e:	701a      	strb	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20001eee 	.word	0x20001eee
 800206c:	20000003 	.word	0x20000003
 8002070:	20000034 	.word	0x20000034

08002074 <explodeBricks>:
 * @brief explodes bricks in a radius of 1 (power up)
 *
 * @param x x-coordinate of the central brick of the explosion
 * @param y y-coordinate of the central brick of the explosion
 */
void explodeBricks(int x, int y) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af02      	add	r7, sp, #8
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
    int ymin = y - 1;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
    int xmin = x - 1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	61bb      	str	r3, [r7, #24]
    int ymax = y + 1;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
    int xmax = x + 1;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3301      	adds	r3, #1
 8002094:	613b      	str	r3, [r7, #16]
    if(y == 0) {
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <explodeBricks+0x2c>
        ymin = y;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	61fb      	str	r3, [r7, #28]
    }
    if(y == MAX_BRICK_LINES) {
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b30      	cmp	r3, #48	; 0x30
 80020a4:	d101      	bne.n	80020aa <explodeBricks+0x36>
        ymax = y;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	617b      	str	r3, [r7, #20]
    }
    if(x == 0) {
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <explodeBricks+0x40>
        xmin = x;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
    }
    if(x == 10) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b0a      	cmp	r3, #10
 80020b8:	d101      	bne.n	80020be <explodeBricks+0x4a>
        xmax = x;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	613b      	str	r3, [r7, #16]
    }


    for(int i = ymin; i <= ymax; i++) {
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	e063      	b.n	800218c <explodeBricks+0x118>
        for(int j = xmin; j <= xmax; j++) {
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	e059      	b.n	800217e <explodeBricks+0x10a>
            if(bricks[i][j].visible == 1) {
 80020ca:	4935      	ldr	r1, [pc, #212]	; (80021a0 <explodeBricks+0x12c>)
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	4413      	add	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	440b      	add	r3, r1
 80020de:	3308      	adds	r3, #8
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d148      	bne.n	8002178 <explodeBricks+0x104>
                bricks[i][j].toughness = 0;
 80020e6:	492e      	ldr	r1, [pc, #184]	; (80021a0 <explodeBricks+0x12c>)
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	4413      	add	r3, r2
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	440b      	add	r3, r1
 80020fa:	330c      	adds	r3, #12
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
                bricks[i][j].visible = 0;
 8002100:	4927      	ldr	r1, [pc, #156]	; (80021a0 <explodeBricks+0x12c>)
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	4413      	add	r3, r2
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	440b      	add	r3, r1
 8002114:	3308      	adds	r3, #8
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
                points++;
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <explodeBricks+0x130>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <explodeBricks+0x130>)
 8002124:	701a      	strb	r2, [r3, #0]

                Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, D_GREEN);
 8002126:	491e      	ldr	r1, [pc, #120]	; (80021a0 <explodeBricks+0x12c>)
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	4413      	add	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	440b      	add	r3, r1
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	b29b      	uxth	r3, r3
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	b298      	uxth	r0, r3
 8002142:	4917      	ldr	r1, [pc, #92]	; (80021a0 <explodeBricks+0x12c>)
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	4413      	add	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	440b      	add	r3, r1
 8002156:	3304      	adds	r3, #4
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	b299      	uxth	r1, r3
 8002160:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2304      	movs	r3, #4
 8002168:	2220      	movs	r2, #32
 800216a:	f003 f923 	bl	80053b4 <Displ_FillArea>
                checkEmptyRow(i);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f90e 	bl	8002394 <checkEmptyRow>
        for(int j = xmin; j <= xmax; j++) {
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3301      	adds	r3, #1
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	429a      	cmp	r2, r3
 8002184:	dda1      	ble.n	80020ca <explodeBricks+0x56>
    for(int i = ymin; i <= ymax; i++) {
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3301      	adds	r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	dd97      	ble.n	80020c4 <explodeBricks+0x50>
            }
        }
    }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200000ec 	.word	0x200000ec
 80021a4:	20001eec 	.word	0x20001eec

080021a8 <setBrickToughness>:
 * @fn int setBrickToughness(void)
 * @brief generates a random toughness level for a brick
 *
 * @return a toughness level for a brick or the amount of times a brick needs to be hit before being destroyed
 */
int setBrickToughness(void) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
    int toughnessPercent;
    int toughness = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	607b      	str	r3, [r7, #4]

    toughnessPercent = RANDOM(0, 100);
 80021b2:	f008 fdb3 	bl	800ad1c <rand>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4a14      	ldr	r2, [pc, #80]	; (800220c <setBrickToughness+0x64>)
 80021ba:	fb82 1203 	smull	r1, r2, r2, r3
 80021be:	1111      	asrs	r1, r2, #4
 80021c0:	17da      	asrs	r2, r3, #31
 80021c2:	1a8a      	subs	r2, r1, r2
 80021c4:	2165      	movs	r1, #101	; 0x65
 80021c6:	fb01 f202 	mul.w	r2, r1, r2
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	603b      	str	r3, [r7, #0]

    if(toughnessPercent > 0 && toughnessPercent <= 60) {
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	dd05      	ble.n	80021e0 <setBrickToughness+0x38>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b3c      	cmp	r3, #60	; 0x3c
 80021d8:	dc02      	bgt.n	80021e0 <setBrickToughness+0x38>
        toughness = 1;
 80021da:	2301      	movs	r3, #1
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	e010      	b.n	8002202 <setBrickToughness+0x5a>
    } else if(toughnessPercent > 60 && toughnessPercent < 90) {
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b3c      	cmp	r3, #60	; 0x3c
 80021e4:	dd05      	ble.n	80021f2 <setBrickToughness+0x4a>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b59      	cmp	r3, #89	; 0x59
 80021ea:	dc02      	bgt.n	80021f2 <setBrickToughness+0x4a>
        toughness = 2;
 80021ec:	2302      	movs	r3, #2
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	e007      	b.n	8002202 <setBrickToughness+0x5a>
    } else if(toughnessPercent > 90 && toughnessPercent < 100) {
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b5a      	cmp	r3, #90	; 0x5a
 80021f6:	dd04      	ble.n	8002202 <setBrickToughness+0x5a>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b63      	cmp	r3, #99	; 0x63
 80021fc:	dc01      	bgt.n	8002202 <setBrickToughness+0x5a>
        toughness = 3;
 80021fe:	2303      	movs	r3, #3
 8002200:	607b      	str	r3, [r7, #4]
    }

    return toughness;
 8002202:	687b      	ldr	r3, [r7, #4]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	288df0cb 	.word	0x288df0cb

08002210 <drawBricks>:
/**
 * @fn void drawBricks()
 * @brief draws the visible bricks in their respective color based on their toughness
 *
 */
void drawBricks() {
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af02      	add	r7, sp, #8
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	e0b0      	b.n	800237e <drawBricks+0x16e>
        for(int j = 0; j < 10; j++) {
 800221c:	2300      	movs	r3, #0
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	e0a6      	b.n	8002370 <drawBricks+0x160>
            if(bricks[i][j].visible == 1) {
 8002222:	495b      	ldr	r1, [pc, #364]	; (8002390 <drawBricks+0x180>)
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	4413      	add	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	440b      	add	r3, r1
 8002236:	3308      	adds	r3, #8
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b01      	cmp	r3, #1
 800223c:	f040 8095 	bne.w	800236a <drawBricks+0x15a>
                if (bricks[i][j].toughness == 3) {
 8002240:	4953      	ldr	r1, [pc, #332]	; (8002390 <drawBricks+0x180>)
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	4413      	add	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	440b      	add	r3, r1
 8002254:	330c      	adds	r3, #12
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d122      	bne.n	80022a2 <drawBricks+0x92>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, BLACK);
 800225c:	494c      	ldr	r1, [pc, #304]	; (8002390 <drawBricks+0x180>)
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	4413      	add	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	440b      	add	r3, r1
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	b298      	uxth	r0, r3
 8002278:	4945      	ldr	r1, [pc, #276]	; (8002390 <drawBricks+0x180>)
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	4413      	add	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	440b      	add	r3, r1
 800228c:	3304      	adds	r3, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	b299      	uxth	r1, r3
 8002296:	2300      	movs	r3, #0
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2304      	movs	r3, #4
 800229c:	2220      	movs	r2, #32
 800229e:	f003 f889 	bl	80053b4 <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 2) {
 80022a2:	493b      	ldr	r1, [pc, #236]	; (8002390 <drawBricks+0x180>)
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	440b      	add	r3, r1
 80022b6:	330c      	adds	r3, #12
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d123      	bne.n	8002306 <drawBricks+0xf6>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, DARK_GREY);
 80022be:	4934      	ldr	r1, [pc, #208]	; (8002390 <drawBricks+0x180>)
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	440b      	add	r3, r1
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	b298      	uxth	r0, r3
 80022da:	492d      	ldr	r1, [pc, #180]	; (8002390 <drawBricks+0x180>)
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4413      	add	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	440b      	add	r3, r1
 80022ee:	3304      	adds	r3, #4
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	b299      	uxth	r1, r3
 80022f8:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	2304      	movs	r3, #4
 8002300:	2220      	movs	r2, #32
 8002302:	f003 f857 	bl	80053b4 <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 1) {
 8002306:	4922      	ldr	r1, [pc, #136]	; (8002390 <drawBricks+0x180>)
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	4413      	add	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	440b      	add	r3, r1
 800231a:	330c      	adds	r3, #12
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d123      	bne.n	800236a <drawBricks+0x15a>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, GREY);
 8002322:	491b      	ldr	r1, [pc, #108]	; (8002390 <drawBricks+0x180>)
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	4413      	add	r3, r2
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	440b      	add	r3, r1
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	b298      	uxth	r0, r3
 800233e:	4914      	ldr	r1, [pc, #80]	; (8002390 <drawBricks+0x180>)
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	4413      	add	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	440b      	add	r3, r1
 8002352:	3304      	adds	r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	b299      	uxth	r1, r3
 800235c:	f249 6396 	movw	r3, #38550	; 0x9696
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2304      	movs	r3, #4
 8002364:	2220      	movs	r2, #32
 8002366:	f003 f825 	bl	80053b4 <Displ_FillArea>
        for(int j = 0; j < 10; j++) {
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b09      	cmp	r3, #9
 8002374:	f77f af55 	ble.w	8002222 <drawBricks+0x12>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3301      	adds	r3, #1
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b2f      	cmp	r3, #47	; 0x2f
 8002382:	f77f af4b 	ble.w	800221c <drawBricks+0xc>
                }
            }
        }
    }
}
 8002386:	bf00      	nop
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200000ec 	.word	0x200000ec

08002394 <checkEmptyRow>:
 * @fn void checkEmptyRow(uint8_t)
 * @brief checks if a row is empty
 *
 * @param row index for the row needed to be checked
 */
void checkEmptyRow(uint8_t row) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
    uint8_t empty = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]

    for(int i = 0; i < 10; i++) {
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	e012      	b.n	80023ce <checkEmptyRow+0x3a>
        if(bricks[row][i].visible > 0) {
 80023a8:	79fa      	ldrb	r2, [r7, #7]
 80023aa:	4911      	ldr	r1, [pc, #68]	; (80023f0 <checkEmptyRow+0x5c>)
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	4413      	add	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	440b      	add	r3, r1
 80023bc:	3308      	adds	r3, #8
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	dd01      	ble.n	80023c8 <checkEmptyRow+0x34>
            empty = 1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
    for(int i = 0; i < 10; i++) {
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	3301      	adds	r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b09      	cmp	r3, #9
 80023d2:	dde9      	ble.n	80023a8 <checkEmptyRow+0x14>
        }
    }
    if(empty == 0) {
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <checkEmptyRow+0x54>
        HAL_UART_Transmit(&huart2, (uint8_t *)"O", strlen("O"), 300);
 80023da:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80023de:	2201      	movs	r2, #1
 80023e0:	4904      	ldr	r1, [pc, #16]	; (80023f4 <checkEmptyRow+0x60>)
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <checkEmptyRow+0x64>)
 80023e4:	f007 fc82 	bl	8009cec <HAL_UART_Transmit>
    }

}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200000ec 	.word	0x200000ec
 80023f4:	0800c300 	.word	0x0800c300
 80023f8:	20001ff0 	.word	0x20001ff0

080023fc <setBgColor>:

#include "common.h"

uint16_t bg_color = 0x9696;

void setBgColor(uint16_t color){
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
	bg_color = color;
 8002406:	4a04      	ldr	r2, [pc, #16]	; (8002418 <setBgColor+0x1c>)
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	8013      	strh	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	20000014 	.word	0x20000014

0800241c <getBgColor>:

uint16_t getBgColor(){
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
	return bg_color;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <getBgColor+0x14>)
 8002422:	881b      	ldrh	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000014 	.word	0x20000014

08002434 <_write>:
#include "debug.h"

// Declare external UART handle
extern UART_HandleTypeDef huart3;

int _write(int file, char *ptr, int len) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3b01      	subs	r3, #1
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8002444:	2b01      	cmp	r3, #1
 8002446:	d814      	bhi.n	8002472 <_write+0x3e>
    case STDOUT_FILENO: /*stdout*/
    case STDERR_FILENO: /*stderr*/
        xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	b29a      	uxth	r2, r3
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	480f      	ldr	r0, [pc, #60]	; (8002490 <_write+0x5c>)
 8002454:	f007 fc4a 	bl	8009cec <HAL_UART_Transmit>
 8002458:	4603      	mov	r3, r0
 800245a:	75fb      	strb	r3, [r7, #23]
        if (xStatus != HAL_OK) {
 800245c:	7dfb      	ldrb	r3, [r7, #23]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00f      	beq.n	8002482 <_write+0x4e>
            errno = EIO;
 8002462:	f008 fb6d 	bl	800ab40 <__errno>
 8002466:	4603      	mov	r3, r0
 8002468:	2205      	movs	r2, #5
 800246a:	601a      	str	r2, [r3, #0]
            return -1;
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
 8002470:	e009      	b.n	8002486 <_write+0x52>
        }
        break;
    default:
        errno = EBADF;
 8002472:	f008 fb65 	bl	800ab40 <__errno>
 8002476:	4603      	mov	r3, r0
 8002478:	2209      	movs	r2, #9
 800247a:	601a      	str	r2, [r3, #0]
        return -1;
 800247c:	f04f 33ff 	mov.w	r3, #4294967295
 8002480:	e001      	b.n	8002486 <_write+0x52>
        break;
 8002482:	bf00      	nop
    }
    return len;
 8002484:	687b      	ldr	r3, [r7, #4]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20002078 	.word	0x20002078

08002494 <init>:
ballPoint ball = {(SCREEN_WIDTH)/2, SCREEN_HEIGHT - 6, still};
uint8_t start = 0;
uint8_t delay = BRICK_SPEED;
directions ballDirection = NE;

void init (void) {
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
    choice = 0;
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <init+0x28>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
    if(gamechoice == 1){
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <init+0x2c>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d102      	bne.n	80024ac <init+0x18>
        initSpaceInvaders();
 80024a6:	f001 fa3f 	bl	8003928 <initSpaceInvaders>
    }else if(gamechoice == 2){
        initBrickbreaker();
    }


}
 80024aa:	e005      	b.n	80024b8 <init+0x24>
    }else if(gamechoice == 2){
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <init+0x2c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d101      	bne.n	80024b8 <init+0x24>
        initBrickbreaker();
 80024b4:	f7fd fee4 	bl	8000280 <initBrickbreaker>
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20001ef0 	.word	0x20001ef0
 80024c0:	20001ef1 	.word	0x20001ef1

080024c4 <loop>:

int loop (int key) {
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	6078      	str	r0, [r7, #4]
    updateScreen();
 80024cc:	f000 fb1c 	bl	8002b08 <updateScreen>
    if (play == menu){
 80024d0:	4b96      	ldr	r3, [pc, #600]	; (800272c <loop+0x268>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d104      	bne.n	80024e2 <loop+0x1e>
        max_choice = total_games;
 80024d8:	4b95      	ldr	r3, [pc, #596]	; (8002730 <loop+0x26c>)
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	4b95      	ldr	r3, [pc, #596]	; (8002734 <loop+0x270>)
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	e002      	b.n	80024e8 <loop+0x24>
    }else{
        max_choice = 1;
 80024e2:	4b94      	ldr	r3, [pc, #592]	; (8002734 <loop+0x270>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
    }
    if(key == left) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d160      	bne.n	80025b0 <loop+0xec>
        if(play < paused){
 80024ee:	4b8f      	ldr	r3, [pc, #572]	; (800272c <loop+0x268>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d84f      	bhi.n	8002596 <loop+0xd2>
        	if(gamechoice == 1){
 80024f6:	4b90      	ldr	r3, [pc, #576]	; (8002738 <loop+0x274>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d104      	bne.n	8002508 <loop+0x44>
        		moveSpaceship(-1);
 80024fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002502:	f001 fe71 	bl	80041e8 <moveSpaceship>
 8002506:	e046      	b.n	8002596 <loop+0xd2>
        	}else if(gamechoice == 2) {
 8002508:	4b8b      	ldr	r3, [pc, #556]	; (8002738 <loop+0x274>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d142      	bne.n	8002596 <loop+0xd2>
        	    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 8002510:	4b8a      	ldr	r3, [pc, #552]	; (800273c <loop+0x278>)
 8002512:	f993 3000 	ldrsb.w	r3, [r3]
 8002516:	3b19      	subs	r3, #25
 8002518:	b29b      	uxth	r3, r3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	b298      	uxth	r0, r3
 800251e:	4b87      	ldr	r3, [pc, #540]	; (800273c <loop+0x278>)
 8002520:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002524:	b29b      	uxth	r3, r3
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	b299      	uxth	r1, r3
 800252a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2304      	movs	r3, #4
 8002532:	22c8      	movs	r2, #200	; 0xc8
 8002534:	f002 ff3e 	bl	80053b4 <Displ_FillArea>
                person.x--;
 8002538:	4b80      	ldr	r3, [pc, #512]	; (800273c <loop+0x278>)
 800253a:	f993 3000 	ldrsb.w	r3, [r3]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b2db      	uxtb	r3, r3
 8002544:	b25a      	sxtb	r2, r3
 8002546:	4b7d      	ldr	r3, [pc, #500]	; (800273c <loop+0x278>)
 8002548:	701a      	strb	r2, [r3, #0]
                if(person.x < BAR_SIZE/2) {
 800254a:	4b7c      	ldr	r3, [pc, #496]	; (800273c <loop+0x278>)
 800254c:	f993 3000 	ldrsb.w	r3, [r3]
 8002550:	2b18      	cmp	r3, #24
 8002552:	dc03      	bgt.n	800255c <loop+0x98>
                    person.x = (BAR_SIZE/2);
 8002554:	4b79      	ldr	r3, [pc, #484]	; (800273c <loop+0x278>)
 8002556:	2219      	movs	r2, #25
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e01c      	b.n	8002596 <loop+0xd2>
                } else {
                    if (ball.dir == still) {
 800255c:	4b78      	ldr	r3, [pc, #480]	; (8002740 <loop+0x27c>)
 800255e:	7a1b      	ldrb	r3, [r3, #8]
 8002560:	2b08      	cmp	r3, #8
 8002562:	d118      	bne.n	8002596 <loop+0xd2>
                        Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 8002564:	4b76      	ldr	r3, [pc, #472]	; (8002740 <loop+0x27c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	b298      	uxth	r0, r3
 800256e:	4b74      	ldr	r3, [pc, #464]	; (8002740 <loop+0x27c>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	b29b      	uxth	r3, r3
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	b299      	uxth	r1, r3
 8002578:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2304      	movs	r3, #4
 8002580:	2204      	movs	r2, #4
 8002582:	f002 ff17 	bl	80053b4 <Displ_FillArea>
                        ball.x--;
 8002586:	4b6e      	ldr	r3, [pc, #440]	; (8002740 <loop+0x27c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3b01      	subs	r3, #1
 800258c:	4a6c      	ldr	r2, [pc, #432]	; (8002740 <loop+0x27c>)
 800258e:	6013      	str	r3, [r2, #0]
                        ballDirection = NW;
 8002590:	4b6c      	ldr	r3, [pc, #432]	; (8002744 <loop+0x280>)
 8002592:	2207      	movs	r2, #7
 8002594:	701a      	strb	r2, [r3, #0]
                    }
                }
        	}
        }
        if (choice != 0){
 8002596:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <loop+0x284>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <loop+0xe6>
        	choice--;
 800259e:	4b6a      	ldr	r3, [pc, #424]	; (8002748 <loop+0x284>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b68      	ldr	r3, [pc, #416]	; (8002748 <loop+0x284>)
 80025a8:	701a      	strb	r2, [r3, #0]
        }

        key = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	e177      	b.n	80028a0 <loop+0x3dc>
    }
    else if(key == right) {
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d160      	bne.n	8002678 <loop+0x1b4>
    	if(play < paused){
 80025b6:	4b5d      	ldr	r3, [pc, #372]	; (800272c <loop+0x268>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d84d      	bhi.n	800265a <loop+0x196>
    		if(gamechoice == 1){
 80025be:	4b5e      	ldr	r3, [pc, #376]	; (8002738 <loop+0x274>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d103      	bne.n	80025ce <loop+0x10a>
    			moveSpaceship(1);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f001 fe0e 	bl	80041e8 <moveSpaceship>
 80025cc:	e045      	b.n	800265a <loop+0x196>
    		}else if (gamechoice == 2) {
 80025ce:	4b5a      	ldr	r3, [pc, #360]	; (8002738 <loop+0x274>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d141      	bne.n	800265a <loop+0x196>
    			Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 80025d6:	4b59      	ldr	r3, [pc, #356]	; (800273c <loop+0x278>)
 80025d8:	f993 3000 	ldrsb.w	r3, [r3]
 80025dc:	3b19      	subs	r3, #25
 80025de:	b29b      	uxth	r3, r3
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	b298      	uxth	r0, r3
 80025e4:	4b55      	ldr	r3, [pc, #340]	; (800273c <loop+0x278>)
 80025e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	b299      	uxth	r1, r3
 80025f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	2304      	movs	r3, #4
 80025f8:	22c8      	movs	r2, #200	; 0xc8
 80025fa:	f002 fedb 	bl	80053b4 <Displ_FillArea>
    			person.x++;
 80025fe:	4b4f      	ldr	r3, [pc, #316]	; (800273c <loop+0x278>)
 8002600:	f993 3000 	ldrsb.w	r3, [r3]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	3301      	adds	r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	b25a      	sxtb	r2, r3
 800260c:	4b4b      	ldr	r3, [pc, #300]	; (800273c <loop+0x278>)
 800260e:	701a      	strb	r2, [r3, #0]
    			if(person.x > SCREEN_WIDTH - (BAR_SIZE/2) - 1) {
 8002610:	4b4a      	ldr	r3, [pc, #296]	; (800273c <loop+0x278>)
 8002612:	f993 3000 	ldrsb.w	r3, [r3]
 8002616:	2b36      	cmp	r3, #54	; 0x36
 8002618:	dd02      	ble.n	8002620 <loop+0x15c>
    				person.x = SCREEN_WIDTH - (BAR_SIZE/2) - 1;
 800261a:	4b48      	ldr	r3, [pc, #288]	; (800273c <loop+0x278>)
 800261c:	2236      	movs	r2, #54	; 0x36
 800261e:	701a      	strb	r2, [r3, #0]
    			}
    			if (ball.dir == still) {
 8002620:	4b47      	ldr	r3, [pc, #284]	; (8002740 <loop+0x27c>)
 8002622:	7a1b      	ldrb	r3, [r3, #8]
 8002624:	2b08      	cmp	r3, #8
 8002626:	d118      	bne.n	800265a <loop+0x196>
    				Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 8002628:	4b45      	ldr	r3, [pc, #276]	; (8002740 <loop+0x27c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	b29b      	uxth	r3, r3
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	b298      	uxth	r0, r3
 8002632:	4b43      	ldr	r3, [pc, #268]	; (8002740 <loop+0x27c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	b29b      	uxth	r3, r3
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b299      	uxth	r1, r3
 800263c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2304      	movs	r3, #4
 8002644:	2204      	movs	r2, #4
 8002646:	f002 feb5 	bl	80053b4 <Displ_FillArea>
    				ball.x++;
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <loop+0x27c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	4a3b      	ldr	r2, [pc, #236]	; (8002740 <loop+0x27c>)
 8002652:	6013      	str	r3, [r2, #0]
    				ballDirection = NE;
 8002654:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <loop+0x280>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
    			}
    		}
    	}
    	if (choice != max_choice){
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <loop+0x284>)
 800265c:	781a      	ldrb	r2, [r3, #0]
 800265e:	4b35      	ldr	r3, [pc, #212]	; (8002734 <loop+0x270>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d005      	beq.n	8002672 <loop+0x1ae>
    		choice++;
 8002666:	4b38      	ldr	r3, [pc, #224]	; (8002748 <loop+0x284>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <loop+0x284>)
 8002670:	701a      	strb	r2, [r3, #0]
    	}
    	key = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	e113      	b.n	80028a0 <loop+0x3dc>
    }
    else if(key == down){
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b04      	cmp	r3, #4
 800267c:	f040 80ee 	bne.w	800285c <loop+0x398>
        if (play == notPlay){
 8002680:	4b2a      	ldr	r3, [pc, #168]	; (800272c <loop+0x268>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11a      	bne.n	80026be <loop+0x1fa>
        	Displ_FillArea(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, 140, 20, getBgColor());
 8002688:	f7ff fec8 	bl	800241c <getBgColor>
 800268c:	4603      	mov	r3, r0
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2314      	movs	r3, #20
 8002692:	228c      	movs	r2, #140	; 0x8c
 8002694:	2178      	movs	r1, #120	; 0x78
 8002696:	205a      	movs	r0, #90	; 0x5a
 8002698:	f002 fe8c 	bl	80053b4 <Displ_FillArea>
            play = inPlay;
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <loop+0x268>)
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
            if(getConnection() == 1) {
 80026a2:	f001 f8a5 	bl	80037f0 <getConnection>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	f040 80d4 	bne.w	8002856 <loop+0x392>
                HAL_UART_Transmit(&huart2, (uint8_t *)"S", strlen("S"), 300);
 80026ae:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80026b2:	2201      	movs	r2, #1
 80026b4:	4925      	ldr	r1, [pc, #148]	; (800274c <loop+0x288>)
 80026b6:	4826      	ldr	r0, [pc, #152]	; (8002750 <loop+0x28c>)
 80026b8:	f007 fb18 	bl	8009cec <HAL_UART_Transmit>
 80026bc:	e0cb      	b.n	8002856 <loop+0x392>
            }
        }else if(play == inPlay) {
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <loop+0x268>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d114      	bne.n	80026f0 <loop+0x22c>
            if (ball.dir == still) {
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <loop+0x27c>)
 80026c8:	7a1b      	ldrb	r3, [r3, #8]
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d108      	bne.n	80026e0 <loop+0x21c>
                ball.dir = ballDirection;
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <loop+0x280>)
 80026d0:	781a      	ldrb	r2, [r3, #0]
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <loop+0x27c>)
 80026d4:	721a      	strb	r2, [r3, #8]
                start = 1;
 80026d6:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <loop+0x290>)
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
                playBall();
 80026dc:	f7fd fe72 	bl	80003c4 <playBall>
            }
            if(!hit){
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <loop+0x294>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 80b6 	bne.w	8002856 <loop+0x392>
                spawnBullet();
 80026ea:	f001 fa6b 	bl	8003bc4 <spawnBullet>
 80026ee:	e0b2      	b.n	8002856 <loop+0x392>
            }
        }else if(play == paused){
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <loop+0x268>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d14f      	bne.n	8002798 <loop+0x2d4>
            if(choice == 0){
 80026f8:	4b13      	ldr	r3, [pc, #76]	; (8002748 <loop+0x284>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d12f      	bne.n	8002760 <loop+0x29c>
                if(getConnection() == 1) {
 8002700:	f001 f876 	bl	80037f0 <getConnection>
 8002704:	4603      	mov	r3, r0
 8002706:	2b01      	cmp	r3, #1
 8002708:	d106      	bne.n	8002718 <loop+0x254>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"M", strlen("M"), 300);
 800270a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800270e:	2201      	movs	r2, #1
 8002710:	4912      	ldr	r1, [pc, #72]	; (800275c <loop+0x298>)
 8002712:	480f      	ldr	r0, [pc, #60]	; (8002750 <loop+0x28c>)
 8002714:	f007 faea 	bl	8009cec <HAL_UART_Transmit>
                }
                play = menu;
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <loop+0x268>)
 800271a:	2203      	movs	r2, #3
 800271c:	701a      	strb	r2, [r3, #0]
                gamechoice = 0;
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <loop+0x274>)
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
                Displ_CLS(BLACK);
 8002724:	2000      	movs	r0, #0
 8002726:	f002 fff9 	bl	800571c <Displ_CLS>
 800272a:	e094      	b.n	8002856 <loop+0x392>
 800272c:	2000004f 	.word	0x2000004f
 8002730:	20000048 	.word	0x20000048
 8002734:	20000031 	.word	0x20000031
 8002738:	20001ef1 	.word	0x20001ef1
 800273c:	20000034 	.word	0x20000034
 8002740:	20000038 	.word	0x20000038
 8002744:	20000045 	.word	0x20000045
 8002748:	20001ef0 	.word	0x20001ef0
 800274c:	0800c304 	.word	0x0800c304
 8002750:	20001ff0 	.word	0x20001ff0
 8002754:	20001ef3 	.word	0x20001ef3
 8002758:	20001eef 	.word	0x20001eef
 800275c:	0800c308 	.word	0x0800c308
            }
            else if(choice == 1){
 8002760:	4baa      	ldr	r3, [pc, #680]	; (8002a0c <loop+0x548>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d113      	bne.n	8002790 <loop+0x2cc>
            	displayPauseMenu(1);
 8002768:	2001      	movs	r0, #1
 800276a:	f000 fd75 	bl	8003258 <displayPauseMenu>
                play = last_state;
 800276e:	4ba8      	ldr	r3, [pc, #672]	; (8002a10 <loop+0x54c>)
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	4ba8      	ldr	r3, [pc, #672]	; (8002a14 <loop+0x550>)
 8002774:	701a      	strb	r2, [r3, #0]
                if(getConnection() == 1) {
 8002776:	f001 f83b 	bl	80037f0 <getConnection>
 800277a:	4603      	mov	r3, r0
 800277c:	2b01      	cmp	r3, #1
 800277e:	d16a      	bne.n	8002856 <loop+0x392>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"C", strlen("C"), 300);
 8002780:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002784:	2201      	movs	r2, #1
 8002786:	49a4      	ldr	r1, [pc, #656]	; (8002a18 <loop+0x554>)
 8002788:	48a4      	ldr	r0, [pc, #656]	; (8002a1c <loop+0x558>)
 800278a:	f007 faaf 	bl	8009cec <HAL_UART_Transmit>
 800278e:	e062      	b.n	8002856 <loop+0x392>
                }
            }else{
                displayPauseMenu(0);
 8002790:	2000      	movs	r0, #0
 8002792:	f000 fd61 	bl	8003258 <displayPauseMenu>
 8002796:	e05e      	b.n	8002856 <loop+0x392>
            }

        }else if(play == menu){
 8002798:	4b9e      	ldr	r3, [pc, #632]	; (8002a14 <loop+0x550>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d154      	bne.n	800284a <loop+0x386>
            if(choice == 0){
 80027a0:	4b9a      	ldr	r3, [pc, #616]	; (8002a0c <loop+0x548>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d11b      	bne.n	80027e0 <loop+0x31c>
                if(getConnection() == 0) {
 80027a8:	f001 f822 	bl	80037f0 <getConnection>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d107      	bne.n	80027c2 <loop+0x2fe>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"?", strlen("?"), 300);
 80027b2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80027b6:	2201      	movs	r2, #1
 80027b8:	4999      	ldr	r1, [pc, #612]	; (8002a20 <loop+0x55c>)
 80027ba:	4898      	ldr	r0, [pc, #608]	; (8002a1c <loop+0x558>)
 80027bc:	f007 fa96 	bl	8009cec <HAL_UART_Transmit>
 80027c0:	e049      	b.n	8002856 <loop+0x392>
                } else if(getConnection() == 1) {
 80027c2:	f001 f815 	bl	80037f0 <getConnection>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d144      	bne.n	8002856 <loop+0x392>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"X", strlen("X"), 300);
 80027cc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80027d0:	2201      	movs	r2, #1
 80027d2:	4994      	ldr	r1, [pc, #592]	; (8002a24 <loop+0x560>)
 80027d4:	4891      	ldr	r0, [pc, #580]	; (8002a1c <loop+0x558>)
 80027d6:	f007 fa89 	bl	8009cec <HAL_UART_Transmit>
                    closeConnection();
 80027da:	f001 f877 	bl	80038cc <closeConnection>
 80027de:	e03a      	b.n	8002856 <loop+0x392>
                }

            }else if(choice == 1){
 80027e0:	4b8a      	ldr	r3, [pc, #552]	; (8002a0c <loop+0x548>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d114      	bne.n	8002812 <loop+0x34e>
                gamechoice = 2;
 80027e8:	4b8f      	ldr	r3, [pc, #572]	; (8002a28 <loop+0x564>)
 80027ea:	2202      	movs	r2, #2
 80027ec:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80027ee:	4b89      	ldr	r3, [pc, #548]	; (8002a14 <loop+0x550>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
                if(getConnection() == 1) {
 80027f4:	f000 fffc 	bl	80037f0 <getConnection>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d106      	bne.n	800280c <loop+0x348>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"2G", strlen("2G"), 300);
 80027fe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002802:	2202      	movs	r2, #2
 8002804:	4989      	ldr	r1, [pc, #548]	; (8002a2c <loop+0x568>)
 8002806:	4885      	ldr	r0, [pc, #532]	; (8002a1c <loop+0x558>)
 8002808:	f007 fa70 	bl	8009cec <HAL_UART_Transmit>
                }
                init();
 800280c:	f7ff fe42 	bl	8002494 <init>
 8002810:	e021      	b.n	8002856 <loop+0x392>
            }
            else if(choice == 2){
 8002812:	4b7e      	ldr	r3, [pc, #504]	; (8002a0c <loop+0x548>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d114      	bne.n	8002844 <loop+0x380>
                gamechoice = 1;
 800281a:	4b83      	ldr	r3, [pc, #524]	; (8002a28 <loop+0x564>)
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 8002820:	4b7c      	ldr	r3, [pc, #496]	; (8002a14 <loop+0x550>)
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
                if(getConnection() == 1) {
 8002826:	f000 ffe3 	bl	80037f0 <getConnection>
 800282a:	4603      	mov	r3, r0
 800282c:	2b01      	cmp	r3, #1
 800282e:	d106      	bne.n	800283e <loop+0x37a>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"1G", strlen("1G"), 300);
 8002830:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002834:	2202      	movs	r2, #2
 8002836:	497e      	ldr	r1, [pc, #504]	; (8002a30 <loop+0x56c>)
 8002838:	4878      	ldr	r0, [pc, #480]	; (8002a1c <loop+0x558>)
 800283a:	f007 fa57 	bl	8009cec <HAL_UART_Transmit>
                }
                init();
 800283e:	f7ff fe29 	bl	8002494 <init>
 8002842:	e008      	b.n	8002856 <loop+0x392>
            }else{
                displayMenu();
 8002844:	f000 fd6e 	bl	8003324 <displayMenu>
 8002848:	e005      	b.n	8002856 <loop+0x392>
            }

        }
        else if(!hit){
 800284a:	4b7a      	ldr	r3, [pc, #488]	; (8002a34 <loop+0x570>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <loop+0x392>
            spawnBullet();
 8002852:	f001 f9b7 	bl	8003bc4 <spawnBullet>
        }
        key = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	e021      	b.n	80028a0 <loop+0x3dc>
    }
    else if(key == up && play < 2){
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d11e      	bne.n	80028a0 <loop+0x3dc>
 8002862:	4b6c      	ldr	r3, [pc, #432]	; (8002a14 <loop+0x550>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d81a      	bhi.n	80028a0 <loop+0x3dc>
    	last_state = play;
 800286a:	4b6a      	ldr	r3, [pc, #424]	; (8002a14 <loop+0x550>)
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <loop+0x54c>)
 8002870:	701a      	strb	r2, [r3, #0]
        play = paused;
 8002872:	4b68      	ldr	r3, [pc, #416]	; (8002a14 <loop+0x550>)
 8002874:	2202      	movs	r2, #2
 8002876:	701a      	strb	r2, [r3, #0]
        choice = 1;
 8002878:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <loop+0x548>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
        last_choice_pause = 40;
 800287e:	4b6e      	ldr	r3, [pc, #440]	; (8002a38 <loop+0x574>)
 8002880:	2228      	movs	r2, #40	; 0x28
 8002882:	701a      	strb	r2, [r3, #0]
        key = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	607b      	str	r3, [r7, #4]
        if(getConnection() == 1) {
 8002888:	f000 ffb2 	bl	80037f0 <getConnection>
 800288c:	4603      	mov	r3, r0
 800288e:	2b01      	cmp	r3, #1
 8002890:	d106      	bne.n	80028a0 <loop+0x3dc>
            HAL_UART_Transmit(&huart2, (uint8_t *)"P", strlen("P"), 300);
 8002892:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002896:	2201      	movs	r2, #1
 8002898:	4968      	ldr	r1, [pc, #416]	; (8002a3c <loop+0x578>)
 800289a:	4860      	ldr	r0, [pc, #384]	; (8002a1c <loop+0x558>)
 800289c:	f007 fa26 	bl	8009cec <HAL_UART_Transmit>
        }
    }

    if(play == inPlay){
 80028a0:	4b5c      	ldr	r3, [pc, #368]	; (8002a14 <loop+0x550>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d132      	bne.n	800290e <loop+0x44a>
    	if(gamechoice == 1){
 80028a8:	4b5f      	ldr	r3, [pc, #380]	; (8002a28 <loop+0x564>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10a      	bne.n	80028c6 <loop+0x402>
    		spawnComet();
 80028b0:	f001 f902 	bl	8003ab8 <spawnComet>
    		delayBullet();
 80028b4:	f001 feb4 	bl	8004620 <delayBullet>
    		moveComets();
 80028b8:	f001 fb1c 	bl	8003ef4 <moveComets>
    		moveBullets();
 80028bc:	f001 fa5e 	bl	8003d7c <moveBullets>
    		moveEnemyBullets();
 80028c0:	f001 fec2 	bl	8004648 <moveEnemyBullets>
 80028c4:	e021      	b.n	800290a <loop+0x446>
    	}else if(gamechoice == 2) {
 80028c6:	4b58      	ldr	r3, [pc, #352]	; (8002a28 <loop+0x564>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d11d      	bne.n	800290a <loop+0x446>
            if (start == 1 && ball.dir != still) {
 80028ce:	4b5c      	ldr	r3, [pc, #368]	; (8002a40 <loop+0x57c>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d115      	bne.n	8002902 <loop+0x43e>
 80028d6:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <loop+0x580>)
 80028d8:	7a1b      	ldrb	r3, [r3, #8]
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d011      	beq.n	8002902 <loop+0x43e>
                if (delay <= 0) {
 80028de:	4b5a      	ldr	r3, [pc, #360]	; (8002a48 <loop+0x584>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d105      	bne.n	80028f2 <loop+0x42e>
                    lowerBricks();
 80028e6:	f7fd ff5f 	bl	80007a8 <lowerBricks>
                    delay = BRICK_SPEED;
 80028ea:	4b57      	ldr	r3, [pc, #348]	; (8002a48 <loop+0x584>)
 80028ec:	228c      	movs	r2, #140	; 0x8c
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	e005      	b.n	80028fe <loop+0x43a>
                } else {
                    delay--;
 80028f2:	4b55      	ldr	r3, [pc, #340]	; (8002a48 <loop+0x584>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4b53      	ldr	r3, [pc, #332]	; (8002a48 <loop+0x584>)
 80028fc:	701a      	strb	r2, [r3, #0]
                }
                checkGameOver();
 80028fe:	f7fd ffbb 	bl	8000878 <checkGameOver>
            }
            checkGuardianTimer();
 8002902:	f7ff fb85 	bl	8002010 <checkGuardianTimer>
            playBall();
 8002906:	f7fd fd5d 	bl	80003c4 <playBall>
        }

    	updateScreen();
 800290a:	f000 f8fd 	bl	8002b08 <updateScreen>
    }if(play < paused){
 800290e:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <loop+0x550>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d807      	bhi.n	8002926 <loop+0x462>
    	if(gamechoice == 1){
 8002916:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <loop+0x564>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d103      	bne.n	8002926 <loop+0x462>
    		spawnStar();
 800291e:	f001 f9d5 	bl	8003ccc <spawnStar>
    		moveStars();
 8002922:	f001 fbff 	bl	8004124 <moveStars>
    	}

    }


    if (getConnection() == 1 && getSignal() == 1) {
 8002926:	f000 ff63 	bl	80037f0 <getConnection>
 800292a:	4603      	mov	r3, r0
 800292c:	2b01      	cmp	r3, #1
 800292e:	f040 80bd 	bne.w	8002aac <loop+0x5e8>
 8002932:	f000 ff45 	bl	80037c0 <getSignal>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	f040 80b7 	bne.w	8002aac <loop+0x5e8>
        if(gamechoice == 0) {
 800293e:	4b3a      	ldr	r3, [pc, #232]	; (8002a28 <loop+0x564>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d111      	bne.n	800296a <loop+0x4a6>
            gamechoice = getMPGameChoice();
 8002946:	f000 ff75 	bl	8003834 <getMPGameChoice>
 800294a:	4603      	mov	r3, r0
 800294c:	461a      	mov	r2, r3
 800294e:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <loop+0x564>)
 8002950:	701a      	strb	r2, [r3, #0]
            printArray();
 8002952:	f000 ff1d 	bl	8003790 <printArray>
            clearArray();
 8002956:	f000 ff27 	bl	80037a8 <clearArray>
            turnOffSignal();
 800295a:	f000 ff3d 	bl	80037d8 <turnOffSignal>
            play = notPlay;
 800295e:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <loop+0x550>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
            init();
 8002964:	f7ff fd96 	bl	8002494 <init>
 8002968:	e0a0      	b.n	8002aac <loop+0x5e8>
        }else if(play == notPlay && getMPMenuState() == inPlay){
 800296a:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <loop+0x550>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d114      	bne.n	800299c <loop+0x4d8>
 8002972:	f000 ffbd 	bl	80038f0 <getMPMenuState>
 8002976:	4603      	mov	r3, r0
 8002978:	2b01      	cmp	r3, #1
 800297a:	d10f      	bne.n	800299c <loop+0x4d8>
        	play = inPlay;
 800297c:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <loop+0x550>)
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
        	turnOffSignal();
 8002982:	f000 ff29 	bl	80037d8 <turnOffSignal>
        	Displ_FillArea(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, 140, 20, getBgColor());
 8002986:	f7ff fd49 	bl	800241c <getBgColor>
 800298a:	4603      	mov	r3, r0
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2314      	movs	r3, #20
 8002990:	228c      	movs	r2, #140	; 0x8c
 8002992:	2178      	movs	r1, #120	; 0x78
 8002994:	205a      	movs	r0, #90	; 0x5a
 8002996:	f002 fd0d 	bl	80053b4 <Displ_FillArea>
 800299a:	e087      	b.n	8002aac <loop+0x5e8>
        }else if (play < 2 && getMPMenuState() == paused) {
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <loop+0x550>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d814      	bhi.n	80029ce <loop+0x50a>
 80029a4:	f000 ffa4 	bl	80038f0 <getMPMenuState>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d10f      	bne.n	80029ce <loop+0x50a>
            last_state = play;
 80029ae:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <loop+0x550>)
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <loop+0x54c>)
 80029b4:	701a      	strb	r2, [r3, #0]
            play = paused;
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <loop+0x550>)
 80029b8:	2202      	movs	r2, #2
 80029ba:	701a      	strb	r2, [r3, #0]
            choice = 1;
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <loop+0x548>)
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
            last_choice_pause = 40;
 80029c2:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <loop+0x574>)
 80029c4:	2228      	movs	r2, #40	; 0x28
 80029c6:	701a      	strb	r2, [r3, #0]
            turnOffSignal();
 80029c8:	f000 ff06 	bl	80037d8 <turnOffSignal>
 80029cc:	e06e      	b.n	8002aac <loop+0x5e8>
        }else if (play == paused && getMPMenuState() == inPlay) {
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <loop+0x550>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d13c      	bne.n	8002a50 <loop+0x58c>
 80029d6:	f000 ff8b 	bl	80038f0 <getMPMenuState>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d137      	bne.n	8002a50 <loop+0x58c>
            printf("play = %d, mpMenu = %d\r\n", play, getMPMenuState());
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <loop+0x550>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	461c      	mov	r4, r3
 80029e6:	f000 ff83 	bl	80038f0 <getMPMenuState>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	4621      	mov	r1, r4
 80029f0:	4816      	ldr	r0, [pc, #88]	; (8002a4c <loop+0x588>)
 80029f2:	f008 f8d7 	bl	800aba4 <iprintf>
            turnOffSignal();
 80029f6:	f000 feef 	bl	80037d8 <turnOffSignal>
            displayPauseMenu(1);
 80029fa:	2001      	movs	r0, #1
 80029fc:	f000 fc2c 	bl	8003258 <displayPauseMenu>
            play = last_state;
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <loop+0x54c>)
 8002a02:	781a      	ldrb	r2, [r3, #0]
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <loop+0x550>)
 8002a06:	701a      	strb	r2, [r3, #0]
        }else if (play == paused && getMPMenuState() == inPlay) {
 8002a08:	e050      	b.n	8002aac <loop+0x5e8>
 8002a0a:	bf00      	nop
 8002a0c:	20001ef0 	.word	0x20001ef0
 8002a10:	20001ef2 	.word	0x20001ef2
 8002a14:	2000004f 	.word	0x2000004f
 8002a18:	0800c30c 	.word	0x0800c30c
 8002a1c:	20001ff0 	.word	0x20001ff0
 8002a20:	0800c310 	.word	0x0800c310
 8002a24:	0800c314 	.word	0x0800c314
 8002a28:	20001ef1 	.word	0x20001ef1
 8002a2c:	0800c318 	.word	0x0800c318
 8002a30:	0800c31c 	.word	0x0800c31c
 8002a34:	20001eef 	.word	0x20001eef
 8002a38:	20000030 	.word	0x20000030
 8002a3c:	0800c320 	.word	0x0800c320
 8002a40:	20001ef3 	.word	0x20001ef3
 8002a44:	20000038 	.word	0x20000038
 8002a48:	20000044 	.word	0x20000044
 8002a4c:	0800c324 	.word	0x0800c324
        }else if (play == paused && getMPMenuState() == menu) {
 8002a50:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <loop+0x634>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d114      	bne.n	8002a82 <loop+0x5be>
 8002a58:	f000 ff4a 	bl	80038f0 <getMPMenuState>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d10f      	bne.n	8002a82 <loop+0x5be>
            turnOffSignal();
 8002a62:	f000 feb9 	bl	80037d8 <turnOffSignal>
            play = menu;
 8002a66:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <loop+0x634>)
 8002a68:	2203      	movs	r2, #3
 8002a6a:	701a      	strb	r2, [r3, #0]
            gamechoice = 0;
 8002a6c:	4b23      	ldr	r3, [pc, #140]	; (8002afc <loop+0x638>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
            Displ_CLS(BLACK);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f002 fe52 	bl	800571c <Displ_CLS>
            resetLastChoiceMenu();
 8002a78:	f000 fbe2 	bl	8003240 <resetLastChoiceMenu>
            init();
 8002a7c:	f7ff fd0a 	bl	8002494 <init>
 8002a80:	e014      	b.n	8002aac <loop+0x5e8>
        }else if(gamechoice == 1) {
 8002a82:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <loop+0x638>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d104      	bne.n	8002a94 <loop+0x5d0>
        	spawnEnemyBullet();
 8002a8a:	f001 f8e3 	bl	8003c54 <spawnEnemyBullet>
        	turnOffSignal();
 8002a8e:	f000 fea3 	bl	80037d8 <turnOffSignal>
 8002a92:	e00b      	b.n	8002aac <loop+0x5e8>
        }else if (gamechoice == 2) {
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <loop+0x638>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d107      	bne.n	8002aac <loop+0x5e8>
            lowerBricks();
 8002a9c:	f7fd fe84 	bl	80007a8 <lowerBricks>
            printArray();
 8002aa0:	f000 fe76 	bl	8003790 <printArray>
            clearArray();
 8002aa4:	f000 fe80 	bl	80037a8 <clearArray>
            turnOffSignal();
 8002aa8:	f000 fe96 	bl	80037d8 <turnOffSignal>
        }
    }

    if(getConnection() == 1) {
 8002aac:	f000 fea0 	bl	80037f0 <getConnection>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d11b      	bne.n	8002aee <loop+0x62a>
        closeConnection();
 8002ab6:	f000 ff09 	bl	80038cc <closeConnection>
        HAL_UART_Transmit(&huart2, (uint8_t *)"?", strlen("?"), 300);
 8002aba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002abe:	2201      	movs	r2, #1
 8002ac0:	490f      	ldr	r1, [pc, #60]	; (8002b00 <loop+0x63c>)
 8002ac2:	4810      	ldr	r0, [pc, #64]	; (8002b04 <loop+0x640>)
 8002ac4:	f007 f912 	bl	8009cec <HAL_UART_Transmit>

        HAL_Delay(1);
 8002ac8:	2001      	movs	r0, #1
 8002aca:	f003 fa9f 	bl	800600c <HAL_Delay>

        if(getConnection() == 0) {
 8002ace:	f000 fe8f 	bl	80037f0 <getConnection>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <loop+0x62a>
            play = menu;
 8002ad8:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <loop+0x634>)
 8002ada:	2203      	movs	r2, #3
 8002adc:	701a      	strb	r2, [r3, #0]
            gamechoice = 0;
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <loop+0x638>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
            Displ_CLS(BLACK);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f002 fe19 	bl	800571c <Displ_CLS>
            resetLastChoiceMenu();
 8002aea:	f000 fba9 	bl	8003240 <resetLastChoiceMenu>
        }
    }


    return key;
 8002aee:	687b      	ldr	r3, [r7, #4]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd90      	pop	{r4, r7, pc}
 8002af8:	2000004f 	.word	0x2000004f
 8002afc:	20001ef1 	.word	0x20001ef1
 8002b00:	0800c310 	.word	0x0800c310
 8002b04:	20001ff0 	.word	0x20001ff0

08002b08 <updateScreen>:


void updateScreen()
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af06      	add	r7, sp, #24
    if (play == menu){
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <updateScreen+0x90>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d102      	bne.n	8002b1c <updateScreen+0x14>
    	displayMenu();
 8002b16:	f000 fc05 	bl	8003324 <displayMenu>
        return;
 8002b1a:	e039      	b.n	8002b90 <updateScreen+0x88>
    }

    if (gamechoice == 1){
 8002b1c:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <updateScreen+0x94>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d10c      	bne.n	8002b3e <updateScreen+0x36>
        //hit
        if (hit > 0) {
 8002b24:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <updateScreen+0x98>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <updateScreen+0x28>
            spaceShipHitColorToggle();
 8002b2c:	f001 fd2e 	bl	800458c <spaceShipHitColorToggle>
        }

        //spaceship
        displaySpaceShip(RED);
 8002b30:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002b34:	f001 fc9e 	bl	8004474 <displaySpaceShip>

        //lives
        displayLives();
 8002b38:	f001 fcde 	bl	80044f8 <displayLives>
 8002b3c:	e005      	b.n	8002b4a <updateScreen+0x42>
    }else if(gamechoice == 2) {
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <updateScreen+0x94>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d101      	bne.n	8002b4a <updateScreen+0x42>
        printScreen();
 8002b46:	f7ff f9c9 	bl	8001edc <printScreen>
    }

    //start
    if(!play){
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <updateScreen+0x90>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d117      	bne.n	8002b82 <updateScreen+0x7a>
    	Displ_WString(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, "START", Font20, 2, WHITE, getBgColor());
 8002b52:	f7ff fc63 	bl	800241c <getBgColor>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <updateScreen+0x9c>)
 8002b5c:	9204      	str	r2, [sp, #16]
 8002b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b62:	9203      	str	r2, [sp, #12]
 8002b64:	2202      	movs	r2, #2
 8002b66:	9202      	str	r2, [sp, #8]
 8002b68:	466c      	mov	r4, sp
 8002b6a:	1d1a      	adds	r2, r3, #4
 8002b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b70:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a0c      	ldr	r2, [pc, #48]	; (8002ba8 <updateScreen+0xa0>)
 8002b78:	2178      	movs	r1, #120	; 0x78
 8002b7a:	205a      	movs	r0, #90	; 0x5a
 8002b7c:	f003 f976 	bl	8005e6c <Displ_WString>
 8002b80:	e006      	b.n	8002b90 <updateScreen+0x88>
    }
    else if(play == paused){
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <updateScreen+0x90>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d102      	bne.n	8002b90 <updateScreen+0x88>
    	displayPauseMenu(0);
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f000 fb64 	bl	8003258 <displayPauseMenu>
    }
}
 8002b90:	3704      	adds	r7, #4
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd90      	pop	{r4, r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000004f 	.word	0x2000004f
 8002b9c:	20001ef1 	.word	0x20001ef1
 8002ba0:	20001eef 	.word	0x20001eef
 8002ba4:	20000024 	.word	0x20000024
 8002ba8:	0800c340 	.word	0x0800c340

08002bac <read_MPU_mem>:
volatile uint32_t debounce_time = 0;
#define DEBOUNCE_DELAY 30 // doesn't work that well

uint8_t key = 0;

uint8_t read_MPU_mem(uint8_t reg_addr){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af04      	add	r7, sp, #16
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	2364      	movs	r3, #100	; 0x64
 8002bbc:	9302      	str	r3, [sp, #8]
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	f107 030f 	add.w	r3, r7, #15
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	2301      	movs	r3, #1
 8002bca:	21d0      	movs	r1, #208	; 0xd0
 8002bcc:	4807      	ldr	r0, [pc, #28]	; (8002bec <read_MPU_mem+0x40>)
 8002bce:	f004 f8bf 	bl	8006d50 <HAL_I2C_Mem_Read>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <read_MPU_mem+0x30>
		return data;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	e003      	b.n	8002be4 <read_MPU_mem+0x38>
	}
	else{
		printf("mem not read\r\n");
 8002bdc:	4804      	ldr	r0, [pc, #16]	; (8002bf0 <read_MPU_mem+0x44>)
 8002bde:	f008 f867 	bl	800acb0 <puts>
		return 0;
 8002be2:	2300      	movs	r3, #0
	}
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20001ef4 	.word	0x20001ef4
 8002bf0:	0800c348 	.word	0x0800c348

08002bf4 <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af04      	add	r7, sp, #16
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	460a      	mov	r2, r1
 8002bfe:	71fb      	strb	r3, [r7, #7]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	2364      	movs	r3, #100	; 0x64
 8002c0a:	9302      	str	r3, [sp, #8]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	1dbb      	adds	r3, r7, #6
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	2301      	movs	r3, #1
 8002c16:	21d1      	movs	r1, #209	; 0xd1
 8002c18:	4806      	ldr	r0, [pc, #24]	; (8002c34 <write_MPU_mem+0x40>)
 8002c1a:	f003 ff85 	bl	8006b28 <HAL_I2C_Mem_Write>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 8002c24:	4804      	ldr	r0, [pc, #16]	; (8002c38 <write_MPU_mem+0x44>)
 8002c26:	f008 f843 	bl	800acb0 <puts>
    }
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20001ef4 	.word	0x20001ef4
 8002c38:	0800c358 	.word	0x0800c358

08002c3c <read_y_accel>:

void read_y_accel(){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
	uint8_t LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 8002c42:	203e      	movs	r0, #62	; 0x3e
 8002c44:	f7ff ffb2 	bl	8002bac <read_MPU_mem>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 8002c4c:	203d      	movs	r0, #61	; 0x3d
 8002c4e:	f7ff ffad 	bl	8002bac <read_MPU_mem>
 8002c52:	4603      	mov	r3, r0
 8002c54:	71bb      	strb	r3, [r7, #6]

	ay = (((int16_t)MSByte << 8) | LSByte);
 8002c56:	79bb      	ldrb	r3, [r7, #6]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	b21a      	sxth	r2, r3
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	b21b      	sxth	r3, r3
 8002c60:	4313      	orrs	r3, r2
 8002c62:	b21a      	sxth	r2, r3
 8002c64:	4b02      	ldr	r3, [pc, #8]	; (8002c70 <read_y_accel+0x34>)
 8002c66:	801a      	strh	r2, [r3, #0]

}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20002100 	.word	0x20002100

08002c74 <init_MPU>:

void init_MPU(){
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 8002c78:	2100      	movs	r1, #0
 8002c7a:	206b      	movs	r0, #107	; 0x6b
 8002c7c:	f7ff ffba 	bl	8002bf4 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 8002c80:	2107      	movs	r1, #7
 8002c82:	2019      	movs	r0, #25
 8002c84:	f7ff ffb6 	bl	8002bf4 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 8002c88:	2100      	movs	r1, #0
 8002c8a:	201b      	movs	r0, #27
 8002c8c:	f7ff ffb2 	bl	8002bf4 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 8002c90:	2100      	movs	r1, #0
 8002c92:	201c      	movs	r0, #28
 8002c94:	f7ff ffae 	bl	8002bf4 <write_MPU_mem>
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ca0:	f003 f94e 	bl	8005f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ca4:	f000 f85c 	bl	8002d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ca8:	f000 f9b2 	bl	8003010 <MX_GPIO_Init>
  MX_DMA_Init();
 8002cac:	f000 f992 	bl	8002fd4 <MX_DMA_Init>
  MX_I2C2_Init();
 8002cb0:	f000 f8ac 	bl	8002e0c <MX_I2C2_Init>
  MX_SPI2_Init();
 8002cb4:	f000 f8ea 	bl	8002e8c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002cb8:	f000 f926 	bl	8002f08 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002cbc:	f000 f95a 	bl	8002f74 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8002cc0:	2064      	movs	r0, #100	; 0x64
 8002cc2:	f003 f9a3 	bl	800600c <HAL_Delay>
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 8002cc6:	2364      	movs	r3, #100	; 0x64
 8002cc8:	2201      	movs	r2, #1
 8002cca:	21d0      	movs	r1, #208	; 0xd0
 8002ccc:	481f      	ldr	r0, [pc, #124]	; (8002d4c <main+0xb0>)
 8002cce:	f004 f959 	bl	8006f84 <HAL_I2C_IsDeviceReady>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d105      	bne.n	8002ce4 <main+0x48>
	  printf("succesfully communicated\r\n");
 8002cd8:	481d      	ldr	r0, [pc, #116]	; (8002d50 <main+0xb4>)
 8002cda:	f007 ffe9 	bl	800acb0 <puts>
	  init_MPU();
 8002cde:	f7ff ffc9 	bl	8002c74 <init_MPU>
 8002ce2:	e002      	b.n	8002cea <main+0x4e>
  }
  else{
	  printf("I2C device not found\r\n");
 8002ce4:	481b      	ldr	r0, [pc, #108]	; (8002d54 <main+0xb8>)
 8002ce6:	f007 ffe3 	bl	800acb0 <puts>
  }

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8002cea:	2001      	movs	r0, #1
 8002cec:	f002 fac0 	bl	8005270 <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f002 fd13 	bl	800571c <Displ_CLS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(100);
 8002cf6:	2064      	movs	r0, #100	; 0x64
 8002cf8:	f003 f988 	bl	800600c <HAL_Delay>
      if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 8002cfc:	2364      	movs	r3, #100	; 0x64
 8002cfe:	2201      	movs	r2, #1
 8002d00:	21d0      	movs	r1, #208	; 0xd0
 8002d02:	4812      	ldr	r0, [pc, #72]	; (8002d4c <main+0xb0>)
 8002d04:	f004 f93e 	bl	8006f84 <HAL_I2C_IsDeviceReady>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d114      	bne.n	8002d38 <main+0x9c>
		  read_y_accel();
 8002d0e:	f7ff ff95 	bl	8002c3c <read_y_accel>
		  if (ay > 2000){
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <main+0xbc>)
 8002d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d18:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002d1c:	dd03      	ble.n	8002d26 <main+0x8a>
			  key = right;
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <main+0xc0>)
 8002d20:	2203      	movs	r2, #3
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	e008      	b.n	8002d38 <main+0x9c>
		  }
		  else if (ay < -2000){
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <main+0xbc>)
 8002d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d2c:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8002d30:	da02      	bge.n	8002d38 <main+0x9c>
			  key = left;
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <main+0xc0>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
		  }
      }
      key = loop(key);
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <main+0xc0>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fbc1 	bl	80024c4 <loop>
 8002d42:	4603      	mov	r3, r0
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <main+0xc0>)
 8002d48:	701a      	strb	r2, [r3, #0]
      HAL_Delay(100);
 8002d4a:	e7d4      	b.n	8002cf6 <main+0x5a>
 8002d4c:	20001ef4 	.word	0x20001ef4
 8002d50:	0800c36c 	.word	0x0800c36c
 8002d54:	0800c388 	.word	0x0800c388
 8002d58:	20002100 	.word	0x20002100
 8002d5c:	20002108 	.word	0x20002108

08002d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b09c      	sub	sp, #112	; 0x70
 8002d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d6a:	2228      	movs	r2, #40	; 0x28
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f007 ff10 	bl	800ab94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	2230      	movs	r2, #48	; 0x30
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f007 ff02 	bl	800ab94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d90:	2302      	movs	r3, #2
 8002d92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d94:	2301      	movs	r3, #1
 8002d96:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d98:	2310      	movs	r3, #16
 8002d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002da0:	2300      	movs	r3, #0
 8002da2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002da4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002da8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002daa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 fd42 	bl	8007838 <HAL_RCC_OscConfig>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002dba:	f000 fa3b 	bl	8003234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dbe:	230f      	movs	r3, #15
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002dd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002dd8:	2102      	movs	r1, #2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f005 fd6a 	bl	80088b4 <HAL_RCC_ClockConfig>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002de6:	f000 fa25 	bl	8003234 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002dea:	2340      	movs	r3, #64	; 0x40
 8002dec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	4618      	mov	r0, r3
 8002df6:	f005 ff93 	bl	8008d20 <HAL_RCCEx_PeriphCLKConfig>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002e00:	f000 fa18 	bl	8003234 <Error_Handler>
  }
}
 8002e04:	bf00      	nop
 8002e06:	3770      	adds	r7, #112	; 0x70
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <MX_I2C2_Init+0x74>)
 8002e12:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <MX_I2C2_Init+0x78>)
 8002e14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002e16:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <MX_I2C2_Init+0x74>)
 8002e18:	4a1b      	ldr	r2, [pc, #108]	; (8002e88 <MX_I2C2_Init+0x7c>)
 8002e1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <MX_I2C2_Init+0x74>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <MX_I2C2_Init+0x74>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <MX_I2C2_Init+0x74>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <MX_I2C2_Init+0x74>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <MX_I2C2_Init+0x74>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <MX_I2C2_Init+0x74>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <MX_I2C2_Init+0x74>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e46:	480e      	ldr	r0, [pc, #56]	; (8002e80 <MX_I2C2_Init+0x74>)
 8002e48:	f003 fdde 	bl	8006a08 <HAL_I2C_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002e52:	f000 f9ef 	bl	8003234 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e56:	2100      	movs	r1, #0
 8002e58:	4809      	ldr	r0, [pc, #36]	; (8002e80 <MX_I2C2_Init+0x74>)
 8002e5a:	f004 fc55 	bl	8007708 <HAL_I2CEx_ConfigAnalogFilter>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002e64:	f000 f9e6 	bl	8003234 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4805      	ldr	r0, [pc, #20]	; (8002e80 <MX_I2C2_Init+0x74>)
 8002e6c:	f004 fc97 	bl	800779e <HAL_I2CEx_ConfigDigitalFilter>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002e76:	f000 f9dd 	bl	8003234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20001ef4 	.word	0x20001ef4
 8002e84:	40005800 	.word	0x40005800
 8002e88:	2000090e 	.word	0x2000090e

08002e8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e90:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002e92:	4a1c      	ldr	r2, [pc, #112]	; (8002f04 <MX_SPI2_Init+0x78>)
 8002e94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002e98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ea4:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002ea6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002eaa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eac:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eb2:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002eb8:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ebe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002eda:	2207      	movs	r2, #7
 8002edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002eea:	4805      	ldr	r0, [pc, #20]	; (8002f00 <MX_SPI2_Init+0x74>)
 8002eec:	f006 f89c 	bl	8009028 <HAL_SPI_Init>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002ef6:	f000 f99d 	bl	8003234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20001f48 	.word	0x20001f48
 8002f04:	40003800 	.word	0x40003800

08002f08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f0c:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <MX_USART2_UART_Init+0x64>)
 8002f0e:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <MX_USART2_UART_Init+0x68>)
 8002f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <MX_USART2_UART_Init+0x64>)
 8002f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f1a:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <MX_USART2_UART_Init+0x64>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <MX_USART2_UART_Init+0x64>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f26:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <MX_USART2_UART_Init+0x64>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <MX_USART2_UART_Init+0x64>)
 8002f2e:	220c      	movs	r2, #12
 8002f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f32:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <MX_USART2_UART_Init+0x64>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <MX_USART2_UART_Init+0x64>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <MX_USART2_UART_Init+0x64>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <MX_USART2_UART_Init+0x64>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f4a:	4808      	ldr	r0, [pc, #32]	; (8002f6c <MX_USART2_UART_Init+0x64>)
 8002f4c:	f006 fe80 	bl	8009c50 <HAL_UART_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f56:	f000 f96d 	bl	8003234 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART2->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <MX_USART2_UART_Init+0x68>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <MX_USART2_UART_Init+0x68>)
 8002f60:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8002f64:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20001ff0 	.word	0x20001ff0
 8002f70:	40004400 	.word	0x40004400

08002f74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f78:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <MX_USART3_UART_Init+0x58>)
 8002f7a:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <MX_USART3_UART_Init+0x5c>)
 8002f7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002f7e:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <MX_USART3_UART_Init+0x58>)
 8002f80:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002f84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <MX_USART3_UART_Init+0x58>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <MX_USART3_UART_Init+0x58>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f92:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <MX_USART3_UART_Init+0x58>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <MX_USART3_UART_Init+0x58>)
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <MX_USART3_UART_Init+0x58>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <MX_USART3_UART_Init+0x58>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <MX_USART3_UART_Init+0x58>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <MX_USART3_UART_Init+0x58>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fb6:	4805      	ldr	r0, [pc, #20]	; (8002fcc <MX_USART3_UART_Init+0x58>)
 8002fb8:	f006 fe4a 	bl	8009c50 <HAL_UART_Init>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002fc2:	f000 f937 	bl	8003234 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20002078 	.word	0x20002078
 8002fd0:	40004800 	.word	0x40004800

08002fd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <MX_DMA_Init+0x38>)
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	4a0b      	ldr	r2, [pc, #44]	; (800300c <MX_DMA_Init+0x38>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6153      	str	r3, [r2, #20]
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <MX_DMA_Init+0x38>)
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	607b      	str	r3, [r7, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	200f      	movs	r0, #15
 8002ff8:	f003 f907 	bl	800620a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002ffc:	200f      	movs	r0, #15
 8002ffe:	f003 f920 	bl	8006242 <HAL_NVIC_EnableIRQ>

}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000

08003010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003016:	f107 0314 	add.w	r3, r7, #20
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	609a      	str	r2, [r3, #8]
 8003022:	60da      	str	r2, [r3, #12]
 8003024:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003026:	4b46      	ldr	r3, [pc, #280]	; (8003140 <MX_GPIO_Init+0x130>)
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	4a45      	ldr	r2, [pc, #276]	; (8003140 <MX_GPIO_Init+0x130>)
 800302c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003030:	6153      	str	r3, [r2, #20]
 8003032:	4b43      	ldr	r3, [pc, #268]	; (8003140 <MX_GPIO_Init+0x130>)
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800303e:	4b40      	ldr	r3, [pc, #256]	; (8003140 <MX_GPIO_Init+0x130>)
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	4a3f      	ldr	r2, [pc, #252]	; (8003140 <MX_GPIO_Init+0x130>)
 8003044:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003048:	6153      	str	r3, [r2, #20]
 800304a:	4b3d      	ldr	r3, [pc, #244]	; (8003140 <MX_GPIO_Init+0x130>)
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003056:	4b3a      	ldr	r3, [pc, #232]	; (8003140 <MX_GPIO_Init+0x130>)
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4a39      	ldr	r2, [pc, #228]	; (8003140 <MX_GPIO_Init+0x130>)
 800305c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003060:	6153      	str	r3, [r2, #20]
 8003062:	4b37      	ldr	r3, [pc, #220]	; (8003140 <MX_GPIO_Init+0x130>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800306e:	4b34      	ldr	r3, [pc, #208]	; (8003140 <MX_GPIO_Init+0x130>)
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4a33      	ldr	r2, [pc, #204]	; (8003140 <MX_GPIO_Init+0x130>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003078:	6153      	str	r3, [r2, #20]
 800307a:	4b31      	ldr	r3, [pc, #196]	; (8003140 <MX_GPIO_Init+0x130>)
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003082:	607b      	str	r3, [r7, #4]
 8003084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8003086:	2200      	movs	r2, #0
 8003088:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800308c:	482d      	ldr	r0, [pc, #180]	; (8003144 <MX_GPIO_Init+0x134>)
 800308e:	f003 fc8b 	bl	80069a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8003092:	2200      	movs	r2, #0
 8003094:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800309c:	f003 fc84 	bl	80069a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 80030a0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80030a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80030aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030ac:	2301      	movs	r3, #1
 80030ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030b0:	f107 0314 	add.w	r3, r7, #20
 80030b4:	4619      	mov	r1, r3
 80030b6:	4824      	ldr	r0, [pc, #144]	; (8003148 <MX_GPIO_Init+0x138>)
 80030b8:	f003 faec 	bl	8006694 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 80030bc:	2301      	movs	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80030c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030c6:	2301      	movs	r3, #1
 80030c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 80030ca:	f107 0314 	add.w	r3, r7, #20
 80030ce:	4619      	mov	r1, r3
 80030d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d4:	f003 fade 	bl	8006694 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 80030d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030de:	2301      	movs	r3, #1
 80030e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e6:	2300      	movs	r3, #0
 80030e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 80030ea:	f107 0314 	add.w	r3, r7, #20
 80030ee:	4619      	mov	r1, r3
 80030f0:	4814      	ldr	r0, [pc, #80]	; (8003144 <MX_GPIO_Init+0x134>)
 80030f2:	f003 facf 	bl	8006694 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 80030f6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80030fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030fc:	2301      	movs	r3, #1
 80030fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003104:	2300      	movs	r3, #0
 8003106:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	4619      	mov	r1, r3
 800310e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003112:	f003 fabf 	bl	8006694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2100      	movs	r1, #0
 800311a:	2006      	movs	r0, #6
 800311c:	f003 f875 	bl	800620a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003120:	2006      	movs	r0, #6
 8003122:	f003 f88e 	bl	8006242 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	2100      	movs	r1, #0
 800312a:	2028      	movs	r0, #40	; 0x28
 800312c:	f003 f86d 	bl	800620a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003130:	2028      	movs	r0, #40	; 0x28
 8003132:	f003 f886 	bl	8006242 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003136:	bf00      	nop
 8003138:	3728      	adds	r7, #40	; 0x28
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
 8003144:	48000400 	.word	0x48000400
 8003148:	48000800 	.word	0x48000800

0800314c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	80fb      	strh	r3, [r7, #6]
    // Get the current time
    uint32_t current_time = HAL_GetTick();
 8003156:	f002 ff4d 	bl	8005ff4 <HAL_GetTick>
 800315a:	60f8      	str	r0, [r7, #12]

    // Check if it's been long enough since the last interrupt
    if (current_time - debounce_time > DEBOUNCE_DELAY) {
 800315c:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <HAL_GPIO_EXTI_Callback+0xc8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b1e      	cmp	r3, #30
 8003166:	d951      	bls.n	800320c <HAL_GPIO_EXTI_Callback+0xc0>
        debounce_time = current_time;
 8003168:	4a2a      	ldr	r2, [pc, #168]	; (8003214 <HAL_GPIO_EXTI_Callback+0xc8>)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6013      	str	r3, [r2, #0]
        printf("interrupt!\r\n");
 800316e:	482a      	ldr	r0, [pc, #168]	; (8003218 <HAL_GPIO_EXTI_Callback+0xcc>)
 8003170:	f007 fd9e 	bl	800acb0 <puts>
        if (GPIO_Pin == LEFT_Pin && HAL_GPIO_ReadPin(LEFT_GPIO_Port, GPIO_Pin) == 0) {
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800317a:	d10e      	bne.n	800319a <HAL_GPIO_EXTI_Callback+0x4e>
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	4619      	mov	r1, r3
 8003180:	4826      	ldr	r0, [pc, #152]	; (800321c <HAL_GPIO_EXTI_Callback+0xd0>)
 8003182:	f003 fbf9 	bl	8006978 <HAL_GPIO_ReadPin>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d106      	bne.n	800319a <HAL_GPIO_EXTI_Callback+0x4e>
            key = left;
 800318c:	4b24      	ldr	r3, [pc, #144]	; (8003220 <HAL_GPIO_EXTI_Callback+0xd4>)
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
            printf("left clicked\r\n");
 8003192:	4824      	ldr	r0, [pc, #144]	; (8003224 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003194:	f007 fd8c 	bl	800acb0 <puts>
 8003198:	e038      	b.n	800320c <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == TOP_Pin && HAL_GPIO_ReadPin(TOP_GPIO_Port, GPIO_Pin) == 0) {
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a0:	d10e      	bne.n	80031c0 <HAL_GPIO_EXTI_Callback+0x74>
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	4619      	mov	r1, r3
 80031a6:	481d      	ldr	r0, [pc, #116]	; (800321c <HAL_GPIO_EXTI_Callback+0xd0>)
 80031a8:	f003 fbe6 	bl	8006978 <HAL_GPIO_ReadPin>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_GPIO_EXTI_Callback+0x74>
            key = up;
 80031b2:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <HAL_GPIO_EXTI_Callback+0xd4>)
 80031b4:	2202      	movs	r2, #2
 80031b6:	701a      	strb	r2, [r3, #0]
            printf("up clicked\r\n");
 80031b8:	481b      	ldr	r0, [pc, #108]	; (8003228 <HAL_GPIO_EXTI_Callback+0xdc>)
 80031ba:	f007 fd79 	bl	800acb0 <puts>
 80031be:	e025      	b.n	800320c <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == RIGHT_Pin && HAL_GPIO_ReadPin(RIGHT_GPIO_Port, GPIO_Pin) == 0) {
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031c6:	d10e      	bne.n	80031e6 <HAL_GPIO_EXTI_Callback+0x9a>
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	4619      	mov	r1, r3
 80031cc:	4813      	ldr	r0, [pc, #76]	; (800321c <HAL_GPIO_EXTI_Callback+0xd0>)
 80031ce:	f003 fbd3 	bl	8006978 <HAL_GPIO_ReadPin>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d106      	bne.n	80031e6 <HAL_GPIO_EXTI_Callback+0x9a>
            key = right;
 80031d8:	4b11      	ldr	r3, [pc, #68]	; (8003220 <HAL_GPIO_EXTI_Callback+0xd4>)
 80031da:	2203      	movs	r2, #3
 80031dc:	701a      	strb	r2, [r3, #0]
            printf("right clicked\r\n");
 80031de:	4813      	ldr	r0, [pc, #76]	; (800322c <HAL_GPIO_EXTI_Callback+0xe0>)
 80031e0:	f007 fd66 	bl	800acb0 <puts>
 80031e4:	e012      	b.n	800320c <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == MIDDLE_Pin && HAL_GPIO_ReadPin(MIDDLE_GPIO_Port, GPIO_Pin) == 0) {
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d10f      	bne.n	800320c <HAL_GPIO_EXTI_Callback+0xc0>
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	4619      	mov	r1, r3
 80031f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031f4:	f003 fbc0 	bl	8006978 <HAL_GPIO_ReadPin>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_GPIO_EXTI_Callback+0xc0>
            key = down;
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003200:	2204      	movs	r2, #4
 8003202:	701a      	strb	r2, [r3, #0]
            printf("down clicked\r\n");
 8003204:	480a      	ldr	r0, [pc, #40]	; (8003230 <HAL_GPIO_EXTI_Callback+0xe4>)
 8003206:	f007 fd53 	bl	800acb0 <puts>
        }
    }
}
 800320a:	e7ff      	b.n	800320c <HAL_GPIO_EXTI_Callback+0xc0>
 800320c:	bf00      	nop
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20002104 	.word	0x20002104
 8003218:	0800c3a0 	.word	0x0800c3a0
 800321c:	48000800 	.word	0x48000800
 8003220:	20002108 	.word	0x20002108
 8003224:	0800c3ac 	.word	0x0800c3ac
 8003228:	0800c3bc 	.word	0x0800c3bc
 800322c:	0800c3c8 	.word	0x0800c3c8
 8003230:	0800c3d8 	.word	0x0800c3d8

08003234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003238:	b672      	cpsid	i
}
 800323a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800323c:	e7fe      	b.n	800323c <Error_Handler+0x8>
	...

08003240 <resetLastChoiceMenu>:

void displayMultiplayerIcon(void);
void displayBricksIcon(void);
void displaySpaceIcon(void);

void resetLastChoiceMenu(void){
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
	last_choice_menu = 40;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <resetLastChoiceMenu+0x14>)
 8003246:	2228      	movs	r2, #40	; 0x28
 8003248:	701a      	strb	r2, [r3, #0]
}
 800324a:	bf00      	nop
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	2000004c 	.word	0x2000004c

08003258 <displayPauseMenu>:

void displayPauseMenu(uint8_t clear){
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af04      	add	r7, sp, #16
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
	uint16_t back_color = GREY;
 8003262:	f249 6396 	movw	r3, #38550	; 0x9696
 8003266:	81fb      	strh	r3, [r7, #14]
	uint16_t continue_color = RED;
 8003268:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800326c:	81bb      	strh	r3, [r7, #12]
	uint16_t triangle_color = WHITE;
 800326e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003272:	817b      	strh	r3, [r7, #10]
	if(choice != last_choice_pause || clear){
 8003274:	4b29      	ldr	r3, [pc, #164]	; (800331c <displayPauseMenu+0xc4>)
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	4b29      	ldr	r3, [pc, #164]	; (8003320 <displayPauseMenu+0xc8>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d102      	bne.n	8003286 <displayPauseMenu+0x2e>
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d045      	beq.n	8003312 <displayPauseMenu+0xba>
		last_choice_pause = choice;
 8003286:	4b25      	ldr	r3, [pc, #148]	; (800331c <displayPauseMenu+0xc4>)
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <displayPauseMenu+0xc8>)
 800328c:	701a      	strb	r2, [r3, #0]
		if(choice == 0){
 800328e:	4b23      	ldr	r3, [pc, #140]	; (800331c <displayPauseMenu+0xc4>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <displayPauseMenu+0x4c>
			back_color = RED;
 8003296:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800329a:	81fb      	strh	r3, [r7, #14]
			continue_color = GREY;
 800329c:	f249 6396 	movw	r3, #38550	; 0x9696
 80032a0:	81bb      	strh	r3, [r7, #12]
 80032a2:	e00e      	b.n	80032c2 <displayPauseMenu+0x6a>
		}
		else if(clear){
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <displayPauseMenu+0x6a>
			back_color = getBgColor();
 80032aa:	f7ff f8b7 	bl	800241c <getBgColor>
 80032ae:	4603      	mov	r3, r0
 80032b0:	81fb      	strh	r3, [r7, #14]
			continue_color = getBgColor();
 80032b2:	f7ff f8b3 	bl	800241c <getBgColor>
 80032b6:	4603      	mov	r3, r0
 80032b8:	81bb      	strh	r3, [r7, #12]
			triangle_color = getBgColor();
 80032ba:	f7ff f8af 	bl	800241c <getBgColor>
 80032be:	4603      	mov	r3, r0
 80032c0:	817b      	strh	r3, [r7, #10]
		}
		Displ_FillArea(SCREEN_WIDTH * 2 - BUTTON_SIZE - 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, back_color);
 80032c2:	89fb      	ldrh	r3, [r7, #14]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2340      	movs	r3, #64	; 0x40
 80032c8:	2240      	movs	r2, #64	; 0x40
 80032ca:	2158      	movs	r1, #88	; 0x58
 80032cc:	2054      	movs	r0, #84	; 0x54
 80032ce:	f002 f871 	bl	80053b4 <Displ_FillArea>
		Displ_FillArea(SCREEN_WIDTH * 2 + 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, continue_color);
 80032d2:	89bb      	ldrh	r3, [r7, #12]
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2340      	movs	r3, #64	; 0x40
 80032d8:	2240      	movs	r2, #64	; 0x40
 80032da:	2158      	movs	r1, #88	; 0x58
 80032dc:	20ac      	movs	r0, #172	; 0xac
 80032de:	f002 f869 	bl	80053b4 <Displ_FillArea>

		Displ_fillTriangle(SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 + 20 + BUTTON_SIZE - 16, SCREEN_HEIGHT * 2, triangle_color);
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	9302      	str	r3, [sp, #8]
 80032e6:	2378      	movs	r3, #120	; 0x78
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	23e4      	movs	r3, #228	; 0xe4
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	2390      	movs	r3, #144	; 0x90
 80032f0:	22b4      	movs	r2, #180	; 0xb4
 80032f2:	2160      	movs	r1, #96	; 0x60
 80032f4:	20b4      	movs	r0, #180	; 0xb4
 80032f6:	f002 fb5e 	bl	80059b6 <Displ_fillTriangle>
		Displ_fillTriangle(SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 - 20 - BUTTON_SIZE + 16, SCREEN_HEIGHT * 2, triangle_color);
 80032fa:	897b      	ldrh	r3, [r7, #10]
 80032fc:	9302      	str	r3, [sp, #8]
 80032fe:	2378      	movs	r3, #120	; 0x78
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	235c      	movs	r3, #92	; 0x5c
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2390      	movs	r3, #144	; 0x90
 8003308:	228c      	movs	r2, #140	; 0x8c
 800330a:	2160      	movs	r1, #96	; 0x60
 800330c:	208c      	movs	r0, #140	; 0x8c
 800330e:	f002 fb52 	bl	80059b6 <Displ_fillTriangle>
	}

}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20001ef0 	.word	0x20001ef0
 8003320:	20000030 	.word	0x20000030

08003324 <displayMenu>:

void displayMenu(){
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b08b      	sub	sp, #44	; 0x2c
 8003328:	af06      	add	r7, sp, #24
	int y_offset = 12;
 800332a:	230c      	movs	r3, #12
 800332c:	60fb      	str	r3, [r7, #12]
	int x_offset = 12;
 800332e:	230c      	movs	r3, #12
 8003330:	60bb      	str	r3, [r7, #8]
	//box around
	if(choice != last_choice_menu){
 8003332:	4b4c      	ldr	r3, [pc, #304]	; (8003464 <displayMenu+0x140>)
 8003334:	781a      	ldrb	r2, [r3, #0]
 8003336:	4b4c      	ldr	r3, [pc, #304]	; (8003468 <displayMenu+0x144>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d03d      	beq.n	80033ba <displayMenu+0x96>
		last_choice_menu =  choice;
 800333e:	4b49      	ldr	r3, [pc, #292]	; (8003464 <displayMenu+0x140>)
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	4b49      	ldr	r3, [pc, #292]	; (8003468 <displayMenu+0x144>)
 8003344:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	e02e      	b.n	80033aa <displayMenu+0x86>
			if(i == choice){
 800334c:	4b45      	ldr	r3, [pc, #276]	; (8003464 <displayMenu+0x140>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4293      	cmp	r3, r2
 8003356:	d10b      	bne.n	8003370 <displayMenu+0x4c>
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, RED);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	b298      	uxth	r0, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	b299      	uxth	r1, r3
 8003360:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	2340      	movs	r3, #64	; 0x40
 8003368:	2240      	movs	r2, #64	; 0x40
 800336a:	f002 f823 	bl	80053b4 <Displ_FillArea>
 800336e:	e00a      	b.n	8003386 <displayMenu+0x62>
			}else{
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, GREY);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	b298      	uxth	r0, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	b299      	uxth	r1, r3
 8003378:	f249 6396 	movw	r3, #38550	; 0x9696
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	2340      	movs	r3, #64	; 0x40
 8003380:	2240      	movs	r2, #64	; 0x40
 8003382:	f002 f817 	bl	80053b4 <Displ_FillArea>
			}if((i + 1)% 4 == 0){
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3301      	adds	r3, #1
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d105      	bne.n	800339e <displayMenu+0x7a>
				x_offset = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
				y_offset += BUTTON_SIZE + 12;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	334c      	adds	r3, #76	; 0x4c
 800339a:	60fb      	str	r3, [r7, #12]
				continue;
 800339c:	e002      	b.n	80033a4 <displayMenu+0x80>
			}
			x_offset += BUTTON_SIZE + 12;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	334c      	adds	r3, #76	; 0x4c
 80033a2:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3301      	adds	r3, #1
 80033a8:	607b      	str	r3, [r7, #4]
 80033aa:	4b30      	ldr	r3, [pc, #192]	; (800346c <displayMenu+0x148>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	dc02      	bgt.n	80033ba <displayMenu+0x96>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b07      	cmp	r3, #7
 80033b8:	ddc8      	ble.n	800334c <displayMenu+0x28>
		}
	}
    displayMenuIcons();
 80033ba:	f000 f861 	bl	8003480 <displayMenuIcons>

    // text
    switch (choice) {
 80033be:	4b29      	ldr	r3, [pc, #164]	; (8003464 <displayMenu+0x140>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d032      	beq.n	800342c <displayMenu+0x108>
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	dc46      	bgt.n	8003458 <displayMenu+0x134>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <displayMenu+0xb0>
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d016      	beq.n	8003400 <displayMenu+0xdc>
        break;
    case 2:
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
        break;
    default:
        break;
 80033d2:	e041      	b.n	8003458 <displayMenu+0x134>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Multiplayer   ", Font20, 1, WHITE, DARK_GREY);
 80033d4:	4b26      	ldr	r3, [pc, #152]	; (8003470 <displayMenu+0x14c>)
 80033d6:	f642 422c 	movw	r2, #11308	; 0x2c2c
 80033da:	9204      	str	r2, [sp, #16]
 80033dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033e0:	9203      	str	r2, [sp, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	9202      	str	r2, [sp, #8]
 80033e6:	466c      	mov	r4, sp
 80033e8:	1d1a      	adds	r2, r3, #4
 80033ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1f      	ldr	r2, [pc, #124]	; (8003474 <displayMenu+0x150>)
 80033f6:	21c8      	movs	r1, #200	; 0xc8
 80033f8:	2008      	movs	r0, #8
 80033fa:	f002 fd37 	bl	8005e6c <Displ_WString>
        break;
 80033fe:	e02c      	b.n	800345a <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Brick Breaker ", Font20, 1, WHITE, DARK_GREY);
 8003400:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <displayMenu+0x14c>)
 8003402:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8003406:	9204      	str	r2, [sp, #16]
 8003408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800340c:	9203      	str	r2, [sp, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	9202      	str	r2, [sp, #8]
 8003412:	466c      	mov	r4, sp
 8003414:	1d1a      	adds	r2, r3, #4
 8003416:	e892 0003 	ldmia.w	r2, {r0, r1}
 800341a:	e884 0003 	stmia.w	r4, {r0, r1}
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a15      	ldr	r2, [pc, #84]	; (8003478 <displayMenu+0x154>)
 8003422:	21c8      	movs	r1, #200	; 0xc8
 8003424:	2008      	movs	r0, #8
 8003426:	f002 fd21 	bl	8005e6c <Displ_WString>
        break;
 800342a:	e016      	b.n	800345a <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
 800342c:	4b10      	ldr	r3, [pc, #64]	; (8003470 <displayMenu+0x14c>)
 800342e:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8003432:	9204      	str	r2, [sp, #16]
 8003434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003438:	9203      	str	r2, [sp, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	9202      	str	r2, [sp, #8]
 800343e:	466c      	mov	r4, sp
 8003440:	1d1a      	adds	r2, r3, #4
 8003442:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003446:	e884 0003 	stmia.w	r4, {r0, r1}
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a0b      	ldr	r2, [pc, #44]	; (800347c <displayMenu+0x158>)
 800344e:	21c8      	movs	r1, #200	; 0xc8
 8003450:	2008      	movs	r0, #8
 8003452:	f002 fd0b 	bl	8005e6c <Displ_WString>
        break;
 8003456:	e000      	b.n	800345a <displayMenu+0x136>
        break;
 8003458:	bf00      	nop
    }
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bd90      	pop	{r4, r7, pc}
 8003462:	bf00      	nop
 8003464:	20001ef0 	.word	0x20001ef0
 8003468:	2000004c 	.word	0x2000004c
 800346c:	20000048 	.word	0x20000048
 8003470:	20000024 	.word	0x20000024
 8003474:	0800c3e8 	.word	0x0800c3e8
 8003478:	0800c3f8 	.word	0x0800c3f8
 800347c:	0800c408 	.word	0x0800c408

08003480 <displayMenuIcons>:

void displayMenuIcons(){
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0

    // multiplayer
	displayMultiplayerIcon();
 8003484:	f000 f806 	bl	8003494 <displayMultiplayerIcon>

    // brick
	displayBricksIcon();
 8003488:	f000 f86a 	bl	8003560 <displayBricksIcon>

    //spaceinvaders
	displaySpaceIcon();
 800348c:	f000 f892 	bl	80035b4 <displaySpaceIcon>
}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}

08003494 <displayMultiplayerIcon>:

void displayMultiplayerIcon(){
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af02      	add	r7, sp, #8
	uint16_t color = LIGHT_GREEN;
 800349a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800349e:	807b      	strh	r3, [r7, #2]
	if(connected){
 80034a0:	4b2e      	ldr	r3, [pc, #184]	; (800355c <displayMultiplayerIcon+0xc8>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d023      	beq.n	80034f0 <displayMultiplayerIcon+0x5c>
		Displ_FillArea(20, 20, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 80034a8:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	2304      	movs	r3, #4
 80034b0:	2230      	movs	r2, #48	; 0x30
 80034b2:	2114      	movs	r1, #20
 80034b4:	2014      	movs	r0, #20
 80034b6:	f001 ff7d 	bl	80053b4 <Displ_FillArea>
		Displ_FillArea(20, 12, 4, 8, LIGHT_GREEN);
 80034ba:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2308      	movs	r3, #8
 80034c2:	2204      	movs	r2, #4
 80034c4:	210c      	movs	r1, #12
 80034c6:	2014      	movs	r0, #20
 80034c8:	f001 ff74 	bl	80053b4 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE, 12, 4, 8, LIGHT_GREEN);
 80034cc:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	2308      	movs	r3, #8
 80034d4:	2204      	movs	r2, #4
 80034d6:	210c      	movs	r1, #12
 80034d8:	2040      	movs	r0, #64	; 0x40
 80034da:	f001 ff6b 	bl	80053b4 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE/2 + 8, 24, 8, BUTTON_SIZE - 24, LIGHT_GREEN);
 80034de:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2328      	movs	r3, #40	; 0x28
 80034e6:	2208      	movs	r2, #8
 80034e8:	2118      	movs	r1, #24
 80034ea:	2028      	movs	r0, #40	; 0x28
 80034ec:	f001 ff62 	bl	80053b4 <Displ_FillArea>
	}
	Displ_FillArea(20, BUTTON_SIZE, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 80034f0:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2304      	movs	r3, #4
 80034f8:	2230      	movs	r2, #48	; 0x30
 80034fa:	2140      	movs	r1, #64	; 0x40
 80034fc:	2014      	movs	r0, #20
 80034fe:	f001 ff59 	bl	80053b4 <Displ_FillArea>
	Displ_FillArea(20, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8003502:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2308      	movs	r3, #8
 800350a:	2204      	movs	r2, #4
 800350c:	2144      	movs	r1, #68	; 0x44
 800350e:	2014      	movs	r0, #20
 8003510:	f001 ff50 	bl	80053b4 <Displ_FillArea>
	Displ_FillArea(BUTTON_SIZE, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8003514:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	2308      	movs	r3, #8
 800351c:	2204      	movs	r2, #4
 800351e:	2144      	movs	r1, #68	; 0x44
 8003520:	2040      	movs	r0, #64	; 0x40
 8003522:	f001 ff47 	bl	80053b4 <Displ_FillArea>
	if(!connected){
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <displayMultiplayerIcon+0xc8>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d112      	bne.n	8003554 <displayMultiplayerIcon+0xc0>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 800352e:	2318      	movs	r3, #24
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	e00c      	b.n	800354e <displayMultiplayerIcon+0xba>
			Displ_FillArea(BUTTON_SIZE/2 + 8, k, 8, 4, LIGHT_GREEN);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	b299      	uxth	r1, r3
 8003538:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	2304      	movs	r3, #4
 8003540:	2208      	movs	r2, #8
 8003542:	2028      	movs	r0, #40	; 0x28
 8003544:	f001 ff36 	bl	80053b4 <Displ_FillArea>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3308      	adds	r3, #8
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b3f      	cmp	r3, #63	; 0x3f
 8003552:	ddef      	ble.n	8003534 <displayMultiplayerIcon+0xa0>
		}
	}
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20002109 	.word	0x20002109

08003560 <displayBricksIcon>:

void displayBricksIcon(){
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af02      	add	r7, sp, #8
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE, 20, 4, LIGHT_GREEN);
 8003566:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	2304      	movs	r3, #4
 800356e:	2214      	movs	r2, #20
 8003570:	2140      	movs	r1, #64	; 0x40
 8003572:	2068      	movs	r0, #104	; 0x68
 8003574:	f001 ff1e 	bl	80053b4 <Displ_FillArea>
	Displ_FillArea(28+BUTTON_SIZE, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 8003578:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	2340      	movs	r3, #64	; 0x40
 8003580:	2204      	movs	r2, #4
 8003582:	210c      	movs	r1, #12
 8003584:	205c      	movs	r0, #92	; 0x5c
 8003586:	f001 ff15 	bl	80053b4 <Displ_FillArea>
	Displ_FillArea((8+BUTTON_SIZE)*2, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 800358a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	2340      	movs	r3, #64	; 0x40
 8003592:	2204      	movs	r2, #4
 8003594:	210c      	movs	r1, #12
 8003596:	2090      	movs	r0, #144	; 0x90
 8003598:	f001 ff0c 	bl	80053b4 <Displ_FillArea>
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE - 20, 4, 4, LIGHT_GREEN);
 800359c:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	2304      	movs	r3, #4
 80035a4:	2204      	movs	r2, #4
 80035a6:	212c      	movs	r1, #44	; 0x2c
 80035a8:	2068      	movs	r0, #104	; 0x68
 80035aa:	f001 ff03 	bl	80053b4 <Displ_FillArea>
}
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <displaySpaceIcon>:

void displaySpaceIcon(){
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af02      	add	r7, sp, #8
	Displ_FillArea((BUTTON_SIZE+12)*3 - 48, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 80035ba:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	2310      	movs	r3, #16
 80035c2:	2204      	movs	r2, #4
 80035c4:	2134      	movs	r1, #52	; 0x34
 80035c6:	20b4      	movs	r0, #180	; 0xb4
 80035c8:	f001 fef4 	bl	80053b4 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 32, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 80035cc:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2310      	movs	r3, #16
 80035d4:	2204      	movs	r2, #4
 80035d6:	2134      	movs	r1, #52	; 0x34
 80035d8:	20c4      	movs	r0, #196	; 0xc4
 80035da:	f001 feeb 	bl	80053b4 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 44, BUTTON_SIZE -8, 12, 4, LIGHT_GREEN);
 80035de:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	2304      	movs	r3, #4
 80035e6:	220c      	movs	r2, #12
 80035e8:	2138      	movs	r1, #56	; 0x38
 80035ea:	20b8      	movs	r0, #184	; 0xb8
 80035ec:	f001 fee2 	bl	80053b4 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 40, BUTTON_SIZE -16, 4, 16, LIGHT_GREEN);
 80035f0:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	2310      	movs	r3, #16
 80035f8:	2204      	movs	r2, #4
 80035fa:	2130      	movs	r1, #48	; 0x30
 80035fc:	20bc      	movs	r0, #188	; 0xbc
 80035fe:	f001 fed9 	bl	80053b4 <Displ_FillArea>

	Displ_FillArea((BUTTON_SIZE+12)*3 - 36, BUTTON_SIZE -40, 12, 12, LIGHT_GREEN);
 8003602:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	230c      	movs	r3, #12
 800360a:	220c      	movs	r2, #12
 800360c:	2118      	movs	r1, #24
 800360e:	20c0      	movs	r0, #192	; 0xc0
 8003610:	f001 fed0 	bl	80053b4 <Displ_FillArea>
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <addCharacterToArray>:
 * @fn void addCharacterToArray(char)
 * @brief adds the incoming character to the input buffer array and checks if it is a command character
 *
 * @param c incoming character
 */
void addCharacterToArray(char c) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
    char filler[2];
    filler[0] = c;
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	733b      	strb	r3, [r7, #12]
    filler[1] = '\0';
 800362a:	2300      	movs	r3, #0
 800362c:	737b      	strb	r3, [r7, #13]

    strcat(characterArray, filler);
 800362e:	f107 030c 	add.w	r3, r7, #12
 8003632:	4619      	mov	r1, r3
 8003634:	484e      	ldr	r0, [pc, #312]	; (8003770 <addCharacterToArray+0x154>)
 8003636:	f007 fbe3 	bl	800ae00 <strcat>
    //printf("%c\r\n", c);

    if(c == 'O' && mp == enabled) {
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	2b4f      	cmp	r3, #79	; 0x4f
 800363e:	d10b      	bne.n	8003658 <addCharacterToArray+0x3c>
 8003640:	4b4c      	ldr	r3, [pc, #304]	; (8003774 <addCharacterToArray+0x158>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d107      	bne.n	8003658 <addCharacterToArray+0x3c>
        inSignal = 1;
 8003648:	4b4b      	ldr	r3, [pc, #300]	; (8003778 <addCharacterToArray+0x15c>)
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
        printArray();
 800364e:	f000 f89f 	bl	8003790 <printArray>
        clearArray();
 8003652:	f000 f8a9 	bl	80037a8 <clearArray>
        printArray();
        clearArray();
    }else if(c == 'L') {
        mpGameState = win;
    }
}
 8003656:	e086      	b.n	8003766 <addCharacterToArray+0x14a>
    }else if(c == '?') {
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	2b3f      	cmp	r3, #63	; 0x3f
 800365c:	d111      	bne.n	8003682 <addCharacterToArray+0x66>
        HAL_UART_Transmit(&huart2, (uint8_t *)"!", strlen("!"), 300);
 800365e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003662:	2201      	movs	r2, #1
 8003664:	4945      	ldr	r1, [pc, #276]	; (800377c <addCharacterToArray+0x160>)
 8003666:	4846      	ldr	r0, [pc, #280]	; (8003780 <addCharacterToArray+0x164>)
 8003668:	f006 fb40 	bl	8009cec <HAL_UART_Transmit>
        printArray();
 800366c:	f000 f890 	bl	8003790 <printArray>
        clearArray();
 8003670:	f000 f89a 	bl	80037a8 <clearArray>
        connected = 1;
 8003674:	4b43      	ldr	r3, [pc, #268]	; (8003784 <addCharacterToArray+0x168>)
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
        mp = enabled;
 800367a:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <addCharacterToArray+0x158>)
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
}
 8003680:	e071      	b.n	8003766 <addCharacterToArray+0x14a>
    }else if(c == '!') {
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	2b21      	cmp	r3, #33	; 0x21
 8003686:	d10a      	bne.n	800369e <addCharacterToArray+0x82>
        connected = 1;
 8003688:	4b3e      	ldr	r3, [pc, #248]	; (8003784 <addCharacterToArray+0x168>)
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
        mp = enabled;
 800368e:	4b39      	ldr	r3, [pc, #228]	; (8003774 <addCharacterToArray+0x158>)
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
        printArray();
 8003694:	f000 f87c 	bl	8003790 <printArray>
        clearArray();
 8003698:	f000 f886 	bl	80037a8 <clearArray>
}
 800369c:	e063      	b.n	8003766 <addCharacterToArray+0x14a>
    }else if(c == 'G') {
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	2b47      	cmp	r3, #71	; 0x47
 80036a2:	d109      	bne.n	80036b8 <addCharacterToArray+0x9c>
        inSignal = 1;
 80036a4:	4b34      	ldr	r3, [pc, #208]	; (8003778 <addCharacterToArray+0x15c>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
        setMPGameChoice();
 80036aa:	f000 f8ad 	bl	8003808 <setMPGameChoice>
        printArray();
 80036ae:	f000 f86f 	bl	8003790 <printArray>
        clearArray();
 80036b2:	f000 f879 	bl	80037a8 <clearArray>
}
 80036b6:	e056      	b.n	8003766 <addCharacterToArray+0x14a>
    }else if(c == 'B') {
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	2b42      	cmp	r3, #66	; 0x42
 80036bc:	d107      	bne.n	80036ce <addCharacterToArray+0xb2>
    	inSignal = 1;
 80036be:	4b2e      	ldr	r3, [pc, #184]	; (8003778 <addCharacterToArray+0x15c>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
        setCoord();
 80036c4:	f000 f8ce 	bl	8003864 <setCoord>
        printArray();
 80036c8:	f000 f862 	bl	8003790 <printArray>
}
 80036cc:	e04b      	b.n	8003766 <addCharacterToArray+0x14a>
    }else if(c == 'S'){
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	2b53      	cmp	r3, #83	; 0x53
 80036d2:	d10a      	bne.n	80036ea <addCharacterToArray+0xce>
        inSignal = 1;
 80036d4:	4b28      	ldr	r3, [pc, #160]	; (8003778 <addCharacterToArray+0x15c>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
    	mpMenuState = 1;
 80036da:	4b2b      	ldr	r3, [pc, #172]	; (8003788 <addCharacterToArray+0x16c>)
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
    	printArray();
 80036e0:	f000 f856 	bl	8003790 <printArray>
    	clearArray();
 80036e4:	f000 f860 	bl	80037a8 <clearArray>
}
 80036e8:	e03d      	b.n	8003766 <addCharacterToArray+0x14a>
    }else if(c == 'X') {
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	2b58      	cmp	r3, #88	; 0x58
 80036ee:	d10a      	bne.n	8003706 <addCharacterToArray+0xea>
       connected = 0;
 80036f0:	4b24      	ldr	r3, [pc, #144]	; (8003784 <addCharacterToArray+0x168>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	701a      	strb	r2, [r3, #0]
       mp = disabled;
 80036f6:	4b1f      	ldr	r3, [pc, #124]	; (8003774 <addCharacterToArray+0x158>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
       printArray();
 80036fc:	f000 f848 	bl	8003790 <printArray>
       clearArray();
 8003700:	f000 f852 	bl	80037a8 <clearArray>
}
 8003704:	e02f      	b.n	8003766 <addCharacterToArray+0x14a>
    }else if(c == 'P') {
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	2b50      	cmp	r3, #80	; 0x50
 800370a:	d10a      	bne.n	8003722 <addCharacterToArray+0x106>
        inSignal = 1;
 800370c:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <addCharacterToArray+0x15c>)
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
        mpMenuState = 2;
 8003712:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <addCharacterToArray+0x16c>)
 8003714:	2202      	movs	r2, #2
 8003716:	701a      	strb	r2, [r3, #0]
        printArray();
 8003718:	f000 f83a 	bl	8003790 <printArray>
        clearArray();
 800371c:	f000 f844 	bl	80037a8 <clearArray>
}
 8003720:	e021      	b.n	8003766 <addCharacterToArray+0x14a>
    }else if(c == 'C') {
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	2b43      	cmp	r3, #67	; 0x43
 8003726:	d10a      	bne.n	800373e <addCharacterToArray+0x122>
        inSignal = 1;
 8003728:	4b13      	ldr	r3, [pc, #76]	; (8003778 <addCharacterToArray+0x15c>)
 800372a:	2201      	movs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
        mpMenuState = 1;
 800372e:	4b16      	ldr	r3, [pc, #88]	; (8003788 <addCharacterToArray+0x16c>)
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
        printArray();
 8003734:	f000 f82c 	bl	8003790 <printArray>
        clearArray();
 8003738:	f000 f836 	bl	80037a8 <clearArray>
}
 800373c:	e013      	b.n	8003766 <addCharacterToArray+0x14a>
    }else if(c == 'M') {
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	2b4d      	cmp	r3, #77	; 0x4d
 8003742:	d10a      	bne.n	800375a <addCharacterToArray+0x13e>
        inSignal = 1;
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <addCharacterToArray+0x15c>)
 8003746:	2201      	movs	r2, #1
 8003748:	701a      	strb	r2, [r3, #0]
        mpMenuState = 3;
 800374a:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <addCharacterToArray+0x16c>)
 800374c:	2203      	movs	r2, #3
 800374e:	701a      	strb	r2, [r3, #0]
        printArray();
 8003750:	f000 f81e 	bl	8003790 <printArray>
        clearArray();
 8003754:	f000 f828 	bl	80037a8 <clearArray>
}
 8003758:	e005      	b.n	8003766 <addCharacterToArray+0x14a>
    }else if(c == 'L') {
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	2b4c      	cmp	r3, #76	; 0x4c
 800375e:	d102      	bne.n	8003766 <addCharacterToArray+0x14a>
        mpGameState = win;
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <addCharacterToArray+0x170>)
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	2000210c 	.word	0x2000210c
 8003774:	2000210a 	.word	0x2000210a
 8003778:	20002170 	.word	0x20002170
 800377c:	0800c41c 	.word	0x0800c41c
 8003780:	20001ff0 	.word	0x20001ff0
 8003784:	20002109 	.word	0x20002109
 8003788:	20002173 	.word	0x20002173
 800378c:	20002172 	.word	0x20002172

08003790 <printArray>:
/**
 * @fn void printArray()
 * @brief prints the buffer array
 *
 */
void printArray() {
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
    printf("%s\r\n", characterArray);
 8003794:	4902      	ldr	r1, [pc, #8]	; (80037a0 <printArray+0x10>)
 8003796:	4803      	ldr	r0, [pc, #12]	; (80037a4 <printArray+0x14>)
 8003798:	f007 fa04 	bl	800aba4 <iprintf>
}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	2000210c 	.word	0x2000210c
 80037a4:	0800c420 	.word	0x0800c420

080037a8 <clearArray>:
/**
 * @fn void clearArray()
 * @brief clears the buffer array
 *
 */
void clearArray() {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
    memset(characterArray, '\0', sizeof(characterArray));
 80037ac:	2264      	movs	r2, #100	; 0x64
 80037ae:	2100      	movs	r1, #0
 80037b0:	4802      	ldr	r0, [pc, #8]	; (80037bc <clearArray+0x14>)
 80037b2:	f007 f9ef 	bl	800ab94 <memset>
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	2000210c 	.word	0x2000210c

080037c0 <getSignal>:
 * @fn uint8_t getSignal()
 * @brief returns the inSignal variable
 *
 * @return 1 there has been incoming data, 0 if not
 */
uint8_t getSignal() {
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
    return inSignal;
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <getSignal+0x14>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20002170 	.word	0x20002170

080037d8 <turnOffSignal>:
/**
 * @fn void turnOffSignal()
 * @brief sets the inSignal variable to 0, meaning the incoming data has been handled
 *
 */
void turnOffSignal() {
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
    inSignal = 0;
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <turnOffSignal+0x14>)
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
}
 80037e2:	bf00      	nop
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	20002170 	.word	0x20002170

080037f0 <getConnection>:
 * @fn uint8_t getConnection()
 * @brief returns the connection state of multiplayer
 *
 * @return 0 if no connection has been made, 1 if there is a connection established
 */
uint8_t getConnection() {
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
    return connected;
 80037f4:	4b03      	ldr	r3, [pc, #12]	; (8003804 <getConnection+0x14>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	20002109 	.word	0x20002109

08003808 <setMPGameChoice>:
/**
 * @fn void setMPGameChoice()
 * @brief saves the number of the game chosen by the opposing console
 *
 */
void setMPGameChoice() {
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
    mpGameChoice = characterArray[0] - '0';
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <setMPGameChoice+0x20>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	3b30      	subs	r3, #48	; 0x30
 8003812:	b2da      	uxtb	r2, r3
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <setMPGameChoice+0x24>)
 8003816:	701a      	strb	r2, [r3, #0]
    printf("%d\r\n", mpGameChoice);
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <setMPGameChoice+0x24>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	4619      	mov	r1, r3
 800381e:	4804      	ldr	r0, [pc, #16]	; (8003830 <setMPGameChoice+0x28>)
 8003820:	f007 f9c0 	bl	800aba4 <iprintf>
}
 8003824:	bf00      	nop
 8003826:	bd80      	pop	{r7, pc}
 8003828:	2000210c 	.word	0x2000210c
 800382c:	20002171 	.word	0x20002171
 8003830:	0800c428 	.word	0x0800c428

08003834 <getMPGameChoice>:
 * @fn uint8_t getMPGameChoice()
 * @brief returns the number of the game chosen by the opposing console
 *
 * @return the number of the game chosen by the opposing console
 */
uint8_t getMPGameChoice() {
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
    return mpGameChoice;
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <getMPGameChoice+0x14>)
 800383a:	781b      	ldrb	r3, [r3, #0]
}
 800383c:	4618      	mov	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20002171 	.word	0x20002171

0800384c <getCoord>:
 * @fn uint8_t getCoord()
 * @brief returns the x coordinate of the bullet shot by the opposing player
 *
 * @return x coordinate between 0 <= x < 80
 */
uint8_t getCoord() {
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
    return x_coord;
 8003850:	4b03      	ldr	r3, [pc, #12]	; (8003860 <getCoord+0x14>)
 8003852:	781b      	ldrb	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	2000004d 	.word	0x2000004d

08003864 <setCoord>:
/**
 * @fn void setCoord()
 * @brief converts the incomming coordinate to a uint8_t and saves it
 *
 */
void setCoord() {
 8003864:	b580      	push	{r7, lr}
 8003866:	b09a      	sub	sp, #104	; 0x68
 8003868:	af00      	add	r7, sp, #0
    char buffer[100];
    strncpy(buffer, characterArray, strlen(characterArray) - 1);
 800386a:	4810      	ldr	r0, [pc, #64]	; (80038ac <setCoord+0x48>)
 800386c:	f7fc fcb0 	bl	80001d0 <strlen>
 8003870:	4603      	mov	r3, r0
 8003872:	1e5a      	subs	r2, r3, #1
 8003874:	1d3b      	adds	r3, r7, #4
 8003876:	490d      	ldr	r1, [pc, #52]	; (80038ac <setCoord+0x48>)
 8003878:	4618      	mov	r0, r3
 800387a:	f007 fad0 	bl	800ae1e <strncpy>
    buffer[strlen(characterArray) - 1] = '\0';
 800387e:	480b      	ldr	r0, [pc, #44]	; (80038ac <setCoord+0x48>)
 8003880:	f7fc fca6 	bl	80001d0 <strlen>
 8003884:	4603      	mov	r3, r0
 8003886:	3b01      	subs	r3, #1
 8003888:	3368      	adds	r3, #104	; 0x68
 800388a:	443b      	add	r3, r7
 800388c:	2200      	movs	r2, #0
 800388e:	f803 2c64 	strb.w	r2, [r3, #-100]

    x_coord = (uint8_t)atoi(buffer);
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	4618      	mov	r0, r3
 8003896:	f007 f94e 	bl	800ab36 <atoi>
 800389a:	4603      	mov	r3, r0
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <setCoord+0x4c>)
 80038a0:	701a      	strb	r2, [r3, #0]
}
 80038a2:	bf00      	nop
 80038a4:	3768      	adds	r7, #104	; 0x68
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	2000210c 	.word	0x2000210c
 80038b0:	2000004d 	.word	0x2000004d

080038b4 <clearCoord>:
/**
 * @fn void clearCoord()
 * @brief clears the coordinate
 *
 */
void clearCoord(){
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
	x_coord = -1;
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <clearCoord+0x14>)
 80038ba:	22ff      	movs	r2, #255	; 0xff
 80038bc:	701a      	strb	r2, [r3, #0]
}
 80038be:	bf00      	nop
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	2000004d 	.word	0x2000004d

080038cc <closeConnection>:
/**
 * @fn void closeConnection()
 * @brief Closes the connection for multiplayer
 *
 */
void closeConnection() {
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
    connected = 0;
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <closeConnection+0x1c>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
    mp = disabled;
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <closeConnection+0x20>)
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20002109 	.word	0x20002109
 80038ec:	2000210a 	.word	0x2000210a

080038f0 <getMPMenuState>:
 * @fn uint8_t getMPMenuState()
 * @brief returns the Menu State in multiplayer when the opposing player has made a change
 *
 * @return the Menu State in multiplayer when the opposing player has made a change
 */
uint8_t getMPMenuState() {
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
    return mpMenuState;
 80038f4:	4b03      	ldr	r3, [pc, #12]	; (8003904 <getMPMenuState+0x14>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20002173 	.word	0x20002173

08003908 <setGameState>:
 * @fn void setGameState(GameState)
 * @brief when the player loses or wins, the state of the game is saved
 *
 * @param state holds the state of the game: ongoing, won or lost
 */
void setGameState(GameState state) {
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
    mpGameState = state;
 8003912:	4a04      	ldr	r2, [pc, #16]	; (8003924 <setGameState+0x1c>)
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	7013      	strb	r3, [r2, #0]
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	20002172 	.word	0x20002172

08003928 <initSpaceInvaders>:
 * initialises ammo by clearing all values using initAmmo()
 * initialises comets by clearing all values using initComets()
 * initialises stars by clearing all values using initStars()
 *
 */
void initSpaceInvaders(){
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
    money = 0;
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <initSpaceInvaders+0x74>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
    lives = 3;
 8003932:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <initSpaceInvaders+0x78>)
 8003934:	2203      	movs	r2, #3
 8003936:	701a      	strb	r2, [r3, #0]
    setBgColor(DARK_GREY);
 8003938:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800393c:	f7fe fd5e 	bl	80023fc <setBgColor>
    Displ_CLS(DARK_GREY);
 8003940:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003944:	f001 feea 	bl	800571c <Displ_CLS>

    srand(HAL_GetTick());		   // Seed the random number generator
 8003948:	f002 fb54 	bl	8005ff4 <HAL_GetTick>
 800394c:	4603      	mov	r3, r0
 800394e:	4618      	mov	r0, r3
 8003950:	f007 f9b6 	bl	800acc0 <srand>
    comet_delay = RANDOM(5,20);
 8003954:	f007 f9e2 	bl	800ad1c <rand>
 8003958:	4603      	mov	r3, r0
 800395a:	425a      	negs	r2, r3
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	f002 020f 	and.w	r2, r2, #15
 8003964:	bf58      	it	pl
 8003966:	4253      	negpl	r3, r2
 8003968:	b2db      	uxtb	r3, r3
 800396a:	3305      	adds	r3, #5
 800396c:	b2da      	uxtb	r2, r3
 800396e:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <initSpaceInvaders+0x7c>)
 8003970:	701a      	strb	r2, [r3, #0]
    initSpaceShip();
 8003972:	f000 f81f 	bl	80039b4 <initSpaceShip>
    initAmmo(&ammo,0);
 8003976:	2100      	movs	r1, #0
 8003978:	480b      	ldr	r0, [pc, #44]	; (80039a8 <initSpaceInvaders+0x80>)
 800397a:	f000 f827 	bl	80039cc <initAmmo>
    if(connected){
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <initSpaceInvaders+0x84>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <initSpaceInvaders+0x66>
        initAmmo(&enemy_ammo,1);
 8003986:	2101      	movs	r1, #1
 8003988:	4809      	ldr	r0, [pc, #36]	; (80039b0 <initSpaceInvaders+0x88>)
 800398a:	f000 f81f 	bl	80039cc <initAmmo>
    }
    initComets();
 800398e:	f000 f845 	bl	8003a1c <initComets>
    initStars();
 8003992:	f000 f86d 	bl	8003a70 <initStars>
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	200021dc 	.word	0x200021dc
 80039a0:	2000004e 	.word	0x2000004e
 80039a4:	200021d6 	.word	0x200021d6
 80039a8:	20002174 	.word	0x20002174
 80039ac:	20002109 	.word	0x20002109
 80039b0:	20002184 	.word	0x20002184

080039b4 <initSpaceShip>:
/**
 * @fn void initSpaceShip(void)
 * @brief initialises the spaceship
 *
 */
void initSpaceShip(){
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
    SpaceShip.x = SCREEN_WIDTH/2;
 80039b8:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <initSpaceShip+0x14>)
 80039ba:	2228      	movs	r2, #40	; 0x28
 80039bc:	701a      	strb	r2, [r3, #0]
}
 80039be:	bf00      	nop
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	20000050 	.word	0x20000050

080039cc <initAmmo>:
 * x and y cords are set to -1
 *
 * @param[out] am bullets_t*: the bullets to initialise, can be your own or the enemy's
 * @param[in] enemy int: if 1, bullets pointer is for the enemy bullets
 */
void initAmmo(bullets_t *am,int enemy){
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
    am->enemy = enemy;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	b25a      	sxtb	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	701a      	strb	r2, [r3, #0]
    am->in_play=0;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	705a      	strb	r2, [r3, #1]
    for (int i = 0;i<MAX_BULLETS;i++){
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e00e      	b.n	8003a08 <initAmmo+0x3c>
        am->bullet_ar[i].x = -1;
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	22ff      	movs	r2, #255	; 0xff
 80039f4:	709a      	strb	r2, [r3, #2]
        am->bullet_ar[i].y = -1;
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	4413      	add	r3, r2
 80039fe:	22ff      	movs	r2, #255	; 0xff
 8003a00:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_BULLETS;i++){
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3301      	adds	r3, #1
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b05      	cmp	r3, #5
 8003a0c:	dded      	ble.n	80039ea <initAmmo+0x1e>
    }
}
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <initComets>:
 * @brief initialises the comets
 * the comets in play are set to 0
 * x and y cords are set to -1
 *
 */
void initComets(){
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
    Comet.in_play = 0;
 8003a22:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <initComets+0x50>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 8003a28:	2300      	movs	r3, #0
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	e014      	b.n	8003a58 <initComets+0x3c>
        COMET_X(i) = -1;
 8003a2e:	4a0f      	ldr	r2, [pc, #60]	; (8003a6c <initComets+0x50>)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	22ff      	movs	r2, #255	; 0xff
 8003a38:	705a      	strb	r2, [r3, #1]
        COMET_Y(i) = -1;
 8003a3a:	4a0c      	ldr	r2, [pc, #48]	; (8003a6c <initComets+0x50>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	22ff      	movs	r2, #255	; 0xff
 8003a44:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(i) = 2;
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <initComets+0x50>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	2202      	movs	r2, #2
 8003a50:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_COMETS;i++){
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3301      	adds	r3, #1
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b09      	cmp	r3, #9
 8003a5c:	dde7      	ble.n	8003a2e <initComets+0x12>
    }
}
 8003a5e:	bf00      	nop
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	20002194 	.word	0x20002194

08003a70 <initStars>:
 * @brief initialises the stars
 * the stars in play are set to 0
 * x and y cords are set to -1
 *
 */
void initStars(){
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
    Star.in_play = 0;
 8003a76:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <initStars+0x44>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	607b      	str	r3, [r7, #4]
 8003a80:	e00e      	b.n	8003aa0 <initStars+0x30>
    	STAR_X(i) = -1;
 8003a82:	4a0c      	ldr	r2, [pc, #48]	; (8003ab4 <initStars+0x44>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	22ff      	movs	r2, #255	; 0xff
 8003a8c:	705a      	strb	r2, [r3, #1]
    	STAR_Y(i) = -1;
 8003a8e:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <initStars+0x44>)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	22ff      	movs	r2, #255	; 0xff
 8003a98:	709a      	strb	r2, [r3, #2]
    for (int i = 0;i<MAX_COMETS;i++){
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b09      	cmp	r3, #9
 8003aa4:	dded      	ble.n	8003a82 <initStars+0x12>
    }
}
 8003aa6:	bf00      	nop
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	200021c0 	.word	0x200021c0

08003ab8 <spawnComet>:
 * @fn void spawnComet()
 * @brief spawns a comet at a random x-cord with a random size
 * generates a random delay for the spawning of the next comet
 *
 */
void spawnComet(){
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 8003abc:	4b3d      	ldr	r3, [pc, #244]	; (8003bb4 <spawnComet+0xfc>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d16e      	bne.n	8003ba2 <spawnComet+0xea>
 8003ac4:	4b3c      	ldr	r3, [pc, #240]	; (8003bb8 <spawnComet+0x100>)
 8003ac6:	f993 3000 	ldrsb.w	r3, [r3]
 8003aca:	2b09      	cmp	r3, #9
 8003acc:	dc69      	bgt.n	8003ba2 <spawnComet+0xea>
    	COMET_X(Comet.in_play) = RANDOM(PLAYABLE_OFFSET, PLAYABLE_MAX);
 8003ace:	f007 f925 	bl	800ad1c <rand>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	4b39      	ldr	r3, [pc, #228]	; (8003bbc <spawnComet+0x104>)
 8003ad6:	fb83 1302 	smull	r1, r3, r3, r2
 8003ada:	4413      	add	r3, r2
 8003adc:	1199      	asrs	r1, r3, #6
 8003ade:	17d3      	asrs	r3, r2, #31
 8003ae0:	1ac9      	subs	r1, r1, r3
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	440b      	add	r3, r1
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	1a5b      	subs	r3, r3, r1
 8003aec:	1ad1      	subs	r1, r2, r3
 8003aee:	b2cb      	uxtb	r3, r1
 8003af0:	4a31      	ldr	r2, [pc, #196]	; (8003bb8 <spawnComet+0x100>)
 8003af2:	f992 2000 	ldrsb.w	r2, [r2]
 8003af6:	4610      	mov	r0, r2
 8003af8:	3305      	adds	r3, #5
 8003afa:	b2d9      	uxtb	r1, r3
 8003afc:	4a2e      	ldr	r2, [pc, #184]	; (8003bb8 <spawnComet+0x100>)
 8003afe:	0083      	lsls	r3, r0, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	460a      	mov	r2, r1
 8003b04:	705a      	strb	r2, [r3, #1]
    	COMET_Y(Comet.in_play) = 0;
 8003b06:	4b2c      	ldr	r3, [pc, #176]	; (8003bb8 <spawnComet+0x100>)
 8003b08:	f993 3000 	ldrsb.w	r3, [r3]
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <spawnComet+0x100>)
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	2200      	movs	r2, #0
 8003b14:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(Comet.in_play) = RANDOM(MIN_COMET_SIZE,MAX_COMET_SIZE);
 8003b16:	f007 f901 	bl	800ad1c <rand>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	4b28      	ldr	r3, [pc, #160]	; (8003bc0 <spawnComet+0x108>)
 8003b1e:	fb83 3102 	smull	r3, r1, r3, r2
 8003b22:	17d3      	asrs	r3, r2, #31
 8003b24:	1ac9      	subs	r1, r1, r3
 8003b26:	460b      	mov	r3, r1
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	440b      	add	r3, r1
 8003b2c:	1ad1      	subs	r1, r2, r3
 8003b2e:	b2cb      	uxtb	r3, r1
 8003b30:	3302      	adds	r3, #2
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <spawnComet+0x100>)
 8003b36:	f993 3000 	ldrsb.w	r3, [r3]
 8003b3a:	b251      	sxtb	r1, r2
 8003b3c:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <spawnComet+0x100>)
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	460a      	mov	r2, r1
 8003b44:	70da      	strb	r2, [r3, #3]

        COMET_COINS(Comet.in_play) = 7 - COMET_SIZE(Comet.in_play);
 8003b46:	4b1c      	ldr	r3, [pc, #112]	; (8003bb8 <spawnComet+0x100>)
 8003b48:	f993 3000 	ldrsb.w	r3, [r3]
 8003b4c:	4a1a      	ldr	r2, [pc, #104]	; (8003bb8 <spawnComet+0x100>)
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f1c3 0307 	rsb	r3, r3, #7
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <spawnComet+0x100>)
 8003b60:	f993 3000 	ldrsb.w	r3, [r3]
 8003b64:	b251      	sxtb	r1, r2
 8003b66:	4a14      	ldr	r2, [pc, #80]	; (8003bb8 <spawnComet+0x100>)
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	460a      	mov	r2, r1
 8003b6e:	711a      	strb	r2, [r3, #4]
        comet_delay = RANDOM(5,20);
 8003b70:	f007 f8d4 	bl	800ad1c <rand>
 8003b74:	4603      	mov	r3, r0
 8003b76:	425a      	negs	r2, r3
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	f002 020f 	and.w	r2, r2, #15
 8003b80:	bf58      	it	pl
 8003b82:	4253      	negpl	r3, r2
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	3305      	adds	r3, #5
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <spawnComet+0xfc>)
 8003b8c:	701a      	strb	r2, [r3, #0]
        Comet.in_play++;
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <spawnComet+0x100>)
 8003b90:	f993 3000 	ldrsb.w	r3, [r3]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	3301      	adds	r3, #1
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	b25a      	sxtb	r2, r3
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <spawnComet+0x100>)
 8003b9e:	701a      	strb	r2, [r3, #0]
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 8003ba0:	e006      	b.n	8003bb0 <spawnComet+0xf8>
    }else{
        comet_delay--;
 8003ba2:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <spawnComet+0xfc>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	4b02      	ldr	r3, [pc, #8]	; (8003bb4 <spawnComet+0xfc>)
 8003bac:	701a      	strb	r2, [r3, #0]
    }

}
 8003bae:	bf00      	nop
 8003bb0:	bf00      	nop
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	200021d6 	.word	0x200021d6
 8003bb8:	20002194 	.word	0x20002194
 8003bbc:	e6c2b449 	.word	0xe6c2b449
 8003bc0:	55555556 	.word	0x55555556

08003bc4 <spawnBullet>:
 * @fn void spawnBullet()
 * @brief spawns a bullet at the x-cord of the spaceship
 * reloads the bullet_delay variable, so the user can't spam bullets
 *
 */
void spawnBullet(){
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
    int x_val = SpaceShip.x;
 8003bca:	4b1f      	ldr	r3, [pc, #124]	; (8003c48 <spawnBullet+0x84>)
 8003bcc:	f993 3000 	ldrsb.w	r3, [r3]
 8003bd0:	603b      	str	r3, [r7, #0]
    int y_val = SpaceShip.y - 3;
 8003bd2:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <spawnBullet+0x84>)
 8003bd4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003bd8:	3b03      	subs	r3, #3
 8003bda:	607b      	str	r3, [r7, #4]

    if(ammo.in_play < MAX_BULLETS && bullet_delay == 0){
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <spawnBullet+0x88>)
 8003bde:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	dc2a      	bgt.n	8003c3c <spawnBullet+0x78>
 8003be6:	4b1a      	ldr	r3, [pc, #104]	; (8003c50 <spawnBullet+0x8c>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d126      	bne.n	8003c3c <spawnBullet+0x78>
        if(ammo.enemy){
 8003bee:	4b17      	ldr	r3, [pc, #92]	; (8003c4c <spawnBullet+0x88>)
 8003bf0:	f993 3000 	ldrsb.w	r3, [r3]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <spawnBullet+0x38>
            //x_val = read the input from multiplayer;
            y_val = 3;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	607b      	str	r3, [r7, #4]
        }
        ammo.bullet_ar[ammo.in_play].x = x_val;
 8003bfc:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <spawnBullet+0x88>)
 8003bfe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	b251      	sxtb	r1, r2
 8003c06:	4a11      	ldr	r2, [pc, #68]	; (8003c4c <spawnBullet+0x88>)
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	460a      	mov	r2, r1
 8003c0e:	709a      	strb	r2, [r3, #2]
        ammo.bullet_ar[ammo.in_play].y = y_val;
 8003c10:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <spawnBullet+0x88>)
 8003c12:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	b251      	sxtb	r1, r2
 8003c1a:	4a0c      	ldr	r2, [pc, #48]	; (8003c4c <spawnBullet+0x88>)
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	4413      	add	r3, r2
 8003c20:	460a      	mov	r2, r1
 8003c22:	70da      	strb	r2, [r3, #3]
        ammo.in_play++;
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <spawnBullet+0x88>)
 8003c26:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	b25a      	sxtb	r2, r3
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <spawnBullet+0x88>)
 8003c34:	705a      	strb	r2, [r3, #1]
        bullet_delay = MAX_DELAY_BULLETS;
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <spawnBullet+0x8c>)
 8003c38:	220a      	movs	r2, #10
 8003c3a:	701a      	strb	r2, [r3, #0]
    }
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	20000050 	.word	0x20000050
 8003c4c:	20002174 	.word	0x20002174
 8003c50:	200021d5 	.word	0x200021d5

08003c54 <spawnEnemyBullet>:
/**
 * @fn void spawnEnemyBullet()
 * @brief spawns an enemy bullet
 *
 */
void spawnEnemyBullet(){
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
	uint8_t x_val;
	int8_t y_val;

	if(enemy_ammo.in_play < MAX_BULLETS){
 8003c5a:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <spawnEnemyBullet+0x70>)
 8003c5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	dc2c      	bgt.n	8003cbe <spawnEnemyBullet+0x6a>
		if(enemy_ammo.enemy){
 8003c64:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <spawnEnemyBullet+0x70>)
 8003c66:	f993 3000 	ldrsb.w	r3, [r3]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <spawnEnemyBullet+0x30>
			x_val = getCoord();
 8003c6e:	f7ff fded 	bl	800384c <getCoord>
 8003c72:	4603      	mov	r3, r0
 8003c74:	71fb      	strb	r3, [r7, #7]
			printf("%d\r\n",x_val);
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4813      	ldr	r0, [pc, #76]	; (8003cc8 <spawnEnemyBullet+0x74>)
 8003c7c:	f006 ff92 	bl	800aba4 <iprintf>
			if(x_val > 80 && x_val < 0){
				printf("return\r\n");
				return;
			}
			y_val = 3;
 8003c80:	2303      	movs	r3, #3
 8003c82:	71bb      	strb	r3, [r7, #6]
		}
		enemy_ammo.bullet_ar[enemy_ammo.in_play].x = x_val;
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <spawnEnemyBullet+0x70>)
 8003c86:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003c8a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8003c8e:	4a0d      	ldr	r2, [pc, #52]	; (8003cc4 <spawnEnemyBullet+0x70>)
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4413      	add	r3, r2
 8003c94:	460a      	mov	r2, r1
 8003c96:	709a      	strb	r2, [r3, #2]
		enemy_ammo.bullet_ar[enemy_ammo.in_play].y = y_val;
 8003c98:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <spawnEnemyBullet+0x70>)
 8003c9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003c9e:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <spawnEnemyBullet+0x70>)
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	79ba      	ldrb	r2, [r7, #6]
 8003ca6:	70da      	strb	r2, [r3, #3]
		enemy_ammo.in_play++;
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <spawnEnemyBullet+0x70>)
 8003caa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	b25a      	sxtb	r2, r3
 8003cb6:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <spawnEnemyBullet+0x70>)
 8003cb8:	705a      	strb	r2, [r3, #1]
		clearCoord();
 8003cba:	f7ff fdfb 	bl	80038b4 <clearCoord>
	}
}
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20002184 	.word	0x20002184
 8003cc8:	0800c430 	.word	0x0800c430

08003ccc <spawnStar>:
 * @fn void spawnStar()
 * @brief spawns a star at a random x-cord
 * generates a random delay for the spawning of the next star
 *
 */
void spawnStar(){
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <spawnStar+0xa4>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d141      	bne.n	8003d5c <spawnStar+0x90>
 8003cd8:	4b26      	ldr	r3, [pc, #152]	; (8003d74 <spawnStar+0xa8>)
 8003cda:	f993 3000 	ldrsb.w	r3, [r3]
 8003cde:	2b09      	cmp	r3, #9
 8003ce0:	dc3c      	bgt.n	8003d5c <spawnStar+0x90>
    	STAR_X(Star.in_play) = RANDOM(PLAYABLE_OFFSET,PLAYABLE_MAX);
 8003ce2:	f007 f81b 	bl	800ad1c <rand>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	4b23      	ldr	r3, [pc, #140]	; (8003d78 <spawnStar+0xac>)
 8003cea:	fb83 1302 	smull	r1, r3, r3, r2
 8003cee:	4413      	add	r3, r2
 8003cf0:	1199      	asrs	r1, r3, #6
 8003cf2:	17d3      	asrs	r3, r2, #31
 8003cf4:	1ac9      	subs	r1, r1, r3
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	440b      	add	r3, r1
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	1a5b      	subs	r3, r3, r1
 8003d00:	1ad1      	subs	r1, r2, r3
 8003d02:	b2cb      	uxtb	r3, r1
 8003d04:	3305      	adds	r3, #5
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <spawnStar+0xa8>)
 8003d0a:	f993 3000 	ldrsb.w	r3, [r3]
 8003d0e:	b251      	sxtb	r1, r2
 8003d10:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <spawnStar+0xa8>)
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	460a      	mov	r2, r1
 8003d18:	705a      	strb	r2, [r3, #1]
    	STAR_Y(Star.in_play) = 0;
 8003d1a:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <spawnStar+0xa8>)
 8003d1c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d20:	4a14      	ldr	r2, [pc, #80]	; (8003d74 <spawnStar+0xa8>)
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	2200      	movs	r2, #0
 8003d28:	709a      	strb	r2, [r3, #2]
        star_delay = RANDOM(5,20);
 8003d2a:	f006 fff7 	bl	800ad1c <rand>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	425a      	negs	r2, r3
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	f002 020f 	and.w	r2, r2, #15
 8003d3a:	bf58      	it	pl
 8003d3c:	4253      	negpl	r3, r2
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	3305      	adds	r3, #5
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <spawnStar+0xa4>)
 8003d46:	701a      	strb	r2, [r3, #0]
        Star.in_play++;
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <spawnStar+0xa8>)
 8003d4a:	f993 3000 	ldrsb.w	r3, [r3]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	3301      	adds	r3, #1
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	b25a      	sxtb	r2, r3
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <spawnStar+0xa8>)
 8003d58:	701a      	strb	r2, [r3, #0]
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 8003d5a:	e006      	b.n	8003d6a <spawnStar+0x9e>
    }else{
        star_delay--;
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <spawnStar+0xa4>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	4b02      	ldr	r3, [pc, #8]	; (8003d70 <spawnStar+0xa4>)
 8003d66:	701a      	strb	r2, [r3, #0]
    }
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	200021d7 	.word	0x200021d7
 8003d74:	200021c0 	.word	0x200021c0
 8003d78:	e6c2b449 	.word	0xe6c2b449

08003d7c <moveBullets>:
/**
 * @fn void moveBullets(void)
 * @brief moves the bullets and displays them on the screen aswell by calling "displayAmmo()"
 *
 */
void moveBullets(){
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
	displayAmmo(DARK_GREY);
 8003d82:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003d86:	f000 facd 	bl	8004324 <displayAmmo>
	for(int i = 0; i < ammo.in_play; i++){											  // For every bullet in play
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	e09c      	b.n	8003eca <moveBullets+0x14e>
		for (int j = 0; j < Comet.in_play; j++){									  	// For every comet in play
 8003d90:	2300      	movs	r3, #0
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	e040      	b.n	8003e18 <moveBullets+0x9c>
			if(AMMO_X(i) >= COMET_X(j) && AMMO_X(i) < COMET_X(j) + COMET_SIZE(j)){    		// check whether there's a comet at the same x-cord
 8003d96:	4a55      	ldr	r2, [pc, #340]	; (8003eec <moveBullets+0x170>)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003da2:	4619      	mov	r1, r3
 8003da4:	4a52      	ldr	r2, [pc, #328]	; (8003ef0 <moveBullets+0x174>)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	785b      	ldrb	r3, [r3, #1]
 8003dae:	4299      	cmp	r1, r3
 8003db0:	db2f      	blt.n	8003e12 <moveBullets+0x96>
 8003db2:	4a4e      	ldr	r2, [pc, #312]	; (8003eec <moveBullets+0x170>)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4a4b      	ldr	r2, [pc, #300]	; (8003ef0 <moveBullets+0x174>)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	785b      	ldrb	r3, [r3, #1]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	4a48      	ldr	r2, [pc, #288]	; (8003ef0 <moveBullets+0x174>)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003dd8:	4403      	add	r3, r0
 8003dda:	4299      	cmp	r1, r3
 8003ddc:	da19      	bge.n	8003e12 <moveBullets+0x96>
				if (AMMO_Y(i) <= COMET_Y(j) + COMET_SIZE(j) - 1){					  		// if the y-cord is also smaller, a comet has been hit by this bullet
 8003dde:	4a44      	ldr	r2, [pc, #272]	; (8003ef0 <moveBullets+0x174>)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	789b      	ldrb	r3, [r3, #2]
 8003de8:	4619      	mov	r1, r3
 8003dea:	4a41      	ldr	r2, [pc, #260]	; (8003ef0 <moveBullets+0x174>)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003df6:	18ca      	adds	r2, r1, r3
 8003df8:	493c      	ldr	r1, [pc, #240]	; (8003eec <moveBullets+0x170>)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	440b      	add	r3, r1
 8003e00:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	dd04      	ble.n	8003e12 <moveBullets+0x96>
					hitComet(i,j);
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fd08 	bl	8004820 <hitComet>
					continue;
 8003e10:	bf00      	nop
		for (int j = 0; j < Comet.in_play; j++){									  	// For every comet in play
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	3301      	adds	r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	4b35      	ldr	r3, [pc, #212]	; (8003ef0 <moveBullets+0x174>)
 8003e1a:	f993 3000 	ldrsb.w	r3, [r3]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4293      	cmp	r3, r2
 8003e24:	dbb7      	blt.n	8003d96 <moveBullets+0x1a>
				}
			}

		}
		AMMO_Y(i)--;
 8003e26:	4a31      	ldr	r2, [pc, #196]	; (8003eec <moveBullets+0x170>)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	b259      	sxtb	r1, r3
 8003e3a:	4a2c      	ldr	r2, [pc, #176]	; (8003eec <moveBullets+0x170>)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	460a      	mov	r2, r1
 8003e44:	70da      	strb	r2, [r3, #3]
		if (AMMO_Y(i) < 0){																// If the y-cord is negative, the bullet left the screen and should be deleted.
 8003e46:	4a29      	ldr	r2, [pc, #164]	; (8003eec <moveBullets+0x170>)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	da36      	bge.n	8003ec4 <moveBullets+0x148>
			send_Bullet(ammo.bullet_ar[i]);													// send the bullet to the other console (if connected)
 8003e56:	4a25      	ldr	r2, [pc, #148]	; (8003eec <moveBullets+0x170>)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	4413      	add	r3, r2
 8003e5e:	885a      	ldrh	r2, [r3, #2]
 8003e60:	2300      	movs	r3, #0
 8003e62:	f362 030f 	bfi	r3, r2, #0, #16
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fcb6 	bl	80047d8 <send_Bullet>
			for(int j = i; j < MAX_BULLETS - 1; j++){										// move every bullet that's behind the one that should be deleted
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	e01c      	b.n	8003eac <moveBullets+0x130>
				AMMO_X(j) = AMMO_X(j+1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3301      	adds	r3, #1
 8003e76:	4a1d      	ldr	r2, [pc, #116]	; (8003eec <moveBullets+0x170>)
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003e80:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <moveBullets+0x170>)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	4413      	add	r3, r2
 8003e88:	460a      	mov	r2, r1
 8003e8a:	709a      	strb	r2, [r3, #2]
				AMMO_Y(j) = AMMO_Y(j+1);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	4a16      	ldr	r2, [pc, #88]	; (8003eec <moveBullets+0x170>)
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4413      	add	r3, r2
 8003e96:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003e9a:	4a14      	ldr	r2, [pc, #80]	; (8003eec <moveBullets+0x170>)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	4413      	add	r3, r2
 8003ea2:	460a      	mov	r2, r1
 8003ea4:	70da      	strb	r2, [r3, #3]
			for(int j = i; j < MAX_BULLETS - 1; j++){										// move every bullet that's behind the one that should be deleted
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	607b      	str	r3, [r7, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	dddf      	ble.n	8003e72 <moveBullets+0xf6>
			}
			ammo.in_play--;																	// decrement ammo in play
 8003eb2:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <moveBullets+0x170>)
 8003eb4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	b25a      	sxtb	r2, r3
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <moveBullets+0x170>)
 8003ec2:	705a      	strb	r2, [r3, #1]
	for(int i = 0; i < ammo.in_play; i++){											  // For every bullet in play
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	4b08      	ldr	r3, [pc, #32]	; (8003eec <moveBullets+0x170>)
 8003ecc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	f6ff af5b 	blt.w	8003d90 <moveBullets+0x14>
		}
	}
	displayAmmo(RED);
 8003eda:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003ede:	f000 fa21 	bl	8004324 <displayAmmo>
}
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20002174 	.word	0x20002174
 8003ef0:	20002194 	.word	0x20002194

08003ef4 <moveComets>:
/**
 * @fn void moveComets(void)
 * @brief moves the comets and displays them on the screen aswell by calling "displayComets()"
 *
 */
void moveComets(){
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
	displayComets(DARK_GREY);
 8003efa:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003efe:	f000 fa79 	bl	80043f4 <displayComets>
	for (int i = 0; i<Comet.in_play; i++){															   // For every comet in play
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e0f3      	b.n	80040f0 <moveComets+0x1fc>
		for(int j = 0; j < COMET_SIZE(i); j++){														   // For the size of the current comet
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	e060      	b.n	8003fd0 <moveComets+0xdc>
			if(COMET_X(i) + j <= SPACESHIP_X_BOUND(+) && COMET_X(i) + j >= SPACESHIP_X_BOUND(-)){      // if the comet's x_cords are in between the bounds of the spaceship
 8003f0e:	4a80      	ldr	r2, [pc, #512]	; (8004110 <moveComets+0x21c>)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	785b      	ldrb	r3, [r3, #1]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	441a      	add	r2, r3
 8003f1e:	4b7d      	ldr	r3, [pc, #500]	; (8004114 <moveComets+0x220>)
 8003f20:	f993 3000 	ldrsb.w	r3, [r3]
 8003f24:	3302      	adds	r3, #2
 8003f26:	429a      	cmp	r2, r3
 8003f28:	dc4f      	bgt.n	8003fca <moveComets+0xd6>
 8003f2a:	4a79      	ldr	r2, [pc, #484]	; (8004110 <moveComets+0x21c>)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	785b      	ldrb	r3, [r3, #1]
 8003f34:	461a      	mov	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	441a      	add	r2, r3
 8003f3a:	4b76      	ldr	r3, [pc, #472]	; (8004114 <moveComets+0x220>)
 8003f3c:	f993 3000 	ldrsb.w	r3, [r3]
 8003f40:	3b02      	subs	r3, #2
 8003f42:	429a      	cmp	r2, r3
 8003f44:	db41      	blt.n	8003fca <moveComets+0xd6>
				if(powerUp == 2 && COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND){			   // if shield is enabled and the comet hit it, delete comet and get rid of shield
 8003f46:	4b74      	ldr	r3, [pc, #464]	; (8004118 <moveComets+0x224>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d11f      	bne.n	8003f8e <moveComets+0x9a>
 8003f4e:	4a70      	ldr	r2, [pc, #448]	; (8004110 <moveComets+0x21c>)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	789b      	ldrb	r3, [r3, #2]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4a6d      	ldr	r2, [pc, #436]	; (8004110 <moveComets+0x21c>)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003f66:	18ca      	adds	r2, r1, r3
 8003f68:	4b6a      	ldr	r3, [pc, #424]	; (8004114 <moveComets+0x220>)
 8003f6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	429a      	cmp	r2, r3
 8003f72:	db0c      	blt.n	8003f8e <moveComets+0x9a>
					hitComet(420,i);
 8003f74:	68f9      	ldr	r1, [r7, #12]
 8003f76:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003f7a:	f000 fc51 	bl	8004820 <hitComet>
					displayPowerup(DARK_GREY);
 8003f7e:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003f82:	f000 fd61 	bl	8004a48 <displayPowerup>
					powerUp = 0;
 8003f86:	4b64      	ldr	r3, [pc, #400]	; (8004118 <moveComets+0x224>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	e01d      	b.n	8003fca <moveComets+0xd6>
				}
				else if (COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND && hit == 0){			   // else the spaceship has been hit
 8003f8e:	4a60      	ldr	r2, [pc, #384]	; (8004110 <moveComets+0x21c>)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	789b      	ldrb	r3, [r3, #2]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4a5d      	ldr	r2, [pc, #372]	; (8004110 <moveComets+0x21c>)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003fa6:	18ca      	adds	r2, r1, r3
 8003fa8:	4b5a      	ldr	r3, [pc, #360]	; (8004114 <moveComets+0x220>)
 8003faa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	db0a      	blt.n	8003fca <moveComets+0xd6>
 8003fb4:	4b59      	ldr	r3, [pc, #356]	; (800411c <moveComets+0x228>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d106      	bne.n	8003fca <moveComets+0xd6>
                    hitComet(420,i);
 8003fbc:	68f9      	ldr	r1, [r7, #12]
 8003fbe:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003fc2:	f000 fc2d 	bl	8004820 <hitComet>
                    beenHit();
 8003fc6:	f000 fccd 	bl	8004964 <beenHit>
		for(int j = 0; j < COMET_SIZE(i); j++){														   // For the size of the current comet
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	4a4f      	ldr	r2, [pc, #316]	; (8004110 <moveComets+0x21c>)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	db94      	blt.n	8003f0e <moveComets+0x1a>
                }
            }
        }
        if(powerUp == 1 && SpaceShip.x >= COMET_X(i) && SpaceShip.x <= COMET_X(i) + COMET_SIZE(i)){    // If death-ray is enabled and the comet is above the spaceship, obliterate it
 8003fe4:	4b4c      	ldr	r3, [pc, #304]	; (8004118 <moveComets+0x224>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d133      	bne.n	8004054 <moveComets+0x160>
 8003fec:	4b49      	ldr	r3, [pc, #292]	; (8004114 <moveComets+0x220>)
 8003fee:	f993 3000 	ldrsb.w	r3, [r3]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4a46      	ldr	r2, [pc, #280]	; (8004110 <moveComets+0x21c>)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	785b      	ldrb	r3, [r3, #1]
 8003ffe:	4299      	cmp	r1, r3
 8004000:	db28      	blt.n	8004054 <moveComets+0x160>
 8004002:	4b44      	ldr	r3, [pc, #272]	; (8004114 <moveComets+0x220>)
 8004004:	f993 3000 	ldrsb.w	r3, [r3]
 8004008:	4619      	mov	r1, r3
 800400a:	4a41      	ldr	r2, [pc, #260]	; (8004110 <moveComets+0x21c>)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	4618      	mov	r0, r3
 8004016:	4a3e      	ldr	r2, [pc, #248]	; (8004110 <moveComets+0x21c>)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004022:	4403      	add	r3, r0
 8004024:	4299      	cmp	r1, r3
 8004026:	dc15      	bgt.n	8004054 <moveComets+0x160>
        	hitComet(420,i);
 8004028:	68f9      	ldr	r1, [r7, #12]
 800402a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800402e:	f000 fbf7 	bl	8004820 <hitComet>
        	if(powerUp_delay == 0){																	   // If death ray has hit MAX_DELAY_POWERUP comets, disable powerup
 8004032:	4b3b      	ldr	r3, [pc, #236]	; (8004120 <moveComets+0x22c>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <moveComets+0x154>
        		displayPowerup(DARK_GREY);
 800403a:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800403e:	f000 fd03 	bl	8004a48 <displayPowerup>
        		powerUp = 0;
 8004042:	4b35      	ldr	r3, [pc, #212]	; (8004118 <moveComets+0x224>)
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]

        	}
        	powerUp_delay--;
 8004048:	4b35      	ldr	r3, [pc, #212]	; (8004120 <moveComets+0x22c>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	3b01      	subs	r3, #1
 800404e:	b2da      	uxtb	r2, r3
 8004050:	4b33      	ldr	r3, [pc, #204]	; (8004120 <moveComets+0x22c>)
 8004052:	701a      	strb	r2, [r3, #0]
        }
        COMET_Y(i)++;
 8004054:	4a2e      	ldr	r2, [pc, #184]	; (8004110 <moveComets+0x21c>)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	789b      	ldrb	r3, [r3, #2]
 800405e:	3301      	adds	r3, #1
 8004060:	b2d9      	uxtb	r1, r3
 8004062:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <moveComets+0x21c>)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	460a      	mov	r2, r1
 800406c:	709a      	strb	r2, [r3, #2]
        if (COMET_Y(i) > SCREEN_HEIGHT - 1){														   // if the comet went out of the screen, delete it
 800406e:	4a28      	ldr	r2, [pc, #160]	; (8004110 <moveComets+0x21c>)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	789b      	ldrb	r3, [r3, #2]
 8004078:	2b3b      	cmp	r3, #59	; 0x3b
 800407a:	d936      	bls.n	80040ea <moveComets+0x1f6>
            for(int j = i; j < MAX_COMETS - 1; j++){
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	607b      	str	r3, [r7, #4]
 8004080:	e027      	b.n	80040d2 <moveComets+0x1de>
            	COMET_X(j) = COMET_X(j+1);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3301      	adds	r3, #1
 8004086:	4a22      	ldr	r2, [pc, #136]	; (8004110 <moveComets+0x21c>)
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	7859      	ldrb	r1, [r3, #1]
 800408e:	4a20      	ldr	r2, [pc, #128]	; (8004110 <moveComets+0x21c>)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	460a      	mov	r2, r1
 8004098:	705a      	strb	r2, [r3, #1]
            	COMET_Y(j) = COMET_Y(j+1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3301      	adds	r3, #1
 800409e:	4a1c      	ldr	r2, [pc, #112]	; (8004110 <moveComets+0x21c>)
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	7899      	ldrb	r1, [r3, #2]
 80040a6:	4a1a      	ldr	r2, [pc, #104]	; (8004110 <moveComets+0x21c>)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	460a      	mov	r2, r1
 80040b0:	709a      	strb	r2, [r3, #2]
                COMET_SIZE(j) = COMET_SIZE(j+1);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3301      	adds	r3, #1
 80040b6:	4a16      	ldr	r2, [pc, #88]	; (8004110 <moveComets+0x21c>)
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80040c0:	4a13      	ldr	r2, [pc, #76]	; (8004110 <moveComets+0x21c>)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	460a      	mov	r2, r1
 80040ca:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_COMETS - 1; j++){
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3301      	adds	r3, #1
 80040d0:	607b      	str	r3, [r7, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	ddd4      	ble.n	8004082 <moveComets+0x18e>
            }
            Comet.in_play--;
 80040d8:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <moveComets+0x21c>)
 80040da:	f993 3000 	ldrsb.w	r3, [r3]
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	b25a      	sxtb	r2, r3
 80040e6:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <moveComets+0x21c>)
 80040e8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<Comet.in_play; i++){															   // For every comet in play
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3301      	adds	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <moveComets+0x21c>)
 80040f2:	f993 3000 	ldrsb.w	r3, [r3]
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4293      	cmp	r3, r2
 80040fc:	f6ff af04 	blt.w	8003f08 <moveComets+0x14>
        }
    }
    displayComets(GREY);
 8004100:	f249 6096 	movw	r0, #38550	; 0x9696
 8004104:	f000 f976 	bl	80043f4 <displayComets>
}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20002194 	.word	0x20002194
 8004114:	20000050 	.word	0x20000050
 8004118:	200021e0 	.word	0x200021e0
 800411c:	20001eef 	.word	0x20001eef
 8004120:	200021d8 	.word	0x200021d8

08004124 <moveStars>:
/**
 * @fn void moveStars(void)
 * @brief moves the stars and displays them on the screen aswell by calling "displayStars()"
 *
 */
void moveStars(){
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
	displayStars(DARK_GREY);
 800412a:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800412e:	f000 f8c7 	bl	80042c0 <displayStars>
    for (int i = 0; i<Star.in_play; i++){
 8004132:	2300      	movs	r3, #0
 8004134:	607b      	str	r3, [r7, #4]
 8004136:	e046      	b.n	80041c6 <moveStars+0xa2>
    	STAR_Y(i)++;
 8004138:	4a2a      	ldr	r2, [pc, #168]	; (80041e4 <moveStars+0xc0>)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	4413      	add	r3, r2
 8004140:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	3301      	adds	r3, #1
 8004148:	b2db      	uxtb	r3, r3
 800414a:	b259      	sxtb	r1, r3
 800414c:	4a25      	ldr	r2, [pc, #148]	; (80041e4 <moveStars+0xc0>)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	460a      	mov	r2, r1
 8004156:	709a      	strb	r2, [r3, #2]
        if (STAR_Y(i) > SCREEN_HEIGHT - 4){
 8004158:	4a22      	ldr	r2, [pc, #136]	; (80041e4 <moveStars+0xc0>)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4413      	add	r3, r2
 8004160:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004164:	2b38      	cmp	r3, #56	; 0x38
 8004166:	dd2b      	ble.n	80041c0 <moveStars+0x9c>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	e01c      	b.n	80041a8 <moveStars+0x84>
            	STAR_X(j) = STAR_X(j+1);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	3301      	adds	r3, #1
 8004172:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <moveStars+0xc0>)
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	4413      	add	r3, r2
 8004178:	f993 1001 	ldrsb.w	r1, [r3, #1]
 800417c:	4a19      	ldr	r2, [pc, #100]	; (80041e4 <moveStars+0xc0>)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	4413      	add	r3, r2
 8004184:	460a      	mov	r2, r1
 8004186:	705a      	strb	r2, [r3, #1]
            	STAR_Y(j) = STAR_Y(j+1);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	3301      	adds	r3, #1
 800418c:	4a15      	ldr	r2, [pc, #84]	; (80041e4 <moveStars+0xc0>)
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	4413      	add	r3, r2
 8004192:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8004196:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <moveStars+0xc0>)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4413      	add	r3, r2
 800419e:	460a      	mov	r2, r1
 80041a0:	709a      	strb	r2, [r3, #2]
            for(int j = i; j < MAX_COMETS - 1; j++){
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	3301      	adds	r3, #1
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	dddf      	ble.n	800416e <moveStars+0x4a>
            }
            Star.in_play--;
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <moveStars+0xc0>)
 80041b0:	f993 3000 	ldrsb.w	r3, [r3]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	b25a      	sxtb	r2, r3
 80041bc:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <moveStars+0xc0>)
 80041be:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Star.in_play; i++){
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3301      	adds	r3, #1
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <moveStars+0xc0>)
 80041c8:	f993 3000 	ldrsb.w	r3, [r3]
 80041cc:	461a      	mov	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4293      	cmp	r3, r2
 80041d2:	dbb1      	blt.n	8004138 <moveStars+0x14>
        }
    }
    displayStars(YELLOW);
 80041d4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80041d8:	f000 f872 	bl	80042c0 <displayStars>
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	200021c0 	.word	0x200021c0

080041e8 <moveSpaceship>:
 * @fn void moveSpaceship(int)
 * @brief moves the spaceship and displays it on the screen aswell by calling "displaySpaceShip()"
 *
 * @param
 */
void moveSpaceship(int direction){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
	displaySpaceShip(DARK_GREY);
 80041f0:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80041f4:	f000 f93e 	bl	8004474 <displaySpaceShip>
	if(powerUp > 0){
 80041f8:	4b2e      	ldr	r3, [pc, #184]	; (80042b4 <moveSpaceship+0xcc>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <moveSpaceship+0x20>
		displayPowerup(DARK_GREY);
 8004200:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8004204:	f000 fc20 	bl	8004a48 <displayPowerup>
	}
    if(direction < 0){
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	da26      	bge.n	800425c <moveSpaceship+0x74>
        SpaceShip.x--;
 800420e:	4b2a      	ldr	r3, [pc, #168]	; (80042b8 <moveSpaceship+0xd0>)
 8004210:	f993 3000 	ldrsb.w	r3, [r3]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	b25a      	sxtb	r2, r3
 800421c:	4b26      	ldr	r3, [pc, #152]	; (80042b8 <moveSpaceship+0xd0>)
 800421e:	701a      	strb	r2, [r3, #0]
        if(SpaceShip.x < SPACESHIP_WIDTH/2) {
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <moveSpaceship+0xd0>)
 8004222:	f993 3000 	ldrsb.w	r3, [r3]
 8004226:	2b01      	cmp	r3, #1
 8004228:	dc02      	bgt.n	8004230 <moveSpaceship+0x48>
        	SpaceShip.x = (SPACESHIP_WIDTH/2);
 800422a:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <moveSpaceship+0xd0>)
 800422c:	2202      	movs	r2, #2
 800422e:	701a      	strb	r2, [r3, #0]
        }
        displaySpaceShip(spaceshipCurrentColor);
 8004230:	4b22      	ldr	r3, [pc, #136]	; (80042bc <moveSpaceship+0xd4>)
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f91d 	bl	8004474 <displaySpaceShip>
        if(powerUp == 1){
 800423a:	4b1e      	ldr	r3, [pc, #120]	; (80042b4 <moveSpaceship+0xcc>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d103      	bne.n	800424a <moveSpaceship+0x62>
        	displayPowerup(RED);
 8004242:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004246:	f000 fbff 	bl	8004a48 <displayPowerup>
        }
        if(powerUp == 2){
 800424a:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <moveSpaceship+0xcc>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d12b      	bne.n	80042aa <moveSpaceship+0xc2>
        	displayPowerup(LIGHT_BLUE);
 8004252:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8004256:	f000 fbf7 	bl	8004a48 <displayPowerup>
        }
        return;
 800425a:	e026      	b.n	80042aa <moveSpaceship+0xc2>
    }
    SpaceShip.x++;
 800425c:	4b16      	ldr	r3, [pc, #88]	; (80042b8 <moveSpaceship+0xd0>)
 800425e:	f993 3000 	ldrsb.w	r3, [r3]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	3301      	adds	r3, #1
 8004266:	b2db      	uxtb	r3, r3
 8004268:	b25a      	sxtb	r2, r3
 800426a:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <moveSpaceship+0xd0>)
 800426c:	701a      	strb	r2, [r3, #0]
    if(SpaceShip.x > SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1) {
 800426e:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <moveSpaceship+0xd0>)
 8004270:	f993 3000 	ldrsb.w	r3, [r3]
 8004274:	2b4d      	cmp	r3, #77	; 0x4d
 8004276:	dd02      	ble.n	800427e <moveSpaceship+0x96>
    	SpaceShip.x = SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1;
 8004278:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <moveSpaceship+0xd0>)
 800427a:	224d      	movs	r2, #77	; 0x4d
 800427c:	701a      	strb	r2, [r3, #0]
    }
    displaySpaceShip(spaceshipCurrentColor);
 800427e:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <moveSpaceship+0xd4>)
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f8f6 	bl	8004474 <displaySpaceShip>
    if(powerUp == 1){
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <moveSpaceship+0xcc>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d103      	bne.n	8004298 <moveSpaceship+0xb0>
    	displayPowerup(RED);
 8004290:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004294:	f000 fbd8 	bl	8004a48 <displayPowerup>
    }
	if(powerUp == 2){
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <moveSpaceship+0xcc>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d105      	bne.n	80042ac <moveSpaceship+0xc4>
		displayPowerup(LIGHT_BLUE);
 80042a0:	f24f 70db 	movw	r0, #63451	; 0xf7db
 80042a4:	f000 fbd0 	bl	8004a48 <displayPowerup>
 80042a8:	e000      	b.n	80042ac <moveSpaceship+0xc4>
        return;
 80042aa:	bf00      	nop
	}
}
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	200021e0 	.word	0x200021e0
 80042b8:	20000050 	.word	0x20000050
 80042bc:	20000052 	.word	0x20000052

080042c0 <displayStars>:
 * @fn void displayStars(uint16_t)
 * @brief 	displays the stars on the screen
 *
 * @param[in] color uint16_t: the color the star should be displayed with
 */
void displayStars(uint16_t color){
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	4603      	mov	r3, r0
 80042c8:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < Star.in_play; i++){
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	e01a      	b.n	8004306 <displayStars+0x46>
    	Displ_FillArea(STAR_X(i)* 4, STAR_Y(i) * 4, 4, 4, color);
 80042d0:	4a13      	ldr	r2, [pc, #76]	; (8004320 <displayStars+0x60>)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	4413      	add	r3, r2
 80042d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	b298      	uxth	r0, r3
 80042e2:	4a0f      	ldr	r2, [pc, #60]	; (8004320 <displayStars+0x60>)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4413      	add	r3, r2
 80042ea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	b299      	uxth	r1, r3
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	2304      	movs	r3, #4
 80042fa:	2204      	movs	r2, #4
 80042fc:	f001 f85a 	bl	80053b4 <Displ_FillArea>
    for(int i = 0; i < Star.in_play; i++){
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3301      	adds	r3, #1
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	4b06      	ldr	r3, [pc, #24]	; (8004320 <displayStars+0x60>)
 8004308:	f993 3000 	ldrsb.w	r3, [r3]
 800430c:	461a      	mov	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4293      	cmp	r3, r2
 8004312:	dbdd      	blt.n	80042d0 <displayStars+0x10>
    }
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	200021c0 	.word	0x200021c0

08004324 <displayAmmo>:
 * @fn void displayAmmo(uint16_t)
 * @brief displays the Bullets on the screen
 *
 * @param[in] color uint16_t: the color the ammo should be displayed with
 */
void displayAmmo(uint16_t color){
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af02      	add	r7, sp, #8
 800432a:	4603      	mov	r3, r0
 800432c:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < ammo.in_play; i++){
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	e01a      	b.n	800436a <displayAmmo+0x46>
    	Displ_FillArea(AMMO_X(i) * 4, AMMO_Y(i) * 4, 4, 4, color);
 8004334:	4a13      	ldr	r2, [pc, #76]	; (8004384 <displayAmmo+0x60>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4413      	add	r3, r2
 800433c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004340:	b29b      	uxth	r3, r3
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	b298      	uxth	r0, r3
 8004346:	4a0f      	ldr	r2, [pc, #60]	; (8004384 <displayAmmo+0x60>)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004352:	b29b      	uxth	r3, r3
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	b299      	uxth	r1, r3
 8004358:	88fb      	ldrh	r3, [r7, #6]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2304      	movs	r3, #4
 800435e:	2204      	movs	r2, #4
 8004360:	f001 f828 	bl	80053b4 <Displ_FillArea>
    for(int i = 0; i < ammo.in_play; i++){
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3301      	adds	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	4b06      	ldr	r3, [pc, #24]	; (8004384 <displayAmmo+0x60>)
 800436c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004370:	461a      	mov	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4293      	cmp	r3, r2
 8004376:	dbdd      	blt.n	8004334 <displayAmmo+0x10>
    }

}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20002174 	.word	0x20002174

08004388 <displayEnemyAmmo>:
 * @fn void displayEnemyAmmo(uint16_t)
 * @brief displays the enemy Bullets on the screen
 *
 * @param[in] color uint16_t: the color the ammo should be displayed with
 */
void displayEnemyAmmo(uint16_t color){
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af02      	add	r7, sp, #8
 800438e:	4603      	mov	r3, r0
 8004390:	80fb      	strh	r3, [r7, #6]
	if(connected){
 8004392:	4b16      	ldr	r3, [pc, #88]	; (80043ec <displayEnemyAmmo+0x64>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d024      	beq.n	80043e4 <displayEnemyAmmo+0x5c>
		for(int i = 0; i < enemy_ammo.in_play; i++){
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	e01a      	b.n	80043d6 <displayEnemyAmmo+0x4e>
			Displ_FillArea(E_AMMO_X(i) * 4, E_AMMO_Y(i) * 4, 4, 4, color);
 80043a0:	4a13      	ldr	r2, [pc, #76]	; (80043f0 <displayEnemyAmmo+0x68>)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4413      	add	r3, r2
 80043a8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	b298      	uxth	r0, r3
 80043b2:	4a0f      	ldr	r2, [pc, #60]	; (80043f0 <displayEnemyAmmo+0x68>)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4413      	add	r3, r2
 80043ba:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	b299      	uxth	r1, r3
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	2304      	movs	r3, #4
 80043ca:	2204      	movs	r2, #4
 80043cc:	f000 fff2 	bl	80053b4 <Displ_FillArea>
		for(int i = 0; i < enemy_ammo.in_play; i++){
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3301      	adds	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <displayEnemyAmmo+0x68>)
 80043d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80043dc:	461a      	mov	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4293      	cmp	r3, r2
 80043e2:	dbdd      	blt.n	80043a0 <displayEnemyAmmo+0x18>
		}
	}
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20002109 	.word	0x20002109
 80043f0:	20002184 	.word	0x20002184

080043f4 <displayComets>:
 * @fn void displayComets(uint16_t)
 * @brief displays the comets on the screen
 *
 * @param[in] color uint16_t: the color the comets should be displayed with
 */
void displayComets(uint16_t color){
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	4603      	mov	r3, r0
 80043fc:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < Comet.in_play; i++){
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	e029      	b.n	8004458 <displayComets+0x64>
        Displ_FillArea(COMET_X(i) * 4, COMET_Y(i)  * 4, COMET_SIZE(i) * 4, COMET_SIZE(i) * 4, color);
 8004404:	4a1a      	ldr	r2, [pc, #104]	; (8004470 <displayComets+0x7c>)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	785b      	ldrb	r3, [r3, #1]
 800440e:	b29b      	uxth	r3, r3
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	b298      	uxth	r0, r3
 8004414:	4a16      	ldr	r2, [pc, #88]	; (8004470 <displayComets+0x7c>)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	789b      	ldrb	r3, [r3, #2]
 800441e:	b29b      	uxth	r3, r3
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	b299      	uxth	r1, r3
 8004424:	4a12      	ldr	r2, [pc, #72]	; (8004470 <displayComets+0x7c>)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004430:	b29b      	uxth	r3, r3
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	b29a      	uxth	r2, r3
 8004436:	4c0e      	ldr	r4, [pc, #56]	; (8004470 <displayComets+0x7c>)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4423      	add	r3, r4
 800443e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004442:	b29b      	uxth	r3, r3
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	b29c      	uxth	r4, r3
 8004448:	88fb      	ldrh	r3, [r7, #6]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	4623      	mov	r3, r4
 800444e:	f000 ffb1 	bl	80053b4 <Displ_FillArea>
    for (int i = 0; i < Comet.in_play; i++){
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3301      	adds	r3, #1
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <displayComets+0x7c>)
 800445a:	f993 3000 	ldrsb.w	r3, [r3]
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4293      	cmp	r3, r2
 8004464:	dbce      	blt.n	8004404 <displayComets+0x10>
    }
}
 8004466:	bf00      	nop
 8004468:	bf00      	nop
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	bd90      	pop	{r4, r7, pc}
 8004470:	20002194 	.word	0x20002194

08004474 <displaySpaceShip>:
 * @fn void displaySpaceShip(uint16_t)
 * @brief displays the spaceship on the screen
 *
 * @param[in] color uint16_t: the color the spaceship should be displayed with
 */
void displaySpaceShip(uint16_t color){
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af02      	add	r7, sp, #8
 800447a:	4603      	mov	r3, r0
 800447c:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(SpaceShip.x*4 - 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 800447e:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <displaySpaceShip+0x80>)
 8004480:	f993 3000 	ldrsb.w	r3, [r3]
 8004484:	3b02      	subs	r3, #2
 8004486:	b29b      	uxth	r3, r3
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	b298      	uxth	r0, r3
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	2310      	movs	r3, #16
 8004492:	2204      	movs	r2, #4
 8004494:	21d8      	movs	r1, #216	; 0xd8
 8004496:	f000 ff8d 	bl	80053b4 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 + 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 800449a:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <displaySpaceShip+0x80>)
 800449c:	f993 3000 	ldrsb.w	r3, [r3]
 80044a0:	3302      	adds	r3, #2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	b298      	uxth	r0, r3
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	2310      	movs	r3, #16
 80044ae:	2204      	movs	r2, #4
 80044b0:	21d8      	movs	r1, #216	; 0xd8
 80044b2:	f000 ff7f 	bl	80053b4 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 - 4, SCREEN_HEIGHT*4 -20, 12, 4, color);
 80044b6:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <displaySpaceShip+0x80>)
 80044b8:	f993 3000 	ldrsb.w	r3, [r3]
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29b      	uxth	r3, r3
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	b298      	uxth	r0, r3
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2304      	movs	r3, #4
 80044ca:	220c      	movs	r2, #12
 80044cc:	21dc      	movs	r1, #220	; 0xdc
 80044ce:	f000 ff71 	bl	80053b4 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4, SCREEN_HEIGHT*4 -28, 4, 16, color);
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <displaySpaceShip+0x80>)
 80044d4:	f993 3000 	ldrsb.w	r3, [r3]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	b298      	uxth	r0, r3
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	2310      	movs	r3, #16
 80044e4:	2204      	movs	r2, #4
 80044e6:	21d4      	movs	r1, #212	; 0xd4
 80044e8:	f000 ff64 	bl	80053b4 <Displ_FillArea>

}
 80044ec:	bf00      	nop
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000050 	.word	0x20000050

080044f8 <displayLives>:
/**
 * @fn void displayLives(void)
 * @brief displays the amount of lives left on the screen
 *
 */
void displayLives(){
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af02      	add	r7, sp, #8
    for(int i = 0; i < lives; i++){
 80044fe:	2300      	movs	r3, #0
 8004500:	607b      	str	r3, [r7, #4]
 8004502:	e013      	b.n	800452c <displayLives+0x34>
    	Displ_FillArea(HEARTS_X+HEARTS_OFFSET*i, HEARTS_Y, 4, 4, LIGHT_GREEN);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	b29b      	uxth	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	0052      	lsls	r2, r2, #1
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	b29b      	uxth	r3, r3
 8004512:	3308      	adds	r3, #8
 8004514:	b298      	uxth	r0, r3
 8004516:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	2304      	movs	r3, #4
 800451e:	2204      	movs	r2, #4
 8004520:	2108      	movs	r1, #8
 8004522:	f000 ff47 	bl	80053b4 <Displ_FillArea>
    for(int i = 0; i < lives; i++){
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3301      	adds	r3, #1
 800452a:	607b      	str	r3, [r7, #4]
 800452c:	4b16      	ldr	r3, [pc, #88]	; (8004588 <displayLives+0x90>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4293      	cmp	r3, r2
 8004536:	dbe5      	blt.n	8004504 <displayLives+0xc>
    }
    if(lives < 3){
 8004538:	4b13      	ldr	r3, [pc, #76]	; (8004588 <displayLives+0x90>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d81f      	bhi.n	8004580 <displayLives+0x88>
    	for(int i = 0; i < 3 - lives; i++){
 8004540:	2300      	movs	r3, #0
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	e015      	b.n	8004572 <displayLives+0x7a>
    		Displ_FillArea(HEARTS_X+HEARTS_OFFSET*(3-i), HEARTS_Y, 4, 4, DARK_GREY);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	f1c3 0303 	rsb	r3, r3, #3
 800454c:	b29b      	uxth	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	0052      	lsls	r2, r2, #1
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	b29b      	uxth	r3, r3
 8004558:	3308      	adds	r3, #8
 800455a:	b298      	uxth	r0, r3
 800455c:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	2304      	movs	r3, #4
 8004564:	2204      	movs	r2, #4
 8004566:	2108      	movs	r1, #8
 8004568:	f000 ff24 	bl	80053b4 <Displ_FillArea>
    	for(int i = 0; i < 3 - lives; i++){
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	3301      	adds	r3, #1
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <displayLives+0x90>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	f1c3 0303 	rsb	r3, r3, #3
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	dbe2      	blt.n	8004546 <displayLives+0x4e>
    	}
    }
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	2000004e 	.word	0x2000004e

0800458c <spaceShipHitColorToggle>:
/**
 * @fn void spaceShipHitColorToggle(void)
 * @brief if the spaceship was hit by an enemy bullet or a comet, the spaceship has to blink red/white for a while
 *
 */
void spaceShipHitColorToggle(){
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
    if(spaceshipCurrentColor == RED && hit % 10 == 0){
 8004590:	4b1f      	ldr	r3, [pc, #124]	; (8004610 <spaceShipHitColorToggle+0x84>)
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8004598:	d112      	bne.n	80045c0 <spaceShipHitColorToggle+0x34>
 800459a:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <spaceShipHitColorToggle+0x88>)
 800459c:	781a      	ldrb	r2, [r3, #0]
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <spaceShipHitColorToggle+0x8c>)
 80045a0:	fba3 1302 	umull	r1, r3, r3, r2
 80045a4:	08d9      	lsrs	r1, r3, #3
 80045a6:	460b      	mov	r3, r1
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d104      	bne.n	80045c0 <spaceShipHitColorToggle+0x34>
        spaceshipCurrentColor = WHITE;
 80045b6:	4b16      	ldr	r3, [pc, #88]	; (8004610 <spaceShipHitColorToggle+0x84>)
 80045b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045bc:	801a      	strh	r2, [r3, #0]
 80045be:	e011      	b.n	80045e4 <spaceShipHitColorToggle+0x58>
    }else if(hit % 10 == 0){
 80045c0:	4b14      	ldr	r3, [pc, #80]	; (8004614 <spaceShipHitColorToggle+0x88>)
 80045c2:	781a      	ldrb	r2, [r3, #0]
 80045c4:	4b14      	ldr	r3, [pc, #80]	; (8004618 <spaceShipHitColorToggle+0x8c>)
 80045c6:	fba3 1302 	umull	r1, r3, r3, r2
 80045ca:	08d9      	lsrs	r1, r3, #3
 80045cc:	460b      	mov	r3, r1
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <spaceShipHitColorToggle+0x58>
        spaceshipCurrentColor = RED;
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <spaceShipHitColorToggle+0x84>)
 80045de:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80045e2:	801a      	strh	r2, [r3, #0]
    }
    if(hit < hit_graph_counter){
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <spaceShipHitColorToggle+0x88>)
 80045e6:	781a      	ldrb	r2, [r3, #0]
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <spaceShipHitColorToggle+0x90>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d206      	bcs.n	80045fe <spaceShipHitColorToggle+0x72>
        hit++;
 80045f0:	4b08      	ldr	r3, [pc, #32]	; (8004614 <spaceShipHitColorToggle+0x88>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <spaceShipHitColorToggle+0x88>)
 80045fa:	701a      	strb	r2, [r3, #0]
    }else{
        hit = 0;
    }
}
 80045fc:	e002      	b.n	8004604 <spaceShipHitColorToggle+0x78>
        hit = 0;
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <spaceShipHitColorToggle+0x88>)
 8004600:	2200      	movs	r2, #0
 8004602:	701a      	strb	r2, [r3, #0]
}
 8004604:	bf00      	nop
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000052 	.word	0x20000052
 8004614:	20001eef 	.word	0x20001eef
 8004618:	cccccccd 	.word	0xcccccccd
 800461c:	20000054 	.word	0x20000054

08004620 <delayBullet>:
/**
 * @fn void delayBullet(void)
 * @brief decrements the bullet_delay variable, if 0 the spaceship can shoot a bullet again
 *
 */
void delayBullet(){
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
    if (bullet_delay > 0){
 8004624:	4b07      	ldr	r3, [pc, #28]	; (8004644 <delayBullet+0x24>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <delayBullet+0x18>
        bullet_delay--;
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <delayBullet+0x24>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	3b01      	subs	r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <delayBullet+0x24>)
 8004636:	701a      	strb	r2, [r3, #0]
    }
}
 8004638:	bf00      	nop
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	200021d5 	.word	0x200021d5

08004648 <moveEnemyBullets>:
/**
 * @fn void moveEnemyBullets(void)
 * @brief move the enemy bullets
 *
 */
void moveEnemyBullets(void){
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
    if (!connected){
 800464e:	4b5e      	ldr	r3, [pc, #376]	; (80047c8 <moveEnemyBullets+0x180>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 80b4 	beq.w	80047c0 <moveEnemyBullets+0x178>
        //QD << "not multiplayer";  // change to uart debug
        return;
    }
    displayEnemyAmmo(DARK_GREY);
 8004658:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800465c:	f7ff fe94 	bl	8004388 <displayEnemyAmmo>
    for(int i = 0; i < enemy_ammo.in_play; i++){										   // For every enemy bullet in play
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	e09f      	b.n	80047a6 <moveEnemyBullets+0x15e>
        if(E_AMMO_X(i) <= SPACESHIP_X_BOUND(+) && E_AMMO_X(i) >= SPACESHIP_X_BOUND(-)){    // if it's x-cord is in the path of the spaceship
 8004666:	4a59      	ldr	r2, [pc, #356]	; (80047cc <moveEnemyBullets+0x184>)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	4413      	add	r3, r2
 800466e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004672:	461a      	mov	r2, r3
 8004674:	4b56      	ldr	r3, [pc, #344]	; (80047d0 <moveEnemyBullets+0x188>)
 8004676:	f993 3000 	ldrsb.w	r3, [r3]
 800467a:	3302      	adds	r3, #2
 800467c:	429a      	cmp	r2, r3
 800467e:	dc4b      	bgt.n	8004718 <moveEnemyBullets+0xd0>
 8004680:	4a52      	ldr	r2, [pc, #328]	; (80047cc <moveEnemyBullets+0x184>)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	4413      	add	r3, r2
 8004688:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800468c:	461a      	mov	r2, r3
 800468e:	4b50      	ldr	r3, [pc, #320]	; (80047d0 <moveEnemyBullets+0x188>)
 8004690:	f993 3000 	ldrsb.w	r3, [r3]
 8004694:	3b02      	subs	r3, #2
 8004696:	429a      	cmp	r2, r3
 8004698:	db3e      	blt.n	8004718 <moveEnemyBullets+0xd0>
            if (E_AMMO_Y(i) >= SPACESHIP_Y_BOUND && hit == 0){							   // and it's y value is higher than the spaceship's, the spaceship has been hit
 800469a:	4a4c      	ldr	r2, [pc, #304]	; (80047cc <moveEnemyBullets+0x184>)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	4413      	add	r3, r2
 80046a2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80046a6:	461a      	mov	r2, r3
 80046a8:	4b49      	ldr	r3, [pc, #292]	; (80047d0 <moveEnemyBullets+0x188>)
 80046aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80046ae:	3b02      	subs	r3, #2
 80046b0:	429a      	cmp	r2, r3
 80046b2:	db31      	blt.n	8004718 <moveEnemyBullets+0xd0>
 80046b4:	4b47      	ldr	r3, [pc, #284]	; (80047d4 <moveEnemyBullets+0x18c>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d12d      	bne.n	8004718 <moveEnemyBullets+0xd0>
                beenHit();
 80046bc:	f000 f952 	bl	8004964 <beenHit>
                for(int j = i; j < MAX_BULLETS - 1; j++){								   // Delete this enemy bullet
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	e01c      	b.n	8004700 <moveEnemyBullets+0xb8>
                	E_AMMO_X(j) = E_AMMO_X(j+1);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	3301      	adds	r3, #1
 80046ca:	4a40      	ldr	r2, [pc, #256]	; (80047cc <moveEnemyBullets+0x184>)
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80046d4:	4a3d      	ldr	r2, [pc, #244]	; (80047cc <moveEnemyBullets+0x184>)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	4413      	add	r3, r2
 80046dc:	460a      	mov	r2, r1
 80046de:	709a      	strb	r2, [r3, #2]
                	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	3301      	adds	r3, #1
 80046e4:	4a39      	ldr	r2, [pc, #228]	; (80047cc <moveEnemyBullets+0x184>)
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	4413      	add	r3, r2
 80046ea:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80046ee:	4a37      	ldr	r2, [pc, #220]	; (80047cc <moveEnemyBullets+0x184>)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	4413      	add	r3, r2
 80046f6:	460a      	mov	r2, r1
 80046f8:	70da      	strb	r2, [r3, #3]
                for(int j = i; j < MAX_BULLETS - 1; j++){								   // Delete this enemy bullet
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	3301      	adds	r3, #1
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b04      	cmp	r3, #4
 8004704:	dddf      	ble.n	80046c6 <moveEnemyBullets+0x7e>
                }
                enemy_ammo.in_play--;
 8004706:	4b31      	ldr	r3, [pc, #196]	; (80047cc <moveEnemyBullets+0x184>)
 8004708:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b2db      	uxtb	r3, r3
 8004712:	b25a      	sxtb	r2, r3
 8004714:	4b2d      	ldr	r3, [pc, #180]	; (80047cc <moveEnemyBullets+0x184>)
 8004716:	705a      	strb	r2, [r3, #1]
            }
        }
        E_AMMO_Y(i)++;
 8004718:	4a2c      	ldr	r2, [pc, #176]	; (80047cc <moveEnemyBullets+0x184>)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	4413      	add	r3, r2
 8004720:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	3301      	adds	r3, #1
 8004728:	b2db      	uxtb	r3, r3
 800472a:	b259      	sxtb	r1, r3
 800472c:	4a27      	ldr	r2, [pc, #156]	; (80047cc <moveEnemyBullets+0x184>)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	4413      	add	r3, r2
 8004734:	460a      	mov	r2, r1
 8004736:	70da      	strb	r2, [r3, #3]
        if (E_AMMO_Y(i) > SCREEN_HEIGHT - 1){											   // If the bullet left the screen, delete it
 8004738:	4a24      	ldr	r2, [pc, #144]	; (80047cc <moveEnemyBullets+0x184>)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004744:	2b3b      	cmp	r3, #59	; 0x3b
 8004746:	dd2b      	ble.n	80047a0 <moveEnemyBullets+0x158>
            for(int j = i; j < MAX_BULLETS - 1; j++){
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	607b      	str	r3, [r7, #4]
 800474c:	e01c      	b.n	8004788 <moveEnemyBullets+0x140>
            	E_AMMO_X(j) = E_AMMO_X(j+1);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3301      	adds	r3, #1
 8004752:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <moveEnemyBullets+0x184>)
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	4413      	add	r3, r2
 8004758:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <moveEnemyBullets+0x184>)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	4413      	add	r3, r2
 8004764:	460a      	mov	r2, r1
 8004766:	709a      	strb	r2, [r3, #2]
            	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3301      	adds	r3, #1
 800476c:	4a17      	ldr	r2, [pc, #92]	; (80047cc <moveEnemyBullets+0x184>)
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4413      	add	r3, r2
 8004772:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8004776:	4a15      	ldr	r2, [pc, #84]	; (80047cc <moveEnemyBullets+0x184>)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4413      	add	r3, r2
 800477e:	460a      	mov	r2, r1
 8004780:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_BULLETS - 1; j++){
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3301      	adds	r3, #1
 8004786:	607b      	str	r3, [r7, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b04      	cmp	r3, #4
 800478c:	dddf      	ble.n	800474e <moveEnemyBullets+0x106>
            }
            enemy_ammo.in_play--;
 800478e:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <moveEnemyBullets+0x184>)
 8004790:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b2db      	uxtb	r3, r3
 800479a:	b25a      	sxtb	r2, r3
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <moveEnemyBullets+0x184>)
 800479e:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < enemy_ammo.in_play; i++){										   // For every enemy bullet in play
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3301      	adds	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <moveEnemyBullets+0x184>)
 80047a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80047ac:	461a      	mov	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4293      	cmp	r3, r2
 80047b2:	f6ff af58 	blt.w	8004666 <moveEnemyBullets+0x1e>
        }
    }
    displayEnemyAmmo(LIGHT_BLUE);
 80047b6:	f24f 70db 	movw	r0, #63451	; 0xf7db
 80047ba:	f7ff fde5 	bl	8004388 <displayEnemyAmmo>
 80047be:	e000      	b.n	80047c2 <moveEnemyBullets+0x17a>
        return;
 80047c0:	bf00      	nop
}
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20002109 	.word	0x20002109
 80047cc:	20002184 	.word	0x20002184
 80047d0:	20000050 	.word	0x20000050
 80047d4:	20001eef 	.word	0x20001eef

080047d8 <send_Bullet>:
 * @brief if a bullet leaves the screen this function is called
 * if multiplayer is enabled, it sends this bullet's x_cord to the other console
 *
 * @param[in] bullet so the x cord can be send to the other console
 */
void send_Bullet(point bullet){
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	80b8      	strh	r0, [r7, #4]
	char *coord = "45B";
 80047e0:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <send_Bullet+0x3c>)
 80047e2:	60fb      	str	r3, [r7, #12]
    if(connected && bullet.y != -2){
 80047e4:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <send_Bullet+0x40>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00f      	beq.n	800480c <send_Bullet+0x34>
 80047ec:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80047f0:	f113 0f02 	cmn.w	r3, #2
 80047f4:	d00a      	beq.n	800480c <send_Bullet+0x34>
    	HAL_UART_Transmit(&huart2, (uint8_t *)coord, strlen(coord), 300);
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f7fb fcea 	bl	80001d0 <strlen>
 80047fc:	4603      	mov	r3, r0
 80047fe:	b29a      	uxth	r2, r3
 8004800:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004804:	68f9      	ldr	r1, [r7, #12]
 8004806:	4805      	ldr	r0, [pc, #20]	; (800481c <send_Bullet+0x44>)
 8004808:	f005 fa70 	bl	8009cec <HAL_UART_Transmit>
        }else{
            star_delay--;
        }
        */
    }
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	0800c438 	.word	0x0800c438
 8004818:	20002109 	.word	0x20002109
 800481c:	20001ff0 	.word	0x20001ff0

08004820 <hitComet>:
 * @brief if a bullet or the spaceship hits a comet, this is called to delete the correct comet (and bullet if applicable)
 *
 * @param[in] bul int: the index of the bullet that hit a comet, if the spaceship hit the comet 420 is given to this function
 * @param[in] com int: the index of the comet that has been hit
 */
void hitComet(int bul,int com){
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b087      	sub	sp, #28
 8004824:	af02      	add	r7, sp, #8
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
    money += COMET_COINS(com);
 800482a:	4a4b      	ldr	r2, [pc, #300]	; (8004958 <hitComet+0x138>)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8004836:	461a      	mov	r2, r3
 8004838:	4b48      	ldr	r3, [pc, #288]	; (800495c <hitComet+0x13c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4413      	add	r3, r2
 800483e:	4a47      	ldr	r2, [pc, #284]	; (800495c <hitComet+0x13c>)
 8004840:	6013      	str	r3, [r2, #0]
    Displ_FillArea(COMET_X(com) * 4, COMET_Y(com) * 4, COMET_SIZE(com) * 4, COMET_SIZE(com) * 4, DARK_GREY);
 8004842:	4a45      	ldr	r2, [pc, #276]	; (8004958 <hitComet+0x138>)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	785b      	ldrb	r3, [r3, #1]
 800484c:	b29b      	uxth	r3, r3
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	b298      	uxth	r0, r3
 8004852:	4a41      	ldr	r2, [pc, #260]	; (8004958 <hitComet+0x138>)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	789b      	ldrb	r3, [r3, #2]
 800485c:	b29b      	uxth	r3, r3
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	b299      	uxth	r1, r3
 8004862:	4a3d      	ldr	r2, [pc, #244]	; (8004958 <hitComet+0x138>)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800486e:	b29b      	uxth	r3, r3
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	b29a      	uxth	r2, r3
 8004874:	4c38      	ldr	r4, [pc, #224]	; (8004958 <hitComet+0x138>)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4423      	add	r3, r4
 800487c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004880:	b29b      	uxth	r3, r3
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	b29b      	uxth	r3, r3
 8004886:	f642 442c 	movw	r4, #11308	; 0x2c2c
 800488a:	9400      	str	r4, [sp, #0]
 800488c:	f000 fd92 	bl	80053b4 <Displ_FillArea>
    if(bul != 420){
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8004896:	d024      	beq.n	80048e2 <hitComet+0xc2>
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e01c      	b.n	80048d8 <hitComet+0xb8>
        	AMMO_X(j)= AMMO_X(j+1);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3301      	adds	r3, #1
 80048a2:	4a2f      	ldr	r2, [pc, #188]	; (8004960 <hitComet+0x140>)
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	4413      	add	r3, r2
 80048a8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80048ac:	4a2c      	ldr	r2, [pc, #176]	; (8004960 <hitComet+0x140>)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4413      	add	r3, r2
 80048b4:	460a      	mov	r2, r1
 80048b6:	709a      	strb	r2, [r3, #2]
        	AMMO_Y(j) = AMMO_Y(j+1);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	4a28      	ldr	r2, [pc, #160]	; (8004960 <hitComet+0x140>)
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4413      	add	r3, r2
 80048c2:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80048c6:	4a26      	ldr	r2, [pc, #152]	; (8004960 <hitComet+0x140>)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	4413      	add	r3, r2
 80048ce:	460a      	mov	r2, r1
 80048d0:	70da      	strb	r2, [r3, #3]
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3301      	adds	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b04      	cmp	r3, #4
 80048dc:	dddf      	ble.n	800489e <hitComet+0x7e>
        }
        powerups();
 80048de:	f000 f86f 	bl	80049c0 <powerups>
    }

    for(int j = com; j < MAX_COMETS - 1; j++){
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	e027      	b.n	8004938 <hitComet+0x118>
    	COMET_X(j) = COMET_X(j+1);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	3301      	adds	r3, #1
 80048ec:	4a1a      	ldr	r2, [pc, #104]	; (8004958 <hitComet+0x138>)
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	7859      	ldrb	r1, [r3, #1]
 80048f4:	4a18      	ldr	r2, [pc, #96]	; (8004958 <hitComet+0x138>)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	460a      	mov	r2, r1
 80048fe:	705a      	strb	r2, [r3, #1]
    	COMET_Y(j) = COMET_Y(j+1);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	3301      	adds	r3, #1
 8004904:	4a14      	ldr	r2, [pc, #80]	; (8004958 <hitComet+0x138>)
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	7899      	ldrb	r1, [r3, #2]
 800490c:	4a12      	ldr	r2, [pc, #72]	; (8004958 <hitComet+0x138>)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	460a      	mov	r2, r1
 8004916:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(j) = COMET_SIZE(j+1);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	3301      	adds	r3, #1
 800491c:	4a0e      	ldr	r2, [pc, #56]	; (8004958 <hitComet+0x138>)
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8004926:	4a0c      	ldr	r2, [pc, #48]	; (8004958 <hitComet+0x138>)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	460a      	mov	r2, r1
 8004930:	70da      	strb	r2, [r3, #3]
    for(int j = com; j < MAX_COMETS - 1; j++){
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	3301      	adds	r3, #1
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b08      	cmp	r3, #8
 800493c:	ddd4      	ble.n	80048e8 <hitComet+0xc8>
    }
    Comet.in_play--;
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <hitComet+0x138>)
 8004940:	f993 3000 	ldrsb.w	r3, [r3]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b2db      	uxtb	r3, r3
 800494a:	b25a      	sxtb	r2, r3
 800494c:	4b02      	ldr	r3, [pc, #8]	; (8004958 <hitComet+0x138>)
 800494e:	701a      	strb	r2, [r3, #0]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	bd90      	pop	{r4, r7, pc}
 8004958:	20002194 	.word	0x20002194
 800495c:	200021dc 	.word	0x200021dc
 8004960:	20002174 	.word	0x20002174

08004964 <beenHit>:
 * @fn void beenHit(void)
 * @brief if the spaceship has been hit by a comet or an enemy bullet, this function is called
 * decrements the lives, if lives is 0, the game is restarted in the notPlay state by calling initSpaceInvaders
 *
 */
void beenHit(){
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
    hit = 1;
 8004968:	4b10      	ldr	r3, [pc, #64]	; (80049ac <beenHit+0x48>)
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
    lives--;
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <beenHit+0x4c>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	3b01      	subs	r3, #1
 8004974:	b2da      	uxtb	r2, r3
 8004976:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <beenHit+0x4c>)
 8004978:	701a      	strb	r2, [r3, #0]
    if(lives <= 0){
 800497a:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <beenHit+0x4c>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d111      	bne.n	80049a6 <beenHit+0x42>
        play = 0;
 8004982:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <beenHit+0x50>)
 8004984:	2200      	movs	r2, #0
 8004986:	701a      	strb	r2, [r3, #0]
        hit = 0;
 8004988:	4b08      	ldr	r3, [pc, #32]	; (80049ac <beenHit+0x48>)
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)"L", strlen("L"), 300);
 800498e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004992:	2201      	movs	r2, #1
 8004994:	4908      	ldr	r1, [pc, #32]	; (80049b8 <beenHit+0x54>)
 8004996:	4809      	ldr	r0, [pc, #36]	; (80049bc <beenHit+0x58>)
 8004998:	f005 f9a8 	bl	8009cec <HAL_UART_Transmit>
        setGameState(loss);
 800499c:	2002      	movs	r0, #2
 800499e:	f7fe ffb3 	bl	8003908 <setGameState>
        initSpaceInvaders();
 80049a2:	f7fe ffc1 	bl	8003928 <initSpaceInvaders>
    }
}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20001eef 	.word	0x20001eef
 80049b0:	2000004e 	.word	0x2000004e
 80049b4:	2000004f 	.word	0x2000004f
 80049b8:	0800c43c 	.word	0x0800c43c
 80049bc:	20001ff0 	.word	0x20001ff0

080049c0 <powerups>:
/**
 * @fn void powerups(void)
 * @brief randomly gives a power-up when a comet has been hit
 *
 */
void powerups(){
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
    uint8_t powerupornot = RANDOM(0,3);
 80049c6:	f006 f9a9 	bl	800ad1c <rand>
 80049ca:	4603      	mov	r3, r0
 80049cc:	425a      	negs	r2, r3
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	f002 0203 	and.w	r2, r2, #3
 80049d6:	bf58      	it	pl
 80049d8:	4253      	negpl	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
    if(powerUp == 0 && powerupornot == 0){
 80049dc:	4b17      	ldr	r3, [pc, #92]	; (8004a3c <powerups+0x7c>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d127      	bne.n	8004a34 <powerups+0x74>
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d124      	bne.n	8004a34 <powerups+0x74>
        powerUp = RANDOM(1,3);
 80049ea:	f006 f997 	bl	800ad1c <rand>
 80049ee:	4602      	mov	r2, r0
 80049f0:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <powerups+0x80>)
 80049f2:	fb83 3102 	smull	r3, r1, r3, r2
 80049f6:	17d3      	asrs	r3, r2, #31
 80049f8:	1ac9      	subs	r1, r1, r3
 80049fa:	460b      	mov	r3, r1
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	440b      	add	r3, r1
 8004a00:	1ad1      	subs	r1, r2, r3
 8004a02:	b2cb      	uxtb	r3, r1
 8004a04:	3301      	adds	r3, #1
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <powerups+0x7c>)
 8004a0a:	701a      	strb	r2, [r3, #0]
        if(powerUp == 1){
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <powerups+0x7c>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d104      	bne.n	8004a1e <powerups+0x5e>
        	displayPowerup(RED);
 8004a14:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004a18:	f000 f816 	bl	8004a48 <displayPowerup>
 8004a1c:	e007      	b.n	8004a2e <powerups+0x6e>
        }
        else if(powerUp == 2){
 8004a1e:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <powerups+0x7c>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d103      	bne.n	8004a2e <powerups+0x6e>
        	displayPowerup(LIGHT_BLUE);
 8004a26:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8004a2a:	f000 f80d 	bl	8004a48 <displayPowerup>
        }
        powerUp_delay = MAX_DELAY_POWERUP;
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <powerups+0x84>)
 8004a30:	2205      	movs	r2, #5
 8004a32:	701a      	strb	r2, [r3, #0]
    }
}
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	200021e0 	.word	0x200021e0
 8004a40:	55555556 	.word	0x55555556
 8004a44:	200021d8 	.word	0x200021d8

08004a48 <displayPowerup>:
 * @fn void displayPowerup(uint16_t)
 * @brief displays the power-up on the screen
 *
 * @param[in] color uint16_t: the color to display the power-up with
 */
void displayPowerup(uint16_t color){
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	4603      	mov	r3, r0
 8004a50:	80fb      	strh	r3, [r7, #6]

    if(powerUp == 1){
 8004a52:	4b1f      	ldr	r3, [pc, #124]	; (8004ad0 <displayPowerup+0x88>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d11c      	bne.n	8004a94 <displayPowerup+0x4c>
		Displ_FillArea(SpaceShip.x * 4, 0, 4, 180, color);
 8004a5a:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <displayPowerup+0x8c>)
 8004a5c:	f993 3000 	ldrsb.w	r3, [r3]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	b298      	uxth	r0, r3
 8004a66:	88fb      	ldrh	r3, [r7, #6]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	23b4      	movs	r3, #180	; 0xb4
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	2100      	movs	r1, #0
 8004a70:	f000 fca0 	bl	80053b4 <Displ_FillArea>
		Displ_FillArea(SpaceShip.x * 4 + 1, 180, 2, 30, color);
 8004a74:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <displayPowerup+0x8c>)
 8004a76:	f993 3000 	ldrsb.w	r3, [r3]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3301      	adds	r3, #1
 8004a82:	b298      	uxth	r0, r3
 8004a84:	88fb      	ldrh	r3, [r7, #6]
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	231e      	movs	r3, #30
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	21b4      	movs	r1, #180	; 0xb4
 8004a8e:	f000 fc91 	bl	80053b4 <Displ_FillArea>
    }
    else if(powerUp == 2){
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
    }
}
 8004a92:	e019      	b.n	8004ac8 <displayPowerup+0x80>
    else if(powerUp == 2){
 8004a94:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <displayPowerup+0x88>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d115      	bne.n	8004ac8 <displayPowerup+0x80>
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
 8004a9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <displayPowerup+0x8c>)
 8004a9e:	f993 3000 	ldrsb.w	r3, [r3]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	b218      	sxth	r0, r3
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <displayPowerup+0x8c>)
 8004ab0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	3302      	adds	r3, #2
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	b219      	sxth	r1, r3
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	220e      	movs	r2, #14
 8004ac4:	f000 fd56 	bl	8005574 <Displ_drawCircle>
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	200021e0 	.word	0x200021e0
 8004ad4:	20000050 	.word	0x20000050

08004ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ade:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <HAL_MspInit+0x44>)
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	4a0e      	ldr	r2, [pc, #56]	; (8004b1c <HAL_MspInit+0x44>)
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	6193      	str	r3, [r2, #24]
 8004aea:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <HAL_MspInit+0x44>)
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	607b      	str	r3, [r7, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004af6:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_MspInit+0x44>)
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <HAL_MspInit+0x44>)
 8004afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b00:	61d3      	str	r3, [r2, #28]
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_MspInit+0x44>)
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40021000 	.word	0x40021000

08004b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	; 0x28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b28:	f107 0314 	add.w	r3, r7, #20
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	605a      	str	r2, [r3, #4]
 8004b32:	609a      	str	r2, [r3, #8]
 8004b34:	60da      	str	r2, [r3, #12]
 8004b36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <HAL_I2C_MspInit+0x7c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d127      	bne.n	8004b92 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b42:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <HAL_I2C_MspInit+0x80>)
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	4a16      	ldr	r2, [pc, #88]	; (8004ba0 <HAL_I2C_MspInit+0x80>)
 8004b48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b4c:	6153      	str	r3, [r2, #20]
 8004b4e:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <HAL_I2C_MspInit+0x80>)
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b56:	613b      	str	r3, [r7, #16]
 8004b58:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b5e:	2312      	movs	r3, #18
 8004b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b62:	2301      	movs	r3, #1
 8004b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b66:	2303      	movs	r3, #3
 8004b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004b6a:	2304      	movs	r3, #4
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b6e:	f107 0314 	add.w	r3, r7, #20
 8004b72:	4619      	mov	r1, r3
 8004b74:	480b      	ldr	r0, [pc, #44]	; (8004ba4 <HAL_I2C_MspInit+0x84>)
 8004b76:	f001 fd8d 	bl	8006694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004b7a:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_I2C_MspInit+0x80>)
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <HAL_I2C_MspInit+0x80>)
 8004b80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b84:	61d3      	str	r3, [r2, #28]
 8004b86:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <HAL_I2C_MspInit+0x80>)
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004b92:	bf00      	nop
 8004b94:	3728      	adds	r7, #40	; 0x28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40005800 	.word	0x40005800
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	48001400 	.word	0x48001400

08004ba8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb0:	f107 0314 	add.w	r3, r7, #20
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	60da      	str	r2, [r3, #12]
 8004bbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a2e      	ldr	r2, [pc, #184]	; (8004c80 <HAL_SPI_MspInit+0xd8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d156      	bne.n	8004c78 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004bca:	4b2e      	ldr	r3, [pc, #184]	; (8004c84 <HAL_SPI_MspInit+0xdc>)
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	4a2d      	ldr	r2, [pc, #180]	; (8004c84 <HAL_SPI_MspInit+0xdc>)
 8004bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bd4:	61d3      	str	r3, [r2, #28]
 8004bd6:	4b2b      	ldr	r3, [pc, #172]	; (8004c84 <HAL_SPI_MspInit+0xdc>)
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004be2:	4b28      	ldr	r3, [pc, #160]	; (8004c84 <HAL_SPI_MspInit+0xdc>)
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	4a27      	ldr	r2, [pc, #156]	; (8004c84 <HAL_SPI_MspInit+0xdc>)
 8004be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bec:	6153      	str	r3, [r2, #20]
 8004bee:	4b25      	ldr	r3, [pc, #148]	; (8004c84 <HAL_SPI_MspInit+0xdc>)
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8004bfa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c00:	2302      	movs	r3, #2
 8004c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c0c:	2305      	movs	r3, #5
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c10:	f107 0314 	add.w	r3, r7, #20
 8004c14:	4619      	mov	r1, r3
 8004c16:	481c      	ldr	r0, [pc, #112]	; (8004c88 <HAL_SPI_MspInit+0xe0>)
 8004c18:	f001 fd3c 	bl	8006694 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <HAL_SPI_MspInit+0xe4>)
 8004c1e:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <HAL_SPI_MspInit+0xe8>)
 8004c20:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c22:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <HAL_SPI_MspInit+0xe4>)
 8004c24:	2210      	movs	r2, #16
 8004c26:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c28:	4b18      	ldr	r3, [pc, #96]	; (8004c8c <HAL_SPI_MspInit+0xe4>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c2e:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <HAL_SPI_MspInit+0xe4>)
 8004c30:	2280      	movs	r2, #128	; 0x80
 8004c32:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c34:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <HAL_SPI_MspInit+0xe4>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c3a:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <HAL_SPI_MspInit+0xe4>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004c40:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <HAL_SPI_MspInit+0xe4>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <HAL_SPI_MspInit+0xe4>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004c4c:	480f      	ldr	r0, [pc, #60]	; (8004c8c <HAL_SPI_MspInit+0xe4>)
 8004c4e:	f001 fb12 	bl	8006276 <HAL_DMA_Init>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8004c58:	f7fe faec 	bl	8003234 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a0b      	ldr	r2, [pc, #44]	; (8004c8c <HAL_SPI_MspInit+0xe4>)
 8004c60:	655a      	str	r2, [r3, #84]	; 0x54
 8004c62:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <HAL_SPI_MspInit+0xe4>)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	2024      	movs	r0, #36	; 0x24
 8004c6e:	f001 facc 	bl	800620a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004c72:	2024      	movs	r0, #36	; 0x24
 8004c74:	f001 fae5 	bl	8006242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004c78:	bf00      	nop
 8004c7a:	3728      	adds	r7, #40	; 0x28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40003800 	.word	0x40003800
 8004c84:	40021000 	.word	0x40021000
 8004c88:	48000400 	.word	0x48000400
 8004c8c:	20001fac 	.word	0x20001fac
 8004c90:	40020058 	.word	0x40020058

08004c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	; 0x30
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c9c:	f107 031c 	add.w	r3, r7, #28
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
 8004ca6:	609a      	str	r2, [r3, #8]
 8004ca8:	60da      	str	r2, [r3, #12]
 8004caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a33      	ldr	r2, [pc, #204]	; (8004d80 <HAL_UART_MspInit+0xec>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d131      	bne.n	8004d1a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004cb6:	4b33      	ldr	r3, [pc, #204]	; (8004d84 <HAL_UART_MspInit+0xf0>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	4a32      	ldr	r2, [pc, #200]	; (8004d84 <HAL_UART_MspInit+0xf0>)
 8004cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc0:	61d3      	str	r3, [r2, #28]
 8004cc2:	4b30      	ldr	r3, [pc, #192]	; (8004d84 <HAL_UART_MspInit+0xf0>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cca:	61bb      	str	r3, [r7, #24]
 8004ccc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cce:	4b2d      	ldr	r3, [pc, #180]	; (8004d84 <HAL_UART_MspInit+0xf0>)
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	4a2c      	ldr	r2, [pc, #176]	; (8004d84 <HAL_UART_MspInit+0xf0>)
 8004cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cd8:	6153      	str	r3, [r2, #20]
 8004cda:	4b2a      	ldr	r3, [pc, #168]	; (8004d84 <HAL_UART_MspInit+0xf0>)
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004ce6:	230c      	movs	r3, #12
 8004ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cea:	2302      	movs	r3, #2
 8004cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004cf6:	2307      	movs	r3, #7
 8004cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cfa:	f107 031c 	add.w	r3, r7, #28
 8004cfe:	4619      	mov	r1, r3
 8004d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d04:	f001 fcc6 	bl	8006694 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	2026      	movs	r0, #38	; 0x26
 8004d0e:	f001 fa7c 	bl	800620a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d12:	2026      	movs	r0, #38	; 0x26
 8004d14:	f001 fa95 	bl	8006242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004d18:	e02d      	b.n	8004d76 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1a      	ldr	r2, [pc, #104]	; (8004d88 <HAL_UART_MspInit+0xf4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d128      	bne.n	8004d76 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004d24:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <HAL_UART_MspInit+0xf0>)
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <HAL_UART_MspInit+0xf0>)
 8004d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d2e:	61d3      	str	r3, [r2, #28]
 8004d30:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <HAL_UART_MspInit+0xf0>)
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d3c:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <HAL_UART_MspInit+0xf0>)
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	4a10      	ldr	r2, [pc, #64]	; (8004d84 <HAL_UART_MspInit+0xf0>)
 8004d42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d46:	6153      	str	r3, [r2, #20]
 8004d48:	4b0e      	ldr	r3, [pc, #56]	; (8004d84 <HAL_UART_MspInit+0xf0>)
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004d54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d62:	2303      	movs	r3, #3
 8004d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d66:	2307      	movs	r3, #7
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d6a:	f107 031c 	add.w	r3, r7, #28
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4806      	ldr	r0, [pc, #24]	; (8004d8c <HAL_UART_MspInit+0xf8>)
 8004d72:	f001 fc8f 	bl	8006694 <HAL_GPIO_Init>
}
 8004d76:	bf00      	nop
 8004d78:	3730      	adds	r7, #48	; 0x30
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40004400 	.word	0x40004400
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40004800 	.word	0x40004800
 8004d8c:	48000400 	.word	0x48000400

08004d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d94:	e7fe      	b.n	8004d94 <NMI_Handler+0x4>

08004d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d9a:	e7fe      	b.n	8004d9a <HardFault_Handler+0x4>

08004d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004da0:	e7fe      	b.n	8004da0 <MemManage_Handler+0x4>

08004da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004da2:	b480      	push	{r7}
 8004da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004da6:	e7fe      	b.n	8004da6 <BusFault_Handler+0x4>

08004da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dac:	e7fe      	b.n	8004dac <UsageFault_Handler+0x4>

08004dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dae:	b480      	push	{r7}
 8004db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004db2:	bf00      	nop
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dc0:	bf00      	nop
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ddc:	f001 f8f6 	bl	8005fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004de0:	bf00      	nop
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 8004de8:	2001      	movs	r0, #1
 8004dea:	f001 fdf5 	bl	80069d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004dee:	bf00      	nop
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004df8:	4802      	ldr	r0, [pc, #8]	; (8004e04 <DMA1_Channel5_IRQHandler+0x10>)
 8004dfa:	f001 fb59 	bl	80064b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004dfe:	bf00      	nop
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20001fac 	.word	0x20001fac

08004e08 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004e0c:	4802      	ldr	r0, [pc, #8]	; (8004e18 <SPI2_IRQHandler+0x10>)
 8004e0e:	f004 fc1b 	bl	8009648 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004e12:	bf00      	nop
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20001f48 	.word	0x20001f48

08004e1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char ch;
    uint16_t number;

    uint32_t isrflags = READ_REG(huart2.Instance->ISR);
 8004e22:	4b12      	ldr	r3, [pc, #72]	; (8004e6c <USART2_IRQHandler+0x50>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	60fb      	str	r3, [r7, #12]
    uint32_t crlits = READ_REG(huart2.Instance->CR1);
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <USART2_IRQHandler+0x50>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60bb      	str	r3, [r7, #8]

    if (((isrflags & USART_ISR_RXNE) != RESET) && ((crlits & USART_CR1_RXNEIE) != RESET)) {
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d010      	beq.n	8004e5e <USART2_IRQHandler+0x42>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00b      	beq.n	8004e5e <USART2_IRQHandler+0x42>
        huart2.Instance->ISR;
 8004e46:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <USART2_IRQHandler+0x50>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69db      	ldr	r3, [r3, #28]
        //number = huart2.Instance->RDR;
        ch = huart2.Instance->RDR;
 8004e4c:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <USART2_IRQHandler+0x50>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	71fb      	strb	r3, [r7, #7]
        //printf("%ul\r\n", number);
        //printf("%c\r\n", ch);
        addCharacterToArray(ch);
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fe fbdf 	bl	800361c <addCharacterToArray>
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e5e:	4803      	ldr	r0, [pc, #12]	; (8004e6c <USART2_IRQHandler+0x50>)
 8004e60:	f004 ffce 	bl	8009e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20001ff0 	.word	0x20001ff0

08004e70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 8004e74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004e78:	f001 fdae 	bl	80069d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8004e7c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004e80:	f001 fdaa 	bl	80069d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8004e84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004e88:	f001 fda6 	bl	80069d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e8c:	bf00      	nop
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return 1;
 8004e94:	2301      	movs	r3, #1
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <_kill>:

int _kill(int pid, int sig)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004eaa:	f005 fe49 	bl	800ab40 <__errno>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2216      	movs	r2, #22
 8004eb2:	601a      	str	r2, [r3, #0]
  return -1;
 8004eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <_exit>:

void _exit (int status)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff ffe7 	bl	8004ea0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ed2:	e7fe      	b.n	8004ed2 <_exit+0x12>

08004ed4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e00a      	b.n	8004efc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ee6:	f3af 8000 	nop.w
 8004eea:	4601      	mov	r1, r0
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	60ba      	str	r2, [r7, #8]
 8004ef2:	b2ca      	uxtb	r2, r1
 8004ef4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	dbf0      	blt.n	8004ee6 <_read+0x12>
  }

  return len;
 8004f04:	687b      	ldr	r3, [r7, #4]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <_close>:
  }
  return len;
}

int _close(int file)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f36:	605a      	str	r2, [r3, #4]
  return 0;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <_isatty>:

int _isatty(int file)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f4e:	2301      	movs	r3, #1
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
	...

08004f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f80:	4a14      	ldr	r2, [pc, #80]	; (8004fd4 <_sbrk+0x5c>)
 8004f82:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <_sbrk+0x60>)
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f8c:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <_sbrk+0x64>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f94:	4b11      	ldr	r3, [pc, #68]	; (8004fdc <_sbrk+0x64>)
 8004f96:	4a12      	ldr	r2, [pc, #72]	; (8004fe0 <_sbrk+0x68>)
 8004f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f9a:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <_sbrk+0x64>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d207      	bcs.n	8004fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fa8:	f005 fdca 	bl	800ab40 <__errno>
 8004fac:	4603      	mov	r3, r0
 8004fae:	220c      	movs	r2, #12
 8004fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb6:	e009      	b.n	8004fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fb8:	4b08      	ldr	r3, [pc, #32]	; (8004fdc <_sbrk+0x64>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fbe:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <_sbrk+0x64>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	4a05      	ldr	r2, [pc, #20]	; (8004fdc <_sbrk+0x64>)
 8004fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fca:	68fb      	ldr	r3, [r7, #12]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20004000 	.word	0x20004000
 8004fd8:	00000400 	.word	0x00000400
 8004fdc:	200021e4 	.word	0x200021e4
 8004fe0:	20002a10 	.word	0x20002a10

08004fe4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fe8:	4b06      	ldr	r3, [pc, #24]	; (8005004 <SystemInit+0x20>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	4a05      	ldr	r2, [pc, #20]	; (8005004 <SystemInit+0x20>)
 8004ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ff8:	bf00      	nop
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	e000ed00 	.word	0xe000ed00

08005008 <Displ_Select>:

/******************************************
 * @brief   enable display, disabling touch
 *          device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
    if (TOUCH_SPI==DISPL_SPI){                                                      // if SPI port shared (display <-> touch)
        if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {                   // if display not yet selected
 800500c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005014:	f001 fcb0 	bl	8006978 <HAL_GPIO_ReadPin>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d017      	beq.n	800504e <Displ_Select+0x46>
            HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch
 800501e:	2201      	movs	r2, #1
 8005020:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005024:	480b      	ldr	r0, [pc, #44]	; (8005054 <Displ_Select+0x4c>)
 8005026:	f001 fcbf 	bl	80069a8 <HAL_GPIO_WritePin>
            SET_DISPL_SPI_BAUDRATE;                                                 //change SPI port speed as per display needs
 800502a:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <Displ_Select+0x50>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	490a      	ldr	r1, [pc, #40]	; (8005058 <Displ_Select+0x50>)
 8005030:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8005034:	4013      	ands	r3, r2
 8005036:	600b      	str	r3, [r1, #0]
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <Displ_Select+0x50>)
 800503a:	4a07      	ldr	r2, [pc, #28]	; (8005058 <Displ_Select+0x50>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
 8005040:	2200      	movs	r2, #0
 8005042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005046:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800504a:	f001 fcad 	bl	80069a8 <HAL_GPIO_WritePin>
        }
    }
}
 800504e:	bf00      	nop
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	48000400 	.word	0x48000400
 8005058:	40003800 	.word	0x40003800

0800505c <Displ_Transmit>:
 * @PARAM   DC_Status   indicates if sending command or data
 *          data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6039      	str	r1, [r7, #0]
 8005064:	4611      	mov	r1, r2
 8005066:	461a      	mov	r2, r3
 8005068:	4603      	mov	r3, r0
 800506a:	71fb      	strb	r3, [r7, #7]
 800506c:	460b      	mov	r3, r1
 800506e:	80bb      	strh	r3, [r7, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	71bb      	strb	r3, [r7, #6]

    while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8005074:	bf00      	nop
 8005076:	4b23      	ldr	r3, [pc, #140]	; (8005104 <Displ_Transmit+0xa8>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0fa      	beq.n	8005076 <Displ_Transmit+0x1a>

    Displ_Select();
 8005080:	f7ff ffc2 	bl	8005008 <Displ_Select>
    HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	461a      	mov	r2, r3
 8005088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800508c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005090:	f001 fc8a 	bl	80069a8 <HAL_GPIO_WritePin>

    if (isTouchGFXBuffer){
 8005094:	79bb      	ldrb	r3, [r7, #6]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
        uint32_t *limit=(uint32_t*)(data+dataSize);
 800509a:	88bb      	ldrh	r3, [r7, #4]
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	4413      	add	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	e00b      	b.n	80050c0 <Displ_Transmit+0x64>
            *data32=__REV16(*data32);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	ba5b      	rev16	r3, r3
 80050b2:	60bb      	str	r3, [r7, #8]
  return result;
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	601a      	str	r2, [r3, #0]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	3304      	adds	r3, #4
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d3ef      	bcc.n	80050a8 <Displ_Transmit+0x4c>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
        Displ_SpiAvailable=0;
        HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
        if (dataSize<DISPL_DMA_CUTOFF) {
 80050c8:	88bb      	ldrh	r3, [r7, #4]
 80050ca:	2b13      	cmp	r3, #19
 80050cc:	d80d      	bhi.n	80050ea <Displ_Transmit+0x8e>
#endif //DISPLAY_SPI_DMA_MODE
            Displ_SpiAvailable=0;
 80050ce:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <Displ_Transmit+0xa8>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 80050d4:	88ba      	ldrh	r2, [r7, #4]
 80050d6:	f04f 33ff 	mov.w	r3, #4294967295
 80050da:	6839      	ldr	r1, [r7, #0]
 80050dc:	480a      	ldr	r0, [pc, #40]	; (8005108 <Displ_Transmit+0xac>)
 80050de:	f004 f84e 	bl	800917e <HAL_SPI_Transmit>
            Displ_SpiAvailable=1;
 80050e2:	4b08      	ldr	r3, [pc, #32]	; (8005104 <Displ_Transmit+0xa8>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	701a      	strb	r2, [r3, #0]
            Displ_SpiAvailable=0;
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
        }
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
    }
 80050e8:	e008      	b.n	80050fc <Displ_Transmit+0xa0>
            Displ_SpiAvailable=0;
 80050ea:	4b06      	ldr	r3, [pc, #24]	; (8005104 <Displ_Transmit+0xa8>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 80050f0:	88bb      	ldrh	r3, [r7, #4]
 80050f2:	461a      	mov	r2, r3
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	4804      	ldr	r0, [pc, #16]	; (8005108 <Displ_Transmit+0xac>)
 80050f8:	f004 f9b6 	bl	8009468 <HAL_SPI_Transmit_DMA>
    }
 80050fc:	bf00      	nop
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	2000005c 	.word	0x2000005c
 8005108:	20001f48 	.word	0x20001f48

0800510c <Displ_WriteCommand>:


/**********************************
 * @BRIEF   transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	71fb      	strb	r3, [r7, #7]
    Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8005116:	1df9      	adds	r1, r7, #7
 8005118:	2300      	movs	r3, #0
 800511a:	2201      	movs	r2, #1
 800511c:	2000      	movs	r0, #0
 800511e:	f7ff ff9d 	bl	800505c <Displ_Transmit>
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <Displ_WriteData>:
 * @BRIEF   transmit a set of data in a SPI_DATA format
 * @PARAM   data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	4613      	mov	r3, r2
 8005136:	71fb      	strb	r3, [r7, #7]
    if (buff_size==0) return;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d007      	beq.n	800514e <Displ_WriteData+0x24>
    Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	b29a      	uxth	r2, r3
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	68f9      	ldr	r1, [r7, #12]
 8005146:	2001      	movs	r0, #1
 8005148:	f7ff ff88 	bl	800505c <Displ_Transmit>
 800514c:	e000      	b.n	8005150 <Displ_WriteData+0x26>
    if (buff_size==0) return;
 800514e:	bf00      	nop
}
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <ILI9XXX_Init>:


/**********************************
 * @brief   ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
    Displ_Select();
 800515c:	f7ff ff54 	bl	8005008 <Displ_Select>

    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8005160:	2200      	movs	r2, #0
 8005162:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800516a:	f001 fc1d 	bl	80069a8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800516e:	2001      	movs	r0, #1
 8005170:	f000 ff4c 	bl	800600c <HAL_Delay>
    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8005174:	2201      	movs	r2, #1
 8005176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800517a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800517e:	f001 fc13 	bl	80069a8 <HAL_GPIO_WritePin>
    HAL_Delay(150);
 8005182:	2096      	movs	r0, #150	; 0x96
 8005184:	f000 ff42 	bl	800600c <HAL_Delay>
        Displ_WriteData(data,3);
    #endif
*/


    Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8005188:	203a      	movs	r0, #58	; 0x3a
 800518a:	f7ff ffbf 	bl	800510c <Displ_WriteCommand>
#ifdef Z_RGB666
    Displ_WriteData((uint8_t *)"\x66",1,0);     // RGB666
#endif
#ifdef Z_RGB565
    Displ_WriteData((uint8_t *)"\x55",1,0);     // RGB565
 800518e:	2200      	movs	r2, #0
 8005190:	2101      	movs	r1, #1
 8005192:	4810      	ldr	r0, [pc, #64]	; (80051d4 <ILI9XXX_Init+0x7c>)
 8005194:	f7ff ffc9 	bl	800512a <Displ_WriteData>
#endif
    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005198:	20b0      	movs	r0, #176	; 0xb0
 800519a:	f7ff ffb7 	bl	800510c <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 800519e:	2200      	movs	r2, #0
 80051a0:	2101      	movs	r1, #1
 80051a2:	480d      	ldr	r0, [pc, #52]	; (80051d8 <ILI9XXX_Init+0x80>)
 80051a4:	f7ff ffc1 	bl	800512a <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 80051a8:	20b0      	movs	r0, #176	; 0xb0
 80051aa:	f7ff ffaf 	bl	800510c <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 80051ae:	2200      	movs	r2, #0
 80051b0:	2101      	movs	r1, #1
 80051b2:	4809      	ldr	r0, [pc, #36]	; (80051d8 <ILI9XXX_Init+0x80>)
 80051b4:	f7ff ffb9 	bl	800512a <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 80051b8:	2011      	movs	r0, #17
 80051ba:	f7ff ffa7 	bl	800510c <Displ_WriteCommand>
    HAL_Delay(120);
 80051be:	2078      	movs	r0, #120	; 0x78
 80051c0:	f000 ff24 	bl	800600c <HAL_Delay>

    Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 80051c4:	2029      	movs	r0, #41	; 0x29
 80051c6:	f7ff ffa1 	bl	800510c <Displ_WriteCommand>
    HAL_Delay(5);
 80051ca:	2005      	movs	r0, #5
 80051cc:	f000 ff1e 	bl	800600c <HAL_Delay>

}
 80051d0:	bf00      	nop
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	0800c440 	.word	0x0800c440
 80051d8:	0800c444 	.word	0x0800c444

080051dc <Displ_SetAddressWindow>:
 *          information
 * @param  x1,y1,x2,y2 top left and bottom
 *                     right corner of the area
 *                     to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4604      	mov	r4, r0
 80051e4:	4608      	mov	r0, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	461a      	mov	r2, r3
 80051ea:	4623      	mov	r3, r4
 80051ec:	80fb      	strh	r3, [r7, #6]
 80051ee:	4603      	mov	r3, r0
 80051f0:	80bb      	strh	r3, [r7, #4]
 80051f2:	460b      	mov	r3, r1
 80051f4:	807b      	strh	r3, [r7, #2]
 80051f6:	4613      	mov	r3, r2
 80051f8:	803b      	strh	r3, [r7, #0]
    static uint8_t data[4];

    ((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 80051fa:	887b      	ldrh	r3, [r7, #2]
 80051fc:	061a      	lsls	r2, r3, #24
 80051fe:	887b      	ldrh	r3, [r7, #2]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005206:	431a      	orrs	r2, r3
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	b29b      	uxth	r3, r3
 800520e:	4313      	orrs	r3, r2
 8005210:	88fa      	ldrh	r2, [r7, #6]
 8005212:	0a12      	lsrs	r2, r2, #8
 8005214:	b292      	uxth	r2, r2
 8005216:	431a      	orrs	r2, r3
 8005218:	4b14      	ldr	r3, [pc, #80]	; (800526c <Displ_SetAddressWindow+0x90>)
 800521a:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 800521c:	202a      	movs	r0, #42	; 0x2a
 800521e:	f7ff ff75 	bl	800510c <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8005222:	2200      	movs	r2, #0
 8005224:	2104      	movs	r1, #4
 8005226:	4811      	ldr	r0, [pc, #68]	; (800526c <Displ_SetAddressWindow+0x90>)
 8005228:	f7ff ff7f 	bl	800512a <Displ_WriteData>

    ((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 800522c:	883b      	ldrh	r3, [r7, #0]
 800522e:	061a      	lsls	r2, r3, #24
 8005230:	883b      	ldrh	r3, [r7, #0]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005238:	431a      	orrs	r2, r3
 800523a:	88bb      	ldrh	r3, [r7, #4]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	b29b      	uxth	r3, r3
 8005240:	4313      	orrs	r3, r2
 8005242:	88ba      	ldrh	r2, [r7, #4]
 8005244:	0a12      	lsrs	r2, r2, #8
 8005246:	b292      	uxth	r2, r2
 8005248:	431a      	orrs	r2, r3
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <Displ_SetAddressWindow+0x90>)
 800524c:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 800524e:	202b      	movs	r0, #43	; 0x2b
 8005250:	f7ff ff5c 	bl	800510c <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8005254:	2200      	movs	r2, #0
 8005256:	2104      	movs	r1, #4
 8005258:	4804      	ldr	r0, [pc, #16]	; (800526c <Displ_SetAddressWindow+0x90>)
 800525a:	f7ff ff66 	bl	800512a <Displ_WriteData>
    Displ_WriteCommand(ILI9XXX_MEMWR);
 800525e:	202c      	movs	r0, #44	; 0x2c
 8005260:	f7ff ff54 	bl	800510c <Displ_WriteCommand>
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	bd90      	pop	{r4, r7, pc}
 800526c:	200029f0 	.word	0x200029f0

08005270 <Displ_Init>:

/*****************************************************
 * @brief               first display initialization.
 * @param   orientation display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	71fb      	strb	r3, [r7, #7]
    if (TOUCH_SPI==DISPL_SPI){                                                  // if touch and display share the same SPI port
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);      // unselect display (will be selected at writing time)
 800527a:	2201      	movs	r2, #1
 800527c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005284:	f001 fb90 	bl	80069a8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch (will be selected at writing time)
 8005288:	2201      	movs	r2, #1
 800528a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800528e:	4806      	ldr	r0, [pc, #24]	; (80052a8 <Displ_Init+0x38>)
 8005290:	f001 fb8a 	bl	80069a8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
        SET_DISPL_SPI_BAUDRATE;
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);    // select touch
        SET_TOUCH_SPI_BAUDRATE;
    }
    ILI9XXX_Init();
 8005294:	f7ff ff60 	bl	8005158 <ILI9XXX_Init>
    Displ_Orientation(orientation);
 8005298:	79fb      	ldrb	r3, [r7, #7]
 800529a:	4618      	mov	r0, r3
 800529c:	f000 f806 	bl	80052ac <Displ_Orientation>
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	48000400 	.word	0x48000400

080052ac <Displ_Orientation>:

/**********************************************
 * @brief       set orientation of the display
 * @param   m   orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	71fb      	strb	r3, [r7, #7]
    static uint8_t data[1];
    switch(orientation) {
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d837      	bhi.n	800532c <Displ_Orientation+0x80>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <Displ_Orientation+0x18>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052d5 	.word	0x080052d5
 80052c8:	080052eb 	.word	0x080052eb
 80052cc:	08005301 	.word	0x08005301
 80052d0:	08005317 	.word	0x08005317
        case Displ_Orientat_0:
            data[0]=ILI9XXX_MADCTL_0DEG;
 80052d4:	4b1d      	ldr	r3, [pc, #116]	; (800534c <Displ_Orientation+0xa0>)
 80052d6:	2288      	movs	r2, #136	; 0x88
 80052d8:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 80052da:	4b1d      	ldr	r3, [pc, #116]	; (8005350 <Displ_Orientation+0xa4>)
 80052dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80052e0:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 80052e2:	4b1c      	ldr	r3, [pc, #112]	; (8005354 <Displ_Orientation+0xa8>)
 80052e4:	22f0      	movs	r2, #240	; 0xf0
 80052e6:	801a      	strh	r2, [r3, #0]
            break;
 80052e8:	e020      	b.n	800532c <Displ_Orientation+0x80>
        case Displ_Orientat_90:
            data[0]=ILI9XXX_MADCTL_90DEG;
 80052ea:	4b18      	ldr	r3, [pc, #96]	; (800534c <Displ_Orientation+0xa0>)
 80052ec:	22e8      	movs	r2, #232	; 0xe8
 80052ee:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 80052f0:	4b17      	ldr	r3, [pc, #92]	; (8005350 <Displ_Orientation+0xa4>)
 80052f2:	22f0      	movs	r2, #240	; 0xf0
 80052f4:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 80052f6:	4b17      	ldr	r3, [pc, #92]	; (8005354 <Displ_Orientation+0xa8>)
 80052f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80052fc:	801a      	strh	r2, [r3, #0]
            break;
 80052fe:	e015      	b.n	800532c <Displ_Orientation+0x80>
        case Displ_Orientat_180:
            data[0]=ILI9XXX_MADCTL_180DEG;
 8005300:	4b12      	ldr	r3, [pc, #72]	; (800534c <Displ_Orientation+0xa0>)
 8005302:	2248      	movs	r2, #72	; 0x48
 8005304:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <Displ_Orientation+0xa4>)
 8005308:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800530c:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 800530e:	4b11      	ldr	r3, [pc, #68]	; (8005354 <Displ_Orientation+0xa8>)
 8005310:	22f0      	movs	r2, #240	; 0xf0
 8005312:	801a      	strh	r2, [r3, #0]
            break;
 8005314:	e00a      	b.n	800532c <Displ_Orientation+0x80>
        case Displ_Orientat_270:
            data[0]=ILI9XXX_MADCTL_270DEG;
 8005316:	4b0d      	ldr	r3, [pc, #52]	; (800534c <Displ_Orientation+0xa0>)
 8005318:	2228      	movs	r2, #40	; 0x28
 800531a:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <Displ_Orientation+0xa4>)
 800531e:	22f0      	movs	r2, #240	; 0xf0
 8005320:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 8005322:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <Displ_Orientation+0xa8>)
 8005324:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005328:	801a      	strh	r2, [r3, #0]
            break;
 800532a:	bf00      	nop
    }
    Displ_WriteCommand(ILI9XXX_MADCTL);
 800532c:	2036      	movs	r0, #54	; 0x36
 800532e:	f7ff feed 	bl	800510c <Displ_WriteCommand>
    Displ_WriteData(data,1,0);
 8005332:	2200      	movs	r2, #0
 8005334:	2101      	movs	r1, #1
 8005336:	4805      	ldr	r0, [pc, #20]	; (800534c <Displ_Orientation+0xa0>)
 8005338:	f7ff fef7 	bl	800512a <Displ_WriteData>
    current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 800533c:	4a06      	ldr	r2, [pc, #24]	; (8005358 <Displ_Orientation+0xac>)
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	7013      	strb	r3, [r2, #0]
}
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	200029f4 	.word	0x200029f4
 8005350:	200021ec 	.word	0x200021ec
 8005354:	200021ea 	.word	0x200021ea
 8005358:	200021e8 	.word	0x200021e8

0800535c <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a05      	ldr	r2, [pc, #20]	; (8005380 <HAL_SPI_ErrorCallback+0x24>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d102      	bne.n	8005374 <HAL_SPI_ErrorCallback+0x18>
        Displ_SpiAvailable=1;
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <HAL_SPI_ErrorCallback+0x28>)
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
    }
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40003800 	.word	0x40003800
 8005384:	2000005c 	.word	0x2000005c

08005388 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a05      	ldr	r2, [pc, #20]	; (80053ac <HAL_SPI_TxCpltCallback+0x24>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d102      	bne.n	80053a0 <HAL_SPI_TxCpltCallback+0x18>
        Displ_SpiAvailable=1;
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <HAL_SPI_TxCpltCallback+0x28>)
 800539c:	2201      	movs	r2, #1
 800539e:	701a      	strb	r2, [r3, #0]
    #ifdef DISPLAY_USING_TOUCHGFX
        DisplayDriver_TransferCompleteCallback();
    #endif

    }
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	40003800 	.word	0x40003800
 80053b0:	2000005c 	.word	0x2000005c

080053b4 <Displ_FillArea>:
/*****************************
 * @brief   fill a rectangle with a color
 * @param   x, y    top left corner of the rectangle
 *          w, h    width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b08b      	sub	sp, #44	; 0x2c
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4604      	mov	r4, r0
 80053bc:	4608      	mov	r0, r1
 80053be:	4611      	mov	r1, r2
 80053c0:	461a      	mov	r2, r3
 80053c2:	4623      	mov	r3, r4
 80053c4:	80fb      	strh	r3, [r7, #6]
 80053c6:	4603      	mov	r3, r0
 80053c8:	80bb      	strh	r3, [r7, #4]
 80053ca:	460b      	mov	r3, r1
 80053cc:	807b      	strh	r3, [r7, #2]
 80053ce:	4613      	mov	r3, r2
 80053d0:	803b      	strh	r3, [r7, #0]
 * -    swap buffers
 */

    uint32_t k,x1,y1,area,times;

    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80053d2:	88fb      	ldrh	r3, [r7, #6]
 80053d4:	4a4f      	ldr	r2, [pc, #316]	; (8005514 <Displ_FillArea+0x160>)
 80053d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80053da:	4293      	cmp	r3, r2
 80053dc:	f280 8096 	bge.w	800550c <Displ_FillArea+0x158>
 80053e0:	88bb      	ldrh	r3, [r7, #4]
 80053e2:	4a4d      	ldr	r2, [pc, #308]	; (8005518 <Displ_FillArea+0x164>)
 80053e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80053e8:	4293      	cmp	r3, r2
 80053ea:	f280 808f 	bge.w	800550c <Displ_FillArea+0x158>
 80053ee:	887b      	ldrh	r3, [r7, #2]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 808b 	beq.w	800550c <Displ_FillArea+0x158>
 80053f6:	883b      	ldrh	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 8087 	beq.w	800550c <Displ_FillArea+0x158>

    x1=x + w - 1;
 80053fe:	88fa      	ldrh	r2, [r7, #6]
 8005400:	887b      	ldrh	r3, [r7, #2]
 8005402:	4413      	add	r3, r2
 8005404:	3b01      	subs	r3, #1
 8005406:	623b      	str	r3, [r7, #32]
    if (x1 > _width) {
 8005408:	4b42      	ldr	r3, [pc, #264]	; (8005514 <Displ_FillArea+0x160>)
 800540a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800540e:	461a      	mov	r2, r3
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	4293      	cmp	r3, r2
 8005414:	d903      	bls.n	800541e <Displ_FillArea+0x6a>
        x1=_width;
 8005416:	4b3f      	ldr	r3, [pc, #252]	; (8005514 <Displ_FillArea+0x160>)
 8005418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800541c:	623b      	str	r3, [r7, #32]
    }

    y1=y + h - 1;
 800541e:	88ba      	ldrh	r2, [r7, #4]
 8005420:	883b      	ldrh	r3, [r7, #0]
 8005422:	4413      	add	r3, r2
 8005424:	3b01      	subs	r3, #1
 8005426:	61fb      	str	r3, [r7, #28]
    if (y1 > _height) {
 8005428:	4b3b      	ldr	r3, [pc, #236]	; (8005518 <Displ_FillArea+0x164>)
 800542a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800542e:	461a      	mov	r2, r3
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	4293      	cmp	r3, r2
 8005434:	d903      	bls.n	800543e <Displ_FillArea+0x8a>
        y1=_height;
 8005436:	4b38      	ldr	r3, [pc, #224]	; (8005518 <Displ_FillArea+0x164>)
 8005438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800543c:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

    uint32_t data32;

    data32=(color>>8) | (color<<8) | (color<<24);   // supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 800543e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005440:	0a1b      	lsrs	r3, r3, #8
 8005442:	b29b      	uxth	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	431a      	orrs	r2, r3
 800544c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800544e:	061b      	lsls	r3, r3, #24
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
    area=((y1-y+1)*(x1-x+1));                       // area to fill in 16bit pixels
 8005454:	88bb      	ldrh	r3, [r7, #4]
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	3301      	adds	r3, #1
 800545c:	88fa      	ldrh	r2, [r7, #6]
 800545e:	6a39      	ldr	r1, [r7, #32]
 8005460:	1a8a      	subs	r2, r1, r2
 8005462:	3201      	adds	r2, #1
 8005464:	fb02 f303 	mul.w	r3, r2, r3
 8005468:	60fb      	str	r3, [r7, #12]
    uint32_t *buf32Pos=(uint32_t *)dispBuffer;      //dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 800546a:	4b2c      	ldr	r3, [pc, #176]	; (800551c <Displ_FillArea+0x168>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	617b      	str	r3, [r7, #20]
    if (area<(SIZEBUF>>1))                          // if area is smaller than dispBuffer
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005476:	d204      	bcs.n	8005482 <Displ_FillArea+0xce>
        times=(area>>1)+1;                          // number of times data32 has to be loaded into buffer
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	3301      	adds	r3, #1
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	e002      	b.n	8005488 <Displ_FillArea+0xd4>
    else
        times=(SIZEBUF>>2);                         // dispBuffer size as 32bit-words
 8005482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005486:	61bb      	str	r3, [r7, #24]
    for (k = 0; k < times; k++)
 8005488:	2300      	movs	r3, #0
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
 800548c:	e007      	b.n	800549e <Displ_FillArea+0xea>
        *(buf32Pos++)=data32;                       // loads buffer moving 32bit-words
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	1d1a      	adds	r2, r3, #4
 8005492:	617a      	str	r2, [r7, #20]
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	601a      	str	r2, [r3, #0]
    for (k = 0; k < times; k++)
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	3301      	adds	r3, #1
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
 800549e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d3f3      	bcc.n	800548e <Displ_FillArea+0xda>
    }
    datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
    Displ_SetAddressWindow(x, y, x1, y1);
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	88b9      	ldrh	r1, [r7, #4]
 80054b0:	88f8      	ldrh	r0, [r7, #6]
 80054b2:	f7ff fe93 	bl	80051dc <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
    times=(area>>(BUFLEVEL-1));                     //how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	0a5b      	lsrs	r3, r3, #9
 80054ba:	61bb      	str	r3, [r7, #24]
    for  (k=0;k<times;k++) {
 80054bc:	2300      	movs	r3, #0
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
 80054c0:	e00a      	b.n	80054d8 <Displ_FillArea+0x124>
        Displ_WriteData(dispBuffer,SIZEBUF,0);
 80054c2:	4b16      	ldr	r3, [pc, #88]	; (800551c <Displ_FillArea+0x168>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff fe2c 	bl	800512a <Displ_WriteData>
    for  (k=0;k<times;k++) {
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	3301      	adds	r3, #1
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
 80054d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d3f0      	bcc.n	80054c2 <Displ_FillArea+0x10e>
    }
    Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 80054e0:	4b0e      	ldr	r3, [pc, #56]	; (800551c <Displ_FillArea+0x168>)
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	005a      	lsls	r2, r3, #1
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	029b      	lsls	r3, r3, #10
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2200      	movs	r2, #0
 80054f0:	4619      	mov	r1, r3
 80054f2:	f7ff fe1a 	bl	800512a <Displ_WriteData>
    }
    Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80054f6:	4b09      	ldr	r3, [pc, #36]	; (800551c <Displ_FillArea+0x168>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a09      	ldr	r2, [pc, #36]	; (8005520 <Displ_FillArea+0x16c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <Displ_FillArea+0x150>
 8005500:	4b08      	ldr	r3, [pc, #32]	; (8005524 <Displ_FillArea+0x170>)
 8005502:	e000      	b.n	8005506 <Displ_FillArea+0x152>
 8005504:	4b06      	ldr	r3, [pc, #24]	; (8005520 <Displ_FillArea+0x16c>)
 8005506:	4a05      	ldr	r2, [pc, #20]	; (800551c <Displ_FillArea+0x168>)
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	e000      	b.n	800550e <Displ_FillArea+0x15a>
    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 800550c:	bf00      	nop

}
 800550e:	372c      	adds	r7, #44	; 0x2c
 8005510:	46bd      	mov	sp, r7
 8005512:	bd90      	pop	{r4, r7, pc}
 8005514:	200021ea 	.word	0x200021ea
 8005518:	200021ec 	.word	0x200021ec
 800551c:	20000060 	.word	0x20000060
 8005520:	200021f0 	.word	0x200021f0
 8005524:	200025f0 	.word	0x200025f0

08005528 <Displ_Pixel>:
/***********************
 * @brief   print a single pixel
 * @params  x, y    pixel position on display
 *          color   ... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af02      	add	r7, sp, #8
 800552e:	4603      	mov	r3, r0
 8005530:	80fb      	strh	r3, [r7, #6]
 8005532:	460b      	mov	r3, r1
 8005534:	80bb      	strh	r3, [r7, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800553a:	88fb      	ldrh	r3, [r7, #6]
 800553c:	4a0b      	ldr	r2, [pc, #44]	; (800556c <Displ_Pixel+0x44>)
 800553e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005542:	4293      	cmp	r3, r2
 8005544:	da0e      	bge.n	8005564 <Displ_Pixel+0x3c>
 8005546:	88bb      	ldrh	r3, [r7, #4]
 8005548:	4a09      	ldr	r2, [pc, #36]	; (8005570 <Displ_Pixel+0x48>)
 800554a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800554e:	4293      	cmp	r3, r2
 8005550:	da08      	bge.n	8005564 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8005552:	88b9      	ldrh	r1, [r7, #4]
 8005554:	88f8      	ldrh	r0, [r7, #6]
 8005556:	887b      	ldrh	r3, [r7, #2]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	2301      	movs	r3, #1
 800555c:	2201      	movs	r2, #1
 800555e:	f7ff ff29 	bl	80053b4 <Displ_FillArea>
 8005562:	e000      	b.n	8005566 <Displ_Pixel+0x3e>
        return;
 8005564:	bf00      	nop

}
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	200021ea 	.word	0x200021ea
 8005570:	200021ec 	.word	0x200021ec

08005574 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8005574:	b590      	push	{r4, r7, lr}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	4604      	mov	r4, r0
 800557c:	4608      	mov	r0, r1
 800557e:	4611      	mov	r1, r2
 8005580:	461a      	mov	r2, r3
 8005582:	4623      	mov	r3, r4
 8005584:	80fb      	strh	r3, [r7, #6]
 8005586:	4603      	mov	r3, r0
 8005588:	80bb      	strh	r3, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	807b      	strh	r3, [r7, #2]
 800558e:	4613      	mov	r3, r2
 8005590:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8005592:	887b      	ldrh	r3, [r7, #2]
 8005594:	f1c3 0301 	rsb	r3, r3, #1
 8005598:	b29b      	uxth	r3, r3
 800559a:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800559c:	2301      	movs	r3, #1
 800559e:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80055a0:	887b      	ldrh	r3, [r7, #2]
 80055a2:	461a      	mov	r2, r3
 80055a4:	03d2      	lsls	r2, r2, #15
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 80055b2:	887b      	ldrh	r3, [r7, #2]
 80055b4:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 80055b6:	88f8      	ldrh	r0, [r7, #6]
 80055b8:	88ba      	ldrh	r2, [r7, #4]
 80055ba:	887b      	ldrh	r3, [r7, #2]
 80055bc:	4413      	add	r3, r2
 80055be:	b29b      	uxth	r3, r3
 80055c0:	883a      	ldrh	r2, [r7, #0]
 80055c2:	4619      	mov	r1, r3
 80055c4:	f7ff ffb0 	bl	8005528 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 80055c8:	88f8      	ldrh	r0, [r7, #6]
 80055ca:	88ba      	ldrh	r2, [r7, #4]
 80055cc:	887b      	ldrh	r3, [r7, #2]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	883a      	ldrh	r2, [r7, #0]
 80055d4:	4619      	mov	r1, r3
 80055d6:	f7ff ffa7 	bl	8005528 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 80055da:	88fa      	ldrh	r2, [r7, #6]
 80055dc:	887b      	ldrh	r3, [r7, #2]
 80055de:	4413      	add	r3, r2
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	88b9      	ldrh	r1, [r7, #4]
 80055e4:	883a      	ldrh	r2, [r7, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff ff9e 	bl	8005528 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 80055ec:	88fa      	ldrh	r2, [r7, #6]
 80055ee:	887b      	ldrh	r3, [r7, #2]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	88b9      	ldrh	r1, [r7, #4]
 80055f6:	883a      	ldrh	r2, [r7, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff ff95 	bl	8005528 <Displ_Pixel>

    while (x<y) {
 80055fe:	e081      	b.n	8005704 <Displ_drawCircle+0x190>
        if (f >= 0) {
 8005600:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005604:	2b00      	cmp	r3, #0
 8005606:	db0e      	blt.n	8005626 <Displ_drawCircle+0xb2>
            y--;
 8005608:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800560c:	b29b      	uxth	r3, r3
 800560e:	3b01      	subs	r3, #1
 8005610:	b29b      	uxth	r3, r3
 8005612:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8005614:	8a7b      	ldrh	r3, [r7, #18]
 8005616:	3302      	adds	r3, #2
 8005618:	b29b      	uxth	r3, r3
 800561a:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800561c:	8afa      	ldrh	r2, [r7, #22]
 800561e:	8a7b      	ldrh	r3, [r7, #18]
 8005620:	4413      	add	r3, r2
 8005622:	b29b      	uxth	r3, r3
 8005624:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8005626:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800562a:	b29b      	uxth	r3, r3
 800562c:	3301      	adds	r3, #1
 800562e:	b29b      	uxth	r3, r3
 8005630:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8005632:	8abb      	ldrh	r3, [r7, #20]
 8005634:	3302      	adds	r3, #2
 8005636:	b29b      	uxth	r3, r3
 8005638:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800563a:	8afa      	ldrh	r2, [r7, #22]
 800563c:	8abb      	ldrh	r3, [r7, #20]
 800563e:	4413      	add	r3, r2
 8005640:	b29b      	uxth	r3, r3
 8005642:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8005644:	88fa      	ldrh	r2, [r7, #6]
 8005646:	8a3b      	ldrh	r3, [r7, #16]
 8005648:	4413      	add	r3, r2
 800564a:	b298      	uxth	r0, r3
 800564c:	88ba      	ldrh	r2, [r7, #4]
 800564e:	89fb      	ldrh	r3, [r7, #14]
 8005650:	4413      	add	r3, r2
 8005652:	b29b      	uxth	r3, r3
 8005654:	883a      	ldrh	r2, [r7, #0]
 8005656:	4619      	mov	r1, r3
 8005658:	f7ff ff66 	bl	8005528 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	8a3b      	ldrh	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	b298      	uxth	r0, r3
 8005664:	88ba      	ldrh	r2, [r7, #4]
 8005666:	89fb      	ldrh	r3, [r7, #14]
 8005668:	4413      	add	r3, r2
 800566a:	b29b      	uxth	r3, r3
 800566c:	883a      	ldrh	r2, [r7, #0]
 800566e:	4619      	mov	r1, r3
 8005670:	f7ff ff5a 	bl	8005528 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8005674:	88fa      	ldrh	r2, [r7, #6]
 8005676:	8a3b      	ldrh	r3, [r7, #16]
 8005678:	4413      	add	r3, r2
 800567a:	b298      	uxth	r0, r3
 800567c:	88ba      	ldrh	r2, [r7, #4]
 800567e:	89fb      	ldrh	r3, [r7, #14]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	b29b      	uxth	r3, r3
 8005684:	883a      	ldrh	r2, [r7, #0]
 8005686:	4619      	mov	r1, r3
 8005688:	f7ff ff4e 	bl	8005528 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 800568c:	88fa      	ldrh	r2, [r7, #6]
 800568e:	8a3b      	ldrh	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	b298      	uxth	r0, r3
 8005694:	88ba      	ldrh	r2, [r7, #4]
 8005696:	89fb      	ldrh	r3, [r7, #14]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	b29b      	uxth	r3, r3
 800569c:	883a      	ldrh	r2, [r7, #0]
 800569e:	4619      	mov	r1, r3
 80056a0:	f7ff ff42 	bl	8005528 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	89fb      	ldrh	r3, [r7, #14]
 80056a8:	4413      	add	r3, r2
 80056aa:	b298      	uxth	r0, r3
 80056ac:	88ba      	ldrh	r2, [r7, #4]
 80056ae:	8a3b      	ldrh	r3, [r7, #16]
 80056b0:	4413      	add	r3, r2
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	883a      	ldrh	r2, [r7, #0]
 80056b6:	4619      	mov	r1, r3
 80056b8:	f7ff ff36 	bl	8005528 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 80056bc:	88fa      	ldrh	r2, [r7, #6]
 80056be:	89fb      	ldrh	r3, [r7, #14]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	b298      	uxth	r0, r3
 80056c4:	88ba      	ldrh	r2, [r7, #4]
 80056c6:	8a3b      	ldrh	r3, [r7, #16]
 80056c8:	4413      	add	r3, r2
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	883a      	ldrh	r2, [r7, #0]
 80056ce:	4619      	mov	r1, r3
 80056d0:	f7ff ff2a 	bl	8005528 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 80056d4:	88fa      	ldrh	r2, [r7, #6]
 80056d6:	89fb      	ldrh	r3, [r7, #14]
 80056d8:	4413      	add	r3, r2
 80056da:	b298      	uxth	r0, r3
 80056dc:	88ba      	ldrh	r2, [r7, #4]
 80056de:	8a3b      	ldrh	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	883a      	ldrh	r2, [r7, #0]
 80056e6:	4619      	mov	r1, r3
 80056e8:	f7ff ff1e 	bl	8005528 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 80056ec:	88fa      	ldrh	r2, [r7, #6]
 80056ee:	89fb      	ldrh	r3, [r7, #14]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	b298      	uxth	r0, r3
 80056f4:	88ba      	ldrh	r2, [r7, #4]
 80056f6:	8a3b      	ldrh	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	883a      	ldrh	r2, [r7, #0]
 80056fe:	4619      	mov	r1, r3
 8005700:	f7ff ff12 	bl	8005528 <Displ_Pixel>
    while (x<y) {
 8005704:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005708:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800570c:	429a      	cmp	r2, r3
 800570e:	f6ff af77 	blt.w	8005600 <Displ_drawCircle+0x8c>
    }
}
 8005712:	bf00      	nop
 8005714:	bf00      	nop
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	bd90      	pop	{r4, r7, pc}

0800571c <Displ_CLS>:

/*****************
 * @brief   clear display with a color.
 * @param   bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af02      	add	r7, sp, #8
 8005722:	4603      	mov	r3, r0
 8005724:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(0, 0, _width, _height, bgcolor);
 8005726:	4b09      	ldr	r3, [pc, #36]	; (800574c <Displ_CLS+0x30>)
 8005728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800572c:	b29a      	uxth	r2, r3
 800572e:	4b08      	ldr	r3, [pc, #32]	; (8005750 <Displ_CLS+0x34>)
 8005730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005734:	b299      	uxth	r1, r3
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	460b      	mov	r3, r1
 800573c:	2100      	movs	r1, #0
 800573e:	2000      	movs	r0, #0
 8005740:	f7ff fe38 	bl	80053b4 <Displ_FillArea>
}
 8005744:	bf00      	nop
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	200021ea 	.word	0x200021ea
 8005750:	200021ec 	.word	0x200021ec

08005754 <Displ_Line>:

/************************************************************************
 * @brief   draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8005754:	b590      	push	{r4, r7, lr}
 8005756:	b08b      	sub	sp, #44	; 0x2c
 8005758:	af02      	add	r7, sp, #8
 800575a:	4604      	mov	r4, r0
 800575c:	4608      	mov	r0, r1
 800575e:	4611      	mov	r1, r2
 8005760:	461a      	mov	r2, r3
 8005762:	4623      	mov	r3, r4
 8005764:	80fb      	strh	r3, [r7, #6]
 8005766:	4603      	mov	r3, r0
 8005768:	80bb      	strh	r3, [r7, #4]
 800576a:	460b      	mov	r3, r1
 800576c:	807b      	strh	r3, [r7, #2]
 800576e:	4613      	mov	r3, r2
 8005770:	803b      	strh	r3, [r7, #0]
    int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8005772:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005776:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800577a:	429a      	cmp	r2, r3
 800577c:	d123      	bne.n	80057c6 <Displ_Line+0x72>
        if (y1>y0){
 800577e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005782:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005786:	429a      	cmp	r2, r3
 8005788:	dd0e      	ble.n	80057a8 <Displ_Line+0x54>
            Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 800578a:	88f8      	ldrh	r0, [r7, #6]
 800578c:	88b9      	ldrh	r1, [r7, #4]
 800578e:	883a      	ldrh	r2, [r7, #0]
 8005790:	88bb      	ldrh	r3, [r7, #4]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	b29b      	uxth	r3, r3
 8005796:	3301      	adds	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	4613      	mov	r3, r2
 80057a0:	2201      	movs	r2, #1
 80057a2:	f7ff fe07 	bl	80053b4 <Displ_FillArea>
        }
        else {
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
        }
        return;
 80057a6:	e103      	b.n	80059b0 <Displ_Line+0x25c>
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 80057a8:	88f8      	ldrh	r0, [r7, #6]
 80057aa:	8839      	ldrh	r1, [r7, #0]
 80057ac:	88ba      	ldrh	r2, [r7, #4]
 80057ae:	883b      	ldrh	r3, [r7, #0]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3301      	adds	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	4613      	mov	r3, r2
 80057be:	2201      	movs	r2, #1
 80057c0:	f7ff fdf8 	bl	80053b4 <Displ_FillArea>
        return;
 80057c4:	e0f4      	b.n	80059b0 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 80057c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80057ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d121      	bne.n	8005816 <Displ_Line+0xc2>
        if (x1>x0)
 80057d2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80057d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057da:	429a      	cmp	r2, r3
 80057dc:	dd0d      	ble.n	80057fa <Displ_Line+0xa6>
            Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 80057de:	88f8      	ldrh	r0, [r7, #6]
 80057e0:	88b9      	ldrh	r1, [r7, #4]
 80057e2:	887a      	ldrh	r2, [r7, #2]
 80057e4:	88fb      	ldrh	r3, [r7, #6]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3301      	adds	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	2301      	movs	r3, #1
 80057f4:	f7ff fdde 	bl	80053b4 <Displ_FillArea>
        else
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
        return;
 80057f8:	e0da      	b.n	80059b0 <Displ_Line+0x25c>
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 80057fa:	8878      	ldrh	r0, [r7, #2]
 80057fc:	8839      	ldrh	r1, [r7, #0]
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	887b      	ldrh	r3, [r7, #2]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	b29b      	uxth	r3, r3
 8005806:	3301      	adds	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	2301      	movs	r3, #1
 8005810:	f7ff fdd0 	bl	80053b4 <Displ_FillArea>
        return;
 8005814:	e0cc      	b.n	80059b0 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8005816:	f9b7 2000 	ldrsh.w	r2, [r7]
 800581a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800581e:	429a      	cmp	r2, r3
 8005820:	dd05      	ble.n	800582e <Displ_Line+0xda>
 8005822:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005826:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800582a:	1ad2      	subs	r2, r2, r3
 800582c:	e004      	b.n	8005838 <Displ_Line+0xe4>
 800582e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005832:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005836:	1ad2      	subs	r2, r2, r3
 8005838:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800583c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005840:	4299      	cmp	r1, r3
 8005842:	dd05      	ble.n	8005850 <Displ_Line+0xfc>
 8005844:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800584c:	1acb      	subs	r3, r1, r3
 800584e:	e004      	b.n	800585a <Displ_Line+0x106>
 8005850:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8005854:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005858:	1acb      	subs	r3, r1, r3
 800585a:	429a      	cmp	r2, r3
 800585c:	bfcc      	ite	gt
 800585e:	2301      	movgt	r3, #1
 8005860:	2300      	movle	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8005866:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 800586e:	88fb      	ldrh	r3, [r7, #6]
 8005870:	827b      	strh	r3, [r7, #18]
 8005872:	88bb      	ldrh	r3, [r7, #4]
 8005874:	80fb      	strh	r3, [r7, #6]
 8005876:	8a7b      	ldrh	r3, [r7, #18]
 8005878:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 800587a:	887b      	ldrh	r3, [r7, #2]
 800587c:	823b      	strh	r3, [r7, #16]
 800587e:	883b      	ldrh	r3, [r7, #0]
 8005880:	807b      	strh	r3, [r7, #2]
 8005882:	8a3b      	ldrh	r3, [r7, #16]
 8005884:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8005886:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800588a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800588e:	429a      	cmp	r2, r3
 8005890:	dd0b      	ble.n	80058aa <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	81fb      	strh	r3, [r7, #14]
 8005896:	887b      	ldrh	r3, [r7, #2]
 8005898:	80fb      	strh	r3, [r7, #6]
 800589a:	89fb      	ldrh	r3, [r7, #14]
 800589c:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 800589e:	88bb      	ldrh	r3, [r7, #4]
 80058a0:	81bb      	strh	r3, [r7, #12]
 80058a2:	883b      	ldrh	r3, [r7, #0]
 80058a4:	80bb      	strh	r3, [r7, #4]
 80058a6:	89bb      	ldrh	r3, [r7, #12]
 80058a8:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 80058aa:	887a      	ldrh	r2, [r7, #2]
 80058ac:	88fb      	ldrh	r3, [r7, #6]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 80058b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80058b8:	105b      	asrs	r3, r3, #1
 80058ba:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 80058bc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80058c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	da07      	bge.n	80058d8 <Displ_Line+0x184>
        dy = y1-y0;
 80058c8:	883a      	ldrh	r2, [r7, #0]
 80058ca:	88bb      	ldrh	r3, [r7, #4]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 80058d2:	2301      	movs	r3, #1
 80058d4:	837b      	strh	r3, [r7, #26]
 80058d6:	e007      	b.n	80058e8 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 80058d8:	88ba      	ldrh	r2, [r7, #4]
 80058da:	883b      	ldrh	r3, [r7, #0]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	b29b      	uxth	r3, r3
 80058e0:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 80058e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058e6:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 80058e8:	2300      	movs	r3, #0
 80058ea:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	83bb      	strh	r3, [r7, #28]
 80058f0:	e03a      	b.n	8005968 <Displ_Line+0x214>
        l++;
 80058f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3301      	adds	r3, #1
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 80058fe:	8b3a      	ldrh	r2, [r7, #24]
 8005900:	8afb      	ldrh	r3, [r7, #22]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	b29b      	uxth	r3, r3
 8005906:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8005908:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800590c:	2b00      	cmp	r3, #0
 800590e:	da25      	bge.n	800595c <Displ_Line+0x208>
            if (steep) {
 8005910:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <Displ_Line+0x1d8>
                Displ_FillArea(y0, x0, 1, l, color);
 8005918:	88b8      	ldrh	r0, [r7, #4]
 800591a:	88f9      	ldrh	r1, [r7, #6]
 800591c:	8bfa      	ldrh	r2, [r7, #30]
 800591e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	4613      	mov	r3, r2
 8005924:	2201      	movs	r2, #1
 8005926:	f7ff fd45 	bl	80053b4 <Displ_FillArea>
 800592a:	e007      	b.n	800593c <Displ_Line+0x1e8>
            } else {
                Displ_FillArea(x0, y0, l, 1, color);
 800592c:	88f8      	ldrh	r0, [r7, #6]
 800592e:	88b9      	ldrh	r1, [r7, #4]
 8005930:	8bfa      	ldrh	r2, [r7, #30]
 8005932:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	2301      	movs	r3, #1
 8005938:	f7ff fd3c 	bl	80053b4 <Displ_FillArea>
            }
            y0 += ystep;
 800593c:	88ba      	ldrh	r2, [r7, #4]
 800593e:	8b7b      	ldrh	r3, [r7, #26]
 8005940:	4413      	add	r3, r2
 8005942:	b29b      	uxth	r3, r3
 8005944:	80bb      	strh	r3, [r7, #4]
            l=0;
 8005946:	2300      	movs	r3, #0
 8005948:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 800594a:	8bbb      	ldrh	r3, [r7, #28]
 800594c:	3301      	adds	r3, #1
 800594e:	b29b      	uxth	r3, r3
 8005950:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8005952:	8b3a      	ldrh	r2, [r7, #24]
 8005954:	897b      	ldrh	r3, [r7, #10]
 8005956:	4413      	add	r3, r2
 8005958:	b29b      	uxth	r3, r3
 800595a:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 800595c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005960:	b29b      	uxth	r3, r3
 8005962:	3301      	adds	r3, #1
 8005964:	b29b      	uxth	r3, r3
 8005966:	83bb      	strh	r3, [r7, #28]
 8005968:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800596c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005970:	429a      	cmp	r2, r3
 8005972:	ddbe      	ble.n	80058f2 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8005974:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d019      	beq.n	80059b0 <Displ_Line+0x25c>
        if (steep) {
 800597c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00b      	beq.n	800599c <Displ_Line+0x248>
            Displ_FillArea(y0, x0, 1, l-1, color);
 8005984:	88b8      	ldrh	r0, [r7, #4]
 8005986:	88f9      	ldrh	r1, [r7, #6]
 8005988:	8bfb      	ldrh	r3, [r7, #30]
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	4613      	mov	r3, r2
 8005994:	2201      	movs	r2, #1
 8005996:	f7ff fd0d 	bl	80053b4 <Displ_FillArea>
 800599a:	e009      	b.n	80059b0 <Displ_Line+0x25c>
        } else {
            Displ_FillArea(x0, y0, l-1,1, color);
 800599c:	88f8      	ldrh	r0, [r7, #6]
 800599e:	88b9      	ldrh	r1, [r7, #4]
 80059a0:	8bfb      	ldrh	r3, [r7, #30]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	2301      	movs	r3, #1
 80059ac:	f7ff fd02 	bl	80053b4 <Displ_FillArea>
        }
    }
}
 80059b0:	3724      	adds	r7, #36	; 0x24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd90      	pop	{r4, r7, pc}

080059b6 <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80059b6:	b590      	push	{r4, r7, lr}
 80059b8:	b091      	sub	sp, #68	; 0x44
 80059ba:	af02      	add	r7, sp, #8
 80059bc:	4604      	mov	r4, r0
 80059be:	4608      	mov	r0, r1
 80059c0:	4611      	mov	r1, r2
 80059c2:	461a      	mov	r2, r3
 80059c4:	4623      	mov	r3, r4
 80059c6:	80fb      	strh	r3, [r7, #6]
 80059c8:	4603      	mov	r3, r0
 80059ca:	80bb      	strh	r3, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	807b      	strh	r3, [r7, #2]
 80059d0:	4613      	mov	r3, r2
 80059d2:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 80059d4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80059d8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80059dc:	429a      	cmp	r2, r3
 80059de:	dd0b      	ble.n	80059f8 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80059e0:	88bb      	ldrh	r3, [r7, #4]
 80059e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80059e4:	883b      	ldrh	r3, [r7, #0]
 80059e6:	80bb      	strh	r3, [r7, #4]
 80059e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059ea:	803b      	strh	r3, [r7, #0]
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80059f0:	887b      	ldrh	r3, [r7, #2]
 80059f2:	80fb      	strh	r3, [r7, #6]
 80059f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059f6:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 80059f8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80059fc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005a00:	429a      	cmp	r2, r3
 8005a02:	dd0f      	ble.n	8005a24 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8005a04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005a08:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a0a:	883b      	ldrh	r3, [r7, #0]
 8005a0c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005a10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a12:	803b      	strh	r3, [r7, #0]
 8005a14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a18:	843b      	strh	r3, [r7, #32]
 8005a1a:	887b      	ldrh	r3, [r7, #2]
 8005a1c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005a20:	8c3b      	ldrh	r3, [r7, #32]
 8005a22:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8005a24:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005a28:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	dd0b      	ble.n	8005a48 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005a30:	88bb      	ldrh	r3, [r7, #4]
 8005a32:	83fb      	strh	r3, [r7, #30]
 8005a34:	883b      	ldrh	r3, [r7, #0]
 8005a36:	80bb      	strh	r3, [r7, #4]
 8005a38:	8bfb      	ldrh	r3, [r7, #30]
 8005a3a:	803b      	strh	r3, [r7, #0]
 8005a3c:	88fb      	ldrh	r3, [r7, #6]
 8005a3e:	83bb      	strh	r3, [r7, #28]
 8005a40:	887b      	ldrh	r3, [r7, #2]
 8005a42:	80fb      	strh	r3, [r7, #6]
 8005a44:	8bbb      	ldrh	r3, [r7, #28]
 8005a46:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8005a48:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005a4c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d136      	bne.n	8005ac2 <Displ_fillTriangle+0x10c>
        a = b = x0;
 8005a54:	88fb      	ldrh	r3, [r7, #6]
 8005a56:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005a58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005a5a:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8005a5c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005a60:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a64:	429a      	cmp	r2, r3
 8005a66:	da02      	bge.n	8005a6e <Displ_fillTriangle+0xb8>
 8005a68:	887b      	ldrh	r3, [r7, #2]
 8005a6a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005a6c:	e007      	b.n	8005a7e <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8005a6e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005a72:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005a76:	429a      	cmp	r2, r3
 8005a78:	dd01      	ble.n	8005a7e <Displ_fillTriangle+0xc8>
 8005a7a:	887b      	ldrh	r3, [r7, #2]
 8005a7c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8005a7e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005a82:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a86:	429a      	cmp	r2, r3
 8005a88:	da03      	bge.n	8005a92 <Displ_fillTriangle+0xdc>
 8005a8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a8e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005a90:	e008      	b.n	8005aa4 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8005a92:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005a96:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	dd02      	ble.n	8005aa4 <Displ_fillTriangle+0xee>
 8005a9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005aa2:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8005aa4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005aa8:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005aac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005ab0:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005ab4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	4623      	mov	r3, r4
 8005abc:	f7ff fe4a 	bl	8005754 <Displ_Line>
        return;
 8005ac0:	e0d2      	b.n	8005c68 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8005ac2:	887a      	ldrh	r2, [r7, #2]
 8005ac4:	88fb      	ldrh	r3, [r7, #6]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8005acc:	883a      	ldrh	r2, [r7, #0]
 8005ace:	88bb      	ldrh	r3, [r7, #4]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8005ad6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8005ae2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005ae6:	88bb      	ldrh	r3, [r7, #4]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8005aee:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005af2:	887b      	ldrh	r3, [r7, #2]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8005afa:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005afe:	883b      	ldrh	r3, [r7, #0]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8005b06:	2300      	movs	r3, #0
 8005b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8005b0e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005b12:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d102      	bne.n	8005b20 <Displ_fillTriangle+0x16a>
 8005b1a:	883b      	ldrh	r3, [r7, #0]
 8005b1c:	863b      	strh	r3, [r7, #48]	; 0x30
 8005b1e:	e003      	b.n	8005b28 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8005b20:	883b      	ldrh	r3, [r7, #0]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8005b28:	88bb      	ldrh	r3, [r7, #4]
 8005b2a:	867b      	strh	r3, [r7, #50]	; 0x32
 8005b2c:	e03d      	b.n	8005baa <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8005b2e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b34:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	88fb      	ldrh	r3, [r7, #6]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005b42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b48:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	4413      	add	r3, r2
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8005b56:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b5c:	4413      	add	r3, r2
 8005b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005b60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b66:	4413      	add	r3, r2
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005b6a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005b6e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005b72:	429a      	cmp	r2, r3
 8005b74:	dd05      	ble.n	8005b82 <Displ_fillTriangle+0x1cc>
 8005b76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b78:	81bb      	strh	r3, [r7, #12]
 8005b7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b7c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b7e:	89bb      	ldrh	r3, [r7, #12]
 8005b80:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005b82:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005b86:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005b8a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005b8e:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005b92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	4623      	mov	r3, r4
 8005b9a:	f7ff fddb 	bl	8005754 <Displ_Line>
    for(y=y0; y<=last; y++) {
 8005b9e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	867b      	strh	r3, [r7, #50]	; 0x32
 8005baa:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005bae:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	ddbb      	ble.n	8005b2e <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8005bb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005bba:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005bbe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005bc2:	1a8a      	subs	r2, r1, r2
 8005bc4:	fb02 f303 	mul.w	r3, r2, r3
 8005bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8005bca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005bce:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005bd2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005bd6:	1a8a      	subs	r2, r1, r2
 8005bd8:	fb02 f303 	mul.w	r3, r2, r3
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8005bde:	e03d      	b.n	8005c5c <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8005be0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005be6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	887b      	ldrh	r3, [r7, #2]
 8005bee:	4413      	add	r3, r2
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005bf4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	4413      	add	r3, r2
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8005c08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c0e:	4413      	add	r3, r2
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005c12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c18:	4413      	add	r3, r2
 8005c1a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005c1c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005c20:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005c24:	429a      	cmp	r2, r3
 8005c26:	dd05      	ble.n	8005c34 <Displ_fillTriangle+0x27e>
 8005c28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c2a:	81fb      	strh	r3, [r7, #14]
 8005c2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c2e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005c30:	89fb      	ldrh	r3, [r7, #14]
 8005c32:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005c34:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005c38:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005c3c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005c40:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005c44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	f7ff fd82 	bl	8005754 <Displ_Line>
    for(; y<=y2; y++) {
 8005c50:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3301      	adds	r3, #1
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	867b      	strh	r3, [r7, #50]	; 0x32
 8005c5c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005c60:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005c64:	429a      	cmp	r2, r3
 8005c66:	ddbb      	ble.n	8005be0 <Displ_fillTriangle+0x22a>
    }
}
 8005c68:	373c      	adds	r7, #60	; 0x3c
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd90      	pop	{r4, r7, pc}
	...

08005c70 <Displ_WChar>:
 * @brief   display one character on the display
 * @param   x,y: top left corner of the character to be printed
 *          ch, font, color, bgcolor: as per parameter name
 *          size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005c70:	b082      	sub	sp, #8
 8005c72:	b590      	push	{r4, r7, lr}
 8005c74:	b08d      	sub	sp, #52	; 0x34
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	647b      	str	r3, [r7, #68]	; 0x44
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	80fb      	strh	r3, [r7, #6]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	80bb      	strh	r3, [r7, #4]
 8005c82:	4613      	mov	r3, r2
 8005c84:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
    uint8_t wsize=font.Width; //printing char width
 8005c86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c8a:	76fb      	strb	r3, [r7, #27]

    if (size==2)
 8005c8c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d102      	bne.n	8005c9a <Displ_WChar+0x2a>
        wsize<<= 1;
 8005c94:	7efb      	ldrb	r3, [r7, #27]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	76fb      	strb	r3, [r7, #27]
    bufSize=0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	623b      	str	r3, [r7, #32]
    bytes=font.Height * font.Size ;
 8005c9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ca2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8005ca6:	fb02 f303 	mul.w	r3, r2, r3
 8005caa:	617b      	str	r3, [r7, #20]
    pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8005cac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	3b20      	subs	r3, #32
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	fb01 f303 	mul.w	r3, r1, r3
 8005cba:	4413      	add	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]
    switch (font.Size) {
 8005cbe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d005      	beq.n	8005cd2 <Displ_WChar+0x62>
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d107      	bne.n	8005cda <Displ_WChar+0x6a>
        case 3:
            mask=0x800000;
 8005cca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005cce:	61fb      	str	r3, [r7, #28]
            break;
 8005cd0:	e005      	b.n	8005cde <Displ_WChar+0x6e>
        case 2:
            mask=0x8000;
 8005cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd6:	61fb      	str	r3, [r7, #28]
            break;
 8005cd8:	e001      	b.n	8005cde <Displ_WChar+0x6e>
        default:
            mask=0x80;
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	61fb      	str	r3, [r7, #28]
    }

#ifdef Z_RGB565

    uint16_t color1, bgcolor1;
    uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 8005cde:	4b60      	ldr	r3, [pc, #384]	; (8005e60 <Displ_WChar+0x1f0>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]

    color1 = ((color & 0xFF)<<8 | (color >> 8));            //swapping byte endian: STM32 is little endian, ST7735 is big endian
 8005ce4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	b21a      	sxth	r2, r3
 8005cec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005cf0:	0a1b      	lsrs	r3, r3, #8
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	b21b      	sxth	r3, r3
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	b21b      	sxth	r3, r3
 8005cfa:	817b      	strh	r3, [r7, #10]
    bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));      //swapping byte endian: STM32 is little endian, ST7735 is big endian
 8005cfc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005d00:	021b      	lsls	r3, r3, #8
 8005d02:	b21a      	sxth	r2, r3
 8005d04:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005d08:	0a1b      	lsrs	r3, r3, #8
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	b21b      	sxth	r3, r3
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	b21b      	sxth	r3, r3
 8005d12:	813b      	strh	r3, [r7, #8]

    for(i = 0; i < (bytes); i+=font.Size){
 8005d14:	2300      	movs	r3, #0
 8005d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d18:	e06f      	b.n	8005dfa <Displ_WChar+0x18a>
        b=0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	62bb      	str	r3, [r7, #40]	; 0x28
        switch (font.Size) {
 8005d1e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d015      	beq.n	8005d52 <Displ_WChar+0xe2>
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d120      	bne.n	8005d6c <Displ_WChar+0xfc>
            case 3:
                b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	4413      	add	r3, r2
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	041a      	lsls	r2, r3, #16
 8005d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d36:	3301      	adds	r3, #1
 8005d38:	6939      	ldr	r1, [r7, #16]
 8005d3a:	440b      	add	r3, r1
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	4313      	orrs	r3, r2
 8005d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d44:	3202      	adds	r2, #2
 8005d46:	6939      	ldr	r1, [r7, #16]
 8005d48:	440a      	add	r2, r1
 8005d4a:	7812      	ldrb	r2, [r2, #0]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8005d50:	e011      	b.n	8005d76 <Displ_WChar+0x106>
            case 2:
                b=pos[i]<<8 | pos[i+1];
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d56:	4413      	add	r3, r2
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	021b      	lsls	r3, r3, #8
 8005d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d5e:	3201      	adds	r2, #1
 8005d60:	6939      	ldr	r1, [r7, #16]
 8005d62:	440a      	add	r2, r1
 8005d64:	7812      	ldrb	r2, [r2, #0]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8005d6a:	e004      	b.n	8005d76 <Displ_WChar+0x106>
            default:
                b=pos[i];
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	4413      	add	r3, r2
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        for(j = 0; j < font.Width; j++) {
 8005d76:	2300      	movs	r3, #0
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
 8005d7a:	e032      	b.n	8005de2 <Displ_WChar+0x172>
            if((b << j) & mask)  {
 8005d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	409a      	lsls	r2, r3
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4013      	ands	r3, r2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d014      	beq.n	8005db4 <Displ_WChar+0x144>
                dispBuffer16[bufSize++] = color1;
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	623a      	str	r2, [r7, #32]
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4413      	add	r3, r2
 8005d96:	897a      	ldrh	r2, [r7, #10]
 8005d98:	801a      	strh	r2, [r3, #0]
                if (size==2){
 8005d9a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d11c      	bne.n	8005ddc <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = color1;
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	623a      	str	r2, [r7, #32]
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4413      	add	r3, r2
 8005dae:	897a      	ldrh	r2, [r7, #10]
 8005db0:	801a      	strh	r2, [r3, #0]
 8005db2:	e013      	b.n	8005ddc <Displ_WChar+0x16c>
                }
            } else {
                dispBuffer16[bufSize++] = bgcolor1;
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	623a      	str	r2, [r7, #32]
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	893a      	ldrh	r2, [r7, #8]
 8005dc2:	801a      	strh	r2, [r3, #0]
                if (size==2) {
 8005dc4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d107      	bne.n	8005ddc <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = bgcolor1;
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	623a      	str	r2, [r7, #32]
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	893a      	ldrh	r2, [r7, #8]
 8005dda:	801a      	strh	r2, [r3, #0]
        for(j = 0; j < font.Width; j++) {
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	3301      	adds	r3, #1
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
 8005de2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005de6:	461a      	mov	r2, r3
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d3c6      	bcc.n	8005d7c <Displ_WChar+0x10c>
    for(i = 0; i < (bytes); i+=font.Size){
 8005dee:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005df2:	461a      	mov	r2, r3
 8005df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df6:	4413      	add	r3, r2
 8005df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d38b      	bcc.n	8005d1a <Displ_WChar+0xaa>
                }
            }
        }
    }
    bufSize<<=1;
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	623b      	str	r3, [r7, #32]
            }
        }
    }
#endif

    Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8005e08:	7efb      	ldrb	r3, [r7, #27]
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	88fb      	ldrh	r3, [r7, #6]
 8005e0e:	4413      	add	r3, r2
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29c      	uxth	r4, r3
 8005e16:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005e1a:	88bb      	ldrh	r3, [r7, #4]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	88b9      	ldrh	r1, [r7, #4]
 8005e26:	88f8      	ldrh	r0, [r7, #6]
 8005e28:	4622      	mov	r2, r4
 8005e2a:	f7ff f9d7 	bl	80051dc <Displ_SetAddressWindow>
    Displ_WriteData(dispBuffer,bufSize,0);
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <Displ_WChar+0x1f0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2200      	movs	r2, #0
 8005e34:	6a39      	ldr	r1, [r7, #32]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff f977 	bl	800512a <Displ_WriteData>
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8005e3c:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <Displ_WChar+0x1f0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a08      	ldr	r2, [pc, #32]	; (8005e64 <Displ_WChar+0x1f4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d101      	bne.n	8005e4a <Displ_WChar+0x1da>
 8005e46:	4b08      	ldr	r3, [pc, #32]	; (8005e68 <Displ_WChar+0x1f8>)
 8005e48:	e000      	b.n	8005e4c <Displ_WChar+0x1dc>
 8005e4a:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <Displ_WChar+0x1f4>)
 8005e4c:	4a04      	ldr	r2, [pc, #16]	; (8005e60 <Displ_WChar+0x1f0>)
 8005e4e:	6013      	str	r3, [r2, #0]

}
 8005e50:	bf00      	nop
 8005e52:	3734      	adds	r7, #52	; 0x34
 8005e54:	46bd      	mov	sp, r7
 8005e56:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005e5a:	b002      	add	sp, #8
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	20000060 	.word	0x20000060
 8005e64:	200021f0 	.word	0x200021f0
 8005e68:	200025f0 	.word	0x200025f0

08005e6c <Displ_WString>:
 *          font    to bu used
 *          size    1 (normal), 2 (double width)
 *          color   font color
 *          bgcolor background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e70:	b08b      	sub	sp, #44	; 0x2c
 8005e72:	af06      	add	r7, sp, #24
 8005e74:	603a      	str	r2, [r7, #0]
 8005e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e78:	4603      	mov	r3, r0
 8005e7a:	80fb      	strh	r3, [r7, #6]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	80bb      	strh	r3, [r7, #4]
    uint16_t delta=font.Width;
 8005e80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005e82:	81fb      	strh	r3, [r7, #14]
    if (size>1)
 8005e84:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d922      	bls.n	8005ed2 <Displ_WString+0x66>
        delta<<=1;
 8005e8c:	89fb      	ldrh	r3, [r7, #14]
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8005e92:	e01e      	b.n	8005ed2 <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781a      	ldrb	r2, [r3, #0]
 8005e98:	88bd      	ldrh	r5, [r7, #4]
 8005e9a:	88fc      	ldrh	r4, [r7, #6]
 8005e9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ea0:	9304      	str	r3, [sp, #16]
 8005ea2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ea4:	9303      	str	r3, [sp, #12]
 8005ea6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005eaa:	9302      	str	r3, [sp, #8]
 8005eac:	466e      	mov	r6, sp
 8005eae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005eb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005eb6:	e886 0003 	stmia.w	r6, {r0, r1}
 8005eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f7ff fed6 	bl	8005c70 <Displ_WChar>
        x += delta;
 8005ec4:	88fa      	ldrh	r2, [r7, #6]
 8005ec6:	89fb      	ldrh	r3, [r7, #14]
 8005ec8:	4413      	add	r3, r2
 8005eca:	80fb      	strh	r3, [r7, #6]
        str++;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	603b      	str	r3, [r7, #0]
    while(*str) {
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1dc      	bne.n	8005e94 <Displ_WString+0x28>
    }
}
 8005eda:	bf00      	nop
 8005edc:	bf00      	nop
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005ee6:	b002      	add	sp, #8
 8005ee8:	4770      	bx	lr
	...

08005eec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f24 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005ef0:	f7ff f878 	bl	8004fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ef4:	480c      	ldr	r0, [pc, #48]	; (8005f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8005ef6:	490d      	ldr	r1, [pc, #52]	; (8005f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005ef8:	4a0d      	ldr	r2, [pc, #52]	; (8005f30 <LoopForever+0xe>)
  movs r3, #0
 8005efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005efc:	e002      	b.n	8005f04 <LoopCopyDataInit>

08005efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f02:	3304      	adds	r3, #4

08005f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f08:	d3f9      	bcc.n	8005efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f0a:	4a0a      	ldr	r2, [pc, #40]	; (8005f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005f0c:	4c0a      	ldr	r4, [pc, #40]	; (8005f38 <LoopForever+0x16>)
  movs r3, #0
 8005f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f10:	e001      	b.n	8005f16 <LoopFillZerobss>

08005f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f14:	3204      	adds	r2, #4

08005f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f18:	d3fb      	bcc.n	8005f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f1a:	f004 fe17 	bl	800ab4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005f1e:	f7fc febd 	bl	8002c9c <main>

08005f22 <LoopForever>:

LoopForever:
    b LoopForever
 8005f22:	e7fe      	b.n	8005f22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005f24:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f2c:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8005f30:	0800e188 	.word	0x0800e188
  ldr r2, =_sbss
 8005f34:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8005f38:	20002a0c 	.word	0x20002a0c

08005f3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005f3c:	e7fe      	b.n	8005f3c <ADC1_IRQHandler>
	...

08005f40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f44:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <HAL_Init+0x28>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a07      	ldr	r2, [pc, #28]	; (8005f68 <HAL_Init+0x28>)
 8005f4a:	f043 0310 	orr.w	r3, r3, #16
 8005f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f50:	2003      	movs	r0, #3
 8005f52:	f000 f94f 	bl	80061f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f56:	200f      	movs	r0, #15
 8005f58:	f000 f808 	bl	8005f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f5c:	f7fe fdbc 	bl	8004ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40022000 	.word	0x40022000

08005f6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f74:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <HAL_InitTick+0x54>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	4b12      	ldr	r3, [pc, #72]	; (8005fc4 <HAL_InitTick+0x58>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 f967 	bl	800625e <HAL_SYSTICK_Config>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e00e      	b.n	8005fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b0f      	cmp	r3, #15
 8005f9e:	d80a      	bhi.n	8005fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	f000 f92f 	bl	800620a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005fac:	4a06      	ldr	r2, [pc, #24]	; (8005fc8 <HAL_InitTick+0x5c>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e000      	b.n	8005fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20000058 	.word	0x20000058
 8005fc4:	20000068 	.word	0x20000068
 8005fc8:	20000064 	.word	0x20000064

08005fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fd0:	4b06      	ldr	r3, [pc, #24]	; (8005fec <HAL_IncTick+0x20>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <HAL_IncTick+0x24>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4413      	add	r3, r2
 8005fdc:	4a04      	ldr	r2, [pc, #16]	; (8005ff0 <HAL_IncTick+0x24>)
 8005fde:	6013      	str	r3, [r2, #0]
}
 8005fe0:	bf00      	nop
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20000068 	.word	0x20000068
 8005ff0:	200029f8 	.word	0x200029f8

08005ff4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
  return uwTick;  
 8005ff8:	4b03      	ldr	r3, [pc, #12]	; (8006008 <HAL_GetTick+0x14>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	200029f8 	.word	0x200029f8

0800600c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006014:	f7ff ffee 	bl	8005ff4 <HAL_GetTick>
 8006018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d005      	beq.n	8006032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <HAL_Delay+0x44>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8006032:	bf00      	nop
 8006034:	f7ff ffde 	bl	8005ff4 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	429a      	cmp	r2, r3
 8006042:	d8f7      	bhi.n	8006034 <HAL_Delay+0x28>
  {
  }
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20000068 	.word	0x20000068

08006054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006064:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <__NVIC_SetPriorityGrouping+0x44>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006070:	4013      	ands	r3, r2
 8006072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800607c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006086:	4a04      	ldr	r2, [pc, #16]	; (8006098 <__NVIC_SetPriorityGrouping+0x44>)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	60d3      	str	r3, [r2, #12]
}
 800608c:	bf00      	nop
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	e000ed00 	.word	0xe000ed00

0800609c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060a0:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <__NVIC_GetPriorityGrouping+0x18>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	0a1b      	lsrs	r3, r3, #8
 80060a6:	f003 0307 	and.w	r3, r3, #7
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	e000ed00 	.word	0xe000ed00

080060b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	db0b      	blt.n	80060e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	f003 021f 	and.w	r2, r3, #31
 80060d0:	4907      	ldr	r1, [pc, #28]	; (80060f0 <__NVIC_EnableIRQ+0x38>)
 80060d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	2001      	movs	r0, #1
 80060da:	fa00 f202 	lsl.w	r2, r0, r2
 80060de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	e000e100 	.word	0xe000e100

080060f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	6039      	str	r1, [r7, #0]
 80060fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006104:	2b00      	cmp	r3, #0
 8006106:	db0a      	blt.n	800611e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	b2da      	uxtb	r2, r3
 800610c:	490c      	ldr	r1, [pc, #48]	; (8006140 <__NVIC_SetPriority+0x4c>)
 800610e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006112:	0112      	lsls	r2, r2, #4
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	440b      	add	r3, r1
 8006118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800611c:	e00a      	b.n	8006134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	b2da      	uxtb	r2, r3
 8006122:	4908      	ldr	r1, [pc, #32]	; (8006144 <__NVIC_SetPriority+0x50>)
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	3b04      	subs	r3, #4
 800612c:	0112      	lsls	r2, r2, #4
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	440b      	add	r3, r1
 8006132:	761a      	strb	r2, [r3, #24]
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	e000e100 	.word	0xe000e100
 8006144:	e000ed00 	.word	0xe000ed00

08006148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006148:	b480      	push	{r7}
 800614a:	b089      	sub	sp, #36	; 0x24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f1c3 0307 	rsb	r3, r3, #7
 8006162:	2b04      	cmp	r3, #4
 8006164:	bf28      	it	cs
 8006166:	2304      	movcs	r3, #4
 8006168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	3304      	adds	r3, #4
 800616e:	2b06      	cmp	r3, #6
 8006170:	d902      	bls.n	8006178 <NVIC_EncodePriority+0x30>
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	3b03      	subs	r3, #3
 8006176:	e000      	b.n	800617a <NVIC_EncodePriority+0x32>
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800617c:	f04f 32ff 	mov.w	r2, #4294967295
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	43da      	mvns	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	401a      	ands	r2, r3
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006190:	f04f 31ff 	mov.w	r1, #4294967295
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	fa01 f303 	lsl.w	r3, r1, r3
 800619a:	43d9      	mvns	r1, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061a0:	4313      	orrs	r3, r2
         );
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3724      	adds	r7, #36	; 0x24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
	...

080061b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061c0:	d301      	bcc.n	80061c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061c2:	2301      	movs	r3, #1
 80061c4:	e00f      	b.n	80061e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061c6:	4a0a      	ldr	r2, [pc, #40]	; (80061f0 <SysTick_Config+0x40>)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061ce:	210f      	movs	r1, #15
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	f7ff ff8e 	bl	80060f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061d8:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <SysTick_Config+0x40>)
 80061da:	2200      	movs	r2, #0
 80061dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061de:	4b04      	ldr	r3, [pc, #16]	; (80061f0 <SysTick_Config+0x40>)
 80061e0:	2207      	movs	r2, #7
 80061e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	e000e010 	.word	0xe000e010

080061f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff ff29 	bl	8006054 <__NVIC_SetPriorityGrouping>
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b086      	sub	sp, #24
 800620e:	af00      	add	r7, sp, #0
 8006210:	4603      	mov	r3, r0
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800621c:	f7ff ff3e 	bl	800609c <__NVIC_GetPriorityGrouping>
 8006220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	6978      	ldr	r0, [r7, #20]
 8006228:	f7ff ff8e 	bl	8006148 <NVIC_EncodePriority>
 800622c:	4602      	mov	r2, r0
 800622e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006232:	4611      	mov	r1, r2
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff ff5d 	bl	80060f4 <__NVIC_SetPriority>
}
 800623a:	bf00      	nop
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	4603      	mov	r3, r0
 800624a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800624c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff ff31 	bl	80060b8 <__NVIC_EnableIRQ>
}
 8006256:	bf00      	nop
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff ffa2 	bl	80061b0 <SysTick_Config>
 800626c:	4603      	mov	r3, r0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e037      	b.n	80062fc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80062a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80062a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80062b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f9b8 	bl	8006654 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}  
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_DMA_Start_IT+0x20>
 8006320:	2302      	movs	r3, #2
 8006322:	e04a      	b.n	80063ba <HAL_DMA_Start_IT+0xb6>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006332:	2b01      	cmp	r3, #1
 8006334:	d13a      	bne.n	80063ac <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2202      	movs	r2, #2
 800633a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0201 	bic.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f94b 	bl	80065f6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 020e 	orr.w	r2, r2, #14
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	e00f      	b.n	800639a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 020a 	orr.w	r2, r2, #10
 8006388:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0204 	bic.w	r2, r2, #4
 8006398:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 0201 	orr.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	e005      	b.n	80063b8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80063b4:	2302      	movs	r3, #2
 80063b6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d008      	beq.n	80063e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2204      	movs	r2, #4
 80063d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e020      	b.n	8006428 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 020e 	bic.w	r2, r2, #14
 80063f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0201 	bic.w	r2, r2, #1
 8006404:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	2101      	movs	r1, #1
 8006410:	fa01 f202 	lsl.w	r2, r1, r2
 8006414:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006446:	2b02      	cmp	r3, #2
 8006448:	d005      	beq.n	8006456 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2204      	movs	r2, #4
 800644e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	73fb      	strb	r3, [r7, #15]
 8006454:	e027      	b.n	80064a6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 020e 	bic.w	r2, r2, #14
 8006464:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0201 	bic.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647e:	2101      	movs	r1, #1
 8006480:	fa01 f202 	lsl.w	r2, r1, r2
 8006484:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	4798      	blx	r3
    } 
  }
  return status;
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064cc:	2204      	movs	r2, #4
 80064ce:	409a      	lsls	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d024      	beq.n	8006522 <HAL_DMA_IRQHandler+0x72>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01f      	beq.n	8006522 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d107      	bne.n	8006500 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0204 	bic.w	r2, r2, #4
 80064fe:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006508:	2104      	movs	r1, #4
 800650a:	fa01 f202 	lsl.w	r2, r1, r2
 800650e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d06a      	beq.n	80065ee <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8006520:	e065      	b.n	80065ee <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	2202      	movs	r2, #2
 8006528:	409a      	lsls	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4013      	ands	r3, r2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d02c      	beq.n	800658c <HAL_DMA_IRQHandler+0xdc>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d027      	beq.n	800658c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0320 	and.w	r3, r3, #32
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 020a 	bic.w	r2, r2, #10
 8006558:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656a:	2102      	movs	r1, #2
 800656c:	fa01 f202 	lsl.w	r2, r1, r2
 8006570:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	2b00      	cmp	r3, #0
 8006580:	d035      	beq.n	80065ee <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800658a:	e030      	b.n	80065ee <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	2208      	movs	r2, #8
 8006592:	409a      	lsls	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4013      	ands	r3, r2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d028      	beq.n	80065ee <HAL_DMA_IRQHandler+0x13e>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d023      	beq.n	80065ee <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 020e 	bic.w	r2, r2, #14
 80065b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	2101      	movs	r1, #1
 80065c0:	fa01 f202 	lsl.w	r2, r1, r2
 80065c4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d004      	beq.n	80065ee <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
    }
  }
}  
 80065ec:	e7ff      	b.n	80065ee <HAL_DMA_IRQHandler+0x13e>
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
 8006602:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660c:	2101      	movs	r1, #1
 800660e:	fa01 f202 	lsl.w	r2, r1, r2
 8006612:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b10      	cmp	r3, #16
 8006622:	d108      	bne.n	8006636 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006634:	e007      	b.n	8006646 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	60da      	str	r2, [r3, #12]
}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
	...

08006654 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	4b09      	ldr	r3, [pc, #36]	; (8006688 <DMA_CalcBaseAndBitshift+0x34>)
 8006664:	4413      	add	r3, r2
 8006666:	4a09      	ldr	r2, [pc, #36]	; (800668c <DMA_CalcBaseAndBitshift+0x38>)
 8006668:	fba2 2303 	umull	r2, r3, r2, r3
 800666c:	091b      	lsrs	r3, r3, #4
 800666e:	009a      	lsls	r2, r3, #2
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a06      	ldr	r2, [pc, #24]	; (8006690 <DMA_CalcBaseAndBitshift+0x3c>)
 8006678:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	bffdfff8 	.word	0xbffdfff8
 800668c:	cccccccd 	.word	0xcccccccd
 8006690:	40020000 	.word	0x40020000

08006694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066a2:	e14e      	b.n	8006942 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	2101      	movs	r1, #1
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	fa01 f303 	lsl.w	r3, r1, r3
 80066b0:	4013      	ands	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 8140 	beq.w	800693c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f003 0303 	and.w	r3, r3, #3
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d005      	beq.n	80066d4 <HAL_GPIO_Init+0x40>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d130      	bne.n	8006736 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	2203      	movs	r2, #3
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	43db      	mvns	r3, r3
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4013      	ands	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800670a:	2201      	movs	r2, #1
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	fa02 f303 	lsl.w	r3, r2, r3
 8006712:	43db      	mvns	r3, r3
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4013      	ands	r3, r2
 8006718:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	091b      	lsrs	r3, r3, #4
 8006720:	f003 0201 	and.w	r2, r3, #1
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	fa02 f303 	lsl.w	r3, r2, r3
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	2b03      	cmp	r3, #3
 8006740:	d017      	beq.n	8006772 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	2203      	movs	r2, #3
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43db      	mvns	r3, r3
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4013      	ands	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d123      	bne.n	80067c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	08da      	lsrs	r2, r3, #3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3208      	adds	r2, #8
 8006786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	220f      	movs	r2, #15
 8006796:	fa02 f303 	lsl.w	r3, r2, r3
 800679a:	43db      	mvns	r3, r3
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4013      	ands	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	691a      	ldr	r2, [r3, #16]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	fa02 f303 	lsl.w	r3, r2, r3
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	08da      	lsrs	r2, r3, #3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3208      	adds	r2, #8
 80067c0:	6939      	ldr	r1, [r7, #16]
 80067c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	2203      	movs	r2, #3
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	43db      	mvns	r3, r3
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	4013      	ands	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f003 0203 	and.w	r2, r3, #3
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	fa02 f303 	lsl.w	r3, r2, r3
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 809a 	beq.w	800693c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006808:	4b55      	ldr	r3, [pc, #340]	; (8006960 <HAL_GPIO_Init+0x2cc>)
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	4a54      	ldr	r2, [pc, #336]	; (8006960 <HAL_GPIO_Init+0x2cc>)
 800680e:	f043 0301 	orr.w	r3, r3, #1
 8006812:	6193      	str	r3, [r2, #24]
 8006814:	4b52      	ldr	r3, [pc, #328]	; (8006960 <HAL_GPIO_Init+0x2cc>)
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	60bb      	str	r3, [r7, #8]
 800681e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006820:	4a50      	ldr	r2, [pc, #320]	; (8006964 <HAL_GPIO_Init+0x2d0>)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	089b      	lsrs	r3, r3, #2
 8006826:	3302      	adds	r3, #2
 8006828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800682c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	220f      	movs	r2, #15
 8006838:	fa02 f303 	lsl.w	r3, r2, r3
 800683c:	43db      	mvns	r3, r3
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4013      	ands	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800684a:	d013      	beq.n	8006874 <HAL_GPIO_Init+0x1e0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a46      	ldr	r2, [pc, #280]	; (8006968 <HAL_GPIO_Init+0x2d4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00d      	beq.n	8006870 <HAL_GPIO_Init+0x1dc>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a45      	ldr	r2, [pc, #276]	; (800696c <HAL_GPIO_Init+0x2d8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d007      	beq.n	800686c <HAL_GPIO_Init+0x1d8>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a44      	ldr	r2, [pc, #272]	; (8006970 <HAL_GPIO_Init+0x2dc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d101      	bne.n	8006868 <HAL_GPIO_Init+0x1d4>
 8006864:	2303      	movs	r3, #3
 8006866:	e006      	b.n	8006876 <HAL_GPIO_Init+0x1e2>
 8006868:	2305      	movs	r3, #5
 800686a:	e004      	b.n	8006876 <HAL_GPIO_Init+0x1e2>
 800686c:	2302      	movs	r3, #2
 800686e:	e002      	b.n	8006876 <HAL_GPIO_Init+0x1e2>
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <HAL_GPIO_Init+0x1e2>
 8006874:	2300      	movs	r3, #0
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	f002 0203 	and.w	r2, r2, #3
 800687c:	0092      	lsls	r2, r2, #2
 800687e:	4093      	lsls	r3, r2
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006886:	4937      	ldr	r1, [pc, #220]	; (8006964 <HAL_GPIO_Init+0x2d0>)
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	089b      	lsrs	r3, r3, #2
 800688c:	3302      	adds	r3, #2
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006894:	4b37      	ldr	r3, [pc, #220]	; (8006974 <HAL_GPIO_Init+0x2e0>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	43db      	mvns	r3, r3
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4013      	ands	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80068b8:	4a2e      	ldr	r2, [pc, #184]	; (8006974 <HAL_GPIO_Init+0x2e0>)
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068be:	4b2d      	ldr	r3, [pc, #180]	; (8006974 <HAL_GPIO_Init+0x2e0>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	43db      	mvns	r3, r3
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4013      	ands	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80068e2:	4a24      	ldr	r2, [pc, #144]	; (8006974 <HAL_GPIO_Init+0x2e0>)
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068e8:	4b22      	ldr	r3, [pc, #136]	; (8006974 <HAL_GPIO_Init+0x2e0>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	43db      	mvns	r3, r3
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4013      	ands	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800690c:	4a19      	ldr	r2, [pc, #100]	; (8006974 <HAL_GPIO_Init+0x2e0>)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006912:	4b18      	ldr	r3, [pc, #96]	; (8006974 <HAL_GPIO_Init+0x2e0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	43db      	mvns	r3, r3
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	4013      	ands	r3, r2
 8006920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006936:	4a0f      	ldr	r2, [pc, #60]	; (8006974 <HAL_GPIO_Init+0x2e0>)
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	3301      	adds	r3, #1
 8006940:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	fa22 f303 	lsr.w	r3, r2, r3
 800694c:	2b00      	cmp	r3, #0
 800694e:	f47f aea9 	bne.w	80066a4 <HAL_GPIO_Init+0x10>
  }
}
 8006952:	bf00      	nop
 8006954:	bf00      	nop
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	40021000 	.word	0x40021000
 8006964:	40010000 	.word	0x40010000
 8006968:	48000400 	.word	0x48000400
 800696c:	48000800 	.word	0x48000800
 8006970:	48000c00 	.word	0x48000c00
 8006974:	40010400 	.word	0x40010400

08006978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	887b      	ldrh	r3, [r7, #2]
 800698a:	4013      	ands	r3, r2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
 8006994:	e001      	b.n	800699a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800699a:	7bfb      	ldrb	r3, [r7, #15]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	807b      	strh	r3, [r7, #2]
 80069b4:	4613      	mov	r3, r2
 80069b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069b8:	787b      	ldrb	r3, [r7, #1]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80069be:	887a      	ldrh	r2, [r7, #2]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80069c4:	e002      	b.n	80069cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80069c6:	887a      	ldrh	r2, [r7, #2]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80069e2:	4b08      	ldr	r3, [pc, #32]	; (8006a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069e4:	695a      	ldr	r2, [r3, #20]
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d006      	beq.n	80069fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80069ee:	4a05      	ldr	r2, [pc, #20]	; (8006a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069f0:	88fb      	ldrh	r3, [r7, #6]
 80069f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80069f4:	88fb      	ldrh	r3, [r7, #6]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fc fba8 	bl	800314c <HAL_GPIO_EXTI_Callback>
  }
}
 80069fc:	bf00      	nop
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	40010400 	.word	0x40010400

08006a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e081      	b.n	8006b1e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fe f876 	bl	8004b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2224      	movs	r2, #36	; 0x24
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0201 	bic.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d107      	bne.n	8006a82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689a      	ldr	r2, [r3, #8]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a7e:	609a      	str	r2, [r3, #8]
 8006a80:	e006      	b.n	8006a90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006a8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d104      	bne.n	8006aa2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aa0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6812      	ldr	r2, [r2, #0]
 8006aac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ac4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691a      	ldr	r2, [r3, #16]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69d9      	ldr	r1, [r3, #28]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a1a      	ldr	r2, [r3, #32]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0201 	orr.w	r2, r2, #1
 8006afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	4608      	mov	r0, r1
 8006b32:	4611      	mov	r1, r2
 8006b34:	461a      	mov	r2, r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	817b      	strh	r3, [r7, #10]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	813b      	strh	r3, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	f040 80f9 	bne.w	8006d42 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <HAL_I2C_Mem_Write+0x34>
 8006b56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d105      	bne.n	8006b68 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e0ed      	b.n	8006d44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_I2C_Mem_Write+0x4e>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e0e6      	b.n	8006d44 <HAL_I2C_Mem_Write+0x21c>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b7e:	f7ff fa39 	bl	8005ff4 <HAL_GetTick>
 8006b82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	2319      	movs	r3, #25
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 fbcd 	bl	8007330 <I2C_WaitOnFlagUntilTimeout>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e0d1      	b.n	8006d44 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2221      	movs	r2, #33	; 0x21
 8006ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2240      	movs	r2, #64	; 0x40
 8006bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6a3a      	ldr	r2, [r7, #32]
 8006bba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bc8:	88f8      	ldrh	r0, [r7, #6]
 8006bca:	893a      	ldrh	r2, [r7, #8]
 8006bcc:	8979      	ldrh	r1, [r7, #10]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 fadd 	bl	8007198 <I2C_RequestMemoryWrite>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d005      	beq.n	8006bf0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e0a9      	b.n	8006d44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2bff      	cmp	r3, #255	; 0xff
 8006bf8:	d90e      	bls.n	8006c18 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	22ff      	movs	r2, #255	; 0xff
 8006bfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	8979      	ldrh	r1, [r7, #10]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 fd47 	bl	80076a4 <I2C_TransferConfig>
 8006c16:	e00f      	b.n	8006c38 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	8979      	ldrh	r1, [r7, #10]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 fd36 	bl	80076a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 fbc6 	bl	80073ce <I2C_WaitOnTXISFlagUntilTimeout>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e07b      	b.n	8006d44 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	781a      	ldrb	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d034      	beq.n	8006cf0 <HAL_I2C_Mem_Write+0x1c8>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d130      	bne.n	8006cf0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	2200      	movs	r2, #0
 8006c96:	2180      	movs	r1, #128	; 0x80
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 fb49 	bl	8007330 <I2C_WaitOnFlagUntilTimeout>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e04d      	b.n	8006d44 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2bff      	cmp	r3, #255	; 0xff
 8006cb0:	d90e      	bls.n	8006cd0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	22ff      	movs	r2, #255	; 0xff
 8006cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	8979      	ldrh	r1, [r7, #10]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 fceb 	bl	80076a4 <I2C_TransferConfig>
 8006cce:	e00f      	b.n	8006cf0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	8979      	ldrh	r1, [r7, #10]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 fcda 	bl	80076a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d19e      	bne.n	8006c38 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fbac 	bl	800745c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e01a      	b.n	8006d44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2220      	movs	r2, #32
 8006d14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6859      	ldr	r1, [r3, #4]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <HAL_I2C_Mem_Write+0x224>)
 8006d22:	400b      	ands	r3, r1
 8006d24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e000      	b.n	8006d44 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006d42:	2302      	movs	r3, #2
  }
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	fe00e800 	.word	0xfe00e800

08006d50 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	4608      	mov	r0, r1
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	817b      	strh	r3, [r7, #10]
 8006d62:	460b      	mov	r3, r1
 8006d64:	813b      	strh	r3, [r7, #8]
 8006d66:	4613      	mov	r3, r2
 8006d68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	f040 80fd 	bne.w	8006f72 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <HAL_I2C_Mem_Read+0x34>
 8006d7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d105      	bne.n	8006d90 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e0f1      	b.n	8006f74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d101      	bne.n	8006d9e <HAL_I2C_Mem_Read+0x4e>
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e0ea      	b.n	8006f74 <HAL_I2C_Mem_Read+0x224>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006da6:	f7ff f925 	bl	8005ff4 <HAL_GetTick>
 8006daa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	2319      	movs	r3, #25
 8006db2:	2201      	movs	r2, #1
 8006db4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fab9 	bl	8007330 <I2C_WaitOnFlagUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e0d5      	b.n	8006f74 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2222      	movs	r2, #34	; 0x22
 8006dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2240      	movs	r2, #64	; 0x40
 8006dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6a3a      	ldr	r2, [r7, #32]
 8006de2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006df0:	88f8      	ldrh	r0, [r7, #6]
 8006df2:	893a      	ldrh	r2, [r7, #8]
 8006df4:	8979      	ldrh	r1, [r7, #10]
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	4603      	mov	r3, r0
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 fa1d 	bl	8007240 <I2C_RequestMemoryRead>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e0ad      	b.n	8006f74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2bff      	cmp	r3, #255	; 0xff
 8006e20:	d90e      	bls.n	8006e40 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	22ff      	movs	r2, #255	; 0xff
 8006e26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	8979      	ldrh	r1, [r7, #10]
 8006e30:	4b52      	ldr	r3, [pc, #328]	; (8006f7c <HAL_I2C_Mem_Read+0x22c>)
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 fc33 	bl	80076a4 <I2C_TransferConfig>
 8006e3e:	e00f      	b.n	8006e60 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	8979      	ldrh	r1, [r7, #10]
 8006e52:	4b4a      	ldr	r3, [pc, #296]	; (8006f7c <HAL_I2C_Mem_Read+0x22c>)
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fc22 	bl	80076a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e66:	2200      	movs	r2, #0
 8006e68:	2104      	movs	r1, #4
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 fa60 	bl	8007330 <I2C_WaitOnFlagUntilTimeout>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e07c      	b.n	8006f74 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d034      	beq.n	8006f20 <HAL_I2C_Mem_Read+0x1d0>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d130      	bne.n	8006f20 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2180      	movs	r1, #128	; 0x80
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fa31 	bl	8007330 <I2C_WaitOnFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e04d      	b.n	8006f74 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2bff      	cmp	r3, #255	; 0xff
 8006ee0:	d90e      	bls.n	8006f00 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	22ff      	movs	r2, #255	; 0xff
 8006ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	8979      	ldrh	r1, [r7, #10]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fbd3 	bl	80076a4 <I2C_TransferConfig>
 8006efe:	e00f      	b.n	8006f20 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	8979      	ldrh	r1, [r7, #10]
 8006f12:	2300      	movs	r3, #0
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 fbc2 	bl	80076a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d19a      	bne.n	8006e60 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 fa94 	bl	800745c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e01a      	b.n	8006f74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2220      	movs	r2, #32
 8006f44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6859      	ldr	r1, [r3, #4]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <HAL_I2C_Mem_Read+0x230>)
 8006f52:	400b      	ands	r3, r1
 8006f54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e000      	b.n	8006f74 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006f72:	2302      	movs	r3, #2
  }
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	80002400 	.word	0x80002400
 8006f80:	fe00e800 	.word	0xfe00e800

08006f84 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08a      	sub	sp, #40	; 0x28
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	607a      	str	r2, [r7, #4]
 8006f8e:	603b      	str	r3, [r7, #0]
 8006f90:	460b      	mov	r3, r1
 8006f92:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	f040 80f3 	bne.w	800718c <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb4:	d101      	bne.n	8006fba <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e0e9      	b.n	800718e <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_I2C_IsDeviceReady+0x44>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e0e2      	b.n	800718e <HAL_I2C_IsDeviceReady+0x20a>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2224      	movs	r2, #36	; 0x24
 8006fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d107      	bne.n	8006ff6 <HAL_I2C_IsDeviceReady+0x72>
 8006fe6:	897b      	ldrh	r3, [r7, #10]
 8006fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ff0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ff4:	e006      	b.n	8007004 <HAL_I2C_IsDeviceReady+0x80>
 8006ff6:	897b      	ldrh	r3, [r7, #10]
 8006ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ffc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007000:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	6812      	ldr	r2, [r2, #0]
 8007008:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800700a:	f7fe fff3 	bl	8005ff4 <HAL_GetTick>
 800700e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b20      	cmp	r3, #32
 800701c:	bf0c      	ite	eq
 800701e:	2301      	moveq	r3, #1
 8007020:	2300      	movne	r3, #0
 8007022:	b2db      	uxtb	r3, r3
 8007024:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	f003 0310 	and.w	r3, r3, #16
 8007030:	2b10      	cmp	r3, #16
 8007032:	bf0c      	ite	eq
 8007034:	2301      	moveq	r3, #1
 8007036:	2300      	movne	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800703c:	e034      	b.n	80070a8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007044:	d01a      	beq.n	800707c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007046:	f7fe ffd5 	bl	8005ff4 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	429a      	cmp	r2, r3
 8007054:	d302      	bcc.n	800705c <HAL_I2C_IsDeviceReady+0xd8>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10f      	bne.n	800707c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007068:	f043 0220 	orr.w	r2, r3, #32
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e088      	b.n	800718e <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b20      	cmp	r3, #32
 8007088:	bf0c      	ite	eq
 800708a:	2301      	moveq	r3, #1
 800708c:	2300      	movne	r3, #0
 800708e:	b2db      	uxtb	r3, r3
 8007090:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	f003 0310 	and.w	r3, r3, #16
 800709c:	2b10      	cmp	r3, #16
 800709e:	bf0c      	ite	eq
 80070a0:	2301      	moveq	r3, #1
 80070a2:	2300      	movne	r3, #0
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80070a8:	7ffb      	ldrb	r3, [r7, #31]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d102      	bne.n	80070b4 <HAL_I2C_IsDeviceReady+0x130>
 80070ae:	7fbb      	ldrb	r3, [r7, #30]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0c4      	beq.n	800703e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	f003 0310 	and.w	r3, r3, #16
 80070be:	2b10      	cmp	r3, #16
 80070c0:	d01a      	beq.n	80070f8 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2200      	movs	r2, #0
 80070ca:	2120      	movs	r1, #32
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f92f 	bl	8007330 <I2C_WaitOnFlagUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e058      	b.n	800718e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2220      	movs	r2, #32
 80070e2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e04a      	b.n	800718e <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2200      	movs	r2, #0
 8007100:	2120      	movs	r1, #32
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 f914 	bl	8007330 <I2C_WaitOnFlagUntilTimeout>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e03d      	b.n	800718e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2210      	movs	r2, #16
 8007118:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2220      	movs	r2, #32
 8007120:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	429a      	cmp	r2, r3
 8007128:	d118      	bne.n	800715c <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007138:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2200      	movs	r2, #0
 8007142:	2120      	movs	r1, #32
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 f8f3 	bl	8007330 <I2C_WaitOnFlagUntilTimeout>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e01c      	b.n	800718e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2220      	movs	r2, #32
 800715a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	3301      	adds	r3, #1
 8007160:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	429a      	cmp	r2, r3
 8007168:	f63f af39 	bhi.w	8006fde <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2220      	movs	r2, #32
 8007170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007178:	f043 0220 	orr.w	r2, r3, #32
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e000      	b.n	800718e <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 800718c:	2302      	movs	r3, #2
  }
}
 800718e:	4618      	mov	r0, r3
 8007190:	3720      	adds	r7, #32
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	4608      	mov	r0, r1
 80071a2:	4611      	mov	r1, r2
 80071a4:	461a      	mov	r2, r3
 80071a6:	4603      	mov	r3, r0
 80071a8:	817b      	strh	r3, [r7, #10]
 80071aa:	460b      	mov	r3, r1
 80071ac:	813b      	strh	r3, [r7, #8]
 80071ae:	4613      	mov	r3, r2
 80071b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80071b2:	88fb      	ldrh	r3, [r7, #6]
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	8979      	ldrh	r1, [r7, #10]
 80071b8:	4b20      	ldr	r3, [pc, #128]	; (800723c <I2C_RequestMemoryWrite+0xa4>)
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fa6f 	bl	80076a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071c6:	69fa      	ldr	r2, [r7, #28]
 80071c8:	69b9      	ldr	r1, [r7, #24]
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 f8ff 	bl	80073ce <I2C_WaitOnTXISFlagUntilTimeout>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e02c      	b.n	8007234 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071da:	88fb      	ldrh	r3, [r7, #6]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d105      	bne.n	80071ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071e0:	893b      	ldrh	r3, [r7, #8]
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	629a      	str	r2, [r3, #40]	; 0x28
 80071ea:	e015      	b.n	8007218 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80071ec:	893b      	ldrh	r3, [r7, #8]
 80071ee:	0a1b      	lsrs	r3, r3, #8
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071fa:	69fa      	ldr	r2, [r7, #28]
 80071fc:	69b9      	ldr	r1, [r7, #24]
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 f8e5 	bl	80073ce <I2C_WaitOnTXISFlagUntilTimeout>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e012      	b.n	8007234 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800720e:	893b      	ldrh	r3, [r7, #8]
 8007210:	b2da      	uxtb	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	2200      	movs	r2, #0
 8007220:	2180      	movs	r1, #128	; 0x80
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 f884 	bl	8007330 <I2C_WaitOnFlagUntilTimeout>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e000      	b.n	8007234 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	80002000 	.word	0x80002000

08007240 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af02      	add	r7, sp, #8
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	461a      	mov	r2, r3
 800724e:	4603      	mov	r3, r0
 8007250:	817b      	strh	r3, [r7, #10]
 8007252:	460b      	mov	r3, r1
 8007254:	813b      	strh	r3, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	b2da      	uxtb	r2, r3
 800725e:	8979      	ldrh	r1, [r7, #10]
 8007260:	4b20      	ldr	r3, [pc, #128]	; (80072e4 <I2C_RequestMemoryRead+0xa4>)
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	2300      	movs	r3, #0
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 fa1c 	bl	80076a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	69b9      	ldr	r1, [r7, #24]
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 f8ac 	bl	80073ce <I2C_WaitOnTXISFlagUntilTimeout>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e02c      	b.n	80072da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d105      	bne.n	8007292 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007286:	893b      	ldrh	r3, [r7, #8]
 8007288:	b2da      	uxtb	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	629a      	str	r2, [r3, #40]	; 0x28
 8007290:	e015      	b.n	80072be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007292:	893b      	ldrh	r3, [r7, #8]
 8007294:	0a1b      	lsrs	r3, r3, #8
 8007296:	b29b      	uxth	r3, r3
 8007298:	b2da      	uxtb	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	69b9      	ldr	r1, [r7, #24]
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f892 	bl	80073ce <I2C_WaitOnTXISFlagUntilTimeout>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e012      	b.n	80072da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072b4:	893b      	ldrh	r3, [r7, #8]
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	2200      	movs	r2, #0
 80072c6:	2140      	movs	r1, #64	; 0x40
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f831 	bl	8007330 <I2C_WaitOnFlagUntilTimeout>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e000      	b.n	80072da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	80002000 	.word	0x80002000

080072e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d103      	bne.n	8007306 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2200      	movs	r2, #0
 8007304:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b01      	cmp	r3, #1
 8007312:	d007      	beq.n	8007324 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699a      	ldr	r2, [r3, #24]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0201 	orr.w	r2, r2, #1
 8007322:	619a      	str	r2, [r3, #24]
  }
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	4613      	mov	r3, r2
 800733e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007340:	e031      	b.n	80073a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007348:	d02d      	beq.n	80073a6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800734a:	f7fe fe53 	bl	8005ff4 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d302      	bcc.n	8007360 <I2C_WaitOnFlagUntilTimeout+0x30>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d122      	bne.n	80073a6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	4013      	ands	r3, r2
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	429a      	cmp	r2, r3
 800736e:	bf0c      	ite	eq
 8007370:	2301      	moveq	r3, #1
 8007372:	2300      	movne	r3, #0
 8007374:	b2db      	uxtb	r3, r3
 8007376:	461a      	mov	r2, r3
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	429a      	cmp	r2, r3
 800737c:	d113      	bne.n	80073a6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007382:	f043 0220 	orr.w	r2, r3, #32
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2220      	movs	r2, #32
 800738e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e00f      	b.n	80073c6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699a      	ldr	r2, [r3, #24]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4013      	ands	r3, r2
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	bf0c      	ite	eq
 80073b6:	2301      	moveq	r3, #1
 80073b8:	2300      	movne	r3, #0
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	461a      	mov	r2, r3
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d0be      	beq.n	8007342 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073da:	e033      	b.n	8007444 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 f87f 	bl	80074e4 <I2C_IsErrorOccurred>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e031      	b.n	8007454 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f6:	d025      	beq.n	8007444 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f8:	f7fe fdfc 	bl	8005ff4 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	429a      	cmp	r2, r3
 8007406:	d302      	bcc.n	800740e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d11a      	bne.n	8007444 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b02      	cmp	r3, #2
 800741a:	d013      	beq.n	8007444 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007420:	f043 0220 	orr.w	r2, r3, #32
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2220      	movs	r2, #32
 800742c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e007      	b.n	8007454 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b02      	cmp	r3, #2
 8007450:	d1c4      	bne.n	80073dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007468:	e02f      	b.n	80074ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 f838 	bl	80074e4 <I2C_IsErrorOccurred>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e02d      	b.n	80074da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800747e:	f7fe fdb9 	bl	8005ff4 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	429a      	cmp	r2, r3
 800748c:	d302      	bcc.n	8007494 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d11a      	bne.n	80074ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b20      	cmp	r3, #32
 80074a0:	d013      	beq.n	80074ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a6:	f043 0220 	orr.w	r2, r3, #32
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2220      	movs	r2, #32
 80074b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e007      	b.n	80074da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	f003 0320 	and.w	r3, r3, #32
 80074d4:	2b20      	cmp	r3, #32
 80074d6:	d1c8      	bne.n	800746a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08a      	sub	sp, #40	; 0x28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	f003 0310 	and.w	r3, r3, #16
 800750c:	2b00      	cmp	r3, #0
 800750e:	d068      	beq.n	80075e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2210      	movs	r2, #16
 8007516:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007518:	e049      	b.n	80075ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007520:	d045      	beq.n	80075ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007522:	f7fe fd67 	bl	8005ff4 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	429a      	cmp	r2, r3
 8007530:	d302      	bcc.n	8007538 <I2C_IsErrorOccurred+0x54>
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d13a      	bne.n	80075ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007542:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800754a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800755a:	d121      	bne.n	80075a0 <I2C_IsErrorOccurred+0xbc>
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007562:	d01d      	beq.n	80075a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007564:	7cfb      	ldrb	r3, [r7, #19]
 8007566:	2b20      	cmp	r3, #32
 8007568:	d01a      	beq.n	80075a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007578:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800757a:	f7fe fd3b 	bl	8005ff4 <HAL_GetTick>
 800757e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007580:	e00e      	b.n	80075a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007582:	f7fe fd37 	bl	8005ff4 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	2b19      	cmp	r3, #25
 800758e:	d907      	bls.n	80075a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	f043 0320 	orr.w	r3, r3, #32
 8007596:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800759e:	e006      	b.n	80075ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	f003 0320 	and.w	r3, r3, #32
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	d1e9      	bne.n	8007582 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	f003 0320 	and.w	r3, r3, #32
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	d003      	beq.n	80075c4 <I2C_IsErrorOccurred+0xe0>
 80075bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d0aa      	beq.n	800751a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80075c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d103      	bne.n	80075d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2220      	movs	r2, #32
 80075d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	f043 0304 	orr.w	r3, r3, #4
 80075da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	f043 0301 	orr.w	r3, r3, #1
 80075fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007604:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00b      	beq.n	800762e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	f043 0308 	orr.w	r3, r3, #8
 800761c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007626:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00b      	beq.n	8007650 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	f043 0302 	orr.w	r3, r3, #2
 800763e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007648:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007654:	2b00      	cmp	r3, #0
 8007656:	d01c      	beq.n	8007692 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f7ff fe45 	bl	80072e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6859      	ldr	r1, [r3, #4]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	4b0d      	ldr	r3, [pc, #52]	; (80076a0 <I2C_IsErrorOccurred+0x1bc>)
 800766a:	400b      	ands	r3, r1
 800766c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	431a      	orrs	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2220      	movs	r2, #32
 800767e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007696:	4618      	mov	r0, r3
 8007698:	3728      	adds	r7, #40	; 0x28
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	fe00e800 	.word	0xfe00e800

080076a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	607b      	str	r3, [r7, #4]
 80076ae:	460b      	mov	r3, r1
 80076b0:	817b      	strh	r3, [r7, #10]
 80076b2:	4613      	mov	r3, r2
 80076b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076b6:	897b      	ldrh	r3, [r7, #10]
 80076b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80076bc:	7a7b      	ldrb	r3, [r7, #9]
 80076be:	041b      	lsls	r3, r3, #16
 80076c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	0d5b      	lsrs	r3, r3, #21
 80076de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80076e2:	4b08      	ldr	r3, [pc, #32]	; (8007704 <I2C_TransferConfig+0x60>)
 80076e4:	430b      	orrs	r3, r1
 80076e6:	43db      	mvns	r3, r3
 80076e8:	ea02 0103 	and.w	r1, r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80076f6:	bf00      	nop
 80076f8:	371c      	adds	r7, #28
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	03ff63ff 	.word	0x03ff63ff

08007708 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b20      	cmp	r3, #32
 800771c:	d138      	bne.n	8007790 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007728:	2302      	movs	r3, #2
 800772a:	e032      	b.n	8007792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2224      	movs	r2, #36	; 0x24
 8007738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0201 	bic.w	r2, r2, #1
 800774a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800775a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6819      	ldr	r1, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0201 	orr.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	e000      	b.n	8007792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007790:	2302      	movs	r3, #2
  }
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800779e:	b480      	push	{r7}
 80077a0:	b085      	sub	sp, #20
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	d139      	bne.n	8007828 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d101      	bne.n	80077c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80077be:	2302      	movs	r3, #2
 80077c0:	e033      	b.n	800782a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2224      	movs	r2, #36	; 0x24
 80077ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0201 	bic.w	r2, r2, #1
 80077e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80077f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 0201 	orr.w	r2, r2, #1
 8007812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2220      	movs	r2, #32
 8007818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	e000      	b.n	800782a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007828:	2302      	movs	r3, #2
  }
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
	...

08007838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800783e:	af00      	add	r7, sp, #0
 8007840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007848:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800784a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800784e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d102      	bne.n	800785e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	f001 b823 	b.w	80088a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800785e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 817d 	beq.w	8007b6e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007874:	4bbc      	ldr	r3, [pc, #752]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f003 030c 	and.w	r3, r3, #12
 800787c:	2b04      	cmp	r3, #4
 800787e:	d00c      	beq.n	800789a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007880:	4bb9      	ldr	r3, [pc, #740]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f003 030c 	and.w	r3, r3, #12
 8007888:	2b08      	cmp	r3, #8
 800788a:	d15c      	bne.n	8007946 <HAL_RCC_OscConfig+0x10e>
 800788c:	4bb6      	ldr	r3, [pc, #728]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007898:	d155      	bne.n	8007946 <HAL_RCC_OscConfig+0x10e>
 800789a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800789e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80078a6:	fa93 f3a3 	rbit	r3, r3
 80078aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80078ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078b2:	fab3 f383 	clz	r3, r3
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	095b      	lsrs	r3, r3, #5
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f043 0301 	orr.w	r3, r3, #1
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d102      	bne.n	80078cc <HAL_RCC_OscConfig+0x94>
 80078c6:	4ba8      	ldr	r3, [pc, #672]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	e015      	b.n	80078f8 <HAL_RCC_OscConfig+0xc0>
 80078cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078d0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80078d8:	fa93 f3a3 	rbit	r3, r3
 80078dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80078e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078e4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80078e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80078ec:	fa93 f3a3 	rbit	r3, r3
 80078f0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80078f4:	4b9c      	ldr	r3, [pc, #624]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80078fc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8007900:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007904:	fa92 f2a2 	rbit	r2, r2
 8007908:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800790c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007910:	fab2 f282 	clz	r2, r2
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	f042 0220 	orr.w	r2, r2, #32
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	f002 021f 	and.w	r2, r2, #31
 8007920:	2101      	movs	r1, #1
 8007922:	fa01 f202 	lsl.w	r2, r1, r2
 8007926:	4013      	ands	r3, r2
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 811f 	beq.w	8007b6c <HAL_RCC_OscConfig+0x334>
 800792e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007932:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f040 8116 	bne.w	8007b6c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	f000 bfaf 	b.w	80088a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800794a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007956:	d106      	bne.n	8007966 <HAL_RCC_OscConfig+0x12e>
 8007958:	4b83      	ldr	r3, [pc, #524]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a82      	ldr	r2, [pc, #520]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 800795e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	e036      	b.n	80079d4 <HAL_RCC_OscConfig+0x19c>
 8007966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800796a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10c      	bne.n	8007990 <HAL_RCC_OscConfig+0x158>
 8007976:	4b7c      	ldr	r3, [pc, #496]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a7b      	ldr	r2, [pc, #492]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 800797c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	4b79      	ldr	r3, [pc, #484]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a78      	ldr	r2, [pc, #480]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 8007988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	e021      	b.n	80079d4 <HAL_RCC_OscConfig+0x19c>
 8007990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007994:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079a0:	d10c      	bne.n	80079bc <HAL_RCC_OscConfig+0x184>
 80079a2:	4b71      	ldr	r3, [pc, #452]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a70      	ldr	r2, [pc, #448]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 80079a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	4b6e      	ldr	r3, [pc, #440]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a6d      	ldr	r2, [pc, #436]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 80079b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	e00b      	b.n	80079d4 <HAL_RCC_OscConfig+0x19c>
 80079bc:	4b6a      	ldr	r3, [pc, #424]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a69      	ldr	r2, [pc, #420]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 80079c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	4b67      	ldr	r3, [pc, #412]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a66      	ldr	r2, [pc, #408]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 80079ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80079d4:	4b64      	ldr	r3, [pc, #400]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	f023 020f 	bic.w	r2, r3, #15
 80079dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	495f      	ldr	r1, [pc, #380]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d059      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079fe:	f7fe faf9 	bl	8005ff4 <HAL_GetTick>
 8007a02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a06:	e00a      	b.n	8007a1e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a08:	f7fe faf4 	bl	8005ff4 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	2b64      	cmp	r3, #100	; 0x64
 8007a16:	d902      	bls.n	8007a1e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	f000 bf43 	b.w	80088a4 <HAL_RCC_OscConfig+0x106c>
 8007a1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a22:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007a2a:	fa93 f3a3 	rbit	r3, r3
 8007a2e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007a32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a36:	fab3 f383 	clz	r3, r3
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	095b      	lsrs	r3, r3, #5
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	f043 0301 	orr.w	r3, r3, #1
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d102      	bne.n	8007a50 <HAL_RCC_OscConfig+0x218>
 8007a4a:	4b47      	ldr	r3, [pc, #284]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	e015      	b.n	8007a7c <HAL_RCC_OscConfig+0x244>
 8007a50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a54:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007a5c:	fa93 f3a3 	rbit	r3, r3
 8007a60:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a68:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007a6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007a70:	fa93 f3a3 	rbit	r3, r3
 8007a74:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007a78:	4b3b      	ldr	r3, [pc, #236]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a80:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007a84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007a88:	fa92 f2a2 	rbit	r2, r2
 8007a8c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007a90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007a94:	fab2 f282 	clz	r2, r2
 8007a98:	b2d2      	uxtb	r2, r2
 8007a9a:	f042 0220 	orr.w	r2, r2, #32
 8007a9e:	b2d2      	uxtb	r2, r2
 8007aa0:	f002 021f 	and.w	r2, r2, #31
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8007aaa:	4013      	ands	r3, r2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0ab      	beq.n	8007a08 <HAL_RCC_OscConfig+0x1d0>
 8007ab0:	e05d      	b.n	8007b6e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab2:	f7fe fa9f 	bl	8005ff4 <HAL_GetTick>
 8007ab6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aba:	e00a      	b.n	8007ad2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007abc:	f7fe fa9a 	bl	8005ff4 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	2b64      	cmp	r3, #100	; 0x64
 8007aca:	d902      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	f000 bee9 	b.w	80088a4 <HAL_RCC_OscConfig+0x106c>
 8007ad2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ad6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ada:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007ade:	fa93 f3a3 	rbit	r3, r3
 8007ae2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007ae6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aea:	fab3 f383 	clz	r3, r3
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	095b      	lsrs	r3, r3, #5
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	f043 0301 	orr.w	r3, r3, #1
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d102      	bne.n	8007b04 <HAL_RCC_OscConfig+0x2cc>
 8007afe:	4b1a      	ldr	r3, [pc, #104]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	e015      	b.n	8007b30 <HAL_RCC_OscConfig+0x2f8>
 8007b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b08:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007b10:	fa93 f3a3 	rbit	r3, r3
 8007b14:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b1c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007b20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007b24:	fa93 f3a3 	rbit	r3, r3
 8007b28:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007b2c:	4b0e      	ldr	r3, [pc, #56]	; (8007b68 <HAL_RCC_OscConfig+0x330>)
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007b34:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007b38:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007b3c:	fa92 f2a2 	rbit	r2, r2
 8007b40:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007b44:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007b48:	fab2 f282 	clz	r2, r2
 8007b4c:	b2d2      	uxtb	r2, r2
 8007b4e:	f042 0220 	orr.w	r2, r2, #32
 8007b52:	b2d2      	uxtb	r2, r2
 8007b54:	f002 021f 	and.w	r2, r2, #31
 8007b58:	2101      	movs	r1, #1
 8007b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8007b5e:	4013      	ands	r3, r2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1ab      	bne.n	8007abc <HAL_RCC_OscConfig+0x284>
 8007b64:	e003      	b.n	8007b6e <HAL_RCC_OscConfig+0x336>
 8007b66:	bf00      	nop
 8007b68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0302 	and.w	r3, r3, #2
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 817d 	beq.w	8007e7e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007b84:	4ba6      	ldr	r3, [pc, #664]	; (8007e20 <HAL_RCC_OscConfig+0x5e8>)
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f003 030c 	and.w	r3, r3, #12
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00b      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007b90:	4ba3      	ldr	r3, [pc, #652]	; (8007e20 <HAL_RCC_OscConfig+0x5e8>)
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f003 030c 	and.w	r3, r3, #12
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d172      	bne.n	8007c82 <HAL_RCC_OscConfig+0x44a>
 8007b9c:	4ba0      	ldr	r3, [pc, #640]	; (8007e20 <HAL_RCC_OscConfig+0x5e8>)
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d16c      	bne.n	8007c82 <HAL_RCC_OscConfig+0x44a>
 8007ba8:	2302      	movs	r3, #2
 8007baa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007bb2:	fa93 f3a3 	rbit	r3, r3
 8007bb6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007bba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bbe:	fab3 f383 	clz	r3, r3
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	095b      	lsrs	r3, r3, #5
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f043 0301 	orr.w	r3, r3, #1
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d102      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x3a0>
 8007bd2:	4b93      	ldr	r3, [pc, #588]	; (8007e20 <HAL_RCC_OscConfig+0x5e8>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	e013      	b.n	8007c00 <HAL_RCC_OscConfig+0x3c8>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bde:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007be2:	fa93 f3a3 	rbit	r3, r3
 8007be6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007bea:	2302      	movs	r3, #2
 8007bec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007bf0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007bf4:	fa93 f3a3 	rbit	r3, r3
 8007bf8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007bfc:	4b88      	ldr	r3, [pc, #544]	; (8007e20 <HAL_RCC_OscConfig+0x5e8>)
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	2202      	movs	r2, #2
 8007c02:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007c06:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007c0a:	fa92 f2a2 	rbit	r2, r2
 8007c0e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007c12:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007c16:	fab2 f282 	clz	r2, r2
 8007c1a:	b2d2      	uxtb	r2, r2
 8007c1c:	f042 0220 	orr.w	r2, r2, #32
 8007c20:	b2d2      	uxtb	r2, r2
 8007c22:	f002 021f 	and.w	r2, r2, #31
 8007c26:	2101      	movs	r1, #1
 8007c28:	fa01 f202 	lsl.w	r2, r1, r2
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <HAL_RCC_OscConfig+0x410>
 8007c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d002      	beq.n	8007c48 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f000 be2e 	b.w	80088a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c48:	4b75      	ldr	r3, [pc, #468]	; (8007e20 <HAL_RCC_OscConfig+0x5e8>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	21f8      	movs	r1, #248	; 0xf8
 8007c5e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c62:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007c66:	fa91 f1a1 	rbit	r1, r1
 8007c6a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007c6e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007c72:	fab1 f181 	clz	r1, r1
 8007c76:	b2c9      	uxtb	r1, r1
 8007c78:	408b      	lsls	r3, r1
 8007c7a:	4969      	ldr	r1, [pc, #420]	; (8007e20 <HAL_RCC_OscConfig+0x5e8>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c80:	e0fd      	b.n	8007e7e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 8088 	beq.w	8007da4 <HAL_RCC_OscConfig+0x56c>
 8007c94:	2301      	movs	r3, #1
 8007c96:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007c9e:	fa93 f3a3 	rbit	r3, r3
 8007ca2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007ca6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007caa:	fab3 f383 	clz	r3, r3
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007cb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	461a      	mov	r2, r3
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cc0:	f7fe f998 	bl	8005ff4 <HAL_GetTick>
 8007cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cc8:	e00a      	b.n	8007ce0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cca:	f7fe f993 	bl	8005ff4 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d902      	bls.n	8007ce0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	f000 bde2 	b.w	80088a4 <HAL_RCC_OscConfig+0x106c>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ce6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007cea:	fa93 f3a3 	rbit	r3, r3
 8007cee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007cf2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cf6:	fab3 f383 	clz	r3, r3
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f043 0301 	orr.w	r3, r3, #1
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d102      	bne.n	8007d10 <HAL_RCC_OscConfig+0x4d8>
 8007d0a:	4b45      	ldr	r3, [pc, #276]	; (8007e20 <HAL_RCC_OscConfig+0x5e8>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	e013      	b.n	8007d38 <HAL_RCC_OscConfig+0x500>
 8007d10:	2302      	movs	r3, #2
 8007d12:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007d1a:	fa93 f3a3 	rbit	r3, r3
 8007d1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007d22:	2302      	movs	r3, #2
 8007d24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007d28:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007d2c:	fa93 f3a3 	rbit	r3, r3
 8007d30:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007d34:	4b3a      	ldr	r3, [pc, #232]	; (8007e20 <HAL_RCC_OscConfig+0x5e8>)
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	2202      	movs	r2, #2
 8007d3a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007d3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007d42:	fa92 f2a2 	rbit	r2, r2
 8007d46:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007d4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007d4e:	fab2 f282 	clz	r2, r2
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	f042 0220 	orr.w	r2, r2, #32
 8007d58:	b2d2      	uxtb	r2, r2
 8007d5a:	f002 021f 	and.w	r2, r2, #31
 8007d5e:	2101      	movs	r1, #1
 8007d60:	fa01 f202 	lsl.w	r2, r1, r2
 8007d64:	4013      	ands	r3, r2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0af      	beq.n	8007cca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d6a:	4b2d      	ldr	r3, [pc, #180]	; (8007e20 <HAL_RCC_OscConfig+0x5e8>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	21f8      	movs	r1, #248	; 0xf8
 8007d80:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d84:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007d88:	fa91 f1a1 	rbit	r1, r1
 8007d8c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007d90:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007d94:	fab1 f181 	clz	r1, r1
 8007d98:	b2c9      	uxtb	r1, r1
 8007d9a:	408b      	lsls	r3, r1
 8007d9c:	4920      	ldr	r1, [pc, #128]	; (8007e20 <HAL_RCC_OscConfig+0x5e8>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	600b      	str	r3, [r1, #0]
 8007da2:	e06c      	b.n	8007e7e <HAL_RCC_OscConfig+0x646>
 8007da4:	2301      	movs	r3, #1
 8007da6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007daa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007dae:	fa93 f3a3 	rbit	r3, r3
 8007db2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007db6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dba:	fab3 f383 	clz	r3, r3
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007dc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	461a      	mov	r2, r3
 8007dcc:	2300      	movs	r3, #0
 8007dce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dd0:	f7fe f910 	bl	8005ff4 <HAL_GetTick>
 8007dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dd8:	e00a      	b.n	8007df0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dda:	f7fe f90b 	bl	8005ff4 <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d902      	bls.n	8007df0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	f000 bd5a 	b.w	80088a4 <HAL_RCC_OscConfig+0x106c>
 8007df0:	2302      	movs	r3, #2
 8007df2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007df6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007dfa:	fa93 f3a3 	rbit	r3, r3
 8007dfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8007e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e06:	fab3 f383 	clz	r3, r3
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	f043 0301 	orr.w	r3, r3, #1
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d104      	bne.n	8007e24 <HAL_RCC_OscConfig+0x5ec>
 8007e1a:	4b01      	ldr	r3, [pc, #4]	; (8007e20 <HAL_RCC_OscConfig+0x5e8>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	e015      	b.n	8007e4c <HAL_RCC_OscConfig+0x614>
 8007e20:	40021000 	.word	0x40021000
 8007e24:	2302      	movs	r3, #2
 8007e26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e2e:	fa93 f3a3 	rbit	r3, r3
 8007e32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007e36:	2302      	movs	r3, #2
 8007e38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007e3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007e40:	fa93 f3a3 	rbit	r3, r3
 8007e44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007e48:	4bc8      	ldr	r3, [pc, #800]	; (800816c <HAL_RCC_OscConfig+0x934>)
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007e52:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007e56:	fa92 f2a2 	rbit	r2, r2
 8007e5a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007e5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007e62:	fab2 f282 	clz	r2, r2
 8007e66:	b2d2      	uxtb	r2, r2
 8007e68:	f042 0220 	orr.w	r2, r2, #32
 8007e6c:	b2d2      	uxtb	r2, r2
 8007e6e:	f002 021f 	and.w	r2, r2, #31
 8007e72:	2101      	movs	r1, #1
 8007e74:	fa01 f202 	lsl.w	r2, r1, r2
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1ad      	bne.n	8007dda <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0308 	and.w	r3, r3, #8
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 8110 	beq.w	80080b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d079      	beq.n	8007f98 <HAL_RCC_OscConfig+0x760>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eaa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007eae:	fa93 f3a3 	rbit	r3, r3
 8007eb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007eba:	fab3 f383 	clz	r3, r3
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	4bab      	ldr	r3, [pc, #684]	; (8008170 <HAL_RCC_OscConfig+0x938>)
 8007ec4:	4413      	add	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	461a      	mov	r2, r3
 8007eca:	2301      	movs	r3, #1
 8007ecc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ece:	f7fe f891 	bl	8005ff4 <HAL_GetTick>
 8007ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ed6:	e00a      	b.n	8007eee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ed8:	f7fe f88c 	bl	8005ff4 <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d902      	bls.n	8007eee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	f000 bcdb 	b.w	80088a4 <HAL_RCC_OscConfig+0x106c>
 8007eee:	2302      	movs	r3, #2
 8007ef0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ef4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ef8:	fa93 f3a3 	rbit	r3, r3
 8007efc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007f08:	2202      	movs	r2, #2
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	fa93 f2a3 	rbit	r2, r3
 8007f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	fa93 f2a3 	rbit	r2, r3
 8007f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007f46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f48:	4b88      	ldr	r3, [pc, #544]	; (800816c <HAL_RCC_OscConfig+0x934>)
 8007f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007f54:	2102      	movs	r1, #2
 8007f56:	6019      	str	r1, [r3, #0]
 8007f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	fa93 f1a3 	rbit	r1, r3
 8007f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007f6e:	6019      	str	r1, [r3, #0]
  return result;
 8007f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	fab3 f383 	clz	r3, r3
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	f003 031f 	and.w	r3, r3, #31
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0a0      	beq.n	8007ed8 <HAL_RCC_OscConfig+0x6a0>
 8007f96:	e08d      	b.n	80080b4 <HAL_RCC_OscConfig+0x87c>
 8007f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fa8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	fa93 f2a3 	rbit	r2, r3
 8007fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007fba:	601a      	str	r2, [r3, #0]
  return result;
 8007fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fc0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007fc4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fc6:	fab3 f383 	clz	r3, r3
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4b68      	ldr	r3, [pc, #416]	; (8008170 <HAL_RCC_OscConfig+0x938>)
 8007fd0:	4413      	add	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fda:	f7fe f80b 	bl	8005ff4 <HAL_GetTick>
 8007fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fe2:	e00a      	b.n	8007ffa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fe4:	f7fe f806 	bl	8005ff4 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d902      	bls.n	8007ffa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	f000 bc55 	b.w	80088a4 <HAL_RCC_OscConfig+0x106c>
 8007ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ffe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008002:	2202      	movs	r2, #2
 8008004:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800800a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	fa93 f2a3 	rbit	r2, r3
 8008014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008018:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008022:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008026:	2202      	movs	r2, #2
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800802e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	fa93 f2a3 	rbit	r2, r3
 8008038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800803c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800804a:	2202      	movs	r2, #2
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	fa93 f2a3 	rbit	r2, r3
 800805c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008060:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008064:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008066:	4b41      	ldr	r3, [pc, #260]	; (800816c <HAL_RCC_OscConfig+0x934>)
 8008068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800806a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800806e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008072:	2102      	movs	r1, #2
 8008074:	6019      	str	r1, [r3, #0]
 8008076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800807a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	fa93 f1a3 	rbit	r1, r3
 8008084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008088:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800808c:	6019      	str	r1, [r3, #0]
  return result;
 800808e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008092:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	fab3 f383 	clz	r3, r3
 800809c:	b2db      	uxtb	r3, r3
 800809e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	f003 031f 	and.w	r3, r3, #31
 80080a8:	2101      	movs	r1, #1
 80080aa:	fa01 f303 	lsl.w	r3, r1, r3
 80080ae:	4013      	ands	r3, r2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d197      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 81a1 	beq.w	800840c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080ca:	2300      	movs	r3, #0
 80080cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080d0:	4b26      	ldr	r3, [pc, #152]	; (800816c <HAL_RCC_OscConfig+0x934>)
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d116      	bne.n	800810a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080dc:	4b23      	ldr	r3, [pc, #140]	; (800816c <HAL_RCC_OscConfig+0x934>)
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	4a22      	ldr	r2, [pc, #136]	; (800816c <HAL_RCC_OscConfig+0x934>)
 80080e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080e6:	61d3      	str	r3, [r2, #28]
 80080e8:	4b20      	ldr	r3, [pc, #128]	; (800816c <HAL_RCC_OscConfig+0x934>)
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80080f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080f4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080fe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8008102:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8008104:	2301      	movs	r3, #1
 8008106:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800810a:	4b1a      	ldr	r3, [pc, #104]	; (8008174 <HAL_RCC_OscConfig+0x93c>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008112:	2b00      	cmp	r3, #0
 8008114:	d11a      	bne.n	800814c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008116:	4b17      	ldr	r3, [pc, #92]	; (8008174 <HAL_RCC_OscConfig+0x93c>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a16      	ldr	r2, [pc, #88]	; (8008174 <HAL_RCC_OscConfig+0x93c>)
 800811c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008120:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008122:	f7fd ff67 	bl	8005ff4 <HAL_GetTick>
 8008126:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800812a:	e009      	b.n	8008140 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800812c:	f7fd ff62 	bl	8005ff4 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	2b64      	cmp	r3, #100	; 0x64
 800813a:	d901      	bls.n	8008140 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e3b1      	b.n	80088a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008140:	4b0c      	ldr	r3, [pc, #48]	; (8008174 <HAL_RCC_OscConfig+0x93c>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0ef      	beq.n	800812c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800814c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008150:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d10d      	bne.n	8008178 <HAL_RCC_OscConfig+0x940>
 800815c:	4b03      	ldr	r3, [pc, #12]	; (800816c <HAL_RCC_OscConfig+0x934>)
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	4a02      	ldr	r2, [pc, #8]	; (800816c <HAL_RCC_OscConfig+0x934>)
 8008162:	f043 0301 	orr.w	r3, r3, #1
 8008166:	6213      	str	r3, [r2, #32]
 8008168:	e03c      	b.n	80081e4 <HAL_RCC_OscConfig+0x9ac>
 800816a:	bf00      	nop
 800816c:	40021000 	.word	0x40021000
 8008170:	10908120 	.word	0x10908120
 8008174:	40007000 	.word	0x40007000
 8008178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800817c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10c      	bne.n	80081a2 <HAL_RCC_OscConfig+0x96a>
 8008188:	4bc1      	ldr	r3, [pc, #772]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	4ac0      	ldr	r2, [pc, #768]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 800818e:	f023 0301 	bic.w	r3, r3, #1
 8008192:	6213      	str	r3, [r2, #32]
 8008194:	4bbe      	ldr	r3, [pc, #760]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	4abd      	ldr	r2, [pc, #756]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 800819a:	f023 0304 	bic.w	r3, r3, #4
 800819e:	6213      	str	r3, [r2, #32]
 80081a0:	e020      	b.n	80081e4 <HAL_RCC_OscConfig+0x9ac>
 80081a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	2b05      	cmp	r3, #5
 80081b0:	d10c      	bne.n	80081cc <HAL_RCC_OscConfig+0x994>
 80081b2:	4bb7      	ldr	r3, [pc, #732]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	4ab6      	ldr	r2, [pc, #728]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 80081b8:	f043 0304 	orr.w	r3, r3, #4
 80081bc:	6213      	str	r3, [r2, #32]
 80081be:	4bb4      	ldr	r3, [pc, #720]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	4ab3      	ldr	r2, [pc, #716]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 80081c4:	f043 0301 	orr.w	r3, r3, #1
 80081c8:	6213      	str	r3, [r2, #32]
 80081ca:	e00b      	b.n	80081e4 <HAL_RCC_OscConfig+0x9ac>
 80081cc:	4bb0      	ldr	r3, [pc, #704]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 80081ce:	6a1b      	ldr	r3, [r3, #32]
 80081d0:	4aaf      	ldr	r2, [pc, #700]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 80081d2:	f023 0301 	bic.w	r3, r3, #1
 80081d6:	6213      	str	r3, [r2, #32]
 80081d8:	4bad      	ldr	r3, [pc, #692]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	4aac      	ldr	r2, [pc, #688]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 80081de:	f023 0304 	bic.w	r3, r3, #4
 80081e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80081e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 8081 	beq.w	80082f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081f6:	f7fd fefd 	bl	8005ff4 <HAL_GetTick>
 80081fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081fe:	e00b      	b.n	8008218 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008200:	f7fd fef8 	bl	8005ff4 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008210:	4293      	cmp	r3, r2
 8008212:	d901      	bls.n	8008218 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e345      	b.n	80088a4 <HAL_RCC_OscConfig+0x106c>
 8008218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800821c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008220:	2202      	movs	r2, #2
 8008222:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008228:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	fa93 f2a3 	rbit	r2, r3
 8008232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008236:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008240:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008244:	2202      	movs	r2, #2
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800824c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	fa93 f2a3 	rbit	r2, r3
 8008256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800825a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800825e:	601a      	str	r2, [r3, #0]
  return result;
 8008260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008264:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008268:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800826a:	fab3 f383 	clz	r3, r3
 800826e:	b2db      	uxtb	r3, r3
 8008270:	095b      	lsrs	r3, r3, #5
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f043 0302 	orr.w	r3, r3, #2
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b02      	cmp	r3, #2
 800827c:	d102      	bne.n	8008284 <HAL_RCC_OscConfig+0xa4c>
 800827e:	4b84      	ldr	r3, [pc, #528]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	e013      	b.n	80082ac <HAL_RCC_OscConfig+0xa74>
 8008284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008288:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800828c:	2202      	movs	r2, #2
 800828e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008294:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	fa93 f2a3 	rbit	r2, r3
 800829e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	4b79      	ldr	r3, [pc, #484]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80082b4:	2102      	movs	r1, #2
 80082b6:	6011      	str	r1, [r2, #0]
 80082b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80082c0:	6812      	ldr	r2, [r2, #0]
 80082c2:	fa92 f1a2 	rbit	r1, r2
 80082c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80082ce:	6011      	str	r1, [r2, #0]
  return result;
 80082d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80082d8:	6812      	ldr	r2, [r2, #0]
 80082da:	fab2 f282 	clz	r2, r2
 80082de:	b2d2      	uxtb	r2, r2
 80082e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082e4:	b2d2      	uxtb	r2, r2
 80082e6:	f002 021f 	and.w	r2, r2, #31
 80082ea:	2101      	movs	r1, #1
 80082ec:	fa01 f202 	lsl.w	r2, r1, r2
 80082f0:	4013      	ands	r3, r2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d084      	beq.n	8008200 <HAL_RCC_OscConfig+0x9c8>
 80082f6:	e07f      	b.n	80083f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082f8:	f7fd fe7c 	bl	8005ff4 <HAL_GetTick>
 80082fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008300:	e00b      	b.n	800831a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008302:	f7fd fe77 	bl	8005ff4 <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008312:	4293      	cmp	r3, r2
 8008314:	d901      	bls.n	800831a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e2c4      	b.n	80088a4 <HAL_RCC_OscConfig+0x106c>
 800831a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800831e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008322:	2202      	movs	r2, #2
 8008324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800832a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	fa93 f2a3 	rbit	r2, r3
 8008334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008338:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008342:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008346:	2202      	movs	r2, #2
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800834e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	fa93 f2a3 	rbit	r2, r3
 8008358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800835c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008360:	601a      	str	r2, [r3, #0]
  return result;
 8008362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008366:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800836a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800836c:	fab3 f383 	clz	r3, r3
 8008370:	b2db      	uxtb	r3, r3
 8008372:	095b      	lsrs	r3, r3, #5
 8008374:	b2db      	uxtb	r3, r3
 8008376:	f043 0302 	orr.w	r3, r3, #2
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d102      	bne.n	8008386 <HAL_RCC_OscConfig+0xb4e>
 8008380:	4b43      	ldr	r3, [pc, #268]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	e013      	b.n	80083ae <HAL_RCC_OscConfig+0xb76>
 8008386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800838a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800838e:	2202      	movs	r2, #2
 8008390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008396:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	fa93 f2a3 	rbit	r2, r3
 80083a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	4b39      	ldr	r3, [pc, #228]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 80083ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80083b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80083b6:	2102      	movs	r1, #2
 80083b8:	6011      	str	r1, [r2, #0]
 80083ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80083be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80083c2:	6812      	ldr	r2, [r2, #0]
 80083c4:	fa92 f1a2 	rbit	r1, r2
 80083c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80083cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80083d0:	6011      	str	r1, [r2, #0]
  return result;
 80083d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80083d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80083da:	6812      	ldr	r2, [r2, #0]
 80083dc:	fab2 f282 	clz	r2, r2
 80083e0:	b2d2      	uxtb	r2, r2
 80083e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	f002 021f 	and.w	r2, r2, #31
 80083ec:	2101      	movs	r1, #1
 80083ee:	fa01 f202 	lsl.w	r2, r1, r2
 80083f2:	4013      	ands	r3, r2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d184      	bne.n	8008302 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80083f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d105      	bne.n	800840c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008400:	4b23      	ldr	r3, [pc, #140]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	4a22      	ldr	r2, [pc, #136]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 8008406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800840a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800840c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008410:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 8242 	beq.w	80088a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800841e:	4b1c      	ldr	r3, [pc, #112]	; (8008490 <HAL_RCC_OscConfig+0xc58>)
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f003 030c 	and.w	r3, r3, #12
 8008426:	2b08      	cmp	r3, #8
 8008428:	f000 8213 	beq.w	8008852 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800842c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008430:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	2b02      	cmp	r3, #2
 800843a:	f040 8162 	bne.w	8008702 <HAL_RCC_OscConfig+0xeca>
 800843e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008442:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008446:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800844a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800844c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008450:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	fa93 f2a3 	rbit	r2, r3
 800845a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800845e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008462:	601a      	str	r2, [r3, #0]
  return result;
 8008464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008468:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800846c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800846e:	fab3 f383 	clz	r3, r3
 8008472:	b2db      	uxtb	r3, r3
 8008474:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008478:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	461a      	mov	r2, r3
 8008480:	2300      	movs	r3, #0
 8008482:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008484:	f7fd fdb6 	bl	8005ff4 <HAL_GetTick>
 8008488:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800848c:	e00c      	b.n	80084a8 <HAL_RCC_OscConfig+0xc70>
 800848e:	bf00      	nop
 8008490:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008494:	f7fd fdae 	bl	8005ff4 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d901      	bls.n	80084a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e1fd      	b.n	80088a4 <HAL_RCC_OscConfig+0x106c>
 80084a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80084b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80084b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	fa93 f2a3 	rbit	r2, r3
 80084c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80084cc:	601a      	str	r2, [r3, #0]
  return result;
 80084ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80084d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80084d8:	fab3 f383 	clz	r3, r3
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	095b      	lsrs	r3, r3, #5
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	f043 0301 	orr.w	r3, r3, #1
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d102      	bne.n	80084f2 <HAL_RCC_OscConfig+0xcba>
 80084ec:	4bb0      	ldr	r3, [pc, #704]	; (80087b0 <HAL_RCC_OscConfig+0xf78>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	e027      	b.n	8008542 <HAL_RCC_OscConfig+0xd0a>
 80084f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80084fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80084fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008504:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	fa93 f2a3 	rbit	r2, r3
 800850e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008512:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800851c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008520:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800852a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	fa93 f2a3 	rbit	r2, r3
 8008534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008538:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	4b9c      	ldr	r3, [pc, #624]	; (80087b0 <HAL_RCC_OscConfig+0xf78>)
 8008540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008542:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008546:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800854a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800854e:	6011      	str	r1, [r2, #0]
 8008550:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008554:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008558:	6812      	ldr	r2, [r2, #0]
 800855a:	fa92 f1a2 	rbit	r1, r2
 800855e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008562:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008566:	6011      	str	r1, [r2, #0]
  return result;
 8008568:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800856c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008570:	6812      	ldr	r2, [r2, #0]
 8008572:	fab2 f282 	clz	r2, r2
 8008576:	b2d2      	uxtb	r2, r2
 8008578:	f042 0220 	orr.w	r2, r2, #32
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	f002 021f 	and.w	r2, r2, #31
 8008582:	2101      	movs	r1, #1
 8008584:	fa01 f202 	lsl.w	r2, r1, r2
 8008588:	4013      	ands	r3, r2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d182      	bne.n	8008494 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800858e:	4b88      	ldr	r3, [pc, #544]	; (80087b0 <HAL_RCC_OscConfig+0xf78>)
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800859a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80085a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	430b      	orrs	r3, r1
 80085b0:	497f      	ldr	r1, [pc, #508]	; (80087b0 <HAL_RCC_OscConfig+0xf78>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	604b      	str	r3, [r1, #4]
 80085b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80085be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	fa93 f2a3 	rbit	r2, r3
 80085d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80085da:	601a      	str	r2, [r3, #0]
  return result;
 80085dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80085e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085e6:	fab3 f383 	clz	r3, r3
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80085f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	461a      	mov	r2, r3
 80085f8:	2301      	movs	r3, #1
 80085fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085fc:	f7fd fcfa 	bl	8005ff4 <HAL_GetTick>
 8008600:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008604:	e009      	b.n	800861a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008606:	f7fd fcf5 	bl	8005ff4 <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	2b02      	cmp	r3, #2
 8008614:	d901      	bls.n	800861a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e144      	b.n	80088a4 <HAL_RCC_OscConfig+0x106c>
 800861a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800861e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800862c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	fa93 f2a3 	rbit	r2, r3
 8008636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800863a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800863e:	601a      	str	r2, [r3, #0]
  return result;
 8008640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008644:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008648:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800864a:	fab3 f383 	clz	r3, r3
 800864e:	b2db      	uxtb	r3, r3
 8008650:	095b      	lsrs	r3, r3, #5
 8008652:	b2db      	uxtb	r3, r3
 8008654:	f043 0301 	orr.w	r3, r3, #1
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b01      	cmp	r3, #1
 800865c:	d102      	bne.n	8008664 <HAL_RCC_OscConfig+0xe2c>
 800865e:	4b54      	ldr	r3, [pc, #336]	; (80087b0 <HAL_RCC_OscConfig+0xf78>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	e027      	b.n	80086b4 <HAL_RCC_OscConfig+0xe7c>
 8008664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008668:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800866c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008676:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	fa93 f2a3 	rbit	r2, r3
 8008680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008684:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800868e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800869c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	fa93 f2a3 	rbit	r2, r3
 80086a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	4b3f      	ldr	r3, [pc, #252]	; (80087b0 <HAL_RCC_OscConfig+0xf78>)
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80086b8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80086bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80086c0:	6011      	str	r1, [r2, #0]
 80086c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80086c6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80086ca:	6812      	ldr	r2, [r2, #0]
 80086cc:	fa92 f1a2 	rbit	r1, r2
 80086d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80086d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80086d8:	6011      	str	r1, [r2, #0]
  return result;
 80086da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80086de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80086e2:	6812      	ldr	r2, [r2, #0]
 80086e4:	fab2 f282 	clz	r2, r2
 80086e8:	b2d2      	uxtb	r2, r2
 80086ea:	f042 0220 	orr.w	r2, r2, #32
 80086ee:	b2d2      	uxtb	r2, r2
 80086f0:	f002 021f 	and.w	r2, r2, #31
 80086f4:	2101      	movs	r1, #1
 80086f6:	fa01 f202 	lsl.w	r2, r1, r2
 80086fa:	4013      	ands	r3, r2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d082      	beq.n	8008606 <HAL_RCC_OscConfig+0xdce>
 8008700:	e0cf      	b.n	80088a2 <HAL_RCC_OscConfig+0x106a>
 8008702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008706:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800870a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800870e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008714:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	fa93 f2a3 	rbit	r2, r3
 800871e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008722:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008726:	601a      	str	r2, [r3, #0]
  return result;
 8008728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800872c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008730:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008732:	fab3 f383 	clz	r3, r3
 8008736:	b2db      	uxtb	r3, r3
 8008738:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800873c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	461a      	mov	r2, r3
 8008744:	2300      	movs	r3, #0
 8008746:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008748:	f7fd fc54 	bl	8005ff4 <HAL_GetTick>
 800874c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008750:	e009      	b.n	8008766 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008752:	f7fd fc4f 	bl	8005ff4 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	2b02      	cmp	r3, #2
 8008760:	d901      	bls.n	8008766 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e09e      	b.n	80088a4 <HAL_RCC_OscConfig+0x106c>
 8008766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800876a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800876e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008778:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	fa93 f2a3 	rbit	r2, r3
 8008782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008786:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800878a:	601a      	str	r2, [r3, #0]
  return result;
 800878c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008790:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008794:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008796:	fab3 f383 	clz	r3, r3
 800879a:	b2db      	uxtb	r3, r3
 800879c:	095b      	lsrs	r3, r3, #5
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	f043 0301 	orr.w	r3, r3, #1
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d104      	bne.n	80087b4 <HAL_RCC_OscConfig+0xf7c>
 80087aa:	4b01      	ldr	r3, [pc, #4]	; (80087b0 <HAL_RCC_OscConfig+0xf78>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	e029      	b.n	8008804 <HAL_RCC_OscConfig+0xfcc>
 80087b0:	40021000 	.word	0x40021000
 80087b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80087bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80087c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	fa93 f2a3 	rbit	r2, r3
 80087d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087de:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80087e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80087e6:	601a      	str	r2, [r3, #0]
 80087e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087ec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	fa93 f2a3 	rbit	r2, r3
 80087f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	4b2b      	ldr	r3, [pc, #172]	; (80088b0 <HAL_RCC_OscConfig+0x1078>)
 8008802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008808:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800880c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008810:	6011      	str	r1, [r2, #0]
 8008812:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008816:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800881a:	6812      	ldr	r2, [r2, #0]
 800881c:	fa92 f1a2 	rbit	r1, r2
 8008820:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008824:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008828:	6011      	str	r1, [r2, #0]
  return result;
 800882a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800882e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008832:	6812      	ldr	r2, [r2, #0]
 8008834:	fab2 f282 	clz	r2, r2
 8008838:	b2d2      	uxtb	r2, r2
 800883a:	f042 0220 	orr.w	r2, r2, #32
 800883e:	b2d2      	uxtb	r2, r2
 8008840:	f002 021f 	and.w	r2, r2, #31
 8008844:	2101      	movs	r1, #1
 8008846:	fa01 f202 	lsl.w	r2, r1, r2
 800884a:	4013      	ands	r3, r2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d180      	bne.n	8008752 <HAL_RCC_OscConfig+0xf1a>
 8008850:	e027      	b.n	80088a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d101      	bne.n	8008866 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e01e      	b.n	80088a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008866:	4b12      	ldr	r3, [pc, #72]	; (80088b0 <HAL_RCC_OscConfig+0x1078>)
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800886e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008872:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800887a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	429a      	cmp	r2, r3
 8008884:	d10b      	bne.n	800889e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008886:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800888a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800888e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800889a:	429a      	cmp	r2, r3
 800889c:	d001      	beq.n	80088a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e000      	b.n	80088a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	40021000 	.word	0x40021000

080088b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b09e      	sub	sp, #120	; 0x78
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e162      	b.n	8008b92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088cc:	4b90      	ldr	r3, [pc, #576]	; (8008b10 <HAL_RCC_ClockConfig+0x25c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0307 	and.w	r3, r3, #7
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d910      	bls.n	80088fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088da:	4b8d      	ldr	r3, [pc, #564]	; (8008b10 <HAL_RCC_ClockConfig+0x25c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f023 0207 	bic.w	r2, r3, #7
 80088e2:	498b      	ldr	r1, [pc, #556]	; (8008b10 <HAL_RCC_ClockConfig+0x25c>)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088ea:	4b89      	ldr	r3, [pc, #548]	; (8008b10 <HAL_RCC_ClockConfig+0x25c>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0307 	and.w	r3, r3, #7
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d001      	beq.n	80088fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e14a      	b.n	8008b92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d008      	beq.n	800891a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008908:	4b82      	ldr	r3, [pc, #520]	; (8008b14 <HAL_RCC_ClockConfig+0x260>)
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	497f      	ldr	r1, [pc, #508]	; (8008b14 <HAL_RCC_ClockConfig+0x260>)
 8008916:	4313      	orrs	r3, r2
 8008918:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 80dc 	beq.w	8008ae0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d13c      	bne.n	80089aa <HAL_RCC_ClockConfig+0xf6>
 8008930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008934:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008938:	fa93 f3a3 	rbit	r3, r3
 800893c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800893e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008940:	fab3 f383 	clz	r3, r3
 8008944:	b2db      	uxtb	r3, r3
 8008946:	095b      	lsrs	r3, r3, #5
 8008948:	b2db      	uxtb	r3, r3
 800894a:	f043 0301 	orr.w	r3, r3, #1
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b01      	cmp	r3, #1
 8008952:	d102      	bne.n	800895a <HAL_RCC_ClockConfig+0xa6>
 8008954:	4b6f      	ldr	r3, [pc, #444]	; (8008b14 <HAL_RCC_ClockConfig+0x260>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	e00f      	b.n	800897a <HAL_RCC_ClockConfig+0xc6>
 800895a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800895e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008962:	fa93 f3a3 	rbit	r3, r3
 8008966:	667b      	str	r3, [r7, #100]	; 0x64
 8008968:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800896c:	663b      	str	r3, [r7, #96]	; 0x60
 800896e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008970:	fa93 f3a3 	rbit	r3, r3
 8008974:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008976:	4b67      	ldr	r3, [pc, #412]	; (8008b14 <HAL_RCC_ClockConfig+0x260>)
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800897e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008980:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008982:	fa92 f2a2 	rbit	r2, r2
 8008986:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008988:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800898a:	fab2 f282 	clz	r2, r2
 800898e:	b2d2      	uxtb	r2, r2
 8008990:	f042 0220 	orr.w	r2, r2, #32
 8008994:	b2d2      	uxtb	r2, r2
 8008996:	f002 021f 	and.w	r2, r2, #31
 800899a:	2101      	movs	r1, #1
 800899c:	fa01 f202 	lsl.w	r2, r1, r2
 80089a0:	4013      	ands	r3, r2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d17b      	bne.n	8008a9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e0f3      	b.n	8008b92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d13c      	bne.n	8008a2c <HAL_RCC_ClockConfig+0x178>
 80089b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089ba:	fa93 f3a3 	rbit	r3, r3
 80089be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80089c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089c2:	fab3 f383 	clz	r3, r3
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	095b      	lsrs	r3, r3, #5
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	f043 0301 	orr.w	r3, r3, #1
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d102      	bne.n	80089dc <HAL_RCC_ClockConfig+0x128>
 80089d6:	4b4f      	ldr	r3, [pc, #316]	; (8008b14 <HAL_RCC_ClockConfig+0x260>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	e00f      	b.n	80089fc <HAL_RCC_ClockConfig+0x148>
 80089dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089e4:	fa93 f3a3 	rbit	r3, r3
 80089e8:	647b      	str	r3, [r7, #68]	; 0x44
 80089ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089ee:	643b      	str	r3, [r7, #64]	; 0x40
 80089f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089f2:	fa93 f3a3 	rbit	r3, r3
 80089f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089f8:	4b46      	ldr	r3, [pc, #280]	; (8008b14 <HAL_RCC_ClockConfig+0x260>)
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008a00:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a04:	fa92 f2a2 	rbit	r2, r2
 8008a08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a0c:	fab2 f282 	clz	r2, r2
 8008a10:	b2d2      	uxtb	r2, r2
 8008a12:	f042 0220 	orr.w	r2, r2, #32
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	f002 021f 	and.w	r2, r2, #31
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8008a22:	4013      	ands	r3, r2
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d13a      	bne.n	8008a9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e0b2      	b.n	8008b92 <HAL_RCC_ClockConfig+0x2de>
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a32:	fa93 f3a3 	rbit	r3, r3
 8008a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a3a:	fab3 f383 	clz	r3, r3
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	095b      	lsrs	r3, r3, #5
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f043 0301 	orr.w	r3, r3, #1
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d102      	bne.n	8008a54 <HAL_RCC_ClockConfig+0x1a0>
 8008a4e:	4b31      	ldr	r3, [pc, #196]	; (8008b14 <HAL_RCC_ClockConfig+0x260>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	e00d      	b.n	8008a70 <HAL_RCC_ClockConfig+0x1bc>
 8008a54:	2302      	movs	r3, #2
 8008a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	fa93 f3a3 	rbit	r3, r3
 8008a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a60:	2302      	movs	r3, #2
 8008a62:	623b      	str	r3, [r7, #32]
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	fa93 f3a3 	rbit	r3, r3
 8008a6a:	61fb      	str	r3, [r7, #28]
 8008a6c:	4b29      	ldr	r3, [pc, #164]	; (8008b14 <HAL_RCC_ClockConfig+0x260>)
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a70:	2202      	movs	r2, #2
 8008a72:	61ba      	str	r2, [r7, #24]
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	fa92 f2a2 	rbit	r2, r2
 8008a7a:	617a      	str	r2, [r7, #20]
  return result;
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	fab2 f282 	clz	r2, r2
 8008a82:	b2d2      	uxtb	r2, r2
 8008a84:	f042 0220 	orr.w	r2, r2, #32
 8008a88:	b2d2      	uxtb	r2, r2
 8008a8a:	f002 021f 	and.w	r2, r2, #31
 8008a8e:	2101      	movs	r1, #1
 8008a90:	fa01 f202 	lsl.w	r2, r1, r2
 8008a94:	4013      	ands	r3, r2
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e079      	b.n	8008b92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a9e:	4b1d      	ldr	r3, [pc, #116]	; (8008b14 <HAL_RCC_ClockConfig+0x260>)
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f023 0203 	bic.w	r2, r3, #3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	491a      	ldr	r1, [pc, #104]	; (8008b14 <HAL_RCC_ClockConfig+0x260>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ab0:	f7fd faa0 	bl	8005ff4 <HAL_GetTick>
 8008ab4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ab6:	e00a      	b.n	8008ace <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ab8:	f7fd fa9c 	bl	8005ff4 <HAL_GetTick>
 8008abc:	4602      	mov	r2, r0
 8008abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d901      	bls.n	8008ace <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e061      	b.n	8008b92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ace:	4b11      	ldr	r3, [pc, #68]	; (8008b14 <HAL_RCC_ClockConfig+0x260>)
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f003 020c 	and.w	r2, r3, #12
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d1eb      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ae0:	4b0b      	ldr	r3, [pc, #44]	; (8008b10 <HAL_RCC_ClockConfig+0x25c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0307 	and.w	r3, r3, #7
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d214      	bcs.n	8008b18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aee:	4b08      	ldr	r3, [pc, #32]	; (8008b10 <HAL_RCC_ClockConfig+0x25c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f023 0207 	bic.w	r2, r3, #7
 8008af6:	4906      	ldr	r1, [pc, #24]	; (8008b10 <HAL_RCC_ClockConfig+0x25c>)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008afe:	4b04      	ldr	r3, [pc, #16]	; (8008b10 <HAL_RCC_ClockConfig+0x25c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0307 	and.w	r3, r3, #7
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d005      	beq.n	8008b18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e040      	b.n	8008b92 <HAL_RCC_ClockConfig+0x2de>
 8008b10:	40022000 	.word	0x40022000
 8008b14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0304 	and.w	r3, r3, #4
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d008      	beq.n	8008b36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b24:	4b1d      	ldr	r3, [pc, #116]	; (8008b9c <HAL_RCC_ClockConfig+0x2e8>)
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	491a      	ldr	r1, [pc, #104]	; (8008b9c <HAL_RCC_ClockConfig+0x2e8>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 0308 	and.w	r3, r3, #8
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d009      	beq.n	8008b56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b42:	4b16      	ldr	r3, [pc, #88]	; (8008b9c <HAL_RCC_ClockConfig+0x2e8>)
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	00db      	lsls	r3, r3, #3
 8008b50:	4912      	ldr	r1, [pc, #72]	; (8008b9c <HAL_RCC_ClockConfig+0x2e8>)
 8008b52:	4313      	orrs	r3, r2
 8008b54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008b56:	f000 f829 	bl	8008bac <HAL_RCC_GetSysClockFreq>
 8008b5a:	4601      	mov	r1, r0
 8008b5c:	4b0f      	ldr	r3, [pc, #60]	; (8008b9c <HAL_RCC_ClockConfig+0x2e8>)
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b64:	22f0      	movs	r2, #240	; 0xf0
 8008b66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	fa92 f2a2 	rbit	r2, r2
 8008b6e:	60fa      	str	r2, [r7, #12]
  return result;
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	fab2 f282 	clz	r2, r2
 8008b76:	b2d2      	uxtb	r2, r2
 8008b78:	40d3      	lsrs	r3, r2
 8008b7a:	4a09      	ldr	r2, [pc, #36]	; (8008ba0 <HAL_RCC_ClockConfig+0x2ec>)
 8008b7c:	5cd3      	ldrb	r3, [r2, r3]
 8008b7e:	fa21 f303 	lsr.w	r3, r1, r3
 8008b82:	4a08      	ldr	r2, [pc, #32]	; (8008ba4 <HAL_RCC_ClockConfig+0x2f0>)
 8008b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008b86:	4b08      	ldr	r3, [pc, #32]	; (8008ba8 <HAL_RCC_ClockConfig+0x2f4>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fd f9ee 	bl	8005f6c <HAL_InitTick>
  
  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3778      	adds	r7, #120	; 0x78
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	40021000 	.word	0x40021000
 8008ba0:	0800df00 	.word	0x0800df00
 8008ba4:	20000058 	.word	0x20000058
 8008ba8:	20000064 	.word	0x20000064

08008bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b08b      	sub	sp, #44	; 0x2c
 8008bb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	61fb      	str	r3, [r7, #28]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	61bb      	str	r3, [r7, #24]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008bc6:	4b29      	ldr	r3, [pc, #164]	; (8008c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	f003 030c 	and.w	r3, r3, #12
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d002      	beq.n	8008bdc <HAL_RCC_GetSysClockFreq+0x30>
 8008bd6:	2b08      	cmp	r3, #8
 8008bd8:	d003      	beq.n	8008be2 <HAL_RCC_GetSysClockFreq+0x36>
 8008bda:	e03c      	b.n	8008c56 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008bdc:	4b24      	ldr	r3, [pc, #144]	; (8008c70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008bde:	623b      	str	r3, [r7, #32]
      break;
 8008be0:	e03c      	b.n	8008c5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008be8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008bec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	fa92 f2a2 	rbit	r2, r2
 8008bf4:	607a      	str	r2, [r7, #4]
  return result;
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	fab2 f282 	clz	r2, r2
 8008bfc:	b2d2      	uxtb	r2, r2
 8008bfe:	40d3      	lsrs	r3, r2
 8008c00:	4a1c      	ldr	r2, [pc, #112]	; (8008c74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008c02:	5cd3      	ldrb	r3, [r2, r3]
 8008c04:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008c06:	4b19      	ldr	r3, [pc, #100]	; (8008c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0a:	f003 030f 	and.w	r3, r3, #15
 8008c0e:	220f      	movs	r2, #15
 8008c10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	fa92 f2a2 	rbit	r2, r2
 8008c18:	60fa      	str	r2, [r7, #12]
  return result;
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	fab2 f282 	clz	r2, r2
 8008c20:	b2d2      	uxtb	r2, r2
 8008c22:	40d3      	lsrs	r3, r2
 8008c24:	4a14      	ldr	r2, [pc, #80]	; (8008c78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008c26:	5cd3      	ldrb	r3, [r2, r3]
 8008c28:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d008      	beq.n	8008c46 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008c34:	4a0e      	ldr	r2, [pc, #56]	; (8008c70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	fb02 f303 	mul.w	r3, r2, r3
 8008c42:	627b      	str	r3, [r7, #36]	; 0x24
 8008c44:	e004      	b.n	8008c50 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	4a0c      	ldr	r2, [pc, #48]	; (8008c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8008c4a:	fb02 f303 	mul.w	r3, r2, r3
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	623b      	str	r3, [r7, #32]
      break;
 8008c54:	e002      	b.n	8008c5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008c56:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008c58:	623b      	str	r3, [r7, #32]
      break;
 8008c5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	372c      	adds	r7, #44	; 0x2c
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	40021000 	.word	0x40021000
 8008c70:	007a1200 	.word	0x007a1200
 8008c74:	0800df18 	.word	0x0800df18
 8008c78:	0800df28 	.word	0x0800df28
 8008c7c:	003d0900 	.word	0x003d0900

08008c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c84:	4b03      	ldr	r3, [pc, #12]	; (8008c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c86:	681b      	ldr	r3, [r3, #0]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	20000058 	.word	0x20000058

08008c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008c9e:	f7ff ffef 	bl	8008c80 <HAL_RCC_GetHCLKFreq>
 8008ca2:	4601      	mov	r1, r0
 8008ca4:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008cb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	fa92 f2a2 	rbit	r2, r2
 8008cb8:	603a      	str	r2, [r7, #0]
  return result;
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	fab2 f282 	clz	r2, r2
 8008cc0:	b2d2      	uxtb	r2, r2
 8008cc2:	40d3      	lsrs	r3, r2
 8008cc4:	4a04      	ldr	r2, [pc, #16]	; (8008cd8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008cc6:	5cd3      	ldrb	r3, [r2, r3]
 8008cc8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	40021000 	.word	0x40021000
 8008cd8:	0800df10 	.word	0x0800df10

08008cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008ce2:	f7ff ffcd 	bl	8008c80 <HAL_RCC_GetHCLKFreq>
 8008ce6:	4601      	mov	r1, r0
 8008ce8:	4b0b      	ldr	r3, [pc, #44]	; (8008d18 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008cf0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008cf4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	fa92 f2a2 	rbit	r2, r2
 8008cfc:	603a      	str	r2, [r7, #0]
  return result;
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	fab2 f282 	clz	r2, r2
 8008d04:	b2d2      	uxtb	r2, r2
 8008d06:	40d3      	lsrs	r3, r2
 8008d08:	4a04      	ldr	r2, [pc, #16]	; (8008d1c <HAL_RCC_GetPCLK2Freq+0x40>)
 8008d0a:	5cd3      	ldrb	r3, [r2, r3]
 8008d0c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	40021000 	.word	0x40021000
 8008d1c:	0800df10 	.word	0x0800df10

08008d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b092      	sub	sp, #72	; 0x48
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008d30:	2300      	movs	r3, #0
 8008d32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f000 80d4 	beq.w	8008eec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d44:	4b4e      	ldr	r3, [pc, #312]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10e      	bne.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d50:	4b4b      	ldr	r3, [pc, #300]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	4a4a      	ldr	r2, [pc, #296]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d5a:	61d3      	str	r3, [r2, #28]
 8008d5c:	4b48      	ldr	r3, [pc, #288]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d64:	60bb      	str	r3, [r7, #8]
 8008d66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d6e:	4b45      	ldr	r3, [pc, #276]	; (8008e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d118      	bne.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d7a:	4b42      	ldr	r3, [pc, #264]	; (8008e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a41      	ldr	r2, [pc, #260]	; (8008e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d86:	f7fd f935 	bl	8005ff4 <HAL_GetTick>
 8008d8a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d8c:	e008      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d8e:	f7fd f931 	bl	8005ff4 <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	2b64      	cmp	r3, #100	; 0x64
 8008d9a:	d901      	bls.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e13c      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008da0:	4b38      	ldr	r3, [pc, #224]	; (8008e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d0f0      	beq.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008dac:	4b34      	ldr	r3, [pc, #208]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dae:	6a1b      	ldr	r3, [r3, #32]
 8008db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008db4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 8084 	beq.w	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d07c      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008dcc:	4b2c      	ldr	r3, [pc, #176]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	fa93 f3a3 	rbit	r3, r3
 8008de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008de6:	fab3 f383 	clz	r3, r3
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	461a      	mov	r2, r3
 8008dee:	4b26      	ldr	r3, [pc, #152]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008df0:	4413      	add	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	461a      	mov	r2, r3
 8008df6:	2301      	movs	r3, #1
 8008df8:	6013      	str	r3, [r2, #0]
 8008dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e02:	fa93 f3a3 	rbit	r3, r3
 8008e06:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e0a:	fab3 f383 	clz	r3, r3
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	461a      	mov	r2, r3
 8008e12:	4b1d      	ldr	r3, [pc, #116]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	461a      	mov	r2, r3
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008e1e:	4a18      	ldr	r2, [pc, #96]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e22:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d04b      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e2e:	f7fd f8e1 	bl	8005ff4 <HAL_GetTick>
 8008e32:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e34:	e00a      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e36:	f7fd f8dd 	bl	8005ff4 <HAL_GetTick>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d901      	bls.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e0e6      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e52:	fa93 f3a3 	rbit	r3, r3
 8008e56:	627b      	str	r3, [r7, #36]	; 0x24
 8008e58:	2302      	movs	r3, #2
 8008e5a:	623b      	str	r3, [r7, #32]
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	fa93 f3a3 	rbit	r3, r3
 8008e62:	61fb      	str	r3, [r7, #28]
  return result;
 8008e64:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e66:	fab3 f383 	clz	r3, r3
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	095b      	lsrs	r3, r3, #5
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	f043 0302 	orr.w	r3, r3, #2
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d108      	bne.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008e7a:	4b01      	ldr	r3, [pc, #4]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	e00d      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008e80:	40021000 	.word	0x40021000
 8008e84:	40007000 	.word	0x40007000
 8008e88:	10908100 	.word	0x10908100
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	fa93 f3a3 	rbit	r3, r3
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	4b62      	ldr	r3, [pc, #392]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	613a      	str	r2, [r7, #16]
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	fa92 f2a2 	rbit	r2, r2
 8008ea6:	60fa      	str	r2, [r7, #12]
  return result;
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	fab2 f282 	clz	r2, r2
 8008eae:	b2d2      	uxtb	r2, r2
 8008eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eb4:	b2d2      	uxtb	r2, r2
 8008eb6:	f002 021f 	and.w	r2, r2, #31
 8008eba:	2101      	movs	r1, #1
 8008ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d0b7      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008ec6:	4b57      	ldr	r3, [pc, #348]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	4954      	ldr	r1, [pc, #336]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008ed8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d105      	bne.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ee0:	4b50      	ldr	r3, [pc, #320]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	4a4f      	ldr	r2, [pc, #316]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008eea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d008      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ef8:	4b4a      	ldr	r3, [pc, #296]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efc:	f023 0203 	bic.w	r2, r3, #3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	4947      	ldr	r1, [pc, #284]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0320 	and.w	r3, r3, #32
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d008      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008f16:	4b43      	ldr	r3, [pc, #268]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	f023 0210 	bic.w	r2, r3, #16
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	4940      	ldr	r1, [pc, #256]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d008      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008f34:	4b3b      	ldr	r3, [pc, #236]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f38:	f023 0220 	bic.w	r2, r3, #32
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	4938      	ldr	r1, [pc, #224]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d008      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008f52:	4b34      	ldr	r3, [pc, #208]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f56:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	4931      	ldr	r1, [pc, #196]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d008      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008f70:	4b2c      	ldr	r3, [pc, #176]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	69db      	ldr	r3, [r3, #28]
 8008f7c:	4929      	ldr	r1, [pc, #164]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d008      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8008f8e:	4b25      	ldr	r3, [pc, #148]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f92:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	4922      	ldr	r1, [pc, #136]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d008      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008fac:	4b1d      	ldr	r3, [pc, #116]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a1b      	ldr	r3, [r3, #32]
 8008fb8:	491a      	ldr	r1, [pc, #104]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d008      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008fca:	4b16      	ldr	r3, [pc, #88]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	4913      	ldr	r1, [pc, #76]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d008      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8008fe8:	4b0e      	ldr	r3, [pc, #56]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff4:	490b      	ldr	r1, [pc, #44]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d008      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8009006:	4b07      	ldr	r3, [pc, #28]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009012:	4904      	ldr	r1, [pc, #16]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009014:	4313      	orrs	r3, r2
 8009016:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3748      	adds	r7, #72	; 0x48
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	40021000 	.word	0x40021000

08009028 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e09d      	b.n	8009176 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	2b00      	cmp	r3, #0
 8009040:	d108      	bne.n	8009054 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800904a:	d009      	beq.n	8009060 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	61da      	str	r2, [r3, #28]
 8009052:	e005      	b.n	8009060 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	d106      	bne.n	8009080 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7fb fd94 	bl	8004ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2202      	movs	r2, #2
 8009084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009096:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090a0:	d902      	bls.n	80090a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80090a2:	2300      	movs	r3, #0
 80090a4:	60fb      	str	r3, [r7, #12]
 80090a6:	e002      	b.n	80090ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80090a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80090b6:	d007      	beq.n	80090c8 <HAL_SPI_Init+0xa0>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090c0:	d002      	beq.n	80090c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80090d8:	431a      	orrs	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	431a      	orrs	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	431a      	orrs	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090f6:	431a      	orrs	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	69db      	ldr	r3, [r3, #28]
 80090fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009100:	431a      	orrs	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800910a:	ea42 0103 	orr.w	r1, r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009112:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	430a      	orrs	r2, r1
 800911c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	0c1b      	lsrs	r3, r3, #16
 8009124:	f003 0204 	and.w	r2, r3, #4
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	f003 0310 	and.w	r3, r3, #16
 8009130:	431a      	orrs	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009136:	f003 0308 	and.w	r3, r3, #8
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009144:	ea42 0103 	orr.w	r1, r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	430a      	orrs	r2, r1
 8009154:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	69da      	ldr	r2, [r3, #28]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009164:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b088      	sub	sp, #32
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	603b      	str	r3, [r7, #0]
 800918a:	4613      	mov	r3, r2
 800918c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009198:	2b01      	cmp	r3, #1
 800919a:	d101      	bne.n	80091a0 <HAL_SPI_Transmit+0x22>
 800919c:	2302      	movs	r3, #2
 800919e:	e15f      	b.n	8009460 <HAL_SPI_Transmit+0x2e2>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091a8:	f7fc ff24 	bl	8005ff4 <HAL_GetTick>
 80091ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80091ae:	88fb      	ldrh	r3, [r7, #6]
 80091b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d002      	beq.n	80091c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80091be:	2302      	movs	r3, #2
 80091c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091c2:	e148      	b.n	8009456 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <HAL_SPI_Transmit+0x52>
 80091ca:	88fb      	ldrh	r3, [r7, #6]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d102      	bne.n	80091d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091d4:	e13f      	b.n	8009456 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2203      	movs	r2, #3
 80091da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	88fa      	ldrh	r2, [r7, #6]
 80091ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	88fa      	ldrh	r2, [r7, #6]
 80091f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009220:	d10f      	bne.n	8009242 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009230:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009240:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800924c:	2b40      	cmp	r3, #64	; 0x40
 800924e:	d007      	beq.n	8009260 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800925e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009268:	d94f      	bls.n	800930a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <HAL_SPI_Transmit+0xfa>
 8009272:	8afb      	ldrh	r3, [r7, #22]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d142      	bne.n	80092fe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927c:	881a      	ldrh	r2, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009288:	1c9a      	adds	r2, r3, #2
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009292:	b29b      	uxth	r3, r3
 8009294:	3b01      	subs	r3, #1
 8009296:	b29a      	uxth	r2, r3
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800929c:	e02f      	b.n	80092fe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f003 0302 	and.w	r3, r3, #2
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d112      	bne.n	80092d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b0:	881a      	ldrh	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092bc:	1c9a      	adds	r2, r3, #2
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	3b01      	subs	r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092d0:	e015      	b.n	80092fe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092d2:	f7fc fe8f 	bl	8005ff4 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d803      	bhi.n	80092ea <HAL_SPI_Transmit+0x16c>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e8:	d102      	bne.n	80092f0 <HAL_SPI_Transmit+0x172>
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d106      	bne.n	80092fe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80092fc:	e0ab      	b.n	8009456 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009302:	b29b      	uxth	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1ca      	bne.n	800929e <HAL_SPI_Transmit+0x120>
 8009308:	e080      	b.n	800940c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <HAL_SPI_Transmit+0x19a>
 8009312:	8afb      	ldrh	r3, [r7, #22]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d174      	bne.n	8009402 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800931c:	b29b      	uxth	r3, r3
 800931e:	2b01      	cmp	r3, #1
 8009320:	d912      	bls.n	8009348 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009326:	881a      	ldrh	r2, [r3, #0]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009332:	1c9a      	adds	r2, r3, #2
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800933c:	b29b      	uxth	r3, r3
 800933e:	3b02      	subs	r3, #2
 8009340:	b29a      	uxth	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009346:	e05c      	b.n	8009402 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	330c      	adds	r3, #12
 8009352:	7812      	ldrb	r2, [r2, #0]
 8009354:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009364:	b29b      	uxth	r3, r3
 8009366:	3b01      	subs	r3, #1
 8009368:	b29a      	uxth	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800936e:	e048      	b.n	8009402 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f003 0302 	and.w	r3, r3, #2
 800937a:	2b02      	cmp	r3, #2
 800937c:	d12b      	bne.n	80093d6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009382:	b29b      	uxth	r3, r3
 8009384:	2b01      	cmp	r3, #1
 8009386:	d912      	bls.n	80093ae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938c:	881a      	ldrh	r2, [r3, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009398:	1c9a      	adds	r2, r3, #2
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	3b02      	subs	r3, #2
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093ac:	e029      	b.n	8009402 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	330c      	adds	r3, #12
 80093b8:	7812      	ldrb	r2, [r2, #0]
 80093ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	3b01      	subs	r3, #1
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093d4:	e015      	b.n	8009402 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093d6:	f7fc fe0d 	bl	8005ff4 <HAL_GetTick>
 80093da:	4602      	mov	r2, r0
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d803      	bhi.n	80093ee <HAL_SPI_Transmit+0x270>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ec:	d102      	bne.n	80093f4 <HAL_SPI_Transmit+0x276>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d106      	bne.n	8009402 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8009400:	e029      	b.n	8009456 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009406:	b29b      	uxth	r3, r3
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1b1      	bne.n	8009370 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 fbd7 	bl	8009bc4 <SPI_EndRxTxTransaction>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2220      	movs	r2, #32
 8009420:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10a      	bne.n	8009440 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800942a:	2300      	movs	r3, #0
 800942c:	613b      	str	r3, [r7, #16]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	613b      	str	r3, [r7, #16]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	613b      	str	r3, [r7, #16]
 800943e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	77fb      	strb	r3, [r7, #31]
 800944c:	e003      	b.n	8009456 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800945e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3720      	adds	r7, #32
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009480:	2b01      	cmp	r3, #1
 8009482:	d101      	bne.n	8009488 <HAL_SPI_Transmit_DMA+0x20>
 8009484:	2302      	movs	r3, #2
 8009486:	e0d4      	b.n	8009632 <HAL_SPI_Transmit_DMA+0x1ca>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b01      	cmp	r3, #1
 800949a:	d002      	beq.n	80094a2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800949c:	2302      	movs	r3, #2
 800949e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80094a0:	e0c2      	b.n	8009628 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <HAL_SPI_Transmit_DMA+0x46>
 80094a8:	88fb      	ldrh	r3, [r7, #6]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d102      	bne.n	80094b4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80094b2:	e0b9      	b.n	8009628 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2203      	movs	r2, #3
 80094b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	88fa      	ldrh	r2, [r7, #6]
 80094cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	88fa      	ldrh	r2, [r7, #6]
 80094d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094fe:	d10f      	bne.n	8009520 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800950e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800951e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009524:	4a45      	ldr	r2, [pc, #276]	; (800963c <HAL_SPI_Transmit_DMA+0x1d4>)
 8009526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800952c:	4a44      	ldr	r2, [pc, #272]	; (8009640 <HAL_SPI_Transmit_DMA+0x1d8>)
 800952e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009534:	4a43      	ldr	r2, [pc, #268]	; (8009644 <HAL_SPI_Transmit_DMA+0x1dc>)
 8009536:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800953c:	2200      	movs	r2, #0
 800953e:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800954e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009558:	d82d      	bhi.n	80095b6 <HAL_SPI_Transmit_DMA+0x14e>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009564:	d127      	bne.n	80095b6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800956a:	b29b      	uxth	r3, r3
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10f      	bne.n	8009594 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685a      	ldr	r2, [r3, #4]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009582:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009588:	b29b      	uxth	r3, r3
 800958a:	085b      	lsrs	r3, r3, #1
 800958c:	b29a      	uxth	r2, r3
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009592:	e010      	b.n	80095b6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095a2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	085b      	lsrs	r3, r3, #1
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	3301      	adds	r3, #1
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095be:	4619      	mov	r1, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	330c      	adds	r3, #12
 80095c6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095cc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80095ce:	f7fc fe99 	bl	8006304 <HAL_DMA_Start_IT>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d008      	beq.n	80095ea <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095dc:	f043 0210 	orr.w	r2, r3, #16
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	75fb      	strb	r3, [r7, #23]

    goto error;
 80095e8:	e01e      	b.n	8009628 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f4:	2b40      	cmp	r3, #64	; 0x40
 80095f6:	d007      	beq.n	8009608 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009606:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0220 	orr.w	r2, r2, #32
 8009616:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0202 	orr.w	r2, r2, #2
 8009626:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009630:	7dfb      	ldrb	r3, [r7, #23]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	08009903 	.word	0x08009903
 8009640:	0800985d 	.word	0x0800985d
 8009644:	0800991f 	.word	0x0800991f

08009648 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	099b      	lsrs	r3, r3, #6
 8009664:	f003 0301 	and.w	r3, r3, #1
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10f      	bne.n	800968c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00a      	beq.n	800968c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	099b      	lsrs	r3, r3, #6
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	2b00      	cmp	r3, #0
 8009680:	d004      	beq.n	800968c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	4798      	blx	r3
    return;
 800968a:	e0d7      	b.n	800983c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	085b      	lsrs	r3, r3, #1
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00a      	beq.n	80096ae <HAL_SPI_IRQHandler+0x66>
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	09db      	lsrs	r3, r3, #7
 800969c:	f003 0301 	and.w	r3, r3, #1
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d004      	beq.n	80096ae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	4798      	blx	r3
    return;
 80096ac:	e0c6      	b.n	800983c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	095b      	lsrs	r3, r3, #5
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10c      	bne.n	80096d4 <HAL_SPI_IRQHandler+0x8c>
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	099b      	lsrs	r3, r3, #6
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d106      	bne.n	80096d4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	0a1b      	lsrs	r3, r3, #8
 80096ca:	f003 0301 	and.w	r3, r3, #1
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 80b4 	beq.w	800983c <HAL_SPI_IRQHandler+0x1f4>
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	095b      	lsrs	r3, r3, #5
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 80ad 	beq.w	800983c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	099b      	lsrs	r3, r3, #6
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d023      	beq.n	8009736 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b03      	cmp	r3, #3
 80096f8:	d011      	beq.n	800971e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096fe:	f043 0204 	orr.w	r2, r3, #4
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009706:	2300      	movs	r3, #0
 8009708:	617b      	str	r3, [r7, #20]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	617b      	str	r3, [r7, #20]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	617b      	str	r3, [r7, #20]
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	e00b      	b.n	8009736 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800971e:	2300      	movs	r3, #0
 8009720:	613b      	str	r3, [r7, #16]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	613b      	str	r3, [r7, #16]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	613b      	str	r3, [r7, #16]
 8009732:	693b      	ldr	r3, [r7, #16]
        return;
 8009734:	e082      	b.n	800983c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	095b      	lsrs	r3, r3, #5
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d014      	beq.n	800976c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009746:	f043 0201 	orr.w	r2, r3, #1
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800974e:	2300      	movs	r3, #0
 8009750:	60fb      	str	r3, [r7, #12]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	60fb      	str	r3, [r7, #12]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	0a1b      	lsrs	r3, r3, #8
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00c      	beq.n	8009792 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800977c:	f043 0208 	orr.w	r2, r3, #8
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009784:	2300      	movs	r3, #0
 8009786:	60bb      	str	r3, [r7, #8]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	60bb      	str	r3, [r7, #8]
 8009790:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009796:	2b00      	cmp	r3, #0
 8009798:	d04f      	beq.n	800983a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	685a      	ldr	r2, [r3, #4]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80097a8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	f003 0302 	and.w	r3, r3, #2
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <HAL_SPI_IRQHandler+0x17e>
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d034      	beq.n	8009830 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0203 	bic.w	r2, r2, #3
 80097d4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d011      	beq.n	8009802 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e2:	4a18      	ldr	r2, [pc, #96]	; (8009844 <HAL_SPI_IRQHandler+0x1fc>)
 80097e4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fc fe22 	bl	8006434 <HAL_DMA_Abort_IT>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d005      	beq.n	8009802 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009806:	2b00      	cmp	r3, #0
 8009808:	d016      	beq.n	8009838 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800980e:	4a0d      	ldr	r2, [pc, #52]	; (8009844 <HAL_SPI_IRQHandler+0x1fc>)
 8009810:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009816:	4618      	mov	r0, r3
 8009818:	f7fc fe0c 	bl	8006434 <HAL_DMA_Abort_IT>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00a      	beq.n	8009838 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009826:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800982e:	e003      	b.n	8009838 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7fb fd93 	bl	800535c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009836:	e000      	b.n	800983a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009838:	bf00      	nop
    return;
 800983a:	bf00      	nop
  }
}
 800983c:	3720      	adds	r7, #32
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	0800995f 	.word	0x0800995f

08009848 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800986a:	f7fc fbc3 	bl	8005ff4 <HAL_GetTick>
 800986e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0320 	and.w	r3, r3, #32
 800987a:	2b20      	cmp	r3, #32
 800987c:	d03b      	beq.n	80098f6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	685a      	ldr	r2, [r3, #4]
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f022 0220 	bic.w	r2, r2, #32
 800988c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f022 0202 	bic.w	r2, r2, #2
 800989c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	2164      	movs	r1, #100	; 0x64
 80098a2:	6978      	ldr	r0, [r7, #20]
 80098a4:	f000 f98e 	bl	8009bc4 <SPI_EndRxTxTransaction>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d005      	beq.n	80098ba <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b2:	f043 0220 	orr.w	r2, r3, #32
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10a      	bne.n	80098d8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098c2:	2300      	movs	r3, #0
 80098c4:	60fb      	str	r3, [r7, #12]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	60fb      	str	r3, [r7, #12]
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	60fb      	str	r3, [r7, #12]
 80098d6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	2200      	movs	r2, #0
 80098dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80098ee:	6978      	ldr	r0, [r7, #20]
 80098f0:	f7fb fd34 	bl	800535c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80098f4:	e002      	b.n	80098fc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80098f6:	6978      	ldr	r0, [r7, #20]
 80098f8:	f7fb fd46 	bl	8005388 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f7ff ff99 	bl	8009848 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009916:	bf00      	nop
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685a      	ldr	r2, [r3, #4]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 0203 	bic.w	r2, r2, #3
 800993a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009940:	f043 0210 	orr.w	r2, r3, #16
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f7fb fd03 	bl	800535c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009956:	bf00      	nop
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b084      	sub	sp, #16
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7fb fcee 	bl	800535c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009980:	bf00      	nop
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b088      	sub	sp, #32
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	603b      	str	r3, [r7, #0]
 8009994:	4613      	mov	r3, r2
 8009996:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009998:	f7fc fb2c 	bl	8005ff4 <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a0:	1a9b      	subs	r3, r3, r2
 80099a2:	683a      	ldr	r2, [r7, #0]
 80099a4:	4413      	add	r3, r2
 80099a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80099a8:	f7fc fb24 	bl	8005ff4 <HAL_GetTick>
 80099ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80099ae:	4b39      	ldr	r3, [pc, #228]	; (8009a94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	015b      	lsls	r3, r3, #5
 80099b4:	0d1b      	lsrs	r3, r3, #20
 80099b6:	69fa      	ldr	r2, [r7, #28]
 80099b8:	fb02 f303 	mul.w	r3, r2, r3
 80099bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099be:	e054      	b.n	8009a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c6:	d050      	beq.n	8009a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80099c8:	f7fc fb14 	bl	8005ff4 <HAL_GetTick>
 80099cc:	4602      	mov	r2, r0
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	69fa      	ldr	r2, [r7, #28]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d902      	bls.n	80099de <SPI_WaitFlagStateUntilTimeout+0x56>
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d13d      	bne.n	8009a5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099f6:	d111      	bne.n	8009a1c <SPI_WaitFlagStateUntilTimeout+0x94>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a00:	d004      	beq.n	8009a0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a0a:	d107      	bne.n	8009a1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a24:	d10f      	bne.n	8009a46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a34:	601a      	str	r2, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a56:	2303      	movs	r3, #3
 8009a58:	e017      	b.n	8009a8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d101      	bne.n	8009a64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	3b01      	subs	r3, #1
 8009a68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	4013      	ands	r3, r2
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	bf0c      	ite	eq
 8009a7a:	2301      	moveq	r3, #1
 8009a7c:	2300      	movne	r3, #0
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	461a      	mov	r2, r3
 8009a82:	79fb      	ldrb	r3, [r7, #7]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d19b      	bne.n	80099c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3720      	adds	r7, #32
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20000058 	.word	0x20000058

08009a98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08a      	sub	sp, #40	; 0x28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
 8009aa4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009aaa:	f7fc faa3 	bl	8005ff4 <HAL_GetTick>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab2:	1a9b      	subs	r3, r3, r2
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009aba:	f7fc fa9b 	bl	8005ff4 <HAL_GetTick>
 8009abe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	330c      	adds	r3, #12
 8009ac6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009ac8:	4b3d      	ldr	r3, [pc, #244]	; (8009bc0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	4613      	mov	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	00da      	lsls	r2, r3, #3
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	0d1b      	lsrs	r3, r3, #20
 8009ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ada:	fb02 f303 	mul.w	r3, r2, r3
 8009ade:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009ae0:	e060      	b.n	8009ba4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009ae8:	d107      	bne.n	8009afa <SPI_WaitFifoStateUntilTimeout+0x62>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d104      	bne.n	8009afa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009af8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b00:	d050      	beq.n	8009ba4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b02:	f7fc fa77 	bl	8005ff4 <HAL_GetTick>
 8009b06:	4602      	mov	r2, r0
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d902      	bls.n	8009b18 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d13d      	bne.n	8009b94 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b30:	d111      	bne.n	8009b56 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b3a:	d004      	beq.n	8009b46 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b44:	d107      	bne.n	8009b56 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b5e:	d10f      	bne.n	8009b80 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b6e:	601a      	str	r2, [r3, #0]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009b90:	2303      	movs	r3, #3
 8009b92:	e010      	b.n	8009bb6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	689a      	ldr	r2, [r3, #8]
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	4013      	ands	r3, r2
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d196      	bne.n	8009ae2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3728      	adds	r7, #40	; 0x28
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000058 	.word	0x20000058

08009bc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af02      	add	r7, sp, #8
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f7ff ff5b 	bl	8009a98 <SPI_WaitFifoStateUntilTimeout>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d007      	beq.n	8009bf8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bec:	f043 0220 	orr.w	r2, r3, #32
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	e027      	b.n	8009c48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2180      	movs	r1, #128	; 0x80
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f7ff fec0 	bl	8009988 <SPI_WaitFlagStateUntilTimeout>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d007      	beq.n	8009c1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c12:	f043 0220 	orr.w	r2, r3, #32
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e014      	b.n	8009c48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f7ff ff34 	bl	8009a98 <SPI_WaitFifoStateUntilTimeout>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d007      	beq.n	8009c46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c3a:	f043 0220 	orr.w	r2, r3, #32
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e000      	b.n	8009c48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e040      	b.n	8009ce4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d106      	bne.n	8009c78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7fb f80e 	bl	8004c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2224      	movs	r2, #36	; 0x24
 8009c7c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 0201 	bic.w	r2, r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fbbc 	bl	800a40c <UART_SetConfig>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d101      	bne.n	8009c9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e022      	b.n	8009ce4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fce6 	bl	800a678 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009cba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	689a      	ldr	r2, [r3, #8]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009cca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f042 0201 	orr.w	r2, r2, #1
 8009cda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fd6d 	bl	800a7bc <UART_CheckIdleState>
 8009ce2:	4603      	mov	r3, r0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08a      	sub	sp, #40	; 0x28
 8009cf0:	af02      	add	r7, sp, #8
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d00:	2b20      	cmp	r3, #32
 8009d02:	d178      	bne.n	8009df6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <HAL_UART_Transmit+0x24>
 8009d0a:	88fb      	ldrh	r3, [r7, #6]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e071      	b.n	8009df8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2221      	movs	r2, #33	; 0x21
 8009d20:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d22:	f7fc f967 	bl	8005ff4 <HAL_GetTick>
 8009d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	88fa      	ldrh	r2, [r7, #6]
 8009d2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	88fa      	ldrh	r2, [r7, #6]
 8009d34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d40:	d108      	bne.n	8009d54 <HAL_UART_Transmit+0x68>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d104      	bne.n	8009d54 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	61bb      	str	r3, [r7, #24]
 8009d52:	e003      	b.n	8009d5c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d5c:	e030      	b.n	8009dc0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	2200      	movs	r2, #0
 8009d66:	2180      	movs	r1, #128	; 0x80
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 fdcf 	bl	800a90c <UART_WaitOnFlagUntilTimeout>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d004      	beq.n	8009d7e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2220      	movs	r2, #32
 8009d78:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e03c      	b.n	8009df8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10b      	bne.n	8009d9c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	881a      	ldrh	r2, [r3, #0]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d90:	b292      	uxth	r2, r2
 8009d92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	3302      	adds	r3, #2
 8009d98:	61bb      	str	r3, [r7, #24]
 8009d9a:	e008      	b.n	8009dae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	781a      	ldrb	r2, [r3, #0]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	b292      	uxth	r2, r2
 8009da6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	3301      	adds	r3, #1
 8009dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	3b01      	subs	r3, #1
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1c8      	bne.n	8009d5e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	2140      	movs	r1, #64	; 0x40
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f000 fd98 	bl	800a90c <UART_WaitOnFlagUntilTimeout>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d004      	beq.n	8009dec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2220      	movs	r2, #32
 8009de6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e005      	b.n	8009df8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2220      	movs	r2, #32
 8009df0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	e000      	b.n	8009df8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009df6:	2302      	movs	r3, #2
  }
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3720      	adds	r7, #32
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b0ba      	sub	sp, #232	; 0xe8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	69db      	ldr	r3, [r3, #28]
 8009e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009e2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009e2e:	4013      	ands	r3, r2
 8009e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009e34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d115      	bne.n	8009e68 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e40:	f003 0320 	and.w	r3, r3, #32
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00f      	beq.n	8009e68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e4c:	f003 0320 	and.w	r3, r3, #32
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d009      	beq.n	8009e68 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 82ab 	beq.w	800a3b4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	4798      	blx	r3
      }
      return;
 8009e66:	e2a5      	b.n	800a3b4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009e68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f000 8117 	beq.w	800a0a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d106      	bne.n	8009e8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009e7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009e82:	4b85      	ldr	r3, [pc, #532]	; (800a098 <HAL_UART_IRQHandler+0x298>)
 8009e84:	4013      	ands	r3, r2
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 810a 	beq.w	800a0a0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d011      	beq.n	8009ebc <HAL_UART_IRQHandler+0xbc>
 8009e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00b      	beq.n	8009ebc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eb2:	f043 0201 	orr.w	r2, r3, #1
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ec0:	f003 0302 	and.w	r3, r3, #2
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d011      	beq.n	8009eec <HAL_UART_IRQHandler+0xec>
 8009ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ecc:	f003 0301 	and.w	r3, r3, #1
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00b      	beq.n	8009eec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2202      	movs	r2, #2
 8009eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ee2:	f043 0204 	orr.w	r2, r3, #4
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ef0:	f003 0304 	and.w	r3, r3, #4
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d011      	beq.n	8009f1c <HAL_UART_IRQHandler+0x11c>
 8009ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00b      	beq.n	8009f1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2204      	movs	r2, #4
 8009f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f12:	f043 0202 	orr.w	r2, r3, #2
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f20:	f003 0308 	and.w	r3, r3, #8
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d017      	beq.n	8009f58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f2c:	f003 0320 	and.w	r3, r3, #32
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d105      	bne.n	8009f40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2208      	movs	r2, #8
 8009f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f4e:	f043 0208 	orr.w	r2, r3, #8
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d012      	beq.n	8009f8a <HAL_UART_IRQHandler+0x18a>
 8009f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00c      	beq.n	8009f8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f80:	f043 0220 	orr.w	r2, r3, #32
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f000 8211 	beq.w	800a3b8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00d      	beq.n	8009fbe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fa6:	f003 0320 	and.w	r3, r3, #32
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d007      	beq.n	8009fbe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd2:	2b40      	cmp	r3, #64	; 0x40
 8009fd4:	d005      	beq.n	8009fe2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009fda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d04f      	beq.n	800a082 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fcf9 	bl	800a9da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff2:	2b40      	cmp	r3, #64	; 0x40
 8009ff4:	d141      	bne.n	800a07a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3308      	adds	r3, #8
 8009ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a00c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	3308      	adds	r3, #8
 800a01e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a02e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a03a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1d9      	bne.n	8009ff6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a046:	2b00      	cmp	r3, #0
 800a048:	d013      	beq.n	800a072 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a04e:	4a13      	ldr	r2, [pc, #76]	; (800a09c <HAL_UART_IRQHandler+0x29c>)
 800a050:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a056:	4618      	mov	r0, r3
 800a058:	f7fc f9ec 	bl	8006434 <HAL_DMA_Abort_IT>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d017      	beq.n	800a092 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a06c:	4610      	mov	r0, r2
 800a06e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a070:	e00f      	b.n	800a092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f9b4 	bl	800a3e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a078:	e00b      	b.n	800a092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f9b0 	bl	800a3e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a080:	e007      	b.n	800a092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f9ac 	bl	800a3e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a090:	e192      	b.n	800a3b8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a092:	bf00      	nop
    return;
 800a094:	e190      	b.n	800a3b8 <HAL_UART_IRQHandler+0x5b8>
 800a096:	bf00      	nop
 800a098:	04000120 	.word	0x04000120
 800a09c:	0800aaa3 	.word	0x0800aaa3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	f040 814b 	bne.w	800a340 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ae:	f003 0310 	and.w	r3, r3, #16
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f000 8144 	beq.w	800a340 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0bc:	f003 0310 	and.w	r3, r3, #16
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f000 813d 	beq.w	800a340 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2210      	movs	r2, #16
 800a0cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d8:	2b40      	cmp	r3, #64	; 0x40
 800a0da:	f040 80b5 	bne.w	800a248 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a0ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f000 8164 	beq.w	800a3bc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a0fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a0fe:	429a      	cmp	r2, r3
 800a100:	f080 815c 	bcs.w	800a3bc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a10a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	2b20      	cmp	r3, #32
 800a116:	f000 8086 	beq.w	800a226 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a122:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a126:	e853 3f00 	ldrex	r3, [r3]
 800a12a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a12e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a136:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	461a      	mov	r2, r3
 800a140:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a144:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a148:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a150:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a154:	e841 2300 	strex	r3, r2, [r1]
 800a158:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a15c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1da      	bne.n	800a11a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3308      	adds	r3, #8
 800a16a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a16e:	e853 3f00 	ldrex	r3, [r3]
 800a172:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a176:	f023 0301 	bic.w	r3, r3, #1
 800a17a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3308      	adds	r3, #8
 800a184:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a188:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a18c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a190:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a194:	e841 2300 	strex	r3, r2, [r1]
 800a198:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a19a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1e1      	bne.n	800a164 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1aa:	e853 3f00 	ldrex	r3, [r3]
 800a1ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a1b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3308      	adds	r3, #8
 800a1c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a1c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a1c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a1ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a1cc:	e841 2300 	strex	r3, r2, [r1]
 800a1d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a1d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1e3      	bne.n	800a1a0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2220      	movs	r2, #32
 800a1dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ee:	e853 3f00 	ldrex	r3, [r3]
 800a1f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a1f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1f6:	f023 0310 	bic.w	r3, r3, #16
 800a1fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a208:	65bb      	str	r3, [r7, #88]	; 0x58
 800a20a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a20e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e4      	bne.n	800a1e6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a220:	4618      	mov	r0, r3
 800a222:	f7fc f8ce 	bl	80063c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2202      	movs	r2, #2
 800a22a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a238:	b29b      	uxth	r3, r3
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f8d7 	bl	800a3f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a246:	e0b9      	b.n	800a3bc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a254:	b29b      	uxth	r3, r3
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a262:	b29b      	uxth	r3, r3
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 80ab 	beq.w	800a3c0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800a26a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 80a6 	beq.w	800a3c0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27c:	e853 3f00 	ldrex	r3, [r3]
 800a280:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a284:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a288:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	461a      	mov	r2, r3
 800a292:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a296:	647b      	str	r3, [r7, #68]	; 0x44
 800a298:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a29c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a29e:	e841 2300 	strex	r3, r2, [r1]
 800a2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a2a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1e4      	bne.n	800a274 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	e853 3f00 	ldrex	r3, [r3]
 800a2b8:	623b      	str	r3, [r7, #32]
   return(result);
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	f023 0301 	bic.w	r3, r3, #1
 800a2c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3308      	adds	r3, #8
 800a2ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a2ce:	633a      	str	r2, [r7, #48]	; 0x30
 800a2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2d6:	e841 2300 	strex	r3, r2, [r1]
 800a2da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1e3      	bne.n	800a2aa <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2220      	movs	r2, #32
 800a2e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	e853 3f00 	ldrex	r3, [r3]
 800a302:	60fb      	str	r3, [r7, #12]
   return(result);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f023 0310 	bic.w	r3, r3, #16
 800a30a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	461a      	mov	r2, r3
 800a314:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a318:	61fb      	str	r3, [r7, #28]
 800a31a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31c:	69b9      	ldr	r1, [r7, #24]
 800a31e:	69fa      	ldr	r2, [r7, #28]
 800a320:	e841 2300 	strex	r3, r2, [r1]
 800a324:	617b      	str	r3, [r7, #20]
   return(result);
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1e4      	bne.n	800a2f6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2202      	movs	r2, #2
 800a330:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a332:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 f85b 	bl	800a3f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a33e:	e03f      	b.n	800a3c0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00e      	beq.n	800a36a <HAL_UART_IRQHandler+0x56a>
 800a34c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a354:	2b00      	cmp	r3, #0
 800a356:	d008      	beq.n	800a36a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a360:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fbdd 	bl	800ab22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a368:	e02d      	b.n	800a3c6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a36a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00e      	beq.n	800a394 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d008      	beq.n	800a394 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a386:	2b00      	cmp	r3, #0
 800a388:	d01c      	beq.n	800a3c4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
    }
    return;
 800a392:	e017      	b.n	800a3c4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d012      	beq.n	800a3c6 <HAL_UART_IRQHandler+0x5c6>
 800a3a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00c      	beq.n	800a3c6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fb8e 	bl	800aace <UART_EndTransmit_IT>
    return;
 800a3b2:	e008      	b.n	800a3c6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800a3b4:	bf00      	nop
 800a3b6:	e006      	b.n	800a3c6 <HAL_UART_IRQHandler+0x5c6>
    return;
 800a3b8:	bf00      	nop
 800a3ba:	e004      	b.n	800a3c6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800a3bc:	bf00      	nop
 800a3be:	e002      	b.n	800a3c6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800a3c0:	bf00      	nop
 800a3c2:	e000      	b.n	800a3c6 <HAL_UART_IRQHandler+0x5c6>
    return;
 800a3c4:	bf00      	nop
  }

}
 800a3c6:	37e8      	adds	r7, #232	; 0xe8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a3d4:	bf00      	nop
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a414:	2300      	movs	r3, #0
 800a416:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	689a      	ldr	r2, [r3, #8]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	431a      	orrs	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	431a      	orrs	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	69db      	ldr	r3, [r3, #28]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	4b8a      	ldr	r3, [pc, #552]	; (800a660 <UART_SetConfig+0x254>)
 800a438:	4013      	ands	r3, r2
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	6812      	ldr	r2, [r2, #0]
 800a43e:	6979      	ldr	r1, [r7, #20]
 800a440:	430b      	orrs	r3, r1
 800a442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68da      	ldr	r2, [r3, #12]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	4313      	orrs	r3, r2
 800a468:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a78      	ldr	r2, [pc, #480]	; (800a664 <UART_SetConfig+0x258>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d120      	bne.n	800a4ca <UART_SetConfig+0xbe>
 800a488:	4b77      	ldr	r3, [pc, #476]	; (800a668 <UART_SetConfig+0x25c>)
 800a48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48c:	f003 0303 	and.w	r3, r3, #3
 800a490:	2b03      	cmp	r3, #3
 800a492:	d817      	bhi.n	800a4c4 <UART_SetConfig+0xb8>
 800a494:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <UART_SetConfig+0x90>)
 800a496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49a:	bf00      	nop
 800a49c:	0800a4ad 	.word	0x0800a4ad
 800a4a0:	0800a4b9 	.word	0x0800a4b9
 800a4a4:	0800a4bf 	.word	0x0800a4bf
 800a4a8:	0800a4b3 	.word	0x0800a4b3
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	77fb      	strb	r3, [r7, #31]
 800a4b0:	e01d      	b.n	800a4ee <UART_SetConfig+0xe2>
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	77fb      	strb	r3, [r7, #31]
 800a4b6:	e01a      	b.n	800a4ee <UART_SetConfig+0xe2>
 800a4b8:	2304      	movs	r3, #4
 800a4ba:	77fb      	strb	r3, [r7, #31]
 800a4bc:	e017      	b.n	800a4ee <UART_SetConfig+0xe2>
 800a4be:	2308      	movs	r3, #8
 800a4c0:	77fb      	strb	r3, [r7, #31]
 800a4c2:	e014      	b.n	800a4ee <UART_SetConfig+0xe2>
 800a4c4:	2310      	movs	r3, #16
 800a4c6:	77fb      	strb	r3, [r7, #31]
 800a4c8:	e011      	b.n	800a4ee <UART_SetConfig+0xe2>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a67      	ldr	r2, [pc, #412]	; (800a66c <UART_SetConfig+0x260>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d102      	bne.n	800a4da <UART_SetConfig+0xce>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	77fb      	strb	r3, [r7, #31]
 800a4d8:	e009      	b.n	800a4ee <UART_SetConfig+0xe2>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a64      	ldr	r2, [pc, #400]	; (800a670 <UART_SetConfig+0x264>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d102      	bne.n	800a4ea <UART_SetConfig+0xde>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	77fb      	strb	r3, [r7, #31]
 800a4e8:	e001      	b.n	800a4ee <UART_SetConfig+0xe2>
 800a4ea:	2310      	movs	r3, #16
 800a4ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4f6:	d15a      	bne.n	800a5ae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800a4f8:	7ffb      	ldrb	r3, [r7, #31]
 800a4fa:	2b08      	cmp	r3, #8
 800a4fc:	d827      	bhi.n	800a54e <UART_SetConfig+0x142>
 800a4fe:	a201      	add	r2, pc, #4	; (adr r2, 800a504 <UART_SetConfig+0xf8>)
 800a500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a504:	0800a529 	.word	0x0800a529
 800a508:	0800a531 	.word	0x0800a531
 800a50c:	0800a539 	.word	0x0800a539
 800a510:	0800a54f 	.word	0x0800a54f
 800a514:	0800a53f 	.word	0x0800a53f
 800a518:	0800a54f 	.word	0x0800a54f
 800a51c:	0800a54f 	.word	0x0800a54f
 800a520:	0800a54f 	.word	0x0800a54f
 800a524:	0800a547 	.word	0x0800a547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a528:	f7fe fbb6 	bl	8008c98 <HAL_RCC_GetPCLK1Freq>
 800a52c:	61b8      	str	r0, [r7, #24]
        break;
 800a52e:	e013      	b.n	800a558 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a530:	f7fe fbd4 	bl	8008cdc <HAL_RCC_GetPCLK2Freq>
 800a534:	61b8      	str	r0, [r7, #24]
        break;
 800a536:	e00f      	b.n	800a558 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a538:	4b4e      	ldr	r3, [pc, #312]	; (800a674 <UART_SetConfig+0x268>)
 800a53a:	61bb      	str	r3, [r7, #24]
        break;
 800a53c:	e00c      	b.n	800a558 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a53e:	f7fe fb35 	bl	8008bac <HAL_RCC_GetSysClockFreq>
 800a542:	61b8      	str	r0, [r7, #24]
        break;
 800a544:	e008      	b.n	800a558 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a54a:	61bb      	str	r3, [r7, #24]
        break;
 800a54c:	e004      	b.n	800a558 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800a54e:	2300      	movs	r3, #0
 800a550:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	77bb      	strb	r3, [r7, #30]
        break;
 800a556:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d074      	beq.n	800a648 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	005a      	lsls	r2, r3, #1
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	085b      	lsrs	r3, r3, #1
 800a568:	441a      	add	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a572:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	2b0f      	cmp	r3, #15
 800a578:	d916      	bls.n	800a5a8 <UART_SetConfig+0x19c>
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a580:	d212      	bcs.n	800a5a8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	b29b      	uxth	r3, r3
 800a586:	f023 030f 	bic.w	r3, r3, #15
 800a58a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	085b      	lsrs	r3, r3, #1
 800a590:	b29b      	uxth	r3, r3
 800a592:	f003 0307 	and.w	r3, r3, #7
 800a596:	b29a      	uxth	r2, r3
 800a598:	89fb      	ldrh	r3, [r7, #14]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	89fa      	ldrh	r2, [r7, #14]
 800a5a4:	60da      	str	r2, [r3, #12]
 800a5a6:	e04f      	b.n	800a648 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	77bb      	strb	r3, [r7, #30]
 800a5ac:	e04c      	b.n	800a648 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a5ae:	7ffb      	ldrb	r3, [r7, #31]
 800a5b0:	2b08      	cmp	r3, #8
 800a5b2:	d828      	bhi.n	800a606 <UART_SetConfig+0x1fa>
 800a5b4:	a201      	add	r2, pc, #4	; (adr r2, 800a5bc <UART_SetConfig+0x1b0>)
 800a5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ba:	bf00      	nop
 800a5bc:	0800a5e1 	.word	0x0800a5e1
 800a5c0:	0800a5e9 	.word	0x0800a5e9
 800a5c4:	0800a5f1 	.word	0x0800a5f1
 800a5c8:	0800a607 	.word	0x0800a607
 800a5cc:	0800a5f7 	.word	0x0800a5f7
 800a5d0:	0800a607 	.word	0x0800a607
 800a5d4:	0800a607 	.word	0x0800a607
 800a5d8:	0800a607 	.word	0x0800a607
 800a5dc:	0800a5ff 	.word	0x0800a5ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5e0:	f7fe fb5a 	bl	8008c98 <HAL_RCC_GetPCLK1Freq>
 800a5e4:	61b8      	str	r0, [r7, #24]
        break;
 800a5e6:	e013      	b.n	800a610 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5e8:	f7fe fb78 	bl	8008cdc <HAL_RCC_GetPCLK2Freq>
 800a5ec:	61b8      	str	r0, [r7, #24]
        break;
 800a5ee:	e00f      	b.n	800a610 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5f0:	4b20      	ldr	r3, [pc, #128]	; (800a674 <UART_SetConfig+0x268>)
 800a5f2:	61bb      	str	r3, [r7, #24]
        break;
 800a5f4:	e00c      	b.n	800a610 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5f6:	f7fe fad9 	bl	8008bac <HAL_RCC_GetSysClockFreq>
 800a5fa:	61b8      	str	r0, [r7, #24]
        break;
 800a5fc:	e008      	b.n	800a610 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a602:	61bb      	str	r3, [r7, #24]
        break;
 800a604:	e004      	b.n	800a610 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800a606:	2300      	movs	r3, #0
 800a608:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	77bb      	strb	r3, [r7, #30]
        break;
 800a60e:	bf00      	nop
    }

    if (pclk != 0U)
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d018      	beq.n	800a648 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	085a      	lsrs	r2, r3, #1
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	441a      	add	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	fbb2 f3f3 	udiv	r3, r2, r3
 800a628:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	2b0f      	cmp	r3, #15
 800a62e:	d909      	bls.n	800a644 <UART_SetConfig+0x238>
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a636:	d205      	bcs.n	800a644 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	60da      	str	r2, [r3, #12]
 800a642:	e001      	b.n	800a648 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a654:	7fbb      	ldrb	r3, [r7, #30]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3720      	adds	r7, #32
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	efff69f3 	.word	0xefff69f3
 800a664:	40013800 	.word	0x40013800
 800a668:	40021000 	.word	0x40021000
 800a66c:	40004400 	.word	0x40004400
 800a670:	40004800 	.word	0x40004800
 800a674:	007a1200 	.word	0x007a1200

0800a678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a684:	f003 0301 	and.w	r3, r3, #1
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00a      	beq.n	800a6a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	430a      	orrs	r2, r1
 800a6a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a6:	f003 0302 	and.w	r3, r3, #2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00a      	beq.n	800a6c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	430a      	orrs	r2, r1
 800a6c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c8:	f003 0304 	and.w	r3, r3, #4
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00a      	beq.n	800a6e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	430a      	orrs	r2, r1
 800a6e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ea:	f003 0308 	and.w	r3, r3, #8
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00a      	beq.n	800a708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	430a      	orrs	r2, r1
 800a706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70c:	f003 0310 	and.w	r3, r3, #16
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00a      	beq.n	800a72a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	430a      	orrs	r2, r1
 800a728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72e:	f003 0320 	and.w	r3, r3, #32
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00a      	beq.n	800a74c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	430a      	orrs	r2, r1
 800a74a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a754:	2b00      	cmp	r3, #0
 800a756:	d01a      	beq.n	800a78e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	430a      	orrs	r2, r1
 800a76c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a776:	d10a      	bne.n	800a78e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	430a      	orrs	r2, r1
 800a78c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00a      	beq.n	800a7b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	430a      	orrs	r2, r1
 800a7ae:	605a      	str	r2, [r3, #4]
  }
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b098      	sub	sp, #96	; 0x60
 800a7c0:	af02      	add	r7, sp, #8
 800a7c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7cc:	f7fb fc12 	bl	8005ff4 <HAL_GetTick>
 800a7d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 0308 	and.w	r3, r3, #8
 800a7dc:	2b08      	cmp	r3, #8
 800a7de:	d12e      	bne.n	800a83e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f88c 	bl	800a90c <UART_WaitOnFlagUntilTimeout>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d021      	beq.n	800a83e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a802:	e853 3f00 	ldrex	r3, [r3]
 800a806:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a80a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a80e:	653b      	str	r3, [r7, #80]	; 0x50
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	461a      	mov	r2, r3
 800a816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a818:	647b      	str	r3, [r7, #68]	; 0x44
 800a81a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a81e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a820:	e841 2300 	strex	r3, r2, [r1]
 800a824:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1e6      	bne.n	800a7fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2220      	movs	r2, #32
 800a830:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a83a:	2303      	movs	r3, #3
 800a83c:	e062      	b.n	800a904 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 0304 	and.w	r3, r3, #4
 800a848:	2b04      	cmp	r3, #4
 800a84a:	d149      	bne.n	800a8e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a84c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a854:	2200      	movs	r2, #0
 800a856:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f856 	bl	800a90c <UART_WaitOnFlagUntilTimeout>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d03c      	beq.n	800a8e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	e853 3f00 	ldrex	r3, [r3]
 800a872:	623b      	str	r3, [r7, #32]
   return(result);
 800a874:	6a3b      	ldr	r3, [r7, #32]
 800a876:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a87a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	461a      	mov	r2, r3
 800a882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a884:	633b      	str	r3, [r7, #48]	; 0x30
 800a886:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a88a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a88c:	e841 2300 	strex	r3, r2, [r1]
 800a890:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1e6      	bne.n	800a866 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	3308      	adds	r3, #8
 800a89e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	e853 3f00 	ldrex	r3, [r3]
 800a8a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f023 0301 	bic.w	r3, r3, #1
 800a8ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8b8:	61fa      	str	r2, [r7, #28]
 800a8ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8bc:	69b9      	ldr	r1, [r7, #24]
 800a8be:	69fa      	ldr	r2, [r7, #28]
 800a8c0:	e841 2300 	strex	r3, r2, [r1]
 800a8c4:	617b      	str	r3, [r7, #20]
   return(result);
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1e5      	bne.n	800a898 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e011      	b.n	800a904 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2220      	movs	r2, #32
 800a8e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2220      	movs	r2, #32
 800a8ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3758      	adds	r7, #88	; 0x58
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	603b      	str	r3, [r7, #0]
 800a918:	4613      	mov	r3, r2
 800a91a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a91c:	e049      	b.n	800a9b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a924:	d045      	beq.n	800a9b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a926:	f7fb fb65 	bl	8005ff4 <HAL_GetTick>
 800a92a:	4602      	mov	r2, r0
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	69ba      	ldr	r2, [r7, #24]
 800a932:	429a      	cmp	r2, r3
 800a934:	d302      	bcc.n	800a93c <UART_WaitOnFlagUntilTimeout+0x30>
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d101      	bne.n	800a940 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a93c:	2303      	movs	r3, #3
 800a93e:	e048      	b.n	800a9d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0304 	and.w	r3, r3, #4
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d031      	beq.n	800a9b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	69db      	ldr	r3, [r3, #28]
 800a954:	f003 0308 	and.w	r3, r3, #8
 800a958:	2b08      	cmp	r3, #8
 800a95a:	d110      	bne.n	800a97e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2208      	movs	r2, #8
 800a962:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f000 f838 	bl	800a9da <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2208      	movs	r2, #8
 800a96e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e029      	b.n	800a9d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	69db      	ldr	r3, [r3, #28]
 800a984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a98c:	d111      	bne.n	800a9b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 f81e 	bl	800a9da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2220      	movs	r2, #32
 800a9a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e00f      	b.n	800a9d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	69da      	ldr	r2, [r3, #28]
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	bf0c      	ite	eq
 800a9c2:	2301      	moveq	r3, #1
 800a9c4:	2300      	movne	r3, #0
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	79fb      	ldrb	r3, [r7, #7]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d0a6      	beq.n	800a91e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b095      	sub	sp, #84	; 0x54
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ea:	e853 3f00 	ldrex	r3, [r3]
 800a9ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa00:	643b      	str	r3, [r7, #64]	; 0x40
 800aa02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa08:	e841 2300 	strex	r3, r2, [r1]
 800aa0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1e6      	bne.n	800a9e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	3308      	adds	r3, #8
 800aa1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	e853 3f00 	ldrex	r3, [r3]
 800aa22:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	f023 0301 	bic.w	r3, r3, #1
 800aa2a:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3308      	adds	r3, #8
 800aa32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa34:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa3c:	e841 2300 	strex	r3, r2, [r1]
 800aa40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1e5      	bne.n	800aa14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d118      	bne.n	800aa82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	e853 3f00 	ldrex	r3, [r3]
 800aa5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	f023 0310 	bic.w	r3, r3, #16
 800aa64:	647b      	str	r3, [r7, #68]	; 0x44
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa6e:	61bb      	str	r3, [r7, #24]
 800aa70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa72:	6979      	ldr	r1, [r7, #20]
 800aa74:	69ba      	ldr	r2, [r7, #24]
 800aa76:	e841 2300 	strex	r3, r2, [r1]
 800aa7a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1e6      	bne.n	800aa50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2220      	movs	r2, #32
 800aa86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	669a      	str	r2, [r3, #104]	; 0x68
}
 800aa96:	bf00      	nop
 800aa98:	3754      	adds	r7, #84	; 0x54
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f7ff fc8d 	bl	800a3e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aac6:	bf00      	nop
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b088      	sub	sp, #32
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	e853 3f00 	ldrex	r3, [r3]
 800aae2:	60bb      	str	r3, [r7, #8]
   return(result);
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaea:	61fb      	str	r3, [r7, #28]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	61bb      	str	r3, [r7, #24]
 800aaf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	6979      	ldr	r1, [r7, #20]
 800aafa:	69ba      	ldr	r2, [r7, #24]
 800aafc:	e841 2300 	strex	r3, r2, [r1]
 800ab00:	613b      	str	r3, [r7, #16]
   return(result);
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e6      	bne.n	800aad6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2220      	movs	r2, #32
 800ab0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f7ff fc59 	bl	800a3cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab1a:	bf00      	nop
 800ab1c:	3720      	adds	r7, #32
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b083      	sub	sp, #12
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab2a:	bf00      	nop
 800ab2c:	370c      	adds	r7, #12
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <atoi>:
 800ab36:	220a      	movs	r2, #10
 800ab38:	2100      	movs	r1, #0
 800ab3a:	f000 ba05 	b.w	800af48 <strtol>
	...

0800ab40 <__errno>:
 800ab40:	4b01      	ldr	r3, [pc, #4]	; (800ab48 <__errno+0x8>)
 800ab42:	6818      	ldr	r0, [r3, #0]
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	2000006c 	.word	0x2000006c

0800ab4c <__libc_init_array>:
 800ab4c:	b570      	push	{r4, r5, r6, lr}
 800ab4e:	4d0d      	ldr	r5, [pc, #52]	; (800ab84 <__libc_init_array+0x38>)
 800ab50:	4c0d      	ldr	r4, [pc, #52]	; (800ab88 <__libc_init_array+0x3c>)
 800ab52:	1b64      	subs	r4, r4, r5
 800ab54:	10a4      	asrs	r4, r4, #2
 800ab56:	2600      	movs	r6, #0
 800ab58:	42a6      	cmp	r6, r4
 800ab5a:	d109      	bne.n	800ab70 <__libc_init_array+0x24>
 800ab5c:	4d0b      	ldr	r5, [pc, #44]	; (800ab8c <__libc_init_array+0x40>)
 800ab5e:	4c0c      	ldr	r4, [pc, #48]	; (800ab90 <__libc_init_array+0x44>)
 800ab60:	f001 fbb2 	bl	800c2c8 <_init>
 800ab64:	1b64      	subs	r4, r4, r5
 800ab66:	10a4      	asrs	r4, r4, #2
 800ab68:	2600      	movs	r6, #0
 800ab6a:	42a6      	cmp	r6, r4
 800ab6c:	d105      	bne.n	800ab7a <__libc_init_array+0x2e>
 800ab6e:	bd70      	pop	{r4, r5, r6, pc}
 800ab70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab74:	4798      	blx	r3
 800ab76:	3601      	adds	r6, #1
 800ab78:	e7ee      	b.n	800ab58 <__libc_init_array+0xc>
 800ab7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab7e:	4798      	blx	r3
 800ab80:	3601      	adds	r6, #1
 800ab82:	e7f2      	b.n	800ab6a <__libc_init_array+0x1e>
 800ab84:	0800e180 	.word	0x0800e180
 800ab88:	0800e180 	.word	0x0800e180
 800ab8c:	0800e180 	.word	0x0800e180
 800ab90:	0800e184 	.word	0x0800e184

0800ab94 <memset>:
 800ab94:	4402      	add	r2, r0
 800ab96:	4603      	mov	r3, r0
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d100      	bne.n	800ab9e <memset+0xa>
 800ab9c:	4770      	bx	lr
 800ab9e:	f803 1b01 	strb.w	r1, [r3], #1
 800aba2:	e7f9      	b.n	800ab98 <memset+0x4>

0800aba4 <iprintf>:
 800aba4:	b40f      	push	{r0, r1, r2, r3}
 800aba6:	4b0a      	ldr	r3, [pc, #40]	; (800abd0 <iprintf+0x2c>)
 800aba8:	b513      	push	{r0, r1, r4, lr}
 800abaa:	681c      	ldr	r4, [r3, #0]
 800abac:	b124      	cbz	r4, 800abb8 <iprintf+0x14>
 800abae:	69a3      	ldr	r3, [r4, #24]
 800abb0:	b913      	cbnz	r3, 800abb8 <iprintf+0x14>
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 fbca 	bl	800b34c <__sinit>
 800abb8:	ab05      	add	r3, sp, #20
 800abba:	9a04      	ldr	r2, [sp, #16]
 800abbc:	68a1      	ldr	r1, [r4, #8]
 800abbe:	9301      	str	r3, [sp, #4]
 800abc0:	4620      	mov	r0, r4
 800abc2:	f000 ff49 	bl	800ba58 <_vfiprintf_r>
 800abc6:	b002      	add	sp, #8
 800abc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abcc:	b004      	add	sp, #16
 800abce:	4770      	bx	lr
 800abd0:	2000006c 	.word	0x2000006c

0800abd4 <_puts_r>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	460e      	mov	r6, r1
 800abd8:	4605      	mov	r5, r0
 800abda:	b118      	cbz	r0, 800abe4 <_puts_r+0x10>
 800abdc:	6983      	ldr	r3, [r0, #24]
 800abde:	b90b      	cbnz	r3, 800abe4 <_puts_r+0x10>
 800abe0:	f000 fbb4 	bl	800b34c <__sinit>
 800abe4:	69ab      	ldr	r3, [r5, #24]
 800abe6:	68ac      	ldr	r4, [r5, #8]
 800abe8:	b913      	cbnz	r3, 800abf0 <_puts_r+0x1c>
 800abea:	4628      	mov	r0, r5
 800abec:	f000 fbae 	bl	800b34c <__sinit>
 800abf0:	4b2c      	ldr	r3, [pc, #176]	; (800aca4 <_puts_r+0xd0>)
 800abf2:	429c      	cmp	r4, r3
 800abf4:	d120      	bne.n	800ac38 <_puts_r+0x64>
 800abf6:	686c      	ldr	r4, [r5, #4]
 800abf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abfa:	07db      	lsls	r3, r3, #31
 800abfc:	d405      	bmi.n	800ac0a <_puts_r+0x36>
 800abfe:	89a3      	ldrh	r3, [r4, #12]
 800ac00:	0598      	lsls	r0, r3, #22
 800ac02:	d402      	bmi.n	800ac0a <_puts_r+0x36>
 800ac04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac06:	f000 fc51 	bl	800b4ac <__retarget_lock_acquire_recursive>
 800ac0a:	89a3      	ldrh	r3, [r4, #12]
 800ac0c:	0719      	lsls	r1, r3, #28
 800ac0e:	d51d      	bpl.n	800ac4c <_puts_r+0x78>
 800ac10:	6923      	ldr	r3, [r4, #16]
 800ac12:	b1db      	cbz	r3, 800ac4c <_puts_r+0x78>
 800ac14:	3e01      	subs	r6, #1
 800ac16:	68a3      	ldr	r3, [r4, #8]
 800ac18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	60a3      	str	r3, [r4, #8]
 800ac20:	bb39      	cbnz	r1, 800ac72 <_puts_r+0x9e>
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	da38      	bge.n	800ac98 <_puts_r+0xc4>
 800ac26:	4622      	mov	r2, r4
 800ac28:	210a      	movs	r1, #10
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	f000 f996 	bl	800af5c <__swbuf_r>
 800ac30:	3001      	adds	r0, #1
 800ac32:	d011      	beq.n	800ac58 <_puts_r+0x84>
 800ac34:	250a      	movs	r5, #10
 800ac36:	e011      	b.n	800ac5c <_puts_r+0x88>
 800ac38:	4b1b      	ldr	r3, [pc, #108]	; (800aca8 <_puts_r+0xd4>)
 800ac3a:	429c      	cmp	r4, r3
 800ac3c:	d101      	bne.n	800ac42 <_puts_r+0x6e>
 800ac3e:	68ac      	ldr	r4, [r5, #8]
 800ac40:	e7da      	b.n	800abf8 <_puts_r+0x24>
 800ac42:	4b1a      	ldr	r3, [pc, #104]	; (800acac <_puts_r+0xd8>)
 800ac44:	429c      	cmp	r4, r3
 800ac46:	bf08      	it	eq
 800ac48:	68ec      	ldreq	r4, [r5, #12]
 800ac4a:	e7d5      	b.n	800abf8 <_puts_r+0x24>
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	4628      	mov	r0, r5
 800ac50:	f000 f9d6 	bl	800b000 <__swsetup_r>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d0dd      	beq.n	800ac14 <_puts_r+0x40>
 800ac58:	f04f 35ff 	mov.w	r5, #4294967295
 800ac5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac5e:	07da      	lsls	r2, r3, #31
 800ac60:	d405      	bmi.n	800ac6e <_puts_r+0x9a>
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	059b      	lsls	r3, r3, #22
 800ac66:	d402      	bmi.n	800ac6e <_puts_r+0x9a>
 800ac68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac6a:	f000 fc20 	bl	800b4ae <__retarget_lock_release_recursive>
 800ac6e:	4628      	mov	r0, r5
 800ac70:	bd70      	pop	{r4, r5, r6, pc}
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	da04      	bge.n	800ac80 <_puts_r+0xac>
 800ac76:	69a2      	ldr	r2, [r4, #24]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	dc06      	bgt.n	800ac8a <_puts_r+0xb6>
 800ac7c:	290a      	cmp	r1, #10
 800ac7e:	d004      	beq.n	800ac8a <_puts_r+0xb6>
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	1c5a      	adds	r2, r3, #1
 800ac84:	6022      	str	r2, [r4, #0]
 800ac86:	7019      	strb	r1, [r3, #0]
 800ac88:	e7c5      	b.n	800ac16 <_puts_r+0x42>
 800ac8a:	4622      	mov	r2, r4
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	f000 f965 	bl	800af5c <__swbuf_r>
 800ac92:	3001      	adds	r0, #1
 800ac94:	d1bf      	bne.n	800ac16 <_puts_r+0x42>
 800ac96:	e7df      	b.n	800ac58 <_puts_r+0x84>
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	250a      	movs	r5, #10
 800ac9c:	1c5a      	adds	r2, r3, #1
 800ac9e:	6022      	str	r2, [r4, #0]
 800aca0:	701d      	strb	r5, [r3, #0]
 800aca2:	e7db      	b.n	800ac5c <_puts_r+0x88>
 800aca4:	0800e10c 	.word	0x0800e10c
 800aca8:	0800e12c 	.word	0x0800e12c
 800acac:	0800e0ec 	.word	0x0800e0ec

0800acb0 <puts>:
 800acb0:	4b02      	ldr	r3, [pc, #8]	; (800acbc <puts+0xc>)
 800acb2:	4601      	mov	r1, r0
 800acb4:	6818      	ldr	r0, [r3, #0]
 800acb6:	f7ff bf8d 	b.w	800abd4 <_puts_r>
 800acba:	bf00      	nop
 800acbc:	2000006c 	.word	0x2000006c

0800acc0 <srand>:
 800acc0:	b538      	push	{r3, r4, r5, lr}
 800acc2:	4b10      	ldr	r3, [pc, #64]	; (800ad04 <srand+0x44>)
 800acc4:	681d      	ldr	r5, [r3, #0]
 800acc6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800acc8:	4604      	mov	r4, r0
 800acca:	b9b3      	cbnz	r3, 800acfa <srand+0x3a>
 800accc:	2018      	movs	r0, #24
 800acce:	f000 fc55 	bl	800b57c <malloc>
 800acd2:	4602      	mov	r2, r0
 800acd4:	63a8      	str	r0, [r5, #56]	; 0x38
 800acd6:	b920      	cbnz	r0, 800ace2 <srand+0x22>
 800acd8:	4b0b      	ldr	r3, [pc, #44]	; (800ad08 <srand+0x48>)
 800acda:	480c      	ldr	r0, [pc, #48]	; (800ad0c <srand+0x4c>)
 800acdc:	2142      	movs	r1, #66	; 0x42
 800acde:	f000 f9fd 	bl	800b0dc <__assert_func>
 800ace2:	490b      	ldr	r1, [pc, #44]	; (800ad10 <srand+0x50>)
 800ace4:	4b0b      	ldr	r3, [pc, #44]	; (800ad14 <srand+0x54>)
 800ace6:	e9c0 1300 	strd	r1, r3, [r0]
 800acea:	4b0b      	ldr	r3, [pc, #44]	; (800ad18 <srand+0x58>)
 800acec:	6083      	str	r3, [r0, #8]
 800acee:	230b      	movs	r3, #11
 800acf0:	8183      	strh	r3, [r0, #12]
 800acf2:	2100      	movs	r1, #0
 800acf4:	2001      	movs	r0, #1
 800acf6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800acfa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800acfc:	2200      	movs	r2, #0
 800acfe:	611c      	str	r4, [r3, #16]
 800ad00:	615a      	str	r2, [r3, #20]
 800ad02:	bd38      	pop	{r3, r4, r5, pc}
 800ad04:	2000006c 	.word	0x2000006c
 800ad08:	0800df3c 	.word	0x0800df3c
 800ad0c:	0800df53 	.word	0x0800df53
 800ad10:	abcd330e 	.word	0xabcd330e
 800ad14:	e66d1234 	.word	0xe66d1234
 800ad18:	0005deec 	.word	0x0005deec

0800ad1c <rand>:
 800ad1c:	4b16      	ldr	r3, [pc, #88]	; (800ad78 <rand+0x5c>)
 800ad1e:	b510      	push	{r4, lr}
 800ad20:	681c      	ldr	r4, [r3, #0]
 800ad22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ad24:	b9b3      	cbnz	r3, 800ad54 <rand+0x38>
 800ad26:	2018      	movs	r0, #24
 800ad28:	f000 fc28 	bl	800b57c <malloc>
 800ad2c:	63a0      	str	r0, [r4, #56]	; 0x38
 800ad2e:	b928      	cbnz	r0, 800ad3c <rand+0x20>
 800ad30:	4602      	mov	r2, r0
 800ad32:	4b12      	ldr	r3, [pc, #72]	; (800ad7c <rand+0x60>)
 800ad34:	4812      	ldr	r0, [pc, #72]	; (800ad80 <rand+0x64>)
 800ad36:	214e      	movs	r1, #78	; 0x4e
 800ad38:	f000 f9d0 	bl	800b0dc <__assert_func>
 800ad3c:	4a11      	ldr	r2, [pc, #68]	; (800ad84 <rand+0x68>)
 800ad3e:	4b12      	ldr	r3, [pc, #72]	; (800ad88 <rand+0x6c>)
 800ad40:	e9c0 2300 	strd	r2, r3, [r0]
 800ad44:	4b11      	ldr	r3, [pc, #68]	; (800ad8c <rand+0x70>)
 800ad46:	6083      	str	r3, [r0, #8]
 800ad48:	230b      	movs	r3, #11
 800ad4a:	8183      	strh	r3, [r0, #12]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	2300      	movs	r3, #0
 800ad50:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ad54:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ad56:	4a0e      	ldr	r2, [pc, #56]	; (800ad90 <rand+0x74>)
 800ad58:	6920      	ldr	r0, [r4, #16]
 800ad5a:	6963      	ldr	r3, [r4, #20]
 800ad5c:	490d      	ldr	r1, [pc, #52]	; (800ad94 <rand+0x78>)
 800ad5e:	4342      	muls	r2, r0
 800ad60:	fb01 2203 	mla	r2, r1, r3, r2
 800ad64:	fba0 0101 	umull	r0, r1, r0, r1
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	eb42 0001 	adc.w	r0, r2, r1
 800ad6e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ad72:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ad76:	bd10      	pop	{r4, pc}
 800ad78:	2000006c 	.word	0x2000006c
 800ad7c:	0800df3c 	.word	0x0800df3c
 800ad80:	0800df53 	.word	0x0800df53
 800ad84:	abcd330e 	.word	0xabcd330e
 800ad88:	e66d1234 	.word	0xe66d1234
 800ad8c:	0005deec 	.word	0x0005deec
 800ad90:	5851f42d 	.word	0x5851f42d
 800ad94:	4c957f2d 	.word	0x4c957f2d

0800ad98 <sniprintf>:
 800ad98:	b40c      	push	{r2, r3}
 800ad9a:	b530      	push	{r4, r5, lr}
 800ad9c:	4b17      	ldr	r3, [pc, #92]	; (800adfc <sniprintf+0x64>)
 800ad9e:	1e0c      	subs	r4, r1, #0
 800ada0:	681d      	ldr	r5, [r3, #0]
 800ada2:	b09d      	sub	sp, #116	; 0x74
 800ada4:	da08      	bge.n	800adb8 <sniprintf+0x20>
 800ada6:	238b      	movs	r3, #139	; 0x8b
 800ada8:	602b      	str	r3, [r5, #0]
 800adaa:	f04f 30ff 	mov.w	r0, #4294967295
 800adae:	b01d      	add	sp, #116	; 0x74
 800adb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adb4:	b002      	add	sp, #8
 800adb6:	4770      	bx	lr
 800adb8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800adbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800adc0:	bf14      	ite	ne
 800adc2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800adc6:	4623      	moveq	r3, r4
 800adc8:	9304      	str	r3, [sp, #16]
 800adca:	9307      	str	r3, [sp, #28]
 800adcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800add0:	9002      	str	r0, [sp, #8]
 800add2:	9006      	str	r0, [sp, #24]
 800add4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800add8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800adda:	ab21      	add	r3, sp, #132	; 0x84
 800addc:	a902      	add	r1, sp, #8
 800adde:	4628      	mov	r0, r5
 800ade0:	9301      	str	r3, [sp, #4]
 800ade2:	f000 fd0f 	bl	800b804 <_svfiprintf_r>
 800ade6:	1c43      	adds	r3, r0, #1
 800ade8:	bfbc      	itt	lt
 800adea:	238b      	movlt	r3, #139	; 0x8b
 800adec:	602b      	strlt	r3, [r5, #0]
 800adee:	2c00      	cmp	r4, #0
 800adf0:	d0dd      	beq.n	800adae <sniprintf+0x16>
 800adf2:	9b02      	ldr	r3, [sp, #8]
 800adf4:	2200      	movs	r2, #0
 800adf6:	701a      	strb	r2, [r3, #0]
 800adf8:	e7d9      	b.n	800adae <sniprintf+0x16>
 800adfa:	bf00      	nop
 800adfc:	2000006c 	.word	0x2000006c

0800ae00 <strcat>:
 800ae00:	b510      	push	{r4, lr}
 800ae02:	4602      	mov	r2, r0
 800ae04:	7814      	ldrb	r4, [r2, #0]
 800ae06:	4613      	mov	r3, r2
 800ae08:	3201      	adds	r2, #1
 800ae0a:	2c00      	cmp	r4, #0
 800ae0c:	d1fa      	bne.n	800ae04 <strcat+0x4>
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae14:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae18:	2a00      	cmp	r2, #0
 800ae1a:	d1f9      	bne.n	800ae10 <strcat+0x10>
 800ae1c:	bd10      	pop	{r4, pc}

0800ae1e <strncpy>:
 800ae1e:	b510      	push	{r4, lr}
 800ae20:	3901      	subs	r1, #1
 800ae22:	4603      	mov	r3, r0
 800ae24:	b132      	cbz	r2, 800ae34 <strncpy+0x16>
 800ae26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ae2a:	f803 4b01 	strb.w	r4, [r3], #1
 800ae2e:	3a01      	subs	r2, #1
 800ae30:	2c00      	cmp	r4, #0
 800ae32:	d1f7      	bne.n	800ae24 <strncpy+0x6>
 800ae34:	441a      	add	r2, r3
 800ae36:	2100      	movs	r1, #0
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d100      	bne.n	800ae3e <strncpy+0x20>
 800ae3c:	bd10      	pop	{r4, pc}
 800ae3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ae42:	e7f9      	b.n	800ae38 <strncpy+0x1a>

0800ae44 <_strtol_l.constprop.0>:
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae4a:	d001      	beq.n	800ae50 <_strtol_l.constprop.0+0xc>
 800ae4c:	2b24      	cmp	r3, #36	; 0x24
 800ae4e:	d906      	bls.n	800ae5e <_strtol_l.constprop.0+0x1a>
 800ae50:	f7ff fe76 	bl	800ab40 <__errno>
 800ae54:	2316      	movs	r3, #22
 800ae56:	6003      	str	r3, [r0, #0]
 800ae58:	2000      	movs	r0, #0
 800ae5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800af44 <_strtol_l.constprop.0+0x100>
 800ae62:	460d      	mov	r5, r1
 800ae64:	462e      	mov	r6, r5
 800ae66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae6a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ae6e:	f017 0708 	ands.w	r7, r7, #8
 800ae72:	d1f7      	bne.n	800ae64 <_strtol_l.constprop.0+0x20>
 800ae74:	2c2d      	cmp	r4, #45	; 0x2d
 800ae76:	d132      	bne.n	800aede <_strtol_l.constprop.0+0x9a>
 800ae78:	782c      	ldrb	r4, [r5, #0]
 800ae7a:	2701      	movs	r7, #1
 800ae7c:	1cb5      	adds	r5, r6, #2
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d05b      	beq.n	800af3a <_strtol_l.constprop.0+0xf6>
 800ae82:	2b10      	cmp	r3, #16
 800ae84:	d109      	bne.n	800ae9a <_strtol_l.constprop.0+0x56>
 800ae86:	2c30      	cmp	r4, #48	; 0x30
 800ae88:	d107      	bne.n	800ae9a <_strtol_l.constprop.0+0x56>
 800ae8a:	782c      	ldrb	r4, [r5, #0]
 800ae8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ae90:	2c58      	cmp	r4, #88	; 0x58
 800ae92:	d14d      	bne.n	800af30 <_strtol_l.constprop.0+0xec>
 800ae94:	786c      	ldrb	r4, [r5, #1]
 800ae96:	2310      	movs	r3, #16
 800ae98:	3502      	adds	r5, #2
 800ae9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ae9e:	f108 38ff 	add.w	r8, r8, #4294967295
 800aea2:	f04f 0c00 	mov.w	ip, #0
 800aea6:	fbb8 f9f3 	udiv	r9, r8, r3
 800aeaa:	4666      	mov	r6, ip
 800aeac:	fb03 8a19 	mls	sl, r3, r9, r8
 800aeb0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800aeb4:	f1be 0f09 	cmp.w	lr, #9
 800aeb8:	d816      	bhi.n	800aee8 <_strtol_l.constprop.0+0xa4>
 800aeba:	4674      	mov	r4, lr
 800aebc:	42a3      	cmp	r3, r4
 800aebe:	dd24      	ble.n	800af0a <_strtol_l.constprop.0+0xc6>
 800aec0:	f1bc 0f00 	cmp.w	ip, #0
 800aec4:	db1e      	blt.n	800af04 <_strtol_l.constprop.0+0xc0>
 800aec6:	45b1      	cmp	r9, r6
 800aec8:	d31c      	bcc.n	800af04 <_strtol_l.constprop.0+0xc0>
 800aeca:	d101      	bne.n	800aed0 <_strtol_l.constprop.0+0x8c>
 800aecc:	45a2      	cmp	sl, r4
 800aece:	db19      	blt.n	800af04 <_strtol_l.constprop.0+0xc0>
 800aed0:	fb06 4603 	mla	r6, r6, r3, r4
 800aed4:	f04f 0c01 	mov.w	ip, #1
 800aed8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aedc:	e7e8      	b.n	800aeb0 <_strtol_l.constprop.0+0x6c>
 800aede:	2c2b      	cmp	r4, #43	; 0x2b
 800aee0:	bf04      	itt	eq
 800aee2:	782c      	ldrbeq	r4, [r5, #0]
 800aee4:	1cb5      	addeq	r5, r6, #2
 800aee6:	e7ca      	b.n	800ae7e <_strtol_l.constprop.0+0x3a>
 800aee8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800aeec:	f1be 0f19 	cmp.w	lr, #25
 800aef0:	d801      	bhi.n	800aef6 <_strtol_l.constprop.0+0xb2>
 800aef2:	3c37      	subs	r4, #55	; 0x37
 800aef4:	e7e2      	b.n	800aebc <_strtol_l.constprop.0+0x78>
 800aef6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800aefa:	f1be 0f19 	cmp.w	lr, #25
 800aefe:	d804      	bhi.n	800af0a <_strtol_l.constprop.0+0xc6>
 800af00:	3c57      	subs	r4, #87	; 0x57
 800af02:	e7db      	b.n	800aebc <_strtol_l.constprop.0+0x78>
 800af04:	f04f 3cff 	mov.w	ip, #4294967295
 800af08:	e7e6      	b.n	800aed8 <_strtol_l.constprop.0+0x94>
 800af0a:	f1bc 0f00 	cmp.w	ip, #0
 800af0e:	da05      	bge.n	800af1c <_strtol_l.constprop.0+0xd8>
 800af10:	2322      	movs	r3, #34	; 0x22
 800af12:	6003      	str	r3, [r0, #0]
 800af14:	4646      	mov	r6, r8
 800af16:	b942      	cbnz	r2, 800af2a <_strtol_l.constprop.0+0xe6>
 800af18:	4630      	mov	r0, r6
 800af1a:	e79e      	b.n	800ae5a <_strtol_l.constprop.0+0x16>
 800af1c:	b107      	cbz	r7, 800af20 <_strtol_l.constprop.0+0xdc>
 800af1e:	4276      	negs	r6, r6
 800af20:	2a00      	cmp	r2, #0
 800af22:	d0f9      	beq.n	800af18 <_strtol_l.constprop.0+0xd4>
 800af24:	f1bc 0f00 	cmp.w	ip, #0
 800af28:	d000      	beq.n	800af2c <_strtol_l.constprop.0+0xe8>
 800af2a:	1e69      	subs	r1, r5, #1
 800af2c:	6011      	str	r1, [r2, #0]
 800af2e:	e7f3      	b.n	800af18 <_strtol_l.constprop.0+0xd4>
 800af30:	2430      	movs	r4, #48	; 0x30
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1b1      	bne.n	800ae9a <_strtol_l.constprop.0+0x56>
 800af36:	2308      	movs	r3, #8
 800af38:	e7af      	b.n	800ae9a <_strtol_l.constprop.0+0x56>
 800af3a:	2c30      	cmp	r4, #48	; 0x30
 800af3c:	d0a5      	beq.n	800ae8a <_strtol_l.constprop.0+0x46>
 800af3e:	230a      	movs	r3, #10
 800af40:	e7ab      	b.n	800ae9a <_strtol_l.constprop.0+0x56>
 800af42:	bf00      	nop
 800af44:	0800dfeb 	.word	0x0800dfeb

0800af48 <strtol>:
 800af48:	4613      	mov	r3, r2
 800af4a:	460a      	mov	r2, r1
 800af4c:	4601      	mov	r1, r0
 800af4e:	4802      	ldr	r0, [pc, #8]	; (800af58 <strtol+0x10>)
 800af50:	6800      	ldr	r0, [r0, #0]
 800af52:	f7ff bf77 	b.w	800ae44 <_strtol_l.constprop.0>
 800af56:	bf00      	nop
 800af58:	2000006c 	.word	0x2000006c

0800af5c <__swbuf_r>:
 800af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5e:	460e      	mov	r6, r1
 800af60:	4614      	mov	r4, r2
 800af62:	4605      	mov	r5, r0
 800af64:	b118      	cbz	r0, 800af6e <__swbuf_r+0x12>
 800af66:	6983      	ldr	r3, [r0, #24]
 800af68:	b90b      	cbnz	r3, 800af6e <__swbuf_r+0x12>
 800af6a:	f000 f9ef 	bl	800b34c <__sinit>
 800af6e:	4b21      	ldr	r3, [pc, #132]	; (800aff4 <__swbuf_r+0x98>)
 800af70:	429c      	cmp	r4, r3
 800af72:	d12b      	bne.n	800afcc <__swbuf_r+0x70>
 800af74:	686c      	ldr	r4, [r5, #4]
 800af76:	69a3      	ldr	r3, [r4, #24]
 800af78:	60a3      	str	r3, [r4, #8]
 800af7a:	89a3      	ldrh	r3, [r4, #12]
 800af7c:	071a      	lsls	r2, r3, #28
 800af7e:	d52f      	bpl.n	800afe0 <__swbuf_r+0x84>
 800af80:	6923      	ldr	r3, [r4, #16]
 800af82:	b36b      	cbz	r3, 800afe0 <__swbuf_r+0x84>
 800af84:	6923      	ldr	r3, [r4, #16]
 800af86:	6820      	ldr	r0, [r4, #0]
 800af88:	1ac0      	subs	r0, r0, r3
 800af8a:	6963      	ldr	r3, [r4, #20]
 800af8c:	b2f6      	uxtb	r6, r6
 800af8e:	4283      	cmp	r3, r0
 800af90:	4637      	mov	r7, r6
 800af92:	dc04      	bgt.n	800af9e <__swbuf_r+0x42>
 800af94:	4621      	mov	r1, r4
 800af96:	4628      	mov	r0, r5
 800af98:	f000 f944 	bl	800b224 <_fflush_r>
 800af9c:	bb30      	cbnz	r0, 800afec <__swbuf_r+0x90>
 800af9e:	68a3      	ldr	r3, [r4, #8]
 800afa0:	3b01      	subs	r3, #1
 800afa2:	60a3      	str	r3, [r4, #8]
 800afa4:	6823      	ldr	r3, [r4, #0]
 800afa6:	1c5a      	adds	r2, r3, #1
 800afa8:	6022      	str	r2, [r4, #0]
 800afaa:	701e      	strb	r6, [r3, #0]
 800afac:	6963      	ldr	r3, [r4, #20]
 800afae:	3001      	adds	r0, #1
 800afb0:	4283      	cmp	r3, r0
 800afb2:	d004      	beq.n	800afbe <__swbuf_r+0x62>
 800afb4:	89a3      	ldrh	r3, [r4, #12]
 800afb6:	07db      	lsls	r3, r3, #31
 800afb8:	d506      	bpl.n	800afc8 <__swbuf_r+0x6c>
 800afba:	2e0a      	cmp	r6, #10
 800afbc:	d104      	bne.n	800afc8 <__swbuf_r+0x6c>
 800afbe:	4621      	mov	r1, r4
 800afc0:	4628      	mov	r0, r5
 800afc2:	f000 f92f 	bl	800b224 <_fflush_r>
 800afc6:	b988      	cbnz	r0, 800afec <__swbuf_r+0x90>
 800afc8:	4638      	mov	r0, r7
 800afca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afcc:	4b0a      	ldr	r3, [pc, #40]	; (800aff8 <__swbuf_r+0x9c>)
 800afce:	429c      	cmp	r4, r3
 800afd0:	d101      	bne.n	800afd6 <__swbuf_r+0x7a>
 800afd2:	68ac      	ldr	r4, [r5, #8]
 800afd4:	e7cf      	b.n	800af76 <__swbuf_r+0x1a>
 800afd6:	4b09      	ldr	r3, [pc, #36]	; (800affc <__swbuf_r+0xa0>)
 800afd8:	429c      	cmp	r4, r3
 800afda:	bf08      	it	eq
 800afdc:	68ec      	ldreq	r4, [r5, #12]
 800afde:	e7ca      	b.n	800af76 <__swbuf_r+0x1a>
 800afe0:	4621      	mov	r1, r4
 800afe2:	4628      	mov	r0, r5
 800afe4:	f000 f80c 	bl	800b000 <__swsetup_r>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d0cb      	beq.n	800af84 <__swbuf_r+0x28>
 800afec:	f04f 37ff 	mov.w	r7, #4294967295
 800aff0:	e7ea      	b.n	800afc8 <__swbuf_r+0x6c>
 800aff2:	bf00      	nop
 800aff4:	0800e10c 	.word	0x0800e10c
 800aff8:	0800e12c 	.word	0x0800e12c
 800affc:	0800e0ec 	.word	0x0800e0ec

0800b000 <__swsetup_r>:
 800b000:	4b32      	ldr	r3, [pc, #200]	; (800b0cc <__swsetup_r+0xcc>)
 800b002:	b570      	push	{r4, r5, r6, lr}
 800b004:	681d      	ldr	r5, [r3, #0]
 800b006:	4606      	mov	r6, r0
 800b008:	460c      	mov	r4, r1
 800b00a:	b125      	cbz	r5, 800b016 <__swsetup_r+0x16>
 800b00c:	69ab      	ldr	r3, [r5, #24]
 800b00e:	b913      	cbnz	r3, 800b016 <__swsetup_r+0x16>
 800b010:	4628      	mov	r0, r5
 800b012:	f000 f99b 	bl	800b34c <__sinit>
 800b016:	4b2e      	ldr	r3, [pc, #184]	; (800b0d0 <__swsetup_r+0xd0>)
 800b018:	429c      	cmp	r4, r3
 800b01a:	d10f      	bne.n	800b03c <__swsetup_r+0x3c>
 800b01c:	686c      	ldr	r4, [r5, #4]
 800b01e:	89a3      	ldrh	r3, [r4, #12]
 800b020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b024:	0719      	lsls	r1, r3, #28
 800b026:	d42c      	bmi.n	800b082 <__swsetup_r+0x82>
 800b028:	06dd      	lsls	r5, r3, #27
 800b02a:	d411      	bmi.n	800b050 <__swsetup_r+0x50>
 800b02c:	2309      	movs	r3, #9
 800b02e:	6033      	str	r3, [r6, #0]
 800b030:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b034:	81a3      	strh	r3, [r4, #12]
 800b036:	f04f 30ff 	mov.w	r0, #4294967295
 800b03a:	e03e      	b.n	800b0ba <__swsetup_r+0xba>
 800b03c:	4b25      	ldr	r3, [pc, #148]	; (800b0d4 <__swsetup_r+0xd4>)
 800b03e:	429c      	cmp	r4, r3
 800b040:	d101      	bne.n	800b046 <__swsetup_r+0x46>
 800b042:	68ac      	ldr	r4, [r5, #8]
 800b044:	e7eb      	b.n	800b01e <__swsetup_r+0x1e>
 800b046:	4b24      	ldr	r3, [pc, #144]	; (800b0d8 <__swsetup_r+0xd8>)
 800b048:	429c      	cmp	r4, r3
 800b04a:	bf08      	it	eq
 800b04c:	68ec      	ldreq	r4, [r5, #12]
 800b04e:	e7e6      	b.n	800b01e <__swsetup_r+0x1e>
 800b050:	0758      	lsls	r0, r3, #29
 800b052:	d512      	bpl.n	800b07a <__swsetup_r+0x7a>
 800b054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b056:	b141      	cbz	r1, 800b06a <__swsetup_r+0x6a>
 800b058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b05c:	4299      	cmp	r1, r3
 800b05e:	d002      	beq.n	800b066 <__swsetup_r+0x66>
 800b060:	4630      	mov	r0, r6
 800b062:	f000 fa93 	bl	800b58c <_free_r>
 800b066:	2300      	movs	r3, #0
 800b068:	6363      	str	r3, [r4, #52]	; 0x34
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b070:	81a3      	strh	r3, [r4, #12]
 800b072:	2300      	movs	r3, #0
 800b074:	6063      	str	r3, [r4, #4]
 800b076:	6923      	ldr	r3, [r4, #16]
 800b078:	6023      	str	r3, [r4, #0]
 800b07a:	89a3      	ldrh	r3, [r4, #12]
 800b07c:	f043 0308 	orr.w	r3, r3, #8
 800b080:	81a3      	strh	r3, [r4, #12]
 800b082:	6923      	ldr	r3, [r4, #16]
 800b084:	b94b      	cbnz	r3, 800b09a <__swsetup_r+0x9a>
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b08c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b090:	d003      	beq.n	800b09a <__swsetup_r+0x9a>
 800b092:	4621      	mov	r1, r4
 800b094:	4630      	mov	r0, r6
 800b096:	f000 fa31 	bl	800b4fc <__smakebuf_r>
 800b09a:	89a0      	ldrh	r0, [r4, #12]
 800b09c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0a0:	f010 0301 	ands.w	r3, r0, #1
 800b0a4:	d00a      	beq.n	800b0bc <__swsetup_r+0xbc>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	60a3      	str	r3, [r4, #8]
 800b0aa:	6963      	ldr	r3, [r4, #20]
 800b0ac:	425b      	negs	r3, r3
 800b0ae:	61a3      	str	r3, [r4, #24]
 800b0b0:	6923      	ldr	r3, [r4, #16]
 800b0b2:	b943      	cbnz	r3, 800b0c6 <__swsetup_r+0xc6>
 800b0b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0b8:	d1ba      	bne.n	800b030 <__swsetup_r+0x30>
 800b0ba:	bd70      	pop	{r4, r5, r6, pc}
 800b0bc:	0781      	lsls	r1, r0, #30
 800b0be:	bf58      	it	pl
 800b0c0:	6963      	ldrpl	r3, [r4, #20]
 800b0c2:	60a3      	str	r3, [r4, #8]
 800b0c4:	e7f4      	b.n	800b0b0 <__swsetup_r+0xb0>
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	e7f7      	b.n	800b0ba <__swsetup_r+0xba>
 800b0ca:	bf00      	nop
 800b0cc:	2000006c 	.word	0x2000006c
 800b0d0:	0800e10c 	.word	0x0800e10c
 800b0d4:	0800e12c 	.word	0x0800e12c
 800b0d8:	0800e0ec 	.word	0x0800e0ec

0800b0dc <__assert_func>:
 800b0dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0de:	4614      	mov	r4, r2
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	4b09      	ldr	r3, [pc, #36]	; (800b108 <__assert_func+0x2c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	68d8      	ldr	r0, [r3, #12]
 800b0ea:	b14c      	cbz	r4, 800b100 <__assert_func+0x24>
 800b0ec:	4b07      	ldr	r3, [pc, #28]	; (800b10c <__assert_func+0x30>)
 800b0ee:	9100      	str	r1, [sp, #0]
 800b0f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0f4:	4906      	ldr	r1, [pc, #24]	; (800b110 <__assert_func+0x34>)
 800b0f6:	462b      	mov	r3, r5
 800b0f8:	f000 f9a6 	bl	800b448 <fiprintf>
 800b0fc:	f000 ffd6 	bl	800c0ac <abort>
 800b100:	4b04      	ldr	r3, [pc, #16]	; (800b114 <__assert_func+0x38>)
 800b102:	461c      	mov	r4, r3
 800b104:	e7f3      	b.n	800b0ee <__assert_func+0x12>
 800b106:	bf00      	nop
 800b108:	2000006c 	.word	0x2000006c
 800b10c:	0800dfae 	.word	0x0800dfae
 800b110:	0800dfbb 	.word	0x0800dfbb
 800b114:	0800dfe9 	.word	0x0800dfe9

0800b118 <__sflush_r>:
 800b118:	898a      	ldrh	r2, [r1, #12]
 800b11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b11e:	4605      	mov	r5, r0
 800b120:	0710      	lsls	r0, r2, #28
 800b122:	460c      	mov	r4, r1
 800b124:	d458      	bmi.n	800b1d8 <__sflush_r+0xc0>
 800b126:	684b      	ldr	r3, [r1, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	dc05      	bgt.n	800b138 <__sflush_r+0x20>
 800b12c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b12e:	2b00      	cmp	r3, #0
 800b130:	dc02      	bgt.n	800b138 <__sflush_r+0x20>
 800b132:	2000      	movs	r0, #0
 800b134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b13a:	2e00      	cmp	r6, #0
 800b13c:	d0f9      	beq.n	800b132 <__sflush_r+0x1a>
 800b13e:	2300      	movs	r3, #0
 800b140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b144:	682f      	ldr	r7, [r5, #0]
 800b146:	602b      	str	r3, [r5, #0]
 800b148:	d032      	beq.n	800b1b0 <__sflush_r+0x98>
 800b14a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	075a      	lsls	r2, r3, #29
 800b150:	d505      	bpl.n	800b15e <__sflush_r+0x46>
 800b152:	6863      	ldr	r3, [r4, #4]
 800b154:	1ac0      	subs	r0, r0, r3
 800b156:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b158:	b10b      	cbz	r3, 800b15e <__sflush_r+0x46>
 800b15a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b15c:	1ac0      	subs	r0, r0, r3
 800b15e:	2300      	movs	r3, #0
 800b160:	4602      	mov	r2, r0
 800b162:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b164:	6a21      	ldr	r1, [r4, #32]
 800b166:	4628      	mov	r0, r5
 800b168:	47b0      	blx	r6
 800b16a:	1c43      	adds	r3, r0, #1
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	d106      	bne.n	800b17e <__sflush_r+0x66>
 800b170:	6829      	ldr	r1, [r5, #0]
 800b172:	291d      	cmp	r1, #29
 800b174:	d82c      	bhi.n	800b1d0 <__sflush_r+0xb8>
 800b176:	4a2a      	ldr	r2, [pc, #168]	; (800b220 <__sflush_r+0x108>)
 800b178:	40ca      	lsrs	r2, r1
 800b17a:	07d6      	lsls	r6, r2, #31
 800b17c:	d528      	bpl.n	800b1d0 <__sflush_r+0xb8>
 800b17e:	2200      	movs	r2, #0
 800b180:	6062      	str	r2, [r4, #4]
 800b182:	04d9      	lsls	r1, r3, #19
 800b184:	6922      	ldr	r2, [r4, #16]
 800b186:	6022      	str	r2, [r4, #0]
 800b188:	d504      	bpl.n	800b194 <__sflush_r+0x7c>
 800b18a:	1c42      	adds	r2, r0, #1
 800b18c:	d101      	bne.n	800b192 <__sflush_r+0x7a>
 800b18e:	682b      	ldr	r3, [r5, #0]
 800b190:	b903      	cbnz	r3, 800b194 <__sflush_r+0x7c>
 800b192:	6560      	str	r0, [r4, #84]	; 0x54
 800b194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b196:	602f      	str	r7, [r5, #0]
 800b198:	2900      	cmp	r1, #0
 800b19a:	d0ca      	beq.n	800b132 <__sflush_r+0x1a>
 800b19c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1a0:	4299      	cmp	r1, r3
 800b1a2:	d002      	beq.n	800b1aa <__sflush_r+0x92>
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	f000 f9f1 	bl	800b58c <_free_r>
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	6360      	str	r0, [r4, #52]	; 0x34
 800b1ae:	e7c1      	b.n	800b134 <__sflush_r+0x1c>
 800b1b0:	6a21      	ldr	r1, [r4, #32]
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	47b0      	blx	r6
 800b1b8:	1c41      	adds	r1, r0, #1
 800b1ba:	d1c7      	bne.n	800b14c <__sflush_r+0x34>
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d0c4      	beq.n	800b14c <__sflush_r+0x34>
 800b1c2:	2b1d      	cmp	r3, #29
 800b1c4:	d001      	beq.n	800b1ca <__sflush_r+0xb2>
 800b1c6:	2b16      	cmp	r3, #22
 800b1c8:	d101      	bne.n	800b1ce <__sflush_r+0xb6>
 800b1ca:	602f      	str	r7, [r5, #0]
 800b1cc:	e7b1      	b.n	800b132 <__sflush_r+0x1a>
 800b1ce:	89a3      	ldrh	r3, [r4, #12]
 800b1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1d4:	81a3      	strh	r3, [r4, #12]
 800b1d6:	e7ad      	b.n	800b134 <__sflush_r+0x1c>
 800b1d8:	690f      	ldr	r7, [r1, #16]
 800b1da:	2f00      	cmp	r7, #0
 800b1dc:	d0a9      	beq.n	800b132 <__sflush_r+0x1a>
 800b1de:	0793      	lsls	r3, r2, #30
 800b1e0:	680e      	ldr	r6, [r1, #0]
 800b1e2:	bf08      	it	eq
 800b1e4:	694b      	ldreq	r3, [r1, #20]
 800b1e6:	600f      	str	r7, [r1, #0]
 800b1e8:	bf18      	it	ne
 800b1ea:	2300      	movne	r3, #0
 800b1ec:	eba6 0807 	sub.w	r8, r6, r7
 800b1f0:	608b      	str	r3, [r1, #8]
 800b1f2:	f1b8 0f00 	cmp.w	r8, #0
 800b1f6:	dd9c      	ble.n	800b132 <__sflush_r+0x1a>
 800b1f8:	6a21      	ldr	r1, [r4, #32]
 800b1fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1fc:	4643      	mov	r3, r8
 800b1fe:	463a      	mov	r2, r7
 800b200:	4628      	mov	r0, r5
 800b202:	47b0      	blx	r6
 800b204:	2800      	cmp	r0, #0
 800b206:	dc06      	bgt.n	800b216 <__sflush_r+0xfe>
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b20e:	81a3      	strh	r3, [r4, #12]
 800b210:	f04f 30ff 	mov.w	r0, #4294967295
 800b214:	e78e      	b.n	800b134 <__sflush_r+0x1c>
 800b216:	4407      	add	r7, r0
 800b218:	eba8 0800 	sub.w	r8, r8, r0
 800b21c:	e7e9      	b.n	800b1f2 <__sflush_r+0xda>
 800b21e:	bf00      	nop
 800b220:	20400001 	.word	0x20400001

0800b224 <_fflush_r>:
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	690b      	ldr	r3, [r1, #16]
 800b228:	4605      	mov	r5, r0
 800b22a:	460c      	mov	r4, r1
 800b22c:	b913      	cbnz	r3, 800b234 <_fflush_r+0x10>
 800b22e:	2500      	movs	r5, #0
 800b230:	4628      	mov	r0, r5
 800b232:	bd38      	pop	{r3, r4, r5, pc}
 800b234:	b118      	cbz	r0, 800b23e <_fflush_r+0x1a>
 800b236:	6983      	ldr	r3, [r0, #24]
 800b238:	b90b      	cbnz	r3, 800b23e <_fflush_r+0x1a>
 800b23a:	f000 f887 	bl	800b34c <__sinit>
 800b23e:	4b14      	ldr	r3, [pc, #80]	; (800b290 <_fflush_r+0x6c>)
 800b240:	429c      	cmp	r4, r3
 800b242:	d11b      	bne.n	800b27c <_fflush_r+0x58>
 800b244:	686c      	ldr	r4, [r5, #4]
 800b246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d0ef      	beq.n	800b22e <_fflush_r+0xa>
 800b24e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b250:	07d0      	lsls	r0, r2, #31
 800b252:	d404      	bmi.n	800b25e <_fflush_r+0x3a>
 800b254:	0599      	lsls	r1, r3, #22
 800b256:	d402      	bmi.n	800b25e <_fflush_r+0x3a>
 800b258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b25a:	f000 f927 	bl	800b4ac <__retarget_lock_acquire_recursive>
 800b25e:	4628      	mov	r0, r5
 800b260:	4621      	mov	r1, r4
 800b262:	f7ff ff59 	bl	800b118 <__sflush_r>
 800b266:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b268:	07da      	lsls	r2, r3, #31
 800b26a:	4605      	mov	r5, r0
 800b26c:	d4e0      	bmi.n	800b230 <_fflush_r+0xc>
 800b26e:	89a3      	ldrh	r3, [r4, #12]
 800b270:	059b      	lsls	r3, r3, #22
 800b272:	d4dd      	bmi.n	800b230 <_fflush_r+0xc>
 800b274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b276:	f000 f91a 	bl	800b4ae <__retarget_lock_release_recursive>
 800b27a:	e7d9      	b.n	800b230 <_fflush_r+0xc>
 800b27c:	4b05      	ldr	r3, [pc, #20]	; (800b294 <_fflush_r+0x70>)
 800b27e:	429c      	cmp	r4, r3
 800b280:	d101      	bne.n	800b286 <_fflush_r+0x62>
 800b282:	68ac      	ldr	r4, [r5, #8]
 800b284:	e7df      	b.n	800b246 <_fflush_r+0x22>
 800b286:	4b04      	ldr	r3, [pc, #16]	; (800b298 <_fflush_r+0x74>)
 800b288:	429c      	cmp	r4, r3
 800b28a:	bf08      	it	eq
 800b28c:	68ec      	ldreq	r4, [r5, #12]
 800b28e:	e7da      	b.n	800b246 <_fflush_r+0x22>
 800b290:	0800e10c 	.word	0x0800e10c
 800b294:	0800e12c 	.word	0x0800e12c
 800b298:	0800e0ec 	.word	0x0800e0ec

0800b29c <std>:
 800b29c:	2300      	movs	r3, #0
 800b29e:	b510      	push	{r4, lr}
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	e9c0 3300 	strd	r3, r3, [r0]
 800b2a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2aa:	6083      	str	r3, [r0, #8]
 800b2ac:	8181      	strh	r1, [r0, #12]
 800b2ae:	6643      	str	r3, [r0, #100]	; 0x64
 800b2b0:	81c2      	strh	r2, [r0, #14]
 800b2b2:	6183      	str	r3, [r0, #24]
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	2208      	movs	r2, #8
 800b2b8:	305c      	adds	r0, #92	; 0x5c
 800b2ba:	f7ff fc6b 	bl	800ab94 <memset>
 800b2be:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <std+0x38>)
 800b2c0:	6263      	str	r3, [r4, #36]	; 0x24
 800b2c2:	4b05      	ldr	r3, [pc, #20]	; (800b2d8 <std+0x3c>)
 800b2c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2c6:	4b05      	ldr	r3, [pc, #20]	; (800b2dc <std+0x40>)
 800b2c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2ca:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <std+0x44>)
 800b2cc:	6224      	str	r4, [r4, #32]
 800b2ce:	6323      	str	r3, [r4, #48]	; 0x30
 800b2d0:	bd10      	pop	{r4, pc}
 800b2d2:	bf00      	nop
 800b2d4:	0800c001 	.word	0x0800c001
 800b2d8:	0800c023 	.word	0x0800c023
 800b2dc:	0800c05b 	.word	0x0800c05b
 800b2e0:	0800c07f 	.word	0x0800c07f

0800b2e4 <_cleanup_r>:
 800b2e4:	4901      	ldr	r1, [pc, #4]	; (800b2ec <_cleanup_r+0x8>)
 800b2e6:	f000 b8c1 	b.w	800b46c <_fwalk_reent>
 800b2ea:	bf00      	nop
 800b2ec:	0800b225 	.word	0x0800b225

0800b2f0 <__sfmoreglue>:
 800b2f0:	b570      	push	{r4, r5, r6, lr}
 800b2f2:	2268      	movs	r2, #104	; 0x68
 800b2f4:	1e4d      	subs	r5, r1, #1
 800b2f6:	4355      	muls	r5, r2
 800b2f8:	460e      	mov	r6, r1
 800b2fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2fe:	f000 f9b1 	bl	800b664 <_malloc_r>
 800b302:	4604      	mov	r4, r0
 800b304:	b140      	cbz	r0, 800b318 <__sfmoreglue+0x28>
 800b306:	2100      	movs	r1, #0
 800b308:	e9c0 1600 	strd	r1, r6, [r0]
 800b30c:	300c      	adds	r0, #12
 800b30e:	60a0      	str	r0, [r4, #8]
 800b310:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b314:	f7ff fc3e 	bl	800ab94 <memset>
 800b318:	4620      	mov	r0, r4
 800b31a:	bd70      	pop	{r4, r5, r6, pc}

0800b31c <__sfp_lock_acquire>:
 800b31c:	4801      	ldr	r0, [pc, #4]	; (800b324 <__sfp_lock_acquire+0x8>)
 800b31e:	f000 b8c5 	b.w	800b4ac <__retarget_lock_acquire_recursive>
 800b322:	bf00      	nop
 800b324:	200029fd 	.word	0x200029fd

0800b328 <__sfp_lock_release>:
 800b328:	4801      	ldr	r0, [pc, #4]	; (800b330 <__sfp_lock_release+0x8>)
 800b32a:	f000 b8c0 	b.w	800b4ae <__retarget_lock_release_recursive>
 800b32e:	bf00      	nop
 800b330:	200029fd 	.word	0x200029fd

0800b334 <__sinit_lock_acquire>:
 800b334:	4801      	ldr	r0, [pc, #4]	; (800b33c <__sinit_lock_acquire+0x8>)
 800b336:	f000 b8b9 	b.w	800b4ac <__retarget_lock_acquire_recursive>
 800b33a:	bf00      	nop
 800b33c:	200029fe 	.word	0x200029fe

0800b340 <__sinit_lock_release>:
 800b340:	4801      	ldr	r0, [pc, #4]	; (800b348 <__sinit_lock_release+0x8>)
 800b342:	f000 b8b4 	b.w	800b4ae <__retarget_lock_release_recursive>
 800b346:	bf00      	nop
 800b348:	200029fe 	.word	0x200029fe

0800b34c <__sinit>:
 800b34c:	b510      	push	{r4, lr}
 800b34e:	4604      	mov	r4, r0
 800b350:	f7ff fff0 	bl	800b334 <__sinit_lock_acquire>
 800b354:	69a3      	ldr	r3, [r4, #24]
 800b356:	b11b      	cbz	r3, 800b360 <__sinit+0x14>
 800b358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b35c:	f7ff bff0 	b.w	800b340 <__sinit_lock_release>
 800b360:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b364:	6523      	str	r3, [r4, #80]	; 0x50
 800b366:	4b13      	ldr	r3, [pc, #76]	; (800b3b4 <__sinit+0x68>)
 800b368:	4a13      	ldr	r2, [pc, #76]	; (800b3b8 <__sinit+0x6c>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b36e:	42a3      	cmp	r3, r4
 800b370:	bf04      	itt	eq
 800b372:	2301      	moveq	r3, #1
 800b374:	61a3      	streq	r3, [r4, #24]
 800b376:	4620      	mov	r0, r4
 800b378:	f000 f820 	bl	800b3bc <__sfp>
 800b37c:	6060      	str	r0, [r4, #4]
 800b37e:	4620      	mov	r0, r4
 800b380:	f000 f81c 	bl	800b3bc <__sfp>
 800b384:	60a0      	str	r0, [r4, #8]
 800b386:	4620      	mov	r0, r4
 800b388:	f000 f818 	bl	800b3bc <__sfp>
 800b38c:	2200      	movs	r2, #0
 800b38e:	60e0      	str	r0, [r4, #12]
 800b390:	2104      	movs	r1, #4
 800b392:	6860      	ldr	r0, [r4, #4]
 800b394:	f7ff ff82 	bl	800b29c <std>
 800b398:	68a0      	ldr	r0, [r4, #8]
 800b39a:	2201      	movs	r2, #1
 800b39c:	2109      	movs	r1, #9
 800b39e:	f7ff ff7d 	bl	800b29c <std>
 800b3a2:	68e0      	ldr	r0, [r4, #12]
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	2112      	movs	r1, #18
 800b3a8:	f7ff ff78 	bl	800b29c <std>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	61a3      	str	r3, [r4, #24]
 800b3b0:	e7d2      	b.n	800b358 <__sinit+0xc>
 800b3b2:	bf00      	nop
 800b3b4:	0800df38 	.word	0x0800df38
 800b3b8:	0800b2e5 	.word	0x0800b2e5

0800b3bc <__sfp>:
 800b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3be:	4607      	mov	r7, r0
 800b3c0:	f7ff ffac 	bl	800b31c <__sfp_lock_acquire>
 800b3c4:	4b1e      	ldr	r3, [pc, #120]	; (800b440 <__sfp+0x84>)
 800b3c6:	681e      	ldr	r6, [r3, #0]
 800b3c8:	69b3      	ldr	r3, [r6, #24]
 800b3ca:	b913      	cbnz	r3, 800b3d2 <__sfp+0x16>
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	f7ff ffbd 	bl	800b34c <__sinit>
 800b3d2:	3648      	adds	r6, #72	; 0x48
 800b3d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	d503      	bpl.n	800b3e4 <__sfp+0x28>
 800b3dc:	6833      	ldr	r3, [r6, #0]
 800b3de:	b30b      	cbz	r3, 800b424 <__sfp+0x68>
 800b3e0:	6836      	ldr	r6, [r6, #0]
 800b3e2:	e7f7      	b.n	800b3d4 <__sfp+0x18>
 800b3e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3e8:	b9d5      	cbnz	r5, 800b420 <__sfp+0x64>
 800b3ea:	4b16      	ldr	r3, [pc, #88]	; (800b444 <__sfp+0x88>)
 800b3ec:	60e3      	str	r3, [r4, #12]
 800b3ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3f2:	6665      	str	r5, [r4, #100]	; 0x64
 800b3f4:	f000 f859 	bl	800b4aa <__retarget_lock_init_recursive>
 800b3f8:	f7ff ff96 	bl	800b328 <__sfp_lock_release>
 800b3fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b400:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b404:	6025      	str	r5, [r4, #0]
 800b406:	61a5      	str	r5, [r4, #24]
 800b408:	2208      	movs	r2, #8
 800b40a:	4629      	mov	r1, r5
 800b40c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b410:	f7ff fbc0 	bl	800ab94 <memset>
 800b414:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b418:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b41c:	4620      	mov	r0, r4
 800b41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b420:	3468      	adds	r4, #104	; 0x68
 800b422:	e7d9      	b.n	800b3d8 <__sfp+0x1c>
 800b424:	2104      	movs	r1, #4
 800b426:	4638      	mov	r0, r7
 800b428:	f7ff ff62 	bl	800b2f0 <__sfmoreglue>
 800b42c:	4604      	mov	r4, r0
 800b42e:	6030      	str	r0, [r6, #0]
 800b430:	2800      	cmp	r0, #0
 800b432:	d1d5      	bne.n	800b3e0 <__sfp+0x24>
 800b434:	f7ff ff78 	bl	800b328 <__sfp_lock_release>
 800b438:	230c      	movs	r3, #12
 800b43a:	603b      	str	r3, [r7, #0]
 800b43c:	e7ee      	b.n	800b41c <__sfp+0x60>
 800b43e:	bf00      	nop
 800b440:	0800df38 	.word	0x0800df38
 800b444:	ffff0001 	.word	0xffff0001

0800b448 <fiprintf>:
 800b448:	b40e      	push	{r1, r2, r3}
 800b44a:	b503      	push	{r0, r1, lr}
 800b44c:	4601      	mov	r1, r0
 800b44e:	ab03      	add	r3, sp, #12
 800b450:	4805      	ldr	r0, [pc, #20]	; (800b468 <fiprintf+0x20>)
 800b452:	f853 2b04 	ldr.w	r2, [r3], #4
 800b456:	6800      	ldr	r0, [r0, #0]
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	f000 fafd 	bl	800ba58 <_vfiprintf_r>
 800b45e:	b002      	add	sp, #8
 800b460:	f85d eb04 	ldr.w	lr, [sp], #4
 800b464:	b003      	add	sp, #12
 800b466:	4770      	bx	lr
 800b468:	2000006c 	.word	0x2000006c

0800b46c <_fwalk_reent>:
 800b46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b470:	4606      	mov	r6, r0
 800b472:	4688      	mov	r8, r1
 800b474:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b478:	2700      	movs	r7, #0
 800b47a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b47e:	f1b9 0901 	subs.w	r9, r9, #1
 800b482:	d505      	bpl.n	800b490 <_fwalk_reent+0x24>
 800b484:	6824      	ldr	r4, [r4, #0]
 800b486:	2c00      	cmp	r4, #0
 800b488:	d1f7      	bne.n	800b47a <_fwalk_reent+0xe>
 800b48a:	4638      	mov	r0, r7
 800b48c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b490:	89ab      	ldrh	r3, [r5, #12]
 800b492:	2b01      	cmp	r3, #1
 800b494:	d907      	bls.n	800b4a6 <_fwalk_reent+0x3a>
 800b496:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b49a:	3301      	adds	r3, #1
 800b49c:	d003      	beq.n	800b4a6 <_fwalk_reent+0x3a>
 800b49e:	4629      	mov	r1, r5
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	47c0      	blx	r8
 800b4a4:	4307      	orrs	r7, r0
 800b4a6:	3568      	adds	r5, #104	; 0x68
 800b4a8:	e7e9      	b.n	800b47e <_fwalk_reent+0x12>

0800b4aa <__retarget_lock_init_recursive>:
 800b4aa:	4770      	bx	lr

0800b4ac <__retarget_lock_acquire_recursive>:
 800b4ac:	4770      	bx	lr

0800b4ae <__retarget_lock_release_recursive>:
 800b4ae:	4770      	bx	lr

0800b4b0 <__swhatbuf_r>:
 800b4b0:	b570      	push	{r4, r5, r6, lr}
 800b4b2:	460e      	mov	r6, r1
 800b4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b8:	2900      	cmp	r1, #0
 800b4ba:	b096      	sub	sp, #88	; 0x58
 800b4bc:	4614      	mov	r4, r2
 800b4be:	461d      	mov	r5, r3
 800b4c0:	da08      	bge.n	800b4d4 <__swhatbuf_r+0x24>
 800b4c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	602a      	str	r2, [r5, #0]
 800b4ca:	061a      	lsls	r2, r3, #24
 800b4cc:	d410      	bmi.n	800b4f0 <__swhatbuf_r+0x40>
 800b4ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4d2:	e00e      	b.n	800b4f2 <__swhatbuf_r+0x42>
 800b4d4:	466a      	mov	r2, sp
 800b4d6:	f000 fe01 	bl	800c0dc <_fstat_r>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	dbf1      	blt.n	800b4c2 <__swhatbuf_r+0x12>
 800b4de:	9a01      	ldr	r2, [sp, #4]
 800b4e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4e8:	425a      	negs	r2, r3
 800b4ea:	415a      	adcs	r2, r3
 800b4ec:	602a      	str	r2, [r5, #0]
 800b4ee:	e7ee      	b.n	800b4ce <__swhatbuf_r+0x1e>
 800b4f0:	2340      	movs	r3, #64	; 0x40
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	b016      	add	sp, #88	; 0x58
 800b4f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b4fc <__smakebuf_r>:
 800b4fc:	898b      	ldrh	r3, [r1, #12]
 800b4fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b500:	079d      	lsls	r5, r3, #30
 800b502:	4606      	mov	r6, r0
 800b504:	460c      	mov	r4, r1
 800b506:	d507      	bpl.n	800b518 <__smakebuf_r+0x1c>
 800b508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b50c:	6023      	str	r3, [r4, #0]
 800b50e:	6123      	str	r3, [r4, #16]
 800b510:	2301      	movs	r3, #1
 800b512:	6163      	str	r3, [r4, #20]
 800b514:	b002      	add	sp, #8
 800b516:	bd70      	pop	{r4, r5, r6, pc}
 800b518:	ab01      	add	r3, sp, #4
 800b51a:	466a      	mov	r2, sp
 800b51c:	f7ff ffc8 	bl	800b4b0 <__swhatbuf_r>
 800b520:	9900      	ldr	r1, [sp, #0]
 800b522:	4605      	mov	r5, r0
 800b524:	4630      	mov	r0, r6
 800b526:	f000 f89d 	bl	800b664 <_malloc_r>
 800b52a:	b948      	cbnz	r0, 800b540 <__smakebuf_r+0x44>
 800b52c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b530:	059a      	lsls	r2, r3, #22
 800b532:	d4ef      	bmi.n	800b514 <__smakebuf_r+0x18>
 800b534:	f023 0303 	bic.w	r3, r3, #3
 800b538:	f043 0302 	orr.w	r3, r3, #2
 800b53c:	81a3      	strh	r3, [r4, #12]
 800b53e:	e7e3      	b.n	800b508 <__smakebuf_r+0xc>
 800b540:	4b0d      	ldr	r3, [pc, #52]	; (800b578 <__smakebuf_r+0x7c>)
 800b542:	62b3      	str	r3, [r6, #40]	; 0x28
 800b544:	89a3      	ldrh	r3, [r4, #12]
 800b546:	6020      	str	r0, [r4, #0]
 800b548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b54c:	81a3      	strh	r3, [r4, #12]
 800b54e:	9b00      	ldr	r3, [sp, #0]
 800b550:	6163      	str	r3, [r4, #20]
 800b552:	9b01      	ldr	r3, [sp, #4]
 800b554:	6120      	str	r0, [r4, #16]
 800b556:	b15b      	cbz	r3, 800b570 <__smakebuf_r+0x74>
 800b558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b55c:	4630      	mov	r0, r6
 800b55e:	f000 fdcf 	bl	800c100 <_isatty_r>
 800b562:	b128      	cbz	r0, 800b570 <__smakebuf_r+0x74>
 800b564:	89a3      	ldrh	r3, [r4, #12]
 800b566:	f023 0303 	bic.w	r3, r3, #3
 800b56a:	f043 0301 	orr.w	r3, r3, #1
 800b56e:	81a3      	strh	r3, [r4, #12]
 800b570:	89a0      	ldrh	r0, [r4, #12]
 800b572:	4305      	orrs	r5, r0
 800b574:	81a5      	strh	r5, [r4, #12]
 800b576:	e7cd      	b.n	800b514 <__smakebuf_r+0x18>
 800b578:	0800b2e5 	.word	0x0800b2e5

0800b57c <malloc>:
 800b57c:	4b02      	ldr	r3, [pc, #8]	; (800b588 <malloc+0xc>)
 800b57e:	4601      	mov	r1, r0
 800b580:	6818      	ldr	r0, [r3, #0]
 800b582:	f000 b86f 	b.w	800b664 <_malloc_r>
 800b586:	bf00      	nop
 800b588:	2000006c 	.word	0x2000006c

0800b58c <_free_r>:
 800b58c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b58e:	2900      	cmp	r1, #0
 800b590:	d044      	beq.n	800b61c <_free_r+0x90>
 800b592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b596:	9001      	str	r0, [sp, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f1a1 0404 	sub.w	r4, r1, #4
 800b59e:	bfb8      	it	lt
 800b5a0:	18e4      	addlt	r4, r4, r3
 800b5a2:	f000 fdf7 	bl	800c194 <__malloc_lock>
 800b5a6:	4a1e      	ldr	r2, [pc, #120]	; (800b620 <_free_r+0x94>)
 800b5a8:	9801      	ldr	r0, [sp, #4]
 800b5aa:	6813      	ldr	r3, [r2, #0]
 800b5ac:	b933      	cbnz	r3, 800b5bc <_free_r+0x30>
 800b5ae:	6063      	str	r3, [r4, #4]
 800b5b0:	6014      	str	r4, [r2, #0]
 800b5b2:	b003      	add	sp, #12
 800b5b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5b8:	f000 bdf2 	b.w	800c1a0 <__malloc_unlock>
 800b5bc:	42a3      	cmp	r3, r4
 800b5be:	d908      	bls.n	800b5d2 <_free_r+0x46>
 800b5c0:	6825      	ldr	r5, [r4, #0]
 800b5c2:	1961      	adds	r1, r4, r5
 800b5c4:	428b      	cmp	r3, r1
 800b5c6:	bf01      	itttt	eq
 800b5c8:	6819      	ldreq	r1, [r3, #0]
 800b5ca:	685b      	ldreq	r3, [r3, #4]
 800b5cc:	1949      	addeq	r1, r1, r5
 800b5ce:	6021      	streq	r1, [r4, #0]
 800b5d0:	e7ed      	b.n	800b5ae <_free_r+0x22>
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	b10b      	cbz	r3, 800b5dc <_free_r+0x50>
 800b5d8:	42a3      	cmp	r3, r4
 800b5da:	d9fa      	bls.n	800b5d2 <_free_r+0x46>
 800b5dc:	6811      	ldr	r1, [r2, #0]
 800b5de:	1855      	adds	r5, r2, r1
 800b5e0:	42a5      	cmp	r5, r4
 800b5e2:	d10b      	bne.n	800b5fc <_free_r+0x70>
 800b5e4:	6824      	ldr	r4, [r4, #0]
 800b5e6:	4421      	add	r1, r4
 800b5e8:	1854      	adds	r4, r2, r1
 800b5ea:	42a3      	cmp	r3, r4
 800b5ec:	6011      	str	r1, [r2, #0]
 800b5ee:	d1e0      	bne.n	800b5b2 <_free_r+0x26>
 800b5f0:	681c      	ldr	r4, [r3, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	6053      	str	r3, [r2, #4]
 800b5f6:	4421      	add	r1, r4
 800b5f8:	6011      	str	r1, [r2, #0]
 800b5fa:	e7da      	b.n	800b5b2 <_free_r+0x26>
 800b5fc:	d902      	bls.n	800b604 <_free_r+0x78>
 800b5fe:	230c      	movs	r3, #12
 800b600:	6003      	str	r3, [r0, #0]
 800b602:	e7d6      	b.n	800b5b2 <_free_r+0x26>
 800b604:	6825      	ldr	r5, [r4, #0]
 800b606:	1961      	adds	r1, r4, r5
 800b608:	428b      	cmp	r3, r1
 800b60a:	bf04      	itt	eq
 800b60c:	6819      	ldreq	r1, [r3, #0]
 800b60e:	685b      	ldreq	r3, [r3, #4]
 800b610:	6063      	str	r3, [r4, #4]
 800b612:	bf04      	itt	eq
 800b614:	1949      	addeq	r1, r1, r5
 800b616:	6021      	streq	r1, [r4, #0]
 800b618:	6054      	str	r4, [r2, #4]
 800b61a:	e7ca      	b.n	800b5b2 <_free_r+0x26>
 800b61c:	b003      	add	sp, #12
 800b61e:	bd30      	pop	{r4, r5, pc}
 800b620:	20002a00 	.word	0x20002a00

0800b624 <sbrk_aligned>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	4e0e      	ldr	r6, [pc, #56]	; (800b660 <sbrk_aligned+0x3c>)
 800b628:	460c      	mov	r4, r1
 800b62a:	6831      	ldr	r1, [r6, #0]
 800b62c:	4605      	mov	r5, r0
 800b62e:	b911      	cbnz	r1, 800b636 <sbrk_aligned+0x12>
 800b630:	f000 fcd6 	bl	800bfe0 <_sbrk_r>
 800b634:	6030      	str	r0, [r6, #0]
 800b636:	4621      	mov	r1, r4
 800b638:	4628      	mov	r0, r5
 800b63a:	f000 fcd1 	bl	800bfe0 <_sbrk_r>
 800b63e:	1c43      	adds	r3, r0, #1
 800b640:	d00a      	beq.n	800b658 <sbrk_aligned+0x34>
 800b642:	1cc4      	adds	r4, r0, #3
 800b644:	f024 0403 	bic.w	r4, r4, #3
 800b648:	42a0      	cmp	r0, r4
 800b64a:	d007      	beq.n	800b65c <sbrk_aligned+0x38>
 800b64c:	1a21      	subs	r1, r4, r0
 800b64e:	4628      	mov	r0, r5
 800b650:	f000 fcc6 	bl	800bfe0 <_sbrk_r>
 800b654:	3001      	adds	r0, #1
 800b656:	d101      	bne.n	800b65c <sbrk_aligned+0x38>
 800b658:	f04f 34ff 	mov.w	r4, #4294967295
 800b65c:	4620      	mov	r0, r4
 800b65e:	bd70      	pop	{r4, r5, r6, pc}
 800b660:	20002a04 	.word	0x20002a04

0800b664 <_malloc_r>:
 800b664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b668:	1ccd      	adds	r5, r1, #3
 800b66a:	f025 0503 	bic.w	r5, r5, #3
 800b66e:	3508      	adds	r5, #8
 800b670:	2d0c      	cmp	r5, #12
 800b672:	bf38      	it	cc
 800b674:	250c      	movcc	r5, #12
 800b676:	2d00      	cmp	r5, #0
 800b678:	4607      	mov	r7, r0
 800b67a:	db01      	blt.n	800b680 <_malloc_r+0x1c>
 800b67c:	42a9      	cmp	r1, r5
 800b67e:	d905      	bls.n	800b68c <_malloc_r+0x28>
 800b680:	230c      	movs	r3, #12
 800b682:	603b      	str	r3, [r7, #0]
 800b684:	2600      	movs	r6, #0
 800b686:	4630      	mov	r0, r6
 800b688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b68c:	4e2e      	ldr	r6, [pc, #184]	; (800b748 <_malloc_r+0xe4>)
 800b68e:	f000 fd81 	bl	800c194 <__malloc_lock>
 800b692:	6833      	ldr	r3, [r6, #0]
 800b694:	461c      	mov	r4, r3
 800b696:	bb34      	cbnz	r4, 800b6e6 <_malloc_r+0x82>
 800b698:	4629      	mov	r1, r5
 800b69a:	4638      	mov	r0, r7
 800b69c:	f7ff ffc2 	bl	800b624 <sbrk_aligned>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	d14d      	bne.n	800b742 <_malloc_r+0xde>
 800b6a6:	6834      	ldr	r4, [r6, #0]
 800b6a8:	4626      	mov	r6, r4
 800b6aa:	2e00      	cmp	r6, #0
 800b6ac:	d140      	bne.n	800b730 <_malloc_r+0xcc>
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4638      	mov	r0, r7
 800b6b4:	eb04 0803 	add.w	r8, r4, r3
 800b6b8:	f000 fc92 	bl	800bfe0 <_sbrk_r>
 800b6bc:	4580      	cmp	r8, r0
 800b6be:	d13a      	bne.n	800b736 <_malloc_r+0xd2>
 800b6c0:	6821      	ldr	r1, [r4, #0]
 800b6c2:	3503      	adds	r5, #3
 800b6c4:	1a6d      	subs	r5, r5, r1
 800b6c6:	f025 0503 	bic.w	r5, r5, #3
 800b6ca:	3508      	adds	r5, #8
 800b6cc:	2d0c      	cmp	r5, #12
 800b6ce:	bf38      	it	cc
 800b6d0:	250c      	movcc	r5, #12
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	4638      	mov	r0, r7
 800b6d6:	f7ff ffa5 	bl	800b624 <sbrk_aligned>
 800b6da:	3001      	adds	r0, #1
 800b6dc:	d02b      	beq.n	800b736 <_malloc_r+0xd2>
 800b6de:	6823      	ldr	r3, [r4, #0]
 800b6e0:	442b      	add	r3, r5
 800b6e2:	6023      	str	r3, [r4, #0]
 800b6e4:	e00e      	b.n	800b704 <_malloc_r+0xa0>
 800b6e6:	6822      	ldr	r2, [r4, #0]
 800b6e8:	1b52      	subs	r2, r2, r5
 800b6ea:	d41e      	bmi.n	800b72a <_malloc_r+0xc6>
 800b6ec:	2a0b      	cmp	r2, #11
 800b6ee:	d916      	bls.n	800b71e <_malloc_r+0xba>
 800b6f0:	1961      	adds	r1, r4, r5
 800b6f2:	42a3      	cmp	r3, r4
 800b6f4:	6025      	str	r5, [r4, #0]
 800b6f6:	bf18      	it	ne
 800b6f8:	6059      	strne	r1, [r3, #4]
 800b6fa:	6863      	ldr	r3, [r4, #4]
 800b6fc:	bf08      	it	eq
 800b6fe:	6031      	streq	r1, [r6, #0]
 800b700:	5162      	str	r2, [r4, r5]
 800b702:	604b      	str	r3, [r1, #4]
 800b704:	4638      	mov	r0, r7
 800b706:	f104 060b 	add.w	r6, r4, #11
 800b70a:	f000 fd49 	bl	800c1a0 <__malloc_unlock>
 800b70e:	f026 0607 	bic.w	r6, r6, #7
 800b712:	1d23      	adds	r3, r4, #4
 800b714:	1af2      	subs	r2, r6, r3
 800b716:	d0b6      	beq.n	800b686 <_malloc_r+0x22>
 800b718:	1b9b      	subs	r3, r3, r6
 800b71a:	50a3      	str	r3, [r4, r2]
 800b71c:	e7b3      	b.n	800b686 <_malloc_r+0x22>
 800b71e:	6862      	ldr	r2, [r4, #4]
 800b720:	42a3      	cmp	r3, r4
 800b722:	bf0c      	ite	eq
 800b724:	6032      	streq	r2, [r6, #0]
 800b726:	605a      	strne	r2, [r3, #4]
 800b728:	e7ec      	b.n	800b704 <_malloc_r+0xa0>
 800b72a:	4623      	mov	r3, r4
 800b72c:	6864      	ldr	r4, [r4, #4]
 800b72e:	e7b2      	b.n	800b696 <_malloc_r+0x32>
 800b730:	4634      	mov	r4, r6
 800b732:	6876      	ldr	r6, [r6, #4]
 800b734:	e7b9      	b.n	800b6aa <_malloc_r+0x46>
 800b736:	230c      	movs	r3, #12
 800b738:	603b      	str	r3, [r7, #0]
 800b73a:	4638      	mov	r0, r7
 800b73c:	f000 fd30 	bl	800c1a0 <__malloc_unlock>
 800b740:	e7a1      	b.n	800b686 <_malloc_r+0x22>
 800b742:	6025      	str	r5, [r4, #0]
 800b744:	e7de      	b.n	800b704 <_malloc_r+0xa0>
 800b746:	bf00      	nop
 800b748:	20002a00 	.word	0x20002a00

0800b74c <__ssputs_r>:
 800b74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b750:	688e      	ldr	r6, [r1, #8]
 800b752:	429e      	cmp	r6, r3
 800b754:	4682      	mov	sl, r0
 800b756:	460c      	mov	r4, r1
 800b758:	4690      	mov	r8, r2
 800b75a:	461f      	mov	r7, r3
 800b75c:	d838      	bhi.n	800b7d0 <__ssputs_r+0x84>
 800b75e:	898a      	ldrh	r2, [r1, #12]
 800b760:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b764:	d032      	beq.n	800b7cc <__ssputs_r+0x80>
 800b766:	6825      	ldr	r5, [r4, #0]
 800b768:	6909      	ldr	r1, [r1, #16]
 800b76a:	eba5 0901 	sub.w	r9, r5, r1
 800b76e:	6965      	ldr	r5, [r4, #20]
 800b770:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b774:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b778:	3301      	adds	r3, #1
 800b77a:	444b      	add	r3, r9
 800b77c:	106d      	asrs	r5, r5, #1
 800b77e:	429d      	cmp	r5, r3
 800b780:	bf38      	it	cc
 800b782:	461d      	movcc	r5, r3
 800b784:	0553      	lsls	r3, r2, #21
 800b786:	d531      	bpl.n	800b7ec <__ssputs_r+0xa0>
 800b788:	4629      	mov	r1, r5
 800b78a:	f7ff ff6b 	bl	800b664 <_malloc_r>
 800b78e:	4606      	mov	r6, r0
 800b790:	b950      	cbnz	r0, 800b7a8 <__ssputs_r+0x5c>
 800b792:	230c      	movs	r3, #12
 800b794:	f8ca 3000 	str.w	r3, [sl]
 800b798:	89a3      	ldrh	r3, [r4, #12]
 800b79a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b79e:	81a3      	strh	r3, [r4, #12]
 800b7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a8:	6921      	ldr	r1, [r4, #16]
 800b7aa:	464a      	mov	r2, r9
 800b7ac:	f000 fcca 	bl	800c144 <memcpy>
 800b7b0:	89a3      	ldrh	r3, [r4, #12]
 800b7b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7ba:	81a3      	strh	r3, [r4, #12]
 800b7bc:	6126      	str	r6, [r4, #16]
 800b7be:	6165      	str	r5, [r4, #20]
 800b7c0:	444e      	add	r6, r9
 800b7c2:	eba5 0509 	sub.w	r5, r5, r9
 800b7c6:	6026      	str	r6, [r4, #0]
 800b7c8:	60a5      	str	r5, [r4, #8]
 800b7ca:	463e      	mov	r6, r7
 800b7cc:	42be      	cmp	r6, r7
 800b7ce:	d900      	bls.n	800b7d2 <__ssputs_r+0x86>
 800b7d0:	463e      	mov	r6, r7
 800b7d2:	6820      	ldr	r0, [r4, #0]
 800b7d4:	4632      	mov	r2, r6
 800b7d6:	4641      	mov	r1, r8
 800b7d8:	f000 fcc2 	bl	800c160 <memmove>
 800b7dc:	68a3      	ldr	r3, [r4, #8]
 800b7de:	1b9b      	subs	r3, r3, r6
 800b7e0:	60a3      	str	r3, [r4, #8]
 800b7e2:	6823      	ldr	r3, [r4, #0]
 800b7e4:	4433      	add	r3, r6
 800b7e6:	6023      	str	r3, [r4, #0]
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	e7db      	b.n	800b7a4 <__ssputs_r+0x58>
 800b7ec:	462a      	mov	r2, r5
 800b7ee:	f000 fcdd 	bl	800c1ac <_realloc_r>
 800b7f2:	4606      	mov	r6, r0
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	d1e1      	bne.n	800b7bc <__ssputs_r+0x70>
 800b7f8:	6921      	ldr	r1, [r4, #16]
 800b7fa:	4650      	mov	r0, sl
 800b7fc:	f7ff fec6 	bl	800b58c <_free_r>
 800b800:	e7c7      	b.n	800b792 <__ssputs_r+0x46>
	...

0800b804 <_svfiprintf_r>:
 800b804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b808:	4698      	mov	r8, r3
 800b80a:	898b      	ldrh	r3, [r1, #12]
 800b80c:	061b      	lsls	r3, r3, #24
 800b80e:	b09d      	sub	sp, #116	; 0x74
 800b810:	4607      	mov	r7, r0
 800b812:	460d      	mov	r5, r1
 800b814:	4614      	mov	r4, r2
 800b816:	d50e      	bpl.n	800b836 <_svfiprintf_r+0x32>
 800b818:	690b      	ldr	r3, [r1, #16]
 800b81a:	b963      	cbnz	r3, 800b836 <_svfiprintf_r+0x32>
 800b81c:	2140      	movs	r1, #64	; 0x40
 800b81e:	f7ff ff21 	bl	800b664 <_malloc_r>
 800b822:	6028      	str	r0, [r5, #0]
 800b824:	6128      	str	r0, [r5, #16]
 800b826:	b920      	cbnz	r0, 800b832 <_svfiprintf_r+0x2e>
 800b828:	230c      	movs	r3, #12
 800b82a:	603b      	str	r3, [r7, #0]
 800b82c:	f04f 30ff 	mov.w	r0, #4294967295
 800b830:	e0d1      	b.n	800b9d6 <_svfiprintf_r+0x1d2>
 800b832:	2340      	movs	r3, #64	; 0x40
 800b834:	616b      	str	r3, [r5, #20]
 800b836:	2300      	movs	r3, #0
 800b838:	9309      	str	r3, [sp, #36]	; 0x24
 800b83a:	2320      	movs	r3, #32
 800b83c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b840:	f8cd 800c 	str.w	r8, [sp, #12]
 800b844:	2330      	movs	r3, #48	; 0x30
 800b846:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9f0 <_svfiprintf_r+0x1ec>
 800b84a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b84e:	f04f 0901 	mov.w	r9, #1
 800b852:	4623      	mov	r3, r4
 800b854:	469a      	mov	sl, r3
 800b856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b85a:	b10a      	cbz	r2, 800b860 <_svfiprintf_r+0x5c>
 800b85c:	2a25      	cmp	r2, #37	; 0x25
 800b85e:	d1f9      	bne.n	800b854 <_svfiprintf_r+0x50>
 800b860:	ebba 0b04 	subs.w	fp, sl, r4
 800b864:	d00b      	beq.n	800b87e <_svfiprintf_r+0x7a>
 800b866:	465b      	mov	r3, fp
 800b868:	4622      	mov	r2, r4
 800b86a:	4629      	mov	r1, r5
 800b86c:	4638      	mov	r0, r7
 800b86e:	f7ff ff6d 	bl	800b74c <__ssputs_r>
 800b872:	3001      	adds	r0, #1
 800b874:	f000 80aa 	beq.w	800b9cc <_svfiprintf_r+0x1c8>
 800b878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b87a:	445a      	add	r2, fp
 800b87c:	9209      	str	r2, [sp, #36]	; 0x24
 800b87e:	f89a 3000 	ldrb.w	r3, [sl]
 800b882:	2b00      	cmp	r3, #0
 800b884:	f000 80a2 	beq.w	800b9cc <_svfiprintf_r+0x1c8>
 800b888:	2300      	movs	r3, #0
 800b88a:	f04f 32ff 	mov.w	r2, #4294967295
 800b88e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b892:	f10a 0a01 	add.w	sl, sl, #1
 800b896:	9304      	str	r3, [sp, #16]
 800b898:	9307      	str	r3, [sp, #28]
 800b89a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b89e:	931a      	str	r3, [sp, #104]	; 0x68
 800b8a0:	4654      	mov	r4, sl
 800b8a2:	2205      	movs	r2, #5
 800b8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a8:	4851      	ldr	r0, [pc, #324]	; (800b9f0 <_svfiprintf_r+0x1ec>)
 800b8aa:	f7f4 fc99 	bl	80001e0 <memchr>
 800b8ae:	9a04      	ldr	r2, [sp, #16]
 800b8b0:	b9d8      	cbnz	r0, 800b8ea <_svfiprintf_r+0xe6>
 800b8b2:	06d0      	lsls	r0, r2, #27
 800b8b4:	bf44      	itt	mi
 800b8b6:	2320      	movmi	r3, #32
 800b8b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8bc:	0711      	lsls	r1, r2, #28
 800b8be:	bf44      	itt	mi
 800b8c0:	232b      	movmi	r3, #43	; 0x2b
 800b8c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ca:	2b2a      	cmp	r3, #42	; 0x2a
 800b8cc:	d015      	beq.n	800b8fa <_svfiprintf_r+0xf6>
 800b8ce:	9a07      	ldr	r2, [sp, #28]
 800b8d0:	4654      	mov	r4, sl
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	f04f 0c0a 	mov.w	ip, #10
 800b8d8:	4621      	mov	r1, r4
 800b8da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8de:	3b30      	subs	r3, #48	; 0x30
 800b8e0:	2b09      	cmp	r3, #9
 800b8e2:	d94e      	bls.n	800b982 <_svfiprintf_r+0x17e>
 800b8e4:	b1b0      	cbz	r0, 800b914 <_svfiprintf_r+0x110>
 800b8e6:	9207      	str	r2, [sp, #28]
 800b8e8:	e014      	b.n	800b914 <_svfiprintf_r+0x110>
 800b8ea:	eba0 0308 	sub.w	r3, r0, r8
 800b8ee:	fa09 f303 	lsl.w	r3, r9, r3
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	9304      	str	r3, [sp, #16]
 800b8f6:	46a2      	mov	sl, r4
 800b8f8:	e7d2      	b.n	800b8a0 <_svfiprintf_r+0x9c>
 800b8fa:	9b03      	ldr	r3, [sp, #12]
 800b8fc:	1d19      	adds	r1, r3, #4
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	9103      	str	r1, [sp, #12]
 800b902:	2b00      	cmp	r3, #0
 800b904:	bfbb      	ittet	lt
 800b906:	425b      	neglt	r3, r3
 800b908:	f042 0202 	orrlt.w	r2, r2, #2
 800b90c:	9307      	strge	r3, [sp, #28]
 800b90e:	9307      	strlt	r3, [sp, #28]
 800b910:	bfb8      	it	lt
 800b912:	9204      	strlt	r2, [sp, #16]
 800b914:	7823      	ldrb	r3, [r4, #0]
 800b916:	2b2e      	cmp	r3, #46	; 0x2e
 800b918:	d10c      	bne.n	800b934 <_svfiprintf_r+0x130>
 800b91a:	7863      	ldrb	r3, [r4, #1]
 800b91c:	2b2a      	cmp	r3, #42	; 0x2a
 800b91e:	d135      	bne.n	800b98c <_svfiprintf_r+0x188>
 800b920:	9b03      	ldr	r3, [sp, #12]
 800b922:	1d1a      	adds	r2, r3, #4
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	9203      	str	r2, [sp, #12]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	bfb8      	it	lt
 800b92c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b930:	3402      	adds	r4, #2
 800b932:	9305      	str	r3, [sp, #20]
 800b934:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba00 <_svfiprintf_r+0x1fc>
 800b938:	7821      	ldrb	r1, [r4, #0]
 800b93a:	2203      	movs	r2, #3
 800b93c:	4650      	mov	r0, sl
 800b93e:	f7f4 fc4f 	bl	80001e0 <memchr>
 800b942:	b140      	cbz	r0, 800b956 <_svfiprintf_r+0x152>
 800b944:	2340      	movs	r3, #64	; 0x40
 800b946:	eba0 000a 	sub.w	r0, r0, sl
 800b94a:	fa03 f000 	lsl.w	r0, r3, r0
 800b94e:	9b04      	ldr	r3, [sp, #16]
 800b950:	4303      	orrs	r3, r0
 800b952:	3401      	adds	r4, #1
 800b954:	9304      	str	r3, [sp, #16]
 800b956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b95a:	4826      	ldr	r0, [pc, #152]	; (800b9f4 <_svfiprintf_r+0x1f0>)
 800b95c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b960:	2206      	movs	r2, #6
 800b962:	f7f4 fc3d 	bl	80001e0 <memchr>
 800b966:	2800      	cmp	r0, #0
 800b968:	d038      	beq.n	800b9dc <_svfiprintf_r+0x1d8>
 800b96a:	4b23      	ldr	r3, [pc, #140]	; (800b9f8 <_svfiprintf_r+0x1f4>)
 800b96c:	bb1b      	cbnz	r3, 800b9b6 <_svfiprintf_r+0x1b2>
 800b96e:	9b03      	ldr	r3, [sp, #12]
 800b970:	3307      	adds	r3, #7
 800b972:	f023 0307 	bic.w	r3, r3, #7
 800b976:	3308      	adds	r3, #8
 800b978:	9303      	str	r3, [sp, #12]
 800b97a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b97c:	4433      	add	r3, r6
 800b97e:	9309      	str	r3, [sp, #36]	; 0x24
 800b980:	e767      	b.n	800b852 <_svfiprintf_r+0x4e>
 800b982:	fb0c 3202 	mla	r2, ip, r2, r3
 800b986:	460c      	mov	r4, r1
 800b988:	2001      	movs	r0, #1
 800b98a:	e7a5      	b.n	800b8d8 <_svfiprintf_r+0xd4>
 800b98c:	2300      	movs	r3, #0
 800b98e:	3401      	adds	r4, #1
 800b990:	9305      	str	r3, [sp, #20]
 800b992:	4619      	mov	r1, r3
 800b994:	f04f 0c0a 	mov.w	ip, #10
 800b998:	4620      	mov	r0, r4
 800b99a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b99e:	3a30      	subs	r2, #48	; 0x30
 800b9a0:	2a09      	cmp	r2, #9
 800b9a2:	d903      	bls.n	800b9ac <_svfiprintf_r+0x1a8>
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d0c5      	beq.n	800b934 <_svfiprintf_r+0x130>
 800b9a8:	9105      	str	r1, [sp, #20]
 800b9aa:	e7c3      	b.n	800b934 <_svfiprintf_r+0x130>
 800b9ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e7f0      	b.n	800b998 <_svfiprintf_r+0x194>
 800b9b6:	ab03      	add	r3, sp, #12
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	462a      	mov	r2, r5
 800b9bc:	4b0f      	ldr	r3, [pc, #60]	; (800b9fc <_svfiprintf_r+0x1f8>)
 800b9be:	a904      	add	r1, sp, #16
 800b9c0:	4638      	mov	r0, r7
 800b9c2:	f3af 8000 	nop.w
 800b9c6:	1c42      	adds	r2, r0, #1
 800b9c8:	4606      	mov	r6, r0
 800b9ca:	d1d6      	bne.n	800b97a <_svfiprintf_r+0x176>
 800b9cc:	89ab      	ldrh	r3, [r5, #12]
 800b9ce:	065b      	lsls	r3, r3, #25
 800b9d0:	f53f af2c 	bmi.w	800b82c <_svfiprintf_r+0x28>
 800b9d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9d6:	b01d      	add	sp, #116	; 0x74
 800b9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9dc:	ab03      	add	r3, sp, #12
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	462a      	mov	r2, r5
 800b9e2:	4b06      	ldr	r3, [pc, #24]	; (800b9fc <_svfiprintf_r+0x1f8>)
 800b9e4:	a904      	add	r1, sp, #16
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	f000 f9d4 	bl	800bd94 <_printf_i>
 800b9ec:	e7eb      	b.n	800b9c6 <_svfiprintf_r+0x1c2>
 800b9ee:	bf00      	nop
 800b9f0:	0800e14c 	.word	0x0800e14c
 800b9f4:	0800e156 	.word	0x0800e156
 800b9f8:	00000000 	.word	0x00000000
 800b9fc:	0800b74d 	.word	0x0800b74d
 800ba00:	0800e152 	.word	0x0800e152

0800ba04 <__sfputc_r>:
 800ba04:	6893      	ldr	r3, [r2, #8]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	b410      	push	{r4}
 800ba0c:	6093      	str	r3, [r2, #8]
 800ba0e:	da08      	bge.n	800ba22 <__sfputc_r+0x1e>
 800ba10:	6994      	ldr	r4, [r2, #24]
 800ba12:	42a3      	cmp	r3, r4
 800ba14:	db01      	blt.n	800ba1a <__sfputc_r+0x16>
 800ba16:	290a      	cmp	r1, #10
 800ba18:	d103      	bne.n	800ba22 <__sfputc_r+0x1e>
 800ba1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba1e:	f7ff ba9d 	b.w	800af5c <__swbuf_r>
 800ba22:	6813      	ldr	r3, [r2, #0]
 800ba24:	1c58      	adds	r0, r3, #1
 800ba26:	6010      	str	r0, [r2, #0]
 800ba28:	7019      	strb	r1, [r3, #0]
 800ba2a:	4608      	mov	r0, r1
 800ba2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <__sfputs_r>:
 800ba32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba34:	4606      	mov	r6, r0
 800ba36:	460f      	mov	r7, r1
 800ba38:	4614      	mov	r4, r2
 800ba3a:	18d5      	adds	r5, r2, r3
 800ba3c:	42ac      	cmp	r4, r5
 800ba3e:	d101      	bne.n	800ba44 <__sfputs_r+0x12>
 800ba40:	2000      	movs	r0, #0
 800ba42:	e007      	b.n	800ba54 <__sfputs_r+0x22>
 800ba44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba48:	463a      	mov	r2, r7
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7ff ffda 	bl	800ba04 <__sfputc_r>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	d1f3      	bne.n	800ba3c <__sfputs_r+0xa>
 800ba54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba58 <_vfiprintf_r>:
 800ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5c:	460d      	mov	r5, r1
 800ba5e:	b09d      	sub	sp, #116	; 0x74
 800ba60:	4614      	mov	r4, r2
 800ba62:	4698      	mov	r8, r3
 800ba64:	4606      	mov	r6, r0
 800ba66:	b118      	cbz	r0, 800ba70 <_vfiprintf_r+0x18>
 800ba68:	6983      	ldr	r3, [r0, #24]
 800ba6a:	b90b      	cbnz	r3, 800ba70 <_vfiprintf_r+0x18>
 800ba6c:	f7ff fc6e 	bl	800b34c <__sinit>
 800ba70:	4b89      	ldr	r3, [pc, #548]	; (800bc98 <_vfiprintf_r+0x240>)
 800ba72:	429d      	cmp	r5, r3
 800ba74:	d11b      	bne.n	800baae <_vfiprintf_r+0x56>
 800ba76:	6875      	ldr	r5, [r6, #4]
 800ba78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba7a:	07d9      	lsls	r1, r3, #31
 800ba7c:	d405      	bmi.n	800ba8a <_vfiprintf_r+0x32>
 800ba7e:	89ab      	ldrh	r3, [r5, #12]
 800ba80:	059a      	lsls	r2, r3, #22
 800ba82:	d402      	bmi.n	800ba8a <_vfiprintf_r+0x32>
 800ba84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba86:	f7ff fd11 	bl	800b4ac <__retarget_lock_acquire_recursive>
 800ba8a:	89ab      	ldrh	r3, [r5, #12]
 800ba8c:	071b      	lsls	r3, r3, #28
 800ba8e:	d501      	bpl.n	800ba94 <_vfiprintf_r+0x3c>
 800ba90:	692b      	ldr	r3, [r5, #16]
 800ba92:	b9eb      	cbnz	r3, 800bad0 <_vfiprintf_r+0x78>
 800ba94:	4629      	mov	r1, r5
 800ba96:	4630      	mov	r0, r6
 800ba98:	f7ff fab2 	bl	800b000 <__swsetup_r>
 800ba9c:	b1c0      	cbz	r0, 800bad0 <_vfiprintf_r+0x78>
 800ba9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baa0:	07dc      	lsls	r4, r3, #31
 800baa2:	d50e      	bpl.n	800bac2 <_vfiprintf_r+0x6a>
 800baa4:	f04f 30ff 	mov.w	r0, #4294967295
 800baa8:	b01d      	add	sp, #116	; 0x74
 800baaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baae:	4b7b      	ldr	r3, [pc, #492]	; (800bc9c <_vfiprintf_r+0x244>)
 800bab0:	429d      	cmp	r5, r3
 800bab2:	d101      	bne.n	800bab8 <_vfiprintf_r+0x60>
 800bab4:	68b5      	ldr	r5, [r6, #8]
 800bab6:	e7df      	b.n	800ba78 <_vfiprintf_r+0x20>
 800bab8:	4b79      	ldr	r3, [pc, #484]	; (800bca0 <_vfiprintf_r+0x248>)
 800baba:	429d      	cmp	r5, r3
 800babc:	bf08      	it	eq
 800babe:	68f5      	ldreq	r5, [r6, #12]
 800bac0:	e7da      	b.n	800ba78 <_vfiprintf_r+0x20>
 800bac2:	89ab      	ldrh	r3, [r5, #12]
 800bac4:	0598      	lsls	r0, r3, #22
 800bac6:	d4ed      	bmi.n	800baa4 <_vfiprintf_r+0x4c>
 800bac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baca:	f7ff fcf0 	bl	800b4ae <__retarget_lock_release_recursive>
 800bace:	e7e9      	b.n	800baa4 <_vfiprintf_r+0x4c>
 800bad0:	2300      	movs	r3, #0
 800bad2:	9309      	str	r3, [sp, #36]	; 0x24
 800bad4:	2320      	movs	r3, #32
 800bad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bada:	f8cd 800c 	str.w	r8, [sp, #12]
 800bade:	2330      	movs	r3, #48	; 0x30
 800bae0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bca4 <_vfiprintf_r+0x24c>
 800bae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bae8:	f04f 0901 	mov.w	r9, #1
 800baec:	4623      	mov	r3, r4
 800baee:	469a      	mov	sl, r3
 800baf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baf4:	b10a      	cbz	r2, 800bafa <_vfiprintf_r+0xa2>
 800baf6:	2a25      	cmp	r2, #37	; 0x25
 800baf8:	d1f9      	bne.n	800baee <_vfiprintf_r+0x96>
 800bafa:	ebba 0b04 	subs.w	fp, sl, r4
 800bafe:	d00b      	beq.n	800bb18 <_vfiprintf_r+0xc0>
 800bb00:	465b      	mov	r3, fp
 800bb02:	4622      	mov	r2, r4
 800bb04:	4629      	mov	r1, r5
 800bb06:	4630      	mov	r0, r6
 800bb08:	f7ff ff93 	bl	800ba32 <__sfputs_r>
 800bb0c:	3001      	adds	r0, #1
 800bb0e:	f000 80aa 	beq.w	800bc66 <_vfiprintf_r+0x20e>
 800bb12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb14:	445a      	add	r2, fp
 800bb16:	9209      	str	r2, [sp, #36]	; 0x24
 800bb18:	f89a 3000 	ldrb.w	r3, [sl]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f000 80a2 	beq.w	800bc66 <_vfiprintf_r+0x20e>
 800bb22:	2300      	movs	r3, #0
 800bb24:	f04f 32ff 	mov.w	r2, #4294967295
 800bb28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb2c:	f10a 0a01 	add.w	sl, sl, #1
 800bb30:	9304      	str	r3, [sp, #16]
 800bb32:	9307      	str	r3, [sp, #28]
 800bb34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb38:	931a      	str	r3, [sp, #104]	; 0x68
 800bb3a:	4654      	mov	r4, sl
 800bb3c:	2205      	movs	r2, #5
 800bb3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb42:	4858      	ldr	r0, [pc, #352]	; (800bca4 <_vfiprintf_r+0x24c>)
 800bb44:	f7f4 fb4c 	bl	80001e0 <memchr>
 800bb48:	9a04      	ldr	r2, [sp, #16]
 800bb4a:	b9d8      	cbnz	r0, 800bb84 <_vfiprintf_r+0x12c>
 800bb4c:	06d1      	lsls	r1, r2, #27
 800bb4e:	bf44      	itt	mi
 800bb50:	2320      	movmi	r3, #32
 800bb52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb56:	0713      	lsls	r3, r2, #28
 800bb58:	bf44      	itt	mi
 800bb5a:	232b      	movmi	r3, #43	; 0x2b
 800bb5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb60:	f89a 3000 	ldrb.w	r3, [sl]
 800bb64:	2b2a      	cmp	r3, #42	; 0x2a
 800bb66:	d015      	beq.n	800bb94 <_vfiprintf_r+0x13c>
 800bb68:	9a07      	ldr	r2, [sp, #28]
 800bb6a:	4654      	mov	r4, sl
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	f04f 0c0a 	mov.w	ip, #10
 800bb72:	4621      	mov	r1, r4
 800bb74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb78:	3b30      	subs	r3, #48	; 0x30
 800bb7a:	2b09      	cmp	r3, #9
 800bb7c:	d94e      	bls.n	800bc1c <_vfiprintf_r+0x1c4>
 800bb7e:	b1b0      	cbz	r0, 800bbae <_vfiprintf_r+0x156>
 800bb80:	9207      	str	r2, [sp, #28]
 800bb82:	e014      	b.n	800bbae <_vfiprintf_r+0x156>
 800bb84:	eba0 0308 	sub.w	r3, r0, r8
 800bb88:	fa09 f303 	lsl.w	r3, r9, r3
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	9304      	str	r3, [sp, #16]
 800bb90:	46a2      	mov	sl, r4
 800bb92:	e7d2      	b.n	800bb3a <_vfiprintf_r+0xe2>
 800bb94:	9b03      	ldr	r3, [sp, #12]
 800bb96:	1d19      	adds	r1, r3, #4
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	9103      	str	r1, [sp, #12]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	bfbb      	ittet	lt
 800bba0:	425b      	neglt	r3, r3
 800bba2:	f042 0202 	orrlt.w	r2, r2, #2
 800bba6:	9307      	strge	r3, [sp, #28]
 800bba8:	9307      	strlt	r3, [sp, #28]
 800bbaa:	bfb8      	it	lt
 800bbac:	9204      	strlt	r2, [sp, #16]
 800bbae:	7823      	ldrb	r3, [r4, #0]
 800bbb0:	2b2e      	cmp	r3, #46	; 0x2e
 800bbb2:	d10c      	bne.n	800bbce <_vfiprintf_r+0x176>
 800bbb4:	7863      	ldrb	r3, [r4, #1]
 800bbb6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbb8:	d135      	bne.n	800bc26 <_vfiprintf_r+0x1ce>
 800bbba:	9b03      	ldr	r3, [sp, #12]
 800bbbc:	1d1a      	adds	r2, r3, #4
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	9203      	str	r2, [sp, #12]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	bfb8      	it	lt
 800bbc6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbca:	3402      	adds	r4, #2
 800bbcc:	9305      	str	r3, [sp, #20]
 800bbce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bcb4 <_vfiprintf_r+0x25c>
 800bbd2:	7821      	ldrb	r1, [r4, #0]
 800bbd4:	2203      	movs	r2, #3
 800bbd6:	4650      	mov	r0, sl
 800bbd8:	f7f4 fb02 	bl	80001e0 <memchr>
 800bbdc:	b140      	cbz	r0, 800bbf0 <_vfiprintf_r+0x198>
 800bbde:	2340      	movs	r3, #64	; 0x40
 800bbe0:	eba0 000a 	sub.w	r0, r0, sl
 800bbe4:	fa03 f000 	lsl.w	r0, r3, r0
 800bbe8:	9b04      	ldr	r3, [sp, #16]
 800bbea:	4303      	orrs	r3, r0
 800bbec:	3401      	adds	r4, #1
 800bbee:	9304      	str	r3, [sp, #16]
 800bbf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf4:	482c      	ldr	r0, [pc, #176]	; (800bca8 <_vfiprintf_r+0x250>)
 800bbf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbfa:	2206      	movs	r2, #6
 800bbfc:	f7f4 faf0 	bl	80001e0 <memchr>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	d03f      	beq.n	800bc84 <_vfiprintf_r+0x22c>
 800bc04:	4b29      	ldr	r3, [pc, #164]	; (800bcac <_vfiprintf_r+0x254>)
 800bc06:	bb1b      	cbnz	r3, 800bc50 <_vfiprintf_r+0x1f8>
 800bc08:	9b03      	ldr	r3, [sp, #12]
 800bc0a:	3307      	adds	r3, #7
 800bc0c:	f023 0307 	bic.w	r3, r3, #7
 800bc10:	3308      	adds	r3, #8
 800bc12:	9303      	str	r3, [sp, #12]
 800bc14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc16:	443b      	add	r3, r7
 800bc18:	9309      	str	r3, [sp, #36]	; 0x24
 800bc1a:	e767      	b.n	800baec <_vfiprintf_r+0x94>
 800bc1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc20:	460c      	mov	r4, r1
 800bc22:	2001      	movs	r0, #1
 800bc24:	e7a5      	b.n	800bb72 <_vfiprintf_r+0x11a>
 800bc26:	2300      	movs	r3, #0
 800bc28:	3401      	adds	r4, #1
 800bc2a:	9305      	str	r3, [sp, #20]
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	f04f 0c0a 	mov.w	ip, #10
 800bc32:	4620      	mov	r0, r4
 800bc34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc38:	3a30      	subs	r2, #48	; 0x30
 800bc3a:	2a09      	cmp	r2, #9
 800bc3c:	d903      	bls.n	800bc46 <_vfiprintf_r+0x1ee>
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d0c5      	beq.n	800bbce <_vfiprintf_r+0x176>
 800bc42:	9105      	str	r1, [sp, #20]
 800bc44:	e7c3      	b.n	800bbce <_vfiprintf_r+0x176>
 800bc46:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e7f0      	b.n	800bc32 <_vfiprintf_r+0x1da>
 800bc50:	ab03      	add	r3, sp, #12
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	462a      	mov	r2, r5
 800bc56:	4b16      	ldr	r3, [pc, #88]	; (800bcb0 <_vfiprintf_r+0x258>)
 800bc58:	a904      	add	r1, sp, #16
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f3af 8000 	nop.w
 800bc60:	4607      	mov	r7, r0
 800bc62:	1c78      	adds	r0, r7, #1
 800bc64:	d1d6      	bne.n	800bc14 <_vfiprintf_r+0x1bc>
 800bc66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc68:	07d9      	lsls	r1, r3, #31
 800bc6a:	d405      	bmi.n	800bc78 <_vfiprintf_r+0x220>
 800bc6c:	89ab      	ldrh	r3, [r5, #12]
 800bc6e:	059a      	lsls	r2, r3, #22
 800bc70:	d402      	bmi.n	800bc78 <_vfiprintf_r+0x220>
 800bc72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc74:	f7ff fc1b 	bl	800b4ae <__retarget_lock_release_recursive>
 800bc78:	89ab      	ldrh	r3, [r5, #12]
 800bc7a:	065b      	lsls	r3, r3, #25
 800bc7c:	f53f af12 	bmi.w	800baa4 <_vfiprintf_r+0x4c>
 800bc80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc82:	e711      	b.n	800baa8 <_vfiprintf_r+0x50>
 800bc84:	ab03      	add	r3, sp, #12
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	462a      	mov	r2, r5
 800bc8a:	4b09      	ldr	r3, [pc, #36]	; (800bcb0 <_vfiprintf_r+0x258>)
 800bc8c:	a904      	add	r1, sp, #16
 800bc8e:	4630      	mov	r0, r6
 800bc90:	f000 f880 	bl	800bd94 <_printf_i>
 800bc94:	e7e4      	b.n	800bc60 <_vfiprintf_r+0x208>
 800bc96:	bf00      	nop
 800bc98:	0800e10c 	.word	0x0800e10c
 800bc9c:	0800e12c 	.word	0x0800e12c
 800bca0:	0800e0ec 	.word	0x0800e0ec
 800bca4:	0800e14c 	.word	0x0800e14c
 800bca8:	0800e156 	.word	0x0800e156
 800bcac:	00000000 	.word	0x00000000
 800bcb0:	0800ba33 	.word	0x0800ba33
 800bcb4:	0800e152 	.word	0x0800e152

0800bcb8 <_printf_common>:
 800bcb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcbc:	4616      	mov	r6, r2
 800bcbe:	4699      	mov	r9, r3
 800bcc0:	688a      	ldr	r2, [r1, #8]
 800bcc2:	690b      	ldr	r3, [r1, #16]
 800bcc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	bfb8      	it	lt
 800bccc:	4613      	movlt	r3, r2
 800bcce:	6033      	str	r3, [r6, #0]
 800bcd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcd4:	4607      	mov	r7, r0
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	b10a      	cbz	r2, 800bcde <_printf_common+0x26>
 800bcda:	3301      	adds	r3, #1
 800bcdc:	6033      	str	r3, [r6, #0]
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	0699      	lsls	r1, r3, #26
 800bce2:	bf42      	ittt	mi
 800bce4:	6833      	ldrmi	r3, [r6, #0]
 800bce6:	3302      	addmi	r3, #2
 800bce8:	6033      	strmi	r3, [r6, #0]
 800bcea:	6825      	ldr	r5, [r4, #0]
 800bcec:	f015 0506 	ands.w	r5, r5, #6
 800bcf0:	d106      	bne.n	800bd00 <_printf_common+0x48>
 800bcf2:	f104 0a19 	add.w	sl, r4, #25
 800bcf6:	68e3      	ldr	r3, [r4, #12]
 800bcf8:	6832      	ldr	r2, [r6, #0]
 800bcfa:	1a9b      	subs	r3, r3, r2
 800bcfc:	42ab      	cmp	r3, r5
 800bcfe:	dc26      	bgt.n	800bd4e <_printf_common+0x96>
 800bd00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd04:	1e13      	subs	r3, r2, #0
 800bd06:	6822      	ldr	r2, [r4, #0]
 800bd08:	bf18      	it	ne
 800bd0a:	2301      	movne	r3, #1
 800bd0c:	0692      	lsls	r2, r2, #26
 800bd0e:	d42b      	bmi.n	800bd68 <_printf_common+0xb0>
 800bd10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd14:	4649      	mov	r1, r9
 800bd16:	4638      	mov	r0, r7
 800bd18:	47c0      	blx	r8
 800bd1a:	3001      	adds	r0, #1
 800bd1c:	d01e      	beq.n	800bd5c <_printf_common+0xa4>
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	68e5      	ldr	r5, [r4, #12]
 800bd22:	6832      	ldr	r2, [r6, #0]
 800bd24:	f003 0306 	and.w	r3, r3, #6
 800bd28:	2b04      	cmp	r3, #4
 800bd2a:	bf08      	it	eq
 800bd2c:	1aad      	subeq	r5, r5, r2
 800bd2e:	68a3      	ldr	r3, [r4, #8]
 800bd30:	6922      	ldr	r2, [r4, #16]
 800bd32:	bf0c      	ite	eq
 800bd34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd38:	2500      	movne	r5, #0
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	bfc4      	itt	gt
 800bd3e:	1a9b      	subgt	r3, r3, r2
 800bd40:	18ed      	addgt	r5, r5, r3
 800bd42:	2600      	movs	r6, #0
 800bd44:	341a      	adds	r4, #26
 800bd46:	42b5      	cmp	r5, r6
 800bd48:	d11a      	bne.n	800bd80 <_printf_common+0xc8>
 800bd4a:	2000      	movs	r0, #0
 800bd4c:	e008      	b.n	800bd60 <_printf_common+0xa8>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	4652      	mov	r2, sl
 800bd52:	4649      	mov	r1, r9
 800bd54:	4638      	mov	r0, r7
 800bd56:	47c0      	blx	r8
 800bd58:	3001      	adds	r0, #1
 800bd5a:	d103      	bne.n	800bd64 <_printf_common+0xac>
 800bd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd64:	3501      	adds	r5, #1
 800bd66:	e7c6      	b.n	800bcf6 <_printf_common+0x3e>
 800bd68:	18e1      	adds	r1, r4, r3
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	2030      	movs	r0, #48	; 0x30
 800bd6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd72:	4422      	add	r2, r4
 800bd74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd7c:	3302      	adds	r3, #2
 800bd7e:	e7c7      	b.n	800bd10 <_printf_common+0x58>
 800bd80:	2301      	movs	r3, #1
 800bd82:	4622      	mov	r2, r4
 800bd84:	4649      	mov	r1, r9
 800bd86:	4638      	mov	r0, r7
 800bd88:	47c0      	blx	r8
 800bd8a:	3001      	adds	r0, #1
 800bd8c:	d0e6      	beq.n	800bd5c <_printf_common+0xa4>
 800bd8e:	3601      	adds	r6, #1
 800bd90:	e7d9      	b.n	800bd46 <_printf_common+0x8e>
	...

0800bd94 <_printf_i>:
 800bd94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd98:	7e0f      	ldrb	r7, [r1, #24]
 800bd9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd9c:	2f78      	cmp	r7, #120	; 0x78
 800bd9e:	4691      	mov	r9, r2
 800bda0:	4680      	mov	r8, r0
 800bda2:	460c      	mov	r4, r1
 800bda4:	469a      	mov	sl, r3
 800bda6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bdaa:	d807      	bhi.n	800bdbc <_printf_i+0x28>
 800bdac:	2f62      	cmp	r7, #98	; 0x62
 800bdae:	d80a      	bhi.n	800bdc6 <_printf_i+0x32>
 800bdb0:	2f00      	cmp	r7, #0
 800bdb2:	f000 80d8 	beq.w	800bf66 <_printf_i+0x1d2>
 800bdb6:	2f58      	cmp	r7, #88	; 0x58
 800bdb8:	f000 80a3 	beq.w	800bf02 <_printf_i+0x16e>
 800bdbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bdc4:	e03a      	b.n	800be3c <_printf_i+0xa8>
 800bdc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bdca:	2b15      	cmp	r3, #21
 800bdcc:	d8f6      	bhi.n	800bdbc <_printf_i+0x28>
 800bdce:	a101      	add	r1, pc, #4	; (adr r1, 800bdd4 <_printf_i+0x40>)
 800bdd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdd4:	0800be2d 	.word	0x0800be2d
 800bdd8:	0800be41 	.word	0x0800be41
 800bddc:	0800bdbd 	.word	0x0800bdbd
 800bde0:	0800bdbd 	.word	0x0800bdbd
 800bde4:	0800bdbd 	.word	0x0800bdbd
 800bde8:	0800bdbd 	.word	0x0800bdbd
 800bdec:	0800be41 	.word	0x0800be41
 800bdf0:	0800bdbd 	.word	0x0800bdbd
 800bdf4:	0800bdbd 	.word	0x0800bdbd
 800bdf8:	0800bdbd 	.word	0x0800bdbd
 800bdfc:	0800bdbd 	.word	0x0800bdbd
 800be00:	0800bf4d 	.word	0x0800bf4d
 800be04:	0800be71 	.word	0x0800be71
 800be08:	0800bf2f 	.word	0x0800bf2f
 800be0c:	0800bdbd 	.word	0x0800bdbd
 800be10:	0800bdbd 	.word	0x0800bdbd
 800be14:	0800bf6f 	.word	0x0800bf6f
 800be18:	0800bdbd 	.word	0x0800bdbd
 800be1c:	0800be71 	.word	0x0800be71
 800be20:	0800bdbd 	.word	0x0800bdbd
 800be24:	0800bdbd 	.word	0x0800bdbd
 800be28:	0800bf37 	.word	0x0800bf37
 800be2c:	682b      	ldr	r3, [r5, #0]
 800be2e:	1d1a      	adds	r2, r3, #4
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	602a      	str	r2, [r5, #0]
 800be34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be3c:	2301      	movs	r3, #1
 800be3e:	e0a3      	b.n	800bf88 <_printf_i+0x1f4>
 800be40:	6820      	ldr	r0, [r4, #0]
 800be42:	6829      	ldr	r1, [r5, #0]
 800be44:	0606      	lsls	r6, r0, #24
 800be46:	f101 0304 	add.w	r3, r1, #4
 800be4a:	d50a      	bpl.n	800be62 <_printf_i+0xce>
 800be4c:	680e      	ldr	r6, [r1, #0]
 800be4e:	602b      	str	r3, [r5, #0]
 800be50:	2e00      	cmp	r6, #0
 800be52:	da03      	bge.n	800be5c <_printf_i+0xc8>
 800be54:	232d      	movs	r3, #45	; 0x2d
 800be56:	4276      	negs	r6, r6
 800be58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be5c:	485e      	ldr	r0, [pc, #376]	; (800bfd8 <_printf_i+0x244>)
 800be5e:	230a      	movs	r3, #10
 800be60:	e019      	b.n	800be96 <_printf_i+0x102>
 800be62:	680e      	ldr	r6, [r1, #0]
 800be64:	602b      	str	r3, [r5, #0]
 800be66:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be6a:	bf18      	it	ne
 800be6c:	b236      	sxthne	r6, r6
 800be6e:	e7ef      	b.n	800be50 <_printf_i+0xbc>
 800be70:	682b      	ldr	r3, [r5, #0]
 800be72:	6820      	ldr	r0, [r4, #0]
 800be74:	1d19      	adds	r1, r3, #4
 800be76:	6029      	str	r1, [r5, #0]
 800be78:	0601      	lsls	r1, r0, #24
 800be7a:	d501      	bpl.n	800be80 <_printf_i+0xec>
 800be7c:	681e      	ldr	r6, [r3, #0]
 800be7e:	e002      	b.n	800be86 <_printf_i+0xf2>
 800be80:	0646      	lsls	r6, r0, #25
 800be82:	d5fb      	bpl.n	800be7c <_printf_i+0xe8>
 800be84:	881e      	ldrh	r6, [r3, #0]
 800be86:	4854      	ldr	r0, [pc, #336]	; (800bfd8 <_printf_i+0x244>)
 800be88:	2f6f      	cmp	r7, #111	; 0x6f
 800be8a:	bf0c      	ite	eq
 800be8c:	2308      	moveq	r3, #8
 800be8e:	230a      	movne	r3, #10
 800be90:	2100      	movs	r1, #0
 800be92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be96:	6865      	ldr	r5, [r4, #4]
 800be98:	60a5      	str	r5, [r4, #8]
 800be9a:	2d00      	cmp	r5, #0
 800be9c:	bfa2      	ittt	ge
 800be9e:	6821      	ldrge	r1, [r4, #0]
 800bea0:	f021 0104 	bicge.w	r1, r1, #4
 800bea4:	6021      	strge	r1, [r4, #0]
 800bea6:	b90e      	cbnz	r6, 800beac <_printf_i+0x118>
 800bea8:	2d00      	cmp	r5, #0
 800beaa:	d04d      	beq.n	800bf48 <_printf_i+0x1b4>
 800beac:	4615      	mov	r5, r2
 800beae:	fbb6 f1f3 	udiv	r1, r6, r3
 800beb2:	fb03 6711 	mls	r7, r3, r1, r6
 800beb6:	5dc7      	ldrb	r7, [r0, r7]
 800beb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bebc:	4637      	mov	r7, r6
 800bebe:	42bb      	cmp	r3, r7
 800bec0:	460e      	mov	r6, r1
 800bec2:	d9f4      	bls.n	800beae <_printf_i+0x11a>
 800bec4:	2b08      	cmp	r3, #8
 800bec6:	d10b      	bne.n	800bee0 <_printf_i+0x14c>
 800bec8:	6823      	ldr	r3, [r4, #0]
 800beca:	07de      	lsls	r6, r3, #31
 800becc:	d508      	bpl.n	800bee0 <_printf_i+0x14c>
 800bece:	6923      	ldr	r3, [r4, #16]
 800bed0:	6861      	ldr	r1, [r4, #4]
 800bed2:	4299      	cmp	r1, r3
 800bed4:	bfde      	ittt	le
 800bed6:	2330      	movle	r3, #48	; 0x30
 800bed8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bedc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bee0:	1b52      	subs	r2, r2, r5
 800bee2:	6122      	str	r2, [r4, #16]
 800bee4:	f8cd a000 	str.w	sl, [sp]
 800bee8:	464b      	mov	r3, r9
 800beea:	aa03      	add	r2, sp, #12
 800beec:	4621      	mov	r1, r4
 800beee:	4640      	mov	r0, r8
 800bef0:	f7ff fee2 	bl	800bcb8 <_printf_common>
 800bef4:	3001      	adds	r0, #1
 800bef6:	d14c      	bne.n	800bf92 <_printf_i+0x1fe>
 800bef8:	f04f 30ff 	mov.w	r0, #4294967295
 800befc:	b004      	add	sp, #16
 800befe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf02:	4835      	ldr	r0, [pc, #212]	; (800bfd8 <_printf_i+0x244>)
 800bf04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bf08:	6829      	ldr	r1, [r5, #0]
 800bf0a:	6823      	ldr	r3, [r4, #0]
 800bf0c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf10:	6029      	str	r1, [r5, #0]
 800bf12:	061d      	lsls	r5, r3, #24
 800bf14:	d514      	bpl.n	800bf40 <_printf_i+0x1ac>
 800bf16:	07df      	lsls	r7, r3, #31
 800bf18:	bf44      	itt	mi
 800bf1a:	f043 0320 	orrmi.w	r3, r3, #32
 800bf1e:	6023      	strmi	r3, [r4, #0]
 800bf20:	b91e      	cbnz	r6, 800bf2a <_printf_i+0x196>
 800bf22:	6823      	ldr	r3, [r4, #0]
 800bf24:	f023 0320 	bic.w	r3, r3, #32
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	2310      	movs	r3, #16
 800bf2c:	e7b0      	b.n	800be90 <_printf_i+0xfc>
 800bf2e:	6823      	ldr	r3, [r4, #0]
 800bf30:	f043 0320 	orr.w	r3, r3, #32
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	2378      	movs	r3, #120	; 0x78
 800bf38:	4828      	ldr	r0, [pc, #160]	; (800bfdc <_printf_i+0x248>)
 800bf3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf3e:	e7e3      	b.n	800bf08 <_printf_i+0x174>
 800bf40:	0659      	lsls	r1, r3, #25
 800bf42:	bf48      	it	mi
 800bf44:	b2b6      	uxthmi	r6, r6
 800bf46:	e7e6      	b.n	800bf16 <_printf_i+0x182>
 800bf48:	4615      	mov	r5, r2
 800bf4a:	e7bb      	b.n	800bec4 <_printf_i+0x130>
 800bf4c:	682b      	ldr	r3, [r5, #0]
 800bf4e:	6826      	ldr	r6, [r4, #0]
 800bf50:	6961      	ldr	r1, [r4, #20]
 800bf52:	1d18      	adds	r0, r3, #4
 800bf54:	6028      	str	r0, [r5, #0]
 800bf56:	0635      	lsls	r5, r6, #24
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	d501      	bpl.n	800bf60 <_printf_i+0x1cc>
 800bf5c:	6019      	str	r1, [r3, #0]
 800bf5e:	e002      	b.n	800bf66 <_printf_i+0x1d2>
 800bf60:	0670      	lsls	r0, r6, #25
 800bf62:	d5fb      	bpl.n	800bf5c <_printf_i+0x1c8>
 800bf64:	8019      	strh	r1, [r3, #0]
 800bf66:	2300      	movs	r3, #0
 800bf68:	6123      	str	r3, [r4, #16]
 800bf6a:	4615      	mov	r5, r2
 800bf6c:	e7ba      	b.n	800bee4 <_printf_i+0x150>
 800bf6e:	682b      	ldr	r3, [r5, #0]
 800bf70:	1d1a      	adds	r2, r3, #4
 800bf72:	602a      	str	r2, [r5, #0]
 800bf74:	681d      	ldr	r5, [r3, #0]
 800bf76:	6862      	ldr	r2, [r4, #4]
 800bf78:	2100      	movs	r1, #0
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f7f4 f930 	bl	80001e0 <memchr>
 800bf80:	b108      	cbz	r0, 800bf86 <_printf_i+0x1f2>
 800bf82:	1b40      	subs	r0, r0, r5
 800bf84:	6060      	str	r0, [r4, #4]
 800bf86:	6863      	ldr	r3, [r4, #4]
 800bf88:	6123      	str	r3, [r4, #16]
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf90:	e7a8      	b.n	800bee4 <_printf_i+0x150>
 800bf92:	6923      	ldr	r3, [r4, #16]
 800bf94:	462a      	mov	r2, r5
 800bf96:	4649      	mov	r1, r9
 800bf98:	4640      	mov	r0, r8
 800bf9a:	47d0      	blx	sl
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	d0ab      	beq.n	800bef8 <_printf_i+0x164>
 800bfa0:	6823      	ldr	r3, [r4, #0]
 800bfa2:	079b      	lsls	r3, r3, #30
 800bfa4:	d413      	bmi.n	800bfce <_printf_i+0x23a>
 800bfa6:	68e0      	ldr	r0, [r4, #12]
 800bfa8:	9b03      	ldr	r3, [sp, #12]
 800bfaa:	4298      	cmp	r0, r3
 800bfac:	bfb8      	it	lt
 800bfae:	4618      	movlt	r0, r3
 800bfb0:	e7a4      	b.n	800befc <_printf_i+0x168>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	4632      	mov	r2, r6
 800bfb6:	4649      	mov	r1, r9
 800bfb8:	4640      	mov	r0, r8
 800bfba:	47d0      	blx	sl
 800bfbc:	3001      	adds	r0, #1
 800bfbe:	d09b      	beq.n	800bef8 <_printf_i+0x164>
 800bfc0:	3501      	adds	r5, #1
 800bfc2:	68e3      	ldr	r3, [r4, #12]
 800bfc4:	9903      	ldr	r1, [sp, #12]
 800bfc6:	1a5b      	subs	r3, r3, r1
 800bfc8:	42ab      	cmp	r3, r5
 800bfca:	dcf2      	bgt.n	800bfb2 <_printf_i+0x21e>
 800bfcc:	e7eb      	b.n	800bfa6 <_printf_i+0x212>
 800bfce:	2500      	movs	r5, #0
 800bfd0:	f104 0619 	add.w	r6, r4, #25
 800bfd4:	e7f5      	b.n	800bfc2 <_printf_i+0x22e>
 800bfd6:	bf00      	nop
 800bfd8:	0800e15d 	.word	0x0800e15d
 800bfdc:	0800e16e 	.word	0x0800e16e

0800bfe0 <_sbrk_r>:
 800bfe0:	b538      	push	{r3, r4, r5, lr}
 800bfe2:	4d06      	ldr	r5, [pc, #24]	; (800bffc <_sbrk_r+0x1c>)
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	4608      	mov	r0, r1
 800bfea:	602b      	str	r3, [r5, #0]
 800bfec:	f7f8 ffc4 	bl	8004f78 <_sbrk>
 800bff0:	1c43      	adds	r3, r0, #1
 800bff2:	d102      	bne.n	800bffa <_sbrk_r+0x1a>
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	b103      	cbz	r3, 800bffa <_sbrk_r+0x1a>
 800bff8:	6023      	str	r3, [r4, #0]
 800bffa:	bd38      	pop	{r3, r4, r5, pc}
 800bffc:	20002a08 	.word	0x20002a08

0800c000 <__sread>:
 800c000:	b510      	push	{r4, lr}
 800c002:	460c      	mov	r4, r1
 800c004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c008:	f000 f900 	bl	800c20c <_read_r>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	bfab      	itete	ge
 800c010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c012:	89a3      	ldrhlt	r3, [r4, #12]
 800c014:	181b      	addge	r3, r3, r0
 800c016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c01a:	bfac      	ite	ge
 800c01c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c01e:	81a3      	strhlt	r3, [r4, #12]
 800c020:	bd10      	pop	{r4, pc}

0800c022 <__swrite>:
 800c022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c026:	461f      	mov	r7, r3
 800c028:	898b      	ldrh	r3, [r1, #12]
 800c02a:	05db      	lsls	r3, r3, #23
 800c02c:	4605      	mov	r5, r0
 800c02e:	460c      	mov	r4, r1
 800c030:	4616      	mov	r6, r2
 800c032:	d505      	bpl.n	800c040 <__swrite+0x1e>
 800c034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c038:	2302      	movs	r3, #2
 800c03a:	2200      	movs	r2, #0
 800c03c:	f000 f870 	bl	800c120 <_lseek_r>
 800c040:	89a3      	ldrh	r3, [r4, #12]
 800c042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c04a:	81a3      	strh	r3, [r4, #12]
 800c04c:	4632      	mov	r2, r6
 800c04e:	463b      	mov	r3, r7
 800c050:	4628      	mov	r0, r5
 800c052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c056:	f000 b817 	b.w	800c088 <_write_r>

0800c05a <__sseek>:
 800c05a:	b510      	push	{r4, lr}
 800c05c:	460c      	mov	r4, r1
 800c05e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c062:	f000 f85d 	bl	800c120 <_lseek_r>
 800c066:	1c43      	adds	r3, r0, #1
 800c068:	89a3      	ldrh	r3, [r4, #12]
 800c06a:	bf15      	itete	ne
 800c06c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c06e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c076:	81a3      	strheq	r3, [r4, #12]
 800c078:	bf18      	it	ne
 800c07a:	81a3      	strhne	r3, [r4, #12]
 800c07c:	bd10      	pop	{r4, pc}

0800c07e <__sclose>:
 800c07e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c082:	f000 b81b 	b.w	800c0bc <_close_r>
	...

0800c088 <_write_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	4d07      	ldr	r5, [pc, #28]	; (800c0a8 <_write_r+0x20>)
 800c08c:	4604      	mov	r4, r0
 800c08e:	4608      	mov	r0, r1
 800c090:	4611      	mov	r1, r2
 800c092:	2200      	movs	r2, #0
 800c094:	602a      	str	r2, [r5, #0]
 800c096:	461a      	mov	r2, r3
 800c098:	f7f6 f9cc 	bl	8002434 <_write>
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	d102      	bne.n	800c0a6 <_write_r+0x1e>
 800c0a0:	682b      	ldr	r3, [r5, #0]
 800c0a2:	b103      	cbz	r3, 800c0a6 <_write_r+0x1e>
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
 800c0a8:	20002a08 	.word	0x20002a08

0800c0ac <abort>:
 800c0ac:	b508      	push	{r3, lr}
 800c0ae:	2006      	movs	r0, #6
 800c0b0:	f000 f8e6 	bl	800c280 <raise>
 800c0b4:	2001      	movs	r0, #1
 800c0b6:	f7f8 ff03 	bl	8004ec0 <_exit>
	...

0800c0bc <_close_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	4d06      	ldr	r5, [pc, #24]	; (800c0d8 <_close_r+0x1c>)
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	4608      	mov	r0, r1
 800c0c6:	602b      	str	r3, [r5, #0]
 800c0c8:	f7f8 ff21 	bl	8004f0e <_close>
 800c0cc:	1c43      	adds	r3, r0, #1
 800c0ce:	d102      	bne.n	800c0d6 <_close_r+0x1a>
 800c0d0:	682b      	ldr	r3, [r5, #0]
 800c0d2:	b103      	cbz	r3, 800c0d6 <_close_r+0x1a>
 800c0d4:	6023      	str	r3, [r4, #0]
 800c0d6:	bd38      	pop	{r3, r4, r5, pc}
 800c0d8:	20002a08 	.word	0x20002a08

0800c0dc <_fstat_r>:
 800c0dc:	b538      	push	{r3, r4, r5, lr}
 800c0de:	4d07      	ldr	r5, [pc, #28]	; (800c0fc <_fstat_r+0x20>)
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	4608      	mov	r0, r1
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	602b      	str	r3, [r5, #0]
 800c0ea:	f7f8 ff1c 	bl	8004f26 <_fstat>
 800c0ee:	1c43      	adds	r3, r0, #1
 800c0f0:	d102      	bne.n	800c0f8 <_fstat_r+0x1c>
 800c0f2:	682b      	ldr	r3, [r5, #0]
 800c0f4:	b103      	cbz	r3, 800c0f8 <_fstat_r+0x1c>
 800c0f6:	6023      	str	r3, [r4, #0]
 800c0f8:	bd38      	pop	{r3, r4, r5, pc}
 800c0fa:	bf00      	nop
 800c0fc:	20002a08 	.word	0x20002a08

0800c100 <_isatty_r>:
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	4d06      	ldr	r5, [pc, #24]	; (800c11c <_isatty_r+0x1c>)
 800c104:	2300      	movs	r3, #0
 800c106:	4604      	mov	r4, r0
 800c108:	4608      	mov	r0, r1
 800c10a:	602b      	str	r3, [r5, #0]
 800c10c:	f7f8 ff1b 	bl	8004f46 <_isatty>
 800c110:	1c43      	adds	r3, r0, #1
 800c112:	d102      	bne.n	800c11a <_isatty_r+0x1a>
 800c114:	682b      	ldr	r3, [r5, #0]
 800c116:	b103      	cbz	r3, 800c11a <_isatty_r+0x1a>
 800c118:	6023      	str	r3, [r4, #0]
 800c11a:	bd38      	pop	{r3, r4, r5, pc}
 800c11c:	20002a08 	.word	0x20002a08

0800c120 <_lseek_r>:
 800c120:	b538      	push	{r3, r4, r5, lr}
 800c122:	4d07      	ldr	r5, [pc, #28]	; (800c140 <_lseek_r+0x20>)
 800c124:	4604      	mov	r4, r0
 800c126:	4608      	mov	r0, r1
 800c128:	4611      	mov	r1, r2
 800c12a:	2200      	movs	r2, #0
 800c12c:	602a      	str	r2, [r5, #0]
 800c12e:	461a      	mov	r2, r3
 800c130:	f7f8 ff14 	bl	8004f5c <_lseek>
 800c134:	1c43      	adds	r3, r0, #1
 800c136:	d102      	bne.n	800c13e <_lseek_r+0x1e>
 800c138:	682b      	ldr	r3, [r5, #0]
 800c13a:	b103      	cbz	r3, 800c13e <_lseek_r+0x1e>
 800c13c:	6023      	str	r3, [r4, #0]
 800c13e:	bd38      	pop	{r3, r4, r5, pc}
 800c140:	20002a08 	.word	0x20002a08

0800c144 <memcpy>:
 800c144:	440a      	add	r2, r1
 800c146:	4291      	cmp	r1, r2
 800c148:	f100 33ff 	add.w	r3, r0, #4294967295
 800c14c:	d100      	bne.n	800c150 <memcpy+0xc>
 800c14e:	4770      	bx	lr
 800c150:	b510      	push	{r4, lr}
 800c152:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c15a:	4291      	cmp	r1, r2
 800c15c:	d1f9      	bne.n	800c152 <memcpy+0xe>
 800c15e:	bd10      	pop	{r4, pc}

0800c160 <memmove>:
 800c160:	4288      	cmp	r0, r1
 800c162:	b510      	push	{r4, lr}
 800c164:	eb01 0402 	add.w	r4, r1, r2
 800c168:	d902      	bls.n	800c170 <memmove+0x10>
 800c16a:	4284      	cmp	r4, r0
 800c16c:	4623      	mov	r3, r4
 800c16e:	d807      	bhi.n	800c180 <memmove+0x20>
 800c170:	1e43      	subs	r3, r0, #1
 800c172:	42a1      	cmp	r1, r4
 800c174:	d008      	beq.n	800c188 <memmove+0x28>
 800c176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c17a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c17e:	e7f8      	b.n	800c172 <memmove+0x12>
 800c180:	4402      	add	r2, r0
 800c182:	4601      	mov	r1, r0
 800c184:	428a      	cmp	r2, r1
 800c186:	d100      	bne.n	800c18a <memmove+0x2a>
 800c188:	bd10      	pop	{r4, pc}
 800c18a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c18e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c192:	e7f7      	b.n	800c184 <memmove+0x24>

0800c194 <__malloc_lock>:
 800c194:	4801      	ldr	r0, [pc, #4]	; (800c19c <__malloc_lock+0x8>)
 800c196:	f7ff b989 	b.w	800b4ac <__retarget_lock_acquire_recursive>
 800c19a:	bf00      	nop
 800c19c:	200029fc 	.word	0x200029fc

0800c1a0 <__malloc_unlock>:
 800c1a0:	4801      	ldr	r0, [pc, #4]	; (800c1a8 <__malloc_unlock+0x8>)
 800c1a2:	f7ff b984 	b.w	800b4ae <__retarget_lock_release_recursive>
 800c1a6:	bf00      	nop
 800c1a8:	200029fc 	.word	0x200029fc

0800c1ac <_realloc_r>:
 800c1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b0:	4680      	mov	r8, r0
 800c1b2:	4614      	mov	r4, r2
 800c1b4:	460e      	mov	r6, r1
 800c1b6:	b921      	cbnz	r1, 800c1c2 <_realloc_r+0x16>
 800c1b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1bc:	4611      	mov	r1, r2
 800c1be:	f7ff ba51 	b.w	800b664 <_malloc_r>
 800c1c2:	b92a      	cbnz	r2, 800c1d0 <_realloc_r+0x24>
 800c1c4:	f7ff f9e2 	bl	800b58c <_free_r>
 800c1c8:	4625      	mov	r5, r4
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d0:	f000 f872 	bl	800c2b8 <_malloc_usable_size_r>
 800c1d4:	4284      	cmp	r4, r0
 800c1d6:	4607      	mov	r7, r0
 800c1d8:	d802      	bhi.n	800c1e0 <_realloc_r+0x34>
 800c1da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1de:	d812      	bhi.n	800c206 <_realloc_r+0x5a>
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	4640      	mov	r0, r8
 800c1e4:	f7ff fa3e 	bl	800b664 <_malloc_r>
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d0ed      	beq.n	800c1ca <_realloc_r+0x1e>
 800c1ee:	42bc      	cmp	r4, r7
 800c1f0:	4622      	mov	r2, r4
 800c1f2:	4631      	mov	r1, r6
 800c1f4:	bf28      	it	cs
 800c1f6:	463a      	movcs	r2, r7
 800c1f8:	f7ff ffa4 	bl	800c144 <memcpy>
 800c1fc:	4631      	mov	r1, r6
 800c1fe:	4640      	mov	r0, r8
 800c200:	f7ff f9c4 	bl	800b58c <_free_r>
 800c204:	e7e1      	b.n	800c1ca <_realloc_r+0x1e>
 800c206:	4635      	mov	r5, r6
 800c208:	e7df      	b.n	800c1ca <_realloc_r+0x1e>
	...

0800c20c <_read_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	4d07      	ldr	r5, [pc, #28]	; (800c22c <_read_r+0x20>)
 800c210:	4604      	mov	r4, r0
 800c212:	4608      	mov	r0, r1
 800c214:	4611      	mov	r1, r2
 800c216:	2200      	movs	r2, #0
 800c218:	602a      	str	r2, [r5, #0]
 800c21a:	461a      	mov	r2, r3
 800c21c:	f7f8 fe5a 	bl	8004ed4 <_read>
 800c220:	1c43      	adds	r3, r0, #1
 800c222:	d102      	bne.n	800c22a <_read_r+0x1e>
 800c224:	682b      	ldr	r3, [r5, #0]
 800c226:	b103      	cbz	r3, 800c22a <_read_r+0x1e>
 800c228:	6023      	str	r3, [r4, #0]
 800c22a:	bd38      	pop	{r3, r4, r5, pc}
 800c22c:	20002a08 	.word	0x20002a08

0800c230 <_raise_r>:
 800c230:	291f      	cmp	r1, #31
 800c232:	b538      	push	{r3, r4, r5, lr}
 800c234:	4604      	mov	r4, r0
 800c236:	460d      	mov	r5, r1
 800c238:	d904      	bls.n	800c244 <_raise_r+0x14>
 800c23a:	2316      	movs	r3, #22
 800c23c:	6003      	str	r3, [r0, #0]
 800c23e:	f04f 30ff 	mov.w	r0, #4294967295
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c246:	b112      	cbz	r2, 800c24e <_raise_r+0x1e>
 800c248:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c24c:	b94b      	cbnz	r3, 800c262 <_raise_r+0x32>
 800c24e:	4620      	mov	r0, r4
 800c250:	f000 f830 	bl	800c2b4 <_getpid_r>
 800c254:	462a      	mov	r2, r5
 800c256:	4601      	mov	r1, r0
 800c258:	4620      	mov	r0, r4
 800c25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c25e:	f000 b817 	b.w	800c290 <_kill_r>
 800c262:	2b01      	cmp	r3, #1
 800c264:	d00a      	beq.n	800c27c <_raise_r+0x4c>
 800c266:	1c59      	adds	r1, r3, #1
 800c268:	d103      	bne.n	800c272 <_raise_r+0x42>
 800c26a:	2316      	movs	r3, #22
 800c26c:	6003      	str	r3, [r0, #0]
 800c26e:	2001      	movs	r0, #1
 800c270:	e7e7      	b.n	800c242 <_raise_r+0x12>
 800c272:	2400      	movs	r4, #0
 800c274:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c278:	4628      	mov	r0, r5
 800c27a:	4798      	blx	r3
 800c27c:	2000      	movs	r0, #0
 800c27e:	e7e0      	b.n	800c242 <_raise_r+0x12>

0800c280 <raise>:
 800c280:	4b02      	ldr	r3, [pc, #8]	; (800c28c <raise+0xc>)
 800c282:	4601      	mov	r1, r0
 800c284:	6818      	ldr	r0, [r3, #0]
 800c286:	f7ff bfd3 	b.w	800c230 <_raise_r>
 800c28a:	bf00      	nop
 800c28c:	2000006c 	.word	0x2000006c

0800c290 <_kill_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	4d07      	ldr	r5, [pc, #28]	; (800c2b0 <_kill_r+0x20>)
 800c294:	2300      	movs	r3, #0
 800c296:	4604      	mov	r4, r0
 800c298:	4608      	mov	r0, r1
 800c29a:	4611      	mov	r1, r2
 800c29c:	602b      	str	r3, [r5, #0]
 800c29e:	f7f8 fdff 	bl	8004ea0 <_kill>
 800c2a2:	1c43      	adds	r3, r0, #1
 800c2a4:	d102      	bne.n	800c2ac <_kill_r+0x1c>
 800c2a6:	682b      	ldr	r3, [r5, #0]
 800c2a8:	b103      	cbz	r3, 800c2ac <_kill_r+0x1c>
 800c2aa:	6023      	str	r3, [r4, #0]
 800c2ac:	bd38      	pop	{r3, r4, r5, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20002a08 	.word	0x20002a08

0800c2b4 <_getpid_r>:
 800c2b4:	f7f8 bdec 	b.w	8004e90 <_getpid>

0800c2b8 <_malloc_usable_size_r>:
 800c2b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2bc:	1f18      	subs	r0, r3, #4
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	bfbc      	itt	lt
 800c2c2:	580b      	ldrlt	r3, [r1, r0]
 800c2c4:	18c0      	addlt	r0, r0, r3
 800c2c6:	4770      	bx	lr

0800c2c8 <_init>:
 800c2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ca:	bf00      	nop
 800c2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ce:	bc08      	pop	{r3}
 800c2d0:	469e      	mov	lr, r3
 800c2d2:	4770      	bx	lr

0800c2d4 <_fini>:
 800c2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d6:	bf00      	nop
 800c2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2da:	bc08      	pop	{r3}
 800c2dc:	469e      	mov	lr, r3
 800c2de:	4770      	bx	lr
