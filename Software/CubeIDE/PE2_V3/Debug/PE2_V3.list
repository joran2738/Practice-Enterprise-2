
PE2_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b16c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d34  0800b2fc  0800b2fc  0001b2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d030  0800d030  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800d030  0800d030  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d030  0800d030  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d030  0800d030  0001d030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d034  0800d034  0001d034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800d038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028d0  200000cc  0800d104  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000299c  0800d104  0002299c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d6e  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f35  00000000  00000000  00032e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00035da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00036dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018add  00000000  00000000  00037c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176c4  00000000  00000000  00050755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008604c  00000000  00000000  00067e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ede65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d24  00000000  00000000  000edeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2e4 	.word	0x0800b2e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	0800b2e4 	.word	0x0800b2e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <initBrickbreaker>:
uint8_t loopTester = 0;
uint8_t guardian = 0;
uint8_t guardianTimer = 100;
int toughnessColor[4] = {D_GREEN, GREY, DARK_GREY, BLACK};

void initBrickbreaker() {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
    person.x = SCREEN_WIDTH/2;
 8000276:	4b49      	ldr	r3, [pc, #292]	; (800039c <initBrickbreaker+0x12c>)
 8000278:	2228      	movs	r2, #40	; 0x28
 800027a:	701a      	strb	r2, [r3, #0]
    person.y = SCREEN_HEIGHT - 5;
 800027c:	4b47      	ldr	r3, [pc, #284]	; (800039c <initBrickbreaker+0x12c>)
 800027e:	2237      	movs	r2, #55	; 0x37
 8000280:	705a      	strb	r2, [r3, #1]
    ball.x = SCREEN_WIDTH/2;
 8000282:	4b47      	ldr	r3, [pc, #284]	; (80003a0 <initBrickbreaker+0x130>)
 8000284:	2228      	movs	r2, #40	; 0x28
 8000286:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000288:	4b45      	ldr	r3, [pc, #276]	; (80003a0 <initBrickbreaker+0x130>)
 800028a:	2236      	movs	r2, #54	; 0x36
 800028c:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 800028e:	4b44      	ldr	r3, [pc, #272]	; (80003a0 <initBrickbreaker+0x130>)
 8000290:	2208      	movs	r2, #8
 8000292:	721a      	strb	r2, [r3, #8]
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e041      	b.n	800031e <initBrickbreaker+0xae>
        for(int j = 0; j < 10; j++) {
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
 800029e:	e038      	b.n	8000312 <initBrickbreaker+0xa2>
            bricks[i][j].x = j * 8;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	00d9      	lsls	r1, r3, #3
 80002a4:	483f      	ldr	r0, [pc, #252]	; (80003a4 <initBrickbreaker+0x134>)
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	4613      	mov	r3, r2
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	4413      	add	r3, r2
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	68ba      	ldr	r2, [r7, #8]
 80002b2:	4413      	add	r3, r2
 80002b4:	011b      	lsls	r3, r3, #4
 80002b6:	4403      	add	r3, r0
 80002b8:	6019      	str	r1, [r3, #0]
            bricks[i][j].y = i + 8;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	f103 0108 	add.w	r1, r3, #8
 80002c0:	4838      	ldr	r0, [pc, #224]	; (80003a4 <initBrickbreaker+0x134>)
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	4613      	mov	r3, r2
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	4413      	add	r3, r2
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	68ba      	ldr	r2, [r7, #8]
 80002ce:	4413      	add	r3, r2
 80002d0:	011b      	lsls	r3, r3, #4
 80002d2:	4403      	add	r3, r0
 80002d4:	3304      	adds	r3, #4
 80002d6:	6019      	str	r1, [r3, #0]
            bricks[i][j].visible = 0;
 80002d8:	4932      	ldr	r1, [pc, #200]	; (80003a4 <initBrickbreaker+0x134>)
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	4613      	mov	r3, r2
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	68ba      	ldr	r2, [r7, #8]
 80002e6:	4413      	add	r3, r2
 80002e8:	011b      	lsls	r3, r3, #4
 80002ea:	440b      	add	r3, r1
 80002ec:	3308      	adds	r3, #8
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = 1;
 80002f2:	492c      	ldr	r1, [pc, #176]	; (80003a4 <initBrickbreaker+0x134>)
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	4613      	mov	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	4413      	add	r3, r2
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	4413      	add	r3, r2
 8000302:	011b      	lsls	r3, r3, #4
 8000304:	440b      	add	r3, r1
 8000306:	330c      	adds	r3, #12
 8000308:	2201      	movs	r2, #1
 800030a:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < 10; j++) {
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	3301      	adds	r3, #1
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	2b09      	cmp	r3, #9
 8000316:	ddc3      	ble.n	80002a0 <initBrickbreaker+0x30>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	3301      	adds	r3, #1
 800031c:	60fb      	str	r3, [r7, #12]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	2b2f      	cmp	r3, #47	; 0x2f
 8000322:	ddba      	ble.n	800029a <initBrickbreaker+0x2a>
        }
    }

    for (int i = 0; i < BRICK_LINES; i++) {
 8000324:	2300      	movs	r3, #0
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	e027      	b.n	800037a <initBrickbreaker+0x10a>
        for(int j = 0; j < 10; j++) {
 800032a:	2300      	movs	r3, #0
 800032c:	603b      	str	r3, [r7, #0]
 800032e:	e01e      	b.n	800036e <initBrickbreaker+0xfe>
            bricks[i][j].visible = 1;
 8000330:	491c      	ldr	r1, [pc, #112]	; (80003a4 <initBrickbreaker+0x134>)
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	4613      	mov	r3, r2
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	4413      	add	r3, r2
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	683a      	ldr	r2, [r7, #0]
 800033e:	4413      	add	r3, r2
 8000340:	011b      	lsls	r3, r3, #4
 8000342:	440b      	add	r3, r1
 8000344:	3308      	adds	r3, #8
 8000346:	2201      	movs	r2, #1
 8000348:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = setBrickToughness();
 800034a:	f001 fe87 	bl	800205c <setBrickToughness>
 800034e:	4601      	mov	r1, r0
 8000350:	4814      	ldr	r0, [pc, #80]	; (80003a4 <initBrickbreaker+0x134>)
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	4613      	mov	r3, r2
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4413      	add	r3, r2
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	683a      	ldr	r2, [r7, #0]
 800035e:	4413      	add	r3, r2
 8000360:	011b      	lsls	r3, r3, #4
 8000362:	4403      	add	r3, r0
 8000364:	330c      	adds	r3, #12
 8000366:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < 10; j++) {
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	3301      	adds	r3, #1
 800036c:	603b      	str	r3, [r7, #0]
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	2b09      	cmp	r3, #9
 8000372:	dddd      	ble.n	8000330 <initBrickbreaker+0xc0>
    for (int i = 0; i < BRICK_LINES; i++) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3301      	adds	r3, #1
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2b09      	cmp	r3, #9
 800037e:	ddd4      	ble.n	800032a <initBrickbreaker+0xba>
        }
    }
    points = 0;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <initBrickbreaker+0x138>)
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]
    Displ_CLS(D_GREEN);
 8000386:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800038a:	f004 fe11 	bl	8004fb0 <Displ_CLS>
    drawBricks();
 800038e:	f001 fe9b 	bl	80020c8 <drawBricks>
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000030 	.word	0x20000030
 80003a0:	20000034 	.word	0x20000034
 80003a4:	200000e8 	.word	0x200000e8
 80003a8:	20001ee8 	.word	0x20001ee8

080003ac <playBall>:

void playBall() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
    if (ball.y == 0) {
 80003b0:	4b3d      	ldr	r3, [pc, #244]	; (80004a8 <playBall+0xfc>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d102      	bne.n	80003be <playBall+0x12>
        changeDirection(N);
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 f8ef 	bl	800059c <changeDirection>
    }
    if (ball.y == SCREEN_HEIGHT - 6) {
 80003be:	4b3a      	ldr	r3, [pc, #232]	; (80004a8 <playBall+0xfc>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	2b36      	cmp	r3, #54	; 0x36
 80003c4:	d14d      	bne.n	8000462 <playBall+0xb6>
        if (ball.x >= person.x - (BAR_SIZE/2) && ball.x <= person.x + (BAR_SIZE/2)) {
 80003c6:	4b38      	ldr	r3, [pc, #224]	; (80004a8 <playBall+0xfc>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	4b38      	ldr	r3, [pc, #224]	; (80004ac <playBall+0x100>)
 80003cc:	f993 3000 	ldrsb.w	r3, [r3]
 80003d0:	3b19      	subs	r3, #25
 80003d2:	429a      	cmp	r2, r3
 80003d4:	db0b      	blt.n	80003ee <playBall+0x42>
 80003d6:	4b34      	ldr	r3, [pc, #208]	; (80004a8 <playBall+0xfc>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	4b34      	ldr	r3, [pc, #208]	; (80004ac <playBall+0x100>)
 80003dc:	f993 3000 	ldrsb.w	r3, [r3]
 80003e0:	3319      	adds	r3, #25
 80003e2:	429a      	cmp	r2, r3
 80003e4:	dc03      	bgt.n	80003ee <playBall+0x42>
            changeDirection(S);
 80003e6:	2004      	movs	r0, #4
 80003e8:	f000 f8d8 	bl	800059c <changeDirection>
 80003ec:	e039      	b.n	8000462 <playBall+0xb6>
        } else {
            if (ball.x == person.x - (BAR_SIZE/2) - 1) {
 80003ee:	4b2e      	ldr	r3, [pc, #184]	; (80004a8 <playBall+0xfc>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	4b2e      	ldr	r3, [pc, #184]	; (80004ac <playBall+0x100>)
 80003f4:	f993 3000 	ldrsb.w	r3, [r3]
 80003f8:	3b1a      	subs	r3, #26
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d110      	bne.n	8000420 <playBall+0x74>
                if (ball.dir == SE) {
 80003fe:	4b2a      	ldr	r3, [pc, #168]	; (80004a8 <playBall+0xfc>)
 8000400:	7a1b      	ldrb	r3, [r3, #8]
 8000402:	2b03      	cmp	r3, #3
 8000404:	d103      	bne.n	800040e <playBall+0x62>
                    ball.dir = NW;
 8000406:	4b28      	ldr	r3, [pc, #160]	; (80004a8 <playBall+0xfc>)
 8000408:	2207      	movs	r2, #7
 800040a:	721a      	strb	r2, [r3, #8]
 800040c:	e029      	b.n	8000462 <playBall+0xb6>
                } else {
                    lives1--;
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <playBall+0x104>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	3b01      	subs	r3, #1
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <playBall+0x104>)
 8000418:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 800041a:	f000 f965 	bl	80006e8 <gameEnd>
 800041e:	e020      	b.n	8000462 <playBall+0xb6>
                }
            } else {
                if (ball.x == person.x + (BAR_SIZE/2) + 1) {
 8000420:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <playBall+0xfc>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <playBall+0x100>)
 8000426:	f993 3000 	ldrsb.w	r3, [r3]
 800042a:	331a      	adds	r3, #26
 800042c:	429a      	cmp	r2, r3
 800042e:	d110      	bne.n	8000452 <playBall+0xa6>
                    if (ball.dir == SW) {
 8000430:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <playBall+0xfc>)
 8000432:	7a1b      	ldrb	r3, [r3, #8]
 8000434:	2b05      	cmp	r3, #5
 8000436:	d103      	bne.n	8000440 <playBall+0x94>
                        ball.dir = NE;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <playBall+0xfc>)
 800043a:	2201      	movs	r2, #1
 800043c:	721a      	strb	r2, [r3, #8]
 800043e:	e010      	b.n	8000462 <playBall+0xb6>
                    } else {
                        lives1--;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <playBall+0x104>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	3b01      	subs	r3, #1
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <playBall+0x104>)
 800044a:	701a      	strb	r2, [r3, #0]
                        gameEnd();
 800044c:	f000 f94c 	bl	80006e8 <gameEnd>
 8000450:	e007      	b.n	8000462 <playBall+0xb6>
                    }
                } else {
                    lives1--;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <playBall+0x104>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	3b01      	subs	r3, #1
 8000458:	b2da      	uxtb	r2, r3
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <playBall+0x104>)
 800045c:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 800045e:	f000 f943 	bl	80006e8 <gameEnd>
                }
            }
        }
    }
    if (ball.x == 0) {
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <playBall+0xfc>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d102      	bne.n	8000470 <playBall+0xc4>
        changeDirection(W);
 800046a:	2006      	movs	r0, #6
 800046c:	f000 f896 	bl	800059c <changeDirection>
    }
    if (ball.x == SCREEN_WIDTH - 1) {
 8000470:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <playBall+0xfc>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b4f      	cmp	r3, #79	; 0x4f
 8000476:	d102      	bne.n	800047e <playBall+0xd2>
        changeDirection(E);
 8000478:	2002      	movs	r0, #2
 800047a:	f000 f88f 	bl	800059c <changeDirection>
    }

    if (guardian == 1) {
 800047e:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <playBall+0x108>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d10a      	bne.n	800049c <playBall+0xf0>
        if (ball.y == person.y - 2) {
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <playBall+0xfc>)
 8000488:	685a      	ldr	r2, [r3, #4]
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <playBall+0x100>)
 800048c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000490:	3b02      	subs	r3, #2
 8000492:	429a      	cmp	r2, r3
 8000494:	d102      	bne.n	800049c <playBall+0xf0>
            changeDirection(S);
 8000496:	2004      	movs	r0, #4
 8000498:	f000 f880 	bl	800059c <changeDirection>
        }
    }

    checkBrickHit();
 800049c:	f000 fa08 	bl	80008b0 <checkBrickHit>
    moveBall();
 80004a0:	f000 f80a 	bl	80004b8 <moveBall>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000034 	.word	0x20000034
 80004ac:	20000030 	.word	0x20000030
 80004b0:	20000002 	.word	0x20000002
 80004b4:	20001eea 	.word	0x20001eea

080004b8 <moveBall>:

void moveBall() {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af02      	add	r7, sp, #8
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80004be:	4b36      	ldr	r3, [pc, #216]	; (8000598 <moveBall+0xe0>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	b298      	uxth	r0, r3
 80004c8:	4b33      	ldr	r3, [pc, #204]	; (8000598 <moveBall+0xe0>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	b299      	uxth	r1, r3
 80004d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2304      	movs	r3, #4
 80004da:	2204      	movs	r2, #4
 80004dc:	f004 fbb4 	bl	8004c48 <Displ_FillArea>
    switch (ball.dir) {
 80004e0:	4b2d      	ldr	r3, [pc, #180]	; (8000598 <moveBall+0xe0>)
 80004e2:	7a1b      	ldrb	r3, [r3, #8]
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	d84d      	bhi.n	8000584 <moveBall+0xcc>
 80004e8:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <moveBall+0x38>)
 80004ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ee:	bf00      	nop
 80004f0:	08000515 	.word	0x08000515
 80004f4:	0800052d 	.word	0x0800052d
 80004f8:	08000585 	.word	0x08000585
 80004fc:	08000559 	.word	0x08000559
 8000500:	08000521 	.word	0x08000521
 8000504:	0800056f 	.word	0x0800056f
 8000508:	08000585 	.word	0x08000585
 800050c:	08000543 	.word	0x08000543
 8000510:	0800058f 	.word	0x0800058f
    case N:
        ball.y -= 1;
 8000514:	4b20      	ldr	r3, [pc, #128]	; (8000598 <moveBall+0xe0>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	3b01      	subs	r3, #1
 800051a:	4a1f      	ldr	r2, [pc, #124]	; (8000598 <moveBall+0xe0>)
 800051c:	6053      	str	r3, [r2, #4]
        break;
 800051e:	e037      	b.n	8000590 <moveBall+0xd8>
    case S:
        ball.y += 1;
 8000520:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <moveBall+0xe0>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	3301      	adds	r3, #1
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <moveBall+0xe0>)
 8000528:	6053      	str	r3, [r2, #4]
        break;
 800052a:	e031      	b.n	8000590 <moveBall+0xd8>
    case NE:
        ball.y -= 1;
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <moveBall+0xe0>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	4a19      	ldr	r2, [pc, #100]	; (8000598 <moveBall+0xe0>)
 8000534:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <moveBall+0xe0>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	4a16      	ldr	r2, [pc, #88]	; (8000598 <moveBall+0xe0>)
 800053e:	6013      	str	r3, [r2, #0]
        break;
 8000540:	e026      	b.n	8000590 <moveBall+0xd8>
    case NW:
        ball.y -= 1;
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <moveBall+0xe0>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	3b01      	subs	r3, #1
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <moveBall+0xe0>)
 800054a:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <moveBall+0xe0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3b01      	subs	r3, #1
 8000552:	4a11      	ldr	r2, [pc, #68]	; (8000598 <moveBall+0xe0>)
 8000554:	6013      	str	r3, [r2, #0]
        break;
 8000556:	e01b      	b.n	8000590 <moveBall+0xd8>
    case SE:
        ball.y += 1;
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <moveBall+0xe0>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <moveBall+0xe0>)
 8000560:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <moveBall+0xe0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <moveBall+0xe0>)
 800056a:	6013      	str	r3, [r2, #0]
        break;
 800056c:	e010      	b.n	8000590 <moveBall+0xd8>
    case SW:
        ball.y += 1;
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <moveBall+0xe0>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	3301      	adds	r3, #1
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <moveBall+0xe0>)
 8000576:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <moveBall+0xe0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3b01      	subs	r3, #1
 800057e:	4a06      	ldr	r2, [pc, #24]	; (8000598 <moveBall+0xe0>)
 8000580:	6013      	str	r3, [r2, #0]
        break;
 8000582:	e005      	b.n	8000590 <moveBall+0xd8>
    case still:
        break;
    default:
        //////QD << "You shouldn't be here!";
        ball.x = ball.x;
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <moveBall+0xe0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a03      	ldr	r2, [pc, #12]	; (8000598 <moveBall+0xe0>)
 800058a:	6013      	str	r3, [r2, #0]
    }

}
 800058c:	e000      	b.n	8000590 <moveBall+0xd8>
        break;
 800058e:	bf00      	nop
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000034 	.word	0x20000034

0800059c <changeDirection>:

void changeDirection(directions inDir) {
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
    if (inDir == N) {
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d12a      	bne.n	8000602 <changeDirection+0x66>
        switch (ball.dir) {
 80005ac:	4b4d      	ldr	r3, [pc, #308]	; (80006e4 <changeDirection+0x148>)
 80005ae:	7a1b      	ldrb	r3, [r3, #8]
 80005b0:	2b08      	cmp	r3, #8
 80005b2:	d821      	bhi.n	80005f8 <changeDirection+0x5c>
 80005b4:	a201      	add	r2, pc, #4	; (adr r2, 80005bc <changeDirection+0x20>)
 80005b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ba:	bf00      	nop
 80005bc:	080005e1 	.word	0x080005e1
 80005c0:	080005f1 	.word	0x080005f1
 80005c4:	080005f9 	.word	0x080005f9
 80005c8:	080005f9 	.word	0x080005f9
 80005cc:	080005f9 	.word	0x080005f9
 80005d0:	080005f9 	.word	0x080005f9
 80005d4:	080005f9 	.word	0x080005f9
 80005d8:	080005e9 	.word	0x080005e9
 80005dc:	08000607 	.word	0x08000607
        case N:
            ball.dir = S;
 80005e0:	4b40      	ldr	r3, [pc, #256]	; (80006e4 <changeDirection+0x148>)
 80005e2:	2204      	movs	r2, #4
 80005e4:	721a      	strb	r2, [r3, #8]
            break;
 80005e6:	e00f      	b.n	8000608 <changeDirection+0x6c>
        case NW:
            ball.dir = SW;
 80005e8:	4b3e      	ldr	r3, [pc, #248]	; (80006e4 <changeDirection+0x148>)
 80005ea:	2205      	movs	r2, #5
 80005ec:	721a      	strb	r2, [r3, #8]
            break;
 80005ee:	e00b      	b.n	8000608 <changeDirection+0x6c>
        case NE:
            ball.dir = SE;
 80005f0:	4b3c      	ldr	r3, [pc, #240]	; (80006e4 <changeDirection+0x148>)
 80005f2:	2203      	movs	r2, #3
 80005f4:	721a      	strb	r2, [r3, #8]
            break;
 80005f6:	e007      	b.n	8000608 <changeDirection+0x6c>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 80005f8:	4b3a      	ldr	r3, [pc, #232]	; (80006e4 <changeDirection+0x148>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <changeDirection+0x148>)
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	e002      	b.n	8000608 <changeDirection+0x6c>
        }
    }
 8000602:	bf00      	nop
 8000604:	e000      	b.n	8000608 <changeDirection+0x6c>
            break;
 8000606:	bf00      	nop

    if (inDir == E) {
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b02      	cmp	r3, #2
 800060c:	d117      	bne.n	800063e <changeDirection+0xa2>
        switch (ball.dir) {
 800060e:	4b35      	ldr	r3, [pc, #212]	; (80006e4 <changeDirection+0x148>)
 8000610:	7a1b      	ldrb	r3, [r3, #8]
 8000612:	2b08      	cmp	r3, #8
 8000614:	d015      	beq.n	8000642 <changeDirection+0xa6>
 8000616:	2b08      	cmp	r3, #8
 8000618:	dc0c      	bgt.n	8000634 <changeDirection+0x98>
 800061a:	2b01      	cmp	r3, #1
 800061c:	d002      	beq.n	8000624 <changeDirection+0x88>
 800061e:	2b03      	cmp	r3, #3
 8000620:	d004      	beq.n	800062c <changeDirection+0x90>
 8000622:	e007      	b.n	8000634 <changeDirection+0x98>
        case NE:
            ball.dir = NW;
 8000624:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <changeDirection+0x148>)
 8000626:	2207      	movs	r2, #7
 8000628:	721a      	strb	r2, [r3, #8]
            break;
 800062a:	e00b      	b.n	8000644 <changeDirection+0xa8>
        case SE:
            ball.dir = SW;
 800062c:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <changeDirection+0x148>)
 800062e:	2205      	movs	r2, #5
 8000630:	721a      	strb	r2, [r3, #8]
            break;
 8000632:	e007      	b.n	8000644 <changeDirection+0xa8>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 8000634:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <changeDirection+0x148>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a2a      	ldr	r2, [pc, #168]	; (80006e4 <changeDirection+0x148>)
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	e002      	b.n	8000644 <changeDirection+0xa8>
        }
    }
 800063e:	bf00      	nop
 8000640:	e000      	b.n	8000644 <changeDirection+0xa8>
            break;
 8000642:	bf00      	nop

    if (inDir == S) {
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b04      	cmp	r3, #4
 8000648:	d125      	bne.n	8000696 <changeDirection+0xfa>
        switch (ball.dir) {
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <changeDirection+0x148>)
 800064c:	7a1b      	ldrb	r3, [r3, #8]
 800064e:	3b03      	subs	r3, #3
 8000650:	2b05      	cmp	r3, #5
 8000652:	d81b      	bhi.n	800068c <changeDirection+0xf0>
 8000654:	a201      	add	r2, pc, #4	; (adr r2, 800065c <changeDirection+0xc0>)
 8000656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065a:	bf00      	nop
 800065c:	0800067d 	.word	0x0800067d
 8000660:	08000675 	.word	0x08000675
 8000664:	08000685 	.word	0x08000685
 8000668:	0800068d 	.word	0x0800068d
 800066c:	0800068d 	.word	0x0800068d
 8000670:	0800069b 	.word	0x0800069b
        case S:
            ball.dir = N;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <changeDirection+0x148>)
 8000676:	2200      	movs	r2, #0
 8000678:	721a      	strb	r2, [r3, #8]
            break;
 800067a:	e00f      	b.n	800069c <changeDirection+0x100>
        case SE:
            ball.dir = NE;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <changeDirection+0x148>)
 800067e:	2201      	movs	r2, #1
 8000680:	721a      	strb	r2, [r3, #8]
            break;
 8000682:	e00b      	b.n	800069c <changeDirection+0x100>
        case SW:
            ball.dir = NW;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <changeDirection+0x148>)
 8000686:	2207      	movs	r2, #7
 8000688:	721a      	strb	r2, [r3, #8]
            break;
 800068a:	e007      	b.n	800069c <changeDirection+0x100>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.dir = ball.dir;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <changeDirection+0x148>)
 800068e:	7a1a      	ldrb	r2, [r3, #8]
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <changeDirection+0x148>)
 8000692:	721a      	strb	r2, [r3, #8]
 8000694:	e002      	b.n	800069c <changeDirection+0x100>
        }
    }
 8000696:	bf00      	nop
 8000698:	e000      	b.n	800069c <changeDirection+0x100>
            break;
 800069a:	bf00      	nop

    if (inDir == W) {
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d116      	bne.n	80006d0 <changeDirection+0x134>
        switch (ball.dir) {
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <changeDirection+0x148>)
 80006a4:	7a1b      	ldrb	r3, [r3, #8]
 80006a6:	2b08      	cmp	r3, #8
 80006a8:	d014      	beq.n	80006d4 <changeDirection+0x138>
 80006aa:	2b08      	cmp	r3, #8
 80006ac:	dc0b      	bgt.n	80006c6 <changeDirection+0x12a>
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	d005      	beq.n	80006be <changeDirection+0x122>
 80006b2:	2b07      	cmp	r3, #7
 80006b4:	d107      	bne.n	80006c6 <changeDirection+0x12a>
        case NW:
            ball.dir = NE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <changeDirection+0x148>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	721a      	strb	r2, [r3, #8]
            break;
 80006bc:	e00b      	b.n	80006d6 <changeDirection+0x13a>
        case SW:
            ball.dir = SE;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <changeDirection+0x148>)
 80006c0:	2203      	movs	r2, #3
 80006c2:	721a      	strb	r2, [r3, #8]
            break;
 80006c4:	e007      	b.n	80006d6 <changeDirection+0x13a>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <changeDirection+0x148>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <changeDirection+0x148>)
 80006cc:	6013      	str	r3, [r2, #0]
        }
    }
}
 80006ce:	e002      	b.n	80006d6 <changeDirection+0x13a>
    }
 80006d0:	bf00      	nop
 80006d2:	e000      	b.n	80006d6 <changeDirection+0x13a>
            break;
 80006d4:	bf00      	nop
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000034 	.word	0x20000034

080006e8 <gameEnd>:

void gameEnd() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af02      	add	r7, sp, #8
    Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 10, D_GREEN);
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <gameEnd+0x78>)
 80006f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	b299      	uxth	r1, r3
 80006fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	230a      	movs	r3, #10
 8000704:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000708:	2000      	movs	r0, #0
 800070a:	f004 fa9d 	bl	8004c48 <Displ_FillArea>
    person.x = (SCREEN_WIDTH)/2;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <gameEnd+0x78>)
 8000710:	2228      	movs	r2, #40	; 0x28
 8000712:	701a      	strb	r2, [r3, #0]
    ball.x = person.x;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <gameEnd+0x78>)
 8000716:	f993 3000 	ldrsb.w	r3, [r3]
 800071a:	461a      	mov	r2, r3
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <gameEnd+0x7c>)
 800071e:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <gameEnd+0x7c>)
 8000722:	2236      	movs	r2, #54	; 0x36
 8000724:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <gameEnd+0x7c>)
 8000728:	2208      	movs	r2, #8
 800072a:	721a      	strb	r2, [r3, #8]

    if (lives1 <= 0) {
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <gameEnd+0x80>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d112      	bne.n	800075a <gameEnd+0x72>
        if (points > highScore) {
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <gameEnd+0x84>)
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <gameEnd+0x88>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	429a      	cmp	r2, r3
 800073e:	d903      	bls.n	8000748 <gameEnd+0x60>
            highScore = points;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <gameEnd+0x84>)
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <gameEnd+0x88>)
 8000746:	701a      	strb	r2, [r3, #0]
            //////QD << highScore;
        }

        start = 0;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <gameEnd+0x8c>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
        points = 0;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <gameEnd+0x84>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
        lives1 = 3;
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <gameEnd+0x80>)
 8000756:	2203      	movs	r2, #3
 8000758:	701a      	strb	r2, [r3, #0]
    }
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000030 	.word	0x20000030
 8000764:	20000034 	.word	0x20000034
 8000768:	20000002 	.word	0x20000002
 800076c:	20001ee8 	.word	0x20001ee8
 8000770:	20001ee9 	.word	0x20001ee9
 8000774:	20001eee 	.word	0x20001eee

08000778 <lowerBricks>:

void lowerBricks() {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 800077e:	232e      	movs	r3, #46	; 0x2e
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	e03d      	b.n	8000800 <lowerBricks+0x88>
        for (int j = 0; j < 10; j++) {
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	e034      	b.n	80007f4 <lowerBricks+0x7c>
            bricks[i + 1][j].visible = bricks[i][j].visible;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	482d      	ldr	r0, [pc, #180]	; (8000844 <lowerBricks+0xcc>)
 8000790:	68f9      	ldr	r1, [r7, #12]
 8000792:	460b      	mov	r3, r1
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	440b      	add	r3, r1
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	68b9      	ldr	r1, [r7, #8]
 800079c:	440b      	add	r3, r1
 800079e:	011b      	lsls	r3, r3, #4
 80007a0:	4403      	add	r3, r0
 80007a2:	3308      	adds	r3, #8
 80007a4:	6819      	ldr	r1, [r3, #0]
 80007a6:	4827      	ldr	r0, [pc, #156]	; (8000844 <lowerBricks+0xcc>)
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	4413      	add	r3, r2
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	4403      	add	r3, r0
 80007b8:	3308      	adds	r3, #8
 80007ba:	6019      	str	r1, [r3, #0]
            bricks[i + 1][j].toughness = bricks[i][j].toughness;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	4820      	ldr	r0, [pc, #128]	; (8000844 <lowerBricks+0xcc>)
 80007c2:	68f9      	ldr	r1, [r7, #12]
 80007c4:	460b      	mov	r3, r1
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	440b      	add	r3, r1
 80007d0:	011b      	lsls	r3, r3, #4
 80007d2:	4403      	add	r3, r0
 80007d4:	330c      	adds	r3, #12
 80007d6:	6819      	ldr	r1, [r3, #0]
 80007d8:	481a      	ldr	r0, [pc, #104]	; (8000844 <lowerBricks+0xcc>)
 80007da:	4613      	mov	r3, r2
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4413      	add	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	4413      	add	r3, r2
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	4403      	add	r3, r0
 80007ea:	330c      	adds	r3, #12
 80007ec:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 10; j++) {
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	3301      	adds	r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	2b09      	cmp	r3, #9
 80007f8:	ddc7      	ble.n	800078a <lowerBricks+0x12>
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	dabe      	bge.n	8000784 <lowerBricks+0xc>
        }
    }
    for(int j = 0; j < 10; j++) {
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	e012      	b.n	8000832 <lowerBricks+0xba>
        bricks[0][j].visible = 1;
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <lowerBricks+0xcc>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	4413      	add	r3, r2
 8000814:	3308      	adds	r3, #8
 8000816:	2201      	movs	r2, #1
 8000818:	601a      	str	r2, [r3, #0]
        bricks[0][j].toughness = setBrickToughness();
 800081a:	f001 fc1f 	bl	800205c <setBrickToughness>
 800081e:	4602      	mov	r2, r0
 8000820:	4908      	ldr	r1, [pc, #32]	; (8000844 <lowerBricks+0xcc>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	011b      	lsls	r3, r3, #4
 8000826:	440b      	add	r3, r1
 8000828:	330c      	adds	r3, #12
 800082a:	601a      	str	r2, [r3, #0]
    for(int j = 0; j < 10; j++) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3301      	adds	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b09      	cmp	r3, #9
 8000836:	dde9      	ble.n	800080c <lowerBricks+0x94>
    }

    drawBricks();
 8000838:	f001 fc46 	bl	80020c8 <drawBricks>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000e8 	.word	0x200000e8

08000848 <checkGameOver>:

void checkGameOver() {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
    for (int j = 0; j < 10; j++) {
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	e01d      	b.n	8000890 <checkGameOver+0x48>
        if (bricks[MAX_BRICK_LINES - 1][j].visible == 1) {
 8000854:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <checkGameOver+0x58>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	011b      	lsls	r3, r3, #4
 800085a:	4413      	add	r3, r2
 800085c:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8000860:	3308      	adds	r3, #8
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d110      	bne.n	800088a <checkGameOver+0x42>

            lives1 = 0;
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <checkGameOver+0x5c>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
            ball.x = person.x;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <checkGameOver+0x60>)
 8000870:	f993 3000 	ldrsb.w	r3, [r3]
 8000874:	461a      	mov	r2, r3
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <checkGameOver+0x64>)
 8000878:	601a      	str	r2, [r3, #0]
            ball.y = SCREEN_HEIGHT - 6;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <checkGameOver+0x64>)
 800087c:	2236      	movs	r2, #54	; 0x36
 800087e:	605a      	str	r2, [r3, #4]
            ball.dir = still;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <checkGameOver+0x64>)
 8000882:	2208      	movs	r2, #8
 8000884:	721a      	strb	r2, [r3, #8]
            gameEnd();
 8000886:	f7ff ff2f 	bl	80006e8 <gameEnd>
    for (int j = 0; j < 10; j++) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3301      	adds	r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b09      	cmp	r3, #9
 8000894:	ddde      	ble.n	8000854 <checkGameOver+0xc>
            //////QD << "Game Over, noob";
        }
    }
}
 8000896:	bf00      	nop
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000e8 	.word	0x200000e8
 80008a4:	20000002 	.word	0x20000002
 80008a8:	20000030 	.word	0x20000030
 80008ac:	20000034 	.word	0x20000034

080008b0 <checkBrickHit>:

void checkBrickHit() {
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af02      	add	r7, sp, #8
    uint8_t bricksHit = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	71fb      	strb	r3, [r7, #7]
    switch (ball.dir) {
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <checkBrickHit+0x3c>)
 80008bc:	7a1b      	ldrb	r3, [r3, #8]
 80008be:	3b01      	subs	r3, #1
 80008c0:	2b07      	cmp	r3, #7
 80008c2:	f201 8240 	bhi.w	8001d46 <checkBrickHit+0x1496>
 80008c6:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <checkBrickHit+0x1c>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	08000e19 	.word	0x08000e19
 80008d0:	08001d47 	.word	0x08001d47
 80008d4:	08001341 	.word	0x08001341
 80008d8:	08001d47 	.word	0x08001d47
 80008dc:	0800184d 	.word	0x0800184d
 80008e0:	08001d47 	.word	0x08001d47
 80008e4:	080008f1 	.word	0x080008f1
 80008e8:	08001d51 	.word	0x08001d51
 80008ec:	20000034 	.word	0x20000034
    case NW :
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 80008f0:	4bb6      	ldr	r3, [pc, #728]	; (8000bcc <checkBrickHit+0x31c>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f1a3 0209 	sub.w	r2, r3, #9
 80008f8:	4bb4      	ldr	r3, [pc, #720]	; (8000bcc <checkBrickHit+0x31c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	da00      	bge.n	8000902 <checkBrickHit+0x52>
 8000900:	3307      	adds	r3, #7
 8000902:	10db      	asrs	r3, r3, #3
 8000904:	4618      	mov	r0, r3
 8000906:	49b2      	ldr	r1, [pc, #712]	; (8000bd0 <checkBrickHit+0x320>)
 8000908:	4613      	mov	r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4413      	add	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4403      	add	r3, r0
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	440b      	add	r3, r1
 8000916:	3308      	adds	r3, #8
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b01      	cmp	r3, #1
 800091c:	f040 80b4 	bne.w	8000a88 <checkBrickHit+0x1d8>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000920:	4baa      	ldr	r3, [pc, #680]	; (8000bcc <checkBrickHit+0x31c>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f1a3 0209 	sub.w	r2, r3, #9
 8000928:	4ba8      	ldr	r3, [pc, #672]	; (8000bcc <checkBrickHit+0x31c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	da00      	bge.n	8000932 <checkBrickHit+0x82>
 8000930:	3307      	adds	r3, #7
 8000932:	10db      	asrs	r3, r3, #3
 8000934:	4619      	mov	r1, r3
 8000936:	48a6      	ldr	r0, [pc, #664]	; (8000bd0 <checkBrickHit+0x320>)
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	440b      	add	r3, r1
 8000942:	011b      	lsls	r3, r3, #4
 8000944:	4403      	add	r3, r0
 8000946:	330c      	adds	r3, #12
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	1e58      	subs	r0, r3, #1
 800094c:	4ca0      	ldr	r4, [pc, #640]	; (8000bd0 <checkBrickHit+0x320>)
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	440b      	add	r3, r1
 8000958:	011b      	lsls	r3, r3, #4
 800095a:	4423      	add	r3, r4
 800095c:	330c      	adds	r3, #12
 800095e:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000960:	4b9a      	ldr	r3, [pc, #616]	; (8000bcc <checkBrickHit+0x31c>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f1a3 0209 	sub.w	r2, r3, #9
 8000968:	4b98      	ldr	r3, [pc, #608]	; (8000bcc <checkBrickHit+0x31c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	da00      	bge.n	8000972 <checkBrickHit+0xc2>
 8000970:	3307      	adds	r3, #7
 8000972:	10db      	asrs	r3, r3, #3
 8000974:	4618      	mov	r0, r3
 8000976:	4996      	ldr	r1, [pc, #600]	; (8000bd0 <checkBrickHit+0x320>)
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4403      	add	r3, r0
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	440b      	add	r3, r1
 8000986:	330c      	adds	r3, #12
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	dc29      	bgt.n	80009e2 <checkBrickHit+0x132>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 800098e:	4b8f      	ldr	r3, [pc, #572]	; (8000bcc <checkBrickHit+0x31c>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f1a3 0209 	sub.w	r2, r3, #9
 8000996:	4b8d      	ldr	r3, [pc, #564]	; (8000bcc <checkBrickHit+0x31c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	da00      	bge.n	80009a0 <checkBrickHit+0xf0>
 800099e:	3307      	adds	r3, #7
 80009a0:	10db      	asrs	r3, r3, #3
 80009a2:	4618      	mov	r0, r3
 80009a4:	498a      	ldr	r1, [pc, #552]	; (8000bd0 <checkBrickHit+0x320>)
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	4403      	add	r3, r0
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	440b      	add	r3, r1
 80009b4:	3308      	adds	r3, #8
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
                points++;
 80009ba:	4b86      	ldr	r3, [pc, #536]	; (8000bd4 <checkBrickHit+0x324>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b84      	ldr	r3, [pc, #528]	; (8000bd4 <checkBrickHit+0x324>)
 80009c4:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 80009c6:	4b81      	ldr	r3, [pc, #516]	; (8000bcc <checkBrickHit+0x31c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	da00      	bge.n	80009d0 <checkBrickHit+0x120>
 80009ce:	3307      	adds	r3, #7
 80009d0:	10db      	asrs	r3, r3, #3
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b7d      	ldr	r3, [pc, #500]	; (8000bcc <checkBrickHit+0x31c>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	3b09      	subs	r3, #9
 80009da:	4619      	mov	r1, r3
 80009dc:	4610      	mov	r0, r2
 80009de:	f001 f9cd 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 80009e2:	4b7a      	ldr	r3, [pc, #488]	; (8000bcc <checkBrickHit+0x31c>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f1a3 0209 	sub.w	r2, r3, #9
 80009ea:	4b78      	ldr	r3, [pc, #480]	; (8000bcc <checkBrickHit+0x31c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	da00      	bge.n	80009f4 <checkBrickHit+0x144>
 80009f2:	3307      	adds	r3, #7
 80009f4:	10db      	asrs	r3, r3, #3
 80009f6:	4618      	mov	r0, r3
 80009f8:	4975      	ldr	r1, [pc, #468]	; (8000bd0 <checkBrickHit+0x320>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4403      	add	r3, r0
 8000a04:	011b      	lsls	r3, r3, #4
 8000a06:	440b      	add	r3, r1
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	b298      	uxth	r0, r3
 8000a10:	4b6e      	ldr	r3, [pc, #440]	; (8000bcc <checkBrickHit+0x31c>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f1a3 0209 	sub.w	r2, r3, #9
 8000a18:	4b6c      	ldr	r3, [pc, #432]	; (8000bcc <checkBrickHit+0x31c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	da00      	bge.n	8000a22 <checkBrickHit+0x172>
 8000a20:	3307      	adds	r3, #7
 8000a22:	10db      	asrs	r3, r3, #3
 8000a24:	461c      	mov	r4, r3
 8000a26:	496a      	ldr	r1, [pc, #424]	; (8000bd0 <checkBrickHit+0x320>)
 8000a28:	4613      	mov	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4423      	add	r3, r4
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	440b      	add	r3, r1
 8000a36:	3304      	adds	r3, #4
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	b299      	uxth	r1, r3
 8000a40:	4b62      	ldr	r3, [pc, #392]	; (8000bcc <checkBrickHit+0x31c>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f1a3 0209 	sub.w	r2, r3, #9
 8000a48:	4b60      	ldr	r3, [pc, #384]	; (8000bcc <checkBrickHit+0x31c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	da00      	bge.n	8000a52 <checkBrickHit+0x1a2>
 8000a50:	3307      	adds	r3, #7
 8000a52:	10db      	asrs	r3, r3, #3
 8000a54:	461d      	mov	r5, r3
 8000a56:	4c5e      	ldr	r4, [pc, #376]	; (8000bd0 <checkBrickHit+0x320>)
 8000a58:	4613      	mov	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	442b      	add	r3, r5
 8000a62:	011b      	lsls	r3, r3, #4
 8000a64:	4423      	add	r3, r4
 8000a66:	330c      	adds	r3, #12
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a5b      	ldr	r2, [pc, #364]	; (8000bd8 <checkBrickHit+0x328>)
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2304      	movs	r3, #4
 8000a76:	2220      	movs	r2, #32
 8000a78:	f004 f8e6 	bl	8004c48 <Displ_FillArea>
            bricksHit++;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	71fb      	strb	r3, [r7, #7]
            ball.dir = SW;
 8000a82:	4b52      	ldr	r3, [pc, #328]	; (8000bcc <checkBrickHit+0x31c>)
 8000a84:	2205      	movs	r2, #5
 8000a86:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 8000a88:	4b50      	ldr	r3, [pc, #320]	; (8000bcc <checkBrickHit+0x31c>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f1a3 0208 	sub.w	r2, r3, #8
 8000a90:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <checkBrickHit+0x31c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	da00      	bge.n	8000a9c <checkBrickHit+0x1ec>
 8000a9a:	3307      	adds	r3, #7
 8000a9c:	10db      	asrs	r3, r3, #3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	494b      	ldr	r1, [pc, #300]	; (8000bd0 <checkBrickHit+0x320>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4403      	add	r3, r0
 8000aac:	011b      	lsls	r3, r3, #4
 8000aae:	440b      	add	r3, r1
 8000ab0:	3308      	adds	r3, #8
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	f040 80d0 	bne.w	8000c5a <checkBrickHit+0x3aa>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8000aba:	4b44      	ldr	r3, [pc, #272]	; (8000bcc <checkBrickHit+0x31c>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f1a3 0208 	sub.w	r2, r3, #8
 8000ac2:	4b42      	ldr	r3, [pc, #264]	; (8000bcc <checkBrickHit+0x31c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	da00      	bge.n	8000ace <checkBrickHit+0x21e>
 8000acc:	3307      	adds	r3, #7
 8000ace:	10db      	asrs	r3, r3, #3
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	483f      	ldr	r0, [pc, #252]	; (8000bd0 <checkBrickHit+0x320>)
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	440b      	add	r3, r1
 8000ade:	011b      	lsls	r3, r3, #4
 8000ae0:	4403      	add	r3, r0
 8000ae2:	330c      	adds	r3, #12
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1e58      	subs	r0, r3, #1
 8000ae8:	4c39      	ldr	r4, [pc, #228]	; (8000bd0 <checkBrickHit+0x320>)
 8000aea:	4613      	mov	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4413      	add	r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	440b      	add	r3, r1
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	4423      	add	r3, r4
 8000af8:	330c      	adds	r3, #12
 8000afa:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8000afc:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <checkBrickHit+0x31c>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f1a3 0208 	sub.w	r2, r3, #8
 8000b04:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <checkBrickHit+0x31c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	da00      	bge.n	8000b10 <checkBrickHit+0x260>
 8000b0e:	3307      	adds	r3, #7
 8000b10:	10db      	asrs	r3, r3, #3
 8000b12:	4618      	mov	r0, r3
 8000b14:	492e      	ldr	r1, [pc, #184]	; (8000bd0 <checkBrickHit+0x320>)
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	4403      	add	r3, r0
 8000b20:	011b      	lsls	r3, r3, #4
 8000b22:	440b      	add	r3, r1
 8000b24:	330c      	adds	r3, #12
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	dc2b      	bgt.n	8000b84 <checkBrickHit+0x2d4>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8000b2c:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <checkBrickHit+0x31c>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f1a3 0208 	sub.w	r2, r3, #8
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <checkBrickHit+0x31c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	da00      	bge.n	8000b40 <checkBrickHit+0x290>
 8000b3e:	3307      	adds	r3, #7
 8000b40:	10db      	asrs	r3, r3, #3
 8000b42:	4618      	mov	r0, r3
 8000b44:	4922      	ldr	r1, [pc, #136]	; (8000bd0 <checkBrickHit+0x320>)
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4403      	add	r3, r0
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	440b      	add	r3, r1
 8000b54:	3308      	adds	r3, #8
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
                points++;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <checkBrickHit+0x324>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <checkBrickHit+0x324>)
 8000b64:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <checkBrickHit+0x31c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	da00      	bge.n	8000b72 <checkBrickHit+0x2c2>
 8000b70:	3307      	adds	r3, #7
 8000b72:	10db      	asrs	r3, r3, #3
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <checkBrickHit+0x31c>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	3b08      	subs	r3, #8
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4610      	mov	r0, r2
 8000b80:	f001 f8fc 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <checkBrickHit+0x31c>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f1a3 0208 	sub.w	r2, r3, #8
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <checkBrickHit+0x31c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da00      	bge.n	8000b98 <checkBrickHit+0x2e8>
 8000b96:	3307      	adds	r3, #7
 8000b98:	10db      	asrs	r3, r3, #3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <checkBrickHit+0x320>)
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4403      	add	r3, r0
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	440b      	add	r3, r1
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	b298      	uxth	r0, r3
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <checkBrickHit+0x31c>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f1a3 0208 	sub.w	r2, r3, #8
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <checkBrickHit+0x31c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	da0a      	bge.n	8000bdc <checkBrickHit+0x32c>
 8000bc6:	3307      	adds	r3, #7
 8000bc8:	e008      	b.n	8000bdc <checkBrickHit+0x32c>
 8000bca:	bf00      	nop
 8000bcc:	20000034 	.word	0x20000034
 8000bd0:	200000e8 	.word	0x200000e8
 8000bd4:	20001ee8 	.word	0x20001ee8
 8000bd8:	20000004 	.word	0x20000004
 8000bdc:	10db      	asrs	r3, r3, #3
 8000bde:	461c      	mov	r4, r3
 8000be0:	4989      	ldr	r1, [pc, #548]	; (8000e08 <checkBrickHit+0x558>)
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4423      	add	r3, r4
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	440b      	add	r3, r1
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	b299      	uxth	r1, r3
 8000bfa:	4b84      	ldr	r3, [pc, #528]	; (8000e0c <checkBrickHit+0x55c>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f1a3 0208 	sub.w	r2, r3, #8
 8000c02:	4b82      	ldr	r3, [pc, #520]	; (8000e0c <checkBrickHit+0x55c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	da00      	bge.n	8000c0e <checkBrickHit+0x35e>
 8000c0c:	3307      	adds	r3, #7
 8000c0e:	10db      	asrs	r3, r3, #3
 8000c10:	461d      	mov	r5, r3
 8000c12:	4c7d      	ldr	r4, [pc, #500]	; (8000e08 <checkBrickHit+0x558>)
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	442b      	add	r3, r5
 8000c1e:	011b      	lsls	r3, r3, #4
 8000c20:	4423      	add	r3, r4
 8000c22:	330c      	adds	r3, #12
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a7a      	ldr	r2, [pc, #488]	; (8000e10 <checkBrickHit+0x560>)
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2304      	movs	r3, #4
 8000c32:	2220      	movs	r2, #32
 8000c34:	f004 f808 	bl	8004c48 <Displ_FillArea>
            bricksHit++;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NW) {
 8000c3e:	4b73      	ldr	r3, [pc, #460]	; (8000e0c <checkBrickHit+0x55c>)
 8000c40:	7a1b      	ldrb	r3, [r3, #8]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	d102      	bne.n	8000c4c <checkBrickHit+0x39c>
                ball.dir = NE;
 8000c46:	4b71      	ldr	r3, [pc, #452]	; (8000e0c <checkBrickHit+0x55c>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SW) {
 8000c4c:	4b6f      	ldr	r3, [pc, #444]	; (8000e0c <checkBrickHit+0x55c>)
 8000c4e:	7a1b      	ldrb	r3, [r3, #8]
 8000c50:	2b05      	cmp	r3, #5
 8000c52:	d102      	bne.n	8000c5a <checkBrickHit+0x3aa>
                ball.dir = SE;
 8000c54:	4b6d      	ldr	r3, [pc, #436]	; (8000e0c <checkBrickHit+0x55c>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f041 8079 	bne.w	8001d54 <checkBrickHit+0x14a4>
            if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible == 1) {
 8000c62:	4b6a      	ldr	r3, [pc, #424]	; (8000e0c <checkBrickHit+0x55c>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f1a3 0209 	sub.w	r2, r3, #9
 8000c6a:	4b68      	ldr	r3, [pc, #416]	; (8000e0c <checkBrickHit+0x55c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	da00      	bge.n	8000c76 <checkBrickHit+0x3c6>
 8000c74:	3307      	adds	r3, #7
 8000c76:	10db      	asrs	r3, r3, #3
 8000c78:	4618      	mov	r0, r3
 8000c7a:	4963      	ldr	r1, [pc, #396]	; (8000e08 <checkBrickHit+0x558>)
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4403      	add	r3, r0
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	440b      	add	r3, r1
 8000c8a:	3308      	adds	r3, #8
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	f041 8060 	bne.w	8001d54 <checkBrickHit+0x14a4>
                bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness--;
 8000c94:	4b5d      	ldr	r3, [pc, #372]	; (8000e0c <checkBrickHit+0x55c>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f1a3 0209 	sub.w	r2, r3, #9
 8000c9c:	4b5b      	ldr	r3, [pc, #364]	; (8000e0c <checkBrickHit+0x55c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	da00      	bge.n	8000ca8 <checkBrickHit+0x3f8>
 8000ca6:	3307      	adds	r3, #7
 8000ca8:	10db      	asrs	r3, r3, #3
 8000caa:	4619      	mov	r1, r3
 8000cac:	4856      	ldr	r0, [pc, #344]	; (8000e08 <checkBrickHit+0x558>)
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	440b      	add	r3, r1
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	4403      	add	r3, r0
 8000cbc:	330c      	adds	r3, #12
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	1e58      	subs	r0, r3, #1
 8000cc2:	4c51      	ldr	r4, [pc, #324]	; (8000e08 <checkBrickHit+0x558>)
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	440b      	add	r3, r1
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	4423      	add	r3, r4
 8000cd2:	330c      	adds	r3, #12
 8000cd4:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8000cd6:	4b4d      	ldr	r3, [pc, #308]	; (8000e0c <checkBrickHit+0x55c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f1a3 0209 	sub.w	r2, r3, #9
 8000cde:	4b4b      	ldr	r3, [pc, #300]	; (8000e0c <checkBrickHit+0x55c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	da00      	bge.n	8000cea <checkBrickHit+0x43a>
 8000ce8:	3307      	adds	r3, #7
 8000cea:	10db      	asrs	r3, r3, #3
 8000cec:	4618      	mov	r0, r3
 8000cee:	4946      	ldr	r1, [pc, #280]	; (8000e08 <checkBrickHit+0x558>)
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4403      	add	r3, r0
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	440b      	add	r3, r1
 8000cfe:	330c      	adds	r3, #12
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dc2b      	bgt.n	8000d5e <checkBrickHit+0x4ae>
                    bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible = 0;
 8000d06:	4b41      	ldr	r3, [pc, #260]	; (8000e0c <checkBrickHit+0x55c>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f1a3 0209 	sub.w	r2, r3, #9
 8000d0e:	4b3f      	ldr	r3, [pc, #252]	; (8000e0c <checkBrickHit+0x55c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	da00      	bge.n	8000d1a <checkBrickHit+0x46a>
 8000d18:	3307      	adds	r3, #7
 8000d1a:	10db      	asrs	r3, r3, #3
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	493a      	ldr	r1, [pc, #232]	; (8000e08 <checkBrickHit+0x558>)
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4403      	add	r3, r0
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3308      	adds	r3, #8
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
                    points++;
 8000d34:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <checkBrickHit+0x564>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <checkBrickHit+0x564>)
 8000d3e:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    dropPowerUp((ball.x - 1)/8, ball.y - 1 - 8);
 8000d40:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <checkBrickHit+0x55c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	da00      	bge.n	8000d4c <checkBrickHit+0x49c>
 8000d4a:	3307      	adds	r3, #7
 8000d4c:	10db      	asrs	r3, r3, #3
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <checkBrickHit+0x55c>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	3b09      	subs	r3, #9
 8000d56:	4619      	mov	r1, r3
 8000d58:	4610      	mov	r0, r2
 8000d5a:	f001 f80f 	bl	8001d7c <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness]);
 8000d5e:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <checkBrickHit+0x55c>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f1a3 0209 	sub.w	r2, r3, #9
 8000d66:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <checkBrickHit+0x55c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	da00      	bge.n	8000d72 <checkBrickHit+0x4c2>
 8000d70:	3307      	adds	r3, #7
 8000d72:	10db      	asrs	r3, r3, #3
 8000d74:	4618      	mov	r0, r3
 8000d76:	4924      	ldr	r1, [pc, #144]	; (8000e08 <checkBrickHit+0x558>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4403      	add	r3, r0
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	440b      	add	r3, r1
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	b298      	uxth	r0, r3
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <checkBrickHit+0x55c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f1a3 0209 	sub.w	r2, r3, #9
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <checkBrickHit+0x55c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	da00      	bge.n	8000da2 <checkBrickHit+0x4f2>
 8000da0:	3307      	adds	r3, #7
 8000da2:	10db      	asrs	r3, r3, #3
 8000da4:	461c      	mov	r4, r3
 8000da6:	4918      	ldr	r1, [pc, #96]	; (8000e08 <checkBrickHit+0x558>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4423      	add	r3, r4
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	440b      	add	r3, r1
 8000db6:	3304      	adds	r3, #4
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	b299      	uxth	r1, r3
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <checkBrickHit+0x55c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f1a3 0209 	sub.w	r2, r3, #9
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <checkBrickHit+0x55c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	da00      	bge.n	8000dd4 <checkBrickHit+0x524>
 8000dd2:	3307      	adds	r3, #7
 8000dd4:	10db      	asrs	r3, r3, #3
 8000dd6:	461d      	mov	r5, r3
 8000dd8:	4c0b      	ldr	r4, [pc, #44]	; (8000e08 <checkBrickHit+0x558>)
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	442b      	add	r3, r5
 8000de4:	011b      	lsls	r3, r3, #4
 8000de6:	4423      	add	r3, r4
 8000de8:	330c      	adds	r3, #12
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <checkBrickHit+0x560>)
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2304      	movs	r3, #4
 8000df8:	2220      	movs	r2, #32
 8000dfa:	f003 ff25 	bl	8004c48 <Displ_FillArea>
                ball.dir = SE;
 8000dfe:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <checkBrickHit+0x55c>)
 8000e00:	2203      	movs	r2, #3
 8000e02:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8000e04:	f000 bfa6 	b.w	8001d54 <checkBrickHit+0x14a4>
 8000e08:	200000e8 	.word	0x200000e8
 8000e0c:	20000034 	.word	0x20000034
 8000e10:	20000004 	.word	0x20000004
 8000e14:	20001ee8 	.word	0x20001ee8
    case NE:
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 8000e18:	4bb6      	ldr	r3, [pc, #728]	; (80010f4 <checkBrickHit+0x844>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f1a3 0209 	sub.w	r2, r3, #9
 8000e20:	4bb4      	ldr	r3, [pc, #720]	; (80010f4 <checkBrickHit+0x844>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da00      	bge.n	8000e2a <checkBrickHit+0x57a>
 8000e28:	3307      	adds	r3, #7
 8000e2a:	10db      	asrs	r3, r3, #3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	49b2      	ldr	r1, [pc, #712]	; (80010f8 <checkBrickHit+0x848>)
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4403      	add	r3, r0
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	440b      	add	r3, r1
 8000e3e:	3308      	adds	r3, #8
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	f040 80b4 	bne.w	8000fb0 <checkBrickHit+0x700>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000e48:	4baa      	ldr	r3, [pc, #680]	; (80010f4 <checkBrickHit+0x844>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f1a3 0209 	sub.w	r2, r3, #9
 8000e50:	4ba8      	ldr	r3, [pc, #672]	; (80010f4 <checkBrickHit+0x844>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	da00      	bge.n	8000e5a <checkBrickHit+0x5aa>
 8000e58:	3307      	adds	r3, #7
 8000e5a:	10db      	asrs	r3, r3, #3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	48a6      	ldr	r0, [pc, #664]	; (80010f8 <checkBrickHit+0x848>)
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	440b      	add	r3, r1
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	4403      	add	r3, r0
 8000e6e:	330c      	adds	r3, #12
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	1e58      	subs	r0, r3, #1
 8000e74:	4ca0      	ldr	r4, [pc, #640]	; (80010f8 <checkBrickHit+0x848>)
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	440b      	add	r3, r1
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	4423      	add	r3, r4
 8000e84:	330c      	adds	r3, #12
 8000e86:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000e88:	4b9a      	ldr	r3, [pc, #616]	; (80010f4 <checkBrickHit+0x844>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f1a3 0209 	sub.w	r2, r3, #9
 8000e90:	4b98      	ldr	r3, [pc, #608]	; (80010f4 <checkBrickHit+0x844>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	da00      	bge.n	8000e9a <checkBrickHit+0x5ea>
 8000e98:	3307      	adds	r3, #7
 8000e9a:	10db      	asrs	r3, r3, #3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	4996      	ldr	r1, [pc, #600]	; (80010f8 <checkBrickHit+0x848>)
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4403      	add	r3, r0
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	440b      	add	r3, r1
 8000eae:	330c      	adds	r3, #12
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	dc29      	bgt.n	8000f0a <checkBrickHit+0x65a>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 8000eb6:	4b8f      	ldr	r3, [pc, #572]	; (80010f4 <checkBrickHit+0x844>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f1a3 0209 	sub.w	r2, r3, #9
 8000ebe:	4b8d      	ldr	r3, [pc, #564]	; (80010f4 <checkBrickHit+0x844>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	da00      	bge.n	8000ec8 <checkBrickHit+0x618>
 8000ec6:	3307      	adds	r3, #7
 8000ec8:	10db      	asrs	r3, r3, #3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	498a      	ldr	r1, [pc, #552]	; (80010f8 <checkBrickHit+0x848>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4403      	add	r3, r0
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	440b      	add	r3, r1
 8000edc:	3308      	adds	r3, #8
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
                points++;
 8000ee2:	4b86      	ldr	r3, [pc, #536]	; (80010fc <checkBrickHit+0x84c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b84      	ldr	r3, [pc, #528]	; (80010fc <checkBrickHit+0x84c>)
 8000eec:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 8000eee:	4b81      	ldr	r3, [pc, #516]	; (80010f4 <checkBrickHit+0x844>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	da00      	bge.n	8000ef8 <checkBrickHit+0x648>
 8000ef6:	3307      	adds	r3, #7
 8000ef8:	10db      	asrs	r3, r3, #3
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b7d      	ldr	r3, [pc, #500]	; (80010f4 <checkBrickHit+0x844>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	3b09      	subs	r3, #9
 8000f02:	4619      	mov	r1, r3
 8000f04:	4610      	mov	r0, r2
 8000f06:	f000 ff39 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 8000f0a:	4b7a      	ldr	r3, [pc, #488]	; (80010f4 <checkBrickHit+0x844>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f1a3 0209 	sub.w	r2, r3, #9
 8000f12:	4b78      	ldr	r3, [pc, #480]	; (80010f4 <checkBrickHit+0x844>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da00      	bge.n	8000f1c <checkBrickHit+0x66c>
 8000f1a:	3307      	adds	r3, #7
 8000f1c:	10db      	asrs	r3, r3, #3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	4975      	ldr	r1, [pc, #468]	; (80010f8 <checkBrickHit+0x848>)
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4403      	add	r3, r0
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	440b      	add	r3, r1
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	b298      	uxth	r0, r3
 8000f38:	4b6e      	ldr	r3, [pc, #440]	; (80010f4 <checkBrickHit+0x844>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f1a3 0209 	sub.w	r2, r3, #9
 8000f40:	4b6c      	ldr	r3, [pc, #432]	; (80010f4 <checkBrickHit+0x844>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	da00      	bge.n	8000f4a <checkBrickHit+0x69a>
 8000f48:	3307      	adds	r3, #7
 8000f4a:	10db      	asrs	r3, r3, #3
 8000f4c:	461c      	mov	r4, r3
 8000f4e:	496a      	ldr	r1, [pc, #424]	; (80010f8 <checkBrickHit+0x848>)
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4423      	add	r3, r4
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	440b      	add	r3, r1
 8000f5e:	3304      	adds	r3, #4
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	b299      	uxth	r1, r3
 8000f68:	4b62      	ldr	r3, [pc, #392]	; (80010f4 <checkBrickHit+0x844>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f1a3 0209 	sub.w	r2, r3, #9
 8000f70:	4b60      	ldr	r3, [pc, #384]	; (80010f4 <checkBrickHit+0x844>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da00      	bge.n	8000f7a <checkBrickHit+0x6ca>
 8000f78:	3307      	adds	r3, #7
 8000f7a:	10db      	asrs	r3, r3, #3
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	4c5e      	ldr	r4, [pc, #376]	; (80010f8 <checkBrickHit+0x848>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	442b      	add	r3, r5
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	4423      	add	r3, r4
 8000f8e:	330c      	adds	r3, #12
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a5b      	ldr	r2, [pc, #364]	; (8001100 <checkBrickHit+0x850>)
 8000f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	f003 fe52 	bl	8004c48 <Displ_FillArea>
            bricksHit++;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	71fb      	strb	r3, [r7, #7]
            ball.dir = SE;
 8000faa:	4b52      	ldr	r3, [pc, #328]	; (80010f4 <checkBrickHit+0x844>)
 8000fac:	2203      	movs	r2, #3
 8000fae:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 8000fb0:	4b50      	ldr	r3, [pc, #320]	; (80010f4 <checkBrickHit+0x844>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f1a3 0208 	sub.w	r2, r3, #8
 8000fb8:	4b4e      	ldr	r3, [pc, #312]	; (80010f4 <checkBrickHit+0x844>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da00      	bge.n	8000fc4 <checkBrickHit+0x714>
 8000fc2:	3307      	adds	r3, #7
 8000fc4:	10db      	asrs	r3, r3, #3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	494b      	ldr	r1, [pc, #300]	; (80010f8 <checkBrickHit+0x848>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4403      	add	r3, r0
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	440b      	add	r3, r1
 8000fd8:	3308      	adds	r3, #8
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	f040 80d0 	bne.w	8001182 <checkBrickHit+0x8d2>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 8000fe2:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <checkBrickHit+0x844>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f1a3 0208 	sub.w	r2, r3, #8
 8000fea:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <checkBrickHit+0x844>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da00      	bge.n	8000ff6 <checkBrickHit+0x746>
 8000ff4:	3307      	adds	r3, #7
 8000ff6:	10db      	asrs	r3, r3, #3
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	483f      	ldr	r0, [pc, #252]	; (80010f8 <checkBrickHit+0x848>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	440b      	add	r3, r1
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4403      	add	r3, r0
 800100a:	330c      	adds	r3, #12
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	1e58      	subs	r0, r3, #1
 8001010:	4c39      	ldr	r4, [pc, #228]	; (80010f8 <checkBrickHit+0x848>)
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	440b      	add	r3, r1
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	4423      	add	r3, r4
 8001020:	330c      	adds	r3, #12
 8001022:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <checkBrickHit+0x844>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f1a3 0208 	sub.w	r2, r3, #8
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <checkBrickHit+0x844>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	da00      	bge.n	8001038 <checkBrickHit+0x788>
 8001036:	3307      	adds	r3, #7
 8001038:	10db      	asrs	r3, r3, #3
 800103a:	4618      	mov	r0, r3
 800103c:	492e      	ldr	r1, [pc, #184]	; (80010f8 <checkBrickHit+0x848>)
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4403      	add	r3, r0
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	440b      	add	r3, r1
 800104c:	330c      	adds	r3, #12
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	dc2b      	bgt.n	80010ac <checkBrickHit+0x7fc>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <checkBrickHit+0x844>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f1a3 0208 	sub.w	r2, r3, #8
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <checkBrickHit+0x844>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	da00      	bge.n	8001068 <checkBrickHit+0x7b8>
 8001066:	3307      	adds	r3, #7
 8001068:	10db      	asrs	r3, r3, #3
 800106a:	4618      	mov	r0, r3
 800106c:	4922      	ldr	r1, [pc, #136]	; (80010f8 <checkBrickHit+0x848>)
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4403      	add	r3, r0
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	440b      	add	r3, r1
 800107c:	3308      	adds	r3, #8
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
                points++;
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <checkBrickHit+0x84c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <checkBrickHit+0x84c>)
 800108c:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <checkBrickHit+0x844>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	da00      	bge.n	800109a <checkBrickHit+0x7ea>
 8001098:	3307      	adds	r3, #7
 800109a:	10db      	asrs	r3, r3, #3
 800109c:	461a      	mov	r2, r3
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <checkBrickHit+0x844>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	3b08      	subs	r3, #8
 80010a4:	4619      	mov	r1, r3
 80010a6:	4610      	mov	r0, r2
 80010a8:	f000 fe68 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <checkBrickHit+0x844>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f1a3 0208 	sub.w	r2, r3, #8
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <checkBrickHit+0x844>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da00      	bge.n	80010c0 <checkBrickHit+0x810>
 80010be:	3307      	adds	r3, #7
 80010c0:	10db      	asrs	r3, r3, #3
 80010c2:	4618      	mov	r0, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <checkBrickHit+0x848>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4403      	add	r3, r0
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	440b      	add	r3, r1
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	b298      	uxth	r0, r3
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <checkBrickHit+0x844>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f1a3 0208 	sub.w	r2, r3, #8
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <checkBrickHit+0x844>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	da0a      	bge.n	8001104 <checkBrickHit+0x854>
 80010ee:	3307      	adds	r3, #7
 80010f0:	e008      	b.n	8001104 <checkBrickHit+0x854>
 80010f2:	bf00      	nop
 80010f4:	20000034 	.word	0x20000034
 80010f8:	200000e8 	.word	0x200000e8
 80010fc:	20001ee8 	.word	0x20001ee8
 8001100:	20000004 	.word	0x20000004
 8001104:	10db      	asrs	r3, r3, #3
 8001106:	461c      	mov	r4, r3
 8001108:	4989      	ldr	r1, [pc, #548]	; (8001330 <checkBrickHit+0xa80>)
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4423      	add	r3, r4
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	440b      	add	r3, r1
 8001118:	3304      	adds	r3, #4
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	b299      	uxth	r1, r3
 8001122:	4b84      	ldr	r3, [pc, #528]	; (8001334 <checkBrickHit+0xa84>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f1a3 0208 	sub.w	r2, r3, #8
 800112a:	4b82      	ldr	r3, [pc, #520]	; (8001334 <checkBrickHit+0xa84>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	da00      	bge.n	8001136 <checkBrickHit+0x886>
 8001134:	3307      	adds	r3, #7
 8001136:	10db      	asrs	r3, r3, #3
 8001138:	461d      	mov	r5, r3
 800113a:	4c7d      	ldr	r4, [pc, #500]	; (8001330 <checkBrickHit+0xa80>)
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	442b      	add	r3, r5
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	4423      	add	r3, r4
 800114a:	330c      	adds	r3, #12
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a7a      	ldr	r2, [pc, #488]	; (8001338 <checkBrickHit+0xa88>)
 8001150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001154:	b29b      	uxth	r3, r3
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2304      	movs	r3, #4
 800115a:	2220      	movs	r2, #32
 800115c:	f003 fd74 	bl	8004c48 <Displ_FillArea>
            bricksHit++;
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3301      	adds	r3, #1
 8001164:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NE) {
 8001166:	4b73      	ldr	r3, [pc, #460]	; (8001334 <checkBrickHit+0xa84>)
 8001168:	7a1b      	ldrb	r3, [r3, #8]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d102      	bne.n	8001174 <checkBrickHit+0x8c4>
                ball.dir = NW;
 800116e:	4b71      	ldr	r3, [pc, #452]	; (8001334 <checkBrickHit+0xa84>)
 8001170:	2207      	movs	r2, #7
 8001172:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SE) {
 8001174:	4b6f      	ldr	r3, [pc, #444]	; (8001334 <checkBrickHit+0xa84>)
 8001176:	7a1b      	ldrb	r3, [r3, #8]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d102      	bne.n	8001182 <checkBrickHit+0x8d2>
                ball.dir = SW;
 800117c:	4b6d      	ldr	r3, [pc, #436]	; (8001334 <checkBrickHit+0xa84>)
 800117e:	2205      	movs	r2, #5
 8001180:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	f040 85e7 	bne.w	8001d58 <checkBrickHit+0x14a8>
            if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible == 1) {
 800118a:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <checkBrickHit+0xa84>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f1a3 0209 	sub.w	r2, r3, #9
 8001192:	4b68      	ldr	r3, [pc, #416]	; (8001334 <checkBrickHit+0xa84>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	da00      	bge.n	800119e <checkBrickHit+0x8ee>
 800119c:	3307      	adds	r3, #7
 800119e:	10db      	asrs	r3, r3, #3
 80011a0:	4618      	mov	r0, r3
 80011a2:	4963      	ldr	r1, [pc, #396]	; (8001330 <checkBrickHit+0xa80>)
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4403      	add	r3, r0
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	440b      	add	r3, r1
 80011b2:	3308      	adds	r3, #8
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	f040 85ce 	bne.w	8001d58 <checkBrickHit+0x14a8>
                bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness--;
 80011bc:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <checkBrickHit+0xa84>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f1a3 0209 	sub.w	r2, r3, #9
 80011c4:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <checkBrickHit+0xa84>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da00      	bge.n	80011d0 <checkBrickHit+0x920>
 80011ce:	3307      	adds	r3, #7
 80011d0:	10db      	asrs	r3, r3, #3
 80011d2:	4619      	mov	r1, r3
 80011d4:	4856      	ldr	r0, [pc, #344]	; (8001330 <checkBrickHit+0xa80>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	440b      	add	r3, r1
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	4403      	add	r3, r0
 80011e4:	330c      	adds	r3, #12
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	1e58      	subs	r0, r3, #1
 80011ea:	4c51      	ldr	r4, [pc, #324]	; (8001330 <checkBrickHit+0xa80>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	440b      	add	r3, r1
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	4423      	add	r3, r4
 80011fa:	330c      	adds	r3, #12
 80011fc:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness <= 0) {
 80011fe:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <checkBrickHit+0xa84>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f1a3 0209 	sub.w	r2, r3, #9
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <checkBrickHit+0xa84>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	da00      	bge.n	8001212 <checkBrickHit+0x962>
 8001210:	3307      	adds	r3, #7
 8001212:	10db      	asrs	r3, r3, #3
 8001214:	4618      	mov	r0, r3
 8001216:	4946      	ldr	r1, [pc, #280]	; (8001330 <checkBrickHit+0xa80>)
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4403      	add	r3, r0
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	440b      	add	r3, r1
 8001226:	330c      	adds	r3, #12
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	dc2b      	bgt.n	8001286 <checkBrickHit+0x9d6>
                    bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible = 0;
 800122e:	4b41      	ldr	r3, [pc, #260]	; (8001334 <checkBrickHit+0xa84>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f1a3 0209 	sub.w	r2, r3, #9
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <checkBrickHit+0xa84>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	da00      	bge.n	8001242 <checkBrickHit+0x992>
 8001240:	3307      	adds	r3, #7
 8001242:	10db      	asrs	r3, r3, #3
 8001244:	4618      	mov	r0, r3
 8001246:	493a      	ldr	r1, [pc, #232]	; (8001330 <checkBrickHit+0xa80>)
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4403      	add	r3, r0
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	440b      	add	r3, r1
 8001256:	3308      	adds	r3, #8
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
                    points++;
 800125c:	4b37      	ldr	r3, [pc, #220]	; (800133c <checkBrickHit+0xa8c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <checkBrickHit+0xa8c>)
 8001266:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    dropPowerUp((ball.x + 1)/8, ball.y - 1 - 8);
 8001268:	4b32      	ldr	r3, [pc, #200]	; (8001334 <checkBrickHit+0xa84>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	da00      	bge.n	8001274 <checkBrickHit+0x9c4>
 8001272:	3307      	adds	r3, #7
 8001274:	10db      	asrs	r3, r3, #3
 8001276:	461a      	mov	r2, r3
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <checkBrickHit+0xa84>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	3b09      	subs	r3, #9
 800127e:	4619      	mov	r1, r3
 8001280:	4610      	mov	r0, r2
 8001282:	f000 fd7b 	bl	8001d7c <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness]);
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <checkBrickHit+0xa84>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f1a3 0209 	sub.w	r2, r3, #9
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <checkBrickHit+0xa84>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	da00      	bge.n	800129a <checkBrickHit+0x9ea>
 8001298:	3307      	adds	r3, #7
 800129a:	10db      	asrs	r3, r3, #3
 800129c:	4618      	mov	r0, r3
 800129e:	4924      	ldr	r1, [pc, #144]	; (8001330 <checkBrickHit+0xa80>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4403      	add	r3, r0
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	440b      	add	r3, r1
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	b298      	uxth	r0, r3
 80012b6:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <checkBrickHit+0xa84>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f1a3 0209 	sub.w	r2, r3, #9
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <checkBrickHit+0xa84>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da00      	bge.n	80012ca <checkBrickHit+0xa1a>
 80012c8:	3307      	adds	r3, #7
 80012ca:	10db      	asrs	r3, r3, #3
 80012cc:	461c      	mov	r4, r3
 80012ce:	4918      	ldr	r1, [pc, #96]	; (8001330 <checkBrickHit+0xa80>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4423      	add	r3, r4
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	440b      	add	r3, r1
 80012de:	3304      	adds	r3, #4
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	b299      	uxth	r1, r3
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <checkBrickHit+0xa84>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f1a3 0209 	sub.w	r2, r3, #9
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <checkBrickHit+0xa84>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	da00      	bge.n	80012fc <checkBrickHit+0xa4c>
 80012fa:	3307      	adds	r3, #7
 80012fc:	10db      	asrs	r3, r3, #3
 80012fe:	461d      	mov	r5, r3
 8001300:	4c0b      	ldr	r4, [pc, #44]	; (8001330 <checkBrickHit+0xa80>)
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	442b      	add	r3, r5
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4423      	add	r3, r4
 8001310:	330c      	adds	r3, #12
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a08      	ldr	r2, [pc, #32]	; (8001338 <checkBrickHit+0xa88>)
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	b29b      	uxth	r3, r3
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2304      	movs	r3, #4
 8001320:	2220      	movs	r2, #32
 8001322:	f003 fc91 	bl	8004c48 <Displ_FillArea>
                ball.dir = SW;
 8001326:	4b03      	ldr	r3, [pc, #12]	; (8001334 <checkBrickHit+0xa84>)
 8001328:	2205      	movs	r2, #5
 800132a:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 800132c:	f000 bd14 	b.w	8001d58 <checkBrickHit+0x14a8>
 8001330:	200000e8 	.word	0x200000e8
 8001334:	20000034 	.word	0x20000034
 8001338:	20000004 	.word	0x20000004
 800133c:	20001ee8 	.word	0x20001ee8
    case SE:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 8001340:	4bb6      	ldr	r3, [pc, #728]	; (800161c <checkBrickHit+0xd6c>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	1fda      	subs	r2, r3, #7
 8001346:	4bb5      	ldr	r3, [pc, #724]	; (800161c <checkBrickHit+0xd6c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	da00      	bge.n	8001350 <checkBrickHit+0xaa0>
 800134e:	3307      	adds	r3, #7
 8001350:	10db      	asrs	r3, r3, #3
 8001352:	4618      	mov	r0, r3
 8001354:	49b2      	ldr	r1, [pc, #712]	; (8001620 <checkBrickHit+0xd70>)
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4403      	add	r3, r0
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	440b      	add	r3, r1
 8001364:	3308      	adds	r3, #8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 80ae 	bne.w	80014ca <checkBrickHit+0xc1a>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 800136e:	4bab      	ldr	r3, [pc, #684]	; (800161c <checkBrickHit+0xd6c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	1fda      	subs	r2, r3, #7
 8001374:	4ba9      	ldr	r3, [pc, #676]	; (800161c <checkBrickHit+0xd6c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	da00      	bge.n	800137e <checkBrickHit+0xace>
 800137c:	3307      	adds	r3, #7
 800137e:	10db      	asrs	r3, r3, #3
 8001380:	4619      	mov	r1, r3
 8001382:	48a7      	ldr	r0, [pc, #668]	; (8001620 <checkBrickHit+0xd70>)
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	440b      	add	r3, r1
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4403      	add	r3, r0
 8001392:	330c      	adds	r3, #12
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	1e58      	subs	r0, r3, #1
 8001398:	4ca1      	ldr	r4, [pc, #644]	; (8001620 <checkBrickHit+0xd70>)
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	440b      	add	r3, r1
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4423      	add	r3, r4
 80013a8:	330c      	adds	r3, #12
 80013aa:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 80013ac:	4b9b      	ldr	r3, [pc, #620]	; (800161c <checkBrickHit+0xd6c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	1fda      	subs	r2, r3, #7
 80013b2:	4b9a      	ldr	r3, [pc, #616]	; (800161c <checkBrickHit+0xd6c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	da00      	bge.n	80013bc <checkBrickHit+0xb0c>
 80013ba:	3307      	adds	r3, #7
 80013bc:	10db      	asrs	r3, r3, #3
 80013be:	4618      	mov	r0, r3
 80013c0:	4997      	ldr	r1, [pc, #604]	; (8001620 <checkBrickHit+0xd70>)
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4403      	add	r3, r0
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	440b      	add	r3, r1
 80013d0:	330c      	adds	r3, #12
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	dc28      	bgt.n	800142a <checkBrickHit+0xb7a>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 80013d8:	4b90      	ldr	r3, [pc, #576]	; (800161c <checkBrickHit+0xd6c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	1fda      	subs	r2, r3, #7
 80013de:	4b8f      	ldr	r3, [pc, #572]	; (800161c <checkBrickHit+0xd6c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da00      	bge.n	80013e8 <checkBrickHit+0xb38>
 80013e6:	3307      	adds	r3, #7
 80013e8:	10db      	asrs	r3, r3, #3
 80013ea:	4618      	mov	r0, r3
 80013ec:	498c      	ldr	r1, [pc, #560]	; (8001620 <checkBrickHit+0xd70>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4403      	add	r3, r0
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	440b      	add	r3, r1
 80013fc:	3308      	adds	r3, #8
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
                points++;
 8001402:	4b88      	ldr	r3, [pc, #544]	; (8001624 <checkBrickHit+0xd74>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b86      	ldr	r3, [pc, #536]	; (8001624 <checkBrickHit+0xd74>)
 800140c:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 800140e:	4b83      	ldr	r3, [pc, #524]	; (800161c <checkBrickHit+0xd6c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	da00      	bge.n	8001418 <checkBrickHit+0xb68>
 8001416:	3307      	adds	r3, #7
 8001418:	10db      	asrs	r3, r3, #3
 800141a:	461a      	mov	r2, r3
 800141c:	4b7f      	ldr	r3, [pc, #508]	; (800161c <checkBrickHit+0xd6c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	3b07      	subs	r3, #7
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f000 fca9 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 800142a:	4b7c      	ldr	r3, [pc, #496]	; (800161c <checkBrickHit+0xd6c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	1fda      	subs	r2, r3, #7
 8001430:	4b7a      	ldr	r3, [pc, #488]	; (800161c <checkBrickHit+0xd6c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	da00      	bge.n	800143a <checkBrickHit+0xb8a>
 8001438:	3307      	adds	r3, #7
 800143a:	10db      	asrs	r3, r3, #3
 800143c:	4618      	mov	r0, r3
 800143e:	4978      	ldr	r1, [pc, #480]	; (8001620 <checkBrickHit+0xd70>)
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4403      	add	r3, r0
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	440b      	add	r3, r1
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b29b      	uxth	r3, r3
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	b298      	uxth	r0, r3
 8001456:	4b71      	ldr	r3, [pc, #452]	; (800161c <checkBrickHit+0xd6c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	1fda      	subs	r2, r3, #7
 800145c:	4b6f      	ldr	r3, [pc, #444]	; (800161c <checkBrickHit+0xd6c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	da00      	bge.n	8001466 <checkBrickHit+0xbb6>
 8001464:	3307      	adds	r3, #7
 8001466:	10db      	asrs	r3, r3, #3
 8001468:	461c      	mov	r4, r3
 800146a:	496d      	ldr	r1, [pc, #436]	; (8001620 <checkBrickHit+0xd70>)
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4423      	add	r3, r4
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	440b      	add	r3, r1
 800147a:	3304      	adds	r3, #4
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	b299      	uxth	r1, r3
 8001484:	4b65      	ldr	r3, [pc, #404]	; (800161c <checkBrickHit+0xd6c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	1fda      	subs	r2, r3, #7
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <checkBrickHit+0xd6c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	da00      	bge.n	8001494 <checkBrickHit+0xbe4>
 8001492:	3307      	adds	r3, #7
 8001494:	10db      	asrs	r3, r3, #3
 8001496:	461d      	mov	r5, r3
 8001498:	4c61      	ldr	r4, [pc, #388]	; (8001620 <checkBrickHit+0xd70>)
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	442b      	add	r3, r5
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	4423      	add	r3, r4
 80014a8:	330c      	adds	r3, #12
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a5e      	ldr	r2, [pc, #376]	; (8001628 <checkBrickHit+0xd78>)
 80014ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2304      	movs	r3, #4
 80014b8:	2220      	movs	r2, #32
 80014ba:	f003 fbc5 	bl	8004c48 <Displ_FillArea>
            bricksHit++;
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	3301      	adds	r3, #1
 80014c2:	71fb      	strb	r3, [r7, #7]
            ball.dir = NE;
 80014c4:	4b55      	ldr	r3, [pc, #340]	; (800161c <checkBrickHit+0xd6c>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 80014ca:	4b54      	ldr	r3, [pc, #336]	; (800161c <checkBrickHit+0xd6c>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f1a3 0208 	sub.w	r2, r3, #8
 80014d2:	4b52      	ldr	r3, [pc, #328]	; (800161c <checkBrickHit+0xd6c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da00      	bge.n	80014de <checkBrickHit+0xc2e>
 80014dc:	3307      	adds	r3, #7
 80014de:	10db      	asrs	r3, r3, #3
 80014e0:	4618      	mov	r0, r3
 80014e2:	494f      	ldr	r1, [pc, #316]	; (8001620 <checkBrickHit+0xd70>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4403      	add	r3, r0
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	440b      	add	r3, r1
 80014f2:	3308      	adds	r3, #8
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	f040 80d0 	bne.w	800169c <checkBrickHit+0xdec>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 80014fc:	4b47      	ldr	r3, [pc, #284]	; (800161c <checkBrickHit+0xd6c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f1a3 0208 	sub.w	r2, r3, #8
 8001504:	4b45      	ldr	r3, [pc, #276]	; (800161c <checkBrickHit+0xd6c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	da00      	bge.n	8001510 <checkBrickHit+0xc60>
 800150e:	3307      	adds	r3, #7
 8001510:	10db      	asrs	r3, r3, #3
 8001512:	4619      	mov	r1, r3
 8001514:	4842      	ldr	r0, [pc, #264]	; (8001620 <checkBrickHit+0xd70>)
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	440b      	add	r3, r1
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	4403      	add	r3, r0
 8001524:	330c      	adds	r3, #12
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	1e58      	subs	r0, r3, #1
 800152a:	4c3d      	ldr	r4, [pc, #244]	; (8001620 <checkBrickHit+0xd70>)
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	440b      	add	r3, r1
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	4423      	add	r3, r4
 800153a:	330c      	adds	r3, #12
 800153c:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 800153e:	4b37      	ldr	r3, [pc, #220]	; (800161c <checkBrickHit+0xd6c>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f1a3 0208 	sub.w	r2, r3, #8
 8001546:	4b35      	ldr	r3, [pc, #212]	; (800161c <checkBrickHit+0xd6c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	da00      	bge.n	8001552 <checkBrickHit+0xca2>
 8001550:	3307      	adds	r3, #7
 8001552:	10db      	asrs	r3, r3, #3
 8001554:	4618      	mov	r0, r3
 8001556:	4932      	ldr	r1, [pc, #200]	; (8001620 <checkBrickHit+0xd70>)
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4403      	add	r3, r0
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	440b      	add	r3, r1
 8001566:	330c      	adds	r3, #12
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	dc2b      	bgt.n	80015c6 <checkBrickHit+0xd16>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <checkBrickHit+0xd6c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f1a3 0208 	sub.w	r2, r3, #8
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <checkBrickHit+0xd6c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	da00      	bge.n	8001582 <checkBrickHit+0xcd2>
 8001580:	3307      	adds	r3, #7
 8001582:	10db      	asrs	r3, r3, #3
 8001584:	4618      	mov	r0, r3
 8001586:	4926      	ldr	r1, [pc, #152]	; (8001620 <checkBrickHit+0xd70>)
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4403      	add	r3, r0
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	440b      	add	r3, r1
 8001596:	3308      	adds	r3, #8
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
                points++;
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <checkBrickHit+0xd74>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <checkBrickHit+0xd74>)
 80015a6:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <checkBrickHit+0xd6c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da00      	bge.n	80015b4 <checkBrickHit+0xd04>
 80015b2:	3307      	adds	r3, #7
 80015b4:	10db      	asrs	r3, r3, #3
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <checkBrickHit+0xd6c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	3b08      	subs	r3, #8
 80015be:	4619      	mov	r1, r3
 80015c0:	4610      	mov	r0, r2
 80015c2:	f000 fbdb 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <checkBrickHit+0xd6c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f1a3 0208 	sub.w	r2, r3, #8
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <checkBrickHit+0xd6c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	da00      	bge.n	80015da <checkBrickHit+0xd2a>
 80015d8:	3307      	adds	r3, #7
 80015da:	10db      	asrs	r3, r3, #3
 80015dc:	4618      	mov	r0, r3
 80015de:	4910      	ldr	r1, [pc, #64]	; (8001620 <checkBrickHit+0xd70>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4403      	add	r3, r0
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	440b      	add	r3, r1
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	b298      	uxth	r0, r3
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <checkBrickHit+0xd6c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f1a3 0208 	sub.w	r2, r3, #8
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <checkBrickHit+0xd6c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	da00      	bge.n	800160a <checkBrickHit+0xd5a>
 8001608:	3307      	adds	r3, #7
 800160a:	10db      	asrs	r3, r3, #3
 800160c:	461c      	mov	r4, r3
 800160e:	4904      	ldr	r1, [pc, #16]	; (8001620 <checkBrickHit+0xd70>)
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	e008      	b.n	800162c <checkBrickHit+0xd7c>
 800161a:	bf00      	nop
 800161c:	20000034 	.word	0x20000034
 8001620:	200000e8 	.word	0x200000e8
 8001624:	20001ee8 	.word	0x20001ee8
 8001628:	20000004 	.word	0x20000004
 800162c:	4423      	add	r3, r4
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	440b      	add	r3, r1
 8001632:	3304      	adds	r3, #4
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	b299      	uxth	r1, r3
 800163c:	4b7f      	ldr	r3, [pc, #508]	; (800183c <checkBrickHit+0xf8c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f1a3 0208 	sub.w	r2, r3, #8
 8001644:	4b7d      	ldr	r3, [pc, #500]	; (800183c <checkBrickHit+0xf8c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	da00      	bge.n	8001650 <checkBrickHit+0xda0>
 800164e:	3307      	adds	r3, #7
 8001650:	10db      	asrs	r3, r3, #3
 8001652:	461d      	mov	r5, r3
 8001654:	4c7a      	ldr	r4, [pc, #488]	; (8001840 <checkBrickHit+0xf90>)
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	442b      	add	r3, r5
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	4423      	add	r3, r4
 8001664:	330c      	adds	r3, #12
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a76      	ldr	r2, [pc, #472]	; (8001844 <checkBrickHit+0xf94>)
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	b29b      	uxth	r3, r3
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2304      	movs	r3, #4
 8001674:	2220      	movs	r2, #32
 8001676:	f003 fae7 	bl	8004c48 <Displ_FillArea>
            bricksHit++;
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	3301      	adds	r3, #1
 800167e:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SE) {
 8001680:	4b6e      	ldr	r3, [pc, #440]	; (800183c <checkBrickHit+0xf8c>)
 8001682:	7a1b      	ldrb	r3, [r3, #8]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d102      	bne.n	800168e <checkBrickHit+0xdde>
                ball.dir = SW;
 8001688:	4b6c      	ldr	r3, [pc, #432]	; (800183c <checkBrickHit+0xf8c>)
 800168a:	2205      	movs	r2, #5
 800168c:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NE) {
 800168e:	4b6b      	ldr	r3, [pc, #428]	; (800183c <checkBrickHit+0xf8c>)
 8001690:	7a1b      	ldrb	r3, [r3, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d102      	bne.n	800169c <checkBrickHit+0xdec>
                ball.dir = NW;
 8001696:	4b69      	ldr	r3, [pc, #420]	; (800183c <checkBrickHit+0xf8c>)
 8001698:	2207      	movs	r2, #7
 800169a:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f040 835c 	bne.w	8001d5c <checkBrickHit+0x14ac>
            if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible == 1) {
 80016a4:	4b65      	ldr	r3, [pc, #404]	; (800183c <checkBrickHit+0xf8c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	1fda      	subs	r2, r3, #7
 80016aa:	4b64      	ldr	r3, [pc, #400]	; (800183c <checkBrickHit+0xf8c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da00      	bge.n	80016b6 <checkBrickHit+0xe06>
 80016b4:	3307      	adds	r3, #7
 80016b6:	10db      	asrs	r3, r3, #3
 80016b8:	4618      	mov	r0, r3
 80016ba:	4961      	ldr	r1, [pc, #388]	; (8001840 <checkBrickHit+0xf90>)
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4403      	add	r3, r0
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	440b      	add	r3, r1
 80016ca:	3308      	adds	r3, #8
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	f040 8344 	bne.w	8001d5c <checkBrickHit+0x14ac>
                bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness--;
 80016d4:	4b59      	ldr	r3, [pc, #356]	; (800183c <checkBrickHit+0xf8c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	1fda      	subs	r2, r3, #7
 80016da:	4b58      	ldr	r3, [pc, #352]	; (800183c <checkBrickHit+0xf8c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da00      	bge.n	80016e6 <checkBrickHit+0xe36>
 80016e4:	3307      	adds	r3, #7
 80016e6:	10db      	asrs	r3, r3, #3
 80016e8:	4619      	mov	r1, r3
 80016ea:	4855      	ldr	r0, [pc, #340]	; (8001840 <checkBrickHit+0xf90>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	440b      	add	r3, r1
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	4403      	add	r3, r0
 80016fa:	330c      	adds	r3, #12
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	1e58      	subs	r0, r3, #1
 8001700:	4c4f      	ldr	r4, [pc, #316]	; (8001840 <checkBrickHit+0xf90>)
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	440b      	add	r3, r1
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4423      	add	r3, r4
 8001710:	330c      	adds	r3, #12
 8001712:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness <= 0) {
 8001714:	4b49      	ldr	r3, [pc, #292]	; (800183c <checkBrickHit+0xf8c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	1fda      	subs	r2, r3, #7
 800171a:	4b48      	ldr	r3, [pc, #288]	; (800183c <checkBrickHit+0xf8c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	da00      	bge.n	8001726 <checkBrickHit+0xe76>
 8001724:	3307      	adds	r3, #7
 8001726:	10db      	asrs	r3, r3, #3
 8001728:	4618      	mov	r0, r3
 800172a:	4945      	ldr	r1, [pc, #276]	; (8001840 <checkBrickHit+0xf90>)
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4403      	add	r3, r0
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	440b      	add	r3, r1
 800173a:	330c      	adds	r3, #12
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	dc2a      	bgt.n	8001798 <checkBrickHit+0xee8>
                    bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible = 0;
 8001742:	4b3e      	ldr	r3, [pc, #248]	; (800183c <checkBrickHit+0xf8c>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	1fda      	subs	r2, r3, #7
 8001748:	4b3c      	ldr	r3, [pc, #240]	; (800183c <checkBrickHit+0xf8c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	da00      	bge.n	8001754 <checkBrickHit+0xea4>
 8001752:	3307      	adds	r3, #7
 8001754:	10db      	asrs	r3, r3, #3
 8001756:	4618      	mov	r0, r3
 8001758:	4939      	ldr	r1, [pc, #228]	; (8001840 <checkBrickHit+0xf90>)
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4403      	add	r3, r0
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	440b      	add	r3, r1
 8001768:	3308      	adds	r3, #8
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
                    points++;
 800176e:	4b36      	ldr	r3, [pc, #216]	; (8001848 <checkBrickHit+0xf98>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b34      	ldr	r3, [pc, #208]	; (8001848 <checkBrickHit+0xf98>)
 8001778:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    dropPowerUp((ball.x + 1)/8, ball.y - 8 + 1);
 800177a:	4b30      	ldr	r3, [pc, #192]	; (800183c <checkBrickHit+0xf8c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	da00      	bge.n	8001786 <checkBrickHit+0xed6>
 8001784:	3307      	adds	r3, #7
 8001786:	10db      	asrs	r3, r3, #3
 8001788:	461a      	mov	r2, r3
 800178a:	4b2c      	ldr	r3, [pc, #176]	; (800183c <checkBrickHit+0xf8c>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	3b07      	subs	r3, #7
 8001790:	4619      	mov	r1, r3
 8001792:	4610      	mov	r0, r2
 8001794:	f000 faf2 	bl	8001d7c <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 8 + 1][(ball.x + 1)/8].x*4, bricks[ball.y - 8 + 1][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness]);
 8001798:	4b28      	ldr	r3, [pc, #160]	; (800183c <checkBrickHit+0xf8c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	1fda      	subs	r2, r3, #7
 800179e:	4b27      	ldr	r3, [pc, #156]	; (800183c <checkBrickHit+0xf8c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da00      	bge.n	80017aa <checkBrickHit+0xefa>
 80017a8:	3307      	adds	r3, #7
 80017aa:	10db      	asrs	r3, r3, #3
 80017ac:	4618      	mov	r0, r3
 80017ae:	4924      	ldr	r1, [pc, #144]	; (8001840 <checkBrickHit+0xf90>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4403      	add	r3, r0
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	440b      	add	r3, r1
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	b298      	uxth	r0, r3
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <checkBrickHit+0xf8c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	1fda      	subs	r2, r3, #7
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <checkBrickHit+0xf8c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da00      	bge.n	80017d8 <checkBrickHit+0xf28>
 80017d6:	3307      	adds	r3, #7
 80017d8:	10db      	asrs	r3, r3, #3
 80017da:	461c      	mov	r4, r3
 80017dc:	4918      	ldr	r1, [pc, #96]	; (8001840 <checkBrickHit+0xf90>)
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4423      	add	r3, r4
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	440b      	add	r3, r1
 80017ec:	3304      	adds	r3, #4
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	b299      	uxth	r1, r3
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <checkBrickHit+0xf8c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	1fda      	subs	r2, r3, #7
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <checkBrickHit+0xf8c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	da00      	bge.n	8001808 <checkBrickHit+0xf58>
 8001806:	3307      	adds	r3, #7
 8001808:	10db      	asrs	r3, r3, #3
 800180a:	461d      	mov	r5, r3
 800180c:	4c0c      	ldr	r4, [pc, #48]	; (8001840 <checkBrickHit+0xf90>)
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	442b      	add	r3, r5
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4423      	add	r3, r4
 800181c:	330c      	adds	r3, #12
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a08      	ldr	r2, [pc, #32]	; (8001844 <checkBrickHit+0xf94>)
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	b29b      	uxth	r3, r3
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2304      	movs	r3, #4
 800182c:	2220      	movs	r2, #32
 800182e:	f003 fa0b 	bl	8004c48 <Displ_FillArea>
                ball.dir = NW;
 8001832:	4b02      	ldr	r3, [pc, #8]	; (800183c <checkBrickHit+0xf8c>)
 8001834:	2207      	movs	r2, #7
 8001836:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8001838:	e290      	b.n	8001d5c <checkBrickHit+0x14ac>
 800183a:	bf00      	nop
 800183c:	20000034 	.word	0x20000034
 8001840:	200000e8 	.word	0x200000e8
 8001844:	20000004 	.word	0x20000004
 8001848:	20001ee8 	.word	0x20001ee8
    case SW:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 800184c:	4bb6      	ldr	r3, [pc, #728]	; (8001b28 <checkBrickHit+0x1278>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	1fda      	subs	r2, r3, #7
 8001852:	4bb5      	ldr	r3, [pc, #724]	; (8001b28 <checkBrickHit+0x1278>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	da00      	bge.n	800185c <checkBrickHit+0xfac>
 800185a:	3307      	adds	r3, #7
 800185c:	10db      	asrs	r3, r3, #3
 800185e:	4618      	mov	r0, r3
 8001860:	49b2      	ldr	r1, [pc, #712]	; (8001b2c <checkBrickHit+0x127c>)
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4403      	add	r3, r0
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	440b      	add	r3, r1
 8001870:	3308      	adds	r3, #8
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	f040 80ae 	bne.w	80019d6 <checkBrickHit+0x1126>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 800187a:	4bab      	ldr	r3, [pc, #684]	; (8001b28 <checkBrickHit+0x1278>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	1fda      	subs	r2, r3, #7
 8001880:	4ba9      	ldr	r3, [pc, #676]	; (8001b28 <checkBrickHit+0x1278>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	da00      	bge.n	800188a <checkBrickHit+0xfda>
 8001888:	3307      	adds	r3, #7
 800188a:	10db      	asrs	r3, r3, #3
 800188c:	4619      	mov	r1, r3
 800188e:	48a7      	ldr	r0, [pc, #668]	; (8001b2c <checkBrickHit+0x127c>)
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	440b      	add	r3, r1
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	4403      	add	r3, r0
 800189e:	330c      	adds	r3, #12
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	1e58      	subs	r0, r3, #1
 80018a4:	4ca1      	ldr	r4, [pc, #644]	; (8001b2c <checkBrickHit+0x127c>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	440b      	add	r3, r1
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	4423      	add	r3, r4
 80018b4:	330c      	adds	r3, #12
 80018b6:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 80018b8:	4b9b      	ldr	r3, [pc, #620]	; (8001b28 <checkBrickHit+0x1278>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	1fda      	subs	r2, r3, #7
 80018be:	4b9a      	ldr	r3, [pc, #616]	; (8001b28 <checkBrickHit+0x1278>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da00      	bge.n	80018c8 <checkBrickHit+0x1018>
 80018c6:	3307      	adds	r3, #7
 80018c8:	10db      	asrs	r3, r3, #3
 80018ca:	4618      	mov	r0, r3
 80018cc:	4997      	ldr	r1, [pc, #604]	; (8001b2c <checkBrickHit+0x127c>)
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4403      	add	r3, r0
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	440b      	add	r3, r1
 80018dc:	330c      	adds	r3, #12
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dc28      	bgt.n	8001936 <checkBrickHit+0x1086>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 80018e4:	4b90      	ldr	r3, [pc, #576]	; (8001b28 <checkBrickHit+0x1278>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	1fda      	subs	r2, r3, #7
 80018ea:	4b8f      	ldr	r3, [pc, #572]	; (8001b28 <checkBrickHit+0x1278>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	da00      	bge.n	80018f4 <checkBrickHit+0x1044>
 80018f2:	3307      	adds	r3, #7
 80018f4:	10db      	asrs	r3, r3, #3
 80018f6:	4618      	mov	r0, r3
 80018f8:	498c      	ldr	r1, [pc, #560]	; (8001b2c <checkBrickHit+0x127c>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4403      	add	r3, r0
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	440b      	add	r3, r1
 8001908:	3308      	adds	r3, #8
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
                points++;
 800190e:	4b88      	ldr	r3, [pc, #544]	; (8001b30 <checkBrickHit+0x1280>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b86      	ldr	r3, [pc, #536]	; (8001b30 <checkBrickHit+0x1280>)
 8001918:	701a      	strb	r2, [r3, #0]
                ////QD << "score:" << points;
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 800191a:	4b83      	ldr	r3, [pc, #524]	; (8001b28 <checkBrickHit+0x1278>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	da00      	bge.n	8001924 <checkBrickHit+0x1074>
 8001922:	3307      	adds	r3, #7
 8001924:	10db      	asrs	r3, r3, #3
 8001926:	461a      	mov	r2, r3
 8001928:	4b7f      	ldr	r3, [pc, #508]	; (8001b28 <checkBrickHit+0x1278>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	3b07      	subs	r3, #7
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f000 fa23 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 8001936:	4b7c      	ldr	r3, [pc, #496]	; (8001b28 <checkBrickHit+0x1278>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	1fda      	subs	r2, r3, #7
 800193c:	4b7a      	ldr	r3, [pc, #488]	; (8001b28 <checkBrickHit+0x1278>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	da00      	bge.n	8001946 <checkBrickHit+0x1096>
 8001944:	3307      	adds	r3, #7
 8001946:	10db      	asrs	r3, r3, #3
 8001948:	4618      	mov	r0, r3
 800194a:	4978      	ldr	r1, [pc, #480]	; (8001b2c <checkBrickHit+0x127c>)
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4403      	add	r3, r0
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	440b      	add	r3, r1
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	b298      	uxth	r0, r3
 8001962:	4b71      	ldr	r3, [pc, #452]	; (8001b28 <checkBrickHit+0x1278>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	1fda      	subs	r2, r3, #7
 8001968:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <checkBrickHit+0x1278>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	da00      	bge.n	8001972 <checkBrickHit+0x10c2>
 8001970:	3307      	adds	r3, #7
 8001972:	10db      	asrs	r3, r3, #3
 8001974:	461c      	mov	r4, r3
 8001976:	496d      	ldr	r1, [pc, #436]	; (8001b2c <checkBrickHit+0x127c>)
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4423      	add	r3, r4
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	440b      	add	r3, r1
 8001986:	3304      	adds	r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	b299      	uxth	r1, r3
 8001990:	4b65      	ldr	r3, [pc, #404]	; (8001b28 <checkBrickHit+0x1278>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	1fda      	subs	r2, r3, #7
 8001996:	4b64      	ldr	r3, [pc, #400]	; (8001b28 <checkBrickHit+0x1278>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	da00      	bge.n	80019a0 <checkBrickHit+0x10f0>
 800199e:	3307      	adds	r3, #7
 80019a0:	10db      	asrs	r3, r3, #3
 80019a2:	461d      	mov	r5, r3
 80019a4:	4c61      	ldr	r4, [pc, #388]	; (8001b2c <checkBrickHit+0x127c>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	442b      	add	r3, r5
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	4423      	add	r3, r4
 80019b4:	330c      	adds	r3, #12
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a5e      	ldr	r2, [pc, #376]	; (8001b34 <checkBrickHit+0x1284>)
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2304      	movs	r3, #4
 80019c4:	2220      	movs	r2, #32
 80019c6:	f003 f93f 	bl	8004c48 <Displ_FillArea>
            bricksHit++;
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	3301      	adds	r3, #1
 80019ce:	71fb      	strb	r3, [r7, #7]
            ball.dir = NW;
 80019d0:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <checkBrickHit+0x1278>)
 80019d2:	2207      	movs	r2, #7
 80019d4:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 80019d6:	4b54      	ldr	r3, [pc, #336]	; (8001b28 <checkBrickHit+0x1278>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f1a3 0208 	sub.w	r2, r3, #8
 80019de:	4b52      	ldr	r3, [pc, #328]	; (8001b28 <checkBrickHit+0x1278>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da00      	bge.n	80019ea <checkBrickHit+0x113a>
 80019e8:	3307      	adds	r3, #7
 80019ea:	10db      	asrs	r3, r3, #3
 80019ec:	4618      	mov	r0, r3
 80019ee:	494f      	ldr	r1, [pc, #316]	; (8001b2c <checkBrickHit+0x127c>)
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4403      	add	r3, r0
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	440b      	add	r3, r1
 80019fe:	3308      	adds	r3, #8
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	f040 80d0 	bne.w	8001ba8 <checkBrickHit+0x12f8>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8001a08:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <checkBrickHit+0x1278>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f1a3 0208 	sub.w	r2, r3, #8
 8001a10:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <checkBrickHit+0x1278>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da00      	bge.n	8001a1c <checkBrickHit+0x116c>
 8001a1a:	3307      	adds	r3, #7
 8001a1c:	10db      	asrs	r3, r3, #3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4842      	ldr	r0, [pc, #264]	; (8001b2c <checkBrickHit+0x127c>)
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	440b      	add	r3, r1
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4403      	add	r3, r0
 8001a30:	330c      	adds	r3, #12
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	1e58      	subs	r0, r3, #1
 8001a36:	4c3d      	ldr	r4, [pc, #244]	; (8001b2c <checkBrickHit+0x127c>)
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	440b      	add	r3, r1
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	4423      	add	r3, r4
 8001a46:	330c      	adds	r3, #12
 8001a48:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <checkBrickHit+0x1278>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f1a3 0208 	sub.w	r2, r3, #8
 8001a52:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <checkBrickHit+0x1278>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	da00      	bge.n	8001a5e <checkBrickHit+0x11ae>
 8001a5c:	3307      	adds	r3, #7
 8001a5e:	10db      	asrs	r3, r3, #3
 8001a60:	4618      	mov	r0, r3
 8001a62:	4932      	ldr	r1, [pc, #200]	; (8001b2c <checkBrickHit+0x127c>)
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4403      	add	r3, r0
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	440b      	add	r3, r1
 8001a72:	330c      	adds	r3, #12
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	dc2b      	bgt.n	8001ad2 <checkBrickHit+0x1222>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <checkBrickHit+0x1278>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f1a3 0208 	sub.w	r2, r3, #8
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <checkBrickHit+0x1278>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da00      	bge.n	8001a8e <checkBrickHit+0x11de>
 8001a8c:	3307      	adds	r3, #7
 8001a8e:	10db      	asrs	r3, r3, #3
 8001a90:	4618      	mov	r0, r3
 8001a92:	4926      	ldr	r1, [pc, #152]	; (8001b2c <checkBrickHit+0x127c>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4403      	add	r3, r0
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3308      	adds	r3, #8
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
                points++;
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <checkBrickHit+0x1280>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	3301      	adds	r3, #1
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <checkBrickHit+0x1280>)
 8001ab2:	701a      	strb	r2, [r3, #0]
                ////QD << "score:" << points;
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <checkBrickHit+0x1278>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	da00      	bge.n	8001ac0 <checkBrickHit+0x1210>
 8001abe:	3307      	adds	r3, #7
 8001ac0:	10db      	asrs	r3, r3, #3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <checkBrickHit+0x1278>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	3b08      	subs	r3, #8
 8001aca:	4619      	mov	r1, r3
 8001acc:	4610      	mov	r0, r2
 8001ace:	f000 f955 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <checkBrickHit+0x1278>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f1a3 0208 	sub.w	r2, r3, #8
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <checkBrickHit+0x1278>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	da00      	bge.n	8001ae6 <checkBrickHit+0x1236>
 8001ae4:	3307      	adds	r3, #7
 8001ae6:	10db      	asrs	r3, r3, #3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	4910      	ldr	r1, [pc, #64]	; (8001b2c <checkBrickHit+0x127c>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4403      	add	r3, r0
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	440b      	add	r3, r1
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	b298      	uxth	r0, r3
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <checkBrickHit+0x1278>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f1a3 0208 	sub.w	r2, r3, #8
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <checkBrickHit+0x1278>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	da00      	bge.n	8001b16 <checkBrickHit+0x1266>
 8001b14:	3307      	adds	r3, #7
 8001b16:	10db      	asrs	r3, r3, #3
 8001b18:	461c      	mov	r4, r3
 8001b1a:	4904      	ldr	r1, [pc, #16]	; (8001b2c <checkBrickHit+0x127c>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	e008      	b.n	8001b38 <checkBrickHit+0x1288>
 8001b26:	bf00      	nop
 8001b28:	20000034 	.word	0x20000034
 8001b2c:	200000e8 	.word	0x200000e8
 8001b30:	20001ee8 	.word	0x20001ee8
 8001b34:	20000004 	.word	0x20000004
 8001b38:	4423      	add	r3, r4
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3304      	adds	r3, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	b299      	uxth	r1, r3
 8001b48:	4b88      	ldr	r3, [pc, #544]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f1a3 0208 	sub.w	r2, r3, #8
 8001b50:	4b86      	ldr	r3, [pc, #536]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	da00      	bge.n	8001b5c <checkBrickHit+0x12ac>
 8001b5a:	3307      	adds	r3, #7
 8001b5c:	10db      	asrs	r3, r3, #3
 8001b5e:	461d      	mov	r5, r3
 8001b60:	4c83      	ldr	r4, [pc, #524]	; (8001d70 <checkBrickHit+0x14c0>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	442b      	add	r3, r5
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	4423      	add	r3, r4
 8001b70:	330c      	adds	r3, #12
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a7f      	ldr	r2, [pc, #508]	; (8001d74 <checkBrickHit+0x14c4>)
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2304      	movs	r3, #4
 8001b80:	2220      	movs	r2, #32
 8001b82:	f003 f861 	bl	8004c48 <Displ_FillArea>
            bricksHit++;
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SW) {
 8001b8c:	4b77      	ldr	r3, [pc, #476]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b8e:	7a1b      	ldrb	r3, [r3, #8]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d102      	bne.n	8001b9a <checkBrickHit+0x12ea>
                ball.dir = SE;
 8001b94:	4b75      	ldr	r3, [pc, #468]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b96:	2203      	movs	r2, #3
 8001b98:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NW) {
 8001b9a:	4b74      	ldr	r3, [pc, #464]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b9c:	7a1b      	ldrb	r3, [r3, #8]
 8001b9e:	2b07      	cmp	r3, #7
 8001ba0:	d102      	bne.n	8001ba8 <checkBrickHit+0x12f8>
                ball.dir = NE;
 8001ba2:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <checkBrickHit+0x14bc>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 80d8 	bne.w	8001d60 <checkBrickHit+0x14b0>
            if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible == 1) {
 8001bb0:	4b6e      	ldr	r3, [pc, #440]	; (8001d6c <checkBrickHit+0x14bc>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	1fda      	subs	r2, r3, #7
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <checkBrickHit+0x14bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da00      	bge.n	8001bc2 <checkBrickHit+0x1312>
 8001bc0:	3307      	adds	r3, #7
 8001bc2:	10db      	asrs	r3, r3, #3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	496a      	ldr	r1, [pc, #424]	; (8001d70 <checkBrickHit+0x14c0>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4403      	add	r3, r0
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	f040 80c0 	bne.w	8001d60 <checkBrickHit+0x14b0>
                bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness--;
 8001be0:	4b62      	ldr	r3, [pc, #392]	; (8001d6c <checkBrickHit+0x14bc>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	1fda      	subs	r2, r3, #7
 8001be6:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <checkBrickHit+0x14bc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da00      	bge.n	8001bf2 <checkBrickHit+0x1342>
 8001bf0:	3307      	adds	r3, #7
 8001bf2:	10db      	asrs	r3, r3, #3
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	485e      	ldr	r0, [pc, #376]	; (8001d70 <checkBrickHit+0x14c0>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	440b      	add	r3, r1
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	4403      	add	r3, r0
 8001c06:	330c      	adds	r3, #12
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1e58      	subs	r0, r3, #1
 8001c0c:	4c58      	ldr	r4, [pc, #352]	; (8001d70 <checkBrickHit+0x14c0>)
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	440b      	add	r3, r1
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	4423      	add	r3, r4
 8001c1c:	330c      	adds	r3, #12
 8001c1e:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8001c20:	4b52      	ldr	r3, [pc, #328]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	1fda      	subs	r2, r3, #7
 8001c26:	4b51      	ldr	r3, [pc, #324]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	da00      	bge.n	8001c32 <checkBrickHit+0x1382>
 8001c30:	3307      	adds	r3, #7
 8001c32:	10db      	asrs	r3, r3, #3
 8001c34:	4618      	mov	r0, r3
 8001c36:	494e      	ldr	r1, [pc, #312]	; (8001d70 <checkBrickHit+0x14c0>)
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4403      	add	r3, r0
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	440b      	add	r3, r1
 8001c46:	330c      	adds	r3, #12
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	dc2a      	bgt.n	8001ca4 <checkBrickHit+0x13f4>
                    bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible = 0;
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	1fda      	subs	r2, r3, #7
 8001c54:	4b45      	ldr	r3, [pc, #276]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	da00      	bge.n	8001c60 <checkBrickHit+0x13b0>
 8001c5e:	3307      	adds	r3, #7
 8001c60:	10db      	asrs	r3, r3, #3
 8001c62:	4618      	mov	r0, r3
 8001c64:	4942      	ldr	r1, [pc, #264]	; (8001d70 <checkBrickHit+0x14c0>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4403      	add	r3, r0
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	440b      	add	r3, r1
 8001c74:	3308      	adds	r3, #8
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
                    points++;
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <checkBrickHit+0x14c8>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <checkBrickHit+0x14c8>)
 8001c84:	701a      	strb	r2, [r3, #0]
                    ////QD << "score:" << points;
                    dropPowerUp((ball.x - 1)/8, ball.y + 1 - 8);
 8001c86:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da00      	bge.n	8001c92 <checkBrickHit+0x13e2>
 8001c90:	3307      	adds	r3, #7
 8001c92:	10db      	asrs	r3, r3, #3
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	3b07      	subs	r3, #7
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f000 f86c 	bl	8001d7c <dropPowerUp>
                }
                ball.dir = NE;
 8001ca4:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <checkBrickHit+0x14bc>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	721a      	strb	r2, [r3, #8]
                Displ_FillArea(bricks[ball.y + 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y + 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness]);
 8001caa:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <checkBrickHit+0x14bc>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	1fda      	subs	r2, r3, #7
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <checkBrickHit+0x14bc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	da00      	bge.n	8001cbc <checkBrickHit+0x140c>
 8001cba:	3307      	adds	r3, #7
 8001cbc:	10db      	asrs	r3, r3, #3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	492b      	ldr	r1, [pc, #172]	; (8001d70 <checkBrickHit+0x14c0>)
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4403      	add	r3, r0
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	440b      	add	r3, r1
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	b298      	uxth	r0, r3
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <checkBrickHit+0x14bc>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	1fda      	subs	r2, r3, #7
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <checkBrickHit+0x14bc>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	da00      	bge.n	8001cea <checkBrickHit+0x143a>
 8001ce8:	3307      	adds	r3, #7
 8001cea:	10db      	asrs	r3, r3, #3
 8001cec:	461c      	mov	r4, r3
 8001cee:	4920      	ldr	r1, [pc, #128]	; (8001d70 <checkBrickHit+0x14c0>)
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4423      	add	r3, r4
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3304      	adds	r3, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	b299      	uxth	r1, r3
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <checkBrickHit+0x14bc>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	1fda      	subs	r2, r3, #7
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <checkBrickHit+0x14bc>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da00      	bge.n	8001d1a <checkBrickHit+0x146a>
 8001d18:	3307      	adds	r3, #7
 8001d1a:	10db      	asrs	r3, r3, #3
 8001d1c:	461d      	mov	r5, r3
 8001d1e:	4c14      	ldr	r4, [pc, #80]	; (8001d70 <checkBrickHit+0x14c0>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	442b      	add	r3, r5
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4423      	add	r3, r4
 8001d2e:	330c      	adds	r3, #12
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <checkBrickHit+0x14c4>)
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f002 ff82 	bl	8004c48 <Displ_FillArea>
            }
        }
        break;
 8001d44:	e00c      	b.n	8001d60 <checkBrickHit+0x14b0>
    case still:
        break;
    default:
        //////QD << "You shouldn't be here";
        ball.dir = ball.dir;
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <checkBrickHit+0x14bc>)
 8001d48:	7a1a      	ldrb	r2, [r3, #8]
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <checkBrickHit+0x14bc>)
 8001d4c:	721a      	strb	r2, [r3, #8]
    }
}
 8001d4e:	e008      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d50:	bf00      	nop
 8001d52:	e006      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d54:	bf00      	nop
 8001d56:	e004      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d58:	bf00      	nop
 8001d5a:	e002      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d5c:	bf00      	nop
 8001d5e:	e000      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d60:	bf00      	nop
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000034 	.word	0x20000034
 8001d70:	200000e8 	.word	0x200000e8
 8001d74:	20000004 	.word	0x20000004
 8001d78:	20001ee8 	.word	0x20001ee8

08001d7c <dropPowerUp>:

void dropPowerUp(int x, int y) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    uint8_t dropChance = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
    if (guardian == 0) {
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <dropPowerUp+0x70>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d114      	bne.n	8001dbc <dropPowerUp+0x40>
        srand(HAL_GetTick());
 8001d92:	f003 fd79 	bl	8005888 <HAL_GetTick>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f008 f84d 	bl	8009e38 <srand>
        dropChance = rand() % 100;
 8001d9e:	f008 f879 	bl	8009e94 <rand>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <dropPowerUp+0x74>)
 8001da6:	fb82 1203 	smull	r1, r2, r2, r3
 8001daa:	1151      	asrs	r1, r2, #5
 8001dac:	17da      	asrs	r2, r3, #31
 8001dae:	1a8a      	subs	r2, r1, r2
 8001db0:	2164      	movs	r1, #100	; 0x64
 8001db2:	fb01 f202 	mul.w	r2, r1, r2
 8001db6:	1a9a      	subs	r2, r3, r2
 8001db8:	4613      	mov	r3, r2
 8001dba:	73fb      	strb	r3, [r7, #15]
    }

    if (dropChance <= 10 && dropChance > 0) {
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2b0a      	cmp	r3, #10
 8001dc0:	d805      	bhi.n	8001dce <dropPowerUp+0x52>
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <dropPowerUp+0x52>
        guardian = 1;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <dropPowerUp+0x70>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
        //////QD << "A power up just dropped from brick at x =" << x << "y =" << y;
    }

    if (dropChance <= 15 && dropChance > 10) {
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d806      	bhi.n	8001de2 <dropPowerUp+0x66>
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	2b0a      	cmp	r3, #10
 8001dd8:	d903      	bls.n	8001de2 <dropPowerUp+0x66>
        //////QD << "test";
        explodeBricks(x, y);
 8001dda:	6839      	ldr	r1, [r7, #0]
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8cb 	bl	8001f78 <explodeBricks>
        //////QD << "An explosion just happened at x =" << x << "y =" << y;
    }
}
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20001eea 	.word	0x20001eea
 8001df0:	51eb851f 	.word	0x51eb851f

08001df4 <printScreen>:

void printScreen() {
 8001df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df6:	b08b      	sub	sp, #44	; 0x2c
 8001df8:	af06      	add	r7, sp, #24
    for (int i = 0; i < lives1; i++) {
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	e00f      	b.n	8001e20 <printScreen+0x2c>
        Displ_FillArea(SCREEN_WIDTH*4 - 8 - (i*8), 4, 4, 4, D_BLUE);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	b298      	uxth	r0, r3
 8001e0c:	2318      	movs	r3, #24
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2304      	movs	r3, #4
 8001e12:	2204      	movs	r2, #4
 8001e14:	2104      	movs	r1, #4
 8001e16:	f002 ff17 	bl	8004c48 <Displ_FillArea>
    for (int i = 0; i < lives1; i++) {
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <printScreen+0x100>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	dbe9      	blt.n	8001e00 <printScreen+0xc>
    }

    if (guardian == 1) {
 8001e2c:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <printScreen+0x104>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d10f      	bne.n	8001e54 <printScreen+0x60>
        Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, GREY);
 8001e34:	4b31      	ldr	r3, [pc, #196]	; (8001efc <printScreen+0x108>)
 8001e36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	b299      	uxth	r1, r3
 8001e42:	f249 6396 	movw	r3, #38550	; 0x9696
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2304      	movs	r3, #4
 8001e4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f002 fefa 	bl	8004c48 <Displ_FillArea>
//                    game_screen[i][y] = ENC_RED;
//                }
//            }
//        }
//    }
    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, RED);
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <printScreen+0x108>)
 8001e56:	f993 3000 	ldrsb.w	r3, [r3]
 8001e5a:	3b19      	subs	r3, #25
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	b298      	uxth	r0, r3
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <printScreen+0x108>)
 8001e64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	b299      	uxth	r1, r3
 8001e6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2304      	movs	r3, #4
 8001e76:	22c8      	movs	r2, #200	; 0xc8
 8001e78:	f002 fee6 	bl	8004c48 <Displ_FillArea>
//
//    game_screen[ball.x][ball.y] = ENC_BLUE;
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_BLUE);
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <printScreen+0x10c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	b298      	uxth	r0, r3
 8001e86:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <printScreen+0x10c>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	b299      	uxth	r1, r3
 8001e90:	2318      	movs	r3, #24
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2304      	movs	r3, #4
 8001e96:	2204      	movs	r2, #4
 8001e98:	f002 fed6 	bl	8004c48 <Displ_FillArea>

    char str[12];
    snprintf(str, 12, "%u", points);
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <printScreen+0x110>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4638      	mov	r0, r7
 8001ea2:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <printScreen+0x114>)
 8001ea4:	210c      	movs	r1, #12
 8001ea6:	f008 f833 	bl	8009f10 <sniprintf>
    Displ_WString(score.x*4, score.y, str, Font16, 1, WHITE, D_GREEN);
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <printScreen+0x118>)
 8001eac:	f993 3000 	ldrsb.w	r3, [r3]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	b29c      	uxth	r4, r3
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <printScreen+0x118>)
 8001eb8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ebc:	b29d      	uxth	r5, r3
 8001ebe:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <printScreen+0x11c>)
 8001ec0:	463e      	mov	r6, r7
 8001ec2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001ec6:	9204      	str	r2, [sp, #16]
 8001ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ecc:	9203      	str	r2, [sp, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	9202      	str	r2, [sp, #8]
 8001ed2:	46ec      	mov	ip, sp
 8001ed4:	1d1a      	adds	r2, r3, #4
 8001ed6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001eda:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4632      	mov	r2, r6
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f003 fc0b 	bl	8005700 <Displ_WString>
    //displayText(game_screen, str, score.x, score.y, WHITE);
    //snprintf(str, 12, "%u", highScore);
    //displayText(game_screen, str, highScorePoint.x, highScorePoint.y, WHITE);
}
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000002 	.word	0x20000002
 8001ef8:	20001eea 	.word	0x20001eea
 8001efc:	20000030 	.word	0x20000030
 8001f00:	20000034 	.word	0x20000034
 8001f04:	20001ee8 	.word	0x20001ee8
 8001f08:	0800b2fc 	.word	0x0800b2fc
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000014 	.word	0x20000014

08001f14 <checkGuardianTimer>:

void checkGuardianTimer() {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af02      	add	r7, sp, #8
    if (guardian == 1) {
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <checkGuardianTimer+0x58>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d120      	bne.n	8001f64 <checkGuardianTimer+0x50>
        if (guardianTimer <= 0) {
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <checkGuardianTimer+0x5c>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d116      	bne.n	8001f58 <checkGuardianTimer+0x44>
            guardian = 0;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <checkGuardianTimer+0x58>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
            guardianTimer = 100;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <checkGuardianTimer+0x5c>)
 8001f32:	2264      	movs	r2, #100	; 0x64
 8001f34:	701a      	strb	r2, [r3, #0]
            Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, D_GREEN);
 8001f36:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <checkGuardianTimer+0x60>)
 8001f38:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	b299      	uxth	r1, r3
 8001f44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f50:	2000      	movs	r0, #0
 8001f52:	f002 fe79 	bl	8004c48 <Displ_FillArea>
        } else {
            guardianTimer--;
        }
    }
}
 8001f56:	e005      	b.n	8001f64 <checkGuardianTimer+0x50>
            guardianTimer--;
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <checkGuardianTimer+0x5c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <checkGuardianTimer+0x5c>)
 8001f62:	701a      	strb	r2, [r3, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20001eea 	.word	0x20001eea
 8001f70:	20000003 	.word	0x20000003
 8001f74:	20000030 	.word	0x20000030

08001f78 <explodeBricks>:

void explodeBricks(int x, int y) {
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    int ymin = y - 1;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
    int xmin = x - 1;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	61bb      	str	r3, [r7, #24]
    int ymax = y + 1;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
    int xmax = x + 1;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3301      	adds	r3, #1
 8001f98:	613b      	str	r3, [r7, #16]
    if(y == 0) {
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <explodeBricks+0x2c>
        ymin = y;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	61fb      	str	r3, [r7, #28]
    }
    if(y == MAX_BRICK_LINES) {
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b30      	cmp	r3, #48	; 0x30
 8001fa8:	d101      	bne.n	8001fae <explodeBricks+0x36>
        ymax = y;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	617b      	str	r3, [r7, #20]
    }
    if(x == 0) {
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <explodeBricks+0x40>
        xmin = x;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	61bb      	str	r3, [r7, #24]
    }
    if(x == 10) {
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b0a      	cmp	r3, #10
 8001fbc:	d101      	bne.n	8001fc2 <explodeBricks+0x4a>
        xmax = x;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
    }


    for(int i = ymin; i <= ymax; i++) {
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e03a      	b.n	800203e <explodeBricks+0xc6>
        for(int j = xmin; j <= xmax; j++) {
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	e030      	b.n	8002030 <explodeBricks+0xb8>
            if(bricks[i][j].visible == 1) {
 8001fce:	4921      	ldr	r1, [pc, #132]	; (8002054 <explodeBricks+0xdc>)
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4413      	add	r3, r2
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3308      	adds	r3, #8
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d11f      	bne.n	800202a <explodeBricks+0xb2>
                bricks[i][j].toughness = 0;
 8001fea:	491a      	ldr	r1, [pc, #104]	; (8002054 <explodeBricks+0xdc>)
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	440b      	add	r3, r1
 8001ffe:	330c      	adds	r3, #12
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
                bricks[i][j].visible = 0;
 8002004:	4913      	ldr	r1, [pc, #76]	; (8002054 <explodeBricks+0xdc>)
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	4413      	add	r3, r2
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	440b      	add	r3, r1
 8002018:	3308      	adds	r3, #8
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
                points++;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <explodeBricks+0xe0>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <explodeBricks+0xe0>)
 8002028:	701a      	strb	r2, [r3, #0]
        for(int j = xmin; j <= xmax; j++) {
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3301      	adds	r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	ddca      	ble.n	8001fce <explodeBricks+0x56>
    for(int i = ymin; i <= ymax; i++) {
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3301      	adds	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	429a      	cmp	r2, r3
 8002044:	ddc0      	ble.n	8001fc8 <explodeBricks+0x50>
            }
        }
    }
}
 8002046:	bf00      	nop
 8002048:	bf00      	nop
 800204a:	3724      	adds	r7, #36	; 0x24
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	200000e8 	.word	0x200000e8
 8002058:	20001ee8 	.word	0x20001ee8

0800205c <setBrickToughness>:

int setBrickToughness(void) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
    int toughnessPercent;
    int toughness = 1;
 8002062:	2301      	movs	r3, #1
 8002064:	607b      	str	r3, [r7, #4]

    toughnessPercent = rand() % (100) + 1;
 8002066:	f007 ff15 	bl	8009e94 <rand>
 800206a:	4602      	mov	r2, r0
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <setBrickToughness+0x68>)
 800206e:	fb83 1302 	smull	r1, r3, r3, r2
 8002072:	1159      	asrs	r1, r3, #5
 8002074:	17d3      	asrs	r3, r2, #31
 8002076:	1acb      	subs	r3, r1, r3
 8002078:	2164      	movs	r1, #100	; 0x64
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	3301      	adds	r3, #1
 8002082:	603b      	str	r3, [r7, #0]

    if(toughnessPercent > 0 && toughnessPercent <= 60) {
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	dd05      	ble.n	8002096 <setBrickToughness+0x3a>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b3c      	cmp	r3, #60	; 0x3c
 800208e:	dc02      	bgt.n	8002096 <setBrickToughness+0x3a>
        toughness = 1;
 8002090:	2301      	movs	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	e010      	b.n	80020b8 <setBrickToughness+0x5c>
    } else if(toughnessPercent > 60 && toughnessPercent < 90) {
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b3c      	cmp	r3, #60	; 0x3c
 800209a:	dd05      	ble.n	80020a8 <setBrickToughness+0x4c>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	2b59      	cmp	r3, #89	; 0x59
 80020a0:	dc02      	bgt.n	80020a8 <setBrickToughness+0x4c>
        toughness = 2;
 80020a2:	2302      	movs	r3, #2
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	e007      	b.n	80020b8 <setBrickToughness+0x5c>
    } else if(toughnessPercent > 90 && toughnessPercent < 100) {
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b5a      	cmp	r3, #90	; 0x5a
 80020ac:	dd04      	ble.n	80020b8 <setBrickToughness+0x5c>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b63      	cmp	r3, #99	; 0x63
 80020b2:	dc01      	bgt.n	80020b8 <setBrickToughness+0x5c>
        toughness = 3;
 80020b4:	2303      	movs	r3, #3
 80020b6:	607b      	str	r3, [r7, #4]
    }

    return toughness;
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	51eb851f 	.word	0x51eb851f

080020c8 <drawBricks>:

void drawBricks() {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af02      	add	r7, sp, #8
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	e0b0      	b.n	8002236 <drawBricks+0x16e>
        for(int j = 0; j < 10; j++) {
 80020d4:	2300      	movs	r3, #0
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	e0a6      	b.n	8002228 <drawBricks+0x160>
            if(bricks[i][j].visible == 1) {
 80020da:	495b      	ldr	r1, [pc, #364]	; (8002248 <drawBricks+0x180>)
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	4413      	add	r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	440b      	add	r3, r1
 80020ee:	3308      	adds	r3, #8
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	f040 8095 	bne.w	8002222 <drawBricks+0x15a>
                if (bricks[i][j].toughness == 3) {
 80020f8:	4953      	ldr	r1, [pc, #332]	; (8002248 <drawBricks+0x180>)
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	4413      	add	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	440b      	add	r3, r1
 800210c:	330c      	adds	r3, #12
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d122      	bne.n	800215a <drawBricks+0x92>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, BLACK);
 8002114:	494c      	ldr	r1, [pc, #304]	; (8002248 <drawBricks+0x180>)
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4413      	add	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	440b      	add	r3, r1
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	b298      	uxth	r0, r3
 8002130:	4945      	ldr	r1, [pc, #276]	; (8002248 <drawBricks+0x180>)
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	4413      	add	r3, r2
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	440b      	add	r3, r1
 8002144:	3304      	adds	r3, #4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	b299      	uxth	r1, r3
 800214e:	2300      	movs	r3, #0
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2304      	movs	r3, #4
 8002154:	2220      	movs	r2, #32
 8002156:	f002 fd77 	bl	8004c48 <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 2) {
 800215a:	493b      	ldr	r1, [pc, #236]	; (8002248 <drawBricks+0x180>)
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	4413      	add	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	440b      	add	r3, r1
 800216e:	330c      	adds	r3, #12
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d123      	bne.n	80021be <drawBricks+0xf6>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, DARK_GREY);
 8002176:	4934      	ldr	r1, [pc, #208]	; (8002248 <drawBricks+0x180>)
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	4413      	add	r3, r2
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	440b      	add	r3, r1
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	b29b      	uxth	r3, r3
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	b298      	uxth	r0, r3
 8002192:	492d      	ldr	r1, [pc, #180]	; (8002248 <drawBricks+0x180>)
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	440b      	add	r3, r1
 80021a6:	3304      	adds	r3, #4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	b299      	uxth	r1, r3
 80021b0:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2304      	movs	r3, #4
 80021b8:	2220      	movs	r2, #32
 80021ba:	f002 fd45 	bl	8004c48 <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 1) {
 80021be:	4922      	ldr	r1, [pc, #136]	; (8002248 <drawBricks+0x180>)
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	440b      	add	r3, r1
 80021d2:	330c      	adds	r3, #12
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d123      	bne.n	8002222 <drawBricks+0x15a>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, GREY);
 80021da:	491b      	ldr	r1, [pc, #108]	; (8002248 <drawBricks+0x180>)
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	440b      	add	r3, r1
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	b298      	uxth	r0, r3
 80021f6:	4914      	ldr	r1, [pc, #80]	; (8002248 <drawBricks+0x180>)
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	4413      	add	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	440b      	add	r3, r1
 800220a:	3304      	adds	r3, #4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	b299      	uxth	r1, r3
 8002214:	f249 6396 	movw	r3, #38550	; 0x9696
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2304      	movs	r3, #4
 800221c:	2220      	movs	r2, #32
 800221e:	f002 fd13 	bl	8004c48 <Displ_FillArea>
        for(int j = 0; j < 10; j++) {
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b09      	cmp	r3, #9
 800222c:	f77f af55 	ble.w	80020da <drawBricks+0x12>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3301      	adds	r3, #1
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b2f      	cmp	r3, #47	; 0x2f
 800223a:	f77f af4b 	ble.w	80020d4 <drawBricks+0xc>
                }
            }
        }
    }
}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200000e8 	.word	0x200000e8

0800224c <init>:
ballPoint ball = {(SCREEN_WIDTH)/2, SCREEN_HEIGHT - 6, still};
uint8_t start = 0;
uint8_t delay = BRICK_SPEED;
directions ballDirection = NE;

void init (void) {
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
    choice = 0;
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <init+0x28>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
    if(gamechoice == 1){
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <init+0x2c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d102      	bne.n	8002264 <init+0x18>
        initSpaceInvaders();
 800225e:	f000 fff1 	bl	8003244 <initSpaceInvaders>
    }else if(gamechoice == 2){
        initBrickbreaker();
    }


}
 8002262:	e005      	b.n	8002270 <init+0x24>
    }else if(gamechoice == 2){
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <init+0x2c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d101      	bne.n	8002270 <init+0x24>
        initBrickbreaker();
 800226c:	f7fe f800 	bl	8000270 <initBrickbreaker>
}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20001eec 	.word	0x20001eec
 8002278:	20001eed 	.word	0x20001eed

0800227c <loop>:

int loop (int key) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af02      	add	r7, sp, #8
 8002282:	6078      	str	r0, [r7, #4]
    updateScreen();
 8002284:	f000 f9d8 	bl	8002638 <updateScreen>
    if (play == menu){
 8002288:	4b99      	ldr	r3, [pc, #612]	; (80024f0 <loop+0x274>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d104      	bne.n	800229a <loop+0x1e>
        max_choice = total_games;
 8002290:	4b98      	ldr	r3, [pc, #608]	; (80024f4 <loop+0x278>)
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	4b98      	ldr	r3, [pc, #608]	; (80024f8 <loop+0x27c>)
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e002      	b.n	80022a0 <loop+0x24>
    }else{
        max_choice = 1;
 800229a:	4b97      	ldr	r3, [pc, #604]	; (80024f8 <loop+0x27c>)
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
    }
    if(key == left) {
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d165      	bne.n	8002372 <loop+0xf6>
        if(play < paused){
 80022a6:	4b92      	ldr	r3, [pc, #584]	; (80024f0 <loop+0x274>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d850      	bhi.n	8002350 <loop+0xd4>
        	if(gamechoice == 1){
 80022ae:	4b93      	ldr	r3, [pc, #588]	; (80024fc <loop+0x280>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d104      	bne.n	80022c0 <loop+0x44>
        		moveSpaceship(-1);
 80022b6:	f04f 30ff 	mov.w	r0, #4294967295
 80022ba:	f001 fcc3 	bl	8003c44 <moveSpaceship>
 80022be:	e056      	b.n	800236e <loop+0xf2>
        	}else if(gamechoice == 2) {
 80022c0:	4b8e      	ldr	r3, [pc, #568]	; (80024fc <loop+0x280>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d152      	bne.n	800236e <loop+0xf2>
        	    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 80022c8:	4b8d      	ldr	r3, [pc, #564]	; (8002500 <loop+0x284>)
 80022ca:	f993 3000 	ldrsb.w	r3, [r3]
 80022ce:	3b19      	subs	r3, #25
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	b298      	uxth	r0, r3
 80022d6:	4b8a      	ldr	r3, [pc, #552]	; (8002500 <loop+0x284>)
 80022d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	b299      	uxth	r1, r3
 80022e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2304      	movs	r3, #4
 80022ea:	22c8      	movs	r2, #200	; 0xc8
 80022ec:	f002 fcac 	bl	8004c48 <Displ_FillArea>
                person.x--;
 80022f0:	4b83      	ldr	r3, [pc, #524]	; (8002500 <loop+0x284>)
 80022f2:	f993 3000 	ldrsb.w	r3, [r3]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	b25a      	sxtb	r2, r3
 80022fe:	4b80      	ldr	r3, [pc, #512]	; (8002500 <loop+0x284>)
 8002300:	701a      	strb	r2, [r3, #0]
                if(person.x < BAR_SIZE/2) {
 8002302:	4b7f      	ldr	r3, [pc, #508]	; (8002500 <loop+0x284>)
 8002304:	f993 3000 	ldrsb.w	r3, [r3]
 8002308:	2b18      	cmp	r3, #24
 800230a:	dc03      	bgt.n	8002314 <loop+0x98>
                    person.x = (BAR_SIZE/2);
 800230c:	4b7c      	ldr	r3, [pc, #496]	; (8002500 <loop+0x284>)
 800230e:	2219      	movs	r2, #25
 8002310:	701a      	strb	r2, [r3, #0]
 8002312:	e02c      	b.n	800236e <loop+0xf2>
                } else {
                    if (ball.dir == still) {
 8002314:	4b7b      	ldr	r3, [pc, #492]	; (8002504 <loop+0x288>)
 8002316:	7a1b      	ldrb	r3, [r3, #8]
 8002318:	2b08      	cmp	r3, #8
 800231a:	d128      	bne.n	800236e <loop+0xf2>
                        Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 800231c:	4b79      	ldr	r3, [pc, #484]	; (8002504 <loop+0x288>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	b298      	uxth	r0, r3
 8002326:	4b77      	ldr	r3, [pc, #476]	; (8002504 <loop+0x288>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	b29b      	uxth	r3, r3
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	b299      	uxth	r1, r3
 8002330:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2304      	movs	r3, #4
 8002338:	2204      	movs	r2, #4
 800233a:	f002 fc85 	bl	8004c48 <Displ_FillArea>
                        ball.x--;
 800233e:	4b71      	ldr	r3, [pc, #452]	; (8002504 <loop+0x288>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3b01      	subs	r3, #1
 8002344:	4a6f      	ldr	r2, [pc, #444]	; (8002504 <loop+0x288>)
 8002346:	6013      	str	r3, [r2, #0]
                        ballDirection = NW;
 8002348:	4b6f      	ldr	r3, [pc, #444]	; (8002508 <loop+0x28c>)
 800234a:	2207      	movs	r2, #7
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e00e      	b.n	800236e <loop+0xf2>
                    }
                }
            }
        }else{
            if (choice == 0){
 8002350:	4b6e      	ldr	r3, [pc, #440]	; (800250c <loop+0x290>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d104      	bne.n	8002362 <loop+0xe6>
                choice = max_choice;
 8002358:	4b67      	ldr	r3, [pc, #412]	; (80024f8 <loop+0x27c>)
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	4b6b      	ldr	r3, [pc, #428]	; (800250c <loop+0x290>)
 800235e:	701a      	strb	r2, [r3, #0]
 8002360:	e005      	b.n	800236e <loop+0xf2>
            }else{
                choice--;
 8002362:	4b6a      	ldr	r3, [pc, #424]	; (800250c <loop+0x290>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	3b01      	subs	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b68      	ldr	r3, [pc, #416]	; (800250c <loop+0x290>)
 800236c:	701a      	strb	r2, [r3, #0]
            }
            //QD << choice; // change to uart debug
        }
        key = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
    }
    if(key == right) {
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d165      	bne.n	8002444 <loop+0x1c8>
        if(play < paused){
 8002378:	4b5d      	ldr	r3, [pc, #372]	; (80024f0 <loop+0x274>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d84f      	bhi.n	8002420 <loop+0x1a4>
        	if(gamechoice == 1){
 8002380:	4b5e      	ldr	r3, [pc, #376]	; (80024fc <loop+0x280>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d103      	bne.n	8002390 <loop+0x114>
        		moveSpaceship(1);
 8002388:	2001      	movs	r0, #1
 800238a:	f001 fc5b 	bl	8003c44 <moveSpaceship>
 800238e:	e057      	b.n	8002440 <loop+0x1c4>
        	}else if (gamechoice == 2) {
 8002390:	4b5a      	ldr	r3, [pc, #360]	; (80024fc <loop+0x280>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d153      	bne.n	8002440 <loop+0x1c4>
        	    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 8002398:	4b59      	ldr	r3, [pc, #356]	; (8002500 <loop+0x284>)
 800239a:	f993 3000 	ldrsb.w	r3, [r3]
 800239e:	3b19      	subs	r3, #25
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	b298      	uxth	r0, r3
 80023a6:	4b56      	ldr	r3, [pc, #344]	; (8002500 <loop+0x284>)
 80023a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	b299      	uxth	r1, r3
 80023b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2304      	movs	r3, #4
 80023ba:	22c8      	movs	r2, #200	; 0xc8
 80023bc:	f002 fc44 	bl	8004c48 <Displ_FillArea>
                person.x++;
 80023c0:	4b4f      	ldr	r3, [pc, #316]	; (8002500 <loop+0x284>)
 80023c2:	f993 3000 	ldrsb.w	r3, [r3]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	b25a      	sxtb	r2, r3
 80023ce:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <loop+0x284>)
 80023d0:	701a      	strb	r2, [r3, #0]
                if(person.x > SCREEN_WIDTH - (BAR_SIZE/2) - 1) {
 80023d2:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <loop+0x284>)
 80023d4:	f993 3000 	ldrsb.w	r3, [r3]
 80023d8:	2b36      	cmp	r3, #54	; 0x36
 80023da:	dd03      	ble.n	80023e4 <loop+0x168>
                    person.x = SCREEN_WIDTH - (BAR_SIZE/2) - 1;
 80023dc:	4b48      	ldr	r3, [pc, #288]	; (8002500 <loop+0x284>)
 80023de:	2236      	movs	r2, #54	; 0x36
 80023e0:	701a      	strb	r2, [r3, #0]
 80023e2:	e02d      	b.n	8002440 <loop+0x1c4>
                } else {
                    if (ball.dir == still) {
 80023e4:	4b47      	ldr	r3, [pc, #284]	; (8002504 <loop+0x288>)
 80023e6:	7a1b      	ldrb	r3, [r3, #8]
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d129      	bne.n	8002440 <loop+0x1c4>
                        Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80023ec:	4b45      	ldr	r3, [pc, #276]	; (8002504 <loop+0x288>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	b298      	uxth	r0, r3
 80023f6:	4b43      	ldr	r3, [pc, #268]	; (8002504 <loop+0x288>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	b299      	uxth	r1, r3
 8002400:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2304      	movs	r3, #4
 8002408:	2204      	movs	r2, #4
 800240a:	f002 fc1d 	bl	8004c48 <Displ_FillArea>
                        ball.x++;
 800240e:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <loop+0x288>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3301      	adds	r3, #1
 8002414:	4a3b      	ldr	r2, [pc, #236]	; (8002504 <loop+0x288>)
 8002416:	6013      	str	r3, [r2, #0]
                        ballDirection = NE;
 8002418:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <loop+0x28c>)
 800241a:	2201      	movs	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
 800241e:	e00f      	b.n	8002440 <loop+0x1c4>
                    }
                }

            }
        }else{
            if (choice == max_choice){
 8002420:	4b3a      	ldr	r3, [pc, #232]	; (800250c <loop+0x290>)
 8002422:	781a      	ldrb	r2, [r3, #0]
 8002424:	4b34      	ldr	r3, [pc, #208]	; (80024f8 <loop+0x27c>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d103      	bne.n	8002434 <loop+0x1b8>
                choice = 0;
 800242c:	4b37      	ldr	r3, [pc, #220]	; (800250c <loop+0x290>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	e005      	b.n	8002440 <loop+0x1c4>
            }else{
                choice++;
 8002434:	4b35      	ldr	r3, [pc, #212]	; (800250c <loop+0x290>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	3301      	adds	r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b33      	ldr	r3, [pc, #204]	; (800250c <loop+0x290>)
 800243e:	701a      	strb	r2, [r3, #0]
            }
        }
        key = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	607b      	str	r3, [r7, #4]
    }
    if(key == down){
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b04      	cmp	r3, #4
 8002448:	f040 808c 	bne.w	8002564 <loop+0x2e8>
        if (play == notPlay){
 800244c:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <loop+0x274>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10c      	bne.n	800246e <loop+0x1f2>
        	Displ_FillArea(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, 140, 20, DARK_GREY);
 8002454:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2314      	movs	r3, #20
 800245c:	228c      	movs	r2, #140	; 0x8c
 800245e:	2178      	movs	r1, #120	; 0x78
 8002460:	205a      	movs	r0, #90	; 0x5a
 8002462:	f002 fbf1 	bl	8004c48 <Displ_FillArea>
            play = inPlay;
 8002466:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <loop+0x274>)
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
 800246c:	e078      	b.n	8002560 <loop+0x2e4>
        }else if(play == inPlay) {
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <loop+0x274>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d114      	bne.n	80024a0 <loop+0x224>
            if (ball.dir == still) {
 8002476:	4b23      	ldr	r3, [pc, #140]	; (8002504 <loop+0x288>)
 8002478:	7a1b      	ldrb	r3, [r3, #8]
 800247a:	2b08      	cmp	r3, #8
 800247c:	d108      	bne.n	8002490 <loop+0x214>
                ball.dir = ballDirection;
 800247e:	4b22      	ldr	r3, [pc, #136]	; (8002508 <loop+0x28c>)
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <loop+0x288>)
 8002484:	721a      	strb	r2, [r3, #8]
                start = 1;
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <loop+0x294>)
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
                playBall();
 800248c:	f7fd ff8e 	bl	80003ac <playBall>
            }
            if(!hit){                  //not sure if this was yours or I added for fixing bug
 8002490:	4b20      	ldr	r3, [pc, #128]	; (8002514 <loop+0x298>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d163      	bne.n	8002560 <loop+0x2e4>
                spawnBullet(0);
 8002498:	2000      	movs	r0, #0
 800249a:	f001 f823 	bl	80034e4 <spawnBullet>
 800249e:	e05f      	b.n	8002560 <loop+0x2e4>
            }
        }else if(play == paused){
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <loop+0x274>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d118      	bne.n	80024da <loop+0x25e>
            if(choice == 0){
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <loop+0x290>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <loop+0x240>
                play = menu;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <loop+0x274>)
 80024b2:	2203      	movs	r2, #3
 80024b4:	701a      	strb	r2, [r3, #0]
                init();
 80024b6:	f7ff fec9 	bl	800224c <init>
 80024ba:	e051      	b.n	8002560 <loop+0x2e4>
            }
            else if(choice == 1){
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <loop+0x290>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d106      	bne.n	80024d2 <loop+0x256>
            	displayPauseMenu(1);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f000 fcbf 	bl	8002e48 <displayPauseMenu>
                play = inPlay;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <loop+0x274>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
 80024d0:	e046      	b.n	8002560 <loop+0x2e4>
            }else{
                displayPauseMenu(0);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f000 fcb8 	bl	8002e48 <displayPauseMenu>
 80024d8:	e042      	b.n	8002560 <loop+0x2e4>
            }

        }else if(play == menu){
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <loop+0x274>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d137      	bne.n	8002552 <loop+0x2d6>
            if(choice == 0){
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <loop+0x290>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d116      	bne.n	8002518 <loop+0x29c>
                toggle_multiplayer();
 80024ea:	f000 fe9b 	bl	8003224 <toggle_multiplayer>
 80024ee:	e037      	b.n	8002560 <loop+0x2e4>
 80024f0:	2000004b 	.word	0x2000004b
 80024f4:	20000044 	.word	0x20000044
 80024f8:	2000002d 	.word	0x2000002d
 80024fc:	20001eed 	.word	0x20001eed
 8002500:	20000030 	.word	0x20000030
 8002504:	20000034 	.word	0x20000034
 8002508:	20000041 	.word	0x20000041
 800250c:	20001eec 	.word	0x20001eec
 8002510:	20001eee 	.word	0x20001eee
 8002514:	20001eeb 	.word	0x20001eeb
            }else if(choice == 1){
 8002518:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <loop+0x39c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d108      	bne.n	8002532 <loop+0x2b6>
                gamechoice = 2;
 8002520:	4b3e      	ldr	r3, [pc, #248]	; (800261c <loop+0x3a0>)
 8002522:	2202      	movs	r2, #2
 8002524:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 8002526:	4b3e      	ldr	r3, [pc, #248]	; (8002620 <loop+0x3a4>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]

                init();
 800252c:	f7ff fe8e 	bl	800224c <init>
 8002530:	e016      	b.n	8002560 <loop+0x2e4>
            }
            else if(choice == 2){
 8002532:	4b39      	ldr	r3, [pc, #228]	; (8002618 <loop+0x39c>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d108      	bne.n	800254c <loop+0x2d0>
                gamechoice = 1;
 800253a:	4b38      	ldr	r3, [pc, #224]	; (800261c <loop+0x3a0>)
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 8002540:	4b37      	ldr	r3, [pc, #220]	; (8002620 <loop+0x3a4>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]

                init();
 8002546:	f7ff fe81 	bl	800224c <init>
 800254a:	e009      	b.n	8002560 <loop+0x2e4>
            }else{
                displayMenu();
 800254c:	f000 fcde 	bl	8002f0c <displayMenu>
 8002550:	e006      	b.n	8002560 <loop+0x2e4>
            }
        }
        else if(!hit){
 8002552:	4b34      	ldr	r3, [pc, #208]	; (8002624 <loop+0x3a8>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <loop+0x2e4>
            spawnBullet(0);
 800255a:	2000      	movs	r0, #0
 800255c:	f000 ffc2 	bl	80034e4 <spawnBullet>
        }
        key = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
    }
    if(key == up && play < 2){
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d10e      	bne.n	8002588 <loop+0x30c>
 800256a:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <loop+0x3a4>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d80a      	bhi.n	8002588 <loop+0x30c>
        play = paused;
 8002572:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <loop+0x3a4>)
 8002574:	2202      	movs	r2, #2
 8002576:	701a      	strb	r2, [r3, #0]
        choice = 1;
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <loop+0x39c>)
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
        last_choice_pause = 40;
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <loop+0x3ac>)
 8002580:	2228      	movs	r2, #40	; 0x28
 8002582:	701a      	strb	r2, [r3, #0]
        key = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	607b      	str	r3, [r7, #4]
    }

    if(play == inPlay){
 8002588:	4b25      	ldr	r3, [pc, #148]	; (8002620 <loop+0x3a4>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d132      	bne.n	80025f6 <loop+0x37a>
    	if(gamechoice == 1){
 8002590:	4b22      	ldr	r3, [pc, #136]	; (800261c <loop+0x3a0>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d10a      	bne.n	80025ae <loop+0x332>
    		spawnComet();
 8002598:	f000 ff18 	bl	80033cc <spawnComet>
    		delayBullet();
 800259c:	f001 fe06 	bl	80041ac <delayBullet>
    		moveComets();
 80025a0:	f001 f9d6 	bl	8003950 <moveComets>
    		moveBullets();
 80025a4:	f001 f850 	bl	8003648 <moveBullets>
    		moveEnemyBullets();
 80025a8:	f001 f90a 	bl	80037c0 <moveEnemyBullets>
 80025ac:	e021      	b.n	80025f2 <loop+0x376>
    	}else if(gamechoice == 2) {
 80025ae:	4b1b      	ldr	r3, [pc, #108]	; (800261c <loop+0x3a0>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d11d      	bne.n	80025f2 <loop+0x376>
            if (start == 1 && ball.dir != still) {
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <loop+0x3b0>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d115      	bne.n	80025ea <loop+0x36e>
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <loop+0x3b4>)
 80025c0:	7a1b      	ldrb	r3, [r3, #8]
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d011      	beq.n	80025ea <loop+0x36e>
                if (delay <= 0) {
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <loop+0x3b8>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d105      	bne.n	80025da <loop+0x35e>
                    lowerBricks();
 80025ce:	f7fe f8d3 	bl	8000778 <lowerBricks>
                    delay = BRICK_SPEED;
 80025d2:	4b18      	ldr	r3, [pc, #96]	; (8002634 <loop+0x3b8>)
 80025d4:	228c      	movs	r2, #140	; 0x8c
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e005      	b.n	80025e6 <loop+0x36a>
                } else {
                    delay--;
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <loop+0x3b8>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	3b01      	subs	r3, #1
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4b14      	ldr	r3, [pc, #80]	; (8002634 <loop+0x3b8>)
 80025e4:	701a      	strb	r2, [r3, #0]
                }
                checkGameOver();
 80025e6:	f7fe f92f 	bl	8000848 <checkGameOver>
            }
            checkGuardianTimer();
 80025ea:	f7ff fc93 	bl	8001f14 <checkGuardianTimer>
            playBall();
 80025ee:	f7fd fedd 	bl	80003ac <playBall>
        }

    	updateScreen();
 80025f2:	f000 f821 	bl	8002638 <updateScreen>
    }if(play < paused){
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <loop+0x3a4>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d807      	bhi.n	800260e <loop+0x392>
    	if(gamechoice == 1){
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <loop+0x3a0>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d103      	bne.n	800260e <loop+0x392>
    		spawnStar();
 8002606:	f000 ffc1 	bl	800358c <spawnStar>
    		moveStars();
 800260a:	f001 fab9 	bl	8003b80 <moveStars>
    	}

    }
    return key;
 800260e:	687b      	ldr	r3, [r7, #4]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20001eec 	.word	0x20001eec
 800261c:	20001eed 	.word	0x20001eed
 8002620:	2000004b 	.word	0x2000004b
 8002624:	20001eeb 	.word	0x20001eeb
 8002628:	2000002c 	.word	0x2000002c
 800262c:	20001eee 	.word	0x20001eee
 8002630:	20000034 	.word	0x20000034
 8002634:	20000040 	.word	0x20000040

08002638 <updateScreen>:


void updateScreen()
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b087      	sub	sp, #28
 800263c:	af06      	add	r7, sp, #24
    if (play == menu){
 800263e:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <updateScreen+0x8c>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d102      	bne.n	800264c <updateScreen+0x14>
    	displayMenu();
 8002646:	f000 fc61 	bl	8002f0c <displayMenu>
        return;
 800264a:	e037      	b.n	80026bc <updateScreen+0x84>
    }

    if (gamechoice == 1){
 800264c:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <updateScreen+0x90>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d10c      	bne.n	800266e <updateScreen+0x36>
        //hit
        if (hit > 0) {
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <updateScreen+0x94>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <updateScreen+0x28>
            spaceShipHitColorToggle();
 800265c:	f001 fd5c 	bl	8004118 <spaceShipHitColorToggle>
        }

        //spaceship
        displaySpaceShip(RED);
 8002660:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002664:	f001 fccc 	bl	8004000 <displaySpaceShip>

        //lives
        displayLives();
 8002668:	f001 fd0c 	bl	8004084 <displayLives>
 800266c:	e005      	b.n	800267a <updateScreen+0x42>
    }else if(gamechoice == 2) {
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <updateScreen+0x90>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d101      	bne.n	800267a <updateScreen+0x42>
        printScreen();
 8002676:	f7ff fbbd 	bl	8001df4 <printScreen>
    }

    //start
    if(!play){
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <updateScreen+0x8c>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d115      	bne.n	80026ae <updateScreen+0x76>
    	Displ_WString(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, "START", Font20, 2, WHITE, DARK_GREY);
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <updateScreen+0x98>)
 8002684:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8002688:	9204      	str	r2, [sp, #16]
 800268a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268e:	9203      	str	r2, [sp, #12]
 8002690:	2202      	movs	r2, #2
 8002692:	9202      	str	r2, [sp, #8]
 8002694:	466c      	mov	r4, sp
 8002696:	1d1a      	adds	r2, r3, #4
 8002698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800269c:	e884 0003 	stmia.w	r4, {r0, r1}
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <updateScreen+0x9c>)
 80026a4:	2178      	movs	r1, #120	; 0x78
 80026a6:	205a      	movs	r0, #90	; 0x5a
 80026a8:	f003 f82a 	bl	8005700 <Displ_WString>
 80026ac:	e006      	b.n	80026bc <updateScreen+0x84>
    }
    else if(play == paused){
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <updateScreen+0x8c>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d102      	bne.n	80026bc <updateScreen+0x84>
    	displayPauseMenu(0);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f000 fbc6 	bl	8002e48 <displayPauseMenu>
    }
}
 80026bc:	3704      	adds	r7, #4
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd90      	pop	{r4, r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000004b 	.word	0x2000004b
 80026c8:	20001eed 	.word	0x20001eed
 80026cc:	20001eeb 	.word	0x20001eeb
 80026d0:	20000020 	.word	0x20000020
 80026d4:	0800b300 	.word	0x0800b300

080026d8 <_write>:
int16_t angle = 90;
uint32_t millis = 0;
uint32_t premillis = 0;
extern uint8_t game_screen[SCREEN_WIDTH][SCREEN_HEIGHT];

int _write(int file, char *ptr, int len) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d003      	beq.n	80026f2 <_write+0x1a>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d015      	beq.n	800271c <_write+0x44>
 80026f0:	e029      	b.n	8002746 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	481a      	ldr	r0, [pc, #104]	; (8002768 <_write+0x90>)
 80026fe:	f006 ff05 	bl	800950c <HAL_UART_Transmit>
 8002702:	4603      	mov	r3, r0
 8002704:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d024      	beq.n	8002756 <_write+0x7e>
			errno = EIO;
 800270c:	f007 fad4 	bl	8009cb8 <__errno>
 8002710:	4603      	mov	r3, r0
 8002712:	2205      	movs	r2, #5
 8002714:	601a      	str	r2, [r3, #0]
			return -1;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
 800271a:	e020      	b.n	800275e <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	b29a      	uxth	r2, r3
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	4810      	ldr	r0, [pc, #64]	; (8002768 <_write+0x90>)
 8002728:	f006 fef0 	bl	800950c <HAL_UART_Transmit>
 800272c:	4603      	mov	r3, r0
 800272e:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d011      	beq.n	800275a <_write+0x82>
			errno = EIO;
 8002736:	f007 fabf 	bl	8009cb8 <__errno>
 800273a:	4603      	mov	r3, r0
 800273c:	2205      	movs	r2, #5
 800273e:	601a      	str	r2, [r3, #0]
			return -1;
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
 8002744:	e00b      	b.n	800275e <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 8002746:	f007 fab7 	bl	8009cb8 <__errno>
 800274a:	4603      	mov	r3, r0
 800274c:	2209      	movs	r2, #9
 800274e:	601a      	str	r2, [r3, #0]
        return -1;
 8002750:	f04f 33ff 	mov.w	r3, #4294967295
 8002754:	e003      	b.n	800275e <_write+0x86>
        break;
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <_write+0x84>
        break;
 800275a:	bf00      	nop
    }
    return len;
 800275c:	687b      	ldr	r3, [r7, #4]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20002074 	.word	0x20002074

0800276c <read_MPU_mem>:

uint8_t read_MPU_mem(uint8_t reg_addr){
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af04      	add	r7, sp, #16
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	b29a      	uxth	r2, r3
 800277a:	2364      	movs	r3, #100	; 0x64
 800277c:	9302      	str	r3, [sp, #8]
 800277e:	2301      	movs	r3, #1
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	f107 030f 	add.w	r3, r7, #15
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2301      	movs	r3, #1
 800278a:	21d0      	movs	r1, #208	; 0xd0
 800278c:	4807      	ldr	r0, [pc, #28]	; (80027ac <read_MPU_mem+0x40>)
 800278e:	f003 feef 	bl	8006570 <HAL_I2C_Mem_Read>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <read_MPU_mem+0x30>
		return data;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	e003      	b.n	80027a4 <read_MPU_mem+0x38>
	}
	else{
		printf("mem not read\r\n");
 800279c:	4804      	ldr	r0, [pc, #16]	; (80027b0 <read_MPU_mem+0x44>)
 800279e:	f007 fb43 	bl	8009e28 <puts>
		return 0;
 80027a2:	2300      	movs	r3, #0
	}
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20001ef0 	.word	0x20001ef0
 80027b0:	0800b308 	.word	0x0800b308

080027b4 <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af04      	add	r7, sp, #16
 80027ba:	4603      	mov	r3, r0
 80027bc:	460a      	mov	r2, r1
 80027be:	71fb      	strb	r3, [r7, #7]
 80027c0:	4613      	mov	r3, r2
 80027c2:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	2364      	movs	r3, #100	; 0x64
 80027ca:	9302      	str	r3, [sp, #8]
 80027cc:	2301      	movs	r3, #1
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	1dbb      	adds	r3, r7, #6
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2301      	movs	r3, #1
 80027d6:	21d1      	movs	r1, #209	; 0xd1
 80027d8:	4806      	ldr	r0, [pc, #24]	; (80027f4 <write_MPU_mem+0x40>)
 80027da:	f003 fdb5 	bl	8006348 <HAL_I2C_Mem_Write>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 80027e4:	4804      	ldr	r0, [pc, #16]	; (80027f8 <write_MPU_mem+0x44>)
 80027e6:	f007 fb1f 	bl	8009e28 <puts>
    }
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20001ef0 	.word	0x20001ef0
 80027f8:	0800b318 	.word	0x0800b318

080027fc <read_y_accel>:

void read_y_accel(){
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
	uint8_t LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 8002802:	203e      	movs	r0, #62	; 0x3e
 8002804:	f7ff ffb2 	bl	800276c <read_MPU_mem>
 8002808:	4603      	mov	r3, r0
 800280a:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 800280c:	203d      	movs	r0, #61	; 0x3d
 800280e:	f7ff ffad 	bl	800276c <read_MPU_mem>
 8002812:	4603      	mov	r3, r0
 8002814:	71bb      	strb	r3, [r7, #6]

	ay = (((int16_t)MSByte << 8) | LSByte);
 8002816:	79bb      	ldrb	r3, [r7, #6]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	b21a      	sxth	r2, r3
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	b21b      	sxth	r3, r3
 8002820:	4313      	orrs	r3, r2
 8002822:	b21a      	sxth	r2, r3
 8002824:	4b02      	ldr	r3, [pc, #8]	; (8002830 <read_y_accel+0x34>)
 8002826:	801a      	strh	r2, [r3, #0]

}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200020fc 	.word	0x200020fc

08002834 <init_MPU>:

void init_MPU(){
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 8002838:	2100      	movs	r1, #0
 800283a:	206b      	movs	r0, #107	; 0x6b
 800283c:	f7ff ffba 	bl	80027b4 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 8002840:	2107      	movs	r1, #7
 8002842:	2019      	movs	r0, #25
 8002844:	f7ff ffb6 	bl	80027b4 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 8002848:	2100      	movs	r1, #0
 800284a:	201b      	movs	r0, #27
 800284c:	f7ff ffb2 	bl	80027b4 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 8002850:	2100      	movs	r1, #0
 8002852:	201c      	movs	r0, #28
 8002854:	f7ff ffae 	bl	80027b4 <write_MPU_mem>
}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}

0800285c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002862:	f002 ffb7 	bl	80057d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002866:	f000 f885 	bl	8002974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800286a:	f000 f9d5 	bl	8002c18 <MX_GPIO_Init>
  MX_DMA_Init();
 800286e:	f000 f9b5 	bl	8002bdc <MX_DMA_Init>
  MX_I2C2_Init();
 8002872:	f000 f8d5 	bl	8002a20 <MX_I2C2_Init>
  MX_SPI2_Init();
 8002876:	f000 f913 	bl	8002aa0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800287a:	f000 f94f 	bl	8002b1c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800287e:	f000 f97d 	bl	8002b7c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8002882:	2064      	movs	r0, #100	; 0x64
 8002884:	f003 f80c 	bl	80058a0 <HAL_Delay>
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 8002888:	2364      	movs	r3, #100	; 0x64
 800288a:	2201      	movs	r2, #1
 800288c:	21d0      	movs	r1, #208	; 0xd0
 800288e:	4830      	ldr	r0, [pc, #192]	; (8002950 <main+0xf4>)
 8002890:	f003 ff88 	bl	80067a4 <HAL_I2C_IsDeviceReady>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <main+0x4a>
	  printf("succesfully communicated\n\r");
 800289a:	482e      	ldr	r0, [pc, #184]	; (8002954 <main+0xf8>)
 800289c:	f007 fa3e 	bl	8009d1c <iprintf>
	  init_MPU();
 80028a0:	f7ff ffc8 	bl	8002834 <init_MPU>
 80028a4:	e002      	b.n	80028ac <main+0x50>
  }
  else{
	  printf("i2C not found\n\r");
 80028a6:	482c      	ldr	r0, [pc, #176]	; (8002958 <main+0xfc>)
 80028a8:	f007 fa38 	bl	8009d1c <iprintf>
  }

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 80028ac:	2001      	movs	r0, #1
 80028ae:	f002 f929 	bl	8004b04 <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 80028b2:	2000      	movs	r0, #0
 80028b4:	f002 fb7c 	bl	8004fb0 <Displ_CLS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(100);
 80028b8:	2064      	movs	r0, #100	; 0x64
 80028ba:	f002 fff1 	bl	80058a0 <HAL_Delay>

      read_y_accel();
 80028be:	f7ff ff9d 	bl	80027fc <read_y_accel>
      if (ay > 2000){
 80028c2:	4b26      	ldr	r3, [pc, #152]	; (800295c <main+0x100>)
 80028c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028cc:	dd07      	ble.n	80028de <main+0x82>
          if(x < 320 - 88){
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <main+0x104>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	2be7      	cmp	r3, #231	; 0xe7
 80028d4:	d810      	bhi.n	80028f8 <main+0x9c>
        	  key = right;
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <main+0x108>)
 80028d8:	2203      	movs	r2, #3
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e00c      	b.n	80028f8 <main+0x9c>
          }
      }
      else if (ay < -2000){
 80028de:	4b1f      	ldr	r3, [pc, #124]	; (800295c <main+0x100>)
 80028e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e4:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80028e8:	da06      	bge.n	80028f8 <main+0x9c>
          if(x > 0){
 80028ea:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <main+0x104>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <main+0x9c>
        	  key = left;
 80028f2:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <main+0x108>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
          }
      }
      else{
      }
      key = loop(key);
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <main+0x108>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fcbd 	bl	800227c <loop>
 8002902:	4603      	mov	r3, r0
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4b17      	ldr	r3, [pc, #92]	; (8002964 <main+0x108>)
 8002908:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ammo.in_play; i++){
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	e017      	b.n	8002940 <main+0xe4>
    	  printf("hello?\r\n");
 8002910:	4815      	ldr	r0, [pc, #84]	; (8002968 <main+0x10c>)
 8002912:	f007 fa89 	bl	8009e28 <puts>
    	  printf("ammo %d: x:%d, y:%d\r\n",i,ammo.bullet_ar[i].x,ammo.bullet_ar[i].y);
 8002916:	4a15      	ldr	r2, [pc, #84]	; (800296c <main+0x110>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002922:	4619      	mov	r1, r3
 8002924:	4a11      	ldr	r2, [pc, #68]	; (800296c <main+0x110>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002930:	460a      	mov	r2, r1
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	480e      	ldr	r0, [pc, #56]	; (8002970 <main+0x114>)
 8002936:	f007 f9f1 	bl	8009d1c <iprintf>
      for (int i = 0; i < ammo.in_play; i++){
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3301      	adds	r3, #1
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <main+0x110>)
 8002942:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002946:	461a      	mov	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4293      	cmp	r3, r2
 800294c:	dbe0      	blt.n	8002910 <main+0xb4>
      HAL_Delay(100);
 800294e:	e7b3      	b.n	80028b8 <main+0x5c>
 8002950:	20001ef0 	.word	0x20001ef0
 8002954:	0800b32c 	.word	0x0800b32c
 8002958:	0800b348 	.word	0x0800b348
 800295c:	200020fc 	.word	0x200020fc
 8002960:	20000042 	.word	0x20000042
 8002964:	20002104 	.word	0x20002104
 8002968:	0800b358 	.word	0x0800b358
 800296c:	20002108 	.word	0x20002108
 8002970:	0800b360 	.word	0x0800b360

08002974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b09c      	sub	sp, #112	; 0x70
 8002978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800297a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800297e:	2228      	movs	r2, #40	; 0x28
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f007 f9c2 	bl	8009d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	2230      	movs	r2, #48	; 0x30
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f007 f9b4 	bl	8009d0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029a4:	2302      	movs	r3, #2
 80029a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029a8:	2301      	movs	r3, #1
 80029aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029ac:	2310      	movs	r3, #16
 80029ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029b0:	2302      	movs	r3, #2
 80029b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029b4:	2300      	movs	r3, #0
 80029b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80029b8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80029bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 fb48 	bl	8007058 <HAL_RCC_OscConfig>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80029ce:	f000 fa35 	bl	8002e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029d2:	230f      	movs	r3, #15
 80029d4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029d6:	2302      	movs	r3, #2
 80029d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029da:	2300      	movs	r3, #0
 80029dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029e4:	2300      	movs	r3, #0
 80029e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029ec:	2102      	movs	r1, #2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f005 fb70 	bl	80080d4 <HAL_RCC_ClockConfig>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80029fa:	f000 fa1f 	bl	8002e3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80029fe:	2340      	movs	r3, #64	; 0x40
 8002a00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f005 fd99 	bl	8008540 <HAL_RCCEx_PeriphCLKConfig>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002a14:	f000 fa12 	bl	8002e3c <Error_Handler>
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3770      	adds	r7, #112	; 0x70
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a24:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <MX_I2C2_Init+0x74>)
 8002a26:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <MX_I2C2_Init+0x78>)
 8002a28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <MX_I2C2_Init+0x74>)
 8002a2c:	4a1b      	ldr	r2, [pc, #108]	; (8002a9c <MX_I2C2_Init+0x7c>)
 8002a2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <MX_I2C2_Init+0x74>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a36:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <MX_I2C2_Init+0x74>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a3c:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <MX_I2C2_Init+0x74>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002a42:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <MX_I2C2_Init+0x74>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <MX_I2C2_Init+0x74>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a4e:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <MX_I2C2_Init+0x74>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <MX_I2C2_Init+0x74>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a5a:	480e      	ldr	r0, [pc, #56]	; (8002a94 <MX_I2C2_Init+0x74>)
 8002a5c:	f003 fbe4 	bl	8006228 <HAL_I2C_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002a66:	f000 f9e9 	bl	8002e3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4809      	ldr	r0, [pc, #36]	; (8002a94 <MX_I2C2_Init+0x74>)
 8002a6e:	f004 fa5b 	bl	8006f28 <HAL_I2CEx_ConfigAnalogFilter>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002a78:	f000 f9e0 	bl	8002e3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4805      	ldr	r0, [pc, #20]	; (8002a94 <MX_I2C2_Init+0x74>)
 8002a80:	f004 fa9d 	bl	8006fbe <HAL_I2CEx_ConfigDigitalFilter>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002a8a:	f000 f9d7 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20001ef0 	.word	0x20001ef0
 8002a98:	40005800 	.word	0x40005800
 8002a9c:	2000090e 	.word	0x2000090e

08002aa0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <MX_SPI2_Init+0x78>)
 8002aa8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ab0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ab2:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ab8:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002aba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002abe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ac0:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ada:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002aee:	2207      	movs	r2, #7
 8002af0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002afa:	2208      	movs	r2, #8
 8002afc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002afe:	4805      	ldr	r0, [pc, #20]	; (8002b14 <MX_SPI2_Init+0x74>)
 8002b00:	f005 fea2 	bl	8008848 <HAL_SPI_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002b0a:	f000 f997 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20001f44 	.word	0x20001f44
 8002b18:	40003800 	.word	0x40003800

08002b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b20:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b22:	4a15      	ldr	r2, [pc, #84]	; (8002b78 <MX_USART2_UART_Init+0x5c>)
 8002b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b28:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b42:	220c      	movs	r2, #12
 8002b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b5e:	4805      	ldr	r0, [pc, #20]	; (8002b74 <MX_USART2_UART_Init+0x58>)
 8002b60:	f006 fc86 	bl	8009470 <HAL_UART_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002b6a:	f000 f967 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20001fec 	.word	0x20001fec
 8002b78:	40004400 	.word	0x40004400

08002b7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b80:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002b82:	4a15      	ldr	r2, [pc, #84]	; (8002bd8 <MX_USART3_UART_Init+0x5c>)
 8002b84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002b88:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002b8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002ba2:	220c      	movs	r2, #12
 8002ba4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bbe:	4805      	ldr	r0, [pc, #20]	; (8002bd4 <MX_USART3_UART_Init+0x58>)
 8002bc0:	f006 fc56 	bl	8009470 <HAL_UART_Init>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002bca:	f000 f937 	bl	8002e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20002074 	.word	0x20002074
 8002bd8:	40004800 	.word	0x40004800

08002bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <MX_DMA_Init+0x38>)
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <MX_DMA_Init+0x38>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6153      	str	r3, [r2, #20]
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <MX_DMA_Init+0x38>)
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	200f      	movs	r0, #15
 8002c00:	f002 ff4d 	bl	8005a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002c04:	200f      	movs	r0, #15
 8002c06:	f002 ff66 	bl	8005ad6 <HAL_NVIC_EnableIRQ>

}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000

08002c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
 8002c2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	4a45      	ldr	r2, [pc, #276]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c38:	6153      	str	r3, [r2, #20]
 8002c3a:	4b43      	ldr	r3, [pc, #268]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c46:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	4a3f      	ldr	r2, [pc, #252]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c50:	6153      	str	r3, [r2, #20]
 8002c52:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5e:	4b3a      	ldr	r3, [pc, #232]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	4a39      	ldr	r2, [pc, #228]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c68:	6153      	str	r3, [r2, #20]
 8002c6a:	4b37      	ldr	r3, [pc, #220]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	4b34      	ldr	r3, [pc, #208]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	4a33      	ldr	r2, [pc, #204]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c80:	6153      	str	r3, [r2, #20]
 8002c82:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <MX_GPIO_Init+0x130>)
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c94:	482d      	ldr	r0, [pc, #180]	; (8002d4c <MX_GPIO_Init+0x134>)
 8002c96:	f003 fa97 	bl	80061c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca4:	f003 fa90 	bl	80061c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8002ca8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4824      	ldr	r0, [pc, #144]	; (8002d50 <MX_GPIO_Init+0x138>)
 8002cc0:	f003 f8f8 	bl	8005eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cc8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cdc:	f003 f8ea 	bl	8005eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8002ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4814      	ldr	r0, [pc, #80]	; (8002d4c <MX_GPIO_Init+0x134>)
 8002cfa:	f003 f8db 	bl	8005eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 8002cfe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d04:	2301      	movs	r3, #1
 8002d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4619      	mov	r1, r3
 8002d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d1a:	f003 f8cb 	bl	8005eb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2100      	movs	r1, #0
 8002d22:	2006      	movs	r0, #6
 8002d24:	f002 febb 	bl	8005a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d28:	2006      	movs	r0, #6
 8002d2a:	f002 fed4 	bl	8005ad6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2100      	movs	r1, #0
 8002d32:	2028      	movs	r0, #40	; 0x28
 8002d34:	f002 feb3 	bl	8005a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d38:	2028      	movs	r0, #40	; 0x28
 8002d3a:	f002 fecc 	bl	8005ad6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d3e:	bf00      	nop
 8002d40:	3728      	adds	r7, #40	; 0x28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	48000400 	.word	0x48000400
 8002d50:	48000800 	.word	0x48000800

08002d54 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]
    // Get the current time
    uint32_t current_time = HAL_GetTick();
 8002d5e:	f002 fd93 	bl	8005888 <HAL_GetTick>
 8002d62:	60f8      	str	r0, [r7, #12]

    // Check if it's been long enough since the last debounce
    if (current_time - debounce_time > DEBOUNCE_DELAY) {
 8002d64:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <HAL_GPIO_EXTI_Callback+0xc8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b1e      	cmp	r3, #30
 8002d6e:	d951      	bls.n	8002e14 <HAL_GPIO_EXTI_Callback+0xc0>
        // Update debounce time
        debounce_time = current_time;
 8002d70:	4a2a      	ldr	r2, [pc, #168]	; (8002e1c <HAL_GPIO_EXTI_Callback+0xc8>)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6013      	str	r3, [r2, #0]
        // Your button handling code here
        printf("interrupt!\r\n");
 8002d76:	482a      	ldr	r0, [pc, #168]	; (8002e20 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002d78:	f007 f856 	bl	8009e28 <puts>
        if (GPIO_Pin == LEFT_Pin && HAL_GPIO_ReadPin(LEFT_GPIO_Port, GPIO_Pin) == 0) {
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d82:	d10e      	bne.n	8002da2 <HAL_GPIO_EXTI_Callback+0x4e>
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	4619      	mov	r1, r3
 8002d88:	4826      	ldr	r0, [pc, #152]	; (8002e24 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002d8a:	f003 fa05 	bl	8006198 <HAL_GPIO_ReadPin>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <HAL_GPIO_EXTI_Callback+0x4e>
            key = left;
 8002d94:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
            printf("left clicked\r\n");
 8002d9a:	4824      	ldr	r0, [pc, #144]	; (8002e2c <HAL_GPIO_EXTI_Callback+0xd8>)
 8002d9c:	f007 f844 	bl	8009e28 <puts>
 8002da0:	e038      	b.n	8002e14 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == TOP_Pin && HAL_GPIO_ReadPin(TOP_GPIO_Port, GPIO_Pin) == 0) {
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da8:	d10e      	bne.n	8002dc8 <HAL_GPIO_EXTI_Callback+0x74>
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	4619      	mov	r1, r3
 8002dae:	481d      	ldr	r0, [pc, #116]	; (8002e24 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002db0:	f003 f9f2 	bl	8006198 <HAL_GPIO_ReadPin>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_GPIO_EXTI_Callback+0x74>
            key = up;
 8002dba:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	701a      	strb	r2, [r3, #0]
            printf("up clicked\r\n");
 8002dc0:	481b      	ldr	r0, [pc, #108]	; (8002e30 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002dc2:	f007 f831 	bl	8009e28 <puts>
 8002dc6:	e025      	b.n	8002e14 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == RIGHT_Pin && HAL_GPIO_ReadPin(RIGHT_GPIO_Port, GPIO_Pin) == 0) {
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dce:	d10e      	bne.n	8002dee <HAL_GPIO_EXTI_Callback+0x9a>
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4813      	ldr	r0, [pc, #76]	; (8002e24 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002dd6:	f003 f9df 	bl	8006198 <HAL_GPIO_ReadPin>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d106      	bne.n	8002dee <HAL_GPIO_EXTI_Callback+0x9a>
            key = right;
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002de2:	2203      	movs	r2, #3
 8002de4:	701a      	strb	r2, [r3, #0]
            printf("right clicked\r\n");
 8002de6:	4813      	ldr	r0, [pc, #76]	; (8002e34 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002de8:	f007 f81e 	bl	8009e28 <puts>
 8002dec:	e012      	b.n	8002e14 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == MIDDLE_Pin && HAL_GPIO_ReadPin(MIDDLE_GPIO_Port, GPIO_Pin) == 0) {
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d10f      	bne.n	8002e14 <HAL_GPIO_EXTI_Callback+0xc0>
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	4619      	mov	r1, r3
 8002df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dfc:	f003 f9cc 	bl	8006198 <HAL_GPIO_ReadPin>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_GPIO_EXTI_Callback+0xc0>
            key = down;
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002e08:	2204      	movs	r2, #4
 8002e0a:	701a      	strb	r2, [r3, #0]
            printf("down clicked\r\n");
 8002e0c:	480a      	ldr	r0, [pc, #40]	; (8002e38 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002e0e:	f007 f80b 	bl	8009e28 <puts>
        }
    }
}
 8002e12:	e7ff      	b.n	8002e14 <HAL_GPIO_EXTI_Callback+0xc0>
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20002100 	.word	0x20002100
 8002e20:	0800b378 	.word	0x0800b378
 8002e24:	48000800 	.word	0x48000800
 8002e28:	20002104 	.word	0x20002104
 8002e2c:	0800b384 	.word	0x0800b384
 8002e30:	0800b394 	.word	0x0800b394
 8002e34:	0800b3a0 	.word	0x0800b3a0
 8002e38:	0800b3b0 	.word	0x0800b3b0

08002e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e40:	b672      	cpsid	i
}
 8002e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <Error_Handler+0x8>
	...

08002e48 <displayPauseMenu>:

void displayMultiplayerIcon(void);
void displayBricksIcon(void);
void displaySpaceIcon(void);

void displayPauseMenu(uint8_t clear){
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af04      	add	r7, sp, #16
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
	uint16_t back_color = GREY;
 8002e52:	f249 6396 	movw	r3, #38550	; 0x9696
 8002e56:	81fb      	strh	r3, [r7, #14]
	uint16_t continue_color = RED;
 8002e58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e5c:	81bb      	strh	r3, [r7, #12]
	uint16_t triangle_color = WHITE;
 8002e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e62:	817b      	strh	r3, [r7, #10]
	if(choice != last_choice_pause || clear){
 8002e64:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <displayPauseMenu+0xbc>)
 8002e66:	781a      	ldrb	r2, [r3, #0]
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <displayPauseMenu+0xc0>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d102      	bne.n	8002e76 <displayPauseMenu+0x2e>
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d042      	beq.n	8002efc <displayPauseMenu+0xb4>
		last_choice_pause = choice;
 8002e76:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <displayPauseMenu+0xbc>)
 8002e78:	781a      	ldrb	r2, [r3, #0]
 8002e7a:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <displayPauseMenu+0xc0>)
 8002e7c:	701a      	strb	r2, [r3, #0]
		if(choice == 0){
 8002e7e:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <displayPauseMenu+0xbc>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <displayPauseMenu+0x4c>
			back_color = RED;
 8002e86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e8a:	81fb      	strh	r3, [r7, #14]
			continue_color = GREY;
 8002e8c:	f249 6396 	movw	r3, #38550	; 0x9696
 8002e90:	81bb      	strh	r3, [r7, #12]
 8002e92:	e00b      	b.n	8002eac <displayPauseMenu+0x64>
		}
		else if(clear){
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <displayPauseMenu+0x64>
			back_color = DARK_GREY;
 8002e9a:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002e9e:	81fb      	strh	r3, [r7, #14]
			continue_color = DARK_GREY;
 8002ea0:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002ea4:	81bb      	strh	r3, [r7, #12]
			triangle_color = DARK_GREY;
 8002ea6:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002eaa:	817b      	strh	r3, [r7, #10]
		}
		Displ_FillArea(SCREEN_WIDTH * 2 - BUTTON_SIZE - 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, back_color);
 8002eac:	89fb      	ldrh	r3, [r7, #14]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2340      	movs	r3, #64	; 0x40
 8002eb2:	2240      	movs	r2, #64	; 0x40
 8002eb4:	2158      	movs	r1, #88	; 0x58
 8002eb6:	2054      	movs	r0, #84	; 0x54
 8002eb8:	f001 fec6 	bl	8004c48 <Displ_FillArea>
		Displ_FillArea(SCREEN_WIDTH * 2 + 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, continue_color);
 8002ebc:	89bb      	ldrh	r3, [r7, #12]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2340      	movs	r3, #64	; 0x40
 8002ec2:	2240      	movs	r2, #64	; 0x40
 8002ec4:	2158      	movs	r1, #88	; 0x58
 8002ec6:	20ac      	movs	r0, #172	; 0xac
 8002ec8:	f001 febe 	bl	8004c48 <Displ_FillArea>

		Displ_fillTriangle(SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 + 20 + BUTTON_SIZE - 16, SCREEN_HEIGHT * 2, triangle_color);
 8002ecc:	897b      	ldrh	r3, [r7, #10]
 8002ece:	9302      	str	r3, [sp, #8]
 8002ed0:	2378      	movs	r3, #120	; 0x78
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	23e4      	movs	r3, #228	; 0xe4
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	2390      	movs	r3, #144	; 0x90
 8002eda:	22b4      	movs	r2, #180	; 0xb4
 8002edc:	2160      	movs	r1, #96	; 0x60
 8002ede:	20b4      	movs	r0, #180	; 0xb4
 8002ee0:	f002 f9b3 	bl	800524a <Displ_fillTriangle>
		Displ_fillTriangle(SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 - 20 - BUTTON_SIZE + 16, SCREEN_HEIGHT * 2, triangle_color);
 8002ee4:	897b      	ldrh	r3, [r7, #10]
 8002ee6:	9302      	str	r3, [sp, #8]
 8002ee8:	2378      	movs	r3, #120	; 0x78
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	235c      	movs	r3, #92	; 0x5c
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2390      	movs	r3, #144	; 0x90
 8002ef2:	228c      	movs	r2, #140	; 0x8c
 8002ef4:	2160      	movs	r1, #96	; 0x60
 8002ef6:	208c      	movs	r0, #140	; 0x8c
 8002ef8:	f002 f9a7 	bl	800524a <Displ_fillTriangle>
	}

}
 8002efc:	bf00      	nop
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20001eec 	.word	0x20001eec
 8002f08:	2000002c 	.word	0x2000002c

08002f0c <displayMenu>:

void displayMenu(){
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b08b      	sub	sp, #44	; 0x2c
 8002f10:	af06      	add	r7, sp, #24
	int y_offset = 12;
 8002f12:	230c      	movs	r3, #12
 8002f14:	60fb      	str	r3, [r7, #12]
	int x_offset = 12;
 8002f16:	230c      	movs	r3, #12
 8002f18:	60bb      	str	r3, [r7, #8]
	//box around
	if(choice != last_choice_menu){
 8002f1a:	4b4c      	ldr	r3, [pc, #304]	; (800304c <displayMenu+0x140>)
 8002f1c:	781a      	ldrb	r2, [r3, #0]
 8002f1e:	4b4c      	ldr	r3, [pc, #304]	; (8003050 <displayMenu+0x144>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d03d      	beq.n	8002fa2 <displayMenu+0x96>
		last_choice_menu =  choice;
 8002f26:	4b49      	ldr	r3, [pc, #292]	; (800304c <displayMenu+0x140>)
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	4b49      	ldr	r3, [pc, #292]	; (8003050 <displayMenu+0x144>)
 8002f2c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	e02e      	b.n	8002f92 <displayMenu+0x86>
			if(i == choice){
 8002f34:	4b45      	ldr	r3, [pc, #276]	; (800304c <displayMenu+0x140>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d10b      	bne.n	8002f58 <displayMenu+0x4c>
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, RED);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	b298      	uxth	r0, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	b299      	uxth	r1, r3
 8002f48:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	2340      	movs	r3, #64	; 0x40
 8002f50:	2240      	movs	r2, #64	; 0x40
 8002f52:	f001 fe79 	bl	8004c48 <Displ_FillArea>
 8002f56:	e00a      	b.n	8002f6e <displayMenu+0x62>
			}else{
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, GREY);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	b298      	uxth	r0, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	b299      	uxth	r1, r3
 8002f60:	f249 6396 	movw	r3, #38550	; 0x9696
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	2340      	movs	r3, #64	; 0x40
 8002f68:	2240      	movs	r2, #64	; 0x40
 8002f6a:	f001 fe6d 	bl	8004c48 <Displ_FillArea>
			}if((i + 1)% 4 == 0){
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3301      	adds	r3, #1
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d105      	bne.n	8002f86 <displayMenu+0x7a>
				x_offset = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
				y_offset += BUTTON_SIZE + 12;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	334c      	adds	r3, #76	; 0x4c
 8002f82:	60fb      	str	r3, [r7, #12]
				continue;
 8002f84:	e002      	b.n	8002f8c <displayMenu+0x80>
			}
			x_offset += BUTTON_SIZE + 12;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	334c      	adds	r3, #76	; 0x4c
 8002f8a:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	4b30      	ldr	r3, [pc, #192]	; (8003054 <displayMenu+0x148>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	dc02      	bgt.n	8002fa2 <displayMenu+0x96>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b07      	cmp	r3, #7
 8002fa0:	ddc8      	ble.n	8002f34 <displayMenu+0x28>
		}
	}
    displayMenuIcons();
 8002fa2:	f000 f861 	bl	8003068 <displayMenuIcons>

    // text
    switch (choice) {
 8002fa6:	4b29      	ldr	r3, [pc, #164]	; (800304c <displayMenu+0x140>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d032      	beq.n	8003014 <displayMenu+0x108>
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	dc46      	bgt.n	8003040 <displayMenu+0x134>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <displayMenu+0xb0>
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d016      	beq.n	8002fe8 <displayMenu+0xdc>
        break;
    case 2:
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
        break;
    default:
        break;
 8002fba:	e041      	b.n	8003040 <displayMenu+0x134>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Multiplayer   ", Font20, 1, WHITE, DARK_GREY);
 8002fbc:	4b26      	ldr	r3, [pc, #152]	; (8003058 <displayMenu+0x14c>)
 8002fbe:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8002fc2:	9204      	str	r2, [sp, #16]
 8002fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fc8:	9203      	str	r2, [sp, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	9202      	str	r2, [sp, #8]
 8002fce:	466c      	mov	r4, sp
 8002fd0:	1d1a      	adds	r2, r3, #4
 8002fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fd6:	e884 0003 	stmia.w	r4, {r0, r1}
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1f      	ldr	r2, [pc, #124]	; (800305c <displayMenu+0x150>)
 8002fde:	21c8      	movs	r1, #200	; 0xc8
 8002fe0:	2008      	movs	r0, #8
 8002fe2:	f002 fb8d 	bl	8005700 <Displ_WString>
        break;
 8002fe6:	e02c      	b.n	8003042 <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Brick Breaker ", Font20, 1, WHITE, DARK_GREY);
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <displayMenu+0x14c>)
 8002fea:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8002fee:	9204      	str	r2, [sp, #16]
 8002ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ff4:	9203      	str	r2, [sp, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	9202      	str	r2, [sp, #8]
 8002ffa:	466c      	mov	r4, sp
 8002ffc:	1d1a      	adds	r2, r3, #4
 8002ffe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003002:	e884 0003 	stmia.w	r4, {r0, r1}
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a15      	ldr	r2, [pc, #84]	; (8003060 <displayMenu+0x154>)
 800300a:	21c8      	movs	r1, #200	; 0xc8
 800300c:	2008      	movs	r0, #8
 800300e:	f002 fb77 	bl	8005700 <Displ_WString>
        break;
 8003012:	e016      	b.n	8003042 <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
 8003014:	4b10      	ldr	r3, [pc, #64]	; (8003058 <displayMenu+0x14c>)
 8003016:	f642 422c 	movw	r2, #11308	; 0x2c2c
 800301a:	9204      	str	r2, [sp, #16]
 800301c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003020:	9203      	str	r2, [sp, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	9202      	str	r2, [sp, #8]
 8003026:	466c      	mov	r4, sp
 8003028:	1d1a      	adds	r2, r3, #4
 800302a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800302e:	e884 0003 	stmia.w	r4, {r0, r1}
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <displayMenu+0x158>)
 8003036:	21c8      	movs	r1, #200	; 0xc8
 8003038:	2008      	movs	r0, #8
 800303a:	f002 fb61 	bl	8005700 <Displ_WString>
        break;
 800303e:	e000      	b.n	8003042 <displayMenu+0x136>
        break;
 8003040:	bf00      	nop
    }
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bd90      	pop	{r4, r7, pc}
 800304a:	bf00      	nop
 800304c:	20001eec 	.word	0x20001eec
 8003050:	20000048 	.word	0x20000048
 8003054:	20000044 	.word	0x20000044
 8003058:	20000020 	.word	0x20000020
 800305c:	0800b3c0 	.word	0x0800b3c0
 8003060:	0800b3d0 	.word	0x0800b3d0
 8003064:	0800b3e0 	.word	0x0800b3e0

08003068 <displayMenuIcons>:

void displayMenuIcons(){
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0

    // multiplayer
	displayMultiplayerIcon();
 800306c:	f000 f806 	bl	800307c <displayMultiplayerIcon>

    // brick
	displayBricksIcon();
 8003070:	f000 f868 	bl	8003144 <displayBricksIcon>

    //spaceinvaders
	displaySpaceIcon();
 8003074:	f000 f890 	bl	8003198 <displaySpaceIcon>
}
 8003078:	bf00      	nop
 800307a:	bd80      	pop	{r7, pc}

0800307c <displayMultiplayerIcon>:

void displayMultiplayerIcon(){
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af02      	add	r7, sp, #8
	if(connected){
 8003082:	4b2f      	ldr	r3, [pc, #188]	; (8003140 <displayMultiplayerIcon+0xc4>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d023      	beq.n	80030d2 <displayMultiplayerIcon+0x56>
		Displ_FillArea(20, 20, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 800308a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	2304      	movs	r3, #4
 8003092:	2230      	movs	r2, #48	; 0x30
 8003094:	2114      	movs	r1, #20
 8003096:	2014      	movs	r0, #20
 8003098:	f001 fdd6 	bl	8004c48 <Displ_FillArea>
		Displ_FillArea(20, 12, 4, 8, LIGHT_GREEN);
 800309c:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	2308      	movs	r3, #8
 80030a4:	2204      	movs	r2, #4
 80030a6:	210c      	movs	r1, #12
 80030a8:	2014      	movs	r0, #20
 80030aa:	f001 fdcd 	bl	8004c48 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE, 12, 4, 8, LIGHT_GREEN);
 80030ae:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	2308      	movs	r3, #8
 80030b6:	2204      	movs	r2, #4
 80030b8:	210c      	movs	r1, #12
 80030ba:	2040      	movs	r0, #64	; 0x40
 80030bc:	f001 fdc4 	bl	8004c48 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE/2 + 8, 24, 8, BUTTON_SIZE - 24, LIGHT_GREEN);
 80030c0:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	2328      	movs	r3, #40	; 0x28
 80030c8:	2208      	movs	r2, #8
 80030ca:	2118      	movs	r1, #24
 80030cc:	2028      	movs	r0, #40	; 0x28
 80030ce:	f001 fdbb 	bl	8004c48 <Displ_FillArea>
	}
	Displ_FillArea(20, BUTTON_SIZE, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 80030d2:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	2304      	movs	r3, #4
 80030da:	2230      	movs	r2, #48	; 0x30
 80030dc:	2140      	movs	r1, #64	; 0x40
 80030de:	2014      	movs	r0, #20
 80030e0:	f001 fdb2 	bl	8004c48 <Displ_FillArea>
	Displ_FillArea(20, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 80030e4:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2308      	movs	r3, #8
 80030ec:	2204      	movs	r2, #4
 80030ee:	2144      	movs	r1, #68	; 0x44
 80030f0:	2014      	movs	r0, #20
 80030f2:	f001 fda9 	bl	8004c48 <Displ_FillArea>
	Displ_FillArea(BUTTON_SIZE, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 80030f6:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	2308      	movs	r3, #8
 80030fe:	2204      	movs	r2, #4
 8003100:	2144      	movs	r1, #68	; 0x44
 8003102:	2040      	movs	r0, #64	; 0x40
 8003104:	f001 fda0 	bl	8004c48 <Displ_FillArea>
	if(!connected){
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <displayMultiplayerIcon+0xc4>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d112      	bne.n	8003136 <displayMultiplayerIcon+0xba>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 8003110:	2318      	movs	r3, #24
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	e00c      	b.n	8003130 <displayMultiplayerIcon+0xb4>
			Displ_FillArea(BUTTON_SIZE/2 + 8, k, 8, 4, LIGHT_GREEN);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	b299      	uxth	r1, r3
 800311a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2304      	movs	r3, #4
 8003122:	2208      	movs	r2, #8
 8003124:	2028      	movs	r0, #40	; 0x28
 8003126:	f001 fd8f 	bl	8004c48 <Displ_FillArea>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3308      	adds	r3, #8
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b3f      	cmp	r3, #63	; 0x3f
 8003134:	ddef      	ble.n	8003116 <displayMultiplayerIcon+0x9a>
		}
	}
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20002105 	.word	0x20002105

08003144 <displayBricksIcon>:

void displayBricksIcon(){
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af02      	add	r7, sp, #8
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE, 20, 4, LIGHT_GREEN);
 800314a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2304      	movs	r3, #4
 8003152:	2214      	movs	r2, #20
 8003154:	2140      	movs	r1, #64	; 0x40
 8003156:	2068      	movs	r0, #104	; 0x68
 8003158:	f001 fd76 	bl	8004c48 <Displ_FillArea>
	Displ_FillArea(28+BUTTON_SIZE, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 800315c:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2340      	movs	r3, #64	; 0x40
 8003164:	2204      	movs	r2, #4
 8003166:	210c      	movs	r1, #12
 8003168:	205c      	movs	r0, #92	; 0x5c
 800316a:	f001 fd6d 	bl	8004c48 <Displ_FillArea>
	Displ_FillArea((8+BUTTON_SIZE)*2, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 800316e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	2340      	movs	r3, #64	; 0x40
 8003176:	2204      	movs	r2, #4
 8003178:	210c      	movs	r1, #12
 800317a:	2090      	movs	r0, #144	; 0x90
 800317c:	f001 fd64 	bl	8004c48 <Displ_FillArea>
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE - 20, 4, 4, LIGHT_GREEN);
 8003180:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2304      	movs	r3, #4
 8003188:	2204      	movs	r2, #4
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	2068      	movs	r0, #104	; 0x68
 800318e:	f001 fd5b 	bl	8004c48 <Displ_FillArea>
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <displaySpaceIcon>:

void displaySpaceIcon(){
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af02      	add	r7, sp, #8
	Displ_FillArea((BUTTON_SIZE+12)*3 - 48, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 800319e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2310      	movs	r3, #16
 80031a6:	2204      	movs	r2, #4
 80031a8:	2134      	movs	r1, #52	; 0x34
 80031aa:	20b4      	movs	r0, #180	; 0xb4
 80031ac:	f001 fd4c 	bl	8004c48 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 32, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 80031b0:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2310      	movs	r3, #16
 80031b8:	2204      	movs	r2, #4
 80031ba:	2134      	movs	r1, #52	; 0x34
 80031bc:	20c4      	movs	r0, #196	; 0xc4
 80031be:	f001 fd43 	bl	8004c48 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 44, BUTTON_SIZE -8, 12, 4, LIGHT_GREEN);
 80031c2:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2304      	movs	r3, #4
 80031ca:	220c      	movs	r2, #12
 80031cc:	2138      	movs	r1, #56	; 0x38
 80031ce:	20b8      	movs	r0, #184	; 0xb8
 80031d0:	f001 fd3a 	bl	8004c48 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 40, BUTTON_SIZE -16, 4, 16, LIGHT_GREEN);
 80031d4:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2310      	movs	r3, #16
 80031dc:	2204      	movs	r2, #4
 80031de:	2130      	movs	r1, #48	; 0x30
 80031e0:	20bc      	movs	r0, #188	; 0xbc
 80031e2:	f001 fd31 	bl	8004c48 <Displ_FillArea>

	Displ_FillArea((BUTTON_SIZE+12)*3 - 36, BUTTON_SIZE -40, 12, 12, LIGHT_GREEN);
 80031e6:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	230c      	movs	r3, #12
 80031ee:	220c      	movs	r2, #12
 80031f0:	2118      	movs	r1, #24
 80031f2:	20c0      	movs	r0, #192	; 0xc0
 80031f4:	f001 fd28 	bl	8004c48 <Displ_FillArea>
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <check_availability>:

uint8_t emulate = 1;
uint8_t connected = 0;


void check_availability(){
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
    //QD << "(mockup) is player 2 there?";  // change to uart debug
    if(emulate /*or answer was received */){
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <check_availability+0x1c>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <check_availability+0x12>
        connected = 1;
 800320c:	4b04      	ldr	r3, [pc, #16]	; (8003220 <check_availability+0x20>)
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
        // QD << "(mockup) player 2 connected";  // change to uart debug
    }
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	20000049 	.word	0x20000049
 8003220:	20002105 	.word	0x20002105

08003224 <toggle_multiplayer>:

void toggle_multiplayer(){
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
    if(connected){
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <toggle_multiplayer+0x1c>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <toggle_multiplayer+0x14>
        //QD << "(mockup) stoping multiplayer";  // change to uart debug
        connected = 0;
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <toggle_multiplayer+0x1c>)
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
    }else{
        //QD << "(mockup) starting multiplayer";  // change to uart debug
        check_availability();
    }

}
 8003236:	e001      	b.n	800323c <toggle_multiplayer+0x18>
        check_availability();
 8003238:	f7ff ffe2 	bl	8003200 <check_availability>
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20002105 	.word	0x20002105

08003244 <initSpaceInvaders>:
 * initialises ammo by clearing all values using initAmmo()
 * initialises comets by clearing all values using initComets()
 * initialises stars by clearing all values using initStars()
 *
 */
void initSpaceInvaders(){
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
    money = 0;
 8003248:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <initSpaceInvaders+0x6c>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
    lives = 3;
 800324e:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <initSpaceInvaders+0x70>)
 8003250:	2203      	movs	r2, #3
 8003252:	701a      	strb	r2, [r3, #0]

    Displ_CLS(DARK_GREY);
 8003254:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003258:	f001 feaa 	bl	8004fb0 <Displ_CLS>
    // Seed the random number generator
    srand(HAL_GetTick());
 800325c:	f002 fb14 	bl	8005888 <HAL_GetTick>
 8003260:	4603      	mov	r3, r0
 8003262:	4618      	mov	r0, r3
 8003264:	f006 fde8 	bl	8009e38 <srand>
    comet_delay = rand() % ((20 + 1) - 5) + 5;
 8003268:	f006 fe14 	bl	8009e94 <rand>
 800326c:	4603      	mov	r3, r0
 800326e:	425a      	negs	r2, r3
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	f002 020f 	and.w	r2, r2, #15
 8003278:	bf58      	it	pl
 800327a:	4253      	negpl	r3, r2
 800327c:	b2db      	uxtb	r3, r3
 800327e:	3305      	adds	r3, #5
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <initSpaceInvaders+0x74>)
 8003284:	701a      	strb	r2, [r3, #0]
    initSpaceShip();
 8003286:	f000 f81f 	bl	80032c8 <initSpaceShip>
    initAmmo(&ammo,0);
 800328a:	2100      	movs	r1, #0
 800328c:	480b      	ldr	r0, [pc, #44]	; (80032bc <initSpaceInvaders+0x78>)
 800328e:	f000 f827 	bl	80032e0 <initAmmo>
    if(in_multiplayer){
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <initSpaceInvaders+0x7c>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <initSpaceInvaders+0x5e>
        initAmmo(&enemy_ammo,1);
 800329a:	2101      	movs	r1, #1
 800329c:	4809      	ldr	r0, [pc, #36]	; (80032c4 <initSpaceInvaders+0x80>)
 800329e:	f000 f81f 	bl	80032e0 <initAmmo>
    }
    initComets();
 80032a2:	f000 f845 	bl	8003330 <initComets>
    initStars();
 80032a6:	f000 f86d 	bl	8003384 <initStars>
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	2000216c 	.word	0x2000216c
 80032b4:	2000004a 	.word	0x2000004a
 80032b8:	20002170 	.word	0x20002170
 80032bc:	20002108 	.word	0x20002108
 80032c0:	20000051 	.word	0x20000051
 80032c4:	20002118 	.word	0x20002118

080032c8 <initSpaceShip>:

void initSpaceShip(){
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
    SpaceShip.x = SCREEN_WIDTH/2;
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <initSpaceShip+0x14>)
 80032ce:	2228      	movs	r2, #40	; 0x28
 80032d0:	701a      	strb	r2, [r3, #0]
}
 80032d2:	bf00      	nop
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	2000004c 	.word	0x2000004c

080032e0 <initAmmo>:

void initAmmo(bullets *am,int enemy){
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
    am->enemy = enemy;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	b25a      	sxtb	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	701a      	strb	r2, [r3, #0]
    am->in_play=0;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	705a      	strb	r2, [r3, #1]
    for (int i = 0;i<MAX_BULLETS;i++){
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e00e      	b.n	800331c <initAmmo+0x3c>
        am->bullet_ar[i].x = -1;
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	22ff      	movs	r2, #255	; 0xff
 8003308:	709a      	strb	r2, [r3, #2]
        am->bullet_ar[i].y = -1;
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	22ff      	movs	r2, #255	; 0xff
 8003314:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_BULLETS;i++){
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	3301      	adds	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b05      	cmp	r3, #5
 8003320:	dded      	ble.n	80032fe <initAmmo+0x1e>
    }
}
 8003322:	bf00      	nop
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <initComets>:

void initComets(){
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
    Comet.in_play = 0;
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <initComets+0x50>)
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 800333c:	2300      	movs	r3, #0
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	e014      	b.n	800336c <initComets+0x3c>
        Comet.comet_ar[i].x = -1;
 8003342:	4a0f      	ldr	r2, [pc, #60]	; (8003380 <initComets+0x50>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	22ff      	movs	r2, #255	; 0xff
 800334c:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[i].y = -1;
 800334e:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <initComets+0x50>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	22ff      	movs	r2, #255	; 0xff
 8003358:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[i].size = 2;
 800335a:	4a09      	ldr	r2, [pc, #36]	; (8003380 <initComets+0x50>)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	2202      	movs	r2, #2
 8003364:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_COMETS;i++){
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3301      	adds	r3, #1
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b09      	cmp	r3, #9
 8003370:	dde7      	ble.n	8003342 <initComets+0x12>
    }
}
 8003372:	bf00      	nop
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	20002128 	.word	0x20002128

08003384 <initStars>:

void initStars(){
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
    Star.in_play = 0;
 800338a:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <initStars+0x44>)
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 8003390:	2300      	movs	r3, #0
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	e00e      	b.n	80033b4 <initStars+0x30>
        Star.star_ar[i].x = -1;
 8003396:	4a0c      	ldr	r2, [pc, #48]	; (80033c8 <initStars+0x44>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	22ff      	movs	r2, #255	; 0xff
 80033a0:	705a      	strb	r2, [r3, #1]
        Star.star_ar[i].y = -1;
 80033a2:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <initStars+0x44>)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	22ff      	movs	r2, #255	; 0xff
 80033ac:	709a      	strb	r2, [r3, #2]
    for (int i = 0;i<MAX_COMETS;i++){
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3301      	adds	r3, #1
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b09      	cmp	r3, #9
 80033b8:	dded      	ble.n	8003396 <initStars+0x12>
    }
}
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	20002154 	.word	0x20002154

080033cc <spawnComet>:

void spawnComet(){
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 80033d0:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <spawnComet+0x104>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d172      	bne.n	80034be <spawnComet+0xf2>
 80033d8:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <spawnComet+0x108>)
 80033da:	f993 3000 	ldrsb.w	r3, [r3]
 80033de:	2b09      	cmp	r3, #9
 80033e0:	dc6d      	bgt.n	80034be <spawnComet+0xf2>
        Comet.comet_ar[Comet.in_play].x = rand() % ((PLAYABLE_MAX - 1) - PLAYABLE_OFFSET) + PLAYABLE_OFFSET;
 80033e2:	f006 fd57 	bl	8009e94 <rand>
 80033e6:	4601      	mov	r1, r0
 80033e8:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <spawnComet+0x10c>)
 80033ea:	fb83 2301 	smull	r2, r3, r3, r1
 80033ee:	115a      	asrs	r2, r3, #5
 80033f0:	17cb      	asrs	r3, r1, #31
 80033f2:	1ad2      	subs	r2, r2, r3
 80033f4:	4613      	mov	r3, r2
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	1aca      	subs	r2, r1, r3
 8003400:	b2d3      	uxtb	r3, r2
 8003402:	4a34      	ldr	r2, [pc, #208]	; (80034d4 <spawnComet+0x108>)
 8003404:	f992 2000 	ldrsb.w	r2, [r2]
 8003408:	4610      	mov	r0, r2
 800340a:	3305      	adds	r3, #5
 800340c:	b2d9      	uxtb	r1, r3
 800340e:	4a31      	ldr	r2, [pc, #196]	; (80034d4 <spawnComet+0x108>)
 8003410:	0083      	lsls	r3, r0, #2
 8003412:	4413      	add	r3, r2
 8003414:	460a      	mov	r2, r1
 8003416:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[Comet.in_play].y = 0;
 8003418:	4b2e      	ldr	r3, [pc, #184]	; (80034d4 <spawnComet+0x108>)
 800341a:	f993 3000 	ldrsb.w	r3, [r3]
 800341e:	4a2d      	ldr	r2, [pc, #180]	; (80034d4 <spawnComet+0x108>)
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	2200      	movs	r2, #0
 8003426:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[Comet.in_play].size = rand() % ((MAX_COMET_SIZE + 1) - MIN_COMET_SIZE) + MIN_COMET_SIZE;
 8003428:	f006 fd34 	bl	8009e94 <rand>
 800342c:	4602      	mov	r2, r0
 800342e:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <spawnComet+0x110>)
 8003430:	fb83 3102 	smull	r3, r1, r3, r2
 8003434:	17d3      	asrs	r3, r2, #31
 8003436:	1ac9      	subs	r1, r1, r3
 8003438:	460b      	mov	r3, r1
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	440b      	add	r3, r1
 800343e:	1ad1      	subs	r1, r2, r3
 8003440:	b2cb      	uxtb	r3, r1
 8003442:	3302      	adds	r3, #2
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <spawnComet+0x108>)
 8003448:	f993 3000 	ldrsb.w	r3, [r3]
 800344c:	b251      	sxtb	r1, r2
 800344e:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <spawnComet+0x108>)
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	460a      	mov	r2, r1
 8003456:	70da      	strb	r2, [r3, #3]

        Comet.comet_ar[Comet.in_play].coins = 7 - Comet.comet_ar[Comet.in_play].size;
 8003458:	4b1e      	ldr	r3, [pc, #120]	; (80034d4 <spawnComet+0x108>)
 800345a:	f993 3000 	ldrsb.w	r3, [r3]
 800345e:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <spawnComet+0x108>)
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f1c3 0307 	rsb	r3, r3, #7
 800346e:	b2da      	uxtb	r2, r3
 8003470:	4b18      	ldr	r3, [pc, #96]	; (80034d4 <spawnComet+0x108>)
 8003472:	f993 3000 	ldrsb.w	r3, [r3]
 8003476:	b251      	sxtb	r1, r2
 8003478:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <spawnComet+0x108>)
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	460a      	mov	r2, r1
 8003480:	711a      	strb	r2, [r3, #4]
        comet_delay = rand() % ((20 + 1) - 10) + 5;
 8003482:	f006 fd07 	bl	8009e94 <rand>
 8003486:	4601      	mov	r1, r0
 8003488:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <spawnComet+0x114>)
 800348a:	fb83 2301 	smull	r2, r3, r3, r1
 800348e:	105a      	asrs	r2, r3, #1
 8003490:	17cb      	asrs	r3, r1, #31
 8003492:	1ad2      	subs	r2, r2, r3
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	4413      	add	r3, r2
 800349e:	1aca      	subs	r2, r1, r3
 80034a0:	b2d3      	uxtb	r3, r2
 80034a2:	3305      	adds	r3, #5
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <spawnComet+0x104>)
 80034a8:	701a      	strb	r2, [r3, #0]
        Comet.in_play++;
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <spawnComet+0x108>)
 80034ac:	f993 3000 	ldrsb.w	r3, [r3]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	3301      	adds	r3, #1
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	b25a      	sxtb	r2, r3
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <spawnComet+0x108>)
 80034ba:	701a      	strb	r2, [r3, #0]
 80034bc:	e006      	b.n	80034cc <spawnComet+0x100>
    }else{
        comet_delay--;
 80034be:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <spawnComet+0x104>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	4b02      	ldr	r3, [pc, #8]	; (80034d0 <spawnComet+0x104>)
 80034c8:	701a      	strb	r2, [r3, #0]
    }

}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20002170 	.word	0x20002170
 80034d4:	20002128 	.word	0x20002128
 80034d8:	76b981db 	.word	0x76b981db
 80034dc:	55555556 	.word	0x55555556
 80034e0:	2e8ba2e9 	.word	0x2e8ba2e9

080034e4 <spawnBullet>:

void spawnBullet(int enemy){
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
    int x_val = SpaceShip.x;
 80034ec:	4b23      	ldr	r3, [pc, #140]	; (800357c <spawnBullet+0x98>)
 80034ee:	f993 3000 	ldrsb.w	r3, [r3]
 80034f2:	60fb      	str	r3, [r7, #12]
    int y_val = SpaceShip.y - 3;
 80034f4:	4b21      	ldr	r3, [pc, #132]	; (800357c <spawnBullet+0x98>)
 80034f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80034fa:	3b03      	subs	r3, #3
 80034fc:	617b      	str	r3, [r7, #20]
    bullets *am_p;
    if (enemy){
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <spawnBullet+0x26>
        am_p = &enemy_ammo;
 8003504:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <spawnBullet+0x9c>)
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	e001      	b.n	800350e <spawnBullet+0x2a>
    }else{
        am_p = &ammo;
 800350a:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <spawnBullet+0xa0>)
 800350c:	613b      	str	r3, [r7, #16]
    }
    if(am_p->in_play < MAX_BULLETS && bullet_delay == 0){
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003514:	2b05      	cmp	r3, #5
 8003516:	dc2a      	bgt.n	800356e <spawnBullet+0x8a>
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <spawnBullet+0xa4>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d126      	bne.n	800356e <spawnBullet+0x8a>
        if(am_p->enemy){
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f993 3000 	ldrsb.w	r3, [r3]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <spawnBullet+0x4a>
            //x_val = read the input from multiplayer;
            y_val = 3;
 800352a:	2303      	movs	r3, #3
 800352c:	617b      	str	r3, [r7, #20]
        }
        am_p->bullet_ar[am_p->in_play].x = x_val;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	b251      	sxtb	r1, r2
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	460a      	mov	r2, r1
 8003540:	709a      	strb	r2, [r3, #2]
        am_p->bullet_ar[am_p->in_play].y = y_val;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	b251      	sxtb	r1, r2
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	460a      	mov	r2, r1
 8003554:	70da      	strb	r2, [r3, #3]
        am_p->in_play++;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	3301      	adds	r3, #1
 8003560:	b2db      	uxtb	r3, r3
 8003562:	b25a      	sxtb	r2, r3
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	705a      	strb	r2, [r3, #1]
        bullet_delay = MAX_DELAY_BULLETS;
 8003568:	4b07      	ldr	r3, [pc, #28]	; (8003588 <spawnBullet+0xa4>)
 800356a:	220a      	movs	r2, #10
 800356c:	701a      	strb	r2, [r3, #0]
    }
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	2000004c 	.word	0x2000004c
 8003580:	20002118 	.word	0x20002118
 8003584:	20002108 	.word	0x20002108
 8003588:	20002169 	.word	0x20002169

0800358c <spawnStar>:

void spawnStar(){
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 8003590:	4b29      	ldr	r3, [pc, #164]	; (8003638 <spawnStar+0xac>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d145      	bne.n	8003624 <spawnStar+0x98>
 8003598:	4b28      	ldr	r3, [pc, #160]	; (800363c <spawnStar+0xb0>)
 800359a:	f993 3000 	ldrsb.w	r3, [r3]
 800359e:	2b09      	cmp	r3, #9
 80035a0:	dc40      	bgt.n	8003624 <spawnStar+0x98>
        Star.star_ar[Star.in_play].x = rand() % ((PLAYABLE_MAX - 1) - PLAYABLE_OFFSET) + PLAYABLE_OFFSET;
 80035a2:	f006 fc77 	bl	8009e94 <rand>
 80035a6:	4601      	mov	r1, r0
 80035a8:	4b25      	ldr	r3, [pc, #148]	; (8003640 <spawnStar+0xb4>)
 80035aa:	fb83 2301 	smull	r2, r3, r3, r1
 80035ae:	115a      	asrs	r2, r3, #5
 80035b0:	17cb      	asrs	r3, r1, #31
 80035b2:	1ad2      	subs	r2, r2, r3
 80035b4:	4613      	mov	r3, r2
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	1aca      	subs	r2, r1, r3
 80035c0:	b2d3      	uxtb	r3, r2
 80035c2:	3305      	adds	r3, #5
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4b1d      	ldr	r3, [pc, #116]	; (800363c <spawnStar+0xb0>)
 80035c8:	f993 3000 	ldrsb.w	r3, [r3]
 80035cc:	b251      	sxtb	r1, r2
 80035ce:	4a1b      	ldr	r2, [pc, #108]	; (800363c <spawnStar+0xb0>)
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4413      	add	r3, r2
 80035d4:	460a      	mov	r2, r1
 80035d6:	705a      	strb	r2, [r3, #1]
        Star.star_ar[Star.in_play].y = 0;
 80035d8:	4b18      	ldr	r3, [pc, #96]	; (800363c <spawnStar+0xb0>)
 80035da:	f993 3000 	ldrsb.w	r3, [r3]
 80035de:	4a17      	ldr	r2, [pc, #92]	; (800363c <spawnStar+0xb0>)
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	4413      	add	r3, r2
 80035e4:	2200      	movs	r2, #0
 80035e6:	709a      	strb	r2, [r3, #2]
        star_delay = rand() % ((20 + 1) - 10) + 5;
 80035e8:	f006 fc54 	bl	8009e94 <rand>
 80035ec:	4601      	mov	r1, r0
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <spawnStar+0xb8>)
 80035f0:	fb83 2301 	smull	r2, r3, r3, r1
 80035f4:	105a      	asrs	r2, r3, #1
 80035f6:	17cb      	asrs	r3, r1, #31
 80035f8:	1ad2      	subs	r2, r2, r3
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	1aca      	subs	r2, r1, r3
 8003606:	b2d3      	uxtb	r3, r2
 8003608:	3305      	adds	r3, #5
 800360a:	b2da      	uxtb	r2, r3
 800360c:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <spawnStar+0xac>)
 800360e:	701a      	strb	r2, [r3, #0]
        Star.in_play++;
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <spawnStar+0xb0>)
 8003612:	f993 3000 	ldrsb.w	r3, [r3]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	3301      	adds	r3, #1
 800361a:	b2db      	uxtb	r3, r3
 800361c:	b25a      	sxtb	r2, r3
 800361e:	4b07      	ldr	r3, [pc, #28]	; (800363c <spawnStar+0xb0>)
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	e006      	b.n	8003632 <spawnStar+0xa6>
    }else{
        star_delay--;
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <spawnStar+0xac>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	3b01      	subs	r3, #1
 800362a:	b2da      	uxtb	r2, r3
 800362c:	4b02      	ldr	r3, [pc, #8]	; (8003638 <spawnStar+0xac>)
 800362e:	701a      	strb	r2, [r3, #0]
    }
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20002171 	.word	0x20002171
 800363c:	20002154 	.word	0x20002154
 8003640:	76b981db 	.word	0x76b981db
 8003644:	2e8ba2e9 	.word	0x2e8ba2e9

08003648 <moveBullets>:

void moveBullets(){
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
	displayAmmo(DARK_GREY);
 800364e:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003652:	f000 fc37 	bl	8003ec4 <displayAmmo>
	for(int i = 0; i < ammo.in_play; i++){
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e09c      	b.n	8003796 <moveBullets+0x14e>
		for (int j = 0; j < Comet.in_play; j++){
 800365c:	2300      	movs	r3, #0
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	e040      	b.n	80036e4 <moveBullets+0x9c>
			if(ammo.bullet_ar[i].x >= Comet.comet_ar[j].x && ammo.bullet_ar[i].x < Comet.comet_ar[j].x + Comet.comet_ar[j].size){
 8003662:	4a55      	ldr	r2, [pc, #340]	; (80037b8 <moveBullets+0x170>)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800366e:	4619      	mov	r1, r3
 8003670:	4a52      	ldr	r2, [pc, #328]	; (80037bc <moveBullets+0x174>)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	785b      	ldrb	r3, [r3, #1]
 800367a:	4299      	cmp	r1, r3
 800367c:	db2f      	blt.n	80036de <moveBullets+0x96>
 800367e:	4a4e      	ldr	r2, [pc, #312]	; (80037b8 <moveBullets+0x170>)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800368a:	4619      	mov	r1, r3
 800368c:	4a4b      	ldr	r2, [pc, #300]	; (80037bc <moveBullets+0x174>)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	785b      	ldrb	r3, [r3, #1]
 8003696:	4618      	mov	r0, r3
 8003698:	4a48      	ldr	r2, [pc, #288]	; (80037bc <moveBullets+0x174>)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80036a4:	4403      	add	r3, r0
 80036a6:	4299      	cmp	r1, r3
 80036a8:	da19      	bge.n	80036de <moveBullets+0x96>
				if (ammo.bullet_ar[i].y <= Comet.comet_ar[j].y + Comet.comet_ar[j].size - 1){
 80036aa:	4a44      	ldr	r2, [pc, #272]	; (80037bc <moveBullets+0x174>)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	789b      	ldrb	r3, [r3, #2]
 80036b4:	4619      	mov	r1, r3
 80036b6:	4a41      	ldr	r2, [pc, #260]	; (80037bc <moveBullets+0x174>)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80036c2:	18ca      	adds	r2, r1, r3
 80036c4:	493c      	ldr	r1, [pc, #240]	; (80037b8 <moveBullets+0x170>)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	440b      	add	r3, r1
 80036cc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	dd04      	ble.n	80036de <moveBullets+0x96>
					//QD << "hit a comet";
					hitComet(i,j);
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fb20 	bl	8003d1c <hitComet>
					continue;
 80036dc:	bf00      	nop
		for (int j = 0; j < Comet.in_play; j++){
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3301      	adds	r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	4b35      	ldr	r3, [pc, #212]	; (80037bc <moveBullets+0x174>)
 80036e6:	f993 3000 	ldrsb.w	r3, [r3]
 80036ea:	461a      	mov	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4293      	cmp	r3, r2
 80036f0:	dbb7      	blt.n	8003662 <moveBullets+0x1a>
				}
			}

		}
		ammo.bullet_ar[i].y--;
 80036f2:	4a31      	ldr	r2, [pc, #196]	; (80037b8 <moveBullets+0x170>)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b2db      	uxtb	r3, r3
 8003704:	b259      	sxtb	r1, r3
 8003706:	4a2c      	ldr	r2, [pc, #176]	; (80037b8 <moveBullets+0x170>)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4413      	add	r3, r2
 800370e:	460a      	mov	r2, r1
 8003710:	70da      	strb	r2, [r3, #3]
		if (ammo.bullet_ar[i].y < 0){
 8003712:	4a29      	ldr	r2, [pc, #164]	; (80037b8 <moveBullets+0x170>)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4413      	add	r3, r2
 800371a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800371e:	2b00      	cmp	r3, #0
 8003720:	da36      	bge.n	8003790 <moveBullets+0x148>
			send_Bullet(ammo.bullet_ar[i]);
 8003722:	4a25      	ldr	r2, [pc, #148]	; (80037b8 <moveBullets+0x170>)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	885a      	ldrh	r2, [r3, #2]
 800372c:	2300      	movs	r3, #0
 800372e:	f362 030f 	bfi	r3, r2, #0, #16
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fd6e 	bl	8004214 <send_Bullet>
			for(int j = i; j < MAX_BULLETS - 1; j++){
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	607b      	str	r3, [r7, #4]
 800373c:	e01c      	b.n	8003778 <moveBullets+0x130>
				ammo.bullet_ar[j].x = ammo.bullet_ar[j+1].x;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3301      	adds	r3, #1
 8003742:	4a1d      	ldr	r2, [pc, #116]	; (80037b8 <moveBullets+0x170>)
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800374c:	4a1a      	ldr	r2, [pc, #104]	; (80037b8 <moveBullets+0x170>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	460a      	mov	r2, r1
 8003756:	709a      	strb	r2, [r3, #2]
				ammo.bullet_ar[j].y = ammo.bullet_ar[j+1].y;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3301      	adds	r3, #1
 800375c:	4a16      	ldr	r2, [pc, #88]	; (80037b8 <moveBullets+0x170>)
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4413      	add	r3, r2
 8003762:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003766:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <moveBullets+0x170>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	460a      	mov	r2, r1
 8003770:	70da      	strb	r2, [r3, #3]
			for(int j = i; j < MAX_BULLETS - 1; j++){
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3301      	adds	r3, #1
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b04      	cmp	r3, #4
 800377c:	dddf      	ble.n	800373e <moveBullets+0xf6>
			}
			ammo.in_play--;
 800377e:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <moveBullets+0x170>)
 8003780:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b2db      	uxtb	r3, r3
 800378a:	b25a      	sxtb	r2, r3
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <moveBullets+0x170>)
 800378e:	705a      	strb	r2, [r3, #1]
	for(int i = 0; i < ammo.in_play; i++){
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3301      	adds	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <moveBullets+0x170>)
 8003798:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800379c:	461a      	mov	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4293      	cmp	r3, r2
 80037a2:	f6ff af5b 	blt.w	800365c <moveBullets+0x14>
		}
	}
	displayAmmo(RED);
 80037a6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80037aa:	f000 fb8b 	bl	8003ec4 <displayAmmo>
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20002108 	.word	0x20002108
 80037bc:	20002128 	.word	0x20002128

080037c0 <moveEnemyBullets>:

void moveEnemyBullets(void){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
    if (!in_multiplayer){
 80037c6:	4b5e      	ldr	r3, [pc, #376]	; (8003940 <moveEnemyBullets+0x180>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80b4 	beq.w	8003938 <moveEnemyBullets+0x178>
        //QD << "not multiplayer";  // change to uart debug
        return;
    }
    displayAmmo(DARK_GREY);
 80037d0:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80037d4:	f000 fb76 	bl	8003ec4 <displayAmmo>
    for(int i = 0; i < enemy_ammo.in_play; i++){
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	e09f      	b.n	800391e <moveEnemyBullets+0x15e>
        if(enemy_ammo.bullet_ar[i].x <= SpaceShip.x + SPACESHIP_WIDTH / 2 && enemy_ammo.bullet_ar[i].x >= SpaceShip.x - SPACESHIP_WIDTH / 2){
 80037de:	4a59      	ldr	r2, [pc, #356]	; (8003944 <moveEnemyBullets+0x184>)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80037ea:	461a      	mov	r2, r3
 80037ec:	4b56      	ldr	r3, [pc, #344]	; (8003948 <moveEnemyBullets+0x188>)
 80037ee:	f993 3000 	ldrsb.w	r3, [r3]
 80037f2:	3302      	adds	r3, #2
 80037f4:	429a      	cmp	r2, r3
 80037f6:	dc4b      	bgt.n	8003890 <moveEnemyBullets+0xd0>
 80037f8:	4a52      	ldr	r2, [pc, #328]	; (8003944 <moveEnemyBullets+0x184>)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003804:	461a      	mov	r2, r3
 8003806:	4b50      	ldr	r3, [pc, #320]	; (8003948 <moveEnemyBullets+0x188>)
 8003808:	f993 3000 	ldrsb.w	r3, [r3]
 800380c:	3b02      	subs	r3, #2
 800380e:	429a      	cmp	r2, r3
 8003810:	db3e      	blt.n	8003890 <moveEnemyBullets+0xd0>
            if (enemy_ammo.bullet_ar[i].y >= SpaceShip.y - SPACESHIP_HEIGHT / 2 && hit == 0){
 8003812:	4a4c      	ldr	r2, [pc, #304]	; (8003944 <moveEnemyBullets+0x184>)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4413      	add	r3, r2
 800381a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800381e:	461a      	mov	r2, r3
 8003820:	4b49      	ldr	r3, [pc, #292]	; (8003948 <moveEnemyBullets+0x188>)
 8003822:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003826:	3b02      	subs	r3, #2
 8003828:	429a      	cmp	r2, r3
 800382a:	db31      	blt.n	8003890 <moveEnemyBullets+0xd0>
 800382c:	4b47      	ldr	r3, [pc, #284]	; (800394c <moveEnemyBullets+0x18c>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d12d      	bne.n	8003890 <moveEnemyBullets+0xd0>
                beenHit();
 8003834:	f000 fcce 	bl	80041d4 <beenHit>
                for(int j = i; j < MAX_BULLETS - 1; j++){
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	e01c      	b.n	8003878 <moveEnemyBullets+0xb8>
                    enemy_ammo.bullet_ar[j].x = enemy_ammo.bullet_ar[j+1].x;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3301      	adds	r3, #1
 8003842:	4a40      	ldr	r2, [pc, #256]	; (8003944 <moveEnemyBullets+0x184>)
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800384c:	4a3d      	ldr	r2, [pc, #244]	; (8003944 <moveEnemyBullets+0x184>)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4413      	add	r3, r2
 8003854:	460a      	mov	r2, r1
 8003856:	709a      	strb	r2, [r3, #2]
                    enemy_ammo.bullet_ar[j].y = enemy_ammo.bullet_ar[j+1].y;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	3301      	adds	r3, #1
 800385c:	4a39      	ldr	r2, [pc, #228]	; (8003944 <moveEnemyBullets+0x184>)
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003866:	4a37      	ldr	r2, [pc, #220]	; (8003944 <moveEnemyBullets+0x184>)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	460a      	mov	r2, r1
 8003870:	70da      	strb	r2, [r3, #3]
                for(int j = i; j < MAX_BULLETS - 1; j++){
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	3301      	adds	r3, #1
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b04      	cmp	r3, #4
 800387c:	dddf      	ble.n	800383e <moveEnemyBullets+0x7e>
                }
                enemy_ammo.in_play--;
 800387e:	4b31      	ldr	r3, [pc, #196]	; (8003944 <moveEnemyBullets+0x184>)
 8003880:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	b25a      	sxtb	r2, r3
 800388c:	4b2d      	ldr	r3, [pc, #180]	; (8003944 <moveEnemyBullets+0x184>)
 800388e:	705a      	strb	r2, [r3, #1]
            }
        }
        enemy_ammo.bullet_ar[i].y++;
 8003890:	4a2c      	ldr	r2, [pc, #176]	; (8003944 <moveEnemyBullets+0x184>)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	4413      	add	r3, r2
 8003898:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	3301      	adds	r3, #1
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	b259      	sxtb	r1, r3
 80038a4:	4a27      	ldr	r2, [pc, #156]	; (8003944 <moveEnemyBullets+0x184>)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	460a      	mov	r2, r1
 80038ae:	70da      	strb	r2, [r3, #3]
        if (enemy_ammo.bullet_ar[i].y > SCREEN_HEIGHT - 1){
 80038b0:	4a24      	ldr	r2, [pc, #144]	; (8003944 <moveEnemyBullets+0x184>)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	4413      	add	r3, r2
 80038b8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80038bc:	2b3b      	cmp	r3, #59	; 0x3b
 80038be:	dd2b      	ble.n	8003918 <moveEnemyBullets+0x158>
            for(int j = i; j < MAX_BULLETS - 1; j++){
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	e01c      	b.n	8003900 <moveEnemyBullets+0x140>
                enemy_ammo.bullet_ar[j].x = enemy_ammo.bullet_ar[j+1].x;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3301      	adds	r3, #1
 80038ca:	4a1e      	ldr	r2, [pc, #120]	; (8003944 <moveEnemyBullets+0x184>)
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <moveEnemyBullets+0x184>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4413      	add	r3, r2
 80038dc:	460a      	mov	r2, r1
 80038de:	709a      	strb	r2, [r3, #2]
                enemy_ammo.bullet_ar[j].y = enemy_ammo.bullet_ar[j+1].y;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3301      	adds	r3, #1
 80038e4:	4a17      	ldr	r2, [pc, #92]	; (8003944 <moveEnemyBullets+0x184>)
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80038ee:	4a15      	ldr	r2, [pc, #84]	; (8003944 <moveEnemyBullets+0x184>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	4413      	add	r3, r2
 80038f6:	460a      	mov	r2, r1
 80038f8:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_BULLETS - 1; j++){
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3301      	adds	r3, #1
 80038fe:	607b      	str	r3, [r7, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b04      	cmp	r3, #4
 8003904:	dddf      	ble.n	80038c6 <moveEnemyBullets+0x106>
            }
            enemy_ammo.in_play--;
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <moveEnemyBullets+0x184>)
 8003908:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	b25a      	sxtb	r2, r3
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <moveEnemyBullets+0x184>)
 8003916:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < enemy_ammo.in_play; i++){
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3301      	adds	r3, #1
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <moveEnemyBullets+0x184>)
 8003920:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003924:	461a      	mov	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4293      	cmp	r3, r2
 800392a:	f6ff af58 	blt.w	80037de <moveEnemyBullets+0x1e>
        }
    }
    displayAmmo(LIGHT_BLUE);
 800392e:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003932:	f000 fac7 	bl	8003ec4 <displayAmmo>
 8003936:	e000      	b.n	800393a <moveEnemyBullets+0x17a>
        return;
 8003938:	bf00      	nop
}
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000051 	.word	0x20000051
 8003944:	20002118 	.word	0x20002118
 8003948:	2000004c 	.word	0x2000004c
 800394c:	20001eeb 	.word	0x20001eeb

08003950 <moveComets>:

void moveComets(){
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
	displayComets(DARK_GREY);
 8003956:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800395a:	f000 fb11 	bl	8003f80 <displayComets>
	for (int i = 0; i<Comet.in_play; i++){
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e0f2      	b.n	8003b4a <moveComets+0x1fa>
		for(int j = 0; j < Comet.comet_ar[i].size; j++){
 8003964:	2300      	movs	r3, #0
 8003966:	60bb      	str	r3, [r7, #8]
 8003968:	e05f      	b.n	8003a2a <moveComets+0xda>
			if(Comet.comet_ar[i].x + j <= SpaceShip.x + SPACESHIP_WIDTH / 2 && Comet.comet_ar[i].x + j >= SpaceShip.x - SPACESHIP_WIDTH / 2){
 800396a:	4a80      	ldr	r2, [pc, #512]	; (8003b6c <moveComets+0x21c>)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	785b      	ldrb	r3, [r3, #1]
 8003974:	461a      	mov	r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	441a      	add	r2, r3
 800397a:	4b7d      	ldr	r3, [pc, #500]	; (8003b70 <moveComets+0x220>)
 800397c:	f993 3000 	ldrsb.w	r3, [r3]
 8003980:	3302      	adds	r3, #2
 8003982:	429a      	cmp	r2, r3
 8003984:	dc4e      	bgt.n	8003a24 <moveComets+0xd4>
 8003986:	4a79      	ldr	r2, [pc, #484]	; (8003b6c <moveComets+0x21c>)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	785b      	ldrb	r3, [r3, #1]
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	441a      	add	r2, r3
 8003996:	4b76      	ldr	r3, [pc, #472]	; (8003b70 <moveComets+0x220>)
 8003998:	f993 3000 	ldrsb.w	r3, [r3]
 800399c:	3b02      	subs	r3, #2
 800399e:	429a      	cmp	r2, r3
 80039a0:	db40      	blt.n	8003a24 <moveComets+0xd4>
				if(powerUp == 2 && Comet.comet_ar[i].y + Comet.comet_ar[i].size - 1 >= SpaceShip.y - SPACESHIP_HEIGHT / 2){
 80039a2:	4b74      	ldr	r3, [pc, #464]	; (8003b74 <moveComets+0x224>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d11e      	bne.n	80039e8 <moveComets+0x98>
 80039aa:	4a70      	ldr	r2, [pc, #448]	; (8003b6c <moveComets+0x21c>)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	789b      	ldrb	r3, [r3, #2]
 80039b4:	4619      	mov	r1, r3
 80039b6:	4a6d      	ldr	r2, [pc, #436]	; (8003b6c <moveComets+0x21c>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80039c2:	18ca      	adds	r2, r1, r3
 80039c4:	4b6a      	ldr	r3, [pc, #424]	; (8003b70 <moveComets+0x220>)
 80039c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	429a      	cmp	r2, r3
 80039ce:	db0b      	blt.n	80039e8 <moveComets+0x98>
					hitComet(420,i);
 80039d0:	68f9      	ldr	r1, [r7, #12]
 80039d2:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80039d6:	f000 f9a1 	bl	8003d1c <hitComet>
					displayPowerup(DARK_GREY);
 80039da:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80039de:	f000 fcaf 	bl	8004340 <displayPowerup>
					powerUp = 0;
 80039e2:	4b64      	ldr	r3, [pc, #400]	; (8003b74 <moveComets+0x224>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
				}
                if (Comet.comet_ar[i].y + Comet.comet_ar[i].size - 1 >= SpaceShip.y - SPACESHIP_HEIGHT / 2 && hit == 0){
 80039e8:	4a60      	ldr	r2, [pc, #384]	; (8003b6c <moveComets+0x21c>)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	789b      	ldrb	r3, [r3, #2]
 80039f2:	4619      	mov	r1, r3
 80039f4:	4a5d      	ldr	r2, [pc, #372]	; (8003b6c <moveComets+0x21c>)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003a00:	18ca      	adds	r2, r1, r3
 8003a02:	4b5b      	ldr	r3, [pc, #364]	; (8003b70 <moveComets+0x220>)
 8003a04:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	db0a      	blt.n	8003a24 <moveComets+0xd4>
 8003a0e:	4b5a      	ldr	r3, [pc, #360]	; (8003b78 <moveComets+0x228>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <moveComets+0xd4>
                    hitComet(420,i);
 8003a16:	68f9      	ldr	r1, [r7, #12]
 8003a18:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003a1c:	f000 f97e 	bl	8003d1c <hitComet>
                    beenHit();
 8003a20:	f000 fbd8 	bl	80041d4 <beenHit>
		for(int j = 0; j < Comet.comet_ar[i].size; j++){
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	3301      	adds	r3, #1
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	4a50      	ldr	r2, [pc, #320]	; (8003b6c <moveComets+0x21c>)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003a36:	461a      	mov	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	db95      	blt.n	800396a <moveComets+0x1a>
                }
            }
        }
        if(powerUp == 1 && SpaceShip.x >= Comet.comet_ar[i].x && SpaceShip.x <= Comet.comet_ar[i].x + Comet.comet_ar[i].size){
 8003a3e:	4b4d      	ldr	r3, [pc, #308]	; (8003b74 <moveComets+0x224>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d133      	bne.n	8003aae <moveComets+0x15e>
 8003a46:	4b4a      	ldr	r3, [pc, #296]	; (8003b70 <moveComets+0x220>)
 8003a48:	f993 3000 	ldrsb.w	r3, [r3]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4a47      	ldr	r2, [pc, #284]	; (8003b6c <moveComets+0x21c>)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	785b      	ldrb	r3, [r3, #1]
 8003a58:	4299      	cmp	r1, r3
 8003a5a:	db28      	blt.n	8003aae <moveComets+0x15e>
 8003a5c:	4b44      	ldr	r3, [pc, #272]	; (8003b70 <moveComets+0x220>)
 8003a5e:	f993 3000 	ldrsb.w	r3, [r3]
 8003a62:	4619      	mov	r1, r3
 8003a64:	4a41      	ldr	r2, [pc, #260]	; (8003b6c <moveComets+0x21c>)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	785b      	ldrb	r3, [r3, #1]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	4a3e      	ldr	r2, [pc, #248]	; (8003b6c <moveComets+0x21c>)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003a7c:	4403      	add	r3, r0
 8003a7e:	4299      	cmp	r1, r3
 8003a80:	dc15      	bgt.n	8003aae <moveComets+0x15e>
        	hitComet(420,i);
 8003a82:	68f9      	ldr	r1, [r7, #12]
 8003a84:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003a88:	f000 f948 	bl	8003d1c <hitComet>
        	if(powerUp_delay == 0){
 8003a8c:	4b3b      	ldr	r3, [pc, #236]	; (8003b7c <moveComets+0x22c>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <moveComets+0x152>
        		displayPowerup(DARK_GREY);
 8003a94:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003a98:	f000 fc52 	bl	8004340 <displayPowerup>
        		powerUp = 0;
 8003a9c:	4b35      	ldr	r3, [pc, #212]	; (8003b74 <moveComets+0x224>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]

        	}
        	powerUp_delay--;
 8003aa2:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <moveComets+0x22c>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4b34      	ldr	r3, [pc, #208]	; (8003b7c <moveComets+0x22c>)
 8003aac:	701a      	strb	r2, [r3, #0]
        }
        Comet.comet_ar[i].y++;
 8003aae:	4a2f      	ldr	r2, [pc, #188]	; (8003b6c <moveComets+0x21c>)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	789b      	ldrb	r3, [r3, #2]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	b2d9      	uxtb	r1, r3
 8003abc:	4a2b      	ldr	r2, [pc, #172]	; (8003b6c <moveComets+0x21c>)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	460a      	mov	r2, r1
 8003ac6:	709a      	strb	r2, [r3, #2]
        if (Comet.comet_ar[i].y > SCREEN_HEIGHT - 1){
 8003ac8:	4a28      	ldr	r2, [pc, #160]	; (8003b6c <moveComets+0x21c>)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	789b      	ldrb	r3, [r3, #2]
 8003ad2:	2b3b      	cmp	r3, #59	; 0x3b
 8003ad4:	d936      	bls.n	8003b44 <moveComets+0x1f4>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	e027      	b.n	8003b2c <moveComets+0x1dc>
                Comet.comet_ar[j].x = Comet.comet_ar[j+1].x;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	4a22      	ldr	r2, [pc, #136]	; (8003b6c <moveComets+0x21c>)
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	7859      	ldrb	r1, [r3, #1]
 8003ae8:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <moveComets+0x21c>)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	460a      	mov	r2, r1
 8003af2:	705a      	strb	r2, [r3, #1]
                Comet.comet_ar[j].y = Comet.comet_ar[j+1].y;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3301      	adds	r3, #1
 8003af8:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <moveComets+0x21c>)
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	7899      	ldrb	r1, [r3, #2]
 8003b00:	4a1a      	ldr	r2, [pc, #104]	; (8003b6c <moveComets+0x21c>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	460a      	mov	r2, r1
 8003b0a:	709a      	strb	r2, [r3, #2]
                Comet.comet_ar[j].size = Comet.comet_ar[j+1].size;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <moveComets+0x21c>)
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003b1a:	4a14      	ldr	r2, [pc, #80]	; (8003b6c <moveComets+0x21c>)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	460a      	mov	r2, r1
 8003b24:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	607b      	str	r3, [r7, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	ddd4      	ble.n	8003adc <moveComets+0x18c>
            }
            Comet.in_play--;
 8003b32:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <moveComets+0x21c>)
 8003b34:	f993 3000 	ldrsb.w	r3, [r3]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	b25a      	sxtb	r2, r3
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <moveComets+0x21c>)
 8003b42:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<Comet.in_play; i++){
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3301      	adds	r3, #1
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <moveComets+0x21c>)
 8003b4c:	f993 3000 	ldrsb.w	r3, [r3]
 8003b50:	461a      	mov	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4293      	cmp	r3, r2
 8003b56:	f6ff af05 	blt.w	8003964 <moveComets+0x14>
        }
    }
    displayComets(GREY);
 8003b5a:	f249 6096 	movw	r0, #38550	; 0x9696
 8003b5e:	f000 fa0f 	bl	8003f80 <displayComets>
}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20002128 	.word	0x20002128
 8003b70:	2000004c 	.word	0x2000004c
 8003b74:	20002172 	.word	0x20002172
 8003b78:	20001eeb 	.word	0x20001eeb
 8003b7c:	20002173 	.word	0x20002173

08003b80 <moveStars>:

void moveStars(){
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
	displayStars(DARK_GREY);
 8003b86:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003b8a:	f000 f969 	bl	8003e60 <displayStars>
    for (int i = 0; i<Star.in_play; i++){
 8003b8e:	2300      	movs	r3, #0
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	e046      	b.n	8003c22 <moveStars+0xa2>
        Star.star_ar[i].y++;
 8003b94:	4a2a      	ldr	r2, [pc, #168]	; (8003c40 <moveStars+0xc0>)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	b259      	sxtb	r1, r3
 8003ba8:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <moveStars+0xc0>)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	460a      	mov	r2, r1
 8003bb2:	709a      	strb	r2, [r3, #2]
        if (Star.star_ar[i].y > SCREEN_HEIGHT - 4){
 8003bb4:	4a22      	ldr	r2, [pc, #136]	; (8003c40 <moveStars+0xc0>)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4413      	add	r3, r2
 8003bbc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003bc0:	2b38      	cmp	r3, #56	; 0x38
 8003bc2:	dd2b      	ble.n	8003c1c <moveStars+0x9c>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	e01c      	b.n	8003c04 <moveStars+0x84>
                Star.star_ar[j].x = Star.star_ar[j+1].x;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	4a1c      	ldr	r2, [pc, #112]	; (8003c40 <moveStars+0xc0>)
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003bd8:	4a19      	ldr	r2, [pc, #100]	; (8003c40 <moveStars+0xc0>)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
 8003be0:	460a      	mov	r2, r1
 8003be2:	705a      	strb	r2, [r3, #1]
                Star.star_ar[j].y = Star.star_ar[j+1].y;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	3301      	adds	r3, #1
 8003be8:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <moveStars+0xc0>)
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003bf2:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <moveStars+0xc0>)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4413      	add	r3, r2
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	709a      	strb	r2, [r3, #2]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	dddf      	ble.n	8003bca <moveStars+0x4a>
            }
            Star.in_play--;
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <moveStars+0xc0>)
 8003c0c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	b25a      	sxtb	r2, r3
 8003c18:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <moveStars+0xc0>)
 8003c1a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Star.in_play; i++){
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <moveStars+0xc0>)
 8003c24:	f993 3000 	ldrsb.w	r3, [r3]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	dbb1      	blt.n	8003b94 <moveStars+0x14>
        }
    }
    displayStars(YELLOW);
 8003c30:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003c34:	f000 f914 	bl	8003e60 <displayStars>
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20002154 	.word	0x20002154

08003c44 <moveSpaceship>:

void moveSpaceship(int direction){
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	displaySpaceShip(DARK_GREY);
 8003c4c:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003c50:	f000 f9d6 	bl	8004000 <displaySpaceShip>
	if(powerUp > 0){
 8003c54:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <moveSpaceship+0xcc>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <moveSpaceship+0x20>
		displayPowerup(DARK_GREY);
 8003c5c:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003c60:	f000 fb6e 	bl	8004340 <displayPowerup>
	}
    if(direction < 0){
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	da26      	bge.n	8003cb8 <moveSpaceship+0x74>
        SpaceShip.x--;
 8003c6a:	4b2a      	ldr	r3, [pc, #168]	; (8003d14 <moveSpaceship+0xd0>)
 8003c6c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	b25a      	sxtb	r2, r3
 8003c78:	4b26      	ldr	r3, [pc, #152]	; (8003d14 <moveSpaceship+0xd0>)
 8003c7a:	701a      	strb	r2, [r3, #0]
        if(SpaceShip.x < SPACESHIP_WIDTH/2) {
 8003c7c:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <moveSpaceship+0xd0>)
 8003c7e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	dc02      	bgt.n	8003c8c <moveSpaceship+0x48>
        	SpaceShip.x = (SPACESHIP_WIDTH/2);
 8003c86:	4b23      	ldr	r3, [pc, #140]	; (8003d14 <moveSpaceship+0xd0>)
 8003c88:	2202      	movs	r2, #2
 8003c8a:	701a      	strb	r2, [r3, #0]
        }
        displaySpaceShip(spaceshipCurrentColor);
 8003c8c:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <moveSpaceship+0xd4>)
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f9b5 	bl	8004000 <displaySpaceShip>
        if(powerUp == 1){
 8003c96:	4b1e      	ldr	r3, [pc, #120]	; (8003d10 <moveSpaceship+0xcc>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d103      	bne.n	8003ca6 <moveSpaceship+0x62>
        	displayPowerup(RED);
 8003c9e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003ca2:	f000 fb4d 	bl	8004340 <displayPowerup>
        }
        if(powerUp == 2){
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <moveSpaceship+0xcc>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d12b      	bne.n	8003d06 <moveSpaceship+0xc2>
        	displayPowerup(LIGHT_BLUE);
 8003cae:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003cb2:	f000 fb45 	bl	8004340 <displayPowerup>
        }
        return;
 8003cb6:	e026      	b.n	8003d06 <moveSpaceship+0xc2>
    }
    SpaceShip.x++;
 8003cb8:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <moveSpaceship+0xd0>)
 8003cba:	f993 3000 	ldrsb.w	r3, [r3]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	b25a      	sxtb	r2, r3
 8003cc6:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <moveSpaceship+0xd0>)
 8003cc8:	701a      	strb	r2, [r3, #0]
    if(SpaceShip.x > SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1) {
 8003cca:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <moveSpaceship+0xd0>)
 8003ccc:	f993 3000 	ldrsb.w	r3, [r3]
 8003cd0:	2b4d      	cmp	r3, #77	; 0x4d
 8003cd2:	dd02      	ble.n	8003cda <moveSpaceship+0x96>
    	SpaceShip.x = SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1;
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <moveSpaceship+0xd0>)
 8003cd6:	224d      	movs	r2, #77	; 0x4d
 8003cd8:	701a      	strb	r2, [r3, #0]
    }
    displaySpaceShip(spaceshipCurrentColor);
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <moveSpaceship+0xd4>)
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 f98e 	bl	8004000 <displaySpaceShip>
    if(powerUp == 1){
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <moveSpaceship+0xcc>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d103      	bne.n	8003cf4 <moveSpaceship+0xb0>
    	displayPowerup(RED);
 8003cec:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003cf0:	f000 fb26 	bl	8004340 <displayPowerup>
    }
	if(powerUp == 2){
 8003cf4:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <moveSpaceship+0xcc>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d105      	bne.n	8003d08 <moveSpaceship+0xc4>
		displayPowerup(LIGHT_BLUE);
 8003cfc:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003d00:	f000 fb1e 	bl	8004340 <displayPowerup>
 8003d04:	e000      	b.n	8003d08 <moveSpaceship+0xc4>
        return;
 8003d06:	bf00      	nop
	}
}
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20002172 	.word	0x20002172
 8003d14:	2000004c 	.word	0x2000004c
 8003d18:	2000004e 	.word	0x2000004e

08003d1c <hitComet>:

void hitComet(int bul,int com){
 8003d1c:	b590      	push	{r4, r7, lr}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
    money += Comet.comet_ar[com].coins;
 8003d26:	4a4b      	ldr	r2, [pc, #300]	; (8003e54 <hitComet+0x138>)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003d32:	461a      	mov	r2, r3
 8003d34:	4b48      	ldr	r3, [pc, #288]	; (8003e58 <hitComet+0x13c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4413      	add	r3, r2
 8003d3a:	4a47      	ldr	r2, [pc, #284]	; (8003e58 <hitComet+0x13c>)
 8003d3c:	6013      	str	r3, [r2, #0]
    Displ_FillArea(Comet.comet_ar[com].x * 4, Comet.comet_ar[com].y * 4, Comet.comet_ar[com].size * 4, Comet.comet_ar[com].size * 4, DARK_GREY);
 8003d3e:	4a45      	ldr	r2, [pc, #276]	; (8003e54 <hitComet+0x138>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	b298      	uxth	r0, r3
 8003d4e:	4a41      	ldr	r2, [pc, #260]	; (8003e54 <hitComet+0x138>)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	789b      	ldrb	r3, [r3, #2]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	b299      	uxth	r1, r3
 8003d5e:	4a3d      	ldr	r2, [pc, #244]	; (8003e54 <hitComet+0x138>)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	4c38      	ldr	r4, [pc, #224]	; (8003e54 <hitComet+0x138>)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4423      	add	r3, r4
 8003d78:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	f642 442c 	movw	r4, #11308	; 0x2c2c
 8003d86:	9400      	str	r4, [sp, #0]
 8003d88:	f000 ff5e 	bl	8004c48 <Displ_FillArea>
    if(bul != 420){
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8003d92:	d024      	beq.n	8003dde <hitComet+0xc2>
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	e01c      	b.n	8003dd4 <hitComet+0xb8>
            ammo.bullet_ar[j].x = ammo.bullet_ar[j+1].x;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	4a2f      	ldr	r2, [pc, #188]	; (8003e5c <hitComet+0x140>)
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	4413      	add	r3, r2
 8003da4:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003da8:	4a2c      	ldr	r2, [pc, #176]	; (8003e5c <hitComet+0x140>)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	460a      	mov	r2, r1
 8003db2:	709a      	strb	r2, [r3, #2]
            ammo.bullet_ar[j].y = ammo.bullet_ar[j+1].y;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3301      	adds	r3, #1
 8003db8:	4a28      	ldr	r2, [pc, #160]	; (8003e5c <hitComet+0x140>)
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003dc2:	4a26      	ldr	r2, [pc, #152]	; (8003e5c <hitComet+0x140>)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	4413      	add	r3, r2
 8003dca:	460a      	mov	r2, r1
 8003dcc:	70da      	strb	r2, [r3, #3]
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	dddf      	ble.n	8003d9a <hitComet+0x7e>
        }
        powerups();
 8003dda:	f000 fa6d 	bl	80042b8 <powerups>
    }

    for(int j = com; j < MAX_COMETS - 1; j++){
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	e027      	b.n	8003e34 <hitComet+0x118>
        Comet.comet_ar[j].x = Comet.comet_ar[j+1].x;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	3301      	adds	r3, #1
 8003de8:	4a1a      	ldr	r2, [pc, #104]	; (8003e54 <hitComet+0x138>)
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	7859      	ldrb	r1, [r3, #1]
 8003df0:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <hitComet+0x138>)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	460a      	mov	r2, r1
 8003dfa:	705a      	strb	r2, [r3, #1]
        Comet.comet_ar[j].y = Comet.comet_ar[j+1].y;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <hitComet+0x138>)
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	7899      	ldrb	r1, [r3, #2]
 8003e08:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <hitComet+0x138>)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	460a      	mov	r2, r1
 8003e12:	709a      	strb	r2, [r3, #2]
        Comet.comet_ar[j].size = Comet.comet_ar[j+1].size;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	3301      	adds	r3, #1
 8003e18:	4a0e      	ldr	r2, [pc, #56]	; (8003e54 <hitComet+0x138>)
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003e22:	4a0c      	ldr	r2, [pc, #48]	; (8003e54 <hitComet+0x138>)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	460a      	mov	r2, r1
 8003e2c:	70da      	strb	r2, [r3, #3]
    for(int j = com; j < MAX_COMETS - 1; j++){
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	3301      	adds	r3, #1
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	ddd4      	ble.n	8003de4 <hitComet+0xc8>
    }
    Comet.in_play--;
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <hitComet+0x138>)
 8003e3c:	f993 3000 	ldrsb.w	r3, [r3]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	b25a      	sxtb	r2, r3
 8003e48:	4b02      	ldr	r3, [pc, #8]	; (8003e54 <hitComet+0x138>)
 8003e4a:	701a      	strb	r2, [r3, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd90      	pop	{r4, r7, pc}
 8003e54:	20002128 	.word	0x20002128
 8003e58:	2000216c 	.word	0x2000216c
 8003e5c:	20002108 	.word	0x20002108

08003e60 <displayStars>:




void displayStars(uint16_t color){
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	4603      	mov	r3, r0
 8003e68:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < Star.in_play; i++){
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	e01a      	b.n	8003ea6 <displayStars+0x46>
    	Displ_FillArea(Star.star_ar[i].x * 4, Star.star_ar[i].y * 4, 4, 4, color);
 8003e70:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <displayStars+0x60>)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	4413      	add	r3, r2
 8003e78:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	b298      	uxth	r0, r3
 8003e82:	4a0f      	ldr	r2, [pc, #60]	; (8003ec0 <displayStars+0x60>)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	b299      	uxth	r1, r3
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	2304      	movs	r3, #4
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	f000 fed4 	bl	8004c48 <Displ_FillArea>
    for(int i = 0; i < Star.in_play; i++){
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <displayStars+0x60>)
 8003ea8:	f993 3000 	ldrsb.w	r3, [r3]
 8003eac:	461a      	mov	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	dbdd      	blt.n	8003e70 <displayStars+0x10>
    }
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20002154 	.word	0x20002154

08003ec4 <displayAmmo>:

void displayAmmo(uint16_t color){
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	4603      	mov	r3, r0
 8003ecc:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < ammo.in_play; i++){
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	e01a      	b.n	8003f0a <displayAmmo+0x46>
        Displ_FillArea(ammo.bullet_ar[i].x * 4, ammo.bullet_ar[i].y * 4, 4, 4, color);
 8003ed4:	4a27      	ldr	r2, [pc, #156]	; (8003f74 <displayAmmo+0xb0>)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4413      	add	r3, r2
 8003edc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	b298      	uxth	r0, r3
 8003ee6:	4a23      	ldr	r2, [pc, #140]	; (8003f74 <displayAmmo+0xb0>)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4413      	add	r3, r2
 8003eee:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	b299      	uxth	r1, r3
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	2304      	movs	r3, #4
 8003efe:	2204      	movs	r2, #4
 8003f00:	f000 fea2 	bl	8004c48 <Displ_FillArea>
    for(int i = 0; i < ammo.in_play; i++){
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3301      	adds	r3, #1
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <displayAmmo+0xb0>)
 8003f0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003f10:	461a      	mov	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4293      	cmp	r3, r2
 8003f16:	dbdd      	blt.n	8003ed4 <displayAmmo+0x10>
    }
    if(in_multiplayer){
 8003f18:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <displayAmmo+0xb4>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d025      	beq.n	8003f6c <displayAmmo+0xa8>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8003f20:	2300      	movs	r3, #0
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	e01b      	b.n	8003f5e <displayAmmo+0x9a>
            Displ_FillArea(enemy_ammo.bullet_ar[i].x * 4, enemy_ammo.bullet_ar[i].y * 4, 4, 4, LIGHT_BLUE);
 8003f26:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <displayAmmo+0xb8>)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	b298      	uxth	r0, r3
 8003f38:	4a10      	ldr	r2, [pc, #64]	; (8003f7c <displayAmmo+0xb8>)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	b299      	uxth	r1, r3
 8003f4a:	f24f 73db 	movw	r3, #63451	; 0xf7db
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2304      	movs	r3, #4
 8003f52:	2204      	movs	r2, #4
 8003f54:	f000 fe78 	bl	8004c48 <Displ_FillArea>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <displayAmmo+0xb8>)
 8003f60:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003f64:	461a      	mov	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	dbdc      	blt.n	8003f26 <displayAmmo+0x62>
        }
    }
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20002108 	.word	0x20002108
 8003f78:	20000051 	.word	0x20000051
 8003f7c:	20002118 	.word	0x20002118

08003f80 <displayComets>:

void displayComets(uint16_t color){
 8003f80:	b590      	push	{r4, r7, lr}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	4603      	mov	r3, r0
 8003f88:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < Comet.in_play; i++){
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e029      	b.n	8003fe4 <displayComets+0x64>
        Displ_FillArea(Comet.comet_ar[i].x * 4, Comet.comet_ar[i].y  * 4, Comet.comet_ar[i].size * 4, Comet.comet_ar[i].size * 4, color);
 8003f90:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <displayComets+0x7c>)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	785b      	ldrb	r3, [r3, #1]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	b298      	uxth	r0, r3
 8003fa0:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <displayComets+0x7c>)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	789b      	ldrb	r3, [r3, #2]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	b299      	uxth	r1, r3
 8003fb0:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <displayComets+0x7c>)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	4c0e      	ldr	r4, [pc, #56]	; (8003ffc <displayComets+0x7c>)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4423      	add	r3, r4
 8003fca:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	b29c      	uxth	r4, r3
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	4623      	mov	r3, r4
 8003fda:	f000 fe35 	bl	8004c48 <Displ_FillArea>
    for (int i = 0; i < Comet.in_play; i++){
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <displayComets+0x7c>)
 8003fe6:	f993 3000 	ldrsb.w	r3, [r3]
 8003fea:	461a      	mov	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	dbce      	blt.n	8003f90 <displayComets+0x10>
    }
}
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd90      	pop	{r4, r7, pc}
 8003ffc:	20002128 	.word	0x20002128

08004000 <displaySpaceShip>:

void displaySpaceShip(uint16_t color){
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af02      	add	r7, sp, #8
 8004006:	4603      	mov	r3, r0
 8004008:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(SpaceShip.x*4 - 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 800400a:	4b1d      	ldr	r3, [pc, #116]	; (8004080 <displaySpaceShip+0x80>)
 800400c:	f993 3000 	ldrsb.w	r3, [r3]
 8004010:	3b02      	subs	r3, #2
 8004012:	b29b      	uxth	r3, r3
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	b298      	uxth	r0, r3
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	2310      	movs	r3, #16
 800401e:	2204      	movs	r2, #4
 8004020:	21d8      	movs	r1, #216	; 0xd8
 8004022:	f000 fe11 	bl	8004c48 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 + 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8004026:	4b16      	ldr	r3, [pc, #88]	; (8004080 <displaySpaceShip+0x80>)
 8004028:	f993 3000 	ldrsb.w	r3, [r3]
 800402c:	3302      	adds	r3, #2
 800402e:	b29b      	uxth	r3, r3
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	b298      	uxth	r0, r3
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	2310      	movs	r3, #16
 800403a:	2204      	movs	r2, #4
 800403c:	21d8      	movs	r1, #216	; 0xd8
 800403e:	f000 fe03 	bl	8004c48 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 - 4, SCREEN_HEIGHT*4 -20, 12, 4, color);
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <displaySpaceShip+0x80>)
 8004044:	f993 3000 	ldrsb.w	r3, [r3]
 8004048:	3b01      	subs	r3, #1
 800404a:	b29b      	uxth	r3, r3
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	b298      	uxth	r0, r3
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	2304      	movs	r3, #4
 8004056:	220c      	movs	r2, #12
 8004058:	21dc      	movs	r1, #220	; 0xdc
 800405a:	f000 fdf5 	bl	8004c48 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4, SCREEN_HEIGHT*4 -28, 4, 16, color);
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <displaySpaceShip+0x80>)
 8004060:	f993 3000 	ldrsb.w	r3, [r3]
 8004064:	b29b      	uxth	r3, r3
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	b298      	uxth	r0, r3
 800406a:	88fb      	ldrh	r3, [r7, #6]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	2310      	movs	r3, #16
 8004070:	2204      	movs	r2, #4
 8004072:	21d4      	movs	r1, #212	; 0xd4
 8004074:	f000 fde8 	bl	8004c48 <Displ_FillArea>

}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	2000004c 	.word	0x2000004c

08004084 <displayLives>:

void displayLives(){
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af02      	add	r7, sp, #8
    for(int i = 0; i < lives; i++){
 800408a:	2300      	movs	r3, #0
 800408c:	607b      	str	r3, [r7, #4]
 800408e:	e013      	b.n	80040b8 <displayLives+0x34>
    	Displ_FillArea(HEARTS_X+HEARTS_OFFSET*i, HEARTS_Y, 4, 4, LIGHT_GREEN);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	b29b      	uxth	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	0052      	lsls	r2, r2, #1
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	b29b      	uxth	r3, r3
 800409e:	3308      	adds	r3, #8
 80040a0:	b298      	uxth	r0, r3
 80040a2:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	2304      	movs	r3, #4
 80040aa:	2204      	movs	r2, #4
 80040ac:	2108      	movs	r1, #8
 80040ae:	f000 fdcb 	bl	8004c48 <Displ_FillArea>
    for(int i = 0; i < lives; i++){
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3301      	adds	r3, #1
 80040b6:	607b      	str	r3, [r7, #4]
 80040b8:	4b16      	ldr	r3, [pc, #88]	; (8004114 <displayLives+0x90>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4293      	cmp	r3, r2
 80040c2:	dbe5      	blt.n	8004090 <displayLives+0xc>
    }
    if(lives < 3){
 80040c4:	4b13      	ldr	r3, [pc, #76]	; (8004114 <displayLives+0x90>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d81f      	bhi.n	800410c <displayLives+0x88>
    	for(int i = 0; i < 3 - lives; i++){
 80040cc:	2300      	movs	r3, #0
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	e015      	b.n	80040fe <displayLives+0x7a>
    		Displ_FillArea(HEARTS_X+HEARTS_OFFSET*(3-i), HEARTS_Y, 4, 4, DARK_GREY);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	f1c3 0303 	rsb	r3, r3, #3
 80040d8:	b29b      	uxth	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	0052      	lsls	r2, r2, #1
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3308      	adds	r3, #8
 80040e6:	b298      	uxth	r0, r3
 80040e8:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2304      	movs	r3, #4
 80040f0:	2204      	movs	r2, #4
 80040f2:	2108      	movs	r1, #8
 80040f4:	f000 fda8 	bl	8004c48 <Displ_FillArea>
    	for(int i = 0; i < 3 - lives; i++){
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	3301      	adds	r3, #1
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	4b05      	ldr	r3, [pc, #20]	; (8004114 <displayLives+0x90>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	f1c3 0303 	rsb	r3, r3, #3
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	dbe2      	blt.n	80040d2 <displayLives+0x4e>
    	}
    }
}
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	2000004a 	.word	0x2000004a

08004118 <spaceShipHitColorToggle>:


void spaceShipHitColorToggle(){
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
    if(spaceshipCurrentColor == RED && hit % 10 == 0){
 800411c:	4b1f      	ldr	r3, [pc, #124]	; (800419c <spaceShipHitColorToggle+0x84>)
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8004124:	d112      	bne.n	800414c <spaceShipHitColorToggle+0x34>
 8004126:	4b1e      	ldr	r3, [pc, #120]	; (80041a0 <spaceShipHitColorToggle+0x88>)
 8004128:	781a      	ldrb	r2, [r3, #0]
 800412a:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <spaceShipHitColorToggle+0x8c>)
 800412c:	fba3 1302 	umull	r1, r3, r3, r2
 8004130:	08d9      	lsrs	r1, r3, #3
 8004132:	460b      	mov	r3, r1
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d104      	bne.n	800414c <spaceShipHitColorToggle+0x34>
        spaceshipCurrentColor = WHITE;
 8004142:	4b16      	ldr	r3, [pc, #88]	; (800419c <spaceShipHitColorToggle+0x84>)
 8004144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004148:	801a      	strh	r2, [r3, #0]
 800414a:	e011      	b.n	8004170 <spaceShipHitColorToggle+0x58>
    }else if(hit % 10 == 0){
 800414c:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <spaceShipHitColorToggle+0x88>)
 800414e:	781a      	ldrb	r2, [r3, #0]
 8004150:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <spaceShipHitColorToggle+0x8c>)
 8004152:	fba3 1302 	umull	r1, r3, r3, r2
 8004156:	08d9      	lsrs	r1, r3, #3
 8004158:	460b      	mov	r3, r1
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d103      	bne.n	8004170 <spaceShipHitColorToggle+0x58>
        spaceshipCurrentColor = RED;
 8004168:	4b0c      	ldr	r3, [pc, #48]	; (800419c <spaceShipHitColorToggle+0x84>)
 800416a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800416e:	801a      	strh	r2, [r3, #0]
    }
    if(hit < hit_graph_counter){
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <spaceShipHitColorToggle+0x88>)
 8004172:	781a      	ldrb	r2, [r3, #0]
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <spaceShipHitColorToggle+0x90>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d206      	bcs.n	800418a <spaceShipHitColorToggle+0x72>
        hit++;
 800417c:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <spaceShipHitColorToggle+0x88>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	b2da      	uxtb	r2, r3
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <spaceShipHitColorToggle+0x88>)
 8004186:	701a      	strb	r2, [r3, #0]
    }else{
        hit = 0;
    }
}
 8004188:	e002      	b.n	8004190 <spaceShipHitColorToggle+0x78>
        hit = 0;
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <spaceShipHitColorToggle+0x88>)
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	2000004e 	.word	0x2000004e
 80041a0:	20001eeb 	.word	0x20001eeb
 80041a4:	cccccccd 	.word	0xcccccccd
 80041a8:	20000050 	.word	0x20000050

080041ac <delayBullet>:

void delayBullet(){
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
    if (bullet_delay > 0){
 80041b0:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <delayBullet+0x24>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <delayBullet+0x18>
        bullet_delay--;
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <delayBullet+0x24>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	3b01      	subs	r3, #1
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <delayBullet+0x24>)
 80041c2:	701a      	strb	r2, [r3, #0]
    }
}
 80041c4:	bf00      	nop
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20002169 	.word	0x20002169

080041d4 <beenHit>:

void beenHit(){
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
    hit = 1;
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <beenHit+0x34>)
 80041da:	2201      	movs	r2, #1
 80041dc:	701a      	strb	r2, [r3, #0]
    lives--;
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <beenHit+0x38>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	4b09      	ldr	r3, [pc, #36]	; (800420c <beenHit+0x38>)
 80041e8:	701a      	strb	r2, [r3, #0]
    if(lives <= 0){
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <beenHit+0x38>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d107      	bne.n	8004202 <beenHit+0x2e>
        play = 0;
 80041f2:	4b07      	ldr	r3, [pc, #28]	; (8004210 <beenHit+0x3c>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]
        hit = 0;
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <beenHit+0x34>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
        initSpaceInvaders();
 80041fe:	f7ff f821 	bl	8003244 <initSpaceInvaders>

    }
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20001eeb 	.word	0x20001eeb
 800420c:	2000004a 	.word	0x2000004a
 8004210:	2000004b 	.word	0x2000004b

08004214 <send_Bullet>:

void send_Bullet(point bullet){
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	80b8      	strh	r0, [r7, #4]
    if(connected && bullet.y != -2){
 800421c:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <send_Bullet+0x94>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d03c      	beq.n	800429e <send_Bullet+0x8a>
 8004224:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004228:	f113 0f02 	cmn.w	r3, #2
 800422c:	d037      	beq.n	800429e <send_Bullet+0x8a>
        //QD << "a bullet has been send to the other player at x:" << bullet.x;  // change to uart debug
        if(enemy_ammo.in_play < MAX_BULLETS){
 800422e:	4b1f      	ldr	r3, [pc, #124]	; (80042ac <send_Bullet+0x98>)
 8004230:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004234:	2b05      	cmp	r3, #5
 8004236:	dc2c      	bgt.n	8004292 <send_Bullet+0x7e>
            enemy_ammo.bullet_ar[enemy_ammo.in_play].x = rand() % ((PLAYABLE_MAX - 1) - PLAYABLE_OFFSET) + PLAYABLE_OFFSET;
 8004238:	f005 fe2c 	bl	8009e94 <rand>
 800423c:	4601      	mov	r1, r0
 800423e:	4b1c      	ldr	r3, [pc, #112]	; (80042b0 <send_Bullet+0x9c>)
 8004240:	fb83 2301 	smull	r2, r3, r3, r1
 8004244:	115a      	asrs	r2, r3, #5
 8004246:	17cb      	asrs	r3, r1, #31
 8004248:	1ad2      	subs	r2, r2, r3
 800424a:	4613      	mov	r3, r2
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	1aca      	subs	r2, r1, r3
 8004256:	b2d3      	uxtb	r3, r2
 8004258:	3305      	adds	r3, #5
 800425a:	b2da      	uxtb	r2, r3
 800425c:	4b13      	ldr	r3, [pc, #76]	; (80042ac <send_Bullet+0x98>)
 800425e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004262:	b251      	sxtb	r1, r2
 8004264:	4a11      	ldr	r2, [pc, #68]	; (80042ac <send_Bullet+0x98>)
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	4413      	add	r3, r2
 800426a:	460a      	mov	r2, r1
 800426c:	709a      	strb	r2, [r3, #2]
            enemy_ammo.bullet_ar[enemy_ammo.in_play].y = 3;
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <send_Bullet+0x98>)
 8004270:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004274:	4a0d      	ldr	r2, [pc, #52]	; (80042ac <send_Bullet+0x98>)
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4413      	add	r3, r2
 800427a:	2203      	movs	r2, #3
 800427c:	70da      	strb	r2, [r3, #3]
            enemy_ammo.in_play++;
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <send_Bullet+0x98>)
 8004280:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	3301      	adds	r3, #1
 8004288:	b2db      	uxtb	r3, r3
 800428a:	b25a      	sxtb	r2, r3
 800428c:	4b07      	ldr	r3, [pc, #28]	; (80042ac <send_Bullet+0x98>)
 800428e:	705a      	strb	r2, [r3, #1]
        }else{
            star_delay--;
        }
    }
}
 8004290:	e005      	b.n	800429e <send_Bullet+0x8a>
            star_delay--;
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <send_Bullet+0xa0>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	3b01      	subs	r3, #1
 8004298:	b2da      	uxtb	r2, r3
 800429a:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <send_Bullet+0xa0>)
 800429c:	701a      	strb	r2, [r3, #0]
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20002105 	.word	0x20002105
 80042ac:	20002118 	.word	0x20002118
 80042b0:	76b981db 	.word	0x76b981db
 80042b4:	20002171 	.word	0x20002171

080042b8 <powerups>:

void powerups(){
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
    uint8_t powerupornot = rand() % ((3 - 0) - 0) + 0;
 80042be:	f005 fde9 	bl	8009e94 <rand>
 80042c2:	4602      	mov	r2, r0
 80042c4:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <powerups+0x7c>)
 80042c6:	fb83 3102 	smull	r3, r1, r3, r2
 80042ca:	17d3      	asrs	r3, r2, #31
 80042cc:	1ac9      	subs	r1, r1, r3
 80042ce:	460b      	mov	r3, r1
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	440b      	add	r3, r1
 80042d4:	1ad1      	subs	r1, r2, r3
 80042d6:	460b      	mov	r3, r1
 80042d8:	71fb      	strb	r3, [r7, #7]
    if(powerUp == 0 && powerupornot == 0){
 80042da:	4b17      	ldr	r3, [pc, #92]	; (8004338 <powerups+0x80>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d123      	bne.n	800432a <powerups+0x72>
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d120      	bne.n	800432a <powerups+0x72>
        powerUp = rand() % ((3 - 1) - 0) + 1;
 80042e8:	f005 fdd4 	bl	8009e94 <rand>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	bfb8      	it	lt
 80042f6:	425b      	neglt	r3, r3
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	3301      	adds	r3, #1
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <powerups+0x80>)
 8004300:	701a      	strb	r2, [r3, #0]
        if(powerUp == 1){
 8004302:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <powerups+0x80>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d104      	bne.n	8004314 <powerups+0x5c>
        	displayPowerup(RED);
 800430a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800430e:	f000 f817 	bl	8004340 <displayPowerup>
 8004312:	e007      	b.n	8004324 <powerups+0x6c>
        }
        else if(powerUp == 2){
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <powerups+0x80>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d103      	bne.n	8004324 <powerups+0x6c>
        	displayPowerup(LIGHT_BLUE);
 800431c:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8004320:	f000 f80e 	bl	8004340 <displayPowerup>
        }
        powerUp_delay = MAX_DELAY_POWERUP;
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <powerups+0x84>)
 8004326:	2205      	movs	r2, #5
 8004328:	701a      	strb	r2, [r3, #0]
    }
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	55555556 	.word	0x55555556
 8004338:	20002172 	.word	0x20002172
 800433c:	20002173 	.word	0x20002173

08004340 <displayPowerup>:

void displayPowerup(uint16_t color){
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af02      	add	r7, sp, #8
 8004346:	4603      	mov	r3, r0
 8004348:	80fb      	strh	r3, [r7, #6]

    if(powerUp == 1){
 800434a:	4b1f      	ldr	r3, [pc, #124]	; (80043c8 <displayPowerup+0x88>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d11c      	bne.n	800438c <displayPowerup+0x4c>
		Displ_FillArea(SpaceShip.x * 4, 0, 4, 180, color);
 8004352:	4b1e      	ldr	r3, [pc, #120]	; (80043cc <displayPowerup+0x8c>)
 8004354:	f993 3000 	ldrsb.w	r3, [r3]
 8004358:	b29b      	uxth	r3, r3
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	b298      	uxth	r0, r3
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	23b4      	movs	r3, #180	; 0xb4
 8004364:	2204      	movs	r2, #4
 8004366:	2100      	movs	r1, #0
 8004368:	f000 fc6e 	bl	8004c48 <Displ_FillArea>
		Displ_FillArea(SpaceShip.x * 4 + 1, 180, 2, 30, color);
 800436c:	4b17      	ldr	r3, [pc, #92]	; (80043cc <displayPowerup+0x8c>)
 800436e:	f993 3000 	ldrsb.w	r3, [r3]
 8004372:	b29b      	uxth	r3, r3
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	b29b      	uxth	r3, r3
 8004378:	3301      	adds	r3, #1
 800437a:	b298      	uxth	r0, r3
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	231e      	movs	r3, #30
 8004382:	2202      	movs	r2, #2
 8004384:	21b4      	movs	r1, #180	; 0xb4
 8004386:	f000 fc5f 	bl	8004c48 <Displ_FillArea>
    }
    else if(powerUp == 2){
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
    }
}
 800438a:	e019      	b.n	80043c0 <displayPowerup+0x80>
    else if(powerUp == 2){
 800438c:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <displayPowerup+0x88>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d115      	bne.n	80043c0 <displayPowerup+0x80>
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
 8004394:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <displayPowerup+0x8c>)
 8004396:	f993 3000 	ldrsb.w	r3, [r3]
 800439a:	b29b      	uxth	r3, r3
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3301      	adds	r3, #1
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	b218      	sxth	r0, r3
 80043a6:	4b09      	ldr	r3, [pc, #36]	; (80043cc <displayPowerup+0x8c>)
 80043a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3302      	adds	r3, #2
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	b219      	sxth	r1, r3
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	220e      	movs	r2, #14
 80043bc:	f000 fd24 	bl	8004e08 <Displ_drawCircle>
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20002172 	.word	0x20002172
 80043cc:	2000004c 	.word	0x2000004c

080043d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d6:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <HAL_MspInit+0x44>)
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <HAL_MspInit+0x44>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	6193      	str	r3, [r2, #24]
 80043e2:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <HAL_MspInit+0x44>)
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	607b      	str	r3, [r7, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_MspInit+0x44>)
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <HAL_MspInit+0x44>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f8:	61d3      	str	r3, [r2, #28]
 80043fa:	4b06      	ldr	r3, [pc, #24]	; (8004414 <HAL_MspInit+0x44>)
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000

08004418 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08a      	sub	sp, #40	; 0x28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004420:	f107 0314 	add.w	r3, r7, #20
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	60da      	str	r2, [r3, #12]
 800442e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a17      	ldr	r2, [pc, #92]	; (8004494 <HAL_I2C_MspInit+0x7c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d127      	bne.n	800448a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800443a:	4b17      	ldr	r3, [pc, #92]	; (8004498 <HAL_I2C_MspInit+0x80>)
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	4a16      	ldr	r2, [pc, #88]	; (8004498 <HAL_I2C_MspInit+0x80>)
 8004440:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004444:	6153      	str	r3, [r2, #20]
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <HAL_I2C_MspInit+0x80>)
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004452:	2303      	movs	r3, #3
 8004454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004456:	2312      	movs	r3, #18
 8004458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800445a:	2301      	movs	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800445e:	2303      	movs	r3, #3
 8004460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004462:	2304      	movs	r3, #4
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004466:	f107 0314 	add.w	r3, r7, #20
 800446a:	4619      	mov	r1, r3
 800446c:	480b      	ldr	r0, [pc, #44]	; (800449c <HAL_I2C_MspInit+0x84>)
 800446e:	f001 fd21 	bl	8005eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004472:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_I2C_MspInit+0x80>)
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <HAL_I2C_MspInit+0x80>)
 8004478:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800447c:	61d3      	str	r3, [r2, #28]
 800447e:	4b06      	ldr	r3, [pc, #24]	; (8004498 <HAL_I2C_MspInit+0x80>)
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800448a:	bf00      	nop
 800448c:	3728      	adds	r7, #40	; 0x28
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40005800 	.word	0x40005800
 8004498:	40021000 	.word	0x40021000
 800449c:	48001400 	.word	0x48001400

080044a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08a      	sub	sp, #40	; 0x28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a8:	f107 0314 	add.w	r3, r7, #20
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2e      	ldr	r2, [pc, #184]	; (8004578 <HAL_SPI_MspInit+0xd8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d156      	bne.n	8004570 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044c2:	4b2e      	ldr	r3, [pc, #184]	; (800457c <HAL_SPI_MspInit+0xdc>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	4a2d      	ldr	r2, [pc, #180]	; (800457c <HAL_SPI_MspInit+0xdc>)
 80044c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044cc:	61d3      	str	r3, [r2, #28]
 80044ce:	4b2b      	ldr	r3, [pc, #172]	; (800457c <HAL_SPI_MspInit+0xdc>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044da:	4b28      	ldr	r3, [pc, #160]	; (800457c <HAL_SPI_MspInit+0xdc>)
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	4a27      	ldr	r2, [pc, #156]	; (800457c <HAL_SPI_MspInit+0xdc>)
 80044e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044e4:	6153      	str	r3, [r2, #20]
 80044e6:	4b25      	ldr	r3, [pc, #148]	; (800457c <HAL_SPI_MspInit+0xdc>)
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80044f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80044f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f8:	2302      	movs	r3, #2
 80044fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004500:	2303      	movs	r3, #3
 8004502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004504:	2305      	movs	r3, #5
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004508:	f107 0314 	add.w	r3, r7, #20
 800450c:	4619      	mov	r1, r3
 800450e:	481c      	ldr	r0, [pc, #112]	; (8004580 <HAL_SPI_MspInit+0xe0>)
 8004510:	f001 fcd0 	bl	8005eb4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8004514:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <HAL_SPI_MspInit+0xe4>)
 8004516:	4a1c      	ldr	r2, [pc, #112]	; (8004588 <HAL_SPI_MspInit+0xe8>)
 8004518:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800451a:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_SPI_MspInit+0xe4>)
 800451c:	2210      	movs	r2, #16
 800451e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004520:	4b18      	ldr	r3, [pc, #96]	; (8004584 <HAL_SPI_MspInit+0xe4>)
 8004522:	2200      	movs	r2, #0
 8004524:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004526:	4b17      	ldr	r3, [pc, #92]	; (8004584 <HAL_SPI_MspInit+0xe4>)
 8004528:	2280      	movs	r2, #128	; 0x80
 800452a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800452c:	4b15      	ldr	r3, [pc, #84]	; (8004584 <HAL_SPI_MspInit+0xe4>)
 800452e:	2200      	movs	r2, #0
 8004530:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004532:	4b14      	ldr	r3, [pc, #80]	; (8004584 <HAL_SPI_MspInit+0xe4>)
 8004534:	2200      	movs	r2, #0
 8004536:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004538:	4b12      	ldr	r3, [pc, #72]	; (8004584 <HAL_SPI_MspInit+0xe4>)
 800453a:	2200      	movs	r2, #0
 800453c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800453e:	4b11      	ldr	r3, [pc, #68]	; (8004584 <HAL_SPI_MspInit+0xe4>)
 8004540:	2200      	movs	r2, #0
 8004542:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004544:	480f      	ldr	r0, [pc, #60]	; (8004584 <HAL_SPI_MspInit+0xe4>)
 8004546:	f001 fae0 	bl	8005b0a <HAL_DMA_Init>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8004550:	f7fe fc74 	bl	8002e3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a0b      	ldr	r2, [pc, #44]	; (8004584 <HAL_SPI_MspInit+0xe4>)
 8004558:	655a      	str	r2, [r3, #84]	; 0x54
 800455a:	4a0a      	ldr	r2, [pc, #40]	; (8004584 <HAL_SPI_MspInit+0xe4>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004560:	2200      	movs	r2, #0
 8004562:	2100      	movs	r1, #0
 8004564:	2024      	movs	r0, #36	; 0x24
 8004566:	f001 fa9a 	bl	8005a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800456a:	2024      	movs	r0, #36	; 0x24
 800456c:	f001 fab3 	bl	8005ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004570:	bf00      	nop
 8004572:	3728      	adds	r7, #40	; 0x28
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40003800 	.word	0x40003800
 800457c:	40021000 	.word	0x40021000
 8004580:	48000400 	.word	0x48000400
 8004584:	20001fa8 	.word	0x20001fa8
 8004588:	40020058 	.word	0x40020058

0800458c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08c      	sub	sp, #48	; 0x30
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004594:	f107 031c 	add.w	r3, r7, #28
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	605a      	str	r2, [r3, #4]
 800459e:	609a      	str	r2, [r3, #8]
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a2f      	ldr	r2, [pc, #188]	; (8004668 <HAL_UART_MspInit+0xdc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d129      	bne.n	8004602 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80045ae:	4b2f      	ldr	r3, [pc, #188]	; (800466c <HAL_UART_MspInit+0xe0>)
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	4a2e      	ldr	r2, [pc, #184]	; (800466c <HAL_UART_MspInit+0xe0>)
 80045b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b8:	61d3      	str	r3, [r2, #28]
 80045ba:	4b2c      	ldr	r3, [pc, #176]	; (800466c <HAL_UART_MspInit+0xe0>)
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c6:	4b29      	ldr	r3, [pc, #164]	; (800466c <HAL_UART_MspInit+0xe0>)
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	4a28      	ldr	r2, [pc, #160]	; (800466c <HAL_UART_MspInit+0xe0>)
 80045cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d0:	6153      	str	r3, [r2, #20]
 80045d2:	4b26      	ldr	r3, [pc, #152]	; (800466c <HAL_UART_MspInit+0xe0>)
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80045de:	230c      	movs	r3, #12
 80045e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e2:	2302      	movs	r3, #2
 80045e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045ea:	2303      	movs	r3, #3
 80045ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80045ee:	2307      	movs	r3, #7
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f2:	f107 031c 	add.w	r3, r7, #28
 80045f6:	4619      	mov	r1, r3
 80045f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045fc:	f001 fc5a 	bl	8005eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004600:	e02d      	b.n	800465e <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1a      	ldr	r2, [pc, #104]	; (8004670 <HAL_UART_MspInit+0xe4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d128      	bne.n	800465e <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800460c:	4b17      	ldr	r3, [pc, #92]	; (800466c <HAL_UART_MspInit+0xe0>)
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	4a16      	ldr	r2, [pc, #88]	; (800466c <HAL_UART_MspInit+0xe0>)
 8004612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004616:	61d3      	str	r3, [r2, #28]
 8004618:	4b14      	ldr	r3, [pc, #80]	; (800466c <HAL_UART_MspInit+0xe0>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <HAL_UART_MspInit+0xe0>)
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	4a10      	ldr	r2, [pc, #64]	; (800466c <HAL_UART_MspInit+0xe0>)
 800462a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800462e:	6153      	str	r3, [r2, #20]
 8004630:	4b0e      	ldr	r3, [pc, #56]	; (800466c <HAL_UART_MspInit+0xe0>)
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800463c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004642:	2302      	movs	r3, #2
 8004644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004646:	2300      	movs	r3, #0
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800464a:	2303      	movs	r3, #3
 800464c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800464e:	2307      	movs	r3, #7
 8004650:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004652:	f107 031c 	add.w	r3, r7, #28
 8004656:	4619      	mov	r1, r3
 8004658:	4806      	ldr	r0, [pc, #24]	; (8004674 <HAL_UART_MspInit+0xe8>)
 800465a:	f001 fc2b 	bl	8005eb4 <HAL_GPIO_Init>
}
 800465e:	bf00      	nop
 8004660:	3730      	adds	r7, #48	; 0x30
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40004400 	.word	0x40004400
 800466c:	40021000 	.word	0x40021000
 8004670:	40004800 	.word	0x40004800
 8004674:	48000400 	.word	0x48000400

08004678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800467c:	e7fe      	b.n	800467c <NMI_Handler+0x4>

0800467e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800467e:	b480      	push	{r7}
 8004680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004682:	e7fe      	b.n	8004682 <HardFault_Handler+0x4>

08004684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004688:	e7fe      	b.n	8004688 <MemManage_Handler+0x4>

0800468a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800468a:	b480      	push	{r7}
 800468c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800468e:	e7fe      	b.n	800468e <BusFault_Handler+0x4>

08004690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004694:	e7fe      	b.n	8004694 <UsageFault_Handler+0x4>

08004696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004696:	b480      	push	{r7}
 8004698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046b2:	b480      	push	{r7}
 80046b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046b6:	bf00      	nop
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046c4:	f001 f8cc 	bl	8005860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046c8:	bf00      	nop
 80046ca:	bd80      	pop	{r7, pc}

080046cc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 80046d0:	2001      	movs	r0, #1
 80046d2:	f001 fd91 	bl	80061f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80046e0:	4802      	ldr	r0, [pc, #8]	; (80046ec <DMA1_Channel5_IRQHandler+0x10>)
 80046e2:	f001 faf6 	bl	8005cd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20001fa8 	.word	0x20001fa8

080046f0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80046f4:	4802      	ldr	r0, [pc, #8]	; (8004700 <SPI2_IRQHandler+0x10>)
 80046f6:	f004 fbb7 	bl	8008e68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20001f44 	.word	0x20001f44

08004704 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 8004708:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800470c:	f001 fd74 	bl	80061f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8004710:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004714:	f001 fd70 	bl	80061f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8004718:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800471c:	f001 fd6c 	bl	80061f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004720:	bf00      	nop
 8004722:	bd80      	pop	{r7, pc}

08004724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  return 1;
 8004728:	2301      	movs	r3, #1
}
 800472a:	4618      	mov	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <_kill>:

int _kill(int pid, int sig)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800473e:	f005 fabb 	bl	8009cb8 <__errno>
 8004742:	4603      	mov	r3, r0
 8004744:	2216      	movs	r2, #22
 8004746:	601a      	str	r2, [r3, #0]
  return -1;
 8004748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800474c:	4618      	mov	r0, r3
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <_exit>:

void _exit (int status)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800475c:	f04f 31ff 	mov.w	r1, #4294967295
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff ffe7 	bl	8004734 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004766:	e7fe      	b.n	8004766 <_exit+0x12>

08004768 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e00a      	b.n	8004790 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800477a:	f3af 8000 	nop.w
 800477e:	4601      	mov	r1, r0
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	60ba      	str	r2, [r7, #8]
 8004786:	b2ca      	uxtb	r2, r1
 8004788:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	3301      	adds	r3, #1
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	dbf0      	blt.n	800477a <_read+0x12>
  }

  return len;
 8004798:	687b      	ldr	r3, [r7, #4]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047ca:	605a      	str	r2, [r3, #4]
  return 0;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <_isatty>:

int _isatty(int file)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80047e2:	2301      	movs	r3, #1
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004814:	4a14      	ldr	r2, [pc, #80]	; (8004868 <_sbrk+0x5c>)
 8004816:	4b15      	ldr	r3, [pc, #84]	; (800486c <_sbrk+0x60>)
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004820:	4b13      	ldr	r3, [pc, #76]	; (8004870 <_sbrk+0x64>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004828:	4b11      	ldr	r3, [pc, #68]	; (8004870 <_sbrk+0x64>)
 800482a:	4a12      	ldr	r2, [pc, #72]	; (8004874 <_sbrk+0x68>)
 800482c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800482e:	4b10      	ldr	r3, [pc, #64]	; (8004870 <_sbrk+0x64>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4413      	add	r3, r2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	429a      	cmp	r2, r3
 800483a:	d207      	bcs.n	800484c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800483c:	f005 fa3c 	bl	8009cb8 <__errno>
 8004840:	4603      	mov	r3, r0
 8004842:	220c      	movs	r2, #12
 8004844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004846:	f04f 33ff 	mov.w	r3, #4294967295
 800484a:	e009      	b.n	8004860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800484c:	4b08      	ldr	r3, [pc, #32]	; (8004870 <_sbrk+0x64>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004852:	4b07      	ldr	r3, [pc, #28]	; (8004870 <_sbrk+0x64>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	4a05      	ldr	r2, [pc, #20]	; (8004870 <_sbrk+0x64>)
 800485c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800485e:	68fb      	ldr	r3, [r7, #12]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20004000 	.word	0x20004000
 800486c:	00000400 	.word	0x00000400
 8004870:	20002174 	.word	0x20002174
 8004874:	200029a0 	.word	0x200029a0

08004878 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <SystemInit+0x20>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	4a05      	ldr	r2, [pc, #20]	; (8004898 <SystemInit+0x20>)
 8004884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	e000ed00 	.word	0xe000ed00

0800489c <Displ_Select>:

/******************************************
 * @brief   enable display, disabling touch
 *          device selected if CS low
 ******************************************/
void Displ_Select(void) {
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
    if (TOUCH_SPI==DISPL_SPI){                                                      // if SPI port shared (display <-> touch)
        if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {                   // if display not yet selected
 80048a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048a8:	f001 fc76 	bl	8006198 <HAL_GPIO_ReadPin>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d017      	beq.n	80048e2 <Displ_Select+0x46>
            HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch
 80048b2:	2201      	movs	r2, #1
 80048b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048b8:	480b      	ldr	r0, [pc, #44]	; (80048e8 <Displ_Select+0x4c>)
 80048ba:	f001 fc85 	bl	80061c8 <HAL_GPIO_WritePin>
            SET_DISPL_SPI_BAUDRATE;                                                 //change SPI port speed as per display needs
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <Displ_Select+0x50>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	490a      	ldr	r1, [pc, #40]	; (80048ec <Displ_Select+0x50>)
 80048c4:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80048c8:	4013      	ands	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
 80048cc:	4b07      	ldr	r3, [pc, #28]	; (80048ec <Displ_Select+0x50>)
 80048ce:	4a07      	ldr	r2, [pc, #28]	; (80048ec <Displ_Select+0x50>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
 80048d4:	2200      	movs	r2, #0
 80048d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048de:	f001 fc73 	bl	80061c8 <HAL_GPIO_WritePin>
        }
    }
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	48000400 	.word	0x48000400
 80048ec:	40003800 	.word	0x40003800

080048f0 <Displ_Transmit>:
 * @PARAM   DC_Status   indicates if sending command or data
 *          data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6039      	str	r1, [r7, #0]
 80048f8:	4611      	mov	r1, r2
 80048fa:	461a      	mov	r2, r3
 80048fc:	4603      	mov	r3, r0
 80048fe:	71fb      	strb	r3, [r7, #7]
 8004900:	460b      	mov	r3, r1
 8004902:	80bb      	strh	r3, [r7, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	71bb      	strb	r3, [r7, #6]

    while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8004908:	bf00      	nop
 800490a:	4b23      	ldr	r3, [pc, #140]	; (8004998 <Displ_Transmit+0xa8>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0fa      	beq.n	800490a <Displ_Transmit+0x1a>

    Displ_Select();
 8004914:	f7ff ffc2 	bl	800489c <Displ_Select>
    HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	461a      	mov	r2, r3
 800491c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004924:	f001 fc50 	bl	80061c8 <HAL_GPIO_WritePin>

    if (isTouchGFXBuffer){
 8004928:	79bb      	ldrb	r3, [r7, #6]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d016      	beq.n	800495c <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
        uint32_t *limit=(uint32_t*)(data+dataSize);
 800492e:	88bb      	ldrh	r3, [r7, #4]
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	4413      	add	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e00b      	b.n	8004954 <Displ_Transmit+0x64>
            *data32=__REV16(*data32);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	ba5b      	rev16	r3, r3
 8004946:	60bb      	str	r3, [r7, #8]
  return result;
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	601a      	str	r2, [r3, #0]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	3304      	adds	r3, #4
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	429a      	cmp	r2, r3
 800495a:	d3ef      	bcc.n	800493c <Displ_Transmit+0x4c>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
        Displ_SpiAvailable=0;
        HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
        if (dataSize<DISPL_DMA_CUTOFF) {
 800495c:	88bb      	ldrh	r3, [r7, #4]
 800495e:	2b13      	cmp	r3, #19
 8004960:	d80d      	bhi.n	800497e <Displ_Transmit+0x8e>
#endif //DISPLAY_SPI_DMA_MODE
            Displ_SpiAvailable=0;
 8004962:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <Displ_Transmit+0xa8>)
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8004968:	88ba      	ldrh	r2, [r7, #4]
 800496a:	f04f 33ff 	mov.w	r3, #4294967295
 800496e:	6839      	ldr	r1, [r7, #0]
 8004970:	480a      	ldr	r0, [pc, #40]	; (800499c <Displ_Transmit+0xac>)
 8004972:	f004 f814 	bl	800899e <HAL_SPI_Transmit>
            Displ_SpiAvailable=1;
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <Displ_Transmit+0xa8>)
 8004978:	2201      	movs	r2, #1
 800497a:	701a      	strb	r2, [r3, #0]
            Displ_SpiAvailable=0;
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
        }
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
    }
 800497c:	e008      	b.n	8004990 <Displ_Transmit+0xa0>
            Displ_SpiAvailable=0;
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <Displ_Transmit+0xa8>)
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8004984:	88bb      	ldrh	r3, [r7, #4]
 8004986:	461a      	mov	r2, r3
 8004988:	6839      	ldr	r1, [r7, #0]
 800498a:	4804      	ldr	r0, [pc, #16]	; (800499c <Displ_Transmit+0xac>)
 800498c:	f004 f97c 	bl	8008c88 <HAL_SPI_Transmit_DMA>
    }
 8004990:	bf00      	nop
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000058 	.word	0x20000058
 800499c:	20001f44 	.word	0x20001f44

080049a0 <Displ_WriteCommand>:


/**********************************
 * @BRIEF   transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	71fb      	strb	r3, [r7, #7]
    Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 80049aa:	1df9      	adds	r1, r7, #7
 80049ac:	2300      	movs	r3, #0
 80049ae:	2201      	movs	r2, #1
 80049b0:	2000      	movs	r0, #0
 80049b2:	f7ff ff9d 	bl	80048f0 <Displ_Transmit>
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <Displ_WriteData>:
 * @BRIEF   transmit a set of data in a SPI_DATA format
 * @PARAM   data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	4613      	mov	r3, r2
 80049ca:	71fb      	strb	r3, [r7, #7]
    if (buff_size==0) return;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <Displ_WriteData+0x24>
    Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	68f9      	ldr	r1, [r7, #12]
 80049da:	2001      	movs	r0, #1
 80049dc:	f7ff ff88 	bl	80048f0 <Displ_Transmit>
 80049e0:	e000      	b.n	80049e4 <Displ_WriteData+0x26>
    if (buff_size==0) return;
 80049e2:	bf00      	nop
}
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <ILI9XXX_Init>:


/**********************************
 * @brief   ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
    Displ_Select();
 80049f0:	f7ff ff54 	bl	800489c <Displ_Select>

    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 80049f4:	2200      	movs	r2, #0
 80049f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049fe:	f001 fbe3 	bl	80061c8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8004a02:	2001      	movs	r0, #1
 8004a04:	f000 ff4c 	bl	80058a0 <HAL_Delay>
    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a12:	f001 fbd9 	bl	80061c8 <HAL_GPIO_WritePin>
    HAL_Delay(150);
 8004a16:	2096      	movs	r0, #150	; 0x96
 8004a18:	f000 ff42 	bl	80058a0 <HAL_Delay>
        Displ_WriteData(data,3);
    #endif
*/


    Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8004a1c:	203a      	movs	r0, #58	; 0x3a
 8004a1e:	f7ff ffbf 	bl	80049a0 <Displ_WriteCommand>
#ifdef Z_RGB666
    Displ_WriteData((uint8_t *)"\x66",1,0);     // RGB666
#endif
#ifdef Z_RGB565
    Displ_WriteData((uint8_t *)"\x55",1,0);     // RGB565
 8004a22:	2200      	movs	r2, #0
 8004a24:	2101      	movs	r1, #1
 8004a26:	4810      	ldr	r0, [pc, #64]	; (8004a68 <ILI9XXX_Init+0x7c>)
 8004a28:	f7ff ffc9 	bl	80049be <Displ_WriteData>
#endif
    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004a2c:	20b0      	movs	r0, #176	; 0xb0
 8004a2e:	f7ff ffb7 	bl	80049a0 <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004a32:	2200      	movs	r2, #0
 8004a34:	2101      	movs	r1, #1
 8004a36:	480d      	ldr	r0, [pc, #52]	; (8004a6c <ILI9XXX_Init+0x80>)
 8004a38:	f7ff ffc1 	bl	80049be <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004a3c:	20b0      	movs	r0, #176	; 0xb0
 8004a3e:	f7ff ffaf 	bl	80049a0 <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004a42:	2200      	movs	r2, #0
 8004a44:	2101      	movs	r1, #1
 8004a46:	4809      	ldr	r0, [pc, #36]	; (8004a6c <ILI9XXX_Init+0x80>)
 8004a48:	f7ff ffb9 	bl	80049be <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8004a4c:	2011      	movs	r0, #17
 8004a4e:	f7ff ffa7 	bl	80049a0 <Displ_WriteCommand>
    HAL_Delay(120);
 8004a52:	2078      	movs	r0, #120	; 0x78
 8004a54:	f000 ff24 	bl	80058a0 <HAL_Delay>

    Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8004a58:	2029      	movs	r0, #41	; 0x29
 8004a5a:	f7ff ffa1 	bl	80049a0 <Displ_WriteCommand>
    HAL_Delay(5);
 8004a5e:	2005      	movs	r0, #5
 8004a60:	f000 ff1e 	bl	80058a0 <HAL_Delay>

}
 8004a64:	bf00      	nop
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	0800b3f0 	.word	0x0800b3f0
 8004a6c:	0800b3f4 	.word	0x0800b3f4

08004a70 <Displ_SetAddressWindow>:
 *          information
 * @param  x1,y1,x2,y2 top left and bottom
 *                     right corner of the area
 *                     to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004a70:	b590      	push	{r4, r7, lr}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4604      	mov	r4, r0
 8004a78:	4608      	mov	r0, r1
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4623      	mov	r3, r4
 8004a80:	80fb      	strh	r3, [r7, #6]
 8004a82:	4603      	mov	r3, r0
 8004a84:	80bb      	strh	r3, [r7, #4]
 8004a86:	460b      	mov	r3, r1
 8004a88:	807b      	strh	r3, [r7, #2]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	803b      	strh	r3, [r7, #0]
    static uint8_t data[4];

    ((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8004a8e:	887b      	ldrh	r3, [r7, #2]
 8004a90:	061a      	lsls	r2, r3, #24
 8004a92:	887b      	ldrh	r3, [r7, #2]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	88fb      	ldrh	r3, [r7, #6]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	88fa      	ldrh	r2, [r7, #6]
 8004aa6:	0a12      	lsrs	r2, r2, #8
 8004aa8:	b292      	uxth	r2, r2
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <Displ_SetAddressWindow+0x90>)
 8004aae:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8004ab0:	202a      	movs	r0, #42	; 0x2a
 8004ab2:	f7ff ff75 	bl	80049a0 <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2104      	movs	r1, #4
 8004aba:	4811      	ldr	r0, [pc, #68]	; (8004b00 <Displ_SetAddressWindow+0x90>)
 8004abc:	f7ff ff7f 	bl	80049be <Displ_WriteData>

    ((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8004ac0:	883b      	ldrh	r3, [r7, #0]
 8004ac2:	061a      	lsls	r2, r3, #24
 8004ac4:	883b      	ldrh	r3, [r7, #0]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004acc:	431a      	orrs	r2, r3
 8004ace:	88bb      	ldrh	r3, [r7, #4]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	88ba      	ldrh	r2, [r7, #4]
 8004ad8:	0a12      	lsrs	r2, r2, #8
 8004ada:	b292      	uxth	r2, r2
 8004adc:	431a      	orrs	r2, r3
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <Displ_SetAddressWindow+0x90>)
 8004ae0:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8004ae2:	202b      	movs	r0, #43	; 0x2b
 8004ae4:	f7ff ff5c 	bl	80049a0 <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2104      	movs	r1, #4
 8004aec:	4804      	ldr	r0, [pc, #16]	; (8004b00 <Displ_SetAddressWindow+0x90>)
 8004aee:	f7ff ff66 	bl	80049be <Displ_WriteData>
    Displ_WriteCommand(ILI9XXX_MEMWR);
 8004af2:	202c      	movs	r0, #44	; 0x2c
 8004af4:	f7ff ff54 	bl	80049a0 <Displ_WriteCommand>
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd90      	pop	{r4, r7, pc}
 8004b00:	20002980 	.word	0x20002980

08004b04 <Displ_Init>:

/*****************************************************
 * @brief               first display initialization.
 * @param   orientation display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	71fb      	strb	r3, [r7, #7]
    if (TOUCH_SPI==DISPL_SPI){                                                  // if touch and display share the same SPI port
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);      // unselect display (will be selected at writing time)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b18:	f001 fb56 	bl	80061c8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch (will be selected at writing time)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b22:	4806      	ldr	r0, [pc, #24]	; (8004b3c <Displ_Init+0x38>)
 8004b24:	f001 fb50 	bl	80061c8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
        SET_DISPL_SPI_BAUDRATE;
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);    // select touch
        SET_TOUCH_SPI_BAUDRATE;
    }
    ILI9XXX_Init();
 8004b28:	f7ff ff60 	bl	80049ec <ILI9XXX_Init>
    Displ_Orientation(orientation);
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 f806 	bl	8004b40 <Displ_Orientation>
}
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	48000400 	.word	0x48000400

08004b40 <Displ_Orientation>:

/**********************************************
 * @brief       set orientation of the display
 * @param   m   orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	71fb      	strb	r3, [r7, #7]
    static uint8_t data[1];
    switch(orientation) {
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d837      	bhi.n	8004bc0 <Displ_Orientation+0x80>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <Displ_Orientation+0x18>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b69 	.word	0x08004b69
 8004b5c:	08004b7f 	.word	0x08004b7f
 8004b60:	08004b95 	.word	0x08004b95
 8004b64:	08004bab 	.word	0x08004bab
        case Displ_Orientat_0:
            data[0]=ILI9XXX_MADCTL_0DEG;
 8004b68:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <Displ_Orientation+0xa0>)
 8004b6a:	2288      	movs	r2, #136	; 0x88
 8004b6c:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <Displ_Orientation+0xa4>)
 8004b70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b74:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 8004b76:	4b1c      	ldr	r3, [pc, #112]	; (8004be8 <Displ_Orientation+0xa8>)
 8004b78:	22f0      	movs	r2, #240	; 0xf0
 8004b7a:	801a      	strh	r2, [r3, #0]
            break;
 8004b7c:	e020      	b.n	8004bc0 <Displ_Orientation+0x80>
        case Displ_Orientat_90:
            data[0]=ILI9XXX_MADCTL_90DEG;
 8004b7e:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <Displ_Orientation+0xa0>)
 8004b80:	22e8      	movs	r2, #232	; 0xe8
 8004b82:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 8004b84:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <Displ_Orientation+0xa4>)
 8004b86:	22f0      	movs	r2, #240	; 0xf0
 8004b88:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 8004b8a:	4b17      	ldr	r3, [pc, #92]	; (8004be8 <Displ_Orientation+0xa8>)
 8004b8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b90:	801a      	strh	r2, [r3, #0]
            break;
 8004b92:	e015      	b.n	8004bc0 <Displ_Orientation+0x80>
        case Displ_Orientat_180:
            data[0]=ILI9XXX_MADCTL_180DEG;
 8004b94:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <Displ_Orientation+0xa0>)
 8004b96:	2248      	movs	r2, #72	; 0x48
 8004b98:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8004b9a:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <Displ_Orientation+0xa4>)
 8004b9c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ba0:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 8004ba2:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <Displ_Orientation+0xa8>)
 8004ba4:	22f0      	movs	r2, #240	; 0xf0
 8004ba6:	801a      	strh	r2, [r3, #0]
            break;
 8004ba8:	e00a      	b.n	8004bc0 <Displ_Orientation+0x80>
        case Displ_Orientat_270:
            data[0]=ILI9XXX_MADCTL_270DEG;
 8004baa:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <Displ_Orientation+0xa0>)
 8004bac:	2228      	movs	r2, #40	; 0x28
 8004bae:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <Displ_Orientation+0xa4>)
 8004bb2:	22f0      	movs	r2, #240	; 0xf0
 8004bb4:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <Displ_Orientation+0xa8>)
 8004bb8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004bbc:	801a      	strh	r2, [r3, #0]
            break;
 8004bbe:	bf00      	nop
    }
    Displ_WriteCommand(ILI9XXX_MADCTL);
 8004bc0:	2036      	movs	r0, #54	; 0x36
 8004bc2:	f7ff feed 	bl	80049a0 <Displ_WriteCommand>
    Displ_WriteData(data,1,0);
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2101      	movs	r1, #1
 8004bca:	4805      	ldr	r0, [pc, #20]	; (8004be0 <Displ_Orientation+0xa0>)
 8004bcc:	f7ff fef7 	bl	80049be <Displ_WriteData>
    current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8004bd0:	4a06      	ldr	r2, [pc, #24]	; (8004bec <Displ_Orientation+0xac>)
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	7013      	strb	r3, [r2, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20002984 	.word	0x20002984
 8004be4:	2000217c 	.word	0x2000217c
 8004be8:	2000217a 	.word	0x2000217a
 8004bec:	20002178 	.word	0x20002178

08004bf0 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a05      	ldr	r2, [pc, #20]	; (8004c14 <HAL_SPI_ErrorCallback+0x24>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d102      	bne.n	8004c08 <HAL_SPI_ErrorCallback+0x18>
        Displ_SpiAvailable=1;
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_SPI_ErrorCallback+0x28>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	701a      	strb	r2, [r3, #0]
    }
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	40003800 	.word	0x40003800
 8004c18:	20000058 	.word	0x20000058

08004c1c <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a05      	ldr	r2, [pc, #20]	; (8004c40 <HAL_SPI_TxCpltCallback+0x24>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d102      	bne.n	8004c34 <HAL_SPI_TxCpltCallback+0x18>
        Displ_SpiAvailable=1;
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_SPI_TxCpltCallback+0x28>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]
    #ifdef DISPLAY_USING_TOUCHGFX
        DisplayDriver_TransferCompleteCallback();
    #endif

    }
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	40003800 	.word	0x40003800
 8004c44:	20000058 	.word	0x20000058

08004c48 <Displ_FillArea>:
/*****************************
 * @brief   fill a rectangle with a color
 * @param   x, y    top left corner of the rectangle
 *          w, h    width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b08b      	sub	sp, #44	; 0x2c
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	461a      	mov	r2, r3
 8004c56:	4623      	mov	r3, r4
 8004c58:	80fb      	strh	r3, [r7, #6]
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	80bb      	strh	r3, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	807b      	strh	r3, [r7, #2]
 8004c62:	4613      	mov	r3, r2
 8004c64:	803b      	strh	r3, [r7, #0]
 * -    swap buffers
 */

    uint32_t k,x1,y1,area,times;

    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	4a4f      	ldr	r2, [pc, #316]	; (8004da8 <Displ_FillArea+0x160>)
 8004c6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	f280 8096 	bge.w	8004da0 <Displ_FillArea+0x158>
 8004c74:	88bb      	ldrh	r3, [r7, #4]
 8004c76:	4a4d      	ldr	r2, [pc, #308]	; (8004dac <Displ_FillArea+0x164>)
 8004c78:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	f280 808f 	bge.w	8004da0 <Displ_FillArea+0x158>
 8004c82:	887b      	ldrh	r3, [r7, #2]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 808b 	beq.w	8004da0 <Displ_FillArea+0x158>
 8004c8a:	883b      	ldrh	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8087 	beq.w	8004da0 <Displ_FillArea+0x158>

    x1=x + w - 1;
 8004c92:	88fa      	ldrh	r2, [r7, #6]
 8004c94:	887b      	ldrh	r3, [r7, #2]
 8004c96:	4413      	add	r3, r2
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	623b      	str	r3, [r7, #32]
    if (x1 > _width) {
 8004c9c:	4b42      	ldr	r3, [pc, #264]	; (8004da8 <Displ_FillArea+0x160>)
 8004c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d903      	bls.n	8004cb2 <Displ_FillArea+0x6a>
        x1=_width;
 8004caa:	4b3f      	ldr	r3, [pc, #252]	; (8004da8 <Displ_FillArea+0x160>)
 8004cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cb0:	623b      	str	r3, [r7, #32]
    }

    y1=y + h - 1;
 8004cb2:	88ba      	ldrh	r2, [r7, #4]
 8004cb4:	883b      	ldrh	r3, [r7, #0]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	61fb      	str	r3, [r7, #28]
    if (y1 > _height) {
 8004cbc:	4b3b      	ldr	r3, [pc, #236]	; (8004dac <Displ_FillArea+0x164>)
 8004cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d903      	bls.n	8004cd2 <Displ_FillArea+0x8a>
        y1=_height;
 8004cca:	4b38      	ldr	r3, [pc, #224]	; (8004dac <Displ_FillArea+0x164>)
 8004ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cd0:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

    uint32_t data32;

    data32=(color>>8) | (color<<8) | (color<<24);   // supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8004cd2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004cd4:	0a1b      	lsrs	r3, r3, #8
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ce2:	061b      	lsls	r3, r3, #24
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
    area=((y1-y+1)*(x1-x+1));                       // area to fill in 16bit pixels
 8004ce8:	88bb      	ldrh	r3, [r7, #4]
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	88fa      	ldrh	r2, [r7, #6]
 8004cf2:	6a39      	ldr	r1, [r7, #32]
 8004cf4:	1a8a      	subs	r2, r1, r2
 8004cf6:	3201      	adds	r2, #1
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	60fb      	str	r3, [r7, #12]
    uint32_t *buf32Pos=(uint32_t *)dispBuffer;      //dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8004cfe:	4b2c      	ldr	r3, [pc, #176]	; (8004db0 <Displ_FillArea+0x168>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	617b      	str	r3, [r7, #20]
    if (area<(SIZEBUF>>1))                          // if area is smaller than dispBuffer
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d0a:	d204      	bcs.n	8004d16 <Displ_FillArea+0xce>
        times=(area>>1)+1;                          // number of times data32 has to be loaded into buffer
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	3301      	adds	r3, #1
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	e002      	b.n	8004d1c <Displ_FillArea+0xd4>
    else
        times=(SIZEBUF>>2);                         // dispBuffer size as 32bit-words
 8004d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d1a:	61bb      	str	r3, [r7, #24]
    for (k = 0; k < times; k++)
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d20:	e007      	b.n	8004d32 <Displ_FillArea+0xea>
        *(buf32Pos++)=data32;                       // loads buffer moving 32bit-words
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	1d1a      	adds	r2, r3, #4
 8004d26:	617a      	str	r2, [r7, #20]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	601a      	str	r2, [r3, #0]
    for (k = 0; k < times; k++)
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	3301      	adds	r3, #1
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
 8004d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d3f3      	bcc.n	8004d22 <Displ_FillArea+0xda>
    }
    datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
    Displ_SetAddressWindow(x, y, x1, y1);
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	88b9      	ldrh	r1, [r7, #4]
 8004d44:	88f8      	ldrh	r0, [r7, #6]
 8004d46:	f7ff fe93 	bl	8004a70 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
    times=(area>>(BUFLEVEL-1));                     //how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	0a5b      	lsrs	r3, r3, #9
 8004d4e:	61bb      	str	r3, [r7, #24]
    for  (k=0;k<times;k++) {
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
 8004d54:	e00a      	b.n	8004d6c <Displ_FillArea+0x124>
        Displ_WriteData(dispBuffer,SIZEBUF,0);
 8004d56:	4b16      	ldr	r3, [pc, #88]	; (8004db0 <Displ_FillArea+0x168>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff fe2c 	bl	80049be <Displ_WriteData>
    for  (k=0;k<times;k++) {
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	3301      	adds	r3, #1
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d3f0      	bcc.n	8004d56 <Displ_FillArea+0x10e>
    }
    Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8004d74:	4b0e      	ldr	r3, [pc, #56]	; (8004db0 <Displ_FillArea+0x168>)
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	005a      	lsls	r2, r3, #1
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	029b      	lsls	r3, r3, #10
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2200      	movs	r2, #0
 8004d84:	4619      	mov	r1, r3
 8004d86:	f7ff fe1a 	bl	80049be <Displ_WriteData>
    }
    Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8004d8a:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <Displ_FillArea+0x168>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <Displ_FillArea+0x16c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d101      	bne.n	8004d98 <Displ_FillArea+0x150>
 8004d94:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <Displ_FillArea+0x170>)
 8004d96:	e000      	b.n	8004d9a <Displ_FillArea+0x152>
 8004d98:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <Displ_FillArea+0x16c>)
 8004d9a:	4a05      	ldr	r2, [pc, #20]	; (8004db0 <Displ_FillArea+0x168>)
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e000      	b.n	8004da2 <Displ_FillArea+0x15a>
    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004da0:	bf00      	nop

}
 8004da2:	372c      	adds	r7, #44	; 0x2c
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd90      	pop	{r4, r7, pc}
 8004da8:	2000217a 	.word	0x2000217a
 8004dac:	2000217c 	.word	0x2000217c
 8004db0:	2000005c 	.word	0x2000005c
 8004db4:	20002180 	.word	0x20002180
 8004db8:	20002580 	.word	0x20002580

08004dbc <Displ_Pixel>:
/***********************
 * @brief   print a single pixel
 * @params  x, y    pixel position on display
 *          color   ... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	80fb      	strh	r3, [r7, #6]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	80bb      	strh	r3, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	4a0b      	ldr	r2, [pc, #44]	; (8004e00 <Displ_Pixel+0x44>)
 8004dd2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	da0e      	bge.n	8004df8 <Displ_Pixel+0x3c>
 8004dda:	88bb      	ldrh	r3, [r7, #4]
 8004ddc:	4a09      	ldr	r2, [pc, #36]	; (8004e04 <Displ_Pixel+0x48>)
 8004dde:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004de2:	4293      	cmp	r3, r2
 8004de4:	da08      	bge.n	8004df8 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8004de6:	88b9      	ldrh	r1, [r7, #4]
 8004de8:	88f8      	ldrh	r0, [r7, #6]
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	2301      	movs	r3, #1
 8004df0:	2201      	movs	r2, #1
 8004df2:	f7ff ff29 	bl	8004c48 <Displ_FillArea>
 8004df6:	e000      	b.n	8004dfa <Displ_Pixel+0x3e>
        return;
 8004df8:	bf00      	nop

}
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	2000217a 	.word	0x2000217a
 8004e04:	2000217c 	.word	0x2000217c

08004e08 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4604      	mov	r4, r0
 8004e10:	4608      	mov	r0, r1
 8004e12:	4611      	mov	r1, r2
 8004e14:	461a      	mov	r2, r3
 8004e16:	4623      	mov	r3, r4
 8004e18:	80fb      	strh	r3, [r7, #6]
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	80bb      	strh	r3, [r7, #4]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	807b      	strh	r3, [r7, #2]
 8004e22:	4613      	mov	r3, r2
 8004e24:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8004e26:	887b      	ldrh	r3, [r7, #2]
 8004e28:	f1c3 0301 	rsb	r3, r3, #1
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8004e30:	2301      	movs	r3, #1
 8004e32:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8004e34:	887b      	ldrh	r3, [r7, #2]
 8004e36:	461a      	mov	r2, r3
 8004e38:	03d2      	lsls	r2, r2, #15
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8004e46:	887b      	ldrh	r3, [r7, #2]
 8004e48:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8004e4a:	88f8      	ldrh	r0, [r7, #6]
 8004e4c:	88ba      	ldrh	r2, [r7, #4]
 8004e4e:	887b      	ldrh	r3, [r7, #2]
 8004e50:	4413      	add	r3, r2
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	883a      	ldrh	r2, [r7, #0]
 8004e56:	4619      	mov	r1, r3
 8004e58:	f7ff ffb0 	bl	8004dbc <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8004e5c:	88f8      	ldrh	r0, [r7, #6]
 8004e5e:	88ba      	ldrh	r2, [r7, #4]
 8004e60:	887b      	ldrh	r3, [r7, #2]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	883a      	ldrh	r2, [r7, #0]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f7ff ffa7 	bl	8004dbc <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8004e6e:	88fa      	ldrh	r2, [r7, #6]
 8004e70:	887b      	ldrh	r3, [r7, #2]
 8004e72:	4413      	add	r3, r2
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	88b9      	ldrh	r1, [r7, #4]
 8004e78:	883a      	ldrh	r2, [r7, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff ff9e 	bl	8004dbc <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 8004e80:	88fa      	ldrh	r2, [r7, #6]
 8004e82:	887b      	ldrh	r3, [r7, #2]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	88b9      	ldrh	r1, [r7, #4]
 8004e8a:	883a      	ldrh	r2, [r7, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff ff95 	bl	8004dbc <Displ_Pixel>

    while (x<y) {
 8004e92:	e081      	b.n	8004f98 <Displ_drawCircle+0x190>
        if (f >= 0) {
 8004e94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	db0e      	blt.n	8004eba <Displ_drawCircle+0xb2>
            y--;
 8004e9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8004ea8:	8a7b      	ldrh	r3, [r7, #18]
 8004eaa:	3302      	adds	r3, #2
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8004eb0:	8afa      	ldrh	r2, [r7, #22]
 8004eb2:	8a7b      	ldrh	r3, [r7, #18]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8004eba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8004ec6:	8abb      	ldrh	r3, [r7, #20]
 8004ec8:	3302      	adds	r3, #2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8004ece:	8afa      	ldrh	r2, [r7, #22]
 8004ed0:	8abb      	ldrh	r3, [r7, #20]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8004ed8:	88fa      	ldrh	r2, [r7, #6]
 8004eda:	8a3b      	ldrh	r3, [r7, #16]
 8004edc:	4413      	add	r3, r2
 8004ede:	b298      	uxth	r0, r3
 8004ee0:	88ba      	ldrh	r2, [r7, #4]
 8004ee2:	89fb      	ldrh	r3, [r7, #14]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	883a      	ldrh	r2, [r7, #0]
 8004eea:	4619      	mov	r1, r3
 8004eec:	f7ff ff66 	bl	8004dbc <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	8a3b      	ldrh	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	b298      	uxth	r0, r3
 8004ef8:	88ba      	ldrh	r2, [r7, #4]
 8004efa:	89fb      	ldrh	r3, [r7, #14]
 8004efc:	4413      	add	r3, r2
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	883a      	ldrh	r2, [r7, #0]
 8004f02:	4619      	mov	r1, r3
 8004f04:	f7ff ff5a 	bl	8004dbc <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8004f08:	88fa      	ldrh	r2, [r7, #6]
 8004f0a:	8a3b      	ldrh	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	b298      	uxth	r0, r3
 8004f10:	88ba      	ldrh	r2, [r7, #4]
 8004f12:	89fb      	ldrh	r3, [r7, #14]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	883a      	ldrh	r2, [r7, #0]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f7ff ff4e 	bl	8004dbc <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8004f20:	88fa      	ldrh	r2, [r7, #6]
 8004f22:	8a3b      	ldrh	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	b298      	uxth	r0, r3
 8004f28:	88ba      	ldrh	r2, [r7, #4]
 8004f2a:	89fb      	ldrh	r3, [r7, #14]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	883a      	ldrh	r2, [r7, #0]
 8004f32:	4619      	mov	r1, r3
 8004f34:	f7ff ff42 	bl	8004dbc <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8004f38:	88fa      	ldrh	r2, [r7, #6]
 8004f3a:	89fb      	ldrh	r3, [r7, #14]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	b298      	uxth	r0, r3
 8004f40:	88ba      	ldrh	r2, [r7, #4]
 8004f42:	8a3b      	ldrh	r3, [r7, #16]
 8004f44:	4413      	add	r3, r2
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	883a      	ldrh	r2, [r7, #0]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f7ff ff36 	bl	8004dbc <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8004f50:	88fa      	ldrh	r2, [r7, #6]
 8004f52:	89fb      	ldrh	r3, [r7, #14]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	b298      	uxth	r0, r3
 8004f58:	88ba      	ldrh	r2, [r7, #4]
 8004f5a:	8a3b      	ldrh	r3, [r7, #16]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	883a      	ldrh	r2, [r7, #0]
 8004f62:	4619      	mov	r1, r3
 8004f64:	f7ff ff2a 	bl	8004dbc <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8004f68:	88fa      	ldrh	r2, [r7, #6]
 8004f6a:	89fb      	ldrh	r3, [r7, #14]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	b298      	uxth	r0, r3
 8004f70:	88ba      	ldrh	r2, [r7, #4]
 8004f72:	8a3b      	ldrh	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	883a      	ldrh	r2, [r7, #0]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	f7ff ff1e 	bl	8004dbc <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	89fb      	ldrh	r3, [r7, #14]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	b298      	uxth	r0, r3
 8004f88:	88ba      	ldrh	r2, [r7, #4]
 8004f8a:	8a3b      	ldrh	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	883a      	ldrh	r2, [r7, #0]
 8004f92:	4619      	mov	r1, r3
 8004f94:	f7ff ff12 	bl	8004dbc <Displ_Pixel>
    while (x<y) {
 8004f98:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004f9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	f6ff af77 	blt.w	8004e94 <Displ_drawCircle+0x8c>
    }
}
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd90      	pop	{r4, r7, pc}

08004fb0 <Displ_CLS>:

/*****************
 * @brief   clear display with a color.
 * @param   bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(0, 0, _width, _height, bgcolor);
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <Displ_CLS+0x30>)
 8004fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <Displ_CLS+0x34>)
 8004fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fc8:	b299      	uxth	r1, r3
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	f7ff fe38 	bl	8004c48 <Displ_FillArea>
}
 8004fd8:	bf00      	nop
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	2000217a 	.word	0x2000217a
 8004fe4:	2000217c 	.word	0x2000217c

08004fe8 <Displ_Line>:

/************************************************************************
 * @brief   draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8004fe8:	b590      	push	{r4, r7, lr}
 8004fea:	b08b      	sub	sp, #44	; 0x2c
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	4604      	mov	r4, r0
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4623      	mov	r3, r4
 8004ff8:	80fb      	strh	r3, [r7, #6]
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	80bb      	strh	r3, [r7, #4]
 8004ffe:	460b      	mov	r3, r1
 8005000:	807b      	strh	r3, [r7, #2]
 8005002:	4613      	mov	r3, r2
 8005004:	803b      	strh	r3, [r7, #0]
    int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8005006:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800500a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800500e:	429a      	cmp	r2, r3
 8005010:	d123      	bne.n	800505a <Displ_Line+0x72>
        if (y1>y0){
 8005012:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005016:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800501a:	429a      	cmp	r2, r3
 800501c:	dd0e      	ble.n	800503c <Displ_Line+0x54>
            Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 800501e:	88f8      	ldrh	r0, [r7, #6]
 8005020:	88b9      	ldrh	r1, [r7, #4]
 8005022:	883a      	ldrh	r2, [r7, #0]
 8005024:	88bb      	ldrh	r3, [r7, #4]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	b29b      	uxth	r3, r3
 800502a:	3301      	adds	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	4613      	mov	r3, r2
 8005034:	2201      	movs	r2, #1
 8005036:	f7ff fe07 	bl	8004c48 <Displ_FillArea>
        }
        else {
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
        }
        return;
 800503a:	e103      	b.n	8005244 <Displ_Line+0x25c>
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 800503c:	88f8      	ldrh	r0, [r7, #6]
 800503e:	8839      	ldrh	r1, [r7, #0]
 8005040:	88ba      	ldrh	r2, [r7, #4]
 8005042:	883b      	ldrh	r3, [r7, #0]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	b29b      	uxth	r3, r3
 8005048:	3301      	adds	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	4613      	mov	r3, r2
 8005052:	2201      	movs	r2, #1
 8005054:	f7ff fdf8 	bl	8004c48 <Displ_FillArea>
        return;
 8005058:	e0f4      	b.n	8005244 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 800505a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800505e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005062:	429a      	cmp	r2, r3
 8005064:	d121      	bne.n	80050aa <Displ_Line+0xc2>
        if (x1>x0)
 8005066:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800506a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800506e:	429a      	cmp	r2, r3
 8005070:	dd0d      	ble.n	800508e <Displ_Line+0xa6>
            Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8005072:	88f8      	ldrh	r0, [r7, #6]
 8005074:	88b9      	ldrh	r1, [r7, #4]
 8005076:	887a      	ldrh	r2, [r7, #2]
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	b29b      	uxth	r3, r3
 800507e:	3301      	adds	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	2301      	movs	r3, #1
 8005088:	f7ff fdde 	bl	8004c48 <Displ_FillArea>
        else
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
        return;
 800508c:	e0da      	b.n	8005244 <Displ_Line+0x25c>
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 800508e:	8878      	ldrh	r0, [r7, #2]
 8005090:	8839      	ldrh	r1, [r7, #0]
 8005092:	88fa      	ldrh	r2, [r7, #6]
 8005094:	887b      	ldrh	r3, [r7, #2]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	b29b      	uxth	r3, r3
 800509a:	3301      	adds	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	2301      	movs	r3, #1
 80050a4:	f7ff fdd0 	bl	8004c48 <Displ_FillArea>
        return;
 80050a8:	e0cc      	b.n	8005244 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 80050aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80050ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	dd05      	ble.n	80050c2 <Displ_Line+0xda>
 80050b6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80050ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80050be:	1ad2      	subs	r2, r2, r3
 80050c0:	e004      	b.n	80050cc <Displ_Line+0xe4>
 80050c2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80050c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80050ca:	1ad2      	subs	r2, r2, r3
 80050cc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80050d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050d4:	4299      	cmp	r1, r3
 80050d6:	dd05      	ble.n	80050e4 <Displ_Line+0xfc>
 80050d8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80050dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050e0:	1acb      	subs	r3, r1, r3
 80050e2:	e004      	b.n	80050ee <Displ_Line+0x106>
 80050e4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80050e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050ec:	1acb      	subs	r3, r1, r3
 80050ee:	429a      	cmp	r2, r3
 80050f0:	bfcc      	ite	gt
 80050f2:	2301      	movgt	r3, #1
 80050f4:	2300      	movle	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 80050fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 8005102:	88fb      	ldrh	r3, [r7, #6]
 8005104:	827b      	strh	r3, [r7, #18]
 8005106:	88bb      	ldrh	r3, [r7, #4]
 8005108:	80fb      	strh	r3, [r7, #6]
 800510a:	8a7b      	ldrh	r3, [r7, #18]
 800510c:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 800510e:	887b      	ldrh	r3, [r7, #2]
 8005110:	823b      	strh	r3, [r7, #16]
 8005112:	883b      	ldrh	r3, [r7, #0]
 8005114:	807b      	strh	r3, [r7, #2]
 8005116:	8a3b      	ldrh	r3, [r7, #16]
 8005118:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800511a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800511e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005122:	429a      	cmp	r2, r3
 8005124:	dd0b      	ble.n	800513e <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	81fb      	strh	r3, [r7, #14]
 800512a:	887b      	ldrh	r3, [r7, #2]
 800512c:	80fb      	strh	r3, [r7, #6]
 800512e:	89fb      	ldrh	r3, [r7, #14]
 8005130:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8005132:	88bb      	ldrh	r3, [r7, #4]
 8005134:	81bb      	strh	r3, [r7, #12]
 8005136:	883b      	ldrh	r3, [r7, #0]
 8005138:	80bb      	strh	r3, [r7, #4]
 800513a:	89bb      	ldrh	r3, [r7, #12]
 800513c:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 800513e:	887a      	ldrh	r2, [r7, #2]
 8005140:	88fb      	ldrh	r3, [r7, #6]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	b29b      	uxth	r3, r3
 8005146:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8005148:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800514c:	105b      	asrs	r3, r3, #1
 800514e:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8005150:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005154:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005158:	429a      	cmp	r2, r3
 800515a:	da07      	bge.n	800516c <Displ_Line+0x184>
        dy = y1-y0;
 800515c:	883a      	ldrh	r2, [r7, #0]
 800515e:	88bb      	ldrh	r3, [r7, #4]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	b29b      	uxth	r3, r3
 8005164:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8005166:	2301      	movs	r3, #1
 8005168:	837b      	strh	r3, [r7, #26]
 800516a:	e007      	b.n	800517c <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 800516c:	88ba      	ldrh	r2, [r7, #4]
 800516e:	883b      	ldrh	r3, [r7, #0]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	b29b      	uxth	r3, r3
 8005174:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8005176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800517a:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 800517c:	2300      	movs	r3, #0
 800517e:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	83bb      	strh	r3, [r7, #28]
 8005184:	e03a      	b.n	80051fc <Displ_Line+0x214>
        l++;
 8005186:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800518a:	b29b      	uxth	r3, r3
 800518c:	3301      	adds	r3, #1
 800518e:	b29b      	uxth	r3, r3
 8005190:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 8005192:	8b3a      	ldrh	r2, [r7, #24]
 8005194:	8afb      	ldrh	r3, [r7, #22]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	b29b      	uxth	r3, r3
 800519a:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 800519c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	da25      	bge.n	80051f0 <Displ_Line+0x208>
            if (steep) {
 80051a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d009      	beq.n	80051c0 <Displ_Line+0x1d8>
                Displ_FillArea(y0, x0, 1, l, color);
 80051ac:	88b8      	ldrh	r0, [r7, #4]
 80051ae:	88f9      	ldrh	r1, [r7, #6]
 80051b0:	8bfa      	ldrh	r2, [r7, #30]
 80051b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	4613      	mov	r3, r2
 80051b8:	2201      	movs	r2, #1
 80051ba:	f7ff fd45 	bl	8004c48 <Displ_FillArea>
 80051be:	e007      	b.n	80051d0 <Displ_Line+0x1e8>
            } else {
                Displ_FillArea(x0, y0, l, 1, color);
 80051c0:	88f8      	ldrh	r0, [r7, #6]
 80051c2:	88b9      	ldrh	r1, [r7, #4]
 80051c4:	8bfa      	ldrh	r2, [r7, #30]
 80051c6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	2301      	movs	r3, #1
 80051cc:	f7ff fd3c 	bl	8004c48 <Displ_FillArea>
            }
            y0 += ystep;
 80051d0:	88ba      	ldrh	r2, [r7, #4]
 80051d2:	8b7b      	ldrh	r3, [r7, #26]
 80051d4:	4413      	add	r3, r2
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	80bb      	strh	r3, [r7, #4]
            l=0;
 80051da:	2300      	movs	r3, #0
 80051dc:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 80051de:	8bbb      	ldrh	r3, [r7, #28]
 80051e0:	3301      	adds	r3, #1
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	80fb      	strh	r3, [r7, #6]
            err += dx;
 80051e6:	8b3a      	ldrh	r2, [r7, #24]
 80051e8:	897b      	ldrh	r3, [r7, #10]
 80051ea:	4413      	add	r3, r2
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 80051f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3301      	adds	r3, #1
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	83bb      	strh	r3, [r7, #28]
 80051fc:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005200:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005204:	429a      	cmp	r2, r3
 8005206:	ddbe      	ble.n	8005186 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8005208:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d019      	beq.n	8005244 <Displ_Line+0x25c>
        if (steep) {
 8005210:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00b      	beq.n	8005230 <Displ_Line+0x248>
            Displ_FillArea(y0, x0, 1, l-1, color);
 8005218:	88b8      	ldrh	r0, [r7, #4]
 800521a:	88f9      	ldrh	r1, [r7, #6]
 800521c:	8bfb      	ldrh	r3, [r7, #30]
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	4613      	mov	r3, r2
 8005228:	2201      	movs	r2, #1
 800522a:	f7ff fd0d 	bl	8004c48 <Displ_FillArea>
 800522e:	e009      	b.n	8005244 <Displ_Line+0x25c>
        } else {
            Displ_FillArea(x0, y0, l-1,1, color);
 8005230:	88f8      	ldrh	r0, [r7, #6]
 8005232:	88b9      	ldrh	r1, [r7, #4]
 8005234:	8bfb      	ldrh	r3, [r7, #30]
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	2301      	movs	r3, #1
 8005240:	f7ff fd02 	bl	8004c48 <Displ_FillArea>
        }
    }
}
 8005244:	3724      	adds	r7, #36	; 0x24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd90      	pop	{r4, r7, pc}

0800524a <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800524a:	b590      	push	{r4, r7, lr}
 800524c:	b091      	sub	sp, #68	; 0x44
 800524e:	af02      	add	r7, sp, #8
 8005250:	4604      	mov	r4, r0
 8005252:	4608      	mov	r0, r1
 8005254:	4611      	mov	r1, r2
 8005256:	461a      	mov	r2, r3
 8005258:	4623      	mov	r3, r4
 800525a:	80fb      	strh	r3, [r7, #6]
 800525c:	4603      	mov	r3, r0
 800525e:	80bb      	strh	r3, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	807b      	strh	r3, [r7, #2]
 8005264:	4613      	mov	r3, r2
 8005266:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8005268:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800526c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005270:	429a      	cmp	r2, r3
 8005272:	dd0b      	ble.n	800528c <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005274:	88bb      	ldrh	r3, [r7, #4]
 8005276:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005278:	883b      	ldrh	r3, [r7, #0]
 800527a:	80bb      	strh	r3, [r7, #4]
 800527c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800527e:	803b      	strh	r3, [r7, #0]
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005284:	887b      	ldrh	r3, [r7, #2]
 8005286:	80fb      	strh	r3, [r7, #6]
 8005288:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800528a:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 800528c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005290:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005294:	429a      	cmp	r2, r3
 8005296:	dd0f      	ble.n	80052b8 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8005298:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800529c:	847b      	strh	r3, [r7, #34]	; 0x22
 800529e:	883b      	ldrh	r3, [r7, #0]
 80052a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80052a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052a6:	803b      	strh	r3, [r7, #0]
 80052a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80052ac:	843b      	strh	r3, [r7, #32]
 80052ae:	887b      	ldrh	r3, [r7, #2]
 80052b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80052b4:	8c3b      	ldrh	r3, [r7, #32]
 80052b6:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80052b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80052bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	dd0b      	ble.n	80052dc <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80052c4:	88bb      	ldrh	r3, [r7, #4]
 80052c6:	83fb      	strh	r3, [r7, #30]
 80052c8:	883b      	ldrh	r3, [r7, #0]
 80052ca:	80bb      	strh	r3, [r7, #4]
 80052cc:	8bfb      	ldrh	r3, [r7, #30]
 80052ce:	803b      	strh	r3, [r7, #0]
 80052d0:	88fb      	ldrh	r3, [r7, #6]
 80052d2:	83bb      	strh	r3, [r7, #28]
 80052d4:	887b      	ldrh	r3, [r7, #2]
 80052d6:	80fb      	strh	r3, [r7, #6]
 80052d8:	8bbb      	ldrh	r3, [r7, #28]
 80052da:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80052dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80052e0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d136      	bne.n	8005356 <Displ_fillTriangle+0x10c>
        a = b = x0;
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	86bb      	strh	r3, [r7, #52]	; 0x34
 80052ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80052ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 80052f0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80052f4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80052f8:	429a      	cmp	r2, r3
 80052fa:	da02      	bge.n	8005302 <Displ_fillTriangle+0xb8>
 80052fc:	887b      	ldrh	r3, [r7, #2]
 80052fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005300:	e007      	b.n	8005312 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8005302:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005306:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800530a:	429a      	cmp	r2, r3
 800530c:	dd01      	ble.n	8005312 <Displ_fillTriangle+0xc8>
 800530e:	887b      	ldrh	r3, [r7, #2]
 8005310:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8005312:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005316:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800531a:	429a      	cmp	r2, r3
 800531c:	da03      	bge.n	8005326 <Displ_fillTriangle+0xdc>
 800531e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005322:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005324:	e008      	b.n	8005338 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8005326:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800532a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800532e:	429a      	cmp	r2, r3
 8005330:	dd02      	ble.n	8005338 <Displ_fillTriangle+0xee>
 8005332:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005336:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8005338:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800533c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005340:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005344:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005348:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	4623      	mov	r3, r4
 8005350:	f7ff fe4a 	bl	8004fe8 <Displ_Line>
        return;
 8005354:	e0d2      	b.n	80054fc <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8005356:	887a      	ldrh	r2, [r7, #2]
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	b29b      	uxth	r3, r3
 800535e:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8005360:	883a      	ldrh	r2, [r7, #0]
 8005362:	88bb      	ldrh	r3, [r7, #4]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	b29b      	uxth	r3, r3
 8005368:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 800536a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	b29b      	uxth	r3, r3
 8005374:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8005376:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800537a:	88bb      	ldrh	r3, [r7, #4]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	b29b      	uxth	r3, r3
 8005380:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8005382:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005386:	887b      	ldrh	r3, [r7, #2]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	b29b      	uxth	r3, r3
 800538c:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 800538e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005392:	883b      	ldrh	r3, [r7, #0]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	b29b      	uxth	r3, r3
 8005398:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 800539a:	2300      	movs	r3, #0
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 800539e:	2300      	movs	r3, #0
 80053a0:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80053a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80053a6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d102      	bne.n	80053b4 <Displ_fillTriangle+0x16a>
 80053ae:	883b      	ldrh	r3, [r7, #0]
 80053b0:	863b      	strh	r3, [r7, #48]	; 0x30
 80053b2:	e003      	b.n	80053bc <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 80053b4:	883b      	ldrh	r3, [r7, #0]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 80053bc:	88bb      	ldrh	r3, [r7, #4]
 80053be:	867b      	strh	r3, [r7, #50]	; 0x32
 80053c0:	e03d      	b.n	800543e <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 80053c2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80053c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	4413      	add	r3, r2
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 80053d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80053da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	88fb      	ldrh	r3, [r7, #6]
 80053e4:	4413      	add	r3, r2
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 80053ea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80053ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f0:	4413      	add	r3, r2
 80053f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80053f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80053f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053fa:	4413      	add	r3, r2
 80053fc:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80053fe:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005402:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005406:	429a      	cmp	r2, r3
 8005408:	dd05      	ble.n	8005416 <Displ_fillTriangle+0x1cc>
 800540a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800540c:	81bb      	strh	r3, [r7, #12]
 800540e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005410:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005412:	89bb      	ldrh	r3, [r7, #12]
 8005414:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005416:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 800541a:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800541e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005422:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005426:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	4623      	mov	r3, r4
 800542e:	f7ff fddb 	bl	8004fe8 <Displ_Line>
    for(y=y0; y<=last; y++) {
 8005432:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005436:	b29b      	uxth	r3, r3
 8005438:	3301      	adds	r3, #1
 800543a:	b29b      	uxth	r3, r3
 800543c:	867b      	strh	r3, [r7, #50]	; 0x32
 800543e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005442:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005446:	429a      	cmp	r2, r3
 8005448:	ddbb      	ble.n	80053c2 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 800544a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800544e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005452:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005456:	1a8a      	subs	r2, r1, r2
 8005458:	fb02 f303 	mul.w	r3, r2, r3
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 800545e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005462:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005466:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800546a:	1a8a      	subs	r2, r1, r2
 800546c:	fb02 f303 	mul.w	r3, r2, r3
 8005470:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8005472:	e03d      	b.n	80054f0 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8005474:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800547a:	fb92 f3f3 	sdiv	r3, r2, r3
 800547e:	b29a      	uxth	r2, r3
 8005480:	887b      	ldrh	r3, [r7, #2]
 8005482:	4413      	add	r3, r2
 8005484:	b29b      	uxth	r3, r3
 8005486:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005488:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800548c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800548e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005492:	b29a      	uxth	r2, r3
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	4413      	add	r3, r2
 8005498:	b29b      	uxth	r3, r3
 800549a:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 800549c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a2:	4413      	add	r3, r2
 80054a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80054a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80054aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ac:	4413      	add	r3, r2
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80054b0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80054b4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80054b8:	429a      	cmp	r2, r3
 80054ba:	dd05      	ble.n	80054c8 <Displ_fillTriangle+0x27e>
 80054bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054be:	81fb      	strh	r3, [r7, #14]
 80054c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80054c2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80054c4:	89fb      	ldrh	r3, [r7, #14]
 80054c6:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 80054c8:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 80054cc:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80054d0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80054d4:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80054d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	4623      	mov	r3, r4
 80054e0:	f7ff fd82 	bl	8004fe8 <Displ_Line>
    for(; y<=y2; y++) {
 80054e4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3301      	adds	r3, #1
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	867b      	strh	r3, [r7, #50]	; 0x32
 80054f0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80054f4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80054f8:	429a      	cmp	r2, r3
 80054fa:	ddbb      	ble.n	8005474 <Displ_fillTriangle+0x22a>
    }
}
 80054fc:	373c      	adds	r7, #60	; 0x3c
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd90      	pop	{r4, r7, pc}
	...

08005504 <Displ_WChar>:
 * @brief   display one character on the display
 * @param   x,y: top left corner of the character to be printed
 *          ch, font, color, bgcolor: as per parameter name
 *          size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005504:	b082      	sub	sp, #8
 8005506:	b590      	push	{r4, r7, lr}
 8005508:	b08d      	sub	sp, #52	; 0x34
 800550a:	af00      	add	r7, sp, #0
 800550c:	647b      	str	r3, [r7, #68]	; 0x44
 800550e:	4603      	mov	r3, r0
 8005510:	80fb      	strh	r3, [r7, #6]
 8005512:	460b      	mov	r3, r1
 8005514:	80bb      	strh	r3, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
    uint8_t wsize=font.Width; //printing char width
 800551a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800551e:	76fb      	strb	r3, [r7, #27]

    if (size==2)
 8005520:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005524:	2b02      	cmp	r3, #2
 8005526:	d102      	bne.n	800552e <Displ_WChar+0x2a>
        wsize<<= 1;
 8005528:	7efb      	ldrb	r3, [r7, #27]
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	76fb      	strb	r3, [r7, #27]
    bufSize=0;
 800552e:	2300      	movs	r3, #0
 8005530:	623b      	str	r3, [r7, #32]
    bytes=font.Height * font.Size ;
 8005532:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005536:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800553a:	fb02 f303 	mul.w	r3, r2, r3
 800553e:	617b      	str	r3, [r7, #20]
    pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8005540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	3b20      	subs	r3, #32
 8005546:	4619      	mov	r1, r3
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	fb01 f303 	mul.w	r3, r1, r3
 800554e:	4413      	add	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
    switch (font.Size) {
 8005552:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005556:	2b02      	cmp	r3, #2
 8005558:	d005      	beq.n	8005566 <Displ_WChar+0x62>
 800555a:	2b03      	cmp	r3, #3
 800555c:	d107      	bne.n	800556e <Displ_WChar+0x6a>
        case 3:
            mask=0x800000;
 800555e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005562:	61fb      	str	r3, [r7, #28]
            break;
 8005564:	e005      	b.n	8005572 <Displ_WChar+0x6e>
        case 2:
            mask=0x8000;
 8005566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800556a:	61fb      	str	r3, [r7, #28]
            break;
 800556c:	e001      	b.n	8005572 <Displ_WChar+0x6e>
        default:
            mask=0x80;
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	61fb      	str	r3, [r7, #28]
    }

#ifdef Z_RGB565

    uint16_t color1, bgcolor1;
    uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 8005572:	4b60      	ldr	r3, [pc, #384]	; (80056f4 <Displ_WChar+0x1f0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]

    color1 = ((color & 0xFF)<<8 | (color >> 8));            //swapping byte endian: STM32 is little endian, ST7735 is big endian
 8005578:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	b21a      	sxth	r2, r3
 8005580:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005584:	0a1b      	lsrs	r3, r3, #8
 8005586:	b29b      	uxth	r3, r3
 8005588:	b21b      	sxth	r3, r3
 800558a:	4313      	orrs	r3, r2
 800558c:	b21b      	sxth	r3, r3
 800558e:	817b      	strh	r3, [r7, #10]
    bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));      //swapping byte endian: STM32 is little endian, ST7735 is big endian
 8005590:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	b21a      	sxth	r2, r3
 8005598:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800559c:	0a1b      	lsrs	r3, r3, #8
 800559e:	b29b      	uxth	r3, r3
 80055a0:	b21b      	sxth	r3, r3
 80055a2:	4313      	orrs	r3, r2
 80055a4:	b21b      	sxth	r3, r3
 80055a6:	813b      	strh	r3, [r7, #8]

    for(i = 0; i < (bytes); i+=font.Size){
 80055a8:	2300      	movs	r3, #0
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ac:	e06f      	b.n	800568e <Displ_WChar+0x18a>
        b=0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
        switch (font.Size) {
 80055b2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d015      	beq.n	80055e6 <Displ_WChar+0xe2>
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d120      	bne.n	8005600 <Displ_WChar+0xfc>
            case 3:
                b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	4413      	add	r3, r2
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	041a      	lsls	r2, r3, #16
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	3301      	adds	r3, #1
 80055cc:	6939      	ldr	r1, [r7, #16]
 80055ce:	440b      	add	r3, r1
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	4313      	orrs	r3, r2
 80055d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d8:	3202      	adds	r2, #2
 80055da:	6939      	ldr	r1, [r7, #16]
 80055dc:	440a      	add	r2, r1
 80055de:	7812      	ldrb	r2, [r2, #0]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 80055e4:	e011      	b.n	800560a <Displ_WChar+0x106>
            case 2:
                b=pos[i]<<8 | pos[i+1];
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ea:	4413      	add	r3, r2
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f2:	3201      	adds	r2, #1
 80055f4:	6939      	ldr	r1, [r7, #16]
 80055f6:	440a      	add	r2, r1
 80055f8:	7812      	ldrb	r2, [r2, #0]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 80055fe:	e004      	b.n	800560a <Displ_WChar+0x106>
            default:
                b=pos[i];
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	4413      	add	r3, r2
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        for(j = 0; j < font.Width; j++) {
 800560a:	2300      	movs	r3, #0
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
 800560e:	e032      	b.n	8005676 <Displ_WChar+0x172>
            if((b << j) & mask)  {
 8005610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	409a      	lsls	r2, r3
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4013      	ands	r3, r2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d014      	beq.n	8005648 <Displ_WChar+0x144>
                dispBuffer16[bufSize++] = color1;
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	623a      	str	r2, [r7, #32]
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	897a      	ldrh	r2, [r7, #10]
 800562c:	801a      	strh	r2, [r3, #0]
                if (size==2){
 800562e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005632:	2b02      	cmp	r3, #2
 8005634:	d11c      	bne.n	8005670 <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = color1;
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	623a      	str	r2, [r7, #32]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	897a      	ldrh	r2, [r7, #10]
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	e013      	b.n	8005670 <Displ_WChar+0x16c>
                }
            } else {
                dispBuffer16[bufSize++] = bgcolor1;
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	623a      	str	r2, [r7, #32]
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4413      	add	r3, r2
 8005654:	893a      	ldrh	r2, [r7, #8]
 8005656:	801a      	strh	r2, [r3, #0]
                if (size==2) {
 8005658:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800565c:	2b02      	cmp	r3, #2
 800565e:	d107      	bne.n	8005670 <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = bgcolor1;
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	623a      	str	r2, [r7, #32]
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	893a      	ldrh	r2, [r7, #8]
 800566e:	801a      	strh	r2, [r3, #0]
        for(j = 0; j < font.Width; j++) {
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	3301      	adds	r3, #1
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
 8005676:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800567a:	461a      	mov	r2, r3
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	4293      	cmp	r3, r2
 8005680:	d3c6      	bcc.n	8005610 <Displ_WChar+0x10c>
    for(i = 0; i < (bytes); i+=font.Size){
 8005682:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005686:	461a      	mov	r2, r3
 8005688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568a:	4413      	add	r3, r2
 800568c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800568e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	429a      	cmp	r2, r3
 8005694:	d38b      	bcc.n	80055ae <Displ_WChar+0xaa>
                }
            }
        }
    }
    bufSize<<=1;
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	623b      	str	r3, [r7, #32]
            }
        }
    }
#endif

    Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 800569c:	7efb      	ldrb	r3, [r7, #27]
 800569e:	b29a      	uxth	r2, r3
 80056a0:	88fb      	ldrh	r3, [r7, #6]
 80056a2:	4413      	add	r3, r2
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29c      	uxth	r4, r3
 80056aa:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80056ae:	88bb      	ldrh	r3, [r7, #4]
 80056b0:	4413      	add	r3, r2
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	88b9      	ldrh	r1, [r7, #4]
 80056ba:	88f8      	ldrh	r0, [r7, #6]
 80056bc:	4622      	mov	r2, r4
 80056be:	f7ff f9d7 	bl	8004a70 <Displ_SetAddressWindow>
    Displ_WriteData(dispBuffer,bufSize,0);
 80056c2:	4b0c      	ldr	r3, [pc, #48]	; (80056f4 <Displ_WChar+0x1f0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2200      	movs	r2, #0
 80056c8:	6a39      	ldr	r1, [r7, #32]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff f977 	bl	80049be <Displ_WriteData>
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80056d0:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <Displ_WChar+0x1f0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <Displ_WChar+0x1f4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <Displ_WChar+0x1da>
 80056da:	4b08      	ldr	r3, [pc, #32]	; (80056fc <Displ_WChar+0x1f8>)
 80056dc:	e000      	b.n	80056e0 <Displ_WChar+0x1dc>
 80056de:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <Displ_WChar+0x1f4>)
 80056e0:	4a04      	ldr	r2, [pc, #16]	; (80056f4 <Displ_WChar+0x1f0>)
 80056e2:	6013      	str	r3, [r2, #0]

}
 80056e4:	bf00      	nop
 80056e6:	3734      	adds	r7, #52	; 0x34
 80056e8:	46bd      	mov	sp, r7
 80056ea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80056ee:	b002      	add	sp, #8
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	2000005c 	.word	0x2000005c
 80056f8:	20002180 	.word	0x20002180
 80056fc:	20002580 	.word	0x20002580

08005700 <Displ_WString>:
 *          font    to bu used
 *          size    1 (normal), 2 (double width)
 *          color   font color
 *          bgcolor background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005700:	b082      	sub	sp, #8
 8005702:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005704:	b08b      	sub	sp, #44	; 0x2c
 8005706:	af06      	add	r7, sp, #24
 8005708:	603a      	str	r2, [r7, #0]
 800570a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800570c:	4603      	mov	r3, r0
 800570e:	80fb      	strh	r3, [r7, #6]
 8005710:	460b      	mov	r3, r1
 8005712:	80bb      	strh	r3, [r7, #4]
    uint16_t delta=font.Width;
 8005714:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005716:	81fb      	strh	r3, [r7, #14]
    if (size>1)
 8005718:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800571c:	2b01      	cmp	r3, #1
 800571e:	d922      	bls.n	8005766 <Displ_WString+0x66>
        delta<<=1;
 8005720:	89fb      	ldrh	r3, [r7, #14]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8005726:	e01e      	b.n	8005766 <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781a      	ldrb	r2, [r3, #0]
 800572c:	88bd      	ldrh	r5, [r7, #4]
 800572e:	88fc      	ldrh	r4, [r7, #6]
 8005730:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005734:	9304      	str	r3, [sp, #16]
 8005736:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005738:	9303      	str	r3, [sp, #12]
 800573a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800573e:	9302      	str	r3, [sp, #8]
 8005740:	466e      	mov	r6, sp
 8005742:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005746:	e893 0003 	ldmia.w	r3, {r0, r1}
 800574a:	e886 0003 	stmia.w	r6, {r0, r1}
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	4629      	mov	r1, r5
 8005752:	4620      	mov	r0, r4
 8005754:	f7ff fed6 	bl	8005504 <Displ_WChar>
        x += delta;
 8005758:	88fa      	ldrh	r2, [r7, #6]
 800575a:	89fb      	ldrh	r3, [r7, #14]
 800575c:	4413      	add	r3, r2
 800575e:	80fb      	strh	r3, [r7, #6]
        str++;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	3301      	adds	r3, #1
 8005764:	603b      	str	r3, [r7, #0]
    while(*str) {
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1dc      	bne.n	8005728 <Displ_WString+0x28>
    }
}
 800576e:	bf00      	nop
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800577a:	b002      	add	sp, #8
 800577c:	4770      	bx	lr
	...

08005780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057b8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005784:	f7ff f878 	bl	8004878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005788:	480c      	ldr	r0, [pc, #48]	; (80057bc <LoopForever+0x6>)
  ldr r1, =_edata
 800578a:	490d      	ldr	r1, [pc, #52]	; (80057c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800578c:	4a0d      	ldr	r2, [pc, #52]	; (80057c4 <LoopForever+0xe>)
  movs r3, #0
 800578e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005790:	e002      	b.n	8005798 <LoopCopyDataInit>

08005792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005796:	3304      	adds	r3, #4

08005798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800579a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800579c:	d3f9      	bcc.n	8005792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800579e:	4a0a      	ldr	r2, [pc, #40]	; (80057c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80057a0:	4c0a      	ldr	r4, [pc, #40]	; (80057cc <LoopForever+0x16>)
  movs r3, #0
 80057a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057a4:	e001      	b.n	80057aa <LoopFillZerobss>

080057a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057a8:	3204      	adds	r2, #4

080057aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057ac:	d3fb      	bcc.n	80057a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80057ae:	f004 fa89 	bl	8009cc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80057b2:	f7fd f853 	bl	800285c <main>

080057b6 <LoopForever>:

LoopForever:
    b LoopForever
 80057b6:	e7fe      	b.n	80057b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80057b8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80057bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057c0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80057c4:	0800d038 	.word	0x0800d038
  ldr r2, =_sbss
 80057c8:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80057cc:	2000299c 	.word	0x2000299c

080057d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80057d0:	e7fe      	b.n	80057d0 <ADC1_IRQHandler>
	...

080057d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057d8:	4b08      	ldr	r3, [pc, #32]	; (80057fc <HAL_Init+0x28>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a07      	ldr	r2, [pc, #28]	; (80057fc <HAL_Init+0x28>)
 80057de:	f043 0310 	orr.w	r3, r3, #16
 80057e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057e4:	2003      	movs	r0, #3
 80057e6:	f000 f94f 	bl	8005a88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057ea:	200f      	movs	r0, #15
 80057ec:	f000 f808 	bl	8005800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057f0:	f7fe fdee 	bl	80043d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40022000 	.word	0x40022000

08005800 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005808:	4b12      	ldr	r3, [pc, #72]	; (8005854 <HAL_InitTick+0x54>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	4b12      	ldr	r3, [pc, #72]	; (8005858 <HAL_InitTick+0x58>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	4619      	mov	r1, r3
 8005812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005816:	fbb3 f3f1 	udiv	r3, r3, r1
 800581a:	fbb2 f3f3 	udiv	r3, r2, r3
 800581e:	4618      	mov	r0, r3
 8005820:	f000 f967 	bl	8005af2 <HAL_SYSTICK_Config>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e00e      	b.n	800584c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b0f      	cmp	r3, #15
 8005832:	d80a      	bhi.n	800584a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005834:	2200      	movs	r2, #0
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	f04f 30ff 	mov.w	r0, #4294967295
 800583c:	f000 f92f 	bl	8005a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005840:	4a06      	ldr	r2, [pc, #24]	; (800585c <HAL_InitTick+0x5c>)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	e000      	b.n	800584c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000054 	.word	0x20000054
 8005858:	20000064 	.word	0x20000064
 800585c:	20000060 	.word	0x20000060

08005860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005864:	4b06      	ldr	r3, [pc, #24]	; (8005880 <HAL_IncTick+0x20>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <HAL_IncTick+0x24>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4413      	add	r3, r2
 8005870:	4a04      	ldr	r2, [pc, #16]	; (8005884 <HAL_IncTick+0x24>)
 8005872:	6013      	str	r3, [r2, #0]
}
 8005874:	bf00      	nop
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	20000064 	.word	0x20000064
 8005884:	20002988 	.word	0x20002988

08005888 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  return uwTick;  
 800588c:	4b03      	ldr	r3, [pc, #12]	; (800589c <HAL_GetTick+0x14>)
 800588e:	681b      	ldr	r3, [r3, #0]
}
 8005890:	4618      	mov	r0, r3
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	20002988 	.word	0x20002988

080058a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058a8:	f7ff ffee 	bl	8005888 <HAL_GetTick>
 80058ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b8:	d005      	beq.n	80058c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058ba:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <HAL_Delay+0x44>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80058c6:	bf00      	nop
 80058c8:	f7ff ffde 	bl	8005888 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d8f7      	bhi.n	80058c8 <HAL_Delay+0x28>
  {
  }
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000064 	.word	0x20000064

080058e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <__NVIC_SetPriorityGrouping+0x44>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005904:	4013      	ands	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800591a:	4a04      	ldr	r2, [pc, #16]	; (800592c <__NVIC_SetPriorityGrouping+0x44>)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	60d3      	str	r3, [r2, #12]
}
 8005920:	bf00      	nop
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	e000ed00 	.word	0xe000ed00

08005930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005934:	4b04      	ldr	r3, [pc, #16]	; (8005948 <__NVIC_GetPriorityGrouping+0x18>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	0a1b      	lsrs	r3, r3, #8
 800593a:	f003 0307 	and.w	r3, r3, #7
}
 800593e:	4618      	mov	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	e000ed00 	.word	0xe000ed00

0800594c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800595a:	2b00      	cmp	r3, #0
 800595c:	db0b      	blt.n	8005976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	f003 021f 	and.w	r2, r3, #31
 8005964:	4907      	ldr	r1, [pc, #28]	; (8005984 <__NVIC_EnableIRQ+0x38>)
 8005966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2001      	movs	r0, #1
 800596e:	fa00 f202 	lsl.w	r2, r0, r2
 8005972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	e000e100 	.word	0xe000e100

08005988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	6039      	str	r1, [r7, #0]
 8005992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005998:	2b00      	cmp	r3, #0
 800599a:	db0a      	blt.n	80059b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	490c      	ldr	r1, [pc, #48]	; (80059d4 <__NVIC_SetPriority+0x4c>)
 80059a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a6:	0112      	lsls	r2, r2, #4
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	440b      	add	r3, r1
 80059ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059b0:	e00a      	b.n	80059c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	4908      	ldr	r1, [pc, #32]	; (80059d8 <__NVIC_SetPriority+0x50>)
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	3b04      	subs	r3, #4
 80059c0:	0112      	lsls	r2, r2, #4
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	440b      	add	r3, r1
 80059c6:	761a      	strb	r2, [r3, #24]
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	e000e100 	.word	0xe000e100
 80059d8:	e000ed00 	.word	0xe000ed00

080059dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059dc:	b480      	push	{r7}
 80059de:	b089      	sub	sp, #36	; 0x24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f1c3 0307 	rsb	r3, r3, #7
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	bf28      	it	cs
 80059fa:	2304      	movcs	r3, #4
 80059fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	3304      	adds	r3, #4
 8005a02:	2b06      	cmp	r3, #6
 8005a04:	d902      	bls.n	8005a0c <NVIC_EncodePriority+0x30>
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	3b03      	subs	r3, #3
 8005a0a:	e000      	b.n	8005a0e <NVIC_EncodePriority+0x32>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a10:	f04f 32ff 	mov.w	r2, #4294967295
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	43da      	mvns	r2, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	401a      	ands	r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a24:	f04f 31ff 	mov.w	r1, #4294967295
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2e:	43d9      	mvns	r1, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a34:	4313      	orrs	r3, r2
         );
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3724      	adds	r7, #36	; 0x24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
	...

08005a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a54:	d301      	bcc.n	8005a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a56:	2301      	movs	r3, #1
 8005a58:	e00f      	b.n	8005a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a5a:	4a0a      	ldr	r2, [pc, #40]	; (8005a84 <SysTick_Config+0x40>)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a62:	210f      	movs	r1, #15
 8005a64:	f04f 30ff 	mov.w	r0, #4294967295
 8005a68:	f7ff ff8e 	bl	8005988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <SysTick_Config+0x40>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a72:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <SysTick_Config+0x40>)
 8005a74:	2207      	movs	r2, #7
 8005a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	e000e010 	.word	0xe000e010

08005a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff ff29 	bl	80058e8 <__NVIC_SetPriorityGrouping>
}
 8005a96:	bf00      	nop
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b086      	sub	sp, #24
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
 8005aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ab0:	f7ff ff3e 	bl	8005930 <__NVIC_GetPriorityGrouping>
 8005ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	6978      	ldr	r0, [r7, #20]
 8005abc:	f7ff ff8e 	bl	80059dc <NVIC_EncodePriority>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff ff5d 	bl	8005988 <__NVIC_SetPriority>
}
 8005ace:	bf00      	nop
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b082      	sub	sp, #8
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	4603      	mov	r3, r0
 8005ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff ff31 	bl	800594c <__NVIC_EnableIRQ>
}
 8005aea:	bf00      	nop
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff ffa2 	bl	8005a44 <SysTick_Config>
 8005b00:	4603      	mov	r3, r0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e037      	b.n	8005b90 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005b36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005b3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f97e 	bl	8005e74 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}  
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_DMA_Start_IT+0x20>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e04a      	b.n	8005c4e <HAL_DMA_Start_IT+0xb6>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d13a      	bne.n	8005c40 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0201 	bic.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f912 	bl	8005e18 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 020e 	orr.w	r2, r2, #14
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	e00f      	b.n	8005c2e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 020a 	orr.w	r2, r2, #10
 8005c1c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0204 	bic.w	r2, r2, #4
 8005c2c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0201 	orr.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e005      	b.n	8005c4c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005c48:	2302      	movs	r3, #2
 8005c4a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d005      	beq.n	8005c78 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	73fb      	strb	r3, [r7, #15]
 8005c76:	e027      	b.n	8005cc8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 020e 	bic.w	r2, r2, #14
 8005c86:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0201 	bic.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ca6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	4798      	blx	r3
    } 
  }
  return status;
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	2204      	movs	r2, #4
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d024      	beq.n	8005d44 <HAL_DMA_IRQHandler+0x72>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d01f      	beq.n	8005d44 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d107      	bne.n	8005d22 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0204 	bic.w	r2, r2, #4
 8005d20:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2a:	2104      	movs	r1, #4
 8005d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d30:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d06a      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005d42:	e065      	b.n	8005e10 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	2202      	movs	r2, #2
 8005d4a:	409a      	lsls	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d02c      	beq.n	8005dae <HAL_DMA_IRQHandler+0xdc>
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d027      	beq.n	8005dae <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10b      	bne.n	8005d84 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 020a 	bic.w	r2, r2, #10
 8005d7a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8c:	2102      	movs	r1, #2
 8005d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d92:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d035      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005dac:	e030      	b.n	8005e10 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	2208      	movs	r2, #8
 8005db4:	409a      	lsls	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d028      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x13e>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d023      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 020e 	bic.w	r2, r2, #14
 8005dd6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de0:	2101      	movs	r1, #1
 8005de2:	fa01 f202 	lsl.w	r2, r1, r2
 8005de6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d004      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	4798      	blx	r3
    }
  }
}  
 8005e0e:	e7ff      	b.n	8005e10 <HAL_DMA_IRQHandler+0x13e>
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2e:	2101      	movs	r1, #1
 8005e30:	fa01 f202 	lsl.w	r2, r1, r2
 8005e34:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b10      	cmp	r3, #16
 8005e44:	d108      	bne.n	8005e58 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e56:	e007      	b.n	8005e68 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	60da      	str	r2, [r3, #12]
}
 8005e68:	bf00      	nop
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	4b09      	ldr	r3, [pc, #36]	; (8005ea8 <DMA_CalcBaseAndBitshift+0x34>)
 8005e84:	4413      	add	r3, r2
 8005e86:	4a09      	ldr	r2, [pc, #36]	; (8005eac <DMA_CalcBaseAndBitshift+0x38>)
 8005e88:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	009a      	lsls	r2, r3, #2
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a06      	ldr	r2, [pc, #24]	; (8005eb0 <DMA_CalcBaseAndBitshift+0x3c>)
 8005e98:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	bffdfff8 	.word	0xbffdfff8
 8005eac:	cccccccd 	.word	0xcccccccd
 8005eb0:	40020000 	.word	0x40020000

08005eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ec2:	e14e      	b.n	8006162 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	2101      	movs	r1, #1
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 8140 	beq.w	800615c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d005      	beq.n	8005ef4 <HAL_GPIO_Init+0x40>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d130      	bne.n	8005f56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	2203      	movs	r2, #3
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	43db      	mvns	r3, r3
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	43db      	mvns	r3, r3
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4013      	ands	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	091b      	lsrs	r3, r3, #4
 8005f40:	f003 0201 	and.w	r2, r3, #1
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d017      	beq.n	8005f92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	2203      	movs	r2, #3
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	43db      	mvns	r3, r3
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4013      	ands	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	fa02 f303 	lsl.w	r3, r2, r3
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d123      	bne.n	8005fe6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	08da      	lsrs	r2, r3, #3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3208      	adds	r2, #8
 8005fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005faa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	220f      	movs	r2, #15
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	43db      	mvns	r3, r3
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	08da      	lsrs	r2, r3, #3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3208      	adds	r2, #8
 8005fe0:	6939      	ldr	r1, [r7, #16]
 8005fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f003 0203 	and.w	r2, r3, #3
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 809a 	beq.w	800615c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006028:	4b55      	ldr	r3, [pc, #340]	; (8006180 <HAL_GPIO_Init+0x2cc>)
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	4a54      	ldr	r2, [pc, #336]	; (8006180 <HAL_GPIO_Init+0x2cc>)
 800602e:	f043 0301 	orr.w	r3, r3, #1
 8006032:	6193      	str	r3, [r2, #24]
 8006034:	4b52      	ldr	r3, [pc, #328]	; (8006180 <HAL_GPIO_Init+0x2cc>)
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006040:	4a50      	ldr	r2, [pc, #320]	; (8006184 <HAL_GPIO_Init+0x2d0>)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	089b      	lsrs	r3, r3, #2
 8006046:	3302      	adds	r3, #2
 8006048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800604c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f003 0303 	and.w	r3, r3, #3
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	220f      	movs	r2, #15
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	43db      	mvns	r3, r3
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4013      	ands	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800606a:	d013      	beq.n	8006094 <HAL_GPIO_Init+0x1e0>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a46      	ldr	r2, [pc, #280]	; (8006188 <HAL_GPIO_Init+0x2d4>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00d      	beq.n	8006090 <HAL_GPIO_Init+0x1dc>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a45      	ldr	r2, [pc, #276]	; (800618c <HAL_GPIO_Init+0x2d8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <HAL_GPIO_Init+0x1d8>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a44      	ldr	r2, [pc, #272]	; (8006190 <HAL_GPIO_Init+0x2dc>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d101      	bne.n	8006088 <HAL_GPIO_Init+0x1d4>
 8006084:	2303      	movs	r3, #3
 8006086:	e006      	b.n	8006096 <HAL_GPIO_Init+0x1e2>
 8006088:	2305      	movs	r3, #5
 800608a:	e004      	b.n	8006096 <HAL_GPIO_Init+0x1e2>
 800608c:	2302      	movs	r3, #2
 800608e:	e002      	b.n	8006096 <HAL_GPIO_Init+0x1e2>
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <HAL_GPIO_Init+0x1e2>
 8006094:	2300      	movs	r3, #0
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	f002 0203 	and.w	r2, r2, #3
 800609c:	0092      	lsls	r2, r2, #2
 800609e:	4093      	lsls	r3, r2
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80060a6:	4937      	ldr	r1, [pc, #220]	; (8006184 <HAL_GPIO_Init+0x2d0>)
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	089b      	lsrs	r3, r3, #2
 80060ac:	3302      	adds	r3, #2
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060b4:	4b37      	ldr	r3, [pc, #220]	; (8006194 <HAL_GPIO_Init+0x2e0>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	43db      	mvns	r3, r3
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4013      	ands	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80060d8:	4a2e      	ldr	r2, [pc, #184]	; (8006194 <HAL_GPIO_Init+0x2e0>)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060de:	4b2d      	ldr	r3, [pc, #180]	; (8006194 <HAL_GPIO_Init+0x2e0>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	43db      	mvns	r3, r3
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4013      	ands	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006102:	4a24      	ldr	r2, [pc, #144]	; (8006194 <HAL_GPIO_Init+0x2e0>)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006108:	4b22      	ldr	r3, [pc, #136]	; (8006194 <HAL_GPIO_Init+0x2e0>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	43db      	mvns	r3, r3
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4013      	ands	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800612c:	4a19      	ldr	r2, [pc, #100]	; (8006194 <HAL_GPIO_Init+0x2e0>)
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006132:	4b18      	ldr	r3, [pc, #96]	; (8006194 <HAL_GPIO_Init+0x2e0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	43db      	mvns	r3, r3
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	4013      	ands	r3, r2
 8006140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006156:	4a0f      	ldr	r2, [pc, #60]	; (8006194 <HAL_GPIO_Init+0x2e0>)
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	3301      	adds	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	f47f aea9 	bne.w	8005ec4 <HAL_GPIO_Init+0x10>
  }
}
 8006172:	bf00      	nop
 8006174:	bf00      	nop
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	40021000 	.word	0x40021000
 8006184:	40010000 	.word	0x40010000
 8006188:	48000400 	.word	0x48000400
 800618c:	48000800 	.word	0x48000800
 8006190:	48000c00 	.word	0x48000c00
 8006194:	40010400 	.word	0x40010400

08006198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	887b      	ldrh	r3, [r7, #2]
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061b0:	2301      	movs	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
 80061b4:	e001      	b.n	80061ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	807b      	strh	r3, [r7, #2]
 80061d4:	4613      	mov	r3, r2
 80061d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061d8:	787b      	ldrb	r3, [r7, #1]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80061de:	887a      	ldrh	r2, [r7, #2]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80061e4:	e002      	b.n	80061ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80061e6:	887a      	ldrh	r2, [r7, #2]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006202:	4b08      	ldr	r3, [pc, #32]	; (8006224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	4013      	ands	r3, r2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d006      	beq.n	800621c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800620e:	4a05      	ldr	r2, [pc, #20]	; (8006224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006210:	88fb      	ldrh	r3, [r7, #6]
 8006212:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006214:	88fb      	ldrh	r3, [r7, #6]
 8006216:	4618      	mov	r0, r3
 8006218:	f7fc fd9c 	bl	8002d54 <HAL_GPIO_EXTI_Callback>
  }
}
 800621c:	bf00      	nop
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40010400 	.word	0x40010400

08006228 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e081      	b.n	800633e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fe f8e2 	bl	8004418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2224      	movs	r2, #36	; 0x24
 8006258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0201 	bic.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006278:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006288:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d107      	bne.n	80062a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800629e:	609a      	str	r2, [r3, #8]
 80062a0:	e006      	b.n	80062b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80062ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d104      	bne.n	80062c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80062d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691a      	ldr	r2, [r3, #16]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69d9      	ldr	r1, [r3, #28]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1a      	ldr	r2, [r3, #32]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	4608      	mov	r0, r1
 8006352:	4611      	mov	r1, r2
 8006354:	461a      	mov	r2, r3
 8006356:	4603      	mov	r3, r0
 8006358:	817b      	strh	r3, [r7, #10]
 800635a:	460b      	mov	r3, r1
 800635c:	813b      	strh	r3, [r7, #8]
 800635e:	4613      	mov	r3, r2
 8006360:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b20      	cmp	r3, #32
 800636c:	f040 80f9 	bne.w	8006562 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <HAL_I2C_Mem_Write+0x34>
 8006376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006378:	2b00      	cmp	r3, #0
 800637a:	d105      	bne.n	8006388 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006382:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e0ed      	b.n	8006564 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800638e:	2b01      	cmp	r3, #1
 8006390:	d101      	bne.n	8006396 <HAL_I2C_Mem_Write+0x4e>
 8006392:	2302      	movs	r3, #2
 8006394:	e0e6      	b.n	8006564 <HAL_I2C_Mem_Write+0x21c>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800639e:	f7ff fa73 	bl	8005888 <HAL_GetTick>
 80063a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	2319      	movs	r3, #25
 80063aa:	2201      	movs	r2, #1
 80063ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 fbcd 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e0d1      	b.n	8006564 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2221      	movs	r2, #33	; 0x21
 80063c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2240      	movs	r2, #64	; 0x40
 80063cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a3a      	ldr	r2, [r7, #32]
 80063da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063e8:	88f8      	ldrh	r0, [r7, #6]
 80063ea:	893a      	ldrh	r2, [r7, #8]
 80063ec:	8979      	ldrh	r1, [r7, #10]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	4603      	mov	r3, r0
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fadd 	bl	80069b8 <I2C_RequestMemoryWrite>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d005      	beq.n	8006410 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e0a9      	b.n	8006564 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006414:	b29b      	uxth	r3, r3
 8006416:	2bff      	cmp	r3, #255	; 0xff
 8006418:	d90e      	bls.n	8006438 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	22ff      	movs	r2, #255	; 0xff
 800641e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006424:	b2da      	uxtb	r2, r3
 8006426:	8979      	ldrh	r1, [r7, #10]
 8006428:	2300      	movs	r3, #0
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fd47 	bl	8006ec4 <I2C_TransferConfig>
 8006436:	e00f      	b.n	8006458 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29a      	uxth	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006446:	b2da      	uxtb	r2, r3
 8006448:	8979      	ldrh	r1, [r7, #10]
 800644a:	2300      	movs	r3, #0
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 fd36 	bl	8006ec4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 fbc6 	bl	8006bee <I2C_WaitOnTXISFlagUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e07b      	b.n	8006564 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	781a      	ldrb	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006486:	b29b      	uxth	r3, r3
 8006488:	3b01      	subs	r3, #1
 800648a:	b29a      	uxth	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006494:	3b01      	subs	r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d034      	beq.n	8006510 <HAL_I2C_Mem_Write+0x1c8>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d130      	bne.n	8006510 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	2200      	movs	r2, #0
 80064b6:	2180      	movs	r1, #128	; 0x80
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 fb49 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e04d      	b.n	8006564 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2bff      	cmp	r3, #255	; 0xff
 80064d0:	d90e      	bls.n	80064f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	22ff      	movs	r2, #255	; 0xff
 80064d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	8979      	ldrh	r1, [r7, #10]
 80064e0:	2300      	movs	r3, #0
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fceb 	bl	8006ec4 <I2C_TransferConfig>
 80064ee:	e00f      	b.n	8006510 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	8979      	ldrh	r1, [r7, #10]
 8006502:	2300      	movs	r3, #0
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fcda 	bl	8006ec4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d19e      	bne.n	8006458 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 fbac 	bl	8006c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e01a      	b.n	8006564 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2220      	movs	r2, #32
 8006534:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6859      	ldr	r1, [r3, #4]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	4b0a      	ldr	r3, [pc, #40]	; (800656c <HAL_I2C_Mem_Write+0x224>)
 8006542:	400b      	ands	r3, r1
 8006544:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	e000      	b.n	8006564 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006562:	2302      	movs	r3, #2
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	fe00e800 	.word	0xfe00e800

08006570 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b088      	sub	sp, #32
 8006574:	af02      	add	r7, sp, #8
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	4608      	mov	r0, r1
 800657a:	4611      	mov	r1, r2
 800657c:	461a      	mov	r2, r3
 800657e:	4603      	mov	r3, r0
 8006580:	817b      	strh	r3, [r7, #10]
 8006582:	460b      	mov	r3, r1
 8006584:	813b      	strh	r3, [r7, #8]
 8006586:	4613      	mov	r3, r2
 8006588:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b20      	cmp	r3, #32
 8006594:	f040 80fd 	bne.w	8006792 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <HAL_I2C_Mem_Read+0x34>
 800659e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d105      	bne.n	80065b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e0f1      	b.n	8006794 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_I2C_Mem_Read+0x4e>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e0ea      	b.n	8006794 <HAL_I2C_Mem_Read+0x224>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065c6:	f7ff f95f 	bl	8005888 <HAL_GetTick>
 80065ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	2319      	movs	r3, #25
 80065d2:	2201      	movs	r2, #1
 80065d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 fab9 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e0d5      	b.n	8006794 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2222      	movs	r2, #34	; 0x22
 80065ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2240      	movs	r2, #64	; 0x40
 80065f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a3a      	ldr	r2, [r7, #32]
 8006602:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006608:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006610:	88f8      	ldrh	r0, [r7, #6]
 8006612:	893a      	ldrh	r2, [r7, #8]
 8006614:	8979      	ldrh	r1, [r7, #10]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	4603      	mov	r3, r0
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 fa1d 	bl	8006a60 <I2C_RequestMemoryRead>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e0ad      	b.n	8006794 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	2bff      	cmp	r3, #255	; 0xff
 8006640:	d90e      	bls.n	8006660 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	22ff      	movs	r2, #255	; 0xff
 8006646:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664c:	b2da      	uxtb	r2, r3
 800664e:	8979      	ldrh	r1, [r7, #10]
 8006650:	4b52      	ldr	r3, [pc, #328]	; (800679c <HAL_I2C_Mem_Read+0x22c>)
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 fc33 	bl	8006ec4 <I2C_TransferConfig>
 800665e:	e00f      	b.n	8006680 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666e:	b2da      	uxtb	r2, r3
 8006670:	8979      	ldrh	r1, [r7, #10]
 8006672:	4b4a      	ldr	r3, [pc, #296]	; (800679c <HAL_I2C_Mem_Read+0x22c>)
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 fc22 	bl	8006ec4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	2200      	movs	r2, #0
 8006688:	2104      	movs	r1, #4
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 fa60 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e07c      	b.n	8006794 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b6:	3b01      	subs	r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d034      	beq.n	8006740 <HAL_I2C_Mem_Read+0x1d0>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d130      	bne.n	8006740 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	2200      	movs	r2, #0
 80066e6:	2180      	movs	r1, #128	; 0x80
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 fa31 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e04d      	b.n	8006794 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2bff      	cmp	r3, #255	; 0xff
 8006700:	d90e      	bls.n	8006720 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	22ff      	movs	r2, #255	; 0xff
 8006706:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670c:	b2da      	uxtb	r2, r3
 800670e:	8979      	ldrh	r1, [r7, #10]
 8006710:	2300      	movs	r3, #0
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 fbd3 	bl	8006ec4 <I2C_TransferConfig>
 800671e:	e00f      	b.n	8006740 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672e:	b2da      	uxtb	r2, r3
 8006730:	8979      	ldrh	r1, [r7, #10]
 8006732:	2300      	movs	r3, #0
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 fbc2 	bl	8006ec4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d19a      	bne.n	8006680 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 fa94 	bl	8006c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e01a      	b.n	8006794 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2220      	movs	r2, #32
 8006764:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6859      	ldr	r1, [r3, #4]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <HAL_I2C_Mem_Read+0x230>)
 8006772:	400b      	ands	r3, r1
 8006774:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	e000      	b.n	8006794 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006792:	2302      	movs	r3, #2
  }
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	80002400 	.word	0x80002400
 80067a0:	fe00e800 	.word	0xfe00e800

080067a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	; 0x28
 80067a8:	af02      	add	r7, sp, #8
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	607a      	str	r2, [r7, #4]
 80067ae:	603b      	str	r3, [r7, #0]
 80067b0:	460b      	mov	r3, r1
 80067b2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	f040 80f3 	bne.w	80069ac <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d4:	d101      	bne.n	80067da <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80067d6:	2302      	movs	r3, #2
 80067d8:	e0e9      	b.n	80069ae <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d101      	bne.n	80067e8 <HAL_I2C_IsDeviceReady+0x44>
 80067e4:	2302      	movs	r3, #2
 80067e6:	e0e2      	b.n	80069ae <HAL_I2C_IsDeviceReady+0x20a>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2224      	movs	r2, #36	; 0x24
 80067f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d107      	bne.n	8006816 <HAL_I2C_IsDeviceReady+0x72>
 8006806:	897b      	ldrh	r3, [r7, #10]
 8006808:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800680c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006814:	e006      	b.n	8006824 <HAL_I2C_IsDeviceReady+0x80>
 8006816:	897b      	ldrh	r3, [r7, #10]
 8006818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800681c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006820:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	6812      	ldr	r2, [r2, #0]
 8006828:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800682a:	f7ff f82d 	bl	8005888 <HAL_GetTick>
 800682e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b20      	cmp	r3, #32
 800683c:	bf0c      	ite	eq
 800683e:	2301      	moveq	r3, #1
 8006840:	2300      	movne	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	f003 0310 	and.w	r3, r3, #16
 8006850:	2b10      	cmp	r3, #16
 8006852:	bf0c      	ite	eq
 8006854:	2301      	moveq	r3, #1
 8006856:	2300      	movne	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800685c:	e034      	b.n	80068c8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006864:	d01a      	beq.n	800689c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006866:	f7ff f80f 	bl	8005888 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d302      	bcc.n	800687c <HAL_I2C_IsDeviceReady+0xd8>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10f      	bne.n	800689c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006888:	f043 0220 	orr.w	r2, r3, #32
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e088      	b.n	80069ae <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	bf0c      	ite	eq
 80068aa:	2301      	moveq	r3, #1
 80068ac:	2300      	movne	r3, #0
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	f003 0310 	and.w	r3, r3, #16
 80068bc:	2b10      	cmp	r3, #16
 80068be:	bf0c      	ite	eq
 80068c0:	2301      	moveq	r3, #1
 80068c2:	2300      	movne	r3, #0
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80068c8:	7ffb      	ldrb	r3, [r7, #31]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d102      	bne.n	80068d4 <HAL_I2C_IsDeviceReady+0x130>
 80068ce:	7fbb      	ldrb	r3, [r7, #30]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d0c4      	beq.n	800685e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f003 0310 	and.w	r3, r3, #16
 80068de:	2b10      	cmp	r3, #16
 80068e0:	d01a      	beq.n	8006918 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2200      	movs	r2, #0
 80068ea:	2120      	movs	r1, #32
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 f92f 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e058      	b.n	80069ae <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2220      	movs	r2, #32
 8006902:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	e04a      	b.n	80069ae <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2200      	movs	r2, #0
 8006920:	2120      	movs	r1, #32
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 f914 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e03d      	b.n	80069ae <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2210      	movs	r2, #16
 8006938:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2220      	movs	r2, #32
 8006940:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	429a      	cmp	r2, r3
 8006948:	d118      	bne.n	800697c <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006958:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2200      	movs	r2, #0
 8006962:	2120      	movs	r1, #32
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 f8f3 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e01c      	b.n	80069ae <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2220      	movs	r2, #32
 800697a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	3301      	adds	r3, #1
 8006980:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	429a      	cmp	r2, r3
 8006988:	f63f af39 	bhi.w	80067fe <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2220      	movs	r2, #32
 8006990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006998:	f043 0220 	orr.w	r2, r3, #32
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e000      	b.n	80069ae <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80069ac:	2302      	movs	r3, #2
  }
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3720      	adds	r7, #32
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af02      	add	r7, sp, #8
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	4608      	mov	r0, r1
 80069c2:	4611      	mov	r1, r2
 80069c4:	461a      	mov	r2, r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	817b      	strh	r3, [r7, #10]
 80069ca:	460b      	mov	r3, r1
 80069cc:	813b      	strh	r3, [r7, #8]
 80069ce:	4613      	mov	r3, r2
 80069d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80069d2:	88fb      	ldrh	r3, [r7, #6]
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	8979      	ldrh	r1, [r7, #10]
 80069d8:	4b20      	ldr	r3, [pc, #128]	; (8006a5c <I2C_RequestMemoryWrite+0xa4>)
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 fa6f 	bl	8006ec4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e6:	69fa      	ldr	r2, [r7, #28]
 80069e8:	69b9      	ldr	r1, [r7, #24]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f8ff 	bl	8006bee <I2C_WaitOnTXISFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e02c      	b.n	8006a54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d105      	bne.n	8006a0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a00:	893b      	ldrh	r3, [r7, #8]
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	629a      	str	r2, [r3, #40]	; 0x28
 8006a0a:	e015      	b.n	8006a38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a0c:	893b      	ldrh	r3, [r7, #8]
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	69b9      	ldr	r1, [r7, #24]
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 f8e5 	bl	8006bee <I2C_WaitOnTXISFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e012      	b.n	8006a54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a2e:	893b      	ldrh	r3, [r7, #8]
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2180      	movs	r1, #128	; 0x80
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f884 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	80002000 	.word	0x80002000

08006a60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	4608      	mov	r0, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	817b      	strh	r3, [r7, #10]
 8006a72:	460b      	mov	r3, r1
 8006a74:	813b      	strh	r3, [r7, #8]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	8979      	ldrh	r1, [r7, #10]
 8006a80:	4b20      	ldr	r3, [pc, #128]	; (8006b04 <I2C_RequestMemoryRead+0xa4>)
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	2300      	movs	r3, #0
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 fa1c 	bl	8006ec4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a8c:	69fa      	ldr	r2, [r7, #28]
 8006a8e:	69b9      	ldr	r1, [r7, #24]
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 f8ac 	bl	8006bee <I2C_WaitOnTXISFlagUntilTimeout>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e02c      	b.n	8006afa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006aa0:	88fb      	ldrh	r3, [r7, #6]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d105      	bne.n	8006ab2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006aa6:	893b      	ldrh	r3, [r7, #8]
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	629a      	str	r2, [r3, #40]	; 0x28
 8006ab0:	e015      	b.n	8006ade <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ab2:	893b      	ldrh	r3, [r7, #8]
 8006ab4:	0a1b      	lsrs	r3, r3, #8
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	69b9      	ldr	r1, [r7, #24]
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f892 	bl	8006bee <I2C_WaitOnTXISFlagUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e012      	b.n	8006afa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ad4:	893b      	ldrh	r3, [r7, #8]
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2140      	movs	r1, #64	; 0x40
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f831 	bl	8006b50 <I2C_WaitOnFlagUntilTimeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	80002000 	.word	0x80002000

08006b08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d103      	bne.n	8006b26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2200      	movs	r2, #0
 8006b24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d007      	beq.n	8006b44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f042 0201 	orr.w	r2, r2, #1
 8006b42:	619a      	str	r2, [r3, #24]
  }
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	603b      	str	r3, [r7, #0]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b60:	e031      	b.n	8006bc6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b68:	d02d      	beq.n	8006bc6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b6a:	f7fe fe8d 	bl	8005888 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d302      	bcc.n	8006b80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d122      	bne.n	8006bc6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699a      	ldr	r2, [r3, #24]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	bf0c      	ite	eq
 8006b90:	2301      	moveq	r3, #1
 8006b92:	2300      	movne	r3, #0
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	79fb      	ldrb	r3, [r7, #7]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d113      	bne.n	8006bc6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba2:	f043 0220 	orr.w	r2, r3, #32
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e00f      	b.n	8006be6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	bf0c      	ite	eq
 8006bd6:	2301      	moveq	r3, #1
 8006bd8:	2300      	movne	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	461a      	mov	r2, r3
 8006bde:	79fb      	ldrb	r3, [r7, #7]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d0be      	beq.n	8006b62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bfa:	e033      	b.n	8006c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f87f 	bl	8006d04 <I2C_IsErrorOccurred>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e031      	b.n	8006c74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c16:	d025      	beq.n	8006c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c18:	f7fe fe36 	bl	8005888 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d302      	bcc.n	8006c2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d11a      	bne.n	8006c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d013      	beq.n	8006c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c40:	f043 0220 	orr.w	r2, r3, #32
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e007      	b.n	8006c74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d1c4      	bne.n	8006bfc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c88:	e02f      	b.n	8006cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	68b9      	ldr	r1, [r7, #8]
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 f838 	bl	8006d04 <I2C_IsErrorOccurred>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e02d      	b.n	8006cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9e:	f7fe fdf3 	bl	8005888 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d302      	bcc.n	8006cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d11a      	bne.n	8006cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b20      	cmp	r3, #32
 8006cc0:	d013      	beq.n	8006cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc6:	f043 0220 	orr.w	r2, r3, #32
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e007      	b.n	8006cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f003 0320 	and.w	r3, r3, #32
 8006cf4:	2b20      	cmp	r3, #32
 8006cf6:	d1c8      	bne.n	8006c8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d068      	beq.n	8006e02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2210      	movs	r2, #16
 8006d36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d38:	e049      	b.n	8006dce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d045      	beq.n	8006dce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d42:	f7fe fda1 	bl	8005888 <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d302      	bcc.n	8006d58 <I2C_IsErrorOccurred+0x54>
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d13a      	bne.n	8006dce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d7a:	d121      	bne.n	8006dc0 <I2C_IsErrorOccurred+0xbc>
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d82:	d01d      	beq.n	8006dc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006d84:	7cfb      	ldrb	r3, [r7, #19]
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d01a      	beq.n	8006dc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d9a:	f7fe fd75 	bl	8005888 <HAL_GetTick>
 8006d9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006da0:	e00e      	b.n	8006dc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006da2:	f7fe fd71 	bl	8005888 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b19      	cmp	r3, #25
 8006dae:	d907      	bls.n	8006dc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	f043 0320 	orr.w	r3, r3, #32
 8006db6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006dbe:	e006      	b.n	8006dce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	2b20      	cmp	r3, #32
 8006dcc:	d1e9      	bne.n	8006da2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	f003 0320 	and.w	r3, r3, #32
 8006dd8:	2b20      	cmp	r3, #32
 8006dda:	d003      	beq.n	8006de4 <I2C_IsErrorOccurred+0xe0>
 8006ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0aa      	beq.n	8006d3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d103      	bne.n	8006df4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2220      	movs	r2, #32
 8006df2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	f043 0304 	orr.w	r3, r3, #4
 8006dfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	f043 0301 	orr.w	r3, r3, #1
 8006e1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00b      	beq.n	8006e4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	f043 0308 	orr.w	r3, r3, #8
 8006e3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00b      	beq.n	8006e70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	f043 0302 	orr.w	r3, r3, #2
 8006e5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d01c      	beq.n	8006eb2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f7ff fe45 	bl	8006b08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6859      	ldr	r1, [r3, #4]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <I2C_IsErrorOccurred+0x1bc>)
 8006e8a:	400b      	ands	r3, r1
 8006e8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	431a      	orrs	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3728      	adds	r7, #40	; 0x28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	fe00e800 	.word	0xfe00e800

08006ec4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	607b      	str	r3, [r7, #4]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	817b      	strh	r3, [r7, #10]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ed6:	897b      	ldrh	r3, [r7, #10]
 8006ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006edc:	7a7b      	ldrb	r3, [r7, #9]
 8006ede:	041b      	lsls	r3, r3, #16
 8006ee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ee4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ef2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	0d5b      	lsrs	r3, r3, #21
 8006efe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006f02:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <I2C_TransferConfig+0x60>)
 8006f04:	430b      	orrs	r3, r1
 8006f06:	43db      	mvns	r3, r3
 8006f08:	ea02 0103 	and.w	r1, r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f16:	bf00      	nop
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	03ff63ff 	.word	0x03ff63ff

08006f28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d138      	bne.n	8006fb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e032      	b.n	8006fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2224      	movs	r2, #36	; 0x24
 8006f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0201 	bic.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6819      	ldr	r1, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0201 	orr.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e000      	b.n	8006fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006fb0:	2302      	movs	r3, #2
  }
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b085      	sub	sp, #20
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b20      	cmp	r3, #32
 8006fd2:	d139      	bne.n	8007048 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d101      	bne.n	8006fe2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e033      	b.n	800704a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2224      	movs	r2, #36	; 0x24
 8006fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0201 	bic.w	r2, r2, #1
 8007000:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007010:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	021b      	lsls	r3, r3, #8
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2220      	movs	r2, #32
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	e000      	b.n	800704a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007048:	2302      	movs	r3, #2
  }
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800705e:	af00      	add	r7, sp, #0
 8007060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007064:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007068:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800706a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800706e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d102      	bne.n	800707e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	f001 b823 	b.w	80080c4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800707e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007082:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 817d 	beq.w	800738e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007094:	4bbc      	ldr	r3, [pc, #752]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f003 030c 	and.w	r3, r3, #12
 800709c:	2b04      	cmp	r3, #4
 800709e:	d00c      	beq.n	80070ba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80070a0:	4bb9      	ldr	r3, [pc, #740]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f003 030c 	and.w	r3, r3, #12
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d15c      	bne.n	8007166 <HAL_RCC_OscConfig+0x10e>
 80070ac:	4bb6      	ldr	r3, [pc, #728]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b8:	d155      	bne.n	8007166 <HAL_RCC_OscConfig+0x10e>
 80070ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070be:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80070c6:	fa93 f3a3 	rbit	r3, r3
 80070ca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80070ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070d2:	fab3 f383 	clz	r3, r3
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	095b      	lsrs	r3, r3, #5
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	f043 0301 	orr.w	r3, r3, #1
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d102      	bne.n	80070ec <HAL_RCC_OscConfig+0x94>
 80070e6:	4ba8      	ldr	r3, [pc, #672]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	e015      	b.n	8007118 <HAL_RCC_OscConfig+0xc0>
 80070ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070f0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80070f8:	fa93 f3a3 	rbit	r3, r3
 80070fc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007100:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007104:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007108:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800710c:	fa93 f3a3 	rbit	r3, r3
 8007110:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007114:	4b9c      	ldr	r3, [pc, #624]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800711c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8007120:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007124:	fa92 f2a2 	rbit	r2, r2
 8007128:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800712c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007130:	fab2 f282 	clz	r2, r2
 8007134:	b2d2      	uxtb	r2, r2
 8007136:	f042 0220 	orr.w	r2, r2, #32
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	f002 021f 	and.w	r2, r2, #31
 8007140:	2101      	movs	r1, #1
 8007142:	fa01 f202 	lsl.w	r2, r1, r2
 8007146:	4013      	ands	r3, r2
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 811f 	beq.w	800738c <HAL_RCC_OscConfig+0x334>
 800714e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007152:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f040 8116 	bne.w	800738c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	f000 bfaf 	b.w	80080c4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800716a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007176:	d106      	bne.n	8007186 <HAL_RCC_OscConfig+0x12e>
 8007178:	4b83      	ldr	r3, [pc, #524]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a82      	ldr	r2, [pc, #520]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 800717e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	e036      	b.n	80071f4 <HAL_RCC_OscConfig+0x19c>
 8007186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800718a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10c      	bne.n	80071b0 <HAL_RCC_OscConfig+0x158>
 8007196:	4b7c      	ldr	r3, [pc, #496]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a7b      	ldr	r2, [pc, #492]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 800719c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	4b79      	ldr	r3, [pc, #484]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a78      	ldr	r2, [pc, #480]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 80071a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	e021      	b.n	80071f4 <HAL_RCC_OscConfig+0x19c>
 80071b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071c0:	d10c      	bne.n	80071dc <HAL_RCC_OscConfig+0x184>
 80071c2:	4b71      	ldr	r3, [pc, #452]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a70      	ldr	r2, [pc, #448]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 80071c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	4b6e      	ldr	r3, [pc, #440]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a6d      	ldr	r2, [pc, #436]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 80071d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	e00b      	b.n	80071f4 <HAL_RCC_OscConfig+0x19c>
 80071dc:	4b6a      	ldr	r3, [pc, #424]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a69      	ldr	r2, [pc, #420]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 80071e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	4b67      	ldr	r3, [pc, #412]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a66      	ldr	r2, [pc, #408]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 80071ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071f2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80071f4:	4b64      	ldr	r3, [pc, #400]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	f023 020f 	bic.w	r2, r3, #15
 80071fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007200:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	495f      	ldr	r1, [pc, #380]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 800720a:	4313      	orrs	r3, r2
 800720c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800720e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007212:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d059      	beq.n	80072d2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800721e:	f7fe fb33 	bl	8005888 <HAL_GetTick>
 8007222:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007226:	e00a      	b.n	800723e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007228:	f7fe fb2e 	bl	8005888 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b64      	cmp	r3, #100	; 0x64
 8007236:	d902      	bls.n	800723e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	f000 bf43 	b.w	80080c4 <HAL_RCC_OscConfig+0x106c>
 800723e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007242:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007246:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800724a:	fa93 f3a3 	rbit	r3, r3
 800724e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007252:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007256:	fab3 f383 	clz	r3, r3
 800725a:	b2db      	uxtb	r3, r3
 800725c:	095b      	lsrs	r3, r3, #5
 800725e:	b2db      	uxtb	r3, r3
 8007260:	f043 0301 	orr.w	r3, r3, #1
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b01      	cmp	r3, #1
 8007268:	d102      	bne.n	8007270 <HAL_RCC_OscConfig+0x218>
 800726a:	4b47      	ldr	r3, [pc, #284]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	e015      	b.n	800729c <HAL_RCC_OscConfig+0x244>
 8007270:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007274:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007278:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800727c:	fa93 f3a3 	rbit	r3, r3
 8007280:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007284:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007288:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800728c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007290:	fa93 f3a3 	rbit	r3, r3
 8007294:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007298:	4b3b      	ldr	r3, [pc, #236]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80072a0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80072a4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80072a8:	fa92 f2a2 	rbit	r2, r2
 80072ac:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80072b0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80072b4:	fab2 f282 	clz	r2, r2
 80072b8:	b2d2      	uxtb	r2, r2
 80072ba:	f042 0220 	orr.w	r2, r2, #32
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	f002 021f 	and.w	r2, r2, #31
 80072c4:	2101      	movs	r1, #1
 80072c6:	fa01 f202 	lsl.w	r2, r1, r2
 80072ca:	4013      	ands	r3, r2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0ab      	beq.n	8007228 <HAL_RCC_OscConfig+0x1d0>
 80072d0:	e05d      	b.n	800738e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072d2:	f7fe fad9 	bl	8005888 <HAL_GetTick>
 80072d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072da:	e00a      	b.n	80072f2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072dc:	f7fe fad4 	bl	8005888 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b64      	cmp	r3, #100	; 0x64
 80072ea:	d902      	bls.n	80072f2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	f000 bee9 	b.w	80080c4 <HAL_RCC_OscConfig+0x106c>
 80072f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072f6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072fa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80072fe:	fa93 f3a3 	rbit	r3, r3
 8007302:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007306:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800730a:	fab3 f383 	clz	r3, r3
 800730e:	b2db      	uxtb	r3, r3
 8007310:	095b      	lsrs	r3, r3, #5
 8007312:	b2db      	uxtb	r3, r3
 8007314:	f043 0301 	orr.w	r3, r3, #1
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b01      	cmp	r3, #1
 800731c:	d102      	bne.n	8007324 <HAL_RCC_OscConfig+0x2cc>
 800731e:	4b1a      	ldr	r3, [pc, #104]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	e015      	b.n	8007350 <HAL_RCC_OscConfig+0x2f8>
 8007324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007328:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800732c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007330:	fa93 f3a3 	rbit	r3, r3
 8007334:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800733c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007340:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007344:	fa93 f3a3 	rbit	r3, r3
 8007348:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800734c:	4b0e      	ldr	r3, [pc, #56]	; (8007388 <HAL_RCC_OscConfig+0x330>)
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007354:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007358:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800735c:	fa92 f2a2 	rbit	r2, r2
 8007360:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007364:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007368:	fab2 f282 	clz	r2, r2
 800736c:	b2d2      	uxtb	r2, r2
 800736e:	f042 0220 	orr.w	r2, r2, #32
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	f002 021f 	and.w	r2, r2, #31
 8007378:	2101      	movs	r1, #1
 800737a:	fa01 f202 	lsl.w	r2, r1, r2
 800737e:	4013      	ands	r3, r2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1ab      	bne.n	80072dc <HAL_RCC_OscConfig+0x284>
 8007384:	e003      	b.n	800738e <HAL_RCC_OscConfig+0x336>
 8007386:	bf00      	nop
 8007388:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800738c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800738e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 817d 	beq.w	800769e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80073a4:	4ba6      	ldr	r3, [pc, #664]	; (8007640 <HAL_RCC_OscConfig+0x5e8>)
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f003 030c 	and.w	r3, r3, #12
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00b      	beq.n	80073c8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80073b0:	4ba3      	ldr	r3, [pc, #652]	; (8007640 <HAL_RCC_OscConfig+0x5e8>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f003 030c 	and.w	r3, r3, #12
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d172      	bne.n	80074a2 <HAL_RCC_OscConfig+0x44a>
 80073bc:	4ba0      	ldr	r3, [pc, #640]	; (8007640 <HAL_RCC_OscConfig+0x5e8>)
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d16c      	bne.n	80074a2 <HAL_RCC_OscConfig+0x44a>
 80073c8:	2302      	movs	r3, #2
 80073ca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ce:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80073d2:	fa93 f3a3 	rbit	r3, r3
 80073d6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80073da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073de:	fab3 f383 	clz	r3, r3
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	095b      	lsrs	r3, r3, #5
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	f043 0301 	orr.w	r3, r3, #1
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d102      	bne.n	80073f8 <HAL_RCC_OscConfig+0x3a0>
 80073f2:	4b93      	ldr	r3, [pc, #588]	; (8007640 <HAL_RCC_OscConfig+0x5e8>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	e013      	b.n	8007420 <HAL_RCC_OscConfig+0x3c8>
 80073f8:	2302      	movs	r3, #2
 80073fa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073fe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007402:	fa93 f3a3 	rbit	r3, r3
 8007406:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800740a:	2302      	movs	r3, #2
 800740c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007410:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007414:	fa93 f3a3 	rbit	r3, r3
 8007418:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800741c:	4b88      	ldr	r3, [pc, #544]	; (8007640 <HAL_RCC_OscConfig+0x5e8>)
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	2202      	movs	r2, #2
 8007422:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007426:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800742a:	fa92 f2a2 	rbit	r2, r2
 800742e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007432:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007436:	fab2 f282 	clz	r2, r2
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	f042 0220 	orr.w	r2, r2, #32
 8007440:	b2d2      	uxtb	r2, r2
 8007442:	f002 021f 	and.w	r2, r2, #31
 8007446:	2101      	movs	r1, #1
 8007448:	fa01 f202 	lsl.w	r2, r1, r2
 800744c:	4013      	ands	r3, r2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <HAL_RCC_OscConfig+0x410>
 8007452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007456:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d002      	beq.n	8007468 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	f000 be2e 	b.w	80080c4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007468:	4b75      	ldr	r3, [pc, #468]	; (8007640 <HAL_RCC_OscConfig+0x5e8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	21f8      	movs	r1, #248	; 0xf8
 800747e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007482:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007486:	fa91 f1a1 	rbit	r1, r1
 800748a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800748e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007492:	fab1 f181 	clz	r1, r1
 8007496:	b2c9      	uxtb	r1, r1
 8007498:	408b      	lsls	r3, r1
 800749a:	4969      	ldr	r1, [pc, #420]	; (8007640 <HAL_RCC_OscConfig+0x5e8>)
 800749c:	4313      	orrs	r3, r2
 800749e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074a0:	e0fd      	b.n	800769e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80074a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 8088 	beq.w	80075c4 <HAL_RCC_OscConfig+0x56c>
 80074b4:	2301      	movs	r3, #1
 80074b6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80074be:	fa93 f3a3 	rbit	r3, r3
 80074c2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80074c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074ca:	fab3 f383 	clz	r3, r3
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80074d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	461a      	mov	r2, r3
 80074dc:	2301      	movs	r3, #1
 80074de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e0:	f7fe f9d2 	bl	8005888 <HAL_GetTick>
 80074e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e8:	e00a      	b.n	8007500 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074ea:	f7fe f9cd 	bl	8005888 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d902      	bls.n	8007500 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	f000 bde2 	b.w	80080c4 <HAL_RCC_OscConfig+0x106c>
 8007500:	2302      	movs	r3, #2
 8007502:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007506:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800750a:	fa93 f3a3 	rbit	r3, r3
 800750e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007512:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007516:	fab3 f383 	clz	r3, r3
 800751a:	b2db      	uxtb	r3, r3
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	b2db      	uxtb	r3, r3
 8007520:	f043 0301 	orr.w	r3, r3, #1
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b01      	cmp	r3, #1
 8007528:	d102      	bne.n	8007530 <HAL_RCC_OscConfig+0x4d8>
 800752a:	4b45      	ldr	r3, [pc, #276]	; (8007640 <HAL_RCC_OscConfig+0x5e8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	e013      	b.n	8007558 <HAL_RCC_OscConfig+0x500>
 8007530:	2302      	movs	r3, #2
 8007532:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007536:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800753a:	fa93 f3a3 	rbit	r3, r3
 800753e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007542:	2302      	movs	r3, #2
 8007544:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007548:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800754c:	fa93 f3a3 	rbit	r3, r3
 8007550:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007554:	4b3a      	ldr	r3, [pc, #232]	; (8007640 <HAL_RCC_OscConfig+0x5e8>)
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	2202      	movs	r2, #2
 800755a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800755e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007562:	fa92 f2a2 	rbit	r2, r2
 8007566:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800756a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800756e:	fab2 f282 	clz	r2, r2
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	f042 0220 	orr.w	r2, r2, #32
 8007578:	b2d2      	uxtb	r2, r2
 800757a:	f002 021f 	and.w	r2, r2, #31
 800757e:	2101      	movs	r1, #1
 8007580:	fa01 f202 	lsl.w	r2, r1, r2
 8007584:	4013      	ands	r3, r2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0af      	beq.n	80074ea <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800758a:	4b2d      	ldr	r3, [pc, #180]	; (8007640 <HAL_RCC_OscConfig+0x5e8>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007596:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	21f8      	movs	r1, #248	; 0xf8
 80075a0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075a4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80075a8:	fa91 f1a1 	rbit	r1, r1
 80075ac:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80075b0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80075b4:	fab1 f181 	clz	r1, r1
 80075b8:	b2c9      	uxtb	r1, r1
 80075ba:	408b      	lsls	r3, r1
 80075bc:	4920      	ldr	r1, [pc, #128]	; (8007640 <HAL_RCC_OscConfig+0x5e8>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	600b      	str	r3, [r1, #0]
 80075c2:	e06c      	b.n	800769e <HAL_RCC_OscConfig+0x646>
 80075c4:	2301      	movs	r3, #1
 80075c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80075ce:	fa93 f3a3 	rbit	r3, r3
 80075d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80075d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075da:	fab3 f383 	clz	r3, r3
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80075e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	461a      	mov	r2, r3
 80075ec:	2300      	movs	r3, #0
 80075ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075f0:	f7fe f94a 	bl	8005888 <HAL_GetTick>
 80075f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075f8:	e00a      	b.n	8007610 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075fa:	f7fe f945 	bl	8005888 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d902      	bls.n	8007610 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	f000 bd5a 	b.w	80080c4 <HAL_RCC_OscConfig+0x106c>
 8007610:	2302      	movs	r3, #2
 8007612:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007616:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800761a:	fa93 f3a3 	rbit	r3, r3
 800761e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8007622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007626:	fab3 f383 	clz	r3, r3
 800762a:	b2db      	uxtb	r3, r3
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	b2db      	uxtb	r3, r3
 8007630:	f043 0301 	orr.w	r3, r3, #1
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b01      	cmp	r3, #1
 8007638:	d104      	bne.n	8007644 <HAL_RCC_OscConfig+0x5ec>
 800763a:	4b01      	ldr	r3, [pc, #4]	; (8007640 <HAL_RCC_OscConfig+0x5e8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	e015      	b.n	800766c <HAL_RCC_OscConfig+0x614>
 8007640:	40021000 	.word	0x40021000
 8007644:	2302      	movs	r3, #2
 8007646:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800764a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800764e:	fa93 f3a3 	rbit	r3, r3
 8007652:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007656:	2302      	movs	r3, #2
 8007658:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800765c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007660:	fa93 f3a3 	rbit	r3, r3
 8007664:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007668:	4bc8      	ldr	r3, [pc, #800]	; (800798c <HAL_RCC_OscConfig+0x934>)
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	2202      	movs	r2, #2
 800766e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007672:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007676:	fa92 f2a2 	rbit	r2, r2
 800767a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800767e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007682:	fab2 f282 	clz	r2, r2
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	f042 0220 	orr.w	r2, r2, #32
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	f002 021f 	and.w	r2, r2, #31
 8007692:	2101      	movs	r1, #1
 8007694:	fa01 f202 	lsl.w	r2, r1, r2
 8007698:	4013      	ands	r3, r2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1ad      	bne.n	80075fa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800769e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0308 	and.w	r3, r3, #8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 8110 	beq.w	80078d4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d079      	beq.n	80077b8 <HAL_RCC_OscConfig+0x760>
 80076c4:	2301      	movs	r3, #1
 80076c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80076ce:	fa93 f3a3 	rbit	r3, r3
 80076d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80076d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076da:	fab3 f383 	clz	r3, r3
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	4bab      	ldr	r3, [pc, #684]	; (8007990 <HAL_RCC_OscConfig+0x938>)
 80076e4:	4413      	add	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	461a      	mov	r2, r3
 80076ea:	2301      	movs	r3, #1
 80076ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076ee:	f7fe f8cb 	bl	8005888 <HAL_GetTick>
 80076f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076f6:	e00a      	b.n	800770e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076f8:	f7fe f8c6 	bl	8005888 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	2b02      	cmp	r3, #2
 8007706:	d902      	bls.n	800770e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	f000 bcdb 	b.w	80080c4 <HAL_RCC_OscConfig+0x106c>
 800770e:	2302      	movs	r3, #2
 8007710:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007714:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007718:	fa93 f3a3 	rbit	r3, r3
 800771c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007724:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007728:	2202      	movs	r2, #2
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007730:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	fa93 f2a3 	rbit	r2, r3
 800773a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800773e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800774c:	2202      	movs	r2, #2
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	fa93 f2a3 	rbit	r2, r3
 800775e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007762:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007766:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007768:	4b88      	ldr	r3, [pc, #544]	; (800798c <HAL_RCC_OscConfig+0x934>)
 800776a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800776c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007770:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007774:	2102      	movs	r1, #2
 8007776:	6019      	str	r1, [r3, #0]
 8007778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800777c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	fa93 f1a3 	rbit	r1, r3
 8007786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800778a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800778e:	6019      	str	r1, [r3, #0]
  return result;
 8007790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007794:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	fab3 f383 	clz	r3, r3
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	f003 031f 	and.w	r3, r3, #31
 80077aa:	2101      	movs	r1, #1
 80077ac:	fa01 f303 	lsl.w	r3, r1, r3
 80077b0:	4013      	ands	r3, r2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0a0      	beq.n	80076f8 <HAL_RCC_OscConfig+0x6a0>
 80077b6:	e08d      	b.n	80078d4 <HAL_RCC_OscConfig+0x87c>
 80077b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	fa93 f2a3 	rbit	r2, r3
 80077d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80077da:	601a      	str	r2, [r3, #0]
  return result;
 80077dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80077e4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077e6:	fab3 f383 	clz	r3, r3
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	4b68      	ldr	r3, [pc, #416]	; (8007990 <HAL_RCC_OscConfig+0x938>)
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	461a      	mov	r2, r3
 80077f6:	2300      	movs	r3, #0
 80077f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077fa:	f7fe f845 	bl	8005888 <HAL_GetTick>
 80077fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007802:	e00a      	b.n	800781a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007804:	f7fe f840 	bl	8005888 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	d902      	bls.n	800781a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	f000 bc55 	b.w	80080c4 <HAL_RCC_OscConfig+0x106c>
 800781a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800781e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007822:	2202      	movs	r2, #2
 8007824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800782a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	fa93 f2a3 	rbit	r2, r3
 8007834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007838:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007842:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007846:	2202      	movs	r2, #2
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800784e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	fa93 f2a3 	rbit	r2, r3
 8007858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800785c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800786a:	2202      	movs	r2, #2
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	fa93 f2a3 	rbit	r2, r3
 800787c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007880:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007884:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007886:	4b41      	ldr	r3, [pc, #260]	; (800798c <HAL_RCC_OscConfig+0x934>)
 8007888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800788a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800788e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007892:	2102      	movs	r1, #2
 8007894:	6019      	str	r1, [r3, #0]
 8007896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800789a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	fa93 f1a3 	rbit	r1, r3
 80078a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80078ac:	6019      	str	r1, [r3, #0]
  return result;
 80078ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078b2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	fab3 f383 	clz	r3, r3
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f003 031f 	and.w	r3, r3, #31
 80078c8:	2101      	movs	r1, #1
 80078ca:	fa01 f303 	lsl.w	r3, r1, r3
 80078ce:	4013      	ands	r3, r2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d197      	bne.n	8007804 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 81a1 	beq.w	8007c2c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078ea:	2300      	movs	r3, #0
 80078ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078f0:	4b26      	ldr	r3, [pc, #152]	; (800798c <HAL_RCC_OscConfig+0x934>)
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d116      	bne.n	800792a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078fc:	4b23      	ldr	r3, [pc, #140]	; (800798c <HAL_RCC_OscConfig+0x934>)
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	4a22      	ldr	r2, [pc, #136]	; (800798c <HAL_RCC_OscConfig+0x934>)
 8007902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007906:	61d3      	str	r3, [r2, #28]
 8007908:	4b20      	ldr	r3, [pc, #128]	; (800798c <HAL_RCC_OscConfig+0x934>)
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007914:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800791e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007922:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007924:	2301      	movs	r3, #1
 8007926:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800792a:	4b1a      	ldr	r3, [pc, #104]	; (8007994 <HAL_RCC_OscConfig+0x93c>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007932:	2b00      	cmp	r3, #0
 8007934:	d11a      	bne.n	800796c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007936:	4b17      	ldr	r3, [pc, #92]	; (8007994 <HAL_RCC_OscConfig+0x93c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a16      	ldr	r2, [pc, #88]	; (8007994 <HAL_RCC_OscConfig+0x93c>)
 800793c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007940:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007942:	f7fd ffa1 	bl	8005888 <HAL_GetTick>
 8007946:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800794a:	e009      	b.n	8007960 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800794c:	f7fd ff9c 	bl	8005888 <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	2b64      	cmp	r3, #100	; 0x64
 800795a:	d901      	bls.n	8007960 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800795c:	2303      	movs	r3, #3
 800795e:	e3b1      	b.n	80080c4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007960:	4b0c      	ldr	r3, [pc, #48]	; (8007994 <HAL_RCC_OscConfig+0x93c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007968:	2b00      	cmp	r3, #0
 800796a:	d0ef      	beq.n	800794c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800796c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007970:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d10d      	bne.n	8007998 <HAL_RCC_OscConfig+0x940>
 800797c:	4b03      	ldr	r3, [pc, #12]	; (800798c <HAL_RCC_OscConfig+0x934>)
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	4a02      	ldr	r2, [pc, #8]	; (800798c <HAL_RCC_OscConfig+0x934>)
 8007982:	f043 0301 	orr.w	r3, r3, #1
 8007986:	6213      	str	r3, [r2, #32]
 8007988:	e03c      	b.n	8007a04 <HAL_RCC_OscConfig+0x9ac>
 800798a:	bf00      	nop
 800798c:	40021000 	.word	0x40021000
 8007990:	10908120 	.word	0x10908120
 8007994:	40007000 	.word	0x40007000
 8007998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800799c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10c      	bne.n	80079c2 <HAL_RCC_OscConfig+0x96a>
 80079a8:	4bc1      	ldr	r3, [pc, #772]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	4ac0      	ldr	r2, [pc, #768]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 80079ae:	f023 0301 	bic.w	r3, r3, #1
 80079b2:	6213      	str	r3, [r2, #32]
 80079b4:	4bbe      	ldr	r3, [pc, #760]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	4abd      	ldr	r2, [pc, #756]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 80079ba:	f023 0304 	bic.w	r3, r3, #4
 80079be:	6213      	str	r3, [r2, #32]
 80079c0:	e020      	b.n	8007a04 <HAL_RCC_OscConfig+0x9ac>
 80079c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	2b05      	cmp	r3, #5
 80079d0:	d10c      	bne.n	80079ec <HAL_RCC_OscConfig+0x994>
 80079d2:	4bb7      	ldr	r3, [pc, #732]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	4ab6      	ldr	r2, [pc, #728]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 80079d8:	f043 0304 	orr.w	r3, r3, #4
 80079dc:	6213      	str	r3, [r2, #32]
 80079de:	4bb4      	ldr	r3, [pc, #720]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	4ab3      	ldr	r2, [pc, #716]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 80079e4:	f043 0301 	orr.w	r3, r3, #1
 80079e8:	6213      	str	r3, [r2, #32]
 80079ea:	e00b      	b.n	8007a04 <HAL_RCC_OscConfig+0x9ac>
 80079ec:	4bb0      	ldr	r3, [pc, #704]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	4aaf      	ldr	r2, [pc, #700]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 80079f2:	f023 0301 	bic.w	r3, r3, #1
 80079f6:	6213      	str	r3, [r2, #32]
 80079f8:	4bad      	ldr	r3, [pc, #692]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	4aac      	ldr	r2, [pc, #688]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 80079fe:	f023 0304 	bic.w	r3, r3, #4
 8007a02:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 8081 	beq.w	8007b18 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a16:	f7fd ff37 	bl	8005888 <HAL_GetTick>
 8007a1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a1e:	e00b      	b.n	8007a38 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a20:	f7fd ff32 	bl	8005888 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d901      	bls.n	8007a38 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e345      	b.n	80080c4 <HAL_RCC_OscConfig+0x106c>
 8007a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007a40:	2202      	movs	r2, #2
 8007a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a48:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	fa93 f2a3 	rbit	r2, r3
 8007a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a56:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a60:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007a64:	2202      	movs	r2, #2
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a6c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	fa93 f2a3 	rbit	r2, r3
 8007a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a7a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007a7e:	601a      	str	r2, [r3, #0]
  return result;
 8007a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a84:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007a88:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a8a:	fab3 f383 	clz	r3, r3
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	095b      	lsrs	r3, r3, #5
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	f043 0302 	orr.w	r3, r3, #2
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d102      	bne.n	8007aa4 <HAL_RCC_OscConfig+0xa4c>
 8007a9e:	4b84      	ldr	r3, [pc, #528]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	e013      	b.n	8007acc <HAL_RCC_OscConfig+0xa74>
 8007aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aa8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007aac:	2202      	movs	r2, #2
 8007aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ab4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	fa93 f2a3 	rbit	r2, r3
 8007abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ac2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	4b79      	ldr	r3, [pc, #484]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 8007aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007acc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ad0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007ad4:	2102      	movs	r1, #2
 8007ad6:	6011      	str	r1, [r2, #0]
 8007ad8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007adc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007ae0:	6812      	ldr	r2, [r2, #0]
 8007ae2:	fa92 f1a2 	rbit	r1, r2
 8007ae6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007aea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007aee:	6011      	str	r1, [r2, #0]
  return result;
 8007af0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007af4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007af8:	6812      	ldr	r2, [r2, #0]
 8007afa:	fab2 f282 	clz	r2, r2
 8007afe:	b2d2      	uxtb	r2, r2
 8007b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b04:	b2d2      	uxtb	r2, r2
 8007b06:	f002 021f 	and.w	r2, r2, #31
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8007b10:	4013      	ands	r3, r2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d084      	beq.n	8007a20 <HAL_RCC_OscConfig+0x9c8>
 8007b16:	e07f      	b.n	8007c18 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b18:	f7fd feb6 	bl	8005888 <HAL_GetTick>
 8007b1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b20:	e00b      	b.n	8007b3a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b22:	f7fd feb1 	bl	8005888 <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d901      	bls.n	8007b3a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e2c4      	b.n	80080c4 <HAL_RCC_OscConfig+0x106c>
 8007b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b3e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007b42:	2202      	movs	r2, #2
 8007b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b4a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	fa93 f2a3 	rbit	r2, r3
 8007b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b58:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b62:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007b66:	2202      	movs	r2, #2
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b6e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	fa93 f2a3 	rbit	r2, r3
 8007b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b7c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007b80:	601a      	str	r2, [r3, #0]
  return result;
 8007b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b86:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007b8a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b8c:	fab3 f383 	clz	r3, r3
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	095b      	lsrs	r3, r3, #5
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	f043 0302 	orr.w	r3, r3, #2
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d102      	bne.n	8007ba6 <HAL_RCC_OscConfig+0xb4e>
 8007ba0:	4b43      	ldr	r3, [pc, #268]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	e013      	b.n	8007bce <HAL_RCC_OscConfig+0xb76>
 8007ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007baa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007bae:	2202      	movs	r2, #2
 8007bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bb6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	fa93 f2a3 	rbit	r2, r3
 8007bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bc4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	4b39      	ldr	r3, [pc, #228]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bd2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007bd6:	2102      	movs	r1, #2
 8007bd8:	6011      	str	r1, [r2, #0]
 8007bda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bde:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007be2:	6812      	ldr	r2, [r2, #0]
 8007be4:	fa92 f1a2 	rbit	r1, r2
 8007be8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007bf0:	6011      	str	r1, [r2, #0]
  return result;
 8007bf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bf6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007bfa:	6812      	ldr	r2, [r2, #0]
 8007bfc:	fab2 f282 	clz	r2, r2
 8007c00:	b2d2      	uxtb	r2, r2
 8007c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	f002 021f 	and.w	r2, r2, #31
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8007c12:	4013      	ands	r3, r2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d184      	bne.n	8007b22 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007c18:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d105      	bne.n	8007c2c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c20:	4b23      	ldr	r3, [pc, #140]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	4a22      	ldr	r2, [pc, #136]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 8007c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c2a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 8242 	beq.w	80080c2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c3e:	4b1c      	ldr	r3, [pc, #112]	; (8007cb0 <HAL_RCC_OscConfig+0xc58>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f003 030c 	and.w	r3, r3, #12
 8007c46:	2b08      	cmp	r3, #8
 8007c48:	f000 8213 	beq.w	8008072 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	f040 8162 	bne.w	8007f22 <HAL_RCC_OscConfig+0xeca>
 8007c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c62:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007c66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c70:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	fa93 f2a3 	rbit	r2, r3
 8007c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c7e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007c82:	601a      	str	r2, [r3, #0]
  return result;
 8007c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c88:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007c8c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c8e:	fab3 f383 	clz	r3, r3
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007c98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ca4:	f7fd fdf0 	bl	8005888 <HAL_GetTick>
 8007ca8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cac:	e00c      	b.n	8007cc8 <HAL_RCC_OscConfig+0xc70>
 8007cae:	bf00      	nop
 8007cb0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cb4:	f7fd fde8 	bl	8005888 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d901      	bls.n	8007cc8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e1fd      	b.n	80080c4 <HAL_RCC_OscConfig+0x106c>
 8007cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ccc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007cd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007cd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cda:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	fa93 f2a3 	rbit	r2, r3
 8007ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ce8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007cec:	601a      	str	r2, [r3, #0]
  return result;
 8007cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cf2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007cf6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cf8:	fab3 f383 	clz	r3, r3
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	095b      	lsrs	r3, r3, #5
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f043 0301 	orr.w	r3, r3, #1
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d102      	bne.n	8007d12 <HAL_RCC_OscConfig+0xcba>
 8007d0c:	4bb0      	ldr	r3, [pc, #704]	; (8007fd0 <HAL_RCC_OscConfig+0xf78>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	e027      	b.n	8007d62 <HAL_RCC_OscConfig+0xd0a>
 8007d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d16:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d24:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	fa93 f2a3 	rbit	r2, r3
 8007d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d32:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d3c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007d40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d4a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	fa93 f2a3 	rbit	r2, r3
 8007d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d58:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	4b9c      	ldr	r3, [pc, #624]	; (8007fd0 <HAL_RCC_OscConfig+0xf78>)
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d66:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007d6a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007d6e:	6011      	str	r1, [r2, #0]
 8007d70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d74:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007d78:	6812      	ldr	r2, [r2, #0]
 8007d7a:	fa92 f1a2 	rbit	r1, r2
 8007d7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d82:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007d86:	6011      	str	r1, [r2, #0]
  return result;
 8007d88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d8c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	fab2 f282 	clz	r2, r2
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	f042 0220 	orr.w	r2, r2, #32
 8007d9c:	b2d2      	uxtb	r2, r2
 8007d9e:	f002 021f 	and.w	r2, r2, #31
 8007da2:	2101      	movs	r1, #1
 8007da4:	fa01 f202 	lsl.w	r2, r1, r2
 8007da8:	4013      	ands	r3, r2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d182      	bne.n	8007cb4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007dae:	4b88      	ldr	r3, [pc, #544]	; (8007fd0 <HAL_RCC_OscConfig+0xf78>)
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	497f      	ldr	r1, [pc, #508]	; (8007fd0 <HAL_RCC_OscConfig+0xf78>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	604b      	str	r3, [r1, #4]
 8007dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dda:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007dde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007de8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	fa93 f2a3 	rbit	r2, r3
 8007df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007df6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007dfa:	601a      	str	r2, [r3, #0]
  return result;
 8007dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e00:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007e04:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e06:	fab3 f383 	clz	r3, r3
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007e10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	461a      	mov	r2, r3
 8007e18:	2301      	movs	r3, #1
 8007e1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e1c:	f7fd fd34 	bl	8005888 <HAL_GetTick>
 8007e20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e24:	e009      	b.n	8007e3a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e26:	f7fd fd2f 	bl	8005888 <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d901      	bls.n	8007e3a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e144      	b.n	80080c4 <HAL_RCC_OscConfig+0x106c>
 8007e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e3e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007e42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e4c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	fa93 f2a3 	rbit	r2, r3
 8007e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e5a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007e5e:	601a      	str	r2, [r3, #0]
  return result;
 8007e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e64:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007e68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e6a:	fab3 f383 	clz	r3, r3
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	095b      	lsrs	r3, r3, #5
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f043 0301 	orr.w	r3, r3, #1
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d102      	bne.n	8007e84 <HAL_RCC_OscConfig+0xe2c>
 8007e7e:	4b54      	ldr	r3, [pc, #336]	; (8007fd0 <HAL_RCC_OscConfig+0xf78>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	e027      	b.n	8007ed4 <HAL_RCC_OscConfig+0xe7c>
 8007e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e88:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e96:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	fa93 f2a3 	rbit	r2, r3
 8007ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ea4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eae:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007eb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ebc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	fa93 f2a3 	rbit	r2, r3
 8007ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	4b3f      	ldr	r3, [pc, #252]	; (8007fd0 <HAL_RCC_OscConfig+0xf78>)
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ed8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007edc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007ee0:	6011      	str	r1, [r2, #0]
 8007ee2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ee6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007eea:	6812      	ldr	r2, [r2, #0]
 8007eec:	fa92 f1a2 	rbit	r1, r2
 8007ef0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ef4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007ef8:	6011      	str	r1, [r2, #0]
  return result;
 8007efa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007efe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007f02:	6812      	ldr	r2, [r2, #0]
 8007f04:	fab2 f282 	clz	r2, r2
 8007f08:	b2d2      	uxtb	r2, r2
 8007f0a:	f042 0220 	orr.w	r2, r2, #32
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	f002 021f 	and.w	r2, r2, #31
 8007f14:	2101      	movs	r1, #1
 8007f16:	fa01 f202 	lsl.w	r2, r1, r2
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d082      	beq.n	8007e26 <HAL_RCC_OscConfig+0xdce>
 8007f20:	e0cf      	b.n	80080c2 <HAL_RCC_OscConfig+0x106a>
 8007f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f26:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007f2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f34:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	fa93 f2a3 	rbit	r2, r3
 8007f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f42:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007f46:	601a      	str	r2, [r3, #0]
  return result;
 8007f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f4c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007f50:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f52:	fab3 f383 	clz	r3, r3
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007f5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	461a      	mov	r2, r3
 8007f64:	2300      	movs	r3, #0
 8007f66:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f68:	f7fd fc8e 	bl	8005888 <HAL_GetTick>
 8007f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f70:	e009      	b.n	8007f86 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f72:	f7fd fc89 	bl	8005888 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e09e      	b.n	80080c4 <HAL_RCC_OscConfig+0x106c>
 8007f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f8a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007f8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f98:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	fa93 f2a3 	rbit	r2, r3
 8007fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fa6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007faa:	601a      	str	r2, [r3, #0]
  return result;
 8007fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fb0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007fb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007fb6:	fab3 f383 	clz	r3, r3
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	095b      	lsrs	r3, r3, #5
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	f043 0301 	orr.w	r3, r3, #1
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d104      	bne.n	8007fd4 <HAL_RCC_OscConfig+0xf7c>
 8007fca:	4b01      	ldr	r3, [pc, #4]	; (8007fd0 <HAL_RCC_OscConfig+0xf78>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	e029      	b.n	8008024 <HAL_RCC_OscConfig+0xfcc>
 8007fd0:	40021000 	.word	0x40021000
 8007fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fd8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fe6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	fa93 f2a3 	rbit	r2, r3
 8007ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ff4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ffe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008002:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800800c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	fa93 f2a3 	rbit	r2, r3
 8008016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800801a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	4b2b      	ldr	r3, [pc, #172]	; (80080d0 <HAL_RCC_OscConfig+0x1078>)
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008028:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800802c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008030:	6011      	str	r1, [r2, #0]
 8008032:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008036:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800803a:	6812      	ldr	r2, [r2, #0]
 800803c:	fa92 f1a2 	rbit	r1, r2
 8008040:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008044:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008048:	6011      	str	r1, [r2, #0]
  return result;
 800804a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800804e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008052:	6812      	ldr	r2, [r2, #0]
 8008054:	fab2 f282 	clz	r2, r2
 8008058:	b2d2      	uxtb	r2, r2
 800805a:	f042 0220 	orr.w	r2, r2, #32
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	f002 021f 	and.w	r2, r2, #31
 8008064:	2101      	movs	r1, #1
 8008066:	fa01 f202 	lsl.w	r2, r1, r2
 800806a:	4013      	ands	r3, r2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d180      	bne.n	8007f72 <HAL_RCC_OscConfig+0xf1a>
 8008070:	e027      	b.n	80080c2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d101      	bne.n	8008086 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e01e      	b.n	80080c4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008086:	4b12      	ldr	r3, [pc, #72]	; (80080d0 <HAL_RCC_OscConfig+0x1078>)
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800808e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008092:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800809a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d10b      	bne.n	80080be <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80080a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80080aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80080ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d001      	beq.n	80080c2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	40021000 	.word	0x40021000

080080d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b09e      	sub	sp, #120	; 0x78
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e162      	b.n	80083b2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80080ec:	4b90      	ldr	r3, [pc, #576]	; (8008330 <HAL_RCC_ClockConfig+0x25c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d910      	bls.n	800811c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080fa:	4b8d      	ldr	r3, [pc, #564]	; (8008330 <HAL_RCC_ClockConfig+0x25c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f023 0207 	bic.w	r2, r3, #7
 8008102:	498b      	ldr	r1, [pc, #556]	; (8008330 <HAL_RCC_ClockConfig+0x25c>)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	4313      	orrs	r3, r2
 8008108:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800810a:	4b89      	ldr	r3, [pc, #548]	; (8008330 <HAL_RCC_ClockConfig+0x25c>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0307 	and.w	r3, r3, #7
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	429a      	cmp	r2, r3
 8008116:	d001      	beq.n	800811c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e14a      	b.n	80083b2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d008      	beq.n	800813a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008128:	4b82      	ldr	r3, [pc, #520]	; (8008334 <HAL_RCC_ClockConfig+0x260>)
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	497f      	ldr	r1, [pc, #508]	; (8008334 <HAL_RCC_ClockConfig+0x260>)
 8008136:	4313      	orrs	r3, r2
 8008138:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	f000 80dc 	beq.w	8008300 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d13c      	bne.n	80081ca <HAL_RCC_ClockConfig+0xf6>
 8008150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008154:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008158:	fa93 f3a3 	rbit	r3, r3
 800815c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800815e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008160:	fab3 f383 	clz	r3, r3
 8008164:	b2db      	uxtb	r3, r3
 8008166:	095b      	lsrs	r3, r3, #5
 8008168:	b2db      	uxtb	r3, r3
 800816a:	f043 0301 	orr.w	r3, r3, #1
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b01      	cmp	r3, #1
 8008172:	d102      	bne.n	800817a <HAL_RCC_ClockConfig+0xa6>
 8008174:	4b6f      	ldr	r3, [pc, #444]	; (8008334 <HAL_RCC_ClockConfig+0x260>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	e00f      	b.n	800819a <HAL_RCC_ClockConfig+0xc6>
 800817a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800817e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008182:	fa93 f3a3 	rbit	r3, r3
 8008186:	667b      	str	r3, [r7, #100]	; 0x64
 8008188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800818c:	663b      	str	r3, [r7, #96]	; 0x60
 800818e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008190:	fa93 f3a3 	rbit	r3, r3
 8008194:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008196:	4b67      	ldr	r3, [pc, #412]	; (8008334 <HAL_RCC_ClockConfig+0x260>)
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800819e:	65ba      	str	r2, [r7, #88]	; 0x58
 80081a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081a2:	fa92 f2a2 	rbit	r2, r2
 80081a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80081a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081aa:	fab2 f282 	clz	r2, r2
 80081ae:	b2d2      	uxtb	r2, r2
 80081b0:	f042 0220 	orr.w	r2, r2, #32
 80081b4:	b2d2      	uxtb	r2, r2
 80081b6:	f002 021f 	and.w	r2, r2, #31
 80081ba:	2101      	movs	r1, #1
 80081bc:	fa01 f202 	lsl.w	r2, r1, r2
 80081c0:	4013      	ands	r3, r2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d17b      	bne.n	80082be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e0f3      	b.n	80083b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d13c      	bne.n	800824c <HAL_RCC_ClockConfig+0x178>
 80081d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081da:	fa93 f3a3 	rbit	r3, r3
 80081de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80081e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081e2:	fab3 f383 	clz	r3, r3
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	095b      	lsrs	r3, r3, #5
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f043 0301 	orr.w	r3, r3, #1
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d102      	bne.n	80081fc <HAL_RCC_ClockConfig+0x128>
 80081f6:	4b4f      	ldr	r3, [pc, #316]	; (8008334 <HAL_RCC_ClockConfig+0x260>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	e00f      	b.n	800821c <HAL_RCC_ClockConfig+0x148>
 80081fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008200:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008204:	fa93 f3a3 	rbit	r3, r3
 8008208:	647b      	str	r3, [r7, #68]	; 0x44
 800820a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800820e:	643b      	str	r3, [r7, #64]	; 0x40
 8008210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008212:	fa93 f3a3 	rbit	r3, r3
 8008216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008218:	4b46      	ldr	r3, [pc, #280]	; (8008334 <HAL_RCC_ClockConfig+0x260>)
 800821a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008220:	63ba      	str	r2, [r7, #56]	; 0x38
 8008222:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008224:	fa92 f2a2 	rbit	r2, r2
 8008228:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800822a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800822c:	fab2 f282 	clz	r2, r2
 8008230:	b2d2      	uxtb	r2, r2
 8008232:	f042 0220 	orr.w	r2, r2, #32
 8008236:	b2d2      	uxtb	r2, r2
 8008238:	f002 021f 	and.w	r2, r2, #31
 800823c:	2101      	movs	r1, #1
 800823e:	fa01 f202 	lsl.w	r2, r1, r2
 8008242:	4013      	ands	r3, r2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d13a      	bne.n	80082be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e0b2      	b.n	80083b2 <HAL_RCC_ClockConfig+0x2de>
 800824c:	2302      	movs	r3, #2
 800824e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	fa93 f3a3 	rbit	r3, r3
 8008256:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800825a:	fab3 f383 	clz	r3, r3
 800825e:	b2db      	uxtb	r3, r3
 8008260:	095b      	lsrs	r3, r3, #5
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f043 0301 	orr.w	r3, r3, #1
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b01      	cmp	r3, #1
 800826c:	d102      	bne.n	8008274 <HAL_RCC_ClockConfig+0x1a0>
 800826e:	4b31      	ldr	r3, [pc, #196]	; (8008334 <HAL_RCC_ClockConfig+0x260>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	e00d      	b.n	8008290 <HAL_RCC_ClockConfig+0x1bc>
 8008274:	2302      	movs	r3, #2
 8008276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	fa93 f3a3 	rbit	r3, r3
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
 8008280:	2302      	movs	r3, #2
 8008282:	623b      	str	r3, [r7, #32]
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	fa93 f3a3 	rbit	r3, r3
 800828a:	61fb      	str	r3, [r7, #28]
 800828c:	4b29      	ldr	r3, [pc, #164]	; (8008334 <HAL_RCC_ClockConfig+0x260>)
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	2202      	movs	r2, #2
 8008292:	61ba      	str	r2, [r7, #24]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	fa92 f2a2 	rbit	r2, r2
 800829a:	617a      	str	r2, [r7, #20]
  return result;
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	fab2 f282 	clz	r2, r2
 80082a2:	b2d2      	uxtb	r2, r2
 80082a4:	f042 0220 	orr.w	r2, r2, #32
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	f002 021f 	and.w	r2, r2, #31
 80082ae:	2101      	movs	r1, #1
 80082b0:	fa01 f202 	lsl.w	r2, r1, r2
 80082b4:	4013      	ands	r3, r2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e079      	b.n	80083b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082be:	4b1d      	ldr	r3, [pc, #116]	; (8008334 <HAL_RCC_ClockConfig+0x260>)
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f023 0203 	bic.w	r2, r3, #3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	491a      	ldr	r1, [pc, #104]	; (8008334 <HAL_RCC_ClockConfig+0x260>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082d0:	f7fd fada 	bl	8005888 <HAL_GetTick>
 80082d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082d6:	e00a      	b.n	80082ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082d8:	f7fd fad6 	bl	8005888 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d901      	bls.n	80082ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e061      	b.n	80083b2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ee:	4b11      	ldr	r3, [pc, #68]	; (8008334 <HAL_RCC_ClockConfig+0x260>)
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f003 020c 	and.w	r2, r3, #12
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d1eb      	bne.n	80082d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008300:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <HAL_RCC_ClockConfig+0x25c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0307 	and.w	r3, r3, #7
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d214      	bcs.n	8008338 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800830e:	4b08      	ldr	r3, [pc, #32]	; (8008330 <HAL_RCC_ClockConfig+0x25c>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f023 0207 	bic.w	r2, r3, #7
 8008316:	4906      	ldr	r1, [pc, #24]	; (8008330 <HAL_RCC_ClockConfig+0x25c>)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	4313      	orrs	r3, r2
 800831c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800831e:	4b04      	ldr	r3, [pc, #16]	; (8008330 <HAL_RCC_ClockConfig+0x25c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0307 	and.w	r3, r3, #7
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	429a      	cmp	r2, r3
 800832a:	d005      	beq.n	8008338 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e040      	b.n	80083b2 <HAL_RCC_ClockConfig+0x2de>
 8008330:	40022000 	.word	0x40022000
 8008334:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d008      	beq.n	8008356 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008344:	4b1d      	ldr	r3, [pc, #116]	; (80083bc <HAL_RCC_ClockConfig+0x2e8>)
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	491a      	ldr	r1, [pc, #104]	; (80083bc <HAL_RCC_ClockConfig+0x2e8>)
 8008352:	4313      	orrs	r3, r2
 8008354:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0308 	and.w	r3, r3, #8
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008362:	4b16      	ldr	r3, [pc, #88]	; (80083bc <HAL_RCC_ClockConfig+0x2e8>)
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	00db      	lsls	r3, r3, #3
 8008370:	4912      	ldr	r1, [pc, #72]	; (80083bc <HAL_RCC_ClockConfig+0x2e8>)
 8008372:	4313      	orrs	r3, r2
 8008374:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008376:	f000 f829 	bl	80083cc <HAL_RCC_GetSysClockFreq>
 800837a:	4601      	mov	r1, r0
 800837c:	4b0f      	ldr	r3, [pc, #60]	; (80083bc <HAL_RCC_ClockConfig+0x2e8>)
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008384:	22f0      	movs	r2, #240	; 0xf0
 8008386:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	fa92 f2a2 	rbit	r2, r2
 800838e:	60fa      	str	r2, [r7, #12]
  return result;
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	fab2 f282 	clz	r2, r2
 8008396:	b2d2      	uxtb	r2, r2
 8008398:	40d3      	lsrs	r3, r2
 800839a:	4a09      	ldr	r2, [pc, #36]	; (80083c0 <HAL_RCC_ClockConfig+0x2ec>)
 800839c:	5cd3      	ldrb	r3, [r2, r3]
 800839e:	fa21 f303 	lsr.w	r3, r1, r3
 80083a2:	4a08      	ldr	r2, [pc, #32]	; (80083c4 <HAL_RCC_ClockConfig+0x2f0>)
 80083a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80083a6:	4b08      	ldr	r3, [pc, #32]	; (80083c8 <HAL_RCC_ClockConfig+0x2f4>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fd fa28 	bl	8005800 <HAL_InitTick>
  
  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3778      	adds	r7, #120	; 0x78
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	40021000 	.word	0x40021000
 80083c0:	0800ceb0 	.word	0x0800ceb0
 80083c4:	20000054 	.word	0x20000054
 80083c8:	20000060 	.word	0x20000060

080083cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b08b      	sub	sp, #44	; 0x2c
 80083d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	61fb      	str	r3, [r7, #28]
 80083d6:	2300      	movs	r3, #0
 80083d8:	61bb      	str	r3, [r7, #24]
 80083da:	2300      	movs	r3, #0
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
 80083de:	2300      	movs	r3, #0
 80083e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80083e6:	4b29      	ldr	r3, [pc, #164]	; (800848c <HAL_RCC_GetSysClockFreq+0xc0>)
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	f003 030c 	and.w	r3, r3, #12
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d002      	beq.n	80083fc <HAL_RCC_GetSysClockFreq+0x30>
 80083f6:	2b08      	cmp	r3, #8
 80083f8:	d003      	beq.n	8008402 <HAL_RCC_GetSysClockFreq+0x36>
 80083fa:	e03c      	b.n	8008476 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80083fc:	4b24      	ldr	r3, [pc, #144]	; (8008490 <HAL_RCC_GetSysClockFreq+0xc4>)
 80083fe:	623b      	str	r3, [r7, #32]
      break;
 8008400:	e03c      	b.n	800847c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008408:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800840c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	fa92 f2a2 	rbit	r2, r2
 8008414:	607a      	str	r2, [r7, #4]
  return result;
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	fab2 f282 	clz	r2, r2
 800841c:	b2d2      	uxtb	r2, r2
 800841e:	40d3      	lsrs	r3, r2
 8008420:	4a1c      	ldr	r2, [pc, #112]	; (8008494 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008422:	5cd3      	ldrb	r3, [r2, r3]
 8008424:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008426:	4b19      	ldr	r3, [pc, #100]	; (800848c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842a:	f003 030f 	and.w	r3, r3, #15
 800842e:	220f      	movs	r2, #15
 8008430:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	fa92 f2a2 	rbit	r2, r2
 8008438:	60fa      	str	r2, [r7, #12]
  return result;
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	fab2 f282 	clz	r2, r2
 8008440:	b2d2      	uxtb	r2, r2
 8008442:	40d3      	lsrs	r3, r2
 8008444:	4a14      	ldr	r2, [pc, #80]	; (8008498 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008446:	5cd3      	ldrb	r3, [r2, r3]
 8008448:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d008      	beq.n	8008466 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008454:	4a0e      	ldr	r2, [pc, #56]	; (8008490 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	fbb2 f2f3 	udiv	r2, r2, r3
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	fb02 f303 	mul.w	r3, r2, r3
 8008462:	627b      	str	r3, [r7, #36]	; 0x24
 8008464:	e004      	b.n	8008470 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	4a0c      	ldr	r2, [pc, #48]	; (800849c <HAL_RCC_GetSysClockFreq+0xd0>)
 800846a:	fb02 f303 	mul.w	r3, r2, r3
 800846e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	623b      	str	r3, [r7, #32]
      break;
 8008474:	e002      	b.n	800847c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008476:	4b06      	ldr	r3, [pc, #24]	; (8008490 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008478:	623b      	str	r3, [r7, #32]
      break;
 800847a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800847c:	6a3b      	ldr	r3, [r7, #32]
}
 800847e:	4618      	mov	r0, r3
 8008480:	372c      	adds	r7, #44	; 0x2c
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	40021000 	.word	0x40021000
 8008490:	007a1200 	.word	0x007a1200
 8008494:	0800cec8 	.word	0x0800cec8
 8008498:	0800ced8 	.word	0x0800ced8
 800849c:	003d0900 	.word	0x003d0900

080084a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084a0:	b480      	push	{r7}
 80084a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084a4:	4b03      	ldr	r3, [pc, #12]	; (80084b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80084a6:	681b      	ldr	r3, [r3, #0]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20000054 	.word	0x20000054

080084b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80084be:	f7ff ffef 	bl	80084a0 <HAL_RCC_GetHCLKFreq>
 80084c2:	4601      	mov	r1, r0
 80084c4:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80084d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	fa92 f2a2 	rbit	r2, r2
 80084d8:	603a      	str	r2, [r7, #0]
  return result;
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	fab2 f282 	clz	r2, r2
 80084e0:	b2d2      	uxtb	r2, r2
 80084e2:	40d3      	lsrs	r3, r2
 80084e4:	4a04      	ldr	r2, [pc, #16]	; (80084f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80084e6:	5cd3      	ldrb	r3, [r2, r3]
 80084e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	40021000 	.word	0x40021000
 80084f8:	0800cec0 	.word	0x0800cec0

080084fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008502:	f7ff ffcd 	bl	80084a0 <HAL_RCC_GetHCLKFreq>
 8008506:	4601      	mov	r1, r0
 8008508:	4b0b      	ldr	r3, [pc, #44]	; (8008538 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008510:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008514:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	fa92 f2a2 	rbit	r2, r2
 800851c:	603a      	str	r2, [r7, #0]
  return result;
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	fab2 f282 	clz	r2, r2
 8008524:	b2d2      	uxtb	r2, r2
 8008526:	40d3      	lsrs	r3, r2
 8008528:	4a04      	ldr	r2, [pc, #16]	; (800853c <HAL_RCC_GetPCLK2Freq+0x40>)
 800852a:	5cd3      	ldrb	r3, [r2, r3]
 800852c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008530:	4618      	mov	r0, r3
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	40021000 	.word	0x40021000
 800853c:	0800cec0 	.word	0x0800cec0

08008540 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b092      	sub	sp, #72	; 0x48
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008548:	2300      	movs	r3, #0
 800854a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800854c:	2300      	movs	r3, #0
 800854e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008550:	2300      	movs	r3, #0
 8008552:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 80d4 	beq.w	800870c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008564:	4b4e      	ldr	r3, [pc, #312]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10e      	bne.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008570:	4b4b      	ldr	r3, [pc, #300]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	4a4a      	ldr	r2, [pc, #296]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800857a:	61d3      	str	r3, [r2, #28]
 800857c:	4b48      	ldr	r3, [pc, #288]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008584:	60bb      	str	r3, [r7, #8]
 8008586:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008588:	2301      	movs	r3, #1
 800858a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800858e:	4b45      	ldr	r3, [pc, #276]	; (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008596:	2b00      	cmp	r3, #0
 8008598:	d118      	bne.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800859a:	4b42      	ldr	r3, [pc, #264]	; (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a41      	ldr	r2, [pc, #260]	; (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80085a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085a6:	f7fd f96f 	bl	8005888 <HAL_GetTick>
 80085aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085ac:	e008      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085ae:	f7fd f96b 	bl	8005888 <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b64      	cmp	r3, #100	; 0x64
 80085ba:	d901      	bls.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e13c      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085c0:	4b38      	ldr	r3, [pc, #224]	; (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0f0      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085cc:	4b34      	ldr	r3, [pc, #208]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80085d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8084 	beq.w	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d07c      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085ec:	4b2c      	ldr	r3, [pc, #176]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	fa93 f3a3 	rbit	r3, r3
 8008602:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008606:	fab3 f383 	clz	r3, r3
 800860a:	b2db      	uxtb	r3, r3
 800860c:	461a      	mov	r2, r3
 800860e:	4b26      	ldr	r3, [pc, #152]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	461a      	mov	r2, r3
 8008616:	2301      	movs	r3, #1
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800861e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008622:	fa93 f3a3 	rbit	r3, r3
 8008626:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800862a:	fab3 f383 	clz	r3, r3
 800862e:	b2db      	uxtb	r3, r3
 8008630:	461a      	mov	r2, r3
 8008632:	4b1d      	ldr	r3, [pc, #116]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008634:	4413      	add	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	461a      	mov	r2, r3
 800863a:	2300      	movs	r3, #0
 800863c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800863e:	4a18      	ldr	r2, [pc, #96]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008642:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	d04b      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800864e:	f7fd f91b 	bl	8005888 <HAL_GetTick>
 8008652:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008654:	e00a      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008656:	f7fd f917 	bl	8005888 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	f241 3288 	movw	r2, #5000	; 0x1388
 8008664:	4293      	cmp	r3, r2
 8008666:	d901      	bls.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e0e6      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800866c:	2302      	movs	r3, #2
 800866e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	fa93 f3a3 	rbit	r3, r3
 8008676:	627b      	str	r3, [r7, #36]	; 0x24
 8008678:	2302      	movs	r3, #2
 800867a:	623b      	str	r3, [r7, #32]
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	fa93 f3a3 	rbit	r3, r3
 8008682:	61fb      	str	r3, [r7, #28]
  return result;
 8008684:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008686:	fab3 f383 	clz	r3, r3
 800868a:	b2db      	uxtb	r3, r3
 800868c:	095b      	lsrs	r3, r3, #5
 800868e:	b2db      	uxtb	r3, r3
 8008690:	f043 0302 	orr.w	r3, r3, #2
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b02      	cmp	r3, #2
 8008698:	d108      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800869a:	4b01      	ldr	r3, [pc, #4]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	e00d      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80086a0:	40021000 	.word	0x40021000
 80086a4:	40007000 	.word	0x40007000
 80086a8:	10908100 	.word	0x10908100
 80086ac:	2302      	movs	r3, #2
 80086ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	fa93 f3a3 	rbit	r3, r3
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	4b62      	ldr	r3, [pc, #392]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	2202      	movs	r2, #2
 80086be:	613a      	str	r2, [r7, #16]
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	fa92 f2a2 	rbit	r2, r2
 80086c6:	60fa      	str	r2, [r7, #12]
  return result;
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	fab2 f282 	clz	r2, r2
 80086ce:	b2d2      	uxtb	r2, r2
 80086d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086d4:	b2d2      	uxtb	r2, r2
 80086d6:	f002 021f 	and.w	r2, r2, #31
 80086da:	2101      	movs	r1, #1
 80086dc:	fa01 f202 	lsl.w	r2, r1, r2
 80086e0:	4013      	ands	r3, r2
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0b7      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80086e6:	4b57      	ldr	r3, [pc, #348]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	4954      	ldr	r1, [pc, #336]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80086f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d105      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008700:	4b50      	ldr	r3, [pc, #320]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008702:	69db      	ldr	r3, [r3, #28]
 8008704:	4a4f      	ldr	r2, [pc, #316]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800870a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d008      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008718:	4b4a      	ldr	r3, [pc, #296]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800871a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871c:	f023 0203 	bic.w	r2, r3, #3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	4947      	ldr	r1, [pc, #284]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008726:	4313      	orrs	r3, r2
 8008728:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	2b00      	cmp	r3, #0
 8008734:	d008      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008736:	4b43      	ldr	r3, [pc, #268]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	f023 0210 	bic.w	r2, r3, #16
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	4940      	ldr	r1, [pc, #256]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008744:	4313      	orrs	r3, r2
 8008746:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008750:	2b00      	cmp	r3, #0
 8008752:	d008      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008754:	4b3b      	ldr	r3, [pc, #236]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008758:	f023 0220 	bic.w	r2, r3, #32
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	4938      	ldr	r1, [pc, #224]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008762:	4313      	orrs	r3, r2
 8008764:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d008      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008772:	4b34      	ldr	r3, [pc, #208]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008776:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	4931      	ldr	r1, [pc, #196]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008780:	4313      	orrs	r3, r2
 8008782:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800878c:	2b00      	cmp	r3, #0
 800878e:	d008      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008790:	4b2c      	ldr	r3, [pc, #176]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	4929      	ldr	r1, [pc, #164]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d008      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80087ae:	4b25      	ldr	r3, [pc, #148]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	4922      	ldr	r1, [pc, #136]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d008      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80087cc:	4b1d      	ldr	r3, [pc, #116]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	491a      	ldr	r1, [pc, #104]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d008      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80087ea:	4b16      	ldr	r3, [pc, #88]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	4913      	ldr	r1, [pc, #76]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d008      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8008808:	4b0e      	ldr	r3, [pc, #56]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800880a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008814:	490b      	ldr	r1, [pc, #44]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008816:	4313      	orrs	r3, r2
 8008818:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d008      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8008826:	4b07      	ldr	r3, [pc, #28]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008832:	4904      	ldr	r1, [pc, #16]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008834:	4313      	orrs	r3, r2
 8008836:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3748      	adds	r7, #72	; 0x48
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	40021000 	.word	0x40021000

08008848 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e09d      	b.n	8008996 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885e:	2b00      	cmp	r3, #0
 8008860:	d108      	bne.n	8008874 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800886a:	d009      	beq.n	8008880 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	61da      	str	r2, [r3, #28]
 8008872:	e005      	b.n	8008880 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d106      	bne.n	80088a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7fb fe00 	bl	80044a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088c0:	d902      	bls.n	80088c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	e002      	b.n	80088ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80088c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80088d6:	d007      	beq.n	80088e8 <HAL_SPI_Init+0xa0>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088e0:	d002      	beq.n	80088e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80088f8:	431a      	orrs	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	431a      	orrs	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008916:	431a      	orrs	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008920:	431a      	orrs	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892a:	ea42 0103 	orr.w	r1, r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008932:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	0c1b      	lsrs	r3, r3, #16
 8008944:	f003 0204 	and.w	r2, r3, #4
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	f003 0310 	and.w	r3, r3, #16
 8008950:	431a      	orrs	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008956:	f003 0308 	and.w	r3, r3, #8
 800895a:	431a      	orrs	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008964:	ea42 0103 	orr.w	r1, r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	69da      	ldr	r2, [r3, #28]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008984:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b088      	sub	sp, #32
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	603b      	str	r3, [r7, #0]
 80089aa:	4613      	mov	r3, r2
 80089ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d101      	bne.n	80089c0 <HAL_SPI_Transmit+0x22>
 80089bc:	2302      	movs	r3, #2
 80089be:	e15f      	b.n	8008c80 <HAL_SPI_Transmit+0x2e2>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089c8:	f7fc ff5e 	bl	8005888 <HAL_GetTick>
 80089cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80089ce:	88fb      	ldrh	r3, [r7, #6]
 80089d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d002      	beq.n	80089e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80089de:	2302      	movs	r3, #2
 80089e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089e2:	e148      	b.n	8008c76 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_SPI_Transmit+0x52>
 80089ea:	88fb      	ldrh	r3, [r7, #6]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d102      	bne.n	80089f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089f4:	e13f      	b.n	8008c76 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2203      	movs	r2, #3
 80089fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	88fa      	ldrh	r2, [r7, #6]
 8008a0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	88fa      	ldrh	r2, [r7, #6]
 8008a14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a40:	d10f      	bne.n	8008a62 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a6c:	2b40      	cmp	r3, #64	; 0x40
 8008a6e:	d007      	beq.n	8008a80 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a88:	d94f      	bls.n	8008b2a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <HAL_SPI_Transmit+0xfa>
 8008a92:	8afb      	ldrh	r3, [r7, #22]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d142      	bne.n	8008b1e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	881a      	ldrh	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa8:	1c9a      	adds	r2, r3, #2
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008abc:	e02f      	b.n	8008b1e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d112      	bne.n	8008af2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad0:	881a      	ldrh	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008adc:	1c9a      	adds	r2, r3, #2
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008af0:	e015      	b.n	8008b1e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008af2:	f7fc fec9 	bl	8005888 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d803      	bhi.n	8008b0a <HAL_SPI_Transmit+0x16c>
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b08:	d102      	bne.n	8008b10 <HAL_SPI_Transmit+0x172>
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d106      	bne.n	8008b1e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008b1c:	e0ab      	b.n	8008c76 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1ca      	bne.n	8008abe <HAL_SPI_Transmit+0x120>
 8008b28:	e080      	b.n	8008c2c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <HAL_SPI_Transmit+0x19a>
 8008b32:	8afb      	ldrh	r3, [r7, #22]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d174      	bne.n	8008c22 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d912      	bls.n	8008b68 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b46:	881a      	ldrh	r2, [r3, #0]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b52:	1c9a      	adds	r2, r3, #2
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	3b02      	subs	r3, #2
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b66:	e05c      	b.n	8008c22 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	330c      	adds	r3, #12
 8008b72:	7812      	ldrb	r2, [r2, #0]
 8008b74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	3b01      	subs	r3, #1
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008b8e:	e048      	b.n	8008c22 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d12b      	bne.n	8008bf6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d912      	bls.n	8008bce <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	881a      	ldrh	r2, [r3, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	1c9a      	adds	r2, r3, #2
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	3b02      	subs	r3, #2
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bcc:	e029      	b.n	8008c22 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	330c      	adds	r3, #12
 8008bd8:	7812      	ldrb	r2, [r2, #0]
 8008bda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	3b01      	subs	r3, #1
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bf4:	e015      	b.n	8008c22 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bf6:	f7fc fe47 	bl	8005888 <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d803      	bhi.n	8008c0e <HAL_SPI_Transmit+0x270>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0c:	d102      	bne.n	8008c14 <HAL_SPI_Transmit+0x276>
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d106      	bne.n	8008c22 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008c20:	e029      	b.n	8008c76 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1b1      	bne.n	8008b90 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 fbd7 	bl	80093e4 <SPI_EndRxTxTransaction>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10a      	bne.n	8008c60 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	613b      	str	r3, [r7, #16]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	613b      	str	r3, [r7, #16]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	613b      	str	r3, [r7, #16]
 8008c5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	77fb      	strb	r3, [r7, #31]
 8008c6c:	e003      	b.n	8008c76 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008c7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3720      	adds	r7, #32
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	4613      	mov	r3, r2
 8008c94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d101      	bne.n	8008ca8 <HAL_SPI_Transmit_DMA+0x20>
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	e0d4      	b.n	8008e52 <HAL_SPI_Transmit_DMA+0x1ca>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d002      	beq.n	8008cc2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008cc0:	e0c2      	b.n	8008e48 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <HAL_SPI_Transmit_DMA+0x46>
 8008cc8:	88fb      	ldrh	r3, [r7, #6]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d102      	bne.n	8008cd4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008cd2:	e0b9      	b.n	8008e48 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2203      	movs	r2, #3
 8008cd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	88fa      	ldrh	r2, [r7, #6]
 8008cec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	88fa      	ldrh	r2, [r7, #6]
 8008cf2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d1e:	d10f      	bne.n	8008d40 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d44:	4a45      	ldr	r2, [pc, #276]	; (8008e5c <HAL_SPI_Transmit_DMA+0x1d4>)
 8008d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d4c:	4a44      	ldr	r2, [pc, #272]	; (8008e60 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008d4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d54:	4a43      	ldr	r2, [pc, #268]	; (8008e64 <HAL_SPI_Transmit_DMA+0x1dc>)
 8008d56:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d6e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d78:	d82d      	bhi.n	8008dd6 <HAL_SPI_Transmit_DMA+0x14e>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d84:	d127      	bne.n	8008dd6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10f      	bne.n	8008db4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685a      	ldr	r2, [r3, #4]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008da2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	085b      	lsrs	r3, r3, #1
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008db2:	e010      	b.n	8008dd6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008dc2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	085b      	lsrs	r3, r3, #1
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	3301      	adds	r3, #1
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dde:	4619      	mov	r1, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	330c      	adds	r3, #12
 8008de6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dec:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008dee:	f7fc fed3 	bl	8005b98 <HAL_DMA_Start_IT>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d008      	beq.n	8008e0a <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dfc:	f043 0210 	orr.w	r2, r3, #16
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	75fb      	strb	r3, [r7, #23]

    goto error;
 8008e08:	e01e      	b.n	8008e48 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e14:	2b40      	cmp	r3, #64	; 0x40
 8008e16:	d007      	beq.n	8008e28 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e26:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f042 0220 	orr.w	r2, r2, #32
 8008e36:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 0202 	orr.w	r2, r2, #2
 8008e46:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3718      	adds	r7, #24
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	08009123 	.word	0x08009123
 8008e60:	0800907d 	.word	0x0800907d
 8008e64:	0800913f 	.word	0x0800913f

08008e68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	099b      	lsrs	r3, r3, #6
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10f      	bne.n	8008eac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	099b      	lsrs	r3, r3, #6
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d004      	beq.n	8008eac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	4798      	blx	r3
    return;
 8008eaa:	e0d7      	b.n	800905c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	085b      	lsrs	r3, r3, #1
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00a      	beq.n	8008ece <HAL_SPI_IRQHandler+0x66>
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	09db      	lsrs	r3, r3, #7
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d004      	beq.n	8008ece <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4798      	blx	r3
    return;
 8008ecc:	e0c6      	b.n	800905c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	095b      	lsrs	r3, r3, #5
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10c      	bne.n	8008ef4 <HAL_SPI_IRQHandler+0x8c>
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	099b      	lsrs	r3, r3, #6
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d106      	bne.n	8008ef4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	0a1b      	lsrs	r3, r3, #8
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 80b4 	beq.w	800905c <HAL_SPI_IRQHandler+0x1f4>
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	095b      	lsrs	r3, r3, #5
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 80ad 	beq.w	800905c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	099b      	lsrs	r3, r3, #6
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d023      	beq.n	8008f56 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d011      	beq.n	8008f3e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f1e:	f043 0204 	orr.w	r2, r3, #4
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	617b      	str	r3, [r7, #20]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	617b      	str	r3, [r7, #20]
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	e00b      	b.n	8008f56 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f3e:	2300      	movs	r3, #0
 8008f40:	613b      	str	r3, [r7, #16]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	613b      	str	r3, [r7, #16]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	613b      	str	r3, [r7, #16]
 8008f52:	693b      	ldr	r3, [r7, #16]
        return;
 8008f54:	e082      	b.n	800905c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	095b      	lsrs	r3, r3, #5
 8008f5a:	f003 0301 	and.w	r3, r3, #1
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d014      	beq.n	8008f8c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f66:	f043 0201 	orr.w	r2, r3, #1
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60fb      	str	r3, [r7, #12]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f88:	601a      	str	r2, [r3, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	0a1b      	lsrs	r3, r3, #8
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00c      	beq.n	8008fb2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f9c:	f043 0208 	orr.w	r2, r3, #8
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	60bb      	str	r3, [r7, #8]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	60bb      	str	r3, [r7, #8]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d04f      	beq.n	800905a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fc8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d104      	bne.n	8008fe6 <HAL_SPI_IRQHandler+0x17e>
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d034      	beq.n	8009050 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f022 0203 	bic.w	r2, r2, #3
 8008ff4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d011      	beq.n	8009022 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009002:	4a18      	ldr	r2, [pc, #96]	; (8009064 <HAL_SPI_IRQHandler+0x1fc>)
 8009004:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900a:	4618      	mov	r0, r3
 800900c:	f7fc fe23 	bl	8005c56 <HAL_DMA_Abort_IT>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800901a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009026:	2b00      	cmp	r3, #0
 8009028:	d016      	beq.n	8009058 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800902e:	4a0d      	ldr	r2, [pc, #52]	; (8009064 <HAL_SPI_IRQHandler+0x1fc>)
 8009030:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009036:	4618      	mov	r0, r3
 8009038:	f7fc fe0d 	bl	8005c56 <HAL_DMA_Abort_IT>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00a      	beq.n	8009058 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009046:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800904e:	e003      	b.n	8009058 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7fb fdcd 	bl	8004bf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009056:	e000      	b.n	800905a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009058:	bf00      	nop
    return;
 800905a:	bf00      	nop
  }
}
 800905c:	3720      	adds	r7, #32
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	0800917f 	.word	0x0800917f

08009068 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009088:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800908a:	f7fc fbfd 	bl	8005888 <HAL_GetTick>
 800908e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0320 	and.w	r3, r3, #32
 800909a:	2b20      	cmp	r3, #32
 800909c:	d03b      	beq.n	8009116 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 0220 	bic.w	r2, r2, #32
 80090ac:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0202 	bic.w	r2, r2, #2
 80090bc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	2164      	movs	r1, #100	; 0x64
 80090c2:	6978      	ldr	r0, [r7, #20]
 80090c4:	f000 f98e 	bl	80093e4 <SPI_EndRxTxTransaction>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d005      	beq.n	80090da <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090d2:	f043 0220 	orr.w	r2, r3, #32
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090e2:	2300      	movs	r3, #0
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	60fb      	str	r3, [r7, #12]
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2200      	movs	r2, #0
 80090fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800910a:	2b00      	cmp	r3, #0
 800910c:	d003      	beq.n	8009116 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800910e:	6978      	ldr	r0, [r7, #20]
 8009110:	f7fb fd6e 	bl	8004bf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009114:	e002      	b.n	800911c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009116:	6978      	ldr	r0, [r7, #20]
 8009118:	f7fb fd80 	bl	8004c1c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b084      	sub	sp, #16
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f7ff ff99 	bl	8009068 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009136:	bf00      	nop
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	685a      	ldr	r2, [r3, #4]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 0203 	bic.w	r2, r2, #3
 800915a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009160:	f043 0210 	orr.w	r2, r3, #16
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f7fb fd3d 	bl	8004bf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009176:	bf00      	nop
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f7fb fd28 	bl	8004bf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091a0:	bf00      	nop
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	4613      	mov	r3, r2
 80091b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80091b8:	f7fc fb66 	bl	8005888 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	1a9b      	subs	r3, r3, r2
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	4413      	add	r3, r2
 80091c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80091c8:	f7fc fb5e 	bl	8005888 <HAL_GetTick>
 80091cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80091ce:	4b39      	ldr	r3, [pc, #228]	; (80092b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	015b      	lsls	r3, r3, #5
 80091d4:	0d1b      	lsrs	r3, r3, #20
 80091d6:	69fa      	ldr	r2, [r7, #28]
 80091d8:	fb02 f303 	mul.w	r3, r2, r3
 80091dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091de:	e054      	b.n	800928a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e6:	d050      	beq.n	800928a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091e8:	f7fc fb4e 	bl	8005888 <HAL_GetTick>
 80091ec:	4602      	mov	r2, r0
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	69fa      	ldr	r2, [r7, #28]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d902      	bls.n	80091fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d13d      	bne.n	800927a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800920c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009216:	d111      	bne.n	800923c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009220:	d004      	beq.n	800922c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800922a:	d107      	bne.n	800923c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800923a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009244:	d10f      	bne.n	8009266 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009264:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e017      	b.n	80092aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009280:	2300      	movs	r3, #0
 8009282:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	3b01      	subs	r3, #1
 8009288:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	4013      	ands	r3, r2
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	429a      	cmp	r2, r3
 8009298:	bf0c      	ite	eq
 800929a:	2301      	moveq	r3, #1
 800929c:	2300      	movne	r3, #0
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	461a      	mov	r2, r3
 80092a2:	79fb      	ldrb	r3, [r7, #7]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d19b      	bne.n	80091e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3720      	adds	r7, #32
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20000054 	.word	0x20000054

080092b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08a      	sub	sp, #40	; 0x28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80092ca:	f7fc fadd 	bl	8005888 <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	1a9b      	subs	r3, r3, r2
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	4413      	add	r3, r2
 80092d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80092da:	f7fc fad5 	bl	8005888 <HAL_GetTick>
 80092de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	330c      	adds	r3, #12
 80092e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80092e8:	4b3d      	ldr	r3, [pc, #244]	; (80093e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	4613      	mov	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	00da      	lsls	r2, r3, #3
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	0d1b      	lsrs	r3, r3, #20
 80092f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092fa:	fb02 f303 	mul.w	r3, r2, r3
 80092fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009300:	e060      	b.n	80093c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009308:	d107      	bne.n	800931a <SPI_WaitFifoStateUntilTimeout+0x62>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d104      	bne.n	800931a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009318:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009320:	d050      	beq.n	80093c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009322:	f7fc fab1 	bl	8005888 <HAL_GetTick>
 8009326:	4602      	mov	r2, r0
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800932e:	429a      	cmp	r2, r3
 8009330:	d902      	bls.n	8009338 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	2b00      	cmp	r3, #0
 8009336:	d13d      	bne.n	80093b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009346:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009350:	d111      	bne.n	8009376 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800935a:	d004      	beq.n	8009366 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009364:	d107      	bne.n	8009376 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009374:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800937e:	d10f      	bne.n	80093a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800939e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e010      	b.n	80093d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689a      	ldr	r2, [r3, #8]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	4013      	ands	r3, r2
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d196      	bne.n	8009302 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3728      	adds	r7, #40	; 0x28
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20000054 	.word	0x20000054

080093e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f7ff ff5b 	bl	80092b8 <SPI_WaitFifoStateUntilTimeout>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d007      	beq.n	8009418 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800940c:	f043 0220 	orr.w	r2, r3, #32
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e027      	b.n	8009468 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2200      	movs	r2, #0
 8009420:	2180      	movs	r1, #128	; 0x80
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7ff fec0 	bl	80091a8 <SPI_WaitFlagStateUntilTimeout>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d007      	beq.n	800943e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009432:	f043 0220 	orr.w	r2, r3, #32
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	e014      	b.n	8009468 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2200      	movs	r2, #0
 8009446:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f7ff ff34 	bl	80092b8 <SPI_WaitFifoStateUntilTimeout>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d007      	beq.n	8009466 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800945a:	f043 0220 	orr.w	r2, r3, #32
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e000      	b.n	8009468 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d101      	bne.n	8009482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e040      	b.n	8009504 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009486:	2b00      	cmp	r3, #0
 8009488:	d106      	bne.n	8009498 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7fb f87a 	bl	800458c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2224      	movs	r2, #36	; 0x24
 800949c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f022 0201 	bic.w	r2, r2, #1
 80094ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f8b6 	bl	8009620 <UART_SetConfig>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d101      	bne.n	80094be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e022      	b.n	8009504 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d002      	beq.n	80094cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f9e0 	bl	800988c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	685a      	ldr	r2, [r3, #4]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689a      	ldr	r2, [r3, #8]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f042 0201 	orr.w	r2, r2, #1
 80094fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fa67 	bl	80099d0 <UART_CheckIdleState>
 8009502:	4603      	mov	r3, r0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08a      	sub	sp, #40	; 0x28
 8009510:	af02      	add	r7, sp, #8
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	4613      	mov	r3, r2
 800951a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009520:	2b20      	cmp	r3, #32
 8009522:	d178      	bne.n	8009616 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <HAL_UART_Transmit+0x24>
 800952a:	88fb      	ldrh	r3, [r7, #6]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e071      	b.n	8009618 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2221      	movs	r2, #33	; 0x21
 8009540:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009542:	f7fc f9a1 	bl	8005888 <HAL_GetTick>
 8009546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	88fa      	ldrh	r2, [r7, #6]
 800954c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	88fa      	ldrh	r2, [r7, #6]
 8009554:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009560:	d108      	bne.n	8009574 <HAL_UART_Transmit+0x68>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d104      	bne.n	8009574 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800956a:	2300      	movs	r3, #0
 800956c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	61bb      	str	r3, [r7, #24]
 8009572:	e003      	b.n	800957c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009578:	2300      	movs	r3, #0
 800957a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800957c:	e030      	b.n	80095e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2200      	movs	r2, #0
 8009586:	2180      	movs	r1, #128	; 0x80
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fac9 	bl	8009b20 <UART_WaitOnFlagUntilTimeout>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d004      	beq.n	800959e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2220      	movs	r2, #32
 8009598:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800959a:	2303      	movs	r3, #3
 800959c:	e03c      	b.n	8009618 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10b      	bne.n	80095bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	881a      	ldrh	r2, [r3, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095b0:	b292      	uxth	r2, r2
 80095b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	3302      	adds	r3, #2
 80095b8:	61bb      	str	r3, [r7, #24]
 80095ba:	e008      	b.n	80095ce <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	781a      	ldrb	r2, [r3, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	b292      	uxth	r2, r2
 80095c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	3301      	adds	r3, #1
 80095cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	3b01      	subs	r3, #1
 80095d8:	b29a      	uxth	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1c8      	bne.n	800957e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	2200      	movs	r2, #0
 80095f4:	2140      	movs	r1, #64	; 0x40
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f000 fa92 	bl	8009b20 <UART_WaitOnFlagUntilTimeout>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d004      	beq.n	800960c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2220      	movs	r2, #32
 8009606:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009608:	2303      	movs	r3, #3
 800960a:	e005      	b.n	8009618 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2220      	movs	r2, #32
 8009610:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	e000      	b.n	8009618 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009616:	2302      	movs	r3, #2
  }
}
 8009618:	4618      	mov	r0, r3
 800961a:	3720      	adds	r7, #32
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	689a      	ldr	r2, [r3, #8]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	431a      	orrs	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	431a      	orrs	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	4313      	orrs	r3, r2
 8009642:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	4b8a      	ldr	r3, [pc, #552]	; (8009874 <UART_SetConfig+0x254>)
 800964c:	4013      	ands	r3, r2
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	6812      	ldr	r2, [r2, #0]
 8009652:	6979      	ldr	r1, [r7, #20]
 8009654:	430b      	orrs	r3, r1
 8009656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68da      	ldr	r2, [r3, #12]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	430a      	orrs	r2, r1
 800966c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a1b      	ldr	r3, [r3, #32]
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	4313      	orrs	r3, r2
 800967c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	430a      	orrs	r2, r1
 8009690:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a78      	ldr	r2, [pc, #480]	; (8009878 <UART_SetConfig+0x258>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d120      	bne.n	80096de <UART_SetConfig+0xbe>
 800969c:	4b77      	ldr	r3, [pc, #476]	; (800987c <UART_SetConfig+0x25c>)
 800969e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a0:	f003 0303 	and.w	r3, r3, #3
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d817      	bhi.n	80096d8 <UART_SetConfig+0xb8>
 80096a8:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <UART_SetConfig+0x90>)
 80096aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ae:	bf00      	nop
 80096b0:	080096c1 	.word	0x080096c1
 80096b4:	080096cd 	.word	0x080096cd
 80096b8:	080096d3 	.word	0x080096d3
 80096bc:	080096c7 	.word	0x080096c7
 80096c0:	2300      	movs	r3, #0
 80096c2:	77fb      	strb	r3, [r7, #31]
 80096c4:	e01d      	b.n	8009702 <UART_SetConfig+0xe2>
 80096c6:	2302      	movs	r3, #2
 80096c8:	77fb      	strb	r3, [r7, #31]
 80096ca:	e01a      	b.n	8009702 <UART_SetConfig+0xe2>
 80096cc:	2304      	movs	r3, #4
 80096ce:	77fb      	strb	r3, [r7, #31]
 80096d0:	e017      	b.n	8009702 <UART_SetConfig+0xe2>
 80096d2:	2308      	movs	r3, #8
 80096d4:	77fb      	strb	r3, [r7, #31]
 80096d6:	e014      	b.n	8009702 <UART_SetConfig+0xe2>
 80096d8:	2310      	movs	r3, #16
 80096da:	77fb      	strb	r3, [r7, #31]
 80096dc:	e011      	b.n	8009702 <UART_SetConfig+0xe2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a67      	ldr	r2, [pc, #412]	; (8009880 <UART_SetConfig+0x260>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d102      	bne.n	80096ee <UART_SetConfig+0xce>
 80096e8:	2300      	movs	r3, #0
 80096ea:	77fb      	strb	r3, [r7, #31]
 80096ec:	e009      	b.n	8009702 <UART_SetConfig+0xe2>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a64      	ldr	r2, [pc, #400]	; (8009884 <UART_SetConfig+0x264>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d102      	bne.n	80096fe <UART_SetConfig+0xde>
 80096f8:	2300      	movs	r3, #0
 80096fa:	77fb      	strb	r3, [r7, #31]
 80096fc:	e001      	b.n	8009702 <UART_SetConfig+0xe2>
 80096fe:	2310      	movs	r3, #16
 8009700:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800970a:	d15a      	bne.n	80097c2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800970c:	7ffb      	ldrb	r3, [r7, #31]
 800970e:	2b08      	cmp	r3, #8
 8009710:	d827      	bhi.n	8009762 <UART_SetConfig+0x142>
 8009712:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <UART_SetConfig+0xf8>)
 8009714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009718:	0800973d 	.word	0x0800973d
 800971c:	08009745 	.word	0x08009745
 8009720:	0800974d 	.word	0x0800974d
 8009724:	08009763 	.word	0x08009763
 8009728:	08009753 	.word	0x08009753
 800972c:	08009763 	.word	0x08009763
 8009730:	08009763 	.word	0x08009763
 8009734:	08009763 	.word	0x08009763
 8009738:	0800975b 	.word	0x0800975b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800973c:	f7fe febc 	bl	80084b8 <HAL_RCC_GetPCLK1Freq>
 8009740:	61b8      	str	r0, [r7, #24]
        break;
 8009742:	e013      	b.n	800976c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009744:	f7fe feda 	bl	80084fc <HAL_RCC_GetPCLK2Freq>
 8009748:	61b8      	str	r0, [r7, #24]
        break;
 800974a:	e00f      	b.n	800976c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800974c:	4b4e      	ldr	r3, [pc, #312]	; (8009888 <UART_SetConfig+0x268>)
 800974e:	61bb      	str	r3, [r7, #24]
        break;
 8009750:	e00c      	b.n	800976c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009752:	f7fe fe3b 	bl	80083cc <HAL_RCC_GetSysClockFreq>
 8009756:	61b8      	str	r0, [r7, #24]
        break;
 8009758:	e008      	b.n	800976c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800975a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800975e:	61bb      	str	r3, [r7, #24]
        break;
 8009760:	e004      	b.n	800976c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8009762:	2300      	movs	r3, #0
 8009764:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	77bb      	strb	r3, [r7, #30]
        break;
 800976a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d074      	beq.n	800985c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	005a      	lsls	r2, r3, #1
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	085b      	lsrs	r3, r3, #1
 800977c:	441a      	add	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	fbb2 f3f3 	udiv	r3, r2, r3
 8009786:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	2b0f      	cmp	r3, #15
 800978c:	d916      	bls.n	80097bc <UART_SetConfig+0x19c>
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009794:	d212      	bcs.n	80097bc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	b29b      	uxth	r3, r3
 800979a:	f023 030f 	bic.w	r3, r3, #15
 800979e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	085b      	lsrs	r3, r3, #1
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	f003 0307 	and.w	r3, r3, #7
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	89fb      	ldrh	r3, [r7, #14]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	89fa      	ldrh	r2, [r7, #14]
 80097b8:	60da      	str	r2, [r3, #12]
 80097ba:	e04f      	b.n	800985c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	77bb      	strb	r3, [r7, #30]
 80097c0:	e04c      	b.n	800985c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097c2:	7ffb      	ldrb	r3, [r7, #31]
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d828      	bhi.n	800981a <UART_SetConfig+0x1fa>
 80097c8:	a201      	add	r2, pc, #4	; (adr r2, 80097d0 <UART_SetConfig+0x1b0>)
 80097ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ce:	bf00      	nop
 80097d0:	080097f5 	.word	0x080097f5
 80097d4:	080097fd 	.word	0x080097fd
 80097d8:	08009805 	.word	0x08009805
 80097dc:	0800981b 	.word	0x0800981b
 80097e0:	0800980b 	.word	0x0800980b
 80097e4:	0800981b 	.word	0x0800981b
 80097e8:	0800981b 	.word	0x0800981b
 80097ec:	0800981b 	.word	0x0800981b
 80097f0:	08009813 	.word	0x08009813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097f4:	f7fe fe60 	bl	80084b8 <HAL_RCC_GetPCLK1Freq>
 80097f8:	61b8      	str	r0, [r7, #24]
        break;
 80097fa:	e013      	b.n	8009824 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097fc:	f7fe fe7e 	bl	80084fc <HAL_RCC_GetPCLK2Freq>
 8009800:	61b8      	str	r0, [r7, #24]
        break;
 8009802:	e00f      	b.n	8009824 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009804:	4b20      	ldr	r3, [pc, #128]	; (8009888 <UART_SetConfig+0x268>)
 8009806:	61bb      	str	r3, [r7, #24]
        break;
 8009808:	e00c      	b.n	8009824 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800980a:	f7fe fddf 	bl	80083cc <HAL_RCC_GetSysClockFreq>
 800980e:	61b8      	str	r0, [r7, #24]
        break;
 8009810:	e008      	b.n	8009824 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009816:	61bb      	str	r3, [r7, #24]
        break;
 8009818:	e004      	b.n	8009824 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	77bb      	strb	r3, [r7, #30]
        break;
 8009822:	bf00      	nop
    }

    if (pclk != 0U)
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d018      	beq.n	800985c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	085a      	lsrs	r2, r3, #1
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	441a      	add	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	fbb2 f3f3 	udiv	r3, r2, r3
 800983c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	2b0f      	cmp	r3, #15
 8009842:	d909      	bls.n	8009858 <UART_SetConfig+0x238>
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800984a:	d205      	bcs.n	8009858 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	b29a      	uxth	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60da      	str	r2, [r3, #12]
 8009856:	e001      	b.n	800985c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009868:	7fbb      	ldrb	r3, [r7, #30]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3720      	adds	r7, #32
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	efff69f3 	.word	0xefff69f3
 8009878:	40013800 	.word	0x40013800
 800987c:	40021000 	.word	0x40021000
 8009880:	40004400 	.word	0x40004400
 8009884:	40004800 	.word	0x40004800
 8009888:	007a1200 	.word	0x007a1200

0800988c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009898:	f003 0301 	and.w	r3, r3, #1
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00a      	beq.n	80098b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	430a      	orrs	r2, r1
 80098b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ba:	f003 0302 	and.w	r3, r3, #2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00a      	beq.n	80098d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	430a      	orrs	r2, r1
 80098d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098dc:	f003 0304 	and.w	r3, r3, #4
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00a      	beq.n	80098fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	430a      	orrs	r2, r1
 80098f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fe:	f003 0308 	and.w	r3, r3, #8
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00a      	beq.n	800991c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	430a      	orrs	r2, r1
 800991a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009920:	f003 0310 	and.w	r3, r3, #16
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00a      	beq.n	800993e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	430a      	orrs	r2, r1
 800993c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009942:	f003 0320 	and.w	r3, r3, #32
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00a      	beq.n	8009960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	430a      	orrs	r2, r1
 800995e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009968:	2b00      	cmp	r3, #0
 800996a:	d01a      	beq.n	80099a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	430a      	orrs	r2, r1
 8009980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800998a:	d10a      	bne.n	80099a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	430a      	orrs	r2, r1
 80099a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00a      	beq.n	80099c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	430a      	orrs	r2, r1
 80099c2:	605a      	str	r2, [r3, #4]
  }
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b098      	sub	sp, #96	; 0x60
 80099d4:	af02      	add	r7, sp, #8
 80099d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099e0:	f7fb ff52 	bl	8005888 <HAL_GetTick>
 80099e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f003 0308 	and.w	r3, r3, #8
 80099f0:	2b08      	cmp	r3, #8
 80099f2:	d12e      	bne.n	8009a52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099fc:	2200      	movs	r2, #0
 80099fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f88c 	bl	8009b20 <UART_WaitOnFlagUntilTimeout>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d021      	beq.n	8009a52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a16:	e853 3f00 	ldrex	r3, [r3]
 8009a1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a22:	653b      	str	r3, [r7, #80]	; 0x50
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8009a2e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a34:	e841 2300 	strex	r3, r2, [r1]
 8009a38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e6      	bne.n	8009a0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2220      	movs	r2, #32
 8009a44:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e062      	b.n	8009b18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 0304 	and.w	r3, r3, #4
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	d149      	bne.n	8009af4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f856 	bl	8009b20 <UART_WaitOnFlagUntilTimeout>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d03c      	beq.n	8009af4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	e853 3f00 	ldrex	r3, [r3]
 8009a86:	623b      	str	r3, [r7, #32]
   return(result);
 8009a88:	6a3b      	ldr	r3, [r7, #32]
 8009a8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	461a      	mov	r2, r3
 8009a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a98:	633b      	str	r3, [r7, #48]	; 0x30
 8009a9a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aa0:	e841 2300 	strex	r3, r2, [r1]
 8009aa4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1e6      	bne.n	8009a7a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	e853 3f00 	ldrex	r3, [r3]
 8009aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0301 	bic.w	r3, r3, #1
 8009ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	3308      	adds	r3, #8
 8009aca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009acc:	61fa      	str	r2, [r7, #28]
 8009ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad0:	69b9      	ldr	r1, [r7, #24]
 8009ad2:	69fa      	ldr	r2, [r7, #28]
 8009ad4:	e841 2300 	strex	r3, r2, [r1]
 8009ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1e5      	bne.n	8009aac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2220      	movs	r2, #32
 8009ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e011      	b.n	8009b18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2220      	movs	r2, #32
 8009af8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2220      	movs	r2, #32
 8009afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3758      	adds	r7, #88	; 0x58
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	603b      	str	r3, [r7, #0]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b30:	e049      	b.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b38:	d045      	beq.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b3a:	f7fb fea5 	bl	8005888 <HAL_GetTick>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	69ba      	ldr	r2, [r7, #24]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d302      	bcc.n	8009b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e048      	b.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0304 	and.w	r3, r3, #4
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d031      	beq.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	f003 0308 	and.w	r3, r3, #8
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	d110      	bne.n	8009b92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2208      	movs	r2, #8
 8009b76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 f838 	bl	8009bee <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2208      	movs	r2, #8
 8009b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e029      	b.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	69db      	ldr	r3, [r3, #28]
 8009b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ba0:	d111      	bne.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 f81e 	bl	8009bee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e00f      	b.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	69da      	ldr	r2, [r3, #28]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	4013      	ands	r3, r2
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	bf0c      	ite	eq
 8009bd6:	2301      	moveq	r3, #1
 8009bd8:	2300      	movne	r3, #0
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	461a      	mov	r2, r3
 8009bde:	79fb      	ldrb	r3, [r7, #7]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d0a6      	beq.n	8009b32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b095      	sub	sp, #84	; 0x54
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfe:	e853 3f00 	ldrex	r3, [r3]
 8009c02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c14:	643b      	str	r3, [r7, #64]	; 0x40
 8009c16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c1c:	e841 2300 	strex	r3, r2, [r1]
 8009c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1e6      	bne.n	8009bf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3308      	adds	r3, #8
 8009c2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	e853 3f00 	ldrex	r3, [r3]
 8009c36:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	f023 0301 	bic.w	r3, r3, #1
 8009c3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3308      	adds	r3, #8
 8009c46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c50:	e841 2300 	strex	r3, r2, [r1]
 8009c54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e5      	bne.n	8009c28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d118      	bne.n	8009c96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	e853 3f00 	ldrex	r3, [r3]
 8009c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f023 0310 	bic.w	r3, r3, #16
 8009c78:	647b      	str	r3, [r7, #68]	; 0x44
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c82:	61bb      	str	r3, [r7, #24]
 8009c84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c86:	6979      	ldr	r1, [r7, #20]
 8009c88:	69ba      	ldr	r2, [r7, #24]
 8009c8a:	e841 2300 	strex	r3, r2, [r1]
 8009c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1e6      	bne.n	8009c64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009caa:	bf00      	nop
 8009cac:	3754      	adds	r7, #84	; 0x54
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
	...

08009cb8 <__errno>:
 8009cb8:	4b01      	ldr	r3, [pc, #4]	; (8009cc0 <__errno+0x8>)
 8009cba:	6818      	ldr	r0, [r3, #0]
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	20000068 	.word	0x20000068

08009cc4 <__libc_init_array>:
 8009cc4:	b570      	push	{r4, r5, r6, lr}
 8009cc6:	4d0d      	ldr	r5, [pc, #52]	; (8009cfc <__libc_init_array+0x38>)
 8009cc8:	4c0d      	ldr	r4, [pc, #52]	; (8009d00 <__libc_init_array+0x3c>)
 8009cca:	1b64      	subs	r4, r4, r5
 8009ccc:	10a4      	asrs	r4, r4, #2
 8009cce:	2600      	movs	r6, #0
 8009cd0:	42a6      	cmp	r6, r4
 8009cd2:	d109      	bne.n	8009ce8 <__libc_init_array+0x24>
 8009cd4:	4d0b      	ldr	r5, [pc, #44]	; (8009d04 <__libc_init_array+0x40>)
 8009cd6:	4c0c      	ldr	r4, [pc, #48]	; (8009d08 <__libc_init_array+0x44>)
 8009cd8:	f001 fb04 	bl	800b2e4 <_init>
 8009cdc:	1b64      	subs	r4, r4, r5
 8009cde:	10a4      	asrs	r4, r4, #2
 8009ce0:	2600      	movs	r6, #0
 8009ce2:	42a6      	cmp	r6, r4
 8009ce4:	d105      	bne.n	8009cf2 <__libc_init_array+0x2e>
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}
 8009ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cec:	4798      	blx	r3
 8009cee:	3601      	adds	r6, #1
 8009cf0:	e7ee      	b.n	8009cd0 <__libc_init_array+0xc>
 8009cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cf6:	4798      	blx	r3
 8009cf8:	3601      	adds	r6, #1
 8009cfa:	e7f2      	b.n	8009ce2 <__libc_init_array+0x1e>
 8009cfc:	0800d030 	.word	0x0800d030
 8009d00:	0800d030 	.word	0x0800d030
 8009d04:	0800d030 	.word	0x0800d030
 8009d08:	0800d034 	.word	0x0800d034

08009d0c <memset>:
 8009d0c:	4402      	add	r2, r0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d100      	bne.n	8009d16 <memset+0xa>
 8009d14:	4770      	bx	lr
 8009d16:	f803 1b01 	strb.w	r1, [r3], #1
 8009d1a:	e7f9      	b.n	8009d10 <memset+0x4>

08009d1c <iprintf>:
 8009d1c:	b40f      	push	{r0, r1, r2, r3}
 8009d1e:	4b0a      	ldr	r3, [pc, #40]	; (8009d48 <iprintf+0x2c>)
 8009d20:	b513      	push	{r0, r1, r4, lr}
 8009d22:	681c      	ldr	r4, [r3, #0]
 8009d24:	b124      	cbz	r4, 8009d30 <iprintf+0x14>
 8009d26:	69a3      	ldr	r3, [r4, #24]
 8009d28:	b913      	cbnz	r3, 8009d30 <iprintf+0x14>
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f000 fb1c 	bl	800a368 <__sinit>
 8009d30:	ab05      	add	r3, sp, #20
 8009d32:	9a04      	ldr	r2, [sp, #16]
 8009d34:	68a1      	ldr	r1, [r4, #8]
 8009d36:	9301      	str	r3, [sp, #4]
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f000 fe9b 	bl	800aa74 <_vfiprintf_r>
 8009d3e:	b002      	add	sp, #8
 8009d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d44:	b004      	add	sp, #16
 8009d46:	4770      	bx	lr
 8009d48:	20000068 	.word	0x20000068

08009d4c <_puts_r>:
 8009d4c:	b570      	push	{r4, r5, r6, lr}
 8009d4e:	460e      	mov	r6, r1
 8009d50:	4605      	mov	r5, r0
 8009d52:	b118      	cbz	r0, 8009d5c <_puts_r+0x10>
 8009d54:	6983      	ldr	r3, [r0, #24]
 8009d56:	b90b      	cbnz	r3, 8009d5c <_puts_r+0x10>
 8009d58:	f000 fb06 	bl	800a368 <__sinit>
 8009d5c:	69ab      	ldr	r3, [r5, #24]
 8009d5e:	68ac      	ldr	r4, [r5, #8]
 8009d60:	b913      	cbnz	r3, 8009d68 <_puts_r+0x1c>
 8009d62:	4628      	mov	r0, r5
 8009d64:	f000 fb00 	bl	800a368 <__sinit>
 8009d68:	4b2c      	ldr	r3, [pc, #176]	; (8009e1c <_puts_r+0xd0>)
 8009d6a:	429c      	cmp	r4, r3
 8009d6c:	d120      	bne.n	8009db0 <_puts_r+0x64>
 8009d6e:	686c      	ldr	r4, [r5, #4]
 8009d70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d72:	07db      	lsls	r3, r3, #31
 8009d74:	d405      	bmi.n	8009d82 <_puts_r+0x36>
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	0598      	lsls	r0, r3, #22
 8009d7a:	d402      	bmi.n	8009d82 <_puts_r+0x36>
 8009d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d7e:	f000 fba3 	bl	800a4c8 <__retarget_lock_acquire_recursive>
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	0719      	lsls	r1, r3, #28
 8009d86:	d51d      	bpl.n	8009dc4 <_puts_r+0x78>
 8009d88:	6923      	ldr	r3, [r4, #16]
 8009d8a:	b1db      	cbz	r3, 8009dc4 <_puts_r+0x78>
 8009d8c:	3e01      	subs	r6, #1
 8009d8e:	68a3      	ldr	r3, [r4, #8]
 8009d90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d94:	3b01      	subs	r3, #1
 8009d96:	60a3      	str	r3, [r4, #8]
 8009d98:	bb39      	cbnz	r1, 8009dea <_puts_r+0x9e>
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	da38      	bge.n	8009e10 <_puts_r+0xc4>
 8009d9e:	4622      	mov	r2, r4
 8009da0:	210a      	movs	r1, #10
 8009da2:	4628      	mov	r0, r5
 8009da4:	f000 f8e8 	bl	8009f78 <__swbuf_r>
 8009da8:	3001      	adds	r0, #1
 8009daa:	d011      	beq.n	8009dd0 <_puts_r+0x84>
 8009dac:	250a      	movs	r5, #10
 8009dae:	e011      	b.n	8009dd4 <_puts_r+0x88>
 8009db0:	4b1b      	ldr	r3, [pc, #108]	; (8009e20 <_puts_r+0xd4>)
 8009db2:	429c      	cmp	r4, r3
 8009db4:	d101      	bne.n	8009dba <_puts_r+0x6e>
 8009db6:	68ac      	ldr	r4, [r5, #8]
 8009db8:	e7da      	b.n	8009d70 <_puts_r+0x24>
 8009dba:	4b1a      	ldr	r3, [pc, #104]	; (8009e24 <_puts_r+0xd8>)
 8009dbc:	429c      	cmp	r4, r3
 8009dbe:	bf08      	it	eq
 8009dc0:	68ec      	ldreq	r4, [r5, #12]
 8009dc2:	e7d5      	b.n	8009d70 <_puts_r+0x24>
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	f000 f928 	bl	800a01c <__swsetup_r>
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d0dd      	beq.n	8009d8c <_puts_r+0x40>
 8009dd0:	f04f 35ff 	mov.w	r5, #4294967295
 8009dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dd6:	07da      	lsls	r2, r3, #31
 8009dd8:	d405      	bmi.n	8009de6 <_puts_r+0x9a>
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	059b      	lsls	r3, r3, #22
 8009dde:	d402      	bmi.n	8009de6 <_puts_r+0x9a>
 8009de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009de2:	f000 fb72 	bl	800a4ca <__retarget_lock_release_recursive>
 8009de6:	4628      	mov	r0, r5
 8009de8:	bd70      	pop	{r4, r5, r6, pc}
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	da04      	bge.n	8009df8 <_puts_r+0xac>
 8009dee:	69a2      	ldr	r2, [r4, #24]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	dc06      	bgt.n	8009e02 <_puts_r+0xb6>
 8009df4:	290a      	cmp	r1, #10
 8009df6:	d004      	beq.n	8009e02 <_puts_r+0xb6>
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	6022      	str	r2, [r4, #0]
 8009dfe:	7019      	strb	r1, [r3, #0]
 8009e00:	e7c5      	b.n	8009d8e <_puts_r+0x42>
 8009e02:	4622      	mov	r2, r4
 8009e04:	4628      	mov	r0, r5
 8009e06:	f000 f8b7 	bl	8009f78 <__swbuf_r>
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	d1bf      	bne.n	8009d8e <_puts_r+0x42>
 8009e0e:	e7df      	b.n	8009dd0 <_puts_r+0x84>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	250a      	movs	r5, #10
 8009e14:	1c5a      	adds	r2, r3, #1
 8009e16:	6022      	str	r2, [r4, #0]
 8009e18:	701d      	strb	r5, [r3, #0]
 8009e1a:	e7db      	b.n	8009dd4 <_puts_r+0x88>
 8009e1c:	0800cfbc 	.word	0x0800cfbc
 8009e20:	0800cfdc 	.word	0x0800cfdc
 8009e24:	0800cf9c 	.word	0x0800cf9c

08009e28 <puts>:
 8009e28:	4b02      	ldr	r3, [pc, #8]	; (8009e34 <puts+0xc>)
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	6818      	ldr	r0, [r3, #0]
 8009e2e:	f7ff bf8d 	b.w	8009d4c <_puts_r>
 8009e32:	bf00      	nop
 8009e34:	20000068 	.word	0x20000068

08009e38 <srand>:
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	4b10      	ldr	r3, [pc, #64]	; (8009e7c <srand+0x44>)
 8009e3c:	681d      	ldr	r5, [r3, #0]
 8009e3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009e40:	4604      	mov	r4, r0
 8009e42:	b9b3      	cbnz	r3, 8009e72 <srand+0x3a>
 8009e44:	2018      	movs	r0, #24
 8009e46:	f000 fba7 	bl	800a598 <malloc>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	63a8      	str	r0, [r5, #56]	; 0x38
 8009e4e:	b920      	cbnz	r0, 8009e5a <srand+0x22>
 8009e50:	4b0b      	ldr	r3, [pc, #44]	; (8009e80 <srand+0x48>)
 8009e52:	480c      	ldr	r0, [pc, #48]	; (8009e84 <srand+0x4c>)
 8009e54:	2142      	movs	r1, #66	; 0x42
 8009e56:	f000 f94f 	bl	800a0f8 <__assert_func>
 8009e5a:	490b      	ldr	r1, [pc, #44]	; (8009e88 <srand+0x50>)
 8009e5c:	4b0b      	ldr	r3, [pc, #44]	; (8009e8c <srand+0x54>)
 8009e5e:	e9c0 1300 	strd	r1, r3, [r0]
 8009e62:	4b0b      	ldr	r3, [pc, #44]	; (8009e90 <srand+0x58>)
 8009e64:	6083      	str	r3, [r0, #8]
 8009e66:	230b      	movs	r3, #11
 8009e68:	8183      	strh	r3, [r0, #12]
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	2001      	movs	r0, #1
 8009e6e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009e72:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009e74:	2200      	movs	r2, #0
 8009e76:	611c      	str	r4, [r3, #16]
 8009e78:	615a      	str	r2, [r3, #20]
 8009e7a:	bd38      	pop	{r3, r4, r5, pc}
 8009e7c:	20000068 	.word	0x20000068
 8009e80:	0800ceec 	.word	0x0800ceec
 8009e84:	0800cf03 	.word	0x0800cf03
 8009e88:	abcd330e 	.word	0xabcd330e
 8009e8c:	e66d1234 	.word	0xe66d1234
 8009e90:	0005deec 	.word	0x0005deec

08009e94 <rand>:
 8009e94:	4b16      	ldr	r3, [pc, #88]	; (8009ef0 <rand+0x5c>)
 8009e96:	b510      	push	{r4, lr}
 8009e98:	681c      	ldr	r4, [r3, #0]
 8009e9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e9c:	b9b3      	cbnz	r3, 8009ecc <rand+0x38>
 8009e9e:	2018      	movs	r0, #24
 8009ea0:	f000 fb7a 	bl	800a598 <malloc>
 8009ea4:	63a0      	str	r0, [r4, #56]	; 0x38
 8009ea6:	b928      	cbnz	r0, 8009eb4 <rand+0x20>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	4b12      	ldr	r3, [pc, #72]	; (8009ef4 <rand+0x60>)
 8009eac:	4812      	ldr	r0, [pc, #72]	; (8009ef8 <rand+0x64>)
 8009eae:	214e      	movs	r1, #78	; 0x4e
 8009eb0:	f000 f922 	bl	800a0f8 <__assert_func>
 8009eb4:	4a11      	ldr	r2, [pc, #68]	; (8009efc <rand+0x68>)
 8009eb6:	4b12      	ldr	r3, [pc, #72]	; (8009f00 <rand+0x6c>)
 8009eb8:	e9c0 2300 	strd	r2, r3, [r0]
 8009ebc:	4b11      	ldr	r3, [pc, #68]	; (8009f04 <rand+0x70>)
 8009ebe:	6083      	str	r3, [r0, #8]
 8009ec0:	230b      	movs	r3, #11
 8009ec2:	8183      	strh	r3, [r0, #12]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009ecc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009ece:	4a0e      	ldr	r2, [pc, #56]	; (8009f08 <rand+0x74>)
 8009ed0:	6920      	ldr	r0, [r4, #16]
 8009ed2:	6963      	ldr	r3, [r4, #20]
 8009ed4:	490d      	ldr	r1, [pc, #52]	; (8009f0c <rand+0x78>)
 8009ed6:	4342      	muls	r2, r0
 8009ed8:	fb01 2203 	mla	r2, r1, r3, r2
 8009edc:	fba0 0101 	umull	r0, r1, r0, r1
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	eb42 0001 	adc.w	r0, r2, r1
 8009ee6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009eea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009eee:	bd10      	pop	{r4, pc}
 8009ef0:	20000068 	.word	0x20000068
 8009ef4:	0800ceec 	.word	0x0800ceec
 8009ef8:	0800cf03 	.word	0x0800cf03
 8009efc:	abcd330e 	.word	0xabcd330e
 8009f00:	e66d1234 	.word	0xe66d1234
 8009f04:	0005deec 	.word	0x0005deec
 8009f08:	5851f42d 	.word	0x5851f42d
 8009f0c:	4c957f2d 	.word	0x4c957f2d

08009f10 <sniprintf>:
 8009f10:	b40c      	push	{r2, r3}
 8009f12:	b530      	push	{r4, r5, lr}
 8009f14:	4b17      	ldr	r3, [pc, #92]	; (8009f74 <sniprintf+0x64>)
 8009f16:	1e0c      	subs	r4, r1, #0
 8009f18:	681d      	ldr	r5, [r3, #0]
 8009f1a:	b09d      	sub	sp, #116	; 0x74
 8009f1c:	da08      	bge.n	8009f30 <sniprintf+0x20>
 8009f1e:	238b      	movs	r3, #139	; 0x8b
 8009f20:	602b      	str	r3, [r5, #0]
 8009f22:	f04f 30ff 	mov.w	r0, #4294967295
 8009f26:	b01d      	add	sp, #116	; 0x74
 8009f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f2c:	b002      	add	sp, #8
 8009f2e:	4770      	bx	lr
 8009f30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009f34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009f38:	bf14      	ite	ne
 8009f3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009f3e:	4623      	moveq	r3, r4
 8009f40:	9304      	str	r3, [sp, #16]
 8009f42:	9307      	str	r3, [sp, #28]
 8009f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f48:	9002      	str	r0, [sp, #8]
 8009f4a:	9006      	str	r0, [sp, #24]
 8009f4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009f50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009f52:	ab21      	add	r3, sp, #132	; 0x84
 8009f54:	a902      	add	r1, sp, #8
 8009f56:	4628      	mov	r0, r5
 8009f58:	9301      	str	r3, [sp, #4]
 8009f5a:	f000 fc61 	bl	800a820 <_svfiprintf_r>
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	bfbc      	itt	lt
 8009f62:	238b      	movlt	r3, #139	; 0x8b
 8009f64:	602b      	strlt	r3, [r5, #0]
 8009f66:	2c00      	cmp	r4, #0
 8009f68:	d0dd      	beq.n	8009f26 <sniprintf+0x16>
 8009f6a:	9b02      	ldr	r3, [sp, #8]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	701a      	strb	r2, [r3, #0]
 8009f70:	e7d9      	b.n	8009f26 <sniprintf+0x16>
 8009f72:	bf00      	nop
 8009f74:	20000068 	.word	0x20000068

08009f78 <__swbuf_r>:
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	460e      	mov	r6, r1
 8009f7c:	4614      	mov	r4, r2
 8009f7e:	4605      	mov	r5, r0
 8009f80:	b118      	cbz	r0, 8009f8a <__swbuf_r+0x12>
 8009f82:	6983      	ldr	r3, [r0, #24]
 8009f84:	b90b      	cbnz	r3, 8009f8a <__swbuf_r+0x12>
 8009f86:	f000 f9ef 	bl	800a368 <__sinit>
 8009f8a:	4b21      	ldr	r3, [pc, #132]	; (800a010 <__swbuf_r+0x98>)
 8009f8c:	429c      	cmp	r4, r3
 8009f8e:	d12b      	bne.n	8009fe8 <__swbuf_r+0x70>
 8009f90:	686c      	ldr	r4, [r5, #4]
 8009f92:	69a3      	ldr	r3, [r4, #24]
 8009f94:	60a3      	str	r3, [r4, #8]
 8009f96:	89a3      	ldrh	r3, [r4, #12]
 8009f98:	071a      	lsls	r2, r3, #28
 8009f9a:	d52f      	bpl.n	8009ffc <__swbuf_r+0x84>
 8009f9c:	6923      	ldr	r3, [r4, #16]
 8009f9e:	b36b      	cbz	r3, 8009ffc <__swbuf_r+0x84>
 8009fa0:	6923      	ldr	r3, [r4, #16]
 8009fa2:	6820      	ldr	r0, [r4, #0]
 8009fa4:	1ac0      	subs	r0, r0, r3
 8009fa6:	6963      	ldr	r3, [r4, #20]
 8009fa8:	b2f6      	uxtb	r6, r6
 8009faa:	4283      	cmp	r3, r0
 8009fac:	4637      	mov	r7, r6
 8009fae:	dc04      	bgt.n	8009fba <__swbuf_r+0x42>
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f000 f944 	bl	800a240 <_fflush_r>
 8009fb8:	bb30      	cbnz	r0, 800a008 <__swbuf_r+0x90>
 8009fba:	68a3      	ldr	r3, [r4, #8]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	60a3      	str	r3, [r4, #8]
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	6022      	str	r2, [r4, #0]
 8009fc6:	701e      	strb	r6, [r3, #0]
 8009fc8:	6963      	ldr	r3, [r4, #20]
 8009fca:	3001      	adds	r0, #1
 8009fcc:	4283      	cmp	r3, r0
 8009fce:	d004      	beq.n	8009fda <__swbuf_r+0x62>
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	07db      	lsls	r3, r3, #31
 8009fd4:	d506      	bpl.n	8009fe4 <__swbuf_r+0x6c>
 8009fd6:	2e0a      	cmp	r6, #10
 8009fd8:	d104      	bne.n	8009fe4 <__swbuf_r+0x6c>
 8009fda:	4621      	mov	r1, r4
 8009fdc:	4628      	mov	r0, r5
 8009fde:	f000 f92f 	bl	800a240 <_fflush_r>
 8009fe2:	b988      	cbnz	r0, 800a008 <__swbuf_r+0x90>
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fe8:	4b0a      	ldr	r3, [pc, #40]	; (800a014 <__swbuf_r+0x9c>)
 8009fea:	429c      	cmp	r4, r3
 8009fec:	d101      	bne.n	8009ff2 <__swbuf_r+0x7a>
 8009fee:	68ac      	ldr	r4, [r5, #8]
 8009ff0:	e7cf      	b.n	8009f92 <__swbuf_r+0x1a>
 8009ff2:	4b09      	ldr	r3, [pc, #36]	; (800a018 <__swbuf_r+0xa0>)
 8009ff4:	429c      	cmp	r4, r3
 8009ff6:	bf08      	it	eq
 8009ff8:	68ec      	ldreq	r4, [r5, #12]
 8009ffa:	e7ca      	b.n	8009f92 <__swbuf_r+0x1a>
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	4628      	mov	r0, r5
 800a000:	f000 f80c 	bl	800a01c <__swsetup_r>
 800a004:	2800      	cmp	r0, #0
 800a006:	d0cb      	beq.n	8009fa0 <__swbuf_r+0x28>
 800a008:	f04f 37ff 	mov.w	r7, #4294967295
 800a00c:	e7ea      	b.n	8009fe4 <__swbuf_r+0x6c>
 800a00e:	bf00      	nop
 800a010:	0800cfbc 	.word	0x0800cfbc
 800a014:	0800cfdc 	.word	0x0800cfdc
 800a018:	0800cf9c 	.word	0x0800cf9c

0800a01c <__swsetup_r>:
 800a01c:	4b32      	ldr	r3, [pc, #200]	; (800a0e8 <__swsetup_r+0xcc>)
 800a01e:	b570      	push	{r4, r5, r6, lr}
 800a020:	681d      	ldr	r5, [r3, #0]
 800a022:	4606      	mov	r6, r0
 800a024:	460c      	mov	r4, r1
 800a026:	b125      	cbz	r5, 800a032 <__swsetup_r+0x16>
 800a028:	69ab      	ldr	r3, [r5, #24]
 800a02a:	b913      	cbnz	r3, 800a032 <__swsetup_r+0x16>
 800a02c:	4628      	mov	r0, r5
 800a02e:	f000 f99b 	bl	800a368 <__sinit>
 800a032:	4b2e      	ldr	r3, [pc, #184]	; (800a0ec <__swsetup_r+0xd0>)
 800a034:	429c      	cmp	r4, r3
 800a036:	d10f      	bne.n	800a058 <__swsetup_r+0x3c>
 800a038:	686c      	ldr	r4, [r5, #4]
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a040:	0719      	lsls	r1, r3, #28
 800a042:	d42c      	bmi.n	800a09e <__swsetup_r+0x82>
 800a044:	06dd      	lsls	r5, r3, #27
 800a046:	d411      	bmi.n	800a06c <__swsetup_r+0x50>
 800a048:	2309      	movs	r3, #9
 800a04a:	6033      	str	r3, [r6, #0]
 800a04c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a050:	81a3      	strh	r3, [r4, #12]
 800a052:	f04f 30ff 	mov.w	r0, #4294967295
 800a056:	e03e      	b.n	800a0d6 <__swsetup_r+0xba>
 800a058:	4b25      	ldr	r3, [pc, #148]	; (800a0f0 <__swsetup_r+0xd4>)
 800a05a:	429c      	cmp	r4, r3
 800a05c:	d101      	bne.n	800a062 <__swsetup_r+0x46>
 800a05e:	68ac      	ldr	r4, [r5, #8]
 800a060:	e7eb      	b.n	800a03a <__swsetup_r+0x1e>
 800a062:	4b24      	ldr	r3, [pc, #144]	; (800a0f4 <__swsetup_r+0xd8>)
 800a064:	429c      	cmp	r4, r3
 800a066:	bf08      	it	eq
 800a068:	68ec      	ldreq	r4, [r5, #12]
 800a06a:	e7e6      	b.n	800a03a <__swsetup_r+0x1e>
 800a06c:	0758      	lsls	r0, r3, #29
 800a06e:	d512      	bpl.n	800a096 <__swsetup_r+0x7a>
 800a070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a072:	b141      	cbz	r1, 800a086 <__swsetup_r+0x6a>
 800a074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a078:	4299      	cmp	r1, r3
 800a07a:	d002      	beq.n	800a082 <__swsetup_r+0x66>
 800a07c:	4630      	mov	r0, r6
 800a07e:	f000 fa93 	bl	800a5a8 <_free_r>
 800a082:	2300      	movs	r3, #0
 800a084:	6363      	str	r3, [r4, #52]	; 0x34
 800a086:	89a3      	ldrh	r3, [r4, #12]
 800a088:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a08c:	81a3      	strh	r3, [r4, #12]
 800a08e:	2300      	movs	r3, #0
 800a090:	6063      	str	r3, [r4, #4]
 800a092:	6923      	ldr	r3, [r4, #16]
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	89a3      	ldrh	r3, [r4, #12]
 800a098:	f043 0308 	orr.w	r3, r3, #8
 800a09c:	81a3      	strh	r3, [r4, #12]
 800a09e:	6923      	ldr	r3, [r4, #16]
 800a0a0:	b94b      	cbnz	r3, 800a0b6 <__swsetup_r+0x9a>
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0ac:	d003      	beq.n	800a0b6 <__swsetup_r+0x9a>
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	f000 fa31 	bl	800a518 <__smakebuf_r>
 800a0b6:	89a0      	ldrh	r0, [r4, #12]
 800a0b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0bc:	f010 0301 	ands.w	r3, r0, #1
 800a0c0:	d00a      	beq.n	800a0d8 <__swsetup_r+0xbc>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60a3      	str	r3, [r4, #8]
 800a0c6:	6963      	ldr	r3, [r4, #20]
 800a0c8:	425b      	negs	r3, r3
 800a0ca:	61a3      	str	r3, [r4, #24]
 800a0cc:	6923      	ldr	r3, [r4, #16]
 800a0ce:	b943      	cbnz	r3, 800a0e2 <__swsetup_r+0xc6>
 800a0d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0d4:	d1ba      	bne.n	800a04c <__swsetup_r+0x30>
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
 800a0d8:	0781      	lsls	r1, r0, #30
 800a0da:	bf58      	it	pl
 800a0dc:	6963      	ldrpl	r3, [r4, #20]
 800a0de:	60a3      	str	r3, [r4, #8]
 800a0e0:	e7f4      	b.n	800a0cc <__swsetup_r+0xb0>
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	e7f7      	b.n	800a0d6 <__swsetup_r+0xba>
 800a0e6:	bf00      	nop
 800a0e8:	20000068 	.word	0x20000068
 800a0ec:	0800cfbc 	.word	0x0800cfbc
 800a0f0:	0800cfdc 	.word	0x0800cfdc
 800a0f4:	0800cf9c 	.word	0x0800cf9c

0800a0f8 <__assert_func>:
 800a0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0fa:	4614      	mov	r4, r2
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	4b09      	ldr	r3, [pc, #36]	; (800a124 <__assert_func+0x2c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4605      	mov	r5, r0
 800a104:	68d8      	ldr	r0, [r3, #12]
 800a106:	b14c      	cbz	r4, 800a11c <__assert_func+0x24>
 800a108:	4b07      	ldr	r3, [pc, #28]	; (800a128 <__assert_func+0x30>)
 800a10a:	9100      	str	r1, [sp, #0]
 800a10c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a110:	4906      	ldr	r1, [pc, #24]	; (800a12c <__assert_func+0x34>)
 800a112:	462b      	mov	r3, r5
 800a114:	f000 f9a6 	bl	800a464 <fiprintf>
 800a118:	f000 ffd6 	bl	800b0c8 <abort>
 800a11c:	4b04      	ldr	r3, [pc, #16]	; (800a130 <__assert_func+0x38>)
 800a11e:	461c      	mov	r4, r3
 800a120:	e7f3      	b.n	800a10a <__assert_func+0x12>
 800a122:	bf00      	nop
 800a124:	20000068 	.word	0x20000068
 800a128:	0800cf5e 	.word	0x0800cf5e
 800a12c:	0800cf6b 	.word	0x0800cf6b
 800a130:	0800cf99 	.word	0x0800cf99

0800a134 <__sflush_r>:
 800a134:	898a      	ldrh	r2, [r1, #12]
 800a136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a13a:	4605      	mov	r5, r0
 800a13c:	0710      	lsls	r0, r2, #28
 800a13e:	460c      	mov	r4, r1
 800a140:	d458      	bmi.n	800a1f4 <__sflush_r+0xc0>
 800a142:	684b      	ldr	r3, [r1, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	dc05      	bgt.n	800a154 <__sflush_r+0x20>
 800a148:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	dc02      	bgt.n	800a154 <__sflush_r+0x20>
 800a14e:	2000      	movs	r0, #0
 800a150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a156:	2e00      	cmp	r6, #0
 800a158:	d0f9      	beq.n	800a14e <__sflush_r+0x1a>
 800a15a:	2300      	movs	r3, #0
 800a15c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a160:	682f      	ldr	r7, [r5, #0]
 800a162:	602b      	str	r3, [r5, #0]
 800a164:	d032      	beq.n	800a1cc <__sflush_r+0x98>
 800a166:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	075a      	lsls	r2, r3, #29
 800a16c:	d505      	bpl.n	800a17a <__sflush_r+0x46>
 800a16e:	6863      	ldr	r3, [r4, #4]
 800a170:	1ac0      	subs	r0, r0, r3
 800a172:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a174:	b10b      	cbz	r3, 800a17a <__sflush_r+0x46>
 800a176:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a178:	1ac0      	subs	r0, r0, r3
 800a17a:	2300      	movs	r3, #0
 800a17c:	4602      	mov	r2, r0
 800a17e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a180:	6a21      	ldr	r1, [r4, #32]
 800a182:	4628      	mov	r0, r5
 800a184:	47b0      	blx	r6
 800a186:	1c43      	adds	r3, r0, #1
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	d106      	bne.n	800a19a <__sflush_r+0x66>
 800a18c:	6829      	ldr	r1, [r5, #0]
 800a18e:	291d      	cmp	r1, #29
 800a190:	d82c      	bhi.n	800a1ec <__sflush_r+0xb8>
 800a192:	4a2a      	ldr	r2, [pc, #168]	; (800a23c <__sflush_r+0x108>)
 800a194:	40ca      	lsrs	r2, r1
 800a196:	07d6      	lsls	r6, r2, #31
 800a198:	d528      	bpl.n	800a1ec <__sflush_r+0xb8>
 800a19a:	2200      	movs	r2, #0
 800a19c:	6062      	str	r2, [r4, #4]
 800a19e:	04d9      	lsls	r1, r3, #19
 800a1a0:	6922      	ldr	r2, [r4, #16]
 800a1a2:	6022      	str	r2, [r4, #0]
 800a1a4:	d504      	bpl.n	800a1b0 <__sflush_r+0x7c>
 800a1a6:	1c42      	adds	r2, r0, #1
 800a1a8:	d101      	bne.n	800a1ae <__sflush_r+0x7a>
 800a1aa:	682b      	ldr	r3, [r5, #0]
 800a1ac:	b903      	cbnz	r3, 800a1b0 <__sflush_r+0x7c>
 800a1ae:	6560      	str	r0, [r4, #84]	; 0x54
 800a1b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1b2:	602f      	str	r7, [r5, #0]
 800a1b4:	2900      	cmp	r1, #0
 800a1b6:	d0ca      	beq.n	800a14e <__sflush_r+0x1a>
 800a1b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1bc:	4299      	cmp	r1, r3
 800a1be:	d002      	beq.n	800a1c6 <__sflush_r+0x92>
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	f000 f9f1 	bl	800a5a8 <_free_r>
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	6360      	str	r0, [r4, #52]	; 0x34
 800a1ca:	e7c1      	b.n	800a150 <__sflush_r+0x1c>
 800a1cc:	6a21      	ldr	r1, [r4, #32]
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	47b0      	blx	r6
 800a1d4:	1c41      	adds	r1, r0, #1
 800a1d6:	d1c7      	bne.n	800a168 <__sflush_r+0x34>
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0c4      	beq.n	800a168 <__sflush_r+0x34>
 800a1de:	2b1d      	cmp	r3, #29
 800a1e0:	d001      	beq.n	800a1e6 <__sflush_r+0xb2>
 800a1e2:	2b16      	cmp	r3, #22
 800a1e4:	d101      	bne.n	800a1ea <__sflush_r+0xb6>
 800a1e6:	602f      	str	r7, [r5, #0]
 800a1e8:	e7b1      	b.n	800a14e <__sflush_r+0x1a>
 800a1ea:	89a3      	ldrh	r3, [r4, #12]
 800a1ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1f0:	81a3      	strh	r3, [r4, #12]
 800a1f2:	e7ad      	b.n	800a150 <__sflush_r+0x1c>
 800a1f4:	690f      	ldr	r7, [r1, #16]
 800a1f6:	2f00      	cmp	r7, #0
 800a1f8:	d0a9      	beq.n	800a14e <__sflush_r+0x1a>
 800a1fa:	0793      	lsls	r3, r2, #30
 800a1fc:	680e      	ldr	r6, [r1, #0]
 800a1fe:	bf08      	it	eq
 800a200:	694b      	ldreq	r3, [r1, #20]
 800a202:	600f      	str	r7, [r1, #0]
 800a204:	bf18      	it	ne
 800a206:	2300      	movne	r3, #0
 800a208:	eba6 0807 	sub.w	r8, r6, r7
 800a20c:	608b      	str	r3, [r1, #8]
 800a20e:	f1b8 0f00 	cmp.w	r8, #0
 800a212:	dd9c      	ble.n	800a14e <__sflush_r+0x1a>
 800a214:	6a21      	ldr	r1, [r4, #32]
 800a216:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a218:	4643      	mov	r3, r8
 800a21a:	463a      	mov	r2, r7
 800a21c:	4628      	mov	r0, r5
 800a21e:	47b0      	blx	r6
 800a220:	2800      	cmp	r0, #0
 800a222:	dc06      	bgt.n	800a232 <__sflush_r+0xfe>
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	f04f 30ff 	mov.w	r0, #4294967295
 800a230:	e78e      	b.n	800a150 <__sflush_r+0x1c>
 800a232:	4407      	add	r7, r0
 800a234:	eba8 0800 	sub.w	r8, r8, r0
 800a238:	e7e9      	b.n	800a20e <__sflush_r+0xda>
 800a23a:	bf00      	nop
 800a23c:	20400001 	.word	0x20400001

0800a240 <_fflush_r>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	690b      	ldr	r3, [r1, #16]
 800a244:	4605      	mov	r5, r0
 800a246:	460c      	mov	r4, r1
 800a248:	b913      	cbnz	r3, 800a250 <_fflush_r+0x10>
 800a24a:	2500      	movs	r5, #0
 800a24c:	4628      	mov	r0, r5
 800a24e:	bd38      	pop	{r3, r4, r5, pc}
 800a250:	b118      	cbz	r0, 800a25a <_fflush_r+0x1a>
 800a252:	6983      	ldr	r3, [r0, #24]
 800a254:	b90b      	cbnz	r3, 800a25a <_fflush_r+0x1a>
 800a256:	f000 f887 	bl	800a368 <__sinit>
 800a25a:	4b14      	ldr	r3, [pc, #80]	; (800a2ac <_fflush_r+0x6c>)
 800a25c:	429c      	cmp	r4, r3
 800a25e:	d11b      	bne.n	800a298 <_fflush_r+0x58>
 800a260:	686c      	ldr	r4, [r5, #4]
 800a262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0ef      	beq.n	800a24a <_fflush_r+0xa>
 800a26a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a26c:	07d0      	lsls	r0, r2, #31
 800a26e:	d404      	bmi.n	800a27a <_fflush_r+0x3a>
 800a270:	0599      	lsls	r1, r3, #22
 800a272:	d402      	bmi.n	800a27a <_fflush_r+0x3a>
 800a274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a276:	f000 f927 	bl	800a4c8 <__retarget_lock_acquire_recursive>
 800a27a:	4628      	mov	r0, r5
 800a27c:	4621      	mov	r1, r4
 800a27e:	f7ff ff59 	bl	800a134 <__sflush_r>
 800a282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a284:	07da      	lsls	r2, r3, #31
 800a286:	4605      	mov	r5, r0
 800a288:	d4e0      	bmi.n	800a24c <_fflush_r+0xc>
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	059b      	lsls	r3, r3, #22
 800a28e:	d4dd      	bmi.n	800a24c <_fflush_r+0xc>
 800a290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a292:	f000 f91a 	bl	800a4ca <__retarget_lock_release_recursive>
 800a296:	e7d9      	b.n	800a24c <_fflush_r+0xc>
 800a298:	4b05      	ldr	r3, [pc, #20]	; (800a2b0 <_fflush_r+0x70>)
 800a29a:	429c      	cmp	r4, r3
 800a29c:	d101      	bne.n	800a2a2 <_fflush_r+0x62>
 800a29e:	68ac      	ldr	r4, [r5, #8]
 800a2a0:	e7df      	b.n	800a262 <_fflush_r+0x22>
 800a2a2:	4b04      	ldr	r3, [pc, #16]	; (800a2b4 <_fflush_r+0x74>)
 800a2a4:	429c      	cmp	r4, r3
 800a2a6:	bf08      	it	eq
 800a2a8:	68ec      	ldreq	r4, [r5, #12]
 800a2aa:	e7da      	b.n	800a262 <_fflush_r+0x22>
 800a2ac:	0800cfbc 	.word	0x0800cfbc
 800a2b0:	0800cfdc 	.word	0x0800cfdc
 800a2b4:	0800cf9c 	.word	0x0800cf9c

0800a2b8 <std>:
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	b510      	push	{r4, lr}
 800a2bc:	4604      	mov	r4, r0
 800a2be:	e9c0 3300 	strd	r3, r3, [r0]
 800a2c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2c6:	6083      	str	r3, [r0, #8]
 800a2c8:	8181      	strh	r1, [r0, #12]
 800a2ca:	6643      	str	r3, [r0, #100]	; 0x64
 800a2cc:	81c2      	strh	r2, [r0, #14]
 800a2ce:	6183      	str	r3, [r0, #24]
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	2208      	movs	r2, #8
 800a2d4:	305c      	adds	r0, #92	; 0x5c
 800a2d6:	f7ff fd19 	bl	8009d0c <memset>
 800a2da:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <std+0x38>)
 800a2dc:	6263      	str	r3, [r4, #36]	; 0x24
 800a2de:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <std+0x3c>)
 800a2e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2e2:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <std+0x40>)
 800a2e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2e6:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <std+0x44>)
 800a2e8:	6224      	str	r4, [r4, #32]
 800a2ea:	6323      	str	r3, [r4, #48]	; 0x30
 800a2ec:	bd10      	pop	{r4, pc}
 800a2ee:	bf00      	nop
 800a2f0:	0800b01d 	.word	0x0800b01d
 800a2f4:	0800b03f 	.word	0x0800b03f
 800a2f8:	0800b077 	.word	0x0800b077
 800a2fc:	0800b09b 	.word	0x0800b09b

0800a300 <_cleanup_r>:
 800a300:	4901      	ldr	r1, [pc, #4]	; (800a308 <_cleanup_r+0x8>)
 800a302:	f000 b8c1 	b.w	800a488 <_fwalk_reent>
 800a306:	bf00      	nop
 800a308:	0800a241 	.word	0x0800a241

0800a30c <__sfmoreglue>:
 800a30c:	b570      	push	{r4, r5, r6, lr}
 800a30e:	2268      	movs	r2, #104	; 0x68
 800a310:	1e4d      	subs	r5, r1, #1
 800a312:	4355      	muls	r5, r2
 800a314:	460e      	mov	r6, r1
 800a316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a31a:	f000 f9b1 	bl	800a680 <_malloc_r>
 800a31e:	4604      	mov	r4, r0
 800a320:	b140      	cbz	r0, 800a334 <__sfmoreglue+0x28>
 800a322:	2100      	movs	r1, #0
 800a324:	e9c0 1600 	strd	r1, r6, [r0]
 800a328:	300c      	adds	r0, #12
 800a32a:	60a0      	str	r0, [r4, #8]
 800a32c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a330:	f7ff fcec 	bl	8009d0c <memset>
 800a334:	4620      	mov	r0, r4
 800a336:	bd70      	pop	{r4, r5, r6, pc}

0800a338 <__sfp_lock_acquire>:
 800a338:	4801      	ldr	r0, [pc, #4]	; (800a340 <__sfp_lock_acquire+0x8>)
 800a33a:	f000 b8c5 	b.w	800a4c8 <__retarget_lock_acquire_recursive>
 800a33e:	bf00      	nop
 800a340:	2000298d 	.word	0x2000298d

0800a344 <__sfp_lock_release>:
 800a344:	4801      	ldr	r0, [pc, #4]	; (800a34c <__sfp_lock_release+0x8>)
 800a346:	f000 b8c0 	b.w	800a4ca <__retarget_lock_release_recursive>
 800a34a:	bf00      	nop
 800a34c:	2000298d 	.word	0x2000298d

0800a350 <__sinit_lock_acquire>:
 800a350:	4801      	ldr	r0, [pc, #4]	; (800a358 <__sinit_lock_acquire+0x8>)
 800a352:	f000 b8b9 	b.w	800a4c8 <__retarget_lock_acquire_recursive>
 800a356:	bf00      	nop
 800a358:	2000298e 	.word	0x2000298e

0800a35c <__sinit_lock_release>:
 800a35c:	4801      	ldr	r0, [pc, #4]	; (800a364 <__sinit_lock_release+0x8>)
 800a35e:	f000 b8b4 	b.w	800a4ca <__retarget_lock_release_recursive>
 800a362:	bf00      	nop
 800a364:	2000298e 	.word	0x2000298e

0800a368 <__sinit>:
 800a368:	b510      	push	{r4, lr}
 800a36a:	4604      	mov	r4, r0
 800a36c:	f7ff fff0 	bl	800a350 <__sinit_lock_acquire>
 800a370:	69a3      	ldr	r3, [r4, #24]
 800a372:	b11b      	cbz	r3, 800a37c <__sinit+0x14>
 800a374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a378:	f7ff bff0 	b.w	800a35c <__sinit_lock_release>
 800a37c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a380:	6523      	str	r3, [r4, #80]	; 0x50
 800a382:	4b13      	ldr	r3, [pc, #76]	; (800a3d0 <__sinit+0x68>)
 800a384:	4a13      	ldr	r2, [pc, #76]	; (800a3d4 <__sinit+0x6c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	62a2      	str	r2, [r4, #40]	; 0x28
 800a38a:	42a3      	cmp	r3, r4
 800a38c:	bf04      	itt	eq
 800a38e:	2301      	moveq	r3, #1
 800a390:	61a3      	streq	r3, [r4, #24]
 800a392:	4620      	mov	r0, r4
 800a394:	f000 f820 	bl	800a3d8 <__sfp>
 800a398:	6060      	str	r0, [r4, #4]
 800a39a:	4620      	mov	r0, r4
 800a39c:	f000 f81c 	bl	800a3d8 <__sfp>
 800a3a0:	60a0      	str	r0, [r4, #8]
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f000 f818 	bl	800a3d8 <__sfp>
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	60e0      	str	r0, [r4, #12]
 800a3ac:	2104      	movs	r1, #4
 800a3ae:	6860      	ldr	r0, [r4, #4]
 800a3b0:	f7ff ff82 	bl	800a2b8 <std>
 800a3b4:	68a0      	ldr	r0, [r4, #8]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	2109      	movs	r1, #9
 800a3ba:	f7ff ff7d 	bl	800a2b8 <std>
 800a3be:	68e0      	ldr	r0, [r4, #12]
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	2112      	movs	r1, #18
 800a3c4:	f7ff ff78 	bl	800a2b8 <std>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	61a3      	str	r3, [r4, #24]
 800a3cc:	e7d2      	b.n	800a374 <__sinit+0xc>
 800a3ce:	bf00      	nop
 800a3d0:	0800cee8 	.word	0x0800cee8
 800a3d4:	0800a301 	.word	0x0800a301

0800a3d8 <__sfp>:
 800a3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3da:	4607      	mov	r7, r0
 800a3dc:	f7ff ffac 	bl	800a338 <__sfp_lock_acquire>
 800a3e0:	4b1e      	ldr	r3, [pc, #120]	; (800a45c <__sfp+0x84>)
 800a3e2:	681e      	ldr	r6, [r3, #0]
 800a3e4:	69b3      	ldr	r3, [r6, #24]
 800a3e6:	b913      	cbnz	r3, 800a3ee <__sfp+0x16>
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f7ff ffbd 	bl	800a368 <__sinit>
 800a3ee:	3648      	adds	r6, #72	; 0x48
 800a3f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	d503      	bpl.n	800a400 <__sfp+0x28>
 800a3f8:	6833      	ldr	r3, [r6, #0]
 800a3fa:	b30b      	cbz	r3, 800a440 <__sfp+0x68>
 800a3fc:	6836      	ldr	r6, [r6, #0]
 800a3fe:	e7f7      	b.n	800a3f0 <__sfp+0x18>
 800a400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a404:	b9d5      	cbnz	r5, 800a43c <__sfp+0x64>
 800a406:	4b16      	ldr	r3, [pc, #88]	; (800a460 <__sfp+0x88>)
 800a408:	60e3      	str	r3, [r4, #12]
 800a40a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a40e:	6665      	str	r5, [r4, #100]	; 0x64
 800a410:	f000 f859 	bl	800a4c6 <__retarget_lock_init_recursive>
 800a414:	f7ff ff96 	bl	800a344 <__sfp_lock_release>
 800a418:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a41c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a420:	6025      	str	r5, [r4, #0]
 800a422:	61a5      	str	r5, [r4, #24]
 800a424:	2208      	movs	r2, #8
 800a426:	4629      	mov	r1, r5
 800a428:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a42c:	f7ff fc6e 	bl	8009d0c <memset>
 800a430:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a434:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a438:	4620      	mov	r0, r4
 800a43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a43c:	3468      	adds	r4, #104	; 0x68
 800a43e:	e7d9      	b.n	800a3f4 <__sfp+0x1c>
 800a440:	2104      	movs	r1, #4
 800a442:	4638      	mov	r0, r7
 800a444:	f7ff ff62 	bl	800a30c <__sfmoreglue>
 800a448:	4604      	mov	r4, r0
 800a44a:	6030      	str	r0, [r6, #0]
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d1d5      	bne.n	800a3fc <__sfp+0x24>
 800a450:	f7ff ff78 	bl	800a344 <__sfp_lock_release>
 800a454:	230c      	movs	r3, #12
 800a456:	603b      	str	r3, [r7, #0]
 800a458:	e7ee      	b.n	800a438 <__sfp+0x60>
 800a45a:	bf00      	nop
 800a45c:	0800cee8 	.word	0x0800cee8
 800a460:	ffff0001 	.word	0xffff0001

0800a464 <fiprintf>:
 800a464:	b40e      	push	{r1, r2, r3}
 800a466:	b503      	push	{r0, r1, lr}
 800a468:	4601      	mov	r1, r0
 800a46a:	ab03      	add	r3, sp, #12
 800a46c:	4805      	ldr	r0, [pc, #20]	; (800a484 <fiprintf+0x20>)
 800a46e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a472:	6800      	ldr	r0, [r0, #0]
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	f000 fafd 	bl	800aa74 <_vfiprintf_r>
 800a47a:	b002      	add	sp, #8
 800a47c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a480:	b003      	add	sp, #12
 800a482:	4770      	bx	lr
 800a484:	20000068 	.word	0x20000068

0800a488 <_fwalk_reent>:
 800a488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a48c:	4606      	mov	r6, r0
 800a48e:	4688      	mov	r8, r1
 800a490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a494:	2700      	movs	r7, #0
 800a496:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a49a:	f1b9 0901 	subs.w	r9, r9, #1
 800a49e:	d505      	bpl.n	800a4ac <_fwalk_reent+0x24>
 800a4a0:	6824      	ldr	r4, [r4, #0]
 800a4a2:	2c00      	cmp	r4, #0
 800a4a4:	d1f7      	bne.n	800a496 <_fwalk_reent+0xe>
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ac:	89ab      	ldrh	r3, [r5, #12]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d907      	bls.n	800a4c2 <_fwalk_reent+0x3a>
 800a4b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	d003      	beq.n	800a4c2 <_fwalk_reent+0x3a>
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	4630      	mov	r0, r6
 800a4be:	47c0      	blx	r8
 800a4c0:	4307      	orrs	r7, r0
 800a4c2:	3568      	adds	r5, #104	; 0x68
 800a4c4:	e7e9      	b.n	800a49a <_fwalk_reent+0x12>

0800a4c6 <__retarget_lock_init_recursive>:
 800a4c6:	4770      	bx	lr

0800a4c8 <__retarget_lock_acquire_recursive>:
 800a4c8:	4770      	bx	lr

0800a4ca <__retarget_lock_release_recursive>:
 800a4ca:	4770      	bx	lr

0800a4cc <__swhatbuf_r>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	460e      	mov	r6, r1
 800a4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d4:	2900      	cmp	r1, #0
 800a4d6:	b096      	sub	sp, #88	; 0x58
 800a4d8:	4614      	mov	r4, r2
 800a4da:	461d      	mov	r5, r3
 800a4dc:	da08      	bge.n	800a4f0 <__swhatbuf_r+0x24>
 800a4de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	602a      	str	r2, [r5, #0]
 800a4e6:	061a      	lsls	r2, r3, #24
 800a4e8:	d410      	bmi.n	800a50c <__swhatbuf_r+0x40>
 800a4ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4ee:	e00e      	b.n	800a50e <__swhatbuf_r+0x42>
 800a4f0:	466a      	mov	r2, sp
 800a4f2:	f000 fe01 	bl	800b0f8 <_fstat_r>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	dbf1      	blt.n	800a4de <__swhatbuf_r+0x12>
 800a4fa:	9a01      	ldr	r2, [sp, #4]
 800a4fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a500:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a504:	425a      	negs	r2, r3
 800a506:	415a      	adcs	r2, r3
 800a508:	602a      	str	r2, [r5, #0]
 800a50a:	e7ee      	b.n	800a4ea <__swhatbuf_r+0x1e>
 800a50c:	2340      	movs	r3, #64	; 0x40
 800a50e:	2000      	movs	r0, #0
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	b016      	add	sp, #88	; 0x58
 800a514:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a518 <__smakebuf_r>:
 800a518:	898b      	ldrh	r3, [r1, #12]
 800a51a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a51c:	079d      	lsls	r5, r3, #30
 800a51e:	4606      	mov	r6, r0
 800a520:	460c      	mov	r4, r1
 800a522:	d507      	bpl.n	800a534 <__smakebuf_r+0x1c>
 800a524:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	6123      	str	r3, [r4, #16]
 800a52c:	2301      	movs	r3, #1
 800a52e:	6163      	str	r3, [r4, #20]
 800a530:	b002      	add	sp, #8
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	ab01      	add	r3, sp, #4
 800a536:	466a      	mov	r2, sp
 800a538:	f7ff ffc8 	bl	800a4cc <__swhatbuf_r>
 800a53c:	9900      	ldr	r1, [sp, #0]
 800a53e:	4605      	mov	r5, r0
 800a540:	4630      	mov	r0, r6
 800a542:	f000 f89d 	bl	800a680 <_malloc_r>
 800a546:	b948      	cbnz	r0, 800a55c <__smakebuf_r+0x44>
 800a548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a54c:	059a      	lsls	r2, r3, #22
 800a54e:	d4ef      	bmi.n	800a530 <__smakebuf_r+0x18>
 800a550:	f023 0303 	bic.w	r3, r3, #3
 800a554:	f043 0302 	orr.w	r3, r3, #2
 800a558:	81a3      	strh	r3, [r4, #12]
 800a55a:	e7e3      	b.n	800a524 <__smakebuf_r+0xc>
 800a55c:	4b0d      	ldr	r3, [pc, #52]	; (800a594 <__smakebuf_r+0x7c>)
 800a55e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	6020      	str	r0, [r4, #0]
 800a564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a568:	81a3      	strh	r3, [r4, #12]
 800a56a:	9b00      	ldr	r3, [sp, #0]
 800a56c:	6163      	str	r3, [r4, #20]
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	6120      	str	r0, [r4, #16]
 800a572:	b15b      	cbz	r3, 800a58c <__smakebuf_r+0x74>
 800a574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a578:	4630      	mov	r0, r6
 800a57a:	f000 fdcf 	bl	800b11c <_isatty_r>
 800a57e:	b128      	cbz	r0, 800a58c <__smakebuf_r+0x74>
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	f023 0303 	bic.w	r3, r3, #3
 800a586:	f043 0301 	orr.w	r3, r3, #1
 800a58a:	81a3      	strh	r3, [r4, #12]
 800a58c:	89a0      	ldrh	r0, [r4, #12]
 800a58e:	4305      	orrs	r5, r0
 800a590:	81a5      	strh	r5, [r4, #12]
 800a592:	e7cd      	b.n	800a530 <__smakebuf_r+0x18>
 800a594:	0800a301 	.word	0x0800a301

0800a598 <malloc>:
 800a598:	4b02      	ldr	r3, [pc, #8]	; (800a5a4 <malloc+0xc>)
 800a59a:	4601      	mov	r1, r0
 800a59c:	6818      	ldr	r0, [r3, #0]
 800a59e:	f000 b86f 	b.w	800a680 <_malloc_r>
 800a5a2:	bf00      	nop
 800a5a4:	20000068 	.word	0x20000068

0800a5a8 <_free_r>:
 800a5a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5aa:	2900      	cmp	r1, #0
 800a5ac:	d044      	beq.n	800a638 <_free_r+0x90>
 800a5ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5b2:	9001      	str	r0, [sp, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f1a1 0404 	sub.w	r4, r1, #4
 800a5ba:	bfb8      	it	lt
 800a5bc:	18e4      	addlt	r4, r4, r3
 800a5be:	f000 fdf7 	bl	800b1b0 <__malloc_lock>
 800a5c2:	4a1e      	ldr	r2, [pc, #120]	; (800a63c <_free_r+0x94>)
 800a5c4:	9801      	ldr	r0, [sp, #4]
 800a5c6:	6813      	ldr	r3, [r2, #0]
 800a5c8:	b933      	cbnz	r3, 800a5d8 <_free_r+0x30>
 800a5ca:	6063      	str	r3, [r4, #4]
 800a5cc:	6014      	str	r4, [r2, #0]
 800a5ce:	b003      	add	sp, #12
 800a5d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5d4:	f000 bdf2 	b.w	800b1bc <__malloc_unlock>
 800a5d8:	42a3      	cmp	r3, r4
 800a5da:	d908      	bls.n	800a5ee <_free_r+0x46>
 800a5dc:	6825      	ldr	r5, [r4, #0]
 800a5de:	1961      	adds	r1, r4, r5
 800a5e0:	428b      	cmp	r3, r1
 800a5e2:	bf01      	itttt	eq
 800a5e4:	6819      	ldreq	r1, [r3, #0]
 800a5e6:	685b      	ldreq	r3, [r3, #4]
 800a5e8:	1949      	addeq	r1, r1, r5
 800a5ea:	6021      	streq	r1, [r4, #0]
 800a5ec:	e7ed      	b.n	800a5ca <_free_r+0x22>
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	b10b      	cbz	r3, 800a5f8 <_free_r+0x50>
 800a5f4:	42a3      	cmp	r3, r4
 800a5f6:	d9fa      	bls.n	800a5ee <_free_r+0x46>
 800a5f8:	6811      	ldr	r1, [r2, #0]
 800a5fa:	1855      	adds	r5, r2, r1
 800a5fc:	42a5      	cmp	r5, r4
 800a5fe:	d10b      	bne.n	800a618 <_free_r+0x70>
 800a600:	6824      	ldr	r4, [r4, #0]
 800a602:	4421      	add	r1, r4
 800a604:	1854      	adds	r4, r2, r1
 800a606:	42a3      	cmp	r3, r4
 800a608:	6011      	str	r1, [r2, #0]
 800a60a:	d1e0      	bne.n	800a5ce <_free_r+0x26>
 800a60c:	681c      	ldr	r4, [r3, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	6053      	str	r3, [r2, #4]
 800a612:	4421      	add	r1, r4
 800a614:	6011      	str	r1, [r2, #0]
 800a616:	e7da      	b.n	800a5ce <_free_r+0x26>
 800a618:	d902      	bls.n	800a620 <_free_r+0x78>
 800a61a:	230c      	movs	r3, #12
 800a61c:	6003      	str	r3, [r0, #0]
 800a61e:	e7d6      	b.n	800a5ce <_free_r+0x26>
 800a620:	6825      	ldr	r5, [r4, #0]
 800a622:	1961      	adds	r1, r4, r5
 800a624:	428b      	cmp	r3, r1
 800a626:	bf04      	itt	eq
 800a628:	6819      	ldreq	r1, [r3, #0]
 800a62a:	685b      	ldreq	r3, [r3, #4]
 800a62c:	6063      	str	r3, [r4, #4]
 800a62e:	bf04      	itt	eq
 800a630:	1949      	addeq	r1, r1, r5
 800a632:	6021      	streq	r1, [r4, #0]
 800a634:	6054      	str	r4, [r2, #4]
 800a636:	e7ca      	b.n	800a5ce <_free_r+0x26>
 800a638:	b003      	add	sp, #12
 800a63a:	bd30      	pop	{r4, r5, pc}
 800a63c:	20002990 	.word	0x20002990

0800a640 <sbrk_aligned>:
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	4e0e      	ldr	r6, [pc, #56]	; (800a67c <sbrk_aligned+0x3c>)
 800a644:	460c      	mov	r4, r1
 800a646:	6831      	ldr	r1, [r6, #0]
 800a648:	4605      	mov	r5, r0
 800a64a:	b911      	cbnz	r1, 800a652 <sbrk_aligned+0x12>
 800a64c:	f000 fcd6 	bl	800affc <_sbrk_r>
 800a650:	6030      	str	r0, [r6, #0]
 800a652:	4621      	mov	r1, r4
 800a654:	4628      	mov	r0, r5
 800a656:	f000 fcd1 	bl	800affc <_sbrk_r>
 800a65a:	1c43      	adds	r3, r0, #1
 800a65c:	d00a      	beq.n	800a674 <sbrk_aligned+0x34>
 800a65e:	1cc4      	adds	r4, r0, #3
 800a660:	f024 0403 	bic.w	r4, r4, #3
 800a664:	42a0      	cmp	r0, r4
 800a666:	d007      	beq.n	800a678 <sbrk_aligned+0x38>
 800a668:	1a21      	subs	r1, r4, r0
 800a66a:	4628      	mov	r0, r5
 800a66c:	f000 fcc6 	bl	800affc <_sbrk_r>
 800a670:	3001      	adds	r0, #1
 800a672:	d101      	bne.n	800a678 <sbrk_aligned+0x38>
 800a674:	f04f 34ff 	mov.w	r4, #4294967295
 800a678:	4620      	mov	r0, r4
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
 800a67c:	20002994 	.word	0x20002994

0800a680 <_malloc_r>:
 800a680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a684:	1ccd      	adds	r5, r1, #3
 800a686:	f025 0503 	bic.w	r5, r5, #3
 800a68a:	3508      	adds	r5, #8
 800a68c:	2d0c      	cmp	r5, #12
 800a68e:	bf38      	it	cc
 800a690:	250c      	movcc	r5, #12
 800a692:	2d00      	cmp	r5, #0
 800a694:	4607      	mov	r7, r0
 800a696:	db01      	blt.n	800a69c <_malloc_r+0x1c>
 800a698:	42a9      	cmp	r1, r5
 800a69a:	d905      	bls.n	800a6a8 <_malloc_r+0x28>
 800a69c:	230c      	movs	r3, #12
 800a69e:	603b      	str	r3, [r7, #0]
 800a6a0:	2600      	movs	r6, #0
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a8:	4e2e      	ldr	r6, [pc, #184]	; (800a764 <_malloc_r+0xe4>)
 800a6aa:	f000 fd81 	bl	800b1b0 <__malloc_lock>
 800a6ae:	6833      	ldr	r3, [r6, #0]
 800a6b0:	461c      	mov	r4, r3
 800a6b2:	bb34      	cbnz	r4, 800a702 <_malloc_r+0x82>
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	f7ff ffc2 	bl	800a640 <sbrk_aligned>
 800a6bc:	1c43      	adds	r3, r0, #1
 800a6be:	4604      	mov	r4, r0
 800a6c0:	d14d      	bne.n	800a75e <_malloc_r+0xde>
 800a6c2:	6834      	ldr	r4, [r6, #0]
 800a6c4:	4626      	mov	r6, r4
 800a6c6:	2e00      	cmp	r6, #0
 800a6c8:	d140      	bne.n	800a74c <_malloc_r+0xcc>
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4638      	mov	r0, r7
 800a6d0:	eb04 0803 	add.w	r8, r4, r3
 800a6d4:	f000 fc92 	bl	800affc <_sbrk_r>
 800a6d8:	4580      	cmp	r8, r0
 800a6da:	d13a      	bne.n	800a752 <_malloc_r+0xd2>
 800a6dc:	6821      	ldr	r1, [r4, #0]
 800a6de:	3503      	adds	r5, #3
 800a6e0:	1a6d      	subs	r5, r5, r1
 800a6e2:	f025 0503 	bic.w	r5, r5, #3
 800a6e6:	3508      	adds	r5, #8
 800a6e8:	2d0c      	cmp	r5, #12
 800a6ea:	bf38      	it	cc
 800a6ec:	250c      	movcc	r5, #12
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	f7ff ffa5 	bl	800a640 <sbrk_aligned>
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	d02b      	beq.n	800a752 <_malloc_r+0xd2>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	442b      	add	r3, r5
 800a6fe:	6023      	str	r3, [r4, #0]
 800a700:	e00e      	b.n	800a720 <_malloc_r+0xa0>
 800a702:	6822      	ldr	r2, [r4, #0]
 800a704:	1b52      	subs	r2, r2, r5
 800a706:	d41e      	bmi.n	800a746 <_malloc_r+0xc6>
 800a708:	2a0b      	cmp	r2, #11
 800a70a:	d916      	bls.n	800a73a <_malloc_r+0xba>
 800a70c:	1961      	adds	r1, r4, r5
 800a70e:	42a3      	cmp	r3, r4
 800a710:	6025      	str	r5, [r4, #0]
 800a712:	bf18      	it	ne
 800a714:	6059      	strne	r1, [r3, #4]
 800a716:	6863      	ldr	r3, [r4, #4]
 800a718:	bf08      	it	eq
 800a71a:	6031      	streq	r1, [r6, #0]
 800a71c:	5162      	str	r2, [r4, r5]
 800a71e:	604b      	str	r3, [r1, #4]
 800a720:	4638      	mov	r0, r7
 800a722:	f104 060b 	add.w	r6, r4, #11
 800a726:	f000 fd49 	bl	800b1bc <__malloc_unlock>
 800a72a:	f026 0607 	bic.w	r6, r6, #7
 800a72e:	1d23      	adds	r3, r4, #4
 800a730:	1af2      	subs	r2, r6, r3
 800a732:	d0b6      	beq.n	800a6a2 <_malloc_r+0x22>
 800a734:	1b9b      	subs	r3, r3, r6
 800a736:	50a3      	str	r3, [r4, r2]
 800a738:	e7b3      	b.n	800a6a2 <_malloc_r+0x22>
 800a73a:	6862      	ldr	r2, [r4, #4]
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	bf0c      	ite	eq
 800a740:	6032      	streq	r2, [r6, #0]
 800a742:	605a      	strne	r2, [r3, #4]
 800a744:	e7ec      	b.n	800a720 <_malloc_r+0xa0>
 800a746:	4623      	mov	r3, r4
 800a748:	6864      	ldr	r4, [r4, #4]
 800a74a:	e7b2      	b.n	800a6b2 <_malloc_r+0x32>
 800a74c:	4634      	mov	r4, r6
 800a74e:	6876      	ldr	r6, [r6, #4]
 800a750:	e7b9      	b.n	800a6c6 <_malloc_r+0x46>
 800a752:	230c      	movs	r3, #12
 800a754:	603b      	str	r3, [r7, #0]
 800a756:	4638      	mov	r0, r7
 800a758:	f000 fd30 	bl	800b1bc <__malloc_unlock>
 800a75c:	e7a1      	b.n	800a6a2 <_malloc_r+0x22>
 800a75e:	6025      	str	r5, [r4, #0]
 800a760:	e7de      	b.n	800a720 <_malloc_r+0xa0>
 800a762:	bf00      	nop
 800a764:	20002990 	.word	0x20002990

0800a768 <__ssputs_r>:
 800a768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a76c:	688e      	ldr	r6, [r1, #8]
 800a76e:	429e      	cmp	r6, r3
 800a770:	4682      	mov	sl, r0
 800a772:	460c      	mov	r4, r1
 800a774:	4690      	mov	r8, r2
 800a776:	461f      	mov	r7, r3
 800a778:	d838      	bhi.n	800a7ec <__ssputs_r+0x84>
 800a77a:	898a      	ldrh	r2, [r1, #12]
 800a77c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a780:	d032      	beq.n	800a7e8 <__ssputs_r+0x80>
 800a782:	6825      	ldr	r5, [r4, #0]
 800a784:	6909      	ldr	r1, [r1, #16]
 800a786:	eba5 0901 	sub.w	r9, r5, r1
 800a78a:	6965      	ldr	r5, [r4, #20]
 800a78c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a790:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a794:	3301      	adds	r3, #1
 800a796:	444b      	add	r3, r9
 800a798:	106d      	asrs	r5, r5, #1
 800a79a:	429d      	cmp	r5, r3
 800a79c:	bf38      	it	cc
 800a79e:	461d      	movcc	r5, r3
 800a7a0:	0553      	lsls	r3, r2, #21
 800a7a2:	d531      	bpl.n	800a808 <__ssputs_r+0xa0>
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	f7ff ff6b 	bl	800a680 <_malloc_r>
 800a7aa:	4606      	mov	r6, r0
 800a7ac:	b950      	cbnz	r0, 800a7c4 <__ssputs_r+0x5c>
 800a7ae:	230c      	movs	r3, #12
 800a7b0:	f8ca 3000 	str.w	r3, [sl]
 800a7b4:	89a3      	ldrh	r3, [r4, #12]
 800a7b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ba:	81a3      	strh	r3, [r4, #12]
 800a7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c4:	6921      	ldr	r1, [r4, #16]
 800a7c6:	464a      	mov	r2, r9
 800a7c8:	f000 fcca 	bl	800b160 <memcpy>
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d6:	81a3      	strh	r3, [r4, #12]
 800a7d8:	6126      	str	r6, [r4, #16]
 800a7da:	6165      	str	r5, [r4, #20]
 800a7dc:	444e      	add	r6, r9
 800a7de:	eba5 0509 	sub.w	r5, r5, r9
 800a7e2:	6026      	str	r6, [r4, #0]
 800a7e4:	60a5      	str	r5, [r4, #8]
 800a7e6:	463e      	mov	r6, r7
 800a7e8:	42be      	cmp	r6, r7
 800a7ea:	d900      	bls.n	800a7ee <__ssputs_r+0x86>
 800a7ec:	463e      	mov	r6, r7
 800a7ee:	6820      	ldr	r0, [r4, #0]
 800a7f0:	4632      	mov	r2, r6
 800a7f2:	4641      	mov	r1, r8
 800a7f4:	f000 fcc2 	bl	800b17c <memmove>
 800a7f8:	68a3      	ldr	r3, [r4, #8]
 800a7fa:	1b9b      	subs	r3, r3, r6
 800a7fc:	60a3      	str	r3, [r4, #8]
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	4433      	add	r3, r6
 800a802:	6023      	str	r3, [r4, #0]
 800a804:	2000      	movs	r0, #0
 800a806:	e7db      	b.n	800a7c0 <__ssputs_r+0x58>
 800a808:	462a      	mov	r2, r5
 800a80a:	f000 fcdd 	bl	800b1c8 <_realloc_r>
 800a80e:	4606      	mov	r6, r0
 800a810:	2800      	cmp	r0, #0
 800a812:	d1e1      	bne.n	800a7d8 <__ssputs_r+0x70>
 800a814:	6921      	ldr	r1, [r4, #16]
 800a816:	4650      	mov	r0, sl
 800a818:	f7ff fec6 	bl	800a5a8 <_free_r>
 800a81c:	e7c7      	b.n	800a7ae <__ssputs_r+0x46>
	...

0800a820 <_svfiprintf_r>:
 800a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a824:	4698      	mov	r8, r3
 800a826:	898b      	ldrh	r3, [r1, #12]
 800a828:	061b      	lsls	r3, r3, #24
 800a82a:	b09d      	sub	sp, #116	; 0x74
 800a82c:	4607      	mov	r7, r0
 800a82e:	460d      	mov	r5, r1
 800a830:	4614      	mov	r4, r2
 800a832:	d50e      	bpl.n	800a852 <_svfiprintf_r+0x32>
 800a834:	690b      	ldr	r3, [r1, #16]
 800a836:	b963      	cbnz	r3, 800a852 <_svfiprintf_r+0x32>
 800a838:	2140      	movs	r1, #64	; 0x40
 800a83a:	f7ff ff21 	bl	800a680 <_malloc_r>
 800a83e:	6028      	str	r0, [r5, #0]
 800a840:	6128      	str	r0, [r5, #16]
 800a842:	b920      	cbnz	r0, 800a84e <_svfiprintf_r+0x2e>
 800a844:	230c      	movs	r3, #12
 800a846:	603b      	str	r3, [r7, #0]
 800a848:	f04f 30ff 	mov.w	r0, #4294967295
 800a84c:	e0d1      	b.n	800a9f2 <_svfiprintf_r+0x1d2>
 800a84e:	2340      	movs	r3, #64	; 0x40
 800a850:	616b      	str	r3, [r5, #20]
 800a852:	2300      	movs	r3, #0
 800a854:	9309      	str	r3, [sp, #36]	; 0x24
 800a856:	2320      	movs	r3, #32
 800a858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a85c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a860:	2330      	movs	r3, #48	; 0x30
 800a862:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aa0c <_svfiprintf_r+0x1ec>
 800a866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a86a:	f04f 0901 	mov.w	r9, #1
 800a86e:	4623      	mov	r3, r4
 800a870:	469a      	mov	sl, r3
 800a872:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a876:	b10a      	cbz	r2, 800a87c <_svfiprintf_r+0x5c>
 800a878:	2a25      	cmp	r2, #37	; 0x25
 800a87a:	d1f9      	bne.n	800a870 <_svfiprintf_r+0x50>
 800a87c:	ebba 0b04 	subs.w	fp, sl, r4
 800a880:	d00b      	beq.n	800a89a <_svfiprintf_r+0x7a>
 800a882:	465b      	mov	r3, fp
 800a884:	4622      	mov	r2, r4
 800a886:	4629      	mov	r1, r5
 800a888:	4638      	mov	r0, r7
 800a88a:	f7ff ff6d 	bl	800a768 <__ssputs_r>
 800a88e:	3001      	adds	r0, #1
 800a890:	f000 80aa 	beq.w	800a9e8 <_svfiprintf_r+0x1c8>
 800a894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a896:	445a      	add	r2, fp
 800a898:	9209      	str	r2, [sp, #36]	; 0x24
 800a89a:	f89a 3000 	ldrb.w	r3, [sl]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f000 80a2 	beq.w	800a9e8 <_svfiprintf_r+0x1c8>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8ae:	f10a 0a01 	add.w	sl, sl, #1
 800a8b2:	9304      	str	r3, [sp, #16]
 800a8b4:	9307      	str	r3, [sp, #28]
 800a8b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a8bc:	4654      	mov	r4, sl
 800a8be:	2205      	movs	r2, #5
 800a8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c4:	4851      	ldr	r0, [pc, #324]	; (800aa0c <_svfiprintf_r+0x1ec>)
 800a8c6:	f7f5 fc83 	bl	80001d0 <memchr>
 800a8ca:	9a04      	ldr	r2, [sp, #16]
 800a8cc:	b9d8      	cbnz	r0, 800a906 <_svfiprintf_r+0xe6>
 800a8ce:	06d0      	lsls	r0, r2, #27
 800a8d0:	bf44      	itt	mi
 800a8d2:	2320      	movmi	r3, #32
 800a8d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8d8:	0711      	lsls	r1, r2, #28
 800a8da:	bf44      	itt	mi
 800a8dc:	232b      	movmi	r3, #43	; 0x2b
 800a8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a8e8:	d015      	beq.n	800a916 <_svfiprintf_r+0xf6>
 800a8ea:	9a07      	ldr	r2, [sp, #28]
 800a8ec:	4654      	mov	r4, sl
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	f04f 0c0a 	mov.w	ip, #10
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8fa:	3b30      	subs	r3, #48	; 0x30
 800a8fc:	2b09      	cmp	r3, #9
 800a8fe:	d94e      	bls.n	800a99e <_svfiprintf_r+0x17e>
 800a900:	b1b0      	cbz	r0, 800a930 <_svfiprintf_r+0x110>
 800a902:	9207      	str	r2, [sp, #28]
 800a904:	e014      	b.n	800a930 <_svfiprintf_r+0x110>
 800a906:	eba0 0308 	sub.w	r3, r0, r8
 800a90a:	fa09 f303 	lsl.w	r3, r9, r3
 800a90e:	4313      	orrs	r3, r2
 800a910:	9304      	str	r3, [sp, #16]
 800a912:	46a2      	mov	sl, r4
 800a914:	e7d2      	b.n	800a8bc <_svfiprintf_r+0x9c>
 800a916:	9b03      	ldr	r3, [sp, #12]
 800a918:	1d19      	adds	r1, r3, #4
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	9103      	str	r1, [sp, #12]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	bfbb      	ittet	lt
 800a922:	425b      	neglt	r3, r3
 800a924:	f042 0202 	orrlt.w	r2, r2, #2
 800a928:	9307      	strge	r3, [sp, #28]
 800a92a:	9307      	strlt	r3, [sp, #28]
 800a92c:	bfb8      	it	lt
 800a92e:	9204      	strlt	r2, [sp, #16]
 800a930:	7823      	ldrb	r3, [r4, #0]
 800a932:	2b2e      	cmp	r3, #46	; 0x2e
 800a934:	d10c      	bne.n	800a950 <_svfiprintf_r+0x130>
 800a936:	7863      	ldrb	r3, [r4, #1]
 800a938:	2b2a      	cmp	r3, #42	; 0x2a
 800a93a:	d135      	bne.n	800a9a8 <_svfiprintf_r+0x188>
 800a93c:	9b03      	ldr	r3, [sp, #12]
 800a93e:	1d1a      	adds	r2, r3, #4
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	9203      	str	r2, [sp, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	bfb8      	it	lt
 800a948:	f04f 33ff 	movlt.w	r3, #4294967295
 800a94c:	3402      	adds	r4, #2
 800a94e:	9305      	str	r3, [sp, #20]
 800a950:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa1c <_svfiprintf_r+0x1fc>
 800a954:	7821      	ldrb	r1, [r4, #0]
 800a956:	2203      	movs	r2, #3
 800a958:	4650      	mov	r0, sl
 800a95a:	f7f5 fc39 	bl	80001d0 <memchr>
 800a95e:	b140      	cbz	r0, 800a972 <_svfiprintf_r+0x152>
 800a960:	2340      	movs	r3, #64	; 0x40
 800a962:	eba0 000a 	sub.w	r0, r0, sl
 800a966:	fa03 f000 	lsl.w	r0, r3, r0
 800a96a:	9b04      	ldr	r3, [sp, #16]
 800a96c:	4303      	orrs	r3, r0
 800a96e:	3401      	adds	r4, #1
 800a970:	9304      	str	r3, [sp, #16]
 800a972:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a976:	4826      	ldr	r0, [pc, #152]	; (800aa10 <_svfiprintf_r+0x1f0>)
 800a978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a97c:	2206      	movs	r2, #6
 800a97e:	f7f5 fc27 	bl	80001d0 <memchr>
 800a982:	2800      	cmp	r0, #0
 800a984:	d038      	beq.n	800a9f8 <_svfiprintf_r+0x1d8>
 800a986:	4b23      	ldr	r3, [pc, #140]	; (800aa14 <_svfiprintf_r+0x1f4>)
 800a988:	bb1b      	cbnz	r3, 800a9d2 <_svfiprintf_r+0x1b2>
 800a98a:	9b03      	ldr	r3, [sp, #12]
 800a98c:	3307      	adds	r3, #7
 800a98e:	f023 0307 	bic.w	r3, r3, #7
 800a992:	3308      	adds	r3, #8
 800a994:	9303      	str	r3, [sp, #12]
 800a996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a998:	4433      	add	r3, r6
 800a99a:	9309      	str	r3, [sp, #36]	; 0x24
 800a99c:	e767      	b.n	800a86e <_svfiprintf_r+0x4e>
 800a99e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	2001      	movs	r0, #1
 800a9a6:	e7a5      	b.n	800a8f4 <_svfiprintf_r+0xd4>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	3401      	adds	r4, #1
 800a9ac:	9305      	str	r3, [sp, #20]
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	f04f 0c0a 	mov.w	ip, #10
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ba:	3a30      	subs	r2, #48	; 0x30
 800a9bc:	2a09      	cmp	r2, #9
 800a9be:	d903      	bls.n	800a9c8 <_svfiprintf_r+0x1a8>
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d0c5      	beq.n	800a950 <_svfiprintf_r+0x130>
 800a9c4:	9105      	str	r1, [sp, #20]
 800a9c6:	e7c3      	b.n	800a950 <_svfiprintf_r+0x130>
 800a9c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e7f0      	b.n	800a9b4 <_svfiprintf_r+0x194>
 800a9d2:	ab03      	add	r3, sp, #12
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	462a      	mov	r2, r5
 800a9d8:	4b0f      	ldr	r3, [pc, #60]	; (800aa18 <_svfiprintf_r+0x1f8>)
 800a9da:	a904      	add	r1, sp, #16
 800a9dc:	4638      	mov	r0, r7
 800a9de:	f3af 8000 	nop.w
 800a9e2:	1c42      	adds	r2, r0, #1
 800a9e4:	4606      	mov	r6, r0
 800a9e6:	d1d6      	bne.n	800a996 <_svfiprintf_r+0x176>
 800a9e8:	89ab      	ldrh	r3, [r5, #12]
 800a9ea:	065b      	lsls	r3, r3, #25
 800a9ec:	f53f af2c 	bmi.w	800a848 <_svfiprintf_r+0x28>
 800a9f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9f2:	b01d      	add	sp, #116	; 0x74
 800a9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f8:	ab03      	add	r3, sp, #12
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	462a      	mov	r2, r5
 800a9fe:	4b06      	ldr	r3, [pc, #24]	; (800aa18 <_svfiprintf_r+0x1f8>)
 800aa00:	a904      	add	r1, sp, #16
 800aa02:	4638      	mov	r0, r7
 800aa04:	f000 f9d4 	bl	800adb0 <_printf_i>
 800aa08:	e7eb      	b.n	800a9e2 <_svfiprintf_r+0x1c2>
 800aa0a:	bf00      	nop
 800aa0c:	0800cffc 	.word	0x0800cffc
 800aa10:	0800d006 	.word	0x0800d006
 800aa14:	00000000 	.word	0x00000000
 800aa18:	0800a769 	.word	0x0800a769
 800aa1c:	0800d002 	.word	0x0800d002

0800aa20 <__sfputc_r>:
 800aa20:	6893      	ldr	r3, [r2, #8]
 800aa22:	3b01      	subs	r3, #1
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	b410      	push	{r4}
 800aa28:	6093      	str	r3, [r2, #8]
 800aa2a:	da08      	bge.n	800aa3e <__sfputc_r+0x1e>
 800aa2c:	6994      	ldr	r4, [r2, #24]
 800aa2e:	42a3      	cmp	r3, r4
 800aa30:	db01      	blt.n	800aa36 <__sfputc_r+0x16>
 800aa32:	290a      	cmp	r1, #10
 800aa34:	d103      	bne.n	800aa3e <__sfputc_r+0x1e>
 800aa36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa3a:	f7ff ba9d 	b.w	8009f78 <__swbuf_r>
 800aa3e:	6813      	ldr	r3, [r2, #0]
 800aa40:	1c58      	adds	r0, r3, #1
 800aa42:	6010      	str	r0, [r2, #0]
 800aa44:	7019      	strb	r1, [r3, #0]
 800aa46:	4608      	mov	r0, r1
 800aa48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa4c:	4770      	bx	lr

0800aa4e <__sfputs_r>:
 800aa4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa50:	4606      	mov	r6, r0
 800aa52:	460f      	mov	r7, r1
 800aa54:	4614      	mov	r4, r2
 800aa56:	18d5      	adds	r5, r2, r3
 800aa58:	42ac      	cmp	r4, r5
 800aa5a:	d101      	bne.n	800aa60 <__sfputs_r+0x12>
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	e007      	b.n	800aa70 <__sfputs_r+0x22>
 800aa60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa64:	463a      	mov	r2, r7
 800aa66:	4630      	mov	r0, r6
 800aa68:	f7ff ffda 	bl	800aa20 <__sfputc_r>
 800aa6c:	1c43      	adds	r3, r0, #1
 800aa6e:	d1f3      	bne.n	800aa58 <__sfputs_r+0xa>
 800aa70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa74 <_vfiprintf_r>:
 800aa74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa78:	460d      	mov	r5, r1
 800aa7a:	b09d      	sub	sp, #116	; 0x74
 800aa7c:	4614      	mov	r4, r2
 800aa7e:	4698      	mov	r8, r3
 800aa80:	4606      	mov	r6, r0
 800aa82:	b118      	cbz	r0, 800aa8c <_vfiprintf_r+0x18>
 800aa84:	6983      	ldr	r3, [r0, #24]
 800aa86:	b90b      	cbnz	r3, 800aa8c <_vfiprintf_r+0x18>
 800aa88:	f7ff fc6e 	bl	800a368 <__sinit>
 800aa8c:	4b89      	ldr	r3, [pc, #548]	; (800acb4 <_vfiprintf_r+0x240>)
 800aa8e:	429d      	cmp	r5, r3
 800aa90:	d11b      	bne.n	800aaca <_vfiprintf_r+0x56>
 800aa92:	6875      	ldr	r5, [r6, #4]
 800aa94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa96:	07d9      	lsls	r1, r3, #31
 800aa98:	d405      	bmi.n	800aaa6 <_vfiprintf_r+0x32>
 800aa9a:	89ab      	ldrh	r3, [r5, #12]
 800aa9c:	059a      	lsls	r2, r3, #22
 800aa9e:	d402      	bmi.n	800aaa6 <_vfiprintf_r+0x32>
 800aaa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaa2:	f7ff fd11 	bl	800a4c8 <__retarget_lock_acquire_recursive>
 800aaa6:	89ab      	ldrh	r3, [r5, #12]
 800aaa8:	071b      	lsls	r3, r3, #28
 800aaaa:	d501      	bpl.n	800aab0 <_vfiprintf_r+0x3c>
 800aaac:	692b      	ldr	r3, [r5, #16]
 800aaae:	b9eb      	cbnz	r3, 800aaec <_vfiprintf_r+0x78>
 800aab0:	4629      	mov	r1, r5
 800aab2:	4630      	mov	r0, r6
 800aab4:	f7ff fab2 	bl	800a01c <__swsetup_r>
 800aab8:	b1c0      	cbz	r0, 800aaec <_vfiprintf_r+0x78>
 800aaba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aabc:	07dc      	lsls	r4, r3, #31
 800aabe:	d50e      	bpl.n	800aade <_vfiprintf_r+0x6a>
 800aac0:	f04f 30ff 	mov.w	r0, #4294967295
 800aac4:	b01d      	add	sp, #116	; 0x74
 800aac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaca:	4b7b      	ldr	r3, [pc, #492]	; (800acb8 <_vfiprintf_r+0x244>)
 800aacc:	429d      	cmp	r5, r3
 800aace:	d101      	bne.n	800aad4 <_vfiprintf_r+0x60>
 800aad0:	68b5      	ldr	r5, [r6, #8]
 800aad2:	e7df      	b.n	800aa94 <_vfiprintf_r+0x20>
 800aad4:	4b79      	ldr	r3, [pc, #484]	; (800acbc <_vfiprintf_r+0x248>)
 800aad6:	429d      	cmp	r5, r3
 800aad8:	bf08      	it	eq
 800aada:	68f5      	ldreq	r5, [r6, #12]
 800aadc:	e7da      	b.n	800aa94 <_vfiprintf_r+0x20>
 800aade:	89ab      	ldrh	r3, [r5, #12]
 800aae0:	0598      	lsls	r0, r3, #22
 800aae2:	d4ed      	bmi.n	800aac0 <_vfiprintf_r+0x4c>
 800aae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aae6:	f7ff fcf0 	bl	800a4ca <__retarget_lock_release_recursive>
 800aaea:	e7e9      	b.n	800aac0 <_vfiprintf_r+0x4c>
 800aaec:	2300      	movs	r3, #0
 800aaee:	9309      	str	r3, [sp, #36]	; 0x24
 800aaf0:	2320      	movs	r3, #32
 800aaf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aaf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aafa:	2330      	movs	r3, #48	; 0x30
 800aafc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800acc0 <_vfiprintf_r+0x24c>
 800ab00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab04:	f04f 0901 	mov.w	r9, #1
 800ab08:	4623      	mov	r3, r4
 800ab0a:	469a      	mov	sl, r3
 800ab0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab10:	b10a      	cbz	r2, 800ab16 <_vfiprintf_r+0xa2>
 800ab12:	2a25      	cmp	r2, #37	; 0x25
 800ab14:	d1f9      	bne.n	800ab0a <_vfiprintf_r+0x96>
 800ab16:	ebba 0b04 	subs.w	fp, sl, r4
 800ab1a:	d00b      	beq.n	800ab34 <_vfiprintf_r+0xc0>
 800ab1c:	465b      	mov	r3, fp
 800ab1e:	4622      	mov	r2, r4
 800ab20:	4629      	mov	r1, r5
 800ab22:	4630      	mov	r0, r6
 800ab24:	f7ff ff93 	bl	800aa4e <__sfputs_r>
 800ab28:	3001      	adds	r0, #1
 800ab2a:	f000 80aa 	beq.w	800ac82 <_vfiprintf_r+0x20e>
 800ab2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab30:	445a      	add	r2, fp
 800ab32:	9209      	str	r2, [sp, #36]	; 0x24
 800ab34:	f89a 3000 	ldrb.w	r3, [sl]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f000 80a2 	beq.w	800ac82 <_vfiprintf_r+0x20e>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	f04f 32ff 	mov.w	r2, #4294967295
 800ab44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab48:	f10a 0a01 	add.w	sl, sl, #1
 800ab4c:	9304      	str	r3, [sp, #16]
 800ab4e:	9307      	str	r3, [sp, #28]
 800ab50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab54:	931a      	str	r3, [sp, #104]	; 0x68
 800ab56:	4654      	mov	r4, sl
 800ab58:	2205      	movs	r2, #5
 800ab5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5e:	4858      	ldr	r0, [pc, #352]	; (800acc0 <_vfiprintf_r+0x24c>)
 800ab60:	f7f5 fb36 	bl	80001d0 <memchr>
 800ab64:	9a04      	ldr	r2, [sp, #16]
 800ab66:	b9d8      	cbnz	r0, 800aba0 <_vfiprintf_r+0x12c>
 800ab68:	06d1      	lsls	r1, r2, #27
 800ab6a:	bf44      	itt	mi
 800ab6c:	2320      	movmi	r3, #32
 800ab6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab72:	0713      	lsls	r3, r2, #28
 800ab74:	bf44      	itt	mi
 800ab76:	232b      	movmi	r3, #43	; 0x2b
 800ab78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab80:	2b2a      	cmp	r3, #42	; 0x2a
 800ab82:	d015      	beq.n	800abb0 <_vfiprintf_r+0x13c>
 800ab84:	9a07      	ldr	r2, [sp, #28]
 800ab86:	4654      	mov	r4, sl
 800ab88:	2000      	movs	r0, #0
 800ab8a:	f04f 0c0a 	mov.w	ip, #10
 800ab8e:	4621      	mov	r1, r4
 800ab90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab94:	3b30      	subs	r3, #48	; 0x30
 800ab96:	2b09      	cmp	r3, #9
 800ab98:	d94e      	bls.n	800ac38 <_vfiprintf_r+0x1c4>
 800ab9a:	b1b0      	cbz	r0, 800abca <_vfiprintf_r+0x156>
 800ab9c:	9207      	str	r2, [sp, #28]
 800ab9e:	e014      	b.n	800abca <_vfiprintf_r+0x156>
 800aba0:	eba0 0308 	sub.w	r3, r0, r8
 800aba4:	fa09 f303 	lsl.w	r3, r9, r3
 800aba8:	4313      	orrs	r3, r2
 800abaa:	9304      	str	r3, [sp, #16]
 800abac:	46a2      	mov	sl, r4
 800abae:	e7d2      	b.n	800ab56 <_vfiprintf_r+0xe2>
 800abb0:	9b03      	ldr	r3, [sp, #12]
 800abb2:	1d19      	adds	r1, r3, #4
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	9103      	str	r1, [sp, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	bfbb      	ittet	lt
 800abbc:	425b      	neglt	r3, r3
 800abbe:	f042 0202 	orrlt.w	r2, r2, #2
 800abc2:	9307      	strge	r3, [sp, #28]
 800abc4:	9307      	strlt	r3, [sp, #28]
 800abc6:	bfb8      	it	lt
 800abc8:	9204      	strlt	r2, [sp, #16]
 800abca:	7823      	ldrb	r3, [r4, #0]
 800abcc:	2b2e      	cmp	r3, #46	; 0x2e
 800abce:	d10c      	bne.n	800abea <_vfiprintf_r+0x176>
 800abd0:	7863      	ldrb	r3, [r4, #1]
 800abd2:	2b2a      	cmp	r3, #42	; 0x2a
 800abd4:	d135      	bne.n	800ac42 <_vfiprintf_r+0x1ce>
 800abd6:	9b03      	ldr	r3, [sp, #12]
 800abd8:	1d1a      	adds	r2, r3, #4
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	9203      	str	r2, [sp, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	bfb8      	it	lt
 800abe2:	f04f 33ff 	movlt.w	r3, #4294967295
 800abe6:	3402      	adds	r4, #2
 800abe8:	9305      	str	r3, [sp, #20]
 800abea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800acd0 <_vfiprintf_r+0x25c>
 800abee:	7821      	ldrb	r1, [r4, #0]
 800abf0:	2203      	movs	r2, #3
 800abf2:	4650      	mov	r0, sl
 800abf4:	f7f5 faec 	bl	80001d0 <memchr>
 800abf8:	b140      	cbz	r0, 800ac0c <_vfiprintf_r+0x198>
 800abfa:	2340      	movs	r3, #64	; 0x40
 800abfc:	eba0 000a 	sub.w	r0, r0, sl
 800ac00:	fa03 f000 	lsl.w	r0, r3, r0
 800ac04:	9b04      	ldr	r3, [sp, #16]
 800ac06:	4303      	orrs	r3, r0
 800ac08:	3401      	adds	r4, #1
 800ac0a:	9304      	str	r3, [sp, #16]
 800ac0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac10:	482c      	ldr	r0, [pc, #176]	; (800acc4 <_vfiprintf_r+0x250>)
 800ac12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac16:	2206      	movs	r2, #6
 800ac18:	f7f5 fada 	bl	80001d0 <memchr>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d03f      	beq.n	800aca0 <_vfiprintf_r+0x22c>
 800ac20:	4b29      	ldr	r3, [pc, #164]	; (800acc8 <_vfiprintf_r+0x254>)
 800ac22:	bb1b      	cbnz	r3, 800ac6c <_vfiprintf_r+0x1f8>
 800ac24:	9b03      	ldr	r3, [sp, #12]
 800ac26:	3307      	adds	r3, #7
 800ac28:	f023 0307 	bic.w	r3, r3, #7
 800ac2c:	3308      	adds	r3, #8
 800ac2e:	9303      	str	r3, [sp, #12]
 800ac30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac32:	443b      	add	r3, r7
 800ac34:	9309      	str	r3, [sp, #36]	; 0x24
 800ac36:	e767      	b.n	800ab08 <_vfiprintf_r+0x94>
 800ac38:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	2001      	movs	r0, #1
 800ac40:	e7a5      	b.n	800ab8e <_vfiprintf_r+0x11a>
 800ac42:	2300      	movs	r3, #0
 800ac44:	3401      	adds	r4, #1
 800ac46:	9305      	str	r3, [sp, #20]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	f04f 0c0a 	mov.w	ip, #10
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac54:	3a30      	subs	r2, #48	; 0x30
 800ac56:	2a09      	cmp	r2, #9
 800ac58:	d903      	bls.n	800ac62 <_vfiprintf_r+0x1ee>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d0c5      	beq.n	800abea <_vfiprintf_r+0x176>
 800ac5e:	9105      	str	r1, [sp, #20]
 800ac60:	e7c3      	b.n	800abea <_vfiprintf_r+0x176>
 800ac62:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac66:	4604      	mov	r4, r0
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e7f0      	b.n	800ac4e <_vfiprintf_r+0x1da>
 800ac6c:	ab03      	add	r3, sp, #12
 800ac6e:	9300      	str	r3, [sp, #0]
 800ac70:	462a      	mov	r2, r5
 800ac72:	4b16      	ldr	r3, [pc, #88]	; (800accc <_vfiprintf_r+0x258>)
 800ac74:	a904      	add	r1, sp, #16
 800ac76:	4630      	mov	r0, r6
 800ac78:	f3af 8000 	nop.w
 800ac7c:	4607      	mov	r7, r0
 800ac7e:	1c78      	adds	r0, r7, #1
 800ac80:	d1d6      	bne.n	800ac30 <_vfiprintf_r+0x1bc>
 800ac82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac84:	07d9      	lsls	r1, r3, #31
 800ac86:	d405      	bmi.n	800ac94 <_vfiprintf_r+0x220>
 800ac88:	89ab      	ldrh	r3, [r5, #12]
 800ac8a:	059a      	lsls	r2, r3, #22
 800ac8c:	d402      	bmi.n	800ac94 <_vfiprintf_r+0x220>
 800ac8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac90:	f7ff fc1b 	bl	800a4ca <__retarget_lock_release_recursive>
 800ac94:	89ab      	ldrh	r3, [r5, #12]
 800ac96:	065b      	lsls	r3, r3, #25
 800ac98:	f53f af12 	bmi.w	800aac0 <_vfiprintf_r+0x4c>
 800ac9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac9e:	e711      	b.n	800aac4 <_vfiprintf_r+0x50>
 800aca0:	ab03      	add	r3, sp, #12
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	462a      	mov	r2, r5
 800aca6:	4b09      	ldr	r3, [pc, #36]	; (800accc <_vfiprintf_r+0x258>)
 800aca8:	a904      	add	r1, sp, #16
 800acaa:	4630      	mov	r0, r6
 800acac:	f000 f880 	bl	800adb0 <_printf_i>
 800acb0:	e7e4      	b.n	800ac7c <_vfiprintf_r+0x208>
 800acb2:	bf00      	nop
 800acb4:	0800cfbc 	.word	0x0800cfbc
 800acb8:	0800cfdc 	.word	0x0800cfdc
 800acbc:	0800cf9c 	.word	0x0800cf9c
 800acc0:	0800cffc 	.word	0x0800cffc
 800acc4:	0800d006 	.word	0x0800d006
 800acc8:	00000000 	.word	0x00000000
 800accc:	0800aa4f 	.word	0x0800aa4f
 800acd0:	0800d002 	.word	0x0800d002

0800acd4 <_printf_common>:
 800acd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd8:	4616      	mov	r6, r2
 800acda:	4699      	mov	r9, r3
 800acdc:	688a      	ldr	r2, [r1, #8]
 800acde:	690b      	ldr	r3, [r1, #16]
 800ace0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ace4:	4293      	cmp	r3, r2
 800ace6:	bfb8      	it	lt
 800ace8:	4613      	movlt	r3, r2
 800acea:	6033      	str	r3, [r6, #0]
 800acec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acf0:	4607      	mov	r7, r0
 800acf2:	460c      	mov	r4, r1
 800acf4:	b10a      	cbz	r2, 800acfa <_printf_common+0x26>
 800acf6:	3301      	adds	r3, #1
 800acf8:	6033      	str	r3, [r6, #0]
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	0699      	lsls	r1, r3, #26
 800acfe:	bf42      	ittt	mi
 800ad00:	6833      	ldrmi	r3, [r6, #0]
 800ad02:	3302      	addmi	r3, #2
 800ad04:	6033      	strmi	r3, [r6, #0]
 800ad06:	6825      	ldr	r5, [r4, #0]
 800ad08:	f015 0506 	ands.w	r5, r5, #6
 800ad0c:	d106      	bne.n	800ad1c <_printf_common+0x48>
 800ad0e:	f104 0a19 	add.w	sl, r4, #25
 800ad12:	68e3      	ldr	r3, [r4, #12]
 800ad14:	6832      	ldr	r2, [r6, #0]
 800ad16:	1a9b      	subs	r3, r3, r2
 800ad18:	42ab      	cmp	r3, r5
 800ad1a:	dc26      	bgt.n	800ad6a <_printf_common+0x96>
 800ad1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad20:	1e13      	subs	r3, r2, #0
 800ad22:	6822      	ldr	r2, [r4, #0]
 800ad24:	bf18      	it	ne
 800ad26:	2301      	movne	r3, #1
 800ad28:	0692      	lsls	r2, r2, #26
 800ad2a:	d42b      	bmi.n	800ad84 <_printf_common+0xb0>
 800ad2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad30:	4649      	mov	r1, r9
 800ad32:	4638      	mov	r0, r7
 800ad34:	47c0      	blx	r8
 800ad36:	3001      	adds	r0, #1
 800ad38:	d01e      	beq.n	800ad78 <_printf_common+0xa4>
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	68e5      	ldr	r5, [r4, #12]
 800ad3e:	6832      	ldr	r2, [r6, #0]
 800ad40:	f003 0306 	and.w	r3, r3, #6
 800ad44:	2b04      	cmp	r3, #4
 800ad46:	bf08      	it	eq
 800ad48:	1aad      	subeq	r5, r5, r2
 800ad4a:	68a3      	ldr	r3, [r4, #8]
 800ad4c:	6922      	ldr	r2, [r4, #16]
 800ad4e:	bf0c      	ite	eq
 800ad50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad54:	2500      	movne	r5, #0
 800ad56:	4293      	cmp	r3, r2
 800ad58:	bfc4      	itt	gt
 800ad5a:	1a9b      	subgt	r3, r3, r2
 800ad5c:	18ed      	addgt	r5, r5, r3
 800ad5e:	2600      	movs	r6, #0
 800ad60:	341a      	adds	r4, #26
 800ad62:	42b5      	cmp	r5, r6
 800ad64:	d11a      	bne.n	800ad9c <_printf_common+0xc8>
 800ad66:	2000      	movs	r0, #0
 800ad68:	e008      	b.n	800ad7c <_printf_common+0xa8>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	4652      	mov	r2, sl
 800ad6e:	4649      	mov	r1, r9
 800ad70:	4638      	mov	r0, r7
 800ad72:	47c0      	blx	r8
 800ad74:	3001      	adds	r0, #1
 800ad76:	d103      	bne.n	800ad80 <_printf_common+0xac>
 800ad78:	f04f 30ff 	mov.w	r0, #4294967295
 800ad7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad80:	3501      	adds	r5, #1
 800ad82:	e7c6      	b.n	800ad12 <_printf_common+0x3e>
 800ad84:	18e1      	adds	r1, r4, r3
 800ad86:	1c5a      	adds	r2, r3, #1
 800ad88:	2030      	movs	r0, #48	; 0x30
 800ad8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad8e:	4422      	add	r2, r4
 800ad90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad98:	3302      	adds	r3, #2
 800ad9a:	e7c7      	b.n	800ad2c <_printf_common+0x58>
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	4622      	mov	r2, r4
 800ada0:	4649      	mov	r1, r9
 800ada2:	4638      	mov	r0, r7
 800ada4:	47c0      	blx	r8
 800ada6:	3001      	adds	r0, #1
 800ada8:	d0e6      	beq.n	800ad78 <_printf_common+0xa4>
 800adaa:	3601      	adds	r6, #1
 800adac:	e7d9      	b.n	800ad62 <_printf_common+0x8e>
	...

0800adb0 <_printf_i>:
 800adb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adb4:	7e0f      	ldrb	r7, [r1, #24]
 800adb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800adb8:	2f78      	cmp	r7, #120	; 0x78
 800adba:	4691      	mov	r9, r2
 800adbc:	4680      	mov	r8, r0
 800adbe:	460c      	mov	r4, r1
 800adc0:	469a      	mov	sl, r3
 800adc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800adc6:	d807      	bhi.n	800add8 <_printf_i+0x28>
 800adc8:	2f62      	cmp	r7, #98	; 0x62
 800adca:	d80a      	bhi.n	800ade2 <_printf_i+0x32>
 800adcc:	2f00      	cmp	r7, #0
 800adce:	f000 80d8 	beq.w	800af82 <_printf_i+0x1d2>
 800add2:	2f58      	cmp	r7, #88	; 0x58
 800add4:	f000 80a3 	beq.w	800af1e <_printf_i+0x16e>
 800add8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800addc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ade0:	e03a      	b.n	800ae58 <_printf_i+0xa8>
 800ade2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ade6:	2b15      	cmp	r3, #21
 800ade8:	d8f6      	bhi.n	800add8 <_printf_i+0x28>
 800adea:	a101      	add	r1, pc, #4	; (adr r1, 800adf0 <_printf_i+0x40>)
 800adec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800adf0:	0800ae49 	.word	0x0800ae49
 800adf4:	0800ae5d 	.word	0x0800ae5d
 800adf8:	0800add9 	.word	0x0800add9
 800adfc:	0800add9 	.word	0x0800add9
 800ae00:	0800add9 	.word	0x0800add9
 800ae04:	0800add9 	.word	0x0800add9
 800ae08:	0800ae5d 	.word	0x0800ae5d
 800ae0c:	0800add9 	.word	0x0800add9
 800ae10:	0800add9 	.word	0x0800add9
 800ae14:	0800add9 	.word	0x0800add9
 800ae18:	0800add9 	.word	0x0800add9
 800ae1c:	0800af69 	.word	0x0800af69
 800ae20:	0800ae8d 	.word	0x0800ae8d
 800ae24:	0800af4b 	.word	0x0800af4b
 800ae28:	0800add9 	.word	0x0800add9
 800ae2c:	0800add9 	.word	0x0800add9
 800ae30:	0800af8b 	.word	0x0800af8b
 800ae34:	0800add9 	.word	0x0800add9
 800ae38:	0800ae8d 	.word	0x0800ae8d
 800ae3c:	0800add9 	.word	0x0800add9
 800ae40:	0800add9 	.word	0x0800add9
 800ae44:	0800af53 	.word	0x0800af53
 800ae48:	682b      	ldr	r3, [r5, #0]
 800ae4a:	1d1a      	adds	r2, r3, #4
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	602a      	str	r2, [r5, #0]
 800ae50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e0a3      	b.n	800afa4 <_printf_i+0x1f4>
 800ae5c:	6820      	ldr	r0, [r4, #0]
 800ae5e:	6829      	ldr	r1, [r5, #0]
 800ae60:	0606      	lsls	r6, r0, #24
 800ae62:	f101 0304 	add.w	r3, r1, #4
 800ae66:	d50a      	bpl.n	800ae7e <_printf_i+0xce>
 800ae68:	680e      	ldr	r6, [r1, #0]
 800ae6a:	602b      	str	r3, [r5, #0]
 800ae6c:	2e00      	cmp	r6, #0
 800ae6e:	da03      	bge.n	800ae78 <_printf_i+0xc8>
 800ae70:	232d      	movs	r3, #45	; 0x2d
 800ae72:	4276      	negs	r6, r6
 800ae74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae78:	485e      	ldr	r0, [pc, #376]	; (800aff4 <_printf_i+0x244>)
 800ae7a:	230a      	movs	r3, #10
 800ae7c:	e019      	b.n	800aeb2 <_printf_i+0x102>
 800ae7e:	680e      	ldr	r6, [r1, #0]
 800ae80:	602b      	str	r3, [r5, #0]
 800ae82:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae86:	bf18      	it	ne
 800ae88:	b236      	sxthne	r6, r6
 800ae8a:	e7ef      	b.n	800ae6c <_printf_i+0xbc>
 800ae8c:	682b      	ldr	r3, [r5, #0]
 800ae8e:	6820      	ldr	r0, [r4, #0]
 800ae90:	1d19      	adds	r1, r3, #4
 800ae92:	6029      	str	r1, [r5, #0]
 800ae94:	0601      	lsls	r1, r0, #24
 800ae96:	d501      	bpl.n	800ae9c <_printf_i+0xec>
 800ae98:	681e      	ldr	r6, [r3, #0]
 800ae9a:	e002      	b.n	800aea2 <_printf_i+0xf2>
 800ae9c:	0646      	lsls	r6, r0, #25
 800ae9e:	d5fb      	bpl.n	800ae98 <_printf_i+0xe8>
 800aea0:	881e      	ldrh	r6, [r3, #0]
 800aea2:	4854      	ldr	r0, [pc, #336]	; (800aff4 <_printf_i+0x244>)
 800aea4:	2f6f      	cmp	r7, #111	; 0x6f
 800aea6:	bf0c      	ite	eq
 800aea8:	2308      	moveq	r3, #8
 800aeaa:	230a      	movne	r3, #10
 800aeac:	2100      	movs	r1, #0
 800aeae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aeb2:	6865      	ldr	r5, [r4, #4]
 800aeb4:	60a5      	str	r5, [r4, #8]
 800aeb6:	2d00      	cmp	r5, #0
 800aeb8:	bfa2      	ittt	ge
 800aeba:	6821      	ldrge	r1, [r4, #0]
 800aebc:	f021 0104 	bicge.w	r1, r1, #4
 800aec0:	6021      	strge	r1, [r4, #0]
 800aec2:	b90e      	cbnz	r6, 800aec8 <_printf_i+0x118>
 800aec4:	2d00      	cmp	r5, #0
 800aec6:	d04d      	beq.n	800af64 <_printf_i+0x1b4>
 800aec8:	4615      	mov	r5, r2
 800aeca:	fbb6 f1f3 	udiv	r1, r6, r3
 800aece:	fb03 6711 	mls	r7, r3, r1, r6
 800aed2:	5dc7      	ldrb	r7, [r0, r7]
 800aed4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aed8:	4637      	mov	r7, r6
 800aeda:	42bb      	cmp	r3, r7
 800aedc:	460e      	mov	r6, r1
 800aede:	d9f4      	bls.n	800aeca <_printf_i+0x11a>
 800aee0:	2b08      	cmp	r3, #8
 800aee2:	d10b      	bne.n	800aefc <_printf_i+0x14c>
 800aee4:	6823      	ldr	r3, [r4, #0]
 800aee6:	07de      	lsls	r6, r3, #31
 800aee8:	d508      	bpl.n	800aefc <_printf_i+0x14c>
 800aeea:	6923      	ldr	r3, [r4, #16]
 800aeec:	6861      	ldr	r1, [r4, #4]
 800aeee:	4299      	cmp	r1, r3
 800aef0:	bfde      	ittt	le
 800aef2:	2330      	movle	r3, #48	; 0x30
 800aef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aef8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aefc:	1b52      	subs	r2, r2, r5
 800aefe:	6122      	str	r2, [r4, #16]
 800af00:	f8cd a000 	str.w	sl, [sp]
 800af04:	464b      	mov	r3, r9
 800af06:	aa03      	add	r2, sp, #12
 800af08:	4621      	mov	r1, r4
 800af0a:	4640      	mov	r0, r8
 800af0c:	f7ff fee2 	bl	800acd4 <_printf_common>
 800af10:	3001      	adds	r0, #1
 800af12:	d14c      	bne.n	800afae <_printf_i+0x1fe>
 800af14:	f04f 30ff 	mov.w	r0, #4294967295
 800af18:	b004      	add	sp, #16
 800af1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af1e:	4835      	ldr	r0, [pc, #212]	; (800aff4 <_printf_i+0x244>)
 800af20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800af24:	6829      	ldr	r1, [r5, #0]
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	f851 6b04 	ldr.w	r6, [r1], #4
 800af2c:	6029      	str	r1, [r5, #0]
 800af2e:	061d      	lsls	r5, r3, #24
 800af30:	d514      	bpl.n	800af5c <_printf_i+0x1ac>
 800af32:	07df      	lsls	r7, r3, #31
 800af34:	bf44      	itt	mi
 800af36:	f043 0320 	orrmi.w	r3, r3, #32
 800af3a:	6023      	strmi	r3, [r4, #0]
 800af3c:	b91e      	cbnz	r6, 800af46 <_printf_i+0x196>
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	f023 0320 	bic.w	r3, r3, #32
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	2310      	movs	r3, #16
 800af48:	e7b0      	b.n	800aeac <_printf_i+0xfc>
 800af4a:	6823      	ldr	r3, [r4, #0]
 800af4c:	f043 0320 	orr.w	r3, r3, #32
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	2378      	movs	r3, #120	; 0x78
 800af54:	4828      	ldr	r0, [pc, #160]	; (800aff8 <_printf_i+0x248>)
 800af56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af5a:	e7e3      	b.n	800af24 <_printf_i+0x174>
 800af5c:	0659      	lsls	r1, r3, #25
 800af5e:	bf48      	it	mi
 800af60:	b2b6      	uxthmi	r6, r6
 800af62:	e7e6      	b.n	800af32 <_printf_i+0x182>
 800af64:	4615      	mov	r5, r2
 800af66:	e7bb      	b.n	800aee0 <_printf_i+0x130>
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	6826      	ldr	r6, [r4, #0]
 800af6c:	6961      	ldr	r1, [r4, #20]
 800af6e:	1d18      	adds	r0, r3, #4
 800af70:	6028      	str	r0, [r5, #0]
 800af72:	0635      	lsls	r5, r6, #24
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	d501      	bpl.n	800af7c <_printf_i+0x1cc>
 800af78:	6019      	str	r1, [r3, #0]
 800af7a:	e002      	b.n	800af82 <_printf_i+0x1d2>
 800af7c:	0670      	lsls	r0, r6, #25
 800af7e:	d5fb      	bpl.n	800af78 <_printf_i+0x1c8>
 800af80:	8019      	strh	r1, [r3, #0]
 800af82:	2300      	movs	r3, #0
 800af84:	6123      	str	r3, [r4, #16]
 800af86:	4615      	mov	r5, r2
 800af88:	e7ba      	b.n	800af00 <_printf_i+0x150>
 800af8a:	682b      	ldr	r3, [r5, #0]
 800af8c:	1d1a      	adds	r2, r3, #4
 800af8e:	602a      	str	r2, [r5, #0]
 800af90:	681d      	ldr	r5, [r3, #0]
 800af92:	6862      	ldr	r2, [r4, #4]
 800af94:	2100      	movs	r1, #0
 800af96:	4628      	mov	r0, r5
 800af98:	f7f5 f91a 	bl	80001d0 <memchr>
 800af9c:	b108      	cbz	r0, 800afa2 <_printf_i+0x1f2>
 800af9e:	1b40      	subs	r0, r0, r5
 800afa0:	6060      	str	r0, [r4, #4]
 800afa2:	6863      	ldr	r3, [r4, #4]
 800afa4:	6123      	str	r3, [r4, #16]
 800afa6:	2300      	movs	r3, #0
 800afa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afac:	e7a8      	b.n	800af00 <_printf_i+0x150>
 800afae:	6923      	ldr	r3, [r4, #16]
 800afb0:	462a      	mov	r2, r5
 800afb2:	4649      	mov	r1, r9
 800afb4:	4640      	mov	r0, r8
 800afb6:	47d0      	blx	sl
 800afb8:	3001      	adds	r0, #1
 800afba:	d0ab      	beq.n	800af14 <_printf_i+0x164>
 800afbc:	6823      	ldr	r3, [r4, #0]
 800afbe:	079b      	lsls	r3, r3, #30
 800afc0:	d413      	bmi.n	800afea <_printf_i+0x23a>
 800afc2:	68e0      	ldr	r0, [r4, #12]
 800afc4:	9b03      	ldr	r3, [sp, #12]
 800afc6:	4298      	cmp	r0, r3
 800afc8:	bfb8      	it	lt
 800afca:	4618      	movlt	r0, r3
 800afcc:	e7a4      	b.n	800af18 <_printf_i+0x168>
 800afce:	2301      	movs	r3, #1
 800afd0:	4632      	mov	r2, r6
 800afd2:	4649      	mov	r1, r9
 800afd4:	4640      	mov	r0, r8
 800afd6:	47d0      	blx	sl
 800afd8:	3001      	adds	r0, #1
 800afda:	d09b      	beq.n	800af14 <_printf_i+0x164>
 800afdc:	3501      	adds	r5, #1
 800afde:	68e3      	ldr	r3, [r4, #12]
 800afe0:	9903      	ldr	r1, [sp, #12]
 800afe2:	1a5b      	subs	r3, r3, r1
 800afe4:	42ab      	cmp	r3, r5
 800afe6:	dcf2      	bgt.n	800afce <_printf_i+0x21e>
 800afe8:	e7eb      	b.n	800afc2 <_printf_i+0x212>
 800afea:	2500      	movs	r5, #0
 800afec:	f104 0619 	add.w	r6, r4, #25
 800aff0:	e7f5      	b.n	800afde <_printf_i+0x22e>
 800aff2:	bf00      	nop
 800aff4:	0800d00d 	.word	0x0800d00d
 800aff8:	0800d01e 	.word	0x0800d01e

0800affc <_sbrk_r>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	4d06      	ldr	r5, [pc, #24]	; (800b018 <_sbrk_r+0x1c>)
 800b000:	2300      	movs	r3, #0
 800b002:	4604      	mov	r4, r0
 800b004:	4608      	mov	r0, r1
 800b006:	602b      	str	r3, [r5, #0]
 800b008:	f7f9 fc00 	bl	800480c <_sbrk>
 800b00c:	1c43      	adds	r3, r0, #1
 800b00e:	d102      	bne.n	800b016 <_sbrk_r+0x1a>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	b103      	cbz	r3, 800b016 <_sbrk_r+0x1a>
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	bd38      	pop	{r3, r4, r5, pc}
 800b018:	20002998 	.word	0x20002998

0800b01c <__sread>:
 800b01c:	b510      	push	{r4, lr}
 800b01e:	460c      	mov	r4, r1
 800b020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b024:	f000 f900 	bl	800b228 <_read_r>
 800b028:	2800      	cmp	r0, #0
 800b02a:	bfab      	itete	ge
 800b02c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b02e:	89a3      	ldrhlt	r3, [r4, #12]
 800b030:	181b      	addge	r3, r3, r0
 800b032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b036:	bfac      	ite	ge
 800b038:	6563      	strge	r3, [r4, #84]	; 0x54
 800b03a:	81a3      	strhlt	r3, [r4, #12]
 800b03c:	bd10      	pop	{r4, pc}

0800b03e <__swrite>:
 800b03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b042:	461f      	mov	r7, r3
 800b044:	898b      	ldrh	r3, [r1, #12]
 800b046:	05db      	lsls	r3, r3, #23
 800b048:	4605      	mov	r5, r0
 800b04a:	460c      	mov	r4, r1
 800b04c:	4616      	mov	r6, r2
 800b04e:	d505      	bpl.n	800b05c <__swrite+0x1e>
 800b050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b054:	2302      	movs	r3, #2
 800b056:	2200      	movs	r2, #0
 800b058:	f000 f870 	bl	800b13c <_lseek_r>
 800b05c:	89a3      	ldrh	r3, [r4, #12]
 800b05e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b066:	81a3      	strh	r3, [r4, #12]
 800b068:	4632      	mov	r2, r6
 800b06a:	463b      	mov	r3, r7
 800b06c:	4628      	mov	r0, r5
 800b06e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b072:	f000 b817 	b.w	800b0a4 <_write_r>

0800b076 <__sseek>:
 800b076:	b510      	push	{r4, lr}
 800b078:	460c      	mov	r4, r1
 800b07a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b07e:	f000 f85d 	bl	800b13c <_lseek_r>
 800b082:	1c43      	adds	r3, r0, #1
 800b084:	89a3      	ldrh	r3, [r4, #12]
 800b086:	bf15      	itete	ne
 800b088:	6560      	strne	r0, [r4, #84]	; 0x54
 800b08a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b08e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b092:	81a3      	strheq	r3, [r4, #12]
 800b094:	bf18      	it	ne
 800b096:	81a3      	strhne	r3, [r4, #12]
 800b098:	bd10      	pop	{r4, pc}

0800b09a <__sclose>:
 800b09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b09e:	f000 b81b 	b.w	800b0d8 <_close_r>
	...

0800b0a4 <_write_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4d07      	ldr	r5, [pc, #28]	; (800b0c4 <_write_r+0x20>)
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	4608      	mov	r0, r1
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	602a      	str	r2, [r5, #0]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	f7f7 fb10 	bl	80026d8 <_write>
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	d102      	bne.n	800b0c2 <_write_r+0x1e>
 800b0bc:	682b      	ldr	r3, [r5, #0]
 800b0be:	b103      	cbz	r3, 800b0c2 <_write_r+0x1e>
 800b0c0:	6023      	str	r3, [r4, #0]
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}
 800b0c4:	20002998 	.word	0x20002998

0800b0c8 <abort>:
 800b0c8:	b508      	push	{r3, lr}
 800b0ca:	2006      	movs	r0, #6
 800b0cc:	f000 f8e6 	bl	800b29c <raise>
 800b0d0:	2001      	movs	r0, #1
 800b0d2:	f7f9 fb3f 	bl	8004754 <_exit>
	...

0800b0d8 <_close_r>:
 800b0d8:	b538      	push	{r3, r4, r5, lr}
 800b0da:	4d06      	ldr	r5, [pc, #24]	; (800b0f4 <_close_r+0x1c>)
 800b0dc:	2300      	movs	r3, #0
 800b0de:	4604      	mov	r4, r0
 800b0e0:	4608      	mov	r0, r1
 800b0e2:	602b      	str	r3, [r5, #0]
 800b0e4:	f7f9 fb5d 	bl	80047a2 <_close>
 800b0e8:	1c43      	adds	r3, r0, #1
 800b0ea:	d102      	bne.n	800b0f2 <_close_r+0x1a>
 800b0ec:	682b      	ldr	r3, [r5, #0]
 800b0ee:	b103      	cbz	r3, 800b0f2 <_close_r+0x1a>
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}
 800b0f4:	20002998 	.word	0x20002998

0800b0f8 <_fstat_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	4d07      	ldr	r5, [pc, #28]	; (800b118 <_fstat_r+0x20>)
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	4604      	mov	r4, r0
 800b100:	4608      	mov	r0, r1
 800b102:	4611      	mov	r1, r2
 800b104:	602b      	str	r3, [r5, #0]
 800b106:	f7f9 fb58 	bl	80047ba <_fstat>
 800b10a:	1c43      	adds	r3, r0, #1
 800b10c:	d102      	bne.n	800b114 <_fstat_r+0x1c>
 800b10e:	682b      	ldr	r3, [r5, #0]
 800b110:	b103      	cbz	r3, 800b114 <_fstat_r+0x1c>
 800b112:	6023      	str	r3, [r4, #0]
 800b114:	bd38      	pop	{r3, r4, r5, pc}
 800b116:	bf00      	nop
 800b118:	20002998 	.word	0x20002998

0800b11c <_isatty_r>:
 800b11c:	b538      	push	{r3, r4, r5, lr}
 800b11e:	4d06      	ldr	r5, [pc, #24]	; (800b138 <_isatty_r+0x1c>)
 800b120:	2300      	movs	r3, #0
 800b122:	4604      	mov	r4, r0
 800b124:	4608      	mov	r0, r1
 800b126:	602b      	str	r3, [r5, #0]
 800b128:	f7f9 fb57 	bl	80047da <_isatty>
 800b12c:	1c43      	adds	r3, r0, #1
 800b12e:	d102      	bne.n	800b136 <_isatty_r+0x1a>
 800b130:	682b      	ldr	r3, [r5, #0]
 800b132:	b103      	cbz	r3, 800b136 <_isatty_r+0x1a>
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	bd38      	pop	{r3, r4, r5, pc}
 800b138:	20002998 	.word	0x20002998

0800b13c <_lseek_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	4d07      	ldr	r5, [pc, #28]	; (800b15c <_lseek_r+0x20>)
 800b140:	4604      	mov	r4, r0
 800b142:	4608      	mov	r0, r1
 800b144:	4611      	mov	r1, r2
 800b146:	2200      	movs	r2, #0
 800b148:	602a      	str	r2, [r5, #0]
 800b14a:	461a      	mov	r2, r3
 800b14c:	f7f9 fb50 	bl	80047f0 <_lseek>
 800b150:	1c43      	adds	r3, r0, #1
 800b152:	d102      	bne.n	800b15a <_lseek_r+0x1e>
 800b154:	682b      	ldr	r3, [r5, #0]
 800b156:	b103      	cbz	r3, 800b15a <_lseek_r+0x1e>
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	bd38      	pop	{r3, r4, r5, pc}
 800b15c:	20002998 	.word	0x20002998

0800b160 <memcpy>:
 800b160:	440a      	add	r2, r1
 800b162:	4291      	cmp	r1, r2
 800b164:	f100 33ff 	add.w	r3, r0, #4294967295
 800b168:	d100      	bne.n	800b16c <memcpy+0xc>
 800b16a:	4770      	bx	lr
 800b16c:	b510      	push	{r4, lr}
 800b16e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b172:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b176:	4291      	cmp	r1, r2
 800b178:	d1f9      	bne.n	800b16e <memcpy+0xe>
 800b17a:	bd10      	pop	{r4, pc}

0800b17c <memmove>:
 800b17c:	4288      	cmp	r0, r1
 800b17e:	b510      	push	{r4, lr}
 800b180:	eb01 0402 	add.w	r4, r1, r2
 800b184:	d902      	bls.n	800b18c <memmove+0x10>
 800b186:	4284      	cmp	r4, r0
 800b188:	4623      	mov	r3, r4
 800b18a:	d807      	bhi.n	800b19c <memmove+0x20>
 800b18c:	1e43      	subs	r3, r0, #1
 800b18e:	42a1      	cmp	r1, r4
 800b190:	d008      	beq.n	800b1a4 <memmove+0x28>
 800b192:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b19a:	e7f8      	b.n	800b18e <memmove+0x12>
 800b19c:	4402      	add	r2, r0
 800b19e:	4601      	mov	r1, r0
 800b1a0:	428a      	cmp	r2, r1
 800b1a2:	d100      	bne.n	800b1a6 <memmove+0x2a>
 800b1a4:	bd10      	pop	{r4, pc}
 800b1a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1ae:	e7f7      	b.n	800b1a0 <memmove+0x24>

0800b1b0 <__malloc_lock>:
 800b1b0:	4801      	ldr	r0, [pc, #4]	; (800b1b8 <__malloc_lock+0x8>)
 800b1b2:	f7ff b989 	b.w	800a4c8 <__retarget_lock_acquire_recursive>
 800b1b6:	bf00      	nop
 800b1b8:	2000298c 	.word	0x2000298c

0800b1bc <__malloc_unlock>:
 800b1bc:	4801      	ldr	r0, [pc, #4]	; (800b1c4 <__malloc_unlock+0x8>)
 800b1be:	f7ff b984 	b.w	800a4ca <__retarget_lock_release_recursive>
 800b1c2:	bf00      	nop
 800b1c4:	2000298c 	.word	0x2000298c

0800b1c8 <_realloc_r>:
 800b1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1cc:	4680      	mov	r8, r0
 800b1ce:	4614      	mov	r4, r2
 800b1d0:	460e      	mov	r6, r1
 800b1d2:	b921      	cbnz	r1, 800b1de <_realloc_r+0x16>
 800b1d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d8:	4611      	mov	r1, r2
 800b1da:	f7ff ba51 	b.w	800a680 <_malloc_r>
 800b1de:	b92a      	cbnz	r2, 800b1ec <_realloc_r+0x24>
 800b1e0:	f7ff f9e2 	bl	800a5a8 <_free_r>
 800b1e4:	4625      	mov	r5, r4
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1ec:	f000 f872 	bl	800b2d4 <_malloc_usable_size_r>
 800b1f0:	4284      	cmp	r4, r0
 800b1f2:	4607      	mov	r7, r0
 800b1f4:	d802      	bhi.n	800b1fc <_realloc_r+0x34>
 800b1f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1fa:	d812      	bhi.n	800b222 <_realloc_r+0x5a>
 800b1fc:	4621      	mov	r1, r4
 800b1fe:	4640      	mov	r0, r8
 800b200:	f7ff fa3e 	bl	800a680 <_malloc_r>
 800b204:	4605      	mov	r5, r0
 800b206:	2800      	cmp	r0, #0
 800b208:	d0ed      	beq.n	800b1e6 <_realloc_r+0x1e>
 800b20a:	42bc      	cmp	r4, r7
 800b20c:	4622      	mov	r2, r4
 800b20e:	4631      	mov	r1, r6
 800b210:	bf28      	it	cs
 800b212:	463a      	movcs	r2, r7
 800b214:	f7ff ffa4 	bl	800b160 <memcpy>
 800b218:	4631      	mov	r1, r6
 800b21a:	4640      	mov	r0, r8
 800b21c:	f7ff f9c4 	bl	800a5a8 <_free_r>
 800b220:	e7e1      	b.n	800b1e6 <_realloc_r+0x1e>
 800b222:	4635      	mov	r5, r6
 800b224:	e7df      	b.n	800b1e6 <_realloc_r+0x1e>
	...

0800b228 <_read_r>:
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	4d07      	ldr	r5, [pc, #28]	; (800b248 <_read_r+0x20>)
 800b22c:	4604      	mov	r4, r0
 800b22e:	4608      	mov	r0, r1
 800b230:	4611      	mov	r1, r2
 800b232:	2200      	movs	r2, #0
 800b234:	602a      	str	r2, [r5, #0]
 800b236:	461a      	mov	r2, r3
 800b238:	f7f9 fa96 	bl	8004768 <_read>
 800b23c:	1c43      	adds	r3, r0, #1
 800b23e:	d102      	bne.n	800b246 <_read_r+0x1e>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	b103      	cbz	r3, 800b246 <_read_r+0x1e>
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	bd38      	pop	{r3, r4, r5, pc}
 800b248:	20002998 	.word	0x20002998

0800b24c <_raise_r>:
 800b24c:	291f      	cmp	r1, #31
 800b24e:	b538      	push	{r3, r4, r5, lr}
 800b250:	4604      	mov	r4, r0
 800b252:	460d      	mov	r5, r1
 800b254:	d904      	bls.n	800b260 <_raise_r+0x14>
 800b256:	2316      	movs	r3, #22
 800b258:	6003      	str	r3, [r0, #0]
 800b25a:	f04f 30ff 	mov.w	r0, #4294967295
 800b25e:	bd38      	pop	{r3, r4, r5, pc}
 800b260:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b262:	b112      	cbz	r2, 800b26a <_raise_r+0x1e>
 800b264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b268:	b94b      	cbnz	r3, 800b27e <_raise_r+0x32>
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 f830 	bl	800b2d0 <_getpid_r>
 800b270:	462a      	mov	r2, r5
 800b272:	4601      	mov	r1, r0
 800b274:	4620      	mov	r0, r4
 800b276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b27a:	f000 b817 	b.w	800b2ac <_kill_r>
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d00a      	beq.n	800b298 <_raise_r+0x4c>
 800b282:	1c59      	adds	r1, r3, #1
 800b284:	d103      	bne.n	800b28e <_raise_r+0x42>
 800b286:	2316      	movs	r3, #22
 800b288:	6003      	str	r3, [r0, #0]
 800b28a:	2001      	movs	r0, #1
 800b28c:	e7e7      	b.n	800b25e <_raise_r+0x12>
 800b28e:	2400      	movs	r4, #0
 800b290:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b294:	4628      	mov	r0, r5
 800b296:	4798      	blx	r3
 800b298:	2000      	movs	r0, #0
 800b29a:	e7e0      	b.n	800b25e <_raise_r+0x12>

0800b29c <raise>:
 800b29c:	4b02      	ldr	r3, [pc, #8]	; (800b2a8 <raise+0xc>)
 800b29e:	4601      	mov	r1, r0
 800b2a0:	6818      	ldr	r0, [r3, #0]
 800b2a2:	f7ff bfd3 	b.w	800b24c <_raise_r>
 800b2a6:	bf00      	nop
 800b2a8:	20000068 	.word	0x20000068

0800b2ac <_kill_r>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4d07      	ldr	r5, [pc, #28]	; (800b2cc <_kill_r+0x20>)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	4608      	mov	r0, r1
 800b2b6:	4611      	mov	r1, r2
 800b2b8:	602b      	str	r3, [r5, #0]
 800b2ba:	f7f9 fa3b 	bl	8004734 <_kill>
 800b2be:	1c43      	adds	r3, r0, #1
 800b2c0:	d102      	bne.n	800b2c8 <_kill_r+0x1c>
 800b2c2:	682b      	ldr	r3, [r5, #0]
 800b2c4:	b103      	cbz	r3, 800b2c8 <_kill_r+0x1c>
 800b2c6:	6023      	str	r3, [r4, #0]
 800b2c8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20002998 	.word	0x20002998

0800b2d0 <_getpid_r>:
 800b2d0:	f7f9 ba28 	b.w	8004724 <_getpid>

0800b2d4 <_malloc_usable_size_r>:
 800b2d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2d8:	1f18      	subs	r0, r3, #4
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	bfbc      	itt	lt
 800b2de:	580b      	ldrlt	r3, [r1, r0]
 800b2e0:	18c0      	addlt	r0, r0, r3
 800b2e2:	4770      	bx	lr

0800b2e4 <_init>:
 800b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e6:	bf00      	nop
 800b2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ea:	bc08      	pop	{r3}
 800b2ec:	469e      	mov	lr, r3
 800b2ee:	4770      	bx	lr

0800b2f0 <_fini>:
 800b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f2:	bf00      	nop
 800b2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f6:	bc08      	pop	{r3}
 800b2f8:	469e      	mov	lr, r3
 800b2fa:	4770      	bx	lr
