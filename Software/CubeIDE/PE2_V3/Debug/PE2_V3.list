
PE2_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d44  0800ba84  0800ba84  0001ba84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7c8  0800d7c8  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800d7c8  0800d7c8  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d7c8  0800d7c8  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7c8  0800d7c8  0001d7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7cc  0800d7cc  0001d7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800d7d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002934  200000cc  0800d89c  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a00  0800d89c  00022a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cbd  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003517  00000000  00000000  00034db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  000382d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00039388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019799  00000000  00000000  0003a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190f9  00000000  00000000  00053a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000864cf  00000000  00000000  0006cb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3019  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f5c  00000000  00000000  000f306c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba6c 	.word	0x0800ba6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	0800ba6c 	.word	0x0800ba6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <initBrickbreaker>:
uint8_t loopTester = 0;
uint8_t guardian = 0;
uint8_t guardianTimer = 100;
int toughnessColor[4] = {D_GREEN, GREY, DARK_GREY, BLACK};

void initBrickbreaker() {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
    person.x = SCREEN_WIDTH/2;
 8000276:	4b49      	ldr	r3, [pc, #292]	; (800039c <initBrickbreaker+0x12c>)
 8000278:	2228      	movs	r2, #40	; 0x28
 800027a:	701a      	strb	r2, [r3, #0]
    person.y = SCREEN_HEIGHT - 5;
 800027c:	4b47      	ldr	r3, [pc, #284]	; (800039c <initBrickbreaker+0x12c>)
 800027e:	2237      	movs	r2, #55	; 0x37
 8000280:	705a      	strb	r2, [r3, #1]
    ball.x = SCREEN_WIDTH/2;
 8000282:	4b47      	ldr	r3, [pc, #284]	; (80003a0 <initBrickbreaker+0x130>)
 8000284:	2228      	movs	r2, #40	; 0x28
 8000286:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000288:	4b45      	ldr	r3, [pc, #276]	; (80003a0 <initBrickbreaker+0x130>)
 800028a:	2236      	movs	r2, #54	; 0x36
 800028c:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 800028e:	4b44      	ldr	r3, [pc, #272]	; (80003a0 <initBrickbreaker+0x130>)
 8000290:	2208      	movs	r2, #8
 8000292:	721a      	strb	r2, [r3, #8]
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e041      	b.n	800031e <initBrickbreaker+0xae>
        for(int j = 0; j < 10; j++) {
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
 800029e:	e038      	b.n	8000312 <initBrickbreaker+0xa2>
            bricks[i][j].x = j * 8;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	00d9      	lsls	r1, r3, #3
 80002a4:	483f      	ldr	r0, [pc, #252]	; (80003a4 <initBrickbreaker+0x134>)
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	4613      	mov	r3, r2
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	4413      	add	r3, r2
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	68ba      	ldr	r2, [r7, #8]
 80002b2:	4413      	add	r3, r2
 80002b4:	011b      	lsls	r3, r3, #4
 80002b6:	4403      	add	r3, r0
 80002b8:	6019      	str	r1, [r3, #0]
            bricks[i][j].y = i + 8;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	f103 0108 	add.w	r1, r3, #8
 80002c0:	4838      	ldr	r0, [pc, #224]	; (80003a4 <initBrickbreaker+0x134>)
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	4613      	mov	r3, r2
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	4413      	add	r3, r2
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	68ba      	ldr	r2, [r7, #8]
 80002ce:	4413      	add	r3, r2
 80002d0:	011b      	lsls	r3, r3, #4
 80002d2:	4403      	add	r3, r0
 80002d4:	3304      	adds	r3, #4
 80002d6:	6019      	str	r1, [r3, #0]
            bricks[i][j].visible = 0;
 80002d8:	4932      	ldr	r1, [pc, #200]	; (80003a4 <initBrickbreaker+0x134>)
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	4613      	mov	r3, r2
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	68ba      	ldr	r2, [r7, #8]
 80002e6:	4413      	add	r3, r2
 80002e8:	011b      	lsls	r3, r3, #4
 80002ea:	440b      	add	r3, r1
 80002ec:	3308      	adds	r3, #8
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = 1;
 80002f2:	492c      	ldr	r1, [pc, #176]	; (80003a4 <initBrickbreaker+0x134>)
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	4613      	mov	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	4413      	add	r3, r2
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	4413      	add	r3, r2
 8000302:	011b      	lsls	r3, r3, #4
 8000304:	440b      	add	r3, r1
 8000306:	330c      	adds	r3, #12
 8000308:	2201      	movs	r2, #1
 800030a:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < 10; j++) {
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	3301      	adds	r3, #1
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	2b09      	cmp	r3, #9
 8000316:	ddc3      	ble.n	80002a0 <initBrickbreaker+0x30>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	3301      	adds	r3, #1
 800031c:	60fb      	str	r3, [r7, #12]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	2b2f      	cmp	r3, #47	; 0x2f
 8000322:	ddba      	ble.n	800029a <initBrickbreaker+0x2a>
        }
    }

    for (int i = 0; i < BRICK_LINES; i++) {
 8000324:	2300      	movs	r3, #0
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	e027      	b.n	800037a <initBrickbreaker+0x10a>
        for(int j = 0; j < 10; j++) {
 800032a:	2300      	movs	r3, #0
 800032c:	603b      	str	r3, [r7, #0]
 800032e:	e01e      	b.n	800036e <initBrickbreaker+0xfe>
            bricks[i][j].visible = 1;
 8000330:	491c      	ldr	r1, [pc, #112]	; (80003a4 <initBrickbreaker+0x134>)
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	4613      	mov	r3, r2
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	4413      	add	r3, r2
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	683a      	ldr	r2, [r7, #0]
 800033e:	4413      	add	r3, r2
 8000340:	011b      	lsls	r3, r3, #4
 8000342:	440b      	add	r3, r1
 8000344:	3308      	adds	r3, #8
 8000346:	2201      	movs	r2, #1
 8000348:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = setBrickToughness();
 800034a:	f001 fe87 	bl	800205c <setBrickToughness>
 800034e:	4601      	mov	r1, r0
 8000350:	4814      	ldr	r0, [pc, #80]	; (80003a4 <initBrickbreaker+0x134>)
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	4613      	mov	r3, r2
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4413      	add	r3, r2
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	683a      	ldr	r2, [r7, #0]
 800035e:	4413      	add	r3, r2
 8000360:	011b      	lsls	r3, r3, #4
 8000362:	4403      	add	r3, r0
 8000364:	330c      	adds	r3, #12
 8000366:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < 10; j++) {
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	3301      	adds	r3, #1
 800036c:	603b      	str	r3, [r7, #0]
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	2b09      	cmp	r3, #9
 8000372:	dddd      	ble.n	8000330 <initBrickbreaker+0xc0>
    for (int i = 0; i < BRICK_LINES; i++) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3301      	adds	r3, #1
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2b09      	cmp	r3, #9
 800037e:	ddd4      	ble.n	800032a <initBrickbreaker+0xba>
        }
    }
    points = 0;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <initBrickbreaker+0x138>)
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]
    Displ_CLS(D_GREEN);
 8000386:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800038a:	f004 fe3b 	bl	8005004 <Displ_CLS>
    drawBricks();
 800038e:	f001 fe9b 	bl	80020c8 <drawBricks>
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000030 	.word	0x20000030
 80003a0:	20000034 	.word	0x20000034
 80003a4:	200000e8 	.word	0x200000e8
 80003a8:	20001ee8 	.word	0x20001ee8

080003ac <playBall>:

void playBall() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
    if (ball.y == 0) {
 80003b0:	4b3d      	ldr	r3, [pc, #244]	; (80004a8 <playBall+0xfc>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d102      	bne.n	80003be <playBall+0x12>
        changeDirection(N);
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 f8ef 	bl	800059c <changeDirection>
    }
    if (ball.y == SCREEN_HEIGHT - 6) {
 80003be:	4b3a      	ldr	r3, [pc, #232]	; (80004a8 <playBall+0xfc>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	2b36      	cmp	r3, #54	; 0x36
 80003c4:	d14d      	bne.n	8000462 <playBall+0xb6>
        if (ball.x >= person.x - (BAR_SIZE/2) && ball.x <= person.x + (BAR_SIZE/2)) {
 80003c6:	4b38      	ldr	r3, [pc, #224]	; (80004a8 <playBall+0xfc>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	4b38      	ldr	r3, [pc, #224]	; (80004ac <playBall+0x100>)
 80003cc:	f993 3000 	ldrsb.w	r3, [r3]
 80003d0:	3b19      	subs	r3, #25
 80003d2:	429a      	cmp	r2, r3
 80003d4:	db0b      	blt.n	80003ee <playBall+0x42>
 80003d6:	4b34      	ldr	r3, [pc, #208]	; (80004a8 <playBall+0xfc>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	4b34      	ldr	r3, [pc, #208]	; (80004ac <playBall+0x100>)
 80003dc:	f993 3000 	ldrsb.w	r3, [r3]
 80003e0:	3319      	adds	r3, #25
 80003e2:	429a      	cmp	r2, r3
 80003e4:	dc03      	bgt.n	80003ee <playBall+0x42>
            changeDirection(S);
 80003e6:	2004      	movs	r0, #4
 80003e8:	f000 f8d8 	bl	800059c <changeDirection>
 80003ec:	e039      	b.n	8000462 <playBall+0xb6>
        } else {
            if (ball.x == person.x - (BAR_SIZE/2) - 1) {
 80003ee:	4b2e      	ldr	r3, [pc, #184]	; (80004a8 <playBall+0xfc>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	4b2e      	ldr	r3, [pc, #184]	; (80004ac <playBall+0x100>)
 80003f4:	f993 3000 	ldrsb.w	r3, [r3]
 80003f8:	3b1a      	subs	r3, #26
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d110      	bne.n	8000420 <playBall+0x74>
                if (ball.dir == SE) {
 80003fe:	4b2a      	ldr	r3, [pc, #168]	; (80004a8 <playBall+0xfc>)
 8000400:	7a1b      	ldrb	r3, [r3, #8]
 8000402:	2b03      	cmp	r3, #3
 8000404:	d103      	bne.n	800040e <playBall+0x62>
                    ball.dir = NW;
 8000406:	4b28      	ldr	r3, [pc, #160]	; (80004a8 <playBall+0xfc>)
 8000408:	2207      	movs	r2, #7
 800040a:	721a      	strb	r2, [r3, #8]
 800040c:	e029      	b.n	8000462 <playBall+0xb6>
                } else {
                    lives1--;
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <playBall+0x104>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	3b01      	subs	r3, #1
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <playBall+0x104>)
 8000418:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 800041a:	f000 f965 	bl	80006e8 <gameEnd>
 800041e:	e020      	b.n	8000462 <playBall+0xb6>
                }
            } else {
                if (ball.x == person.x + (BAR_SIZE/2) + 1) {
 8000420:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <playBall+0xfc>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <playBall+0x100>)
 8000426:	f993 3000 	ldrsb.w	r3, [r3]
 800042a:	331a      	adds	r3, #26
 800042c:	429a      	cmp	r2, r3
 800042e:	d110      	bne.n	8000452 <playBall+0xa6>
                    if (ball.dir == SW) {
 8000430:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <playBall+0xfc>)
 8000432:	7a1b      	ldrb	r3, [r3, #8]
 8000434:	2b05      	cmp	r3, #5
 8000436:	d103      	bne.n	8000440 <playBall+0x94>
                        ball.dir = NE;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <playBall+0xfc>)
 800043a:	2201      	movs	r2, #1
 800043c:	721a      	strb	r2, [r3, #8]
 800043e:	e010      	b.n	8000462 <playBall+0xb6>
                    } else {
                        lives1--;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <playBall+0x104>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	3b01      	subs	r3, #1
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <playBall+0x104>)
 800044a:	701a      	strb	r2, [r3, #0]
                        gameEnd();
 800044c:	f000 f94c 	bl	80006e8 <gameEnd>
 8000450:	e007      	b.n	8000462 <playBall+0xb6>
                    }
                } else {
                    lives1--;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <playBall+0x104>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	3b01      	subs	r3, #1
 8000458:	b2da      	uxtb	r2, r3
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <playBall+0x104>)
 800045c:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 800045e:	f000 f943 	bl	80006e8 <gameEnd>
                }
            }
        }
    }
    if (ball.x == 0) {
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <playBall+0xfc>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d102      	bne.n	8000470 <playBall+0xc4>
        changeDirection(W);
 800046a:	2006      	movs	r0, #6
 800046c:	f000 f896 	bl	800059c <changeDirection>
    }
    if (ball.x == SCREEN_WIDTH - 1) {
 8000470:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <playBall+0xfc>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b4f      	cmp	r3, #79	; 0x4f
 8000476:	d102      	bne.n	800047e <playBall+0xd2>
        changeDirection(E);
 8000478:	2002      	movs	r0, #2
 800047a:	f000 f88f 	bl	800059c <changeDirection>
    }

    if (guardian == 1) {
 800047e:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <playBall+0x108>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d10a      	bne.n	800049c <playBall+0xf0>
        if (ball.y == person.y - 2) {
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <playBall+0xfc>)
 8000488:	685a      	ldr	r2, [r3, #4]
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <playBall+0x100>)
 800048c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000490:	3b02      	subs	r3, #2
 8000492:	429a      	cmp	r2, r3
 8000494:	d102      	bne.n	800049c <playBall+0xf0>
            changeDirection(S);
 8000496:	2004      	movs	r0, #4
 8000498:	f000 f880 	bl	800059c <changeDirection>
        }
    }

    checkBrickHit();
 800049c:	f000 fa08 	bl	80008b0 <checkBrickHit>
    moveBall();
 80004a0:	f000 f80a 	bl	80004b8 <moveBall>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000034 	.word	0x20000034
 80004ac:	20000030 	.word	0x20000030
 80004b0:	20000002 	.word	0x20000002
 80004b4:	20001eea 	.word	0x20001eea

080004b8 <moveBall>:

void moveBall() {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af02      	add	r7, sp, #8
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80004be:	4b36      	ldr	r3, [pc, #216]	; (8000598 <moveBall+0xe0>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	b298      	uxth	r0, r3
 80004c8:	4b33      	ldr	r3, [pc, #204]	; (8000598 <moveBall+0xe0>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	b299      	uxth	r1, r3
 80004d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2304      	movs	r3, #4
 80004da:	2204      	movs	r2, #4
 80004dc:	f004 fbde 	bl	8004c9c <Displ_FillArea>
    switch (ball.dir) {
 80004e0:	4b2d      	ldr	r3, [pc, #180]	; (8000598 <moveBall+0xe0>)
 80004e2:	7a1b      	ldrb	r3, [r3, #8]
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	d84d      	bhi.n	8000584 <moveBall+0xcc>
 80004e8:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <moveBall+0x38>)
 80004ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ee:	bf00      	nop
 80004f0:	08000515 	.word	0x08000515
 80004f4:	0800052d 	.word	0x0800052d
 80004f8:	08000585 	.word	0x08000585
 80004fc:	08000559 	.word	0x08000559
 8000500:	08000521 	.word	0x08000521
 8000504:	0800056f 	.word	0x0800056f
 8000508:	08000585 	.word	0x08000585
 800050c:	08000543 	.word	0x08000543
 8000510:	0800058f 	.word	0x0800058f
    case N:
        ball.y -= 1;
 8000514:	4b20      	ldr	r3, [pc, #128]	; (8000598 <moveBall+0xe0>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	3b01      	subs	r3, #1
 800051a:	4a1f      	ldr	r2, [pc, #124]	; (8000598 <moveBall+0xe0>)
 800051c:	6053      	str	r3, [r2, #4]
        break;
 800051e:	e037      	b.n	8000590 <moveBall+0xd8>
    case S:
        ball.y += 1;
 8000520:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <moveBall+0xe0>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	3301      	adds	r3, #1
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <moveBall+0xe0>)
 8000528:	6053      	str	r3, [r2, #4]
        break;
 800052a:	e031      	b.n	8000590 <moveBall+0xd8>
    case NE:
        ball.y -= 1;
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <moveBall+0xe0>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	4a19      	ldr	r2, [pc, #100]	; (8000598 <moveBall+0xe0>)
 8000534:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <moveBall+0xe0>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	4a16      	ldr	r2, [pc, #88]	; (8000598 <moveBall+0xe0>)
 800053e:	6013      	str	r3, [r2, #0]
        break;
 8000540:	e026      	b.n	8000590 <moveBall+0xd8>
    case NW:
        ball.y -= 1;
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <moveBall+0xe0>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	3b01      	subs	r3, #1
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <moveBall+0xe0>)
 800054a:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <moveBall+0xe0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3b01      	subs	r3, #1
 8000552:	4a11      	ldr	r2, [pc, #68]	; (8000598 <moveBall+0xe0>)
 8000554:	6013      	str	r3, [r2, #0]
        break;
 8000556:	e01b      	b.n	8000590 <moveBall+0xd8>
    case SE:
        ball.y += 1;
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <moveBall+0xe0>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <moveBall+0xe0>)
 8000560:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <moveBall+0xe0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <moveBall+0xe0>)
 800056a:	6013      	str	r3, [r2, #0]
        break;
 800056c:	e010      	b.n	8000590 <moveBall+0xd8>
    case SW:
        ball.y += 1;
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <moveBall+0xe0>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	3301      	adds	r3, #1
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <moveBall+0xe0>)
 8000576:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <moveBall+0xe0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3b01      	subs	r3, #1
 800057e:	4a06      	ldr	r2, [pc, #24]	; (8000598 <moveBall+0xe0>)
 8000580:	6013      	str	r3, [r2, #0]
        break;
 8000582:	e005      	b.n	8000590 <moveBall+0xd8>
    case still:
        break;
    default:
        //////QD << "You shouldn't be here!";
        ball.x = ball.x;
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <moveBall+0xe0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a03      	ldr	r2, [pc, #12]	; (8000598 <moveBall+0xe0>)
 800058a:	6013      	str	r3, [r2, #0]
    }

}
 800058c:	e000      	b.n	8000590 <moveBall+0xd8>
        break;
 800058e:	bf00      	nop
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000034 	.word	0x20000034

0800059c <changeDirection>:

void changeDirection(directions inDir) {
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
    if (inDir == N) {
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d12a      	bne.n	8000602 <changeDirection+0x66>
        switch (ball.dir) {
 80005ac:	4b4d      	ldr	r3, [pc, #308]	; (80006e4 <changeDirection+0x148>)
 80005ae:	7a1b      	ldrb	r3, [r3, #8]
 80005b0:	2b08      	cmp	r3, #8
 80005b2:	d821      	bhi.n	80005f8 <changeDirection+0x5c>
 80005b4:	a201      	add	r2, pc, #4	; (adr r2, 80005bc <changeDirection+0x20>)
 80005b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ba:	bf00      	nop
 80005bc:	080005e1 	.word	0x080005e1
 80005c0:	080005f1 	.word	0x080005f1
 80005c4:	080005f9 	.word	0x080005f9
 80005c8:	080005f9 	.word	0x080005f9
 80005cc:	080005f9 	.word	0x080005f9
 80005d0:	080005f9 	.word	0x080005f9
 80005d4:	080005f9 	.word	0x080005f9
 80005d8:	080005e9 	.word	0x080005e9
 80005dc:	08000607 	.word	0x08000607
        case N:
            ball.dir = S;
 80005e0:	4b40      	ldr	r3, [pc, #256]	; (80006e4 <changeDirection+0x148>)
 80005e2:	2204      	movs	r2, #4
 80005e4:	721a      	strb	r2, [r3, #8]
            break;
 80005e6:	e00f      	b.n	8000608 <changeDirection+0x6c>
        case NW:
            ball.dir = SW;
 80005e8:	4b3e      	ldr	r3, [pc, #248]	; (80006e4 <changeDirection+0x148>)
 80005ea:	2205      	movs	r2, #5
 80005ec:	721a      	strb	r2, [r3, #8]
            break;
 80005ee:	e00b      	b.n	8000608 <changeDirection+0x6c>
        case NE:
            ball.dir = SE;
 80005f0:	4b3c      	ldr	r3, [pc, #240]	; (80006e4 <changeDirection+0x148>)
 80005f2:	2203      	movs	r2, #3
 80005f4:	721a      	strb	r2, [r3, #8]
            break;
 80005f6:	e007      	b.n	8000608 <changeDirection+0x6c>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 80005f8:	4b3a      	ldr	r3, [pc, #232]	; (80006e4 <changeDirection+0x148>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <changeDirection+0x148>)
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	e002      	b.n	8000608 <changeDirection+0x6c>
        }
    }
 8000602:	bf00      	nop
 8000604:	e000      	b.n	8000608 <changeDirection+0x6c>
            break;
 8000606:	bf00      	nop

    if (inDir == E) {
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b02      	cmp	r3, #2
 800060c:	d117      	bne.n	800063e <changeDirection+0xa2>
        switch (ball.dir) {
 800060e:	4b35      	ldr	r3, [pc, #212]	; (80006e4 <changeDirection+0x148>)
 8000610:	7a1b      	ldrb	r3, [r3, #8]
 8000612:	2b08      	cmp	r3, #8
 8000614:	d015      	beq.n	8000642 <changeDirection+0xa6>
 8000616:	2b08      	cmp	r3, #8
 8000618:	dc0c      	bgt.n	8000634 <changeDirection+0x98>
 800061a:	2b01      	cmp	r3, #1
 800061c:	d002      	beq.n	8000624 <changeDirection+0x88>
 800061e:	2b03      	cmp	r3, #3
 8000620:	d004      	beq.n	800062c <changeDirection+0x90>
 8000622:	e007      	b.n	8000634 <changeDirection+0x98>
        case NE:
            ball.dir = NW;
 8000624:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <changeDirection+0x148>)
 8000626:	2207      	movs	r2, #7
 8000628:	721a      	strb	r2, [r3, #8]
            break;
 800062a:	e00b      	b.n	8000644 <changeDirection+0xa8>
        case SE:
            ball.dir = SW;
 800062c:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <changeDirection+0x148>)
 800062e:	2205      	movs	r2, #5
 8000630:	721a      	strb	r2, [r3, #8]
            break;
 8000632:	e007      	b.n	8000644 <changeDirection+0xa8>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 8000634:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <changeDirection+0x148>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a2a      	ldr	r2, [pc, #168]	; (80006e4 <changeDirection+0x148>)
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	e002      	b.n	8000644 <changeDirection+0xa8>
        }
    }
 800063e:	bf00      	nop
 8000640:	e000      	b.n	8000644 <changeDirection+0xa8>
            break;
 8000642:	bf00      	nop

    if (inDir == S) {
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b04      	cmp	r3, #4
 8000648:	d125      	bne.n	8000696 <changeDirection+0xfa>
        switch (ball.dir) {
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <changeDirection+0x148>)
 800064c:	7a1b      	ldrb	r3, [r3, #8]
 800064e:	3b03      	subs	r3, #3
 8000650:	2b05      	cmp	r3, #5
 8000652:	d81b      	bhi.n	800068c <changeDirection+0xf0>
 8000654:	a201      	add	r2, pc, #4	; (adr r2, 800065c <changeDirection+0xc0>)
 8000656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065a:	bf00      	nop
 800065c:	0800067d 	.word	0x0800067d
 8000660:	08000675 	.word	0x08000675
 8000664:	08000685 	.word	0x08000685
 8000668:	0800068d 	.word	0x0800068d
 800066c:	0800068d 	.word	0x0800068d
 8000670:	0800069b 	.word	0x0800069b
        case S:
            ball.dir = N;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <changeDirection+0x148>)
 8000676:	2200      	movs	r2, #0
 8000678:	721a      	strb	r2, [r3, #8]
            break;
 800067a:	e00f      	b.n	800069c <changeDirection+0x100>
        case SE:
            ball.dir = NE;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <changeDirection+0x148>)
 800067e:	2201      	movs	r2, #1
 8000680:	721a      	strb	r2, [r3, #8]
            break;
 8000682:	e00b      	b.n	800069c <changeDirection+0x100>
        case SW:
            ball.dir = NW;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <changeDirection+0x148>)
 8000686:	2207      	movs	r2, #7
 8000688:	721a      	strb	r2, [r3, #8]
            break;
 800068a:	e007      	b.n	800069c <changeDirection+0x100>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.dir = ball.dir;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <changeDirection+0x148>)
 800068e:	7a1a      	ldrb	r2, [r3, #8]
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <changeDirection+0x148>)
 8000692:	721a      	strb	r2, [r3, #8]
 8000694:	e002      	b.n	800069c <changeDirection+0x100>
        }
    }
 8000696:	bf00      	nop
 8000698:	e000      	b.n	800069c <changeDirection+0x100>
            break;
 800069a:	bf00      	nop

    if (inDir == W) {
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d116      	bne.n	80006d0 <changeDirection+0x134>
        switch (ball.dir) {
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <changeDirection+0x148>)
 80006a4:	7a1b      	ldrb	r3, [r3, #8]
 80006a6:	2b08      	cmp	r3, #8
 80006a8:	d014      	beq.n	80006d4 <changeDirection+0x138>
 80006aa:	2b08      	cmp	r3, #8
 80006ac:	dc0b      	bgt.n	80006c6 <changeDirection+0x12a>
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	d005      	beq.n	80006be <changeDirection+0x122>
 80006b2:	2b07      	cmp	r3, #7
 80006b4:	d107      	bne.n	80006c6 <changeDirection+0x12a>
        case NW:
            ball.dir = NE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <changeDirection+0x148>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	721a      	strb	r2, [r3, #8]
            break;
 80006bc:	e00b      	b.n	80006d6 <changeDirection+0x13a>
        case SW:
            ball.dir = SE;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <changeDirection+0x148>)
 80006c0:	2203      	movs	r2, #3
 80006c2:	721a      	strb	r2, [r3, #8]
            break;
 80006c4:	e007      	b.n	80006d6 <changeDirection+0x13a>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <changeDirection+0x148>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <changeDirection+0x148>)
 80006cc:	6013      	str	r3, [r2, #0]
        }
    }
}
 80006ce:	e002      	b.n	80006d6 <changeDirection+0x13a>
    }
 80006d0:	bf00      	nop
 80006d2:	e000      	b.n	80006d6 <changeDirection+0x13a>
            break;
 80006d4:	bf00      	nop
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000034 	.word	0x20000034

080006e8 <gameEnd>:

void gameEnd() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af02      	add	r7, sp, #8
    Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 10, D_GREEN);
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <gameEnd+0x78>)
 80006f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	b299      	uxth	r1, r3
 80006fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	230a      	movs	r3, #10
 8000704:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000708:	2000      	movs	r0, #0
 800070a:	f004 fac7 	bl	8004c9c <Displ_FillArea>
    person.x = (SCREEN_WIDTH)/2;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <gameEnd+0x78>)
 8000710:	2228      	movs	r2, #40	; 0x28
 8000712:	701a      	strb	r2, [r3, #0]
    ball.x = person.x;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <gameEnd+0x78>)
 8000716:	f993 3000 	ldrsb.w	r3, [r3]
 800071a:	461a      	mov	r2, r3
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <gameEnd+0x7c>)
 800071e:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <gameEnd+0x7c>)
 8000722:	2236      	movs	r2, #54	; 0x36
 8000724:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <gameEnd+0x7c>)
 8000728:	2208      	movs	r2, #8
 800072a:	721a      	strb	r2, [r3, #8]

    if (lives1 <= 0) {
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <gameEnd+0x80>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d112      	bne.n	800075a <gameEnd+0x72>
        if (points > highScore) {
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <gameEnd+0x84>)
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <gameEnd+0x88>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	429a      	cmp	r2, r3
 800073e:	d903      	bls.n	8000748 <gameEnd+0x60>
            highScore = points;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <gameEnd+0x84>)
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <gameEnd+0x88>)
 8000746:	701a      	strb	r2, [r3, #0]
            //////QD << highScore;
        }

        start = 0;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <gameEnd+0x8c>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
        points = 0;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <gameEnd+0x84>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
        lives1 = 3;
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <gameEnd+0x80>)
 8000756:	2203      	movs	r2, #3
 8000758:	701a      	strb	r2, [r3, #0]
    }
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000030 	.word	0x20000030
 8000764:	20000034 	.word	0x20000034
 8000768:	20000002 	.word	0x20000002
 800076c:	20001ee8 	.word	0x20001ee8
 8000770:	20001ee9 	.word	0x20001ee9
 8000774:	20001eef 	.word	0x20001eef

08000778 <lowerBricks>:

void lowerBricks() {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 800077e:	232e      	movs	r3, #46	; 0x2e
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	e03d      	b.n	8000800 <lowerBricks+0x88>
        for (int j = 0; j < 10; j++) {
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	e034      	b.n	80007f4 <lowerBricks+0x7c>
            bricks[i + 1][j].visible = bricks[i][j].visible;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	482d      	ldr	r0, [pc, #180]	; (8000844 <lowerBricks+0xcc>)
 8000790:	68f9      	ldr	r1, [r7, #12]
 8000792:	460b      	mov	r3, r1
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	440b      	add	r3, r1
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	68b9      	ldr	r1, [r7, #8]
 800079c:	440b      	add	r3, r1
 800079e:	011b      	lsls	r3, r3, #4
 80007a0:	4403      	add	r3, r0
 80007a2:	3308      	adds	r3, #8
 80007a4:	6819      	ldr	r1, [r3, #0]
 80007a6:	4827      	ldr	r0, [pc, #156]	; (8000844 <lowerBricks+0xcc>)
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	4413      	add	r3, r2
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	4403      	add	r3, r0
 80007b8:	3308      	adds	r3, #8
 80007ba:	6019      	str	r1, [r3, #0]
            bricks[i + 1][j].toughness = bricks[i][j].toughness;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	4820      	ldr	r0, [pc, #128]	; (8000844 <lowerBricks+0xcc>)
 80007c2:	68f9      	ldr	r1, [r7, #12]
 80007c4:	460b      	mov	r3, r1
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	440b      	add	r3, r1
 80007d0:	011b      	lsls	r3, r3, #4
 80007d2:	4403      	add	r3, r0
 80007d4:	330c      	adds	r3, #12
 80007d6:	6819      	ldr	r1, [r3, #0]
 80007d8:	481a      	ldr	r0, [pc, #104]	; (8000844 <lowerBricks+0xcc>)
 80007da:	4613      	mov	r3, r2
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4413      	add	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	4413      	add	r3, r2
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	4403      	add	r3, r0
 80007ea:	330c      	adds	r3, #12
 80007ec:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 10; j++) {
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	3301      	adds	r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	2b09      	cmp	r3, #9
 80007f8:	ddc7      	ble.n	800078a <lowerBricks+0x12>
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	dabe      	bge.n	8000784 <lowerBricks+0xc>
        }
    }
    for(int j = 0; j < 10; j++) {
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	e012      	b.n	8000832 <lowerBricks+0xba>
        bricks[0][j].visible = 1;
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <lowerBricks+0xcc>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	4413      	add	r3, r2
 8000814:	3308      	adds	r3, #8
 8000816:	2201      	movs	r2, #1
 8000818:	601a      	str	r2, [r3, #0]
        bricks[0][j].toughness = setBrickToughness();
 800081a:	f001 fc1f 	bl	800205c <setBrickToughness>
 800081e:	4602      	mov	r2, r0
 8000820:	4908      	ldr	r1, [pc, #32]	; (8000844 <lowerBricks+0xcc>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	011b      	lsls	r3, r3, #4
 8000826:	440b      	add	r3, r1
 8000828:	330c      	adds	r3, #12
 800082a:	601a      	str	r2, [r3, #0]
    for(int j = 0; j < 10; j++) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3301      	adds	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b09      	cmp	r3, #9
 8000836:	dde9      	ble.n	800080c <lowerBricks+0x94>
    }

    drawBricks();
 8000838:	f001 fc46 	bl	80020c8 <drawBricks>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000e8 	.word	0x200000e8

08000848 <checkGameOver>:

void checkGameOver() {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
    for (int j = 0; j < 10; j++) {
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	e01d      	b.n	8000890 <checkGameOver+0x48>
        if (bricks[MAX_BRICK_LINES - 1][j].visible == 1) {
 8000854:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <checkGameOver+0x58>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	011b      	lsls	r3, r3, #4
 800085a:	4413      	add	r3, r2
 800085c:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8000860:	3308      	adds	r3, #8
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d110      	bne.n	800088a <checkGameOver+0x42>

            lives1 = 0;
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <checkGameOver+0x5c>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
            ball.x = person.x;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <checkGameOver+0x60>)
 8000870:	f993 3000 	ldrsb.w	r3, [r3]
 8000874:	461a      	mov	r2, r3
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <checkGameOver+0x64>)
 8000878:	601a      	str	r2, [r3, #0]
            ball.y = SCREEN_HEIGHT - 6;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <checkGameOver+0x64>)
 800087c:	2236      	movs	r2, #54	; 0x36
 800087e:	605a      	str	r2, [r3, #4]
            ball.dir = still;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <checkGameOver+0x64>)
 8000882:	2208      	movs	r2, #8
 8000884:	721a      	strb	r2, [r3, #8]
            gameEnd();
 8000886:	f7ff ff2f 	bl	80006e8 <gameEnd>
    for (int j = 0; j < 10; j++) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3301      	adds	r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b09      	cmp	r3, #9
 8000894:	ddde      	ble.n	8000854 <checkGameOver+0xc>
            //////QD << "Game Over, noob";
        }
    }
}
 8000896:	bf00      	nop
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000e8 	.word	0x200000e8
 80008a4:	20000002 	.word	0x20000002
 80008a8:	20000030 	.word	0x20000030
 80008ac:	20000034 	.word	0x20000034

080008b0 <checkBrickHit>:

void checkBrickHit() {
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af02      	add	r7, sp, #8
    uint8_t bricksHit = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	71fb      	strb	r3, [r7, #7]
    switch (ball.dir) {
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <checkBrickHit+0x3c>)
 80008bc:	7a1b      	ldrb	r3, [r3, #8]
 80008be:	3b01      	subs	r3, #1
 80008c0:	2b07      	cmp	r3, #7
 80008c2:	f201 8240 	bhi.w	8001d46 <checkBrickHit+0x1496>
 80008c6:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <checkBrickHit+0x1c>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	08000e19 	.word	0x08000e19
 80008d0:	08001d47 	.word	0x08001d47
 80008d4:	08001341 	.word	0x08001341
 80008d8:	08001d47 	.word	0x08001d47
 80008dc:	0800184d 	.word	0x0800184d
 80008e0:	08001d47 	.word	0x08001d47
 80008e4:	080008f1 	.word	0x080008f1
 80008e8:	08001d51 	.word	0x08001d51
 80008ec:	20000034 	.word	0x20000034
    case NW :
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 80008f0:	4bb6      	ldr	r3, [pc, #728]	; (8000bcc <checkBrickHit+0x31c>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f1a3 0209 	sub.w	r2, r3, #9
 80008f8:	4bb4      	ldr	r3, [pc, #720]	; (8000bcc <checkBrickHit+0x31c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	da00      	bge.n	8000902 <checkBrickHit+0x52>
 8000900:	3307      	adds	r3, #7
 8000902:	10db      	asrs	r3, r3, #3
 8000904:	4618      	mov	r0, r3
 8000906:	49b2      	ldr	r1, [pc, #712]	; (8000bd0 <checkBrickHit+0x320>)
 8000908:	4613      	mov	r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4413      	add	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4403      	add	r3, r0
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	440b      	add	r3, r1
 8000916:	3308      	adds	r3, #8
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b01      	cmp	r3, #1
 800091c:	f040 80b4 	bne.w	8000a88 <checkBrickHit+0x1d8>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000920:	4baa      	ldr	r3, [pc, #680]	; (8000bcc <checkBrickHit+0x31c>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f1a3 0209 	sub.w	r2, r3, #9
 8000928:	4ba8      	ldr	r3, [pc, #672]	; (8000bcc <checkBrickHit+0x31c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	da00      	bge.n	8000932 <checkBrickHit+0x82>
 8000930:	3307      	adds	r3, #7
 8000932:	10db      	asrs	r3, r3, #3
 8000934:	4619      	mov	r1, r3
 8000936:	48a6      	ldr	r0, [pc, #664]	; (8000bd0 <checkBrickHit+0x320>)
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	440b      	add	r3, r1
 8000942:	011b      	lsls	r3, r3, #4
 8000944:	4403      	add	r3, r0
 8000946:	330c      	adds	r3, #12
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	1e58      	subs	r0, r3, #1
 800094c:	4ca0      	ldr	r4, [pc, #640]	; (8000bd0 <checkBrickHit+0x320>)
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	440b      	add	r3, r1
 8000958:	011b      	lsls	r3, r3, #4
 800095a:	4423      	add	r3, r4
 800095c:	330c      	adds	r3, #12
 800095e:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000960:	4b9a      	ldr	r3, [pc, #616]	; (8000bcc <checkBrickHit+0x31c>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f1a3 0209 	sub.w	r2, r3, #9
 8000968:	4b98      	ldr	r3, [pc, #608]	; (8000bcc <checkBrickHit+0x31c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	da00      	bge.n	8000972 <checkBrickHit+0xc2>
 8000970:	3307      	adds	r3, #7
 8000972:	10db      	asrs	r3, r3, #3
 8000974:	4618      	mov	r0, r3
 8000976:	4996      	ldr	r1, [pc, #600]	; (8000bd0 <checkBrickHit+0x320>)
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4403      	add	r3, r0
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	440b      	add	r3, r1
 8000986:	330c      	adds	r3, #12
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	dc29      	bgt.n	80009e2 <checkBrickHit+0x132>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 800098e:	4b8f      	ldr	r3, [pc, #572]	; (8000bcc <checkBrickHit+0x31c>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f1a3 0209 	sub.w	r2, r3, #9
 8000996:	4b8d      	ldr	r3, [pc, #564]	; (8000bcc <checkBrickHit+0x31c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	da00      	bge.n	80009a0 <checkBrickHit+0xf0>
 800099e:	3307      	adds	r3, #7
 80009a0:	10db      	asrs	r3, r3, #3
 80009a2:	4618      	mov	r0, r3
 80009a4:	498a      	ldr	r1, [pc, #552]	; (8000bd0 <checkBrickHit+0x320>)
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	4403      	add	r3, r0
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	440b      	add	r3, r1
 80009b4:	3308      	adds	r3, #8
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
                points++;
 80009ba:	4b86      	ldr	r3, [pc, #536]	; (8000bd4 <checkBrickHit+0x324>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b84      	ldr	r3, [pc, #528]	; (8000bd4 <checkBrickHit+0x324>)
 80009c4:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 80009c6:	4b81      	ldr	r3, [pc, #516]	; (8000bcc <checkBrickHit+0x31c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	da00      	bge.n	80009d0 <checkBrickHit+0x120>
 80009ce:	3307      	adds	r3, #7
 80009d0:	10db      	asrs	r3, r3, #3
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b7d      	ldr	r3, [pc, #500]	; (8000bcc <checkBrickHit+0x31c>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	3b09      	subs	r3, #9
 80009da:	4619      	mov	r1, r3
 80009dc:	4610      	mov	r0, r2
 80009de:	f001 f9cd 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 80009e2:	4b7a      	ldr	r3, [pc, #488]	; (8000bcc <checkBrickHit+0x31c>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f1a3 0209 	sub.w	r2, r3, #9
 80009ea:	4b78      	ldr	r3, [pc, #480]	; (8000bcc <checkBrickHit+0x31c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	da00      	bge.n	80009f4 <checkBrickHit+0x144>
 80009f2:	3307      	adds	r3, #7
 80009f4:	10db      	asrs	r3, r3, #3
 80009f6:	4618      	mov	r0, r3
 80009f8:	4975      	ldr	r1, [pc, #468]	; (8000bd0 <checkBrickHit+0x320>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4403      	add	r3, r0
 8000a04:	011b      	lsls	r3, r3, #4
 8000a06:	440b      	add	r3, r1
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	b298      	uxth	r0, r3
 8000a10:	4b6e      	ldr	r3, [pc, #440]	; (8000bcc <checkBrickHit+0x31c>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f1a3 0209 	sub.w	r2, r3, #9
 8000a18:	4b6c      	ldr	r3, [pc, #432]	; (8000bcc <checkBrickHit+0x31c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	da00      	bge.n	8000a22 <checkBrickHit+0x172>
 8000a20:	3307      	adds	r3, #7
 8000a22:	10db      	asrs	r3, r3, #3
 8000a24:	461c      	mov	r4, r3
 8000a26:	496a      	ldr	r1, [pc, #424]	; (8000bd0 <checkBrickHit+0x320>)
 8000a28:	4613      	mov	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4423      	add	r3, r4
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	440b      	add	r3, r1
 8000a36:	3304      	adds	r3, #4
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	b299      	uxth	r1, r3
 8000a40:	4b62      	ldr	r3, [pc, #392]	; (8000bcc <checkBrickHit+0x31c>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f1a3 0209 	sub.w	r2, r3, #9
 8000a48:	4b60      	ldr	r3, [pc, #384]	; (8000bcc <checkBrickHit+0x31c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	da00      	bge.n	8000a52 <checkBrickHit+0x1a2>
 8000a50:	3307      	adds	r3, #7
 8000a52:	10db      	asrs	r3, r3, #3
 8000a54:	461d      	mov	r5, r3
 8000a56:	4c5e      	ldr	r4, [pc, #376]	; (8000bd0 <checkBrickHit+0x320>)
 8000a58:	4613      	mov	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	442b      	add	r3, r5
 8000a62:	011b      	lsls	r3, r3, #4
 8000a64:	4423      	add	r3, r4
 8000a66:	330c      	adds	r3, #12
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a5b      	ldr	r2, [pc, #364]	; (8000bd8 <checkBrickHit+0x328>)
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2304      	movs	r3, #4
 8000a76:	2220      	movs	r2, #32
 8000a78:	f004 f910 	bl	8004c9c <Displ_FillArea>
            bricksHit++;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	71fb      	strb	r3, [r7, #7]
            ball.dir = SW;
 8000a82:	4b52      	ldr	r3, [pc, #328]	; (8000bcc <checkBrickHit+0x31c>)
 8000a84:	2205      	movs	r2, #5
 8000a86:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 8000a88:	4b50      	ldr	r3, [pc, #320]	; (8000bcc <checkBrickHit+0x31c>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f1a3 0208 	sub.w	r2, r3, #8
 8000a90:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <checkBrickHit+0x31c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	da00      	bge.n	8000a9c <checkBrickHit+0x1ec>
 8000a9a:	3307      	adds	r3, #7
 8000a9c:	10db      	asrs	r3, r3, #3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	494b      	ldr	r1, [pc, #300]	; (8000bd0 <checkBrickHit+0x320>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4403      	add	r3, r0
 8000aac:	011b      	lsls	r3, r3, #4
 8000aae:	440b      	add	r3, r1
 8000ab0:	3308      	adds	r3, #8
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	f040 80d0 	bne.w	8000c5a <checkBrickHit+0x3aa>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8000aba:	4b44      	ldr	r3, [pc, #272]	; (8000bcc <checkBrickHit+0x31c>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f1a3 0208 	sub.w	r2, r3, #8
 8000ac2:	4b42      	ldr	r3, [pc, #264]	; (8000bcc <checkBrickHit+0x31c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	da00      	bge.n	8000ace <checkBrickHit+0x21e>
 8000acc:	3307      	adds	r3, #7
 8000ace:	10db      	asrs	r3, r3, #3
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	483f      	ldr	r0, [pc, #252]	; (8000bd0 <checkBrickHit+0x320>)
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	440b      	add	r3, r1
 8000ade:	011b      	lsls	r3, r3, #4
 8000ae0:	4403      	add	r3, r0
 8000ae2:	330c      	adds	r3, #12
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1e58      	subs	r0, r3, #1
 8000ae8:	4c39      	ldr	r4, [pc, #228]	; (8000bd0 <checkBrickHit+0x320>)
 8000aea:	4613      	mov	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4413      	add	r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	440b      	add	r3, r1
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	4423      	add	r3, r4
 8000af8:	330c      	adds	r3, #12
 8000afa:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8000afc:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <checkBrickHit+0x31c>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f1a3 0208 	sub.w	r2, r3, #8
 8000b04:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <checkBrickHit+0x31c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	da00      	bge.n	8000b10 <checkBrickHit+0x260>
 8000b0e:	3307      	adds	r3, #7
 8000b10:	10db      	asrs	r3, r3, #3
 8000b12:	4618      	mov	r0, r3
 8000b14:	492e      	ldr	r1, [pc, #184]	; (8000bd0 <checkBrickHit+0x320>)
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	4403      	add	r3, r0
 8000b20:	011b      	lsls	r3, r3, #4
 8000b22:	440b      	add	r3, r1
 8000b24:	330c      	adds	r3, #12
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	dc2b      	bgt.n	8000b84 <checkBrickHit+0x2d4>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8000b2c:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <checkBrickHit+0x31c>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f1a3 0208 	sub.w	r2, r3, #8
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <checkBrickHit+0x31c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	da00      	bge.n	8000b40 <checkBrickHit+0x290>
 8000b3e:	3307      	adds	r3, #7
 8000b40:	10db      	asrs	r3, r3, #3
 8000b42:	4618      	mov	r0, r3
 8000b44:	4922      	ldr	r1, [pc, #136]	; (8000bd0 <checkBrickHit+0x320>)
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4403      	add	r3, r0
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	440b      	add	r3, r1
 8000b54:	3308      	adds	r3, #8
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
                points++;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <checkBrickHit+0x324>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <checkBrickHit+0x324>)
 8000b64:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <checkBrickHit+0x31c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	da00      	bge.n	8000b72 <checkBrickHit+0x2c2>
 8000b70:	3307      	adds	r3, #7
 8000b72:	10db      	asrs	r3, r3, #3
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <checkBrickHit+0x31c>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	3b08      	subs	r3, #8
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4610      	mov	r0, r2
 8000b80:	f001 f8fc 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <checkBrickHit+0x31c>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f1a3 0208 	sub.w	r2, r3, #8
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <checkBrickHit+0x31c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da00      	bge.n	8000b98 <checkBrickHit+0x2e8>
 8000b96:	3307      	adds	r3, #7
 8000b98:	10db      	asrs	r3, r3, #3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <checkBrickHit+0x320>)
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4403      	add	r3, r0
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	440b      	add	r3, r1
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	b298      	uxth	r0, r3
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <checkBrickHit+0x31c>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f1a3 0208 	sub.w	r2, r3, #8
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <checkBrickHit+0x31c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	da0a      	bge.n	8000bdc <checkBrickHit+0x32c>
 8000bc6:	3307      	adds	r3, #7
 8000bc8:	e008      	b.n	8000bdc <checkBrickHit+0x32c>
 8000bca:	bf00      	nop
 8000bcc:	20000034 	.word	0x20000034
 8000bd0:	200000e8 	.word	0x200000e8
 8000bd4:	20001ee8 	.word	0x20001ee8
 8000bd8:	20000004 	.word	0x20000004
 8000bdc:	10db      	asrs	r3, r3, #3
 8000bde:	461c      	mov	r4, r3
 8000be0:	4989      	ldr	r1, [pc, #548]	; (8000e08 <checkBrickHit+0x558>)
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4423      	add	r3, r4
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	440b      	add	r3, r1
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	b299      	uxth	r1, r3
 8000bfa:	4b84      	ldr	r3, [pc, #528]	; (8000e0c <checkBrickHit+0x55c>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f1a3 0208 	sub.w	r2, r3, #8
 8000c02:	4b82      	ldr	r3, [pc, #520]	; (8000e0c <checkBrickHit+0x55c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	da00      	bge.n	8000c0e <checkBrickHit+0x35e>
 8000c0c:	3307      	adds	r3, #7
 8000c0e:	10db      	asrs	r3, r3, #3
 8000c10:	461d      	mov	r5, r3
 8000c12:	4c7d      	ldr	r4, [pc, #500]	; (8000e08 <checkBrickHit+0x558>)
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	442b      	add	r3, r5
 8000c1e:	011b      	lsls	r3, r3, #4
 8000c20:	4423      	add	r3, r4
 8000c22:	330c      	adds	r3, #12
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a7a      	ldr	r2, [pc, #488]	; (8000e10 <checkBrickHit+0x560>)
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2304      	movs	r3, #4
 8000c32:	2220      	movs	r2, #32
 8000c34:	f004 f832 	bl	8004c9c <Displ_FillArea>
            bricksHit++;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NW) {
 8000c3e:	4b73      	ldr	r3, [pc, #460]	; (8000e0c <checkBrickHit+0x55c>)
 8000c40:	7a1b      	ldrb	r3, [r3, #8]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	d102      	bne.n	8000c4c <checkBrickHit+0x39c>
                ball.dir = NE;
 8000c46:	4b71      	ldr	r3, [pc, #452]	; (8000e0c <checkBrickHit+0x55c>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SW) {
 8000c4c:	4b6f      	ldr	r3, [pc, #444]	; (8000e0c <checkBrickHit+0x55c>)
 8000c4e:	7a1b      	ldrb	r3, [r3, #8]
 8000c50:	2b05      	cmp	r3, #5
 8000c52:	d102      	bne.n	8000c5a <checkBrickHit+0x3aa>
                ball.dir = SE;
 8000c54:	4b6d      	ldr	r3, [pc, #436]	; (8000e0c <checkBrickHit+0x55c>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f041 8079 	bne.w	8001d54 <checkBrickHit+0x14a4>
            if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible == 1) {
 8000c62:	4b6a      	ldr	r3, [pc, #424]	; (8000e0c <checkBrickHit+0x55c>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f1a3 0209 	sub.w	r2, r3, #9
 8000c6a:	4b68      	ldr	r3, [pc, #416]	; (8000e0c <checkBrickHit+0x55c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	da00      	bge.n	8000c76 <checkBrickHit+0x3c6>
 8000c74:	3307      	adds	r3, #7
 8000c76:	10db      	asrs	r3, r3, #3
 8000c78:	4618      	mov	r0, r3
 8000c7a:	4963      	ldr	r1, [pc, #396]	; (8000e08 <checkBrickHit+0x558>)
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4403      	add	r3, r0
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	440b      	add	r3, r1
 8000c8a:	3308      	adds	r3, #8
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	f041 8060 	bne.w	8001d54 <checkBrickHit+0x14a4>
                bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness--;
 8000c94:	4b5d      	ldr	r3, [pc, #372]	; (8000e0c <checkBrickHit+0x55c>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f1a3 0209 	sub.w	r2, r3, #9
 8000c9c:	4b5b      	ldr	r3, [pc, #364]	; (8000e0c <checkBrickHit+0x55c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	da00      	bge.n	8000ca8 <checkBrickHit+0x3f8>
 8000ca6:	3307      	adds	r3, #7
 8000ca8:	10db      	asrs	r3, r3, #3
 8000caa:	4619      	mov	r1, r3
 8000cac:	4856      	ldr	r0, [pc, #344]	; (8000e08 <checkBrickHit+0x558>)
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	440b      	add	r3, r1
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	4403      	add	r3, r0
 8000cbc:	330c      	adds	r3, #12
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	1e58      	subs	r0, r3, #1
 8000cc2:	4c51      	ldr	r4, [pc, #324]	; (8000e08 <checkBrickHit+0x558>)
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	440b      	add	r3, r1
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	4423      	add	r3, r4
 8000cd2:	330c      	adds	r3, #12
 8000cd4:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8000cd6:	4b4d      	ldr	r3, [pc, #308]	; (8000e0c <checkBrickHit+0x55c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f1a3 0209 	sub.w	r2, r3, #9
 8000cde:	4b4b      	ldr	r3, [pc, #300]	; (8000e0c <checkBrickHit+0x55c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	da00      	bge.n	8000cea <checkBrickHit+0x43a>
 8000ce8:	3307      	adds	r3, #7
 8000cea:	10db      	asrs	r3, r3, #3
 8000cec:	4618      	mov	r0, r3
 8000cee:	4946      	ldr	r1, [pc, #280]	; (8000e08 <checkBrickHit+0x558>)
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4403      	add	r3, r0
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	440b      	add	r3, r1
 8000cfe:	330c      	adds	r3, #12
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dc2b      	bgt.n	8000d5e <checkBrickHit+0x4ae>
                    bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible = 0;
 8000d06:	4b41      	ldr	r3, [pc, #260]	; (8000e0c <checkBrickHit+0x55c>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f1a3 0209 	sub.w	r2, r3, #9
 8000d0e:	4b3f      	ldr	r3, [pc, #252]	; (8000e0c <checkBrickHit+0x55c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	da00      	bge.n	8000d1a <checkBrickHit+0x46a>
 8000d18:	3307      	adds	r3, #7
 8000d1a:	10db      	asrs	r3, r3, #3
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	493a      	ldr	r1, [pc, #232]	; (8000e08 <checkBrickHit+0x558>)
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4403      	add	r3, r0
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3308      	adds	r3, #8
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
                    points++;
 8000d34:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <checkBrickHit+0x564>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <checkBrickHit+0x564>)
 8000d3e:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    dropPowerUp((ball.x - 1)/8, ball.y - 1 - 8);
 8000d40:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <checkBrickHit+0x55c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	da00      	bge.n	8000d4c <checkBrickHit+0x49c>
 8000d4a:	3307      	adds	r3, #7
 8000d4c:	10db      	asrs	r3, r3, #3
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <checkBrickHit+0x55c>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	3b09      	subs	r3, #9
 8000d56:	4619      	mov	r1, r3
 8000d58:	4610      	mov	r0, r2
 8000d5a:	f001 f80f 	bl	8001d7c <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness]);
 8000d5e:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <checkBrickHit+0x55c>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f1a3 0209 	sub.w	r2, r3, #9
 8000d66:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <checkBrickHit+0x55c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	da00      	bge.n	8000d72 <checkBrickHit+0x4c2>
 8000d70:	3307      	adds	r3, #7
 8000d72:	10db      	asrs	r3, r3, #3
 8000d74:	4618      	mov	r0, r3
 8000d76:	4924      	ldr	r1, [pc, #144]	; (8000e08 <checkBrickHit+0x558>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4403      	add	r3, r0
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	440b      	add	r3, r1
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	b298      	uxth	r0, r3
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <checkBrickHit+0x55c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f1a3 0209 	sub.w	r2, r3, #9
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <checkBrickHit+0x55c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	da00      	bge.n	8000da2 <checkBrickHit+0x4f2>
 8000da0:	3307      	adds	r3, #7
 8000da2:	10db      	asrs	r3, r3, #3
 8000da4:	461c      	mov	r4, r3
 8000da6:	4918      	ldr	r1, [pc, #96]	; (8000e08 <checkBrickHit+0x558>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4423      	add	r3, r4
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	440b      	add	r3, r1
 8000db6:	3304      	adds	r3, #4
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	b299      	uxth	r1, r3
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <checkBrickHit+0x55c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f1a3 0209 	sub.w	r2, r3, #9
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <checkBrickHit+0x55c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	da00      	bge.n	8000dd4 <checkBrickHit+0x524>
 8000dd2:	3307      	adds	r3, #7
 8000dd4:	10db      	asrs	r3, r3, #3
 8000dd6:	461d      	mov	r5, r3
 8000dd8:	4c0b      	ldr	r4, [pc, #44]	; (8000e08 <checkBrickHit+0x558>)
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	442b      	add	r3, r5
 8000de4:	011b      	lsls	r3, r3, #4
 8000de6:	4423      	add	r3, r4
 8000de8:	330c      	adds	r3, #12
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <checkBrickHit+0x560>)
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2304      	movs	r3, #4
 8000df8:	2220      	movs	r2, #32
 8000dfa:	f003 ff4f 	bl	8004c9c <Displ_FillArea>
                ball.dir = SE;
 8000dfe:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <checkBrickHit+0x55c>)
 8000e00:	2203      	movs	r2, #3
 8000e02:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8000e04:	f000 bfa6 	b.w	8001d54 <checkBrickHit+0x14a4>
 8000e08:	200000e8 	.word	0x200000e8
 8000e0c:	20000034 	.word	0x20000034
 8000e10:	20000004 	.word	0x20000004
 8000e14:	20001ee8 	.word	0x20001ee8
    case NE:
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 8000e18:	4bb6      	ldr	r3, [pc, #728]	; (80010f4 <checkBrickHit+0x844>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f1a3 0209 	sub.w	r2, r3, #9
 8000e20:	4bb4      	ldr	r3, [pc, #720]	; (80010f4 <checkBrickHit+0x844>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da00      	bge.n	8000e2a <checkBrickHit+0x57a>
 8000e28:	3307      	adds	r3, #7
 8000e2a:	10db      	asrs	r3, r3, #3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	49b2      	ldr	r1, [pc, #712]	; (80010f8 <checkBrickHit+0x848>)
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4403      	add	r3, r0
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	440b      	add	r3, r1
 8000e3e:	3308      	adds	r3, #8
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	f040 80b4 	bne.w	8000fb0 <checkBrickHit+0x700>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000e48:	4baa      	ldr	r3, [pc, #680]	; (80010f4 <checkBrickHit+0x844>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f1a3 0209 	sub.w	r2, r3, #9
 8000e50:	4ba8      	ldr	r3, [pc, #672]	; (80010f4 <checkBrickHit+0x844>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	da00      	bge.n	8000e5a <checkBrickHit+0x5aa>
 8000e58:	3307      	adds	r3, #7
 8000e5a:	10db      	asrs	r3, r3, #3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	48a6      	ldr	r0, [pc, #664]	; (80010f8 <checkBrickHit+0x848>)
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	440b      	add	r3, r1
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	4403      	add	r3, r0
 8000e6e:	330c      	adds	r3, #12
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	1e58      	subs	r0, r3, #1
 8000e74:	4ca0      	ldr	r4, [pc, #640]	; (80010f8 <checkBrickHit+0x848>)
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	440b      	add	r3, r1
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	4423      	add	r3, r4
 8000e84:	330c      	adds	r3, #12
 8000e86:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000e88:	4b9a      	ldr	r3, [pc, #616]	; (80010f4 <checkBrickHit+0x844>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f1a3 0209 	sub.w	r2, r3, #9
 8000e90:	4b98      	ldr	r3, [pc, #608]	; (80010f4 <checkBrickHit+0x844>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	da00      	bge.n	8000e9a <checkBrickHit+0x5ea>
 8000e98:	3307      	adds	r3, #7
 8000e9a:	10db      	asrs	r3, r3, #3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	4996      	ldr	r1, [pc, #600]	; (80010f8 <checkBrickHit+0x848>)
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4403      	add	r3, r0
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	440b      	add	r3, r1
 8000eae:	330c      	adds	r3, #12
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	dc29      	bgt.n	8000f0a <checkBrickHit+0x65a>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 8000eb6:	4b8f      	ldr	r3, [pc, #572]	; (80010f4 <checkBrickHit+0x844>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f1a3 0209 	sub.w	r2, r3, #9
 8000ebe:	4b8d      	ldr	r3, [pc, #564]	; (80010f4 <checkBrickHit+0x844>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	da00      	bge.n	8000ec8 <checkBrickHit+0x618>
 8000ec6:	3307      	adds	r3, #7
 8000ec8:	10db      	asrs	r3, r3, #3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	498a      	ldr	r1, [pc, #552]	; (80010f8 <checkBrickHit+0x848>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4403      	add	r3, r0
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	440b      	add	r3, r1
 8000edc:	3308      	adds	r3, #8
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
                points++;
 8000ee2:	4b86      	ldr	r3, [pc, #536]	; (80010fc <checkBrickHit+0x84c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b84      	ldr	r3, [pc, #528]	; (80010fc <checkBrickHit+0x84c>)
 8000eec:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 8000eee:	4b81      	ldr	r3, [pc, #516]	; (80010f4 <checkBrickHit+0x844>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	da00      	bge.n	8000ef8 <checkBrickHit+0x648>
 8000ef6:	3307      	adds	r3, #7
 8000ef8:	10db      	asrs	r3, r3, #3
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b7d      	ldr	r3, [pc, #500]	; (80010f4 <checkBrickHit+0x844>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	3b09      	subs	r3, #9
 8000f02:	4619      	mov	r1, r3
 8000f04:	4610      	mov	r0, r2
 8000f06:	f000 ff39 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 8000f0a:	4b7a      	ldr	r3, [pc, #488]	; (80010f4 <checkBrickHit+0x844>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f1a3 0209 	sub.w	r2, r3, #9
 8000f12:	4b78      	ldr	r3, [pc, #480]	; (80010f4 <checkBrickHit+0x844>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da00      	bge.n	8000f1c <checkBrickHit+0x66c>
 8000f1a:	3307      	adds	r3, #7
 8000f1c:	10db      	asrs	r3, r3, #3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	4975      	ldr	r1, [pc, #468]	; (80010f8 <checkBrickHit+0x848>)
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4403      	add	r3, r0
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	440b      	add	r3, r1
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	b298      	uxth	r0, r3
 8000f38:	4b6e      	ldr	r3, [pc, #440]	; (80010f4 <checkBrickHit+0x844>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f1a3 0209 	sub.w	r2, r3, #9
 8000f40:	4b6c      	ldr	r3, [pc, #432]	; (80010f4 <checkBrickHit+0x844>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	da00      	bge.n	8000f4a <checkBrickHit+0x69a>
 8000f48:	3307      	adds	r3, #7
 8000f4a:	10db      	asrs	r3, r3, #3
 8000f4c:	461c      	mov	r4, r3
 8000f4e:	496a      	ldr	r1, [pc, #424]	; (80010f8 <checkBrickHit+0x848>)
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4423      	add	r3, r4
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	440b      	add	r3, r1
 8000f5e:	3304      	adds	r3, #4
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	b299      	uxth	r1, r3
 8000f68:	4b62      	ldr	r3, [pc, #392]	; (80010f4 <checkBrickHit+0x844>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f1a3 0209 	sub.w	r2, r3, #9
 8000f70:	4b60      	ldr	r3, [pc, #384]	; (80010f4 <checkBrickHit+0x844>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da00      	bge.n	8000f7a <checkBrickHit+0x6ca>
 8000f78:	3307      	adds	r3, #7
 8000f7a:	10db      	asrs	r3, r3, #3
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	4c5e      	ldr	r4, [pc, #376]	; (80010f8 <checkBrickHit+0x848>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	442b      	add	r3, r5
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	4423      	add	r3, r4
 8000f8e:	330c      	adds	r3, #12
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a5b      	ldr	r2, [pc, #364]	; (8001100 <checkBrickHit+0x850>)
 8000f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	f003 fe7c 	bl	8004c9c <Displ_FillArea>
            bricksHit++;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	71fb      	strb	r3, [r7, #7]
            ball.dir = SE;
 8000faa:	4b52      	ldr	r3, [pc, #328]	; (80010f4 <checkBrickHit+0x844>)
 8000fac:	2203      	movs	r2, #3
 8000fae:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 8000fb0:	4b50      	ldr	r3, [pc, #320]	; (80010f4 <checkBrickHit+0x844>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f1a3 0208 	sub.w	r2, r3, #8
 8000fb8:	4b4e      	ldr	r3, [pc, #312]	; (80010f4 <checkBrickHit+0x844>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da00      	bge.n	8000fc4 <checkBrickHit+0x714>
 8000fc2:	3307      	adds	r3, #7
 8000fc4:	10db      	asrs	r3, r3, #3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	494b      	ldr	r1, [pc, #300]	; (80010f8 <checkBrickHit+0x848>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4403      	add	r3, r0
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	440b      	add	r3, r1
 8000fd8:	3308      	adds	r3, #8
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	f040 80d0 	bne.w	8001182 <checkBrickHit+0x8d2>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 8000fe2:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <checkBrickHit+0x844>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f1a3 0208 	sub.w	r2, r3, #8
 8000fea:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <checkBrickHit+0x844>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da00      	bge.n	8000ff6 <checkBrickHit+0x746>
 8000ff4:	3307      	adds	r3, #7
 8000ff6:	10db      	asrs	r3, r3, #3
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	483f      	ldr	r0, [pc, #252]	; (80010f8 <checkBrickHit+0x848>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	440b      	add	r3, r1
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4403      	add	r3, r0
 800100a:	330c      	adds	r3, #12
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	1e58      	subs	r0, r3, #1
 8001010:	4c39      	ldr	r4, [pc, #228]	; (80010f8 <checkBrickHit+0x848>)
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	440b      	add	r3, r1
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	4423      	add	r3, r4
 8001020:	330c      	adds	r3, #12
 8001022:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <checkBrickHit+0x844>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f1a3 0208 	sub.w	r2, r3, #8
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <checkBrickHit+0x844>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	da00      	bge.n	8001038 <checkBrickHit+0x788>
 8001036:	3307      	adds	r3, #7
 8001038:	10db      	asrs	r3, r3, #3
 800103a:	4618      	mov	r0, r3
 800103c:	492e      	ldr	r1, [pc, #184]	; (80010f8 <checkBrickHit+0x848>)
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4403      	add	r3, r0
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	440b      	add	r3, r1
 800104c:	330c      	adds	r3, #12
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	dc2b      	bgt.n	80010ac <checkBrickHit+0x7fc>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <checkBrickHit+0x844>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f1a3 0208 	sub.w	r2, r3, #8
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <checkBrickHit+0x844>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	da00      	bge.n	8001068 <checkBrickHit+0x7b8>
 8001066:	3307      	adds	r3, #7
 8001068:	10db      	asrs	r3, r3, #3
 800106a:	4618      	mov	r0, r3
 800106c:	4922      	ldr	r1, [pc, #136]	; (80010f8 <checkBrickHit+0x848>)
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4403      	add	r3, r0
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	440b      	add	r3, r1
 800107c:	3308      	adds	r3, #8
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
                points++;
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <checkBrickHit+0x84c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <checkBrickHit+0x84c>)
 800108c:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <checkBrickHit+0x844>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	da00      	bge.n	800109a <checkBrickHit+0x7ea>
 8001098:	3307      	adds	r3, #7
 800109a:	10db      	asrs	r3, r3, #3
 800109c:	461a      	mov	r2, r3
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <checkBrickHit+0x844>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	3b08      	subs	r3, #8
 80010a4:	4619      	mov	r1, r3
 80010a6:	4610      	mov	r0, r2
 80010a8:	f000 fe68 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <checkBrickHit+0x844>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f1a3 0208 	sub.w	r2, r3, #8
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <checkBrickHit+0x844>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da00      	bge.n	80010c0 <checkBrickHit+0x810>
 80010be:	3307      	adds	r3, #7
 80010c0:	10db      	asrs	r3, r3, #3
 80010c2:	4618      	mov	r0, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <checkBrickHit+0x848>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4403      	add	r3, r0
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	440b      	add	r3, r1
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	b298      	uxth	r0, r3
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <checkBrickHit+0x844>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f1a3 0208 	sub.w	r2, r3, #8
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <checkBrickHit+0x844>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	da0a      	bge.n	8001104 <checkBrickHit+0x854>
 80010ee:	3307      	adds	r3, #7
 80010f0:	e008      	b.n	8001104 <checkBrickHit+0x854>
 80010f2:	bf00      	nop
 80010f4:	20000034 	.word	0x20000034
 80010f8:	200000e8 	.word	0x200000e8
 80010fc:	20001ee8 	.word	0x20001ee8
 8001100:	20000004 	.word	0x20000004
 8001104:	10db      	asrs	r3, r3, #3
 8001106:	461c      	mov	r4, r3
 8001108:	4989      	ldr	r1, [pc, #548]	; (8001330 <checkBrickHit+0xa80>)
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4423      	add	r3, r4
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	440b      	add	r3, r1
 8001118:	3304      	adds	r3, #4
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	b299      	uxth	r1, r3
 8001122:	4b84      	ldr	r3, [pc, #528]	; (8001334 <checkBrickHit+0xa84>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f1a3 0208 	sub.w	r2, r3, #8
 800112a:	4b82      	ldr	r3, [pc, #520]	; (8001334 <checkBrickHit+0xa84>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	da00      	bge.n	8001136 <checkBrickHit+0x886>
 8001134:	3307      	adds	r3, #7
 8001136:	10db      	asrs	r3, r3, #3
 8001138:	461d      	mov	r5, r3
 800113a:	4c7d      	ldr	r4, [pc, #500]	; (8001330 <checkBrickHit+0xa80>)
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	442b      	add	r3, r5
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	4423      	add	r3, r4
 800114a:	330c      	adds	r3, #12
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a7a      	ldr	r2, [pc, #488]	; (8001338 <checkBrickHit+0xa88>)
 8001150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001154:	b29b      	uxth	r3, r3
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2304      	movs	r3, #4
 800115a:	2220      	movs	r2, #32
 800115c:	f003 fd9e 	bl	8004c9c <Displ_FillArea>
            bricksHit++;
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3301      	adds	r3, #1
 8001164:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NE) {
 8001166:	4b73      	ldr	r3, [pc, #460]	; (8001334 <checkBrickHit+0xa84>)
 8001168:	7a1b      	ldrb	r3, [r3, #8]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d102      	bne.n	8001174 <checkBrickHit+0x8c4>
                ball.dir = NW;
 800116e:	4b71      	ldr	r3, [pc, #452]	; (8001334 <checkBrickHit+0xa84>)
 8001170:	2207      	movs	r2, #7
 8001172:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SE) {
 8001174:	4b6f      	ldr	r3, [pc, #444]	; (8001334 <checkBrickHit+0xa84>)
 8001176:	7a1b      	ldrb	r3, [r3, #8]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d102      	bne.n	8001182 <checkBrickHit+0x8d2>
                ball.dir = SW;
 800117c:	4b6d      	ldr	r3, [pc, #436]	; (8001334 <checkBrickHit+0xa84>)
 800117e:	2205      	movs	r2, #5
 8001180:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	f040 85e7 	bne.w	8001d58 <checkBrickHit+0x14a8>
            if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible == 1) {
 800118a:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <checkBrickHit+0xa84>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f1a3 0209 	sub.w	r2, r3, #9
 8001192:	4b68      	ldr	r3, [pc, #416]	; (8001334 <checkBrickHit+0xa84>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	da00      	bge.n	800119e <checkBrickHit+0x8ee>
 800119c:	3307      	adds	r3, #7
 800119e:	10db      	asrs	r3, r3, #3
 80011a0:	4618      	mov	r0, r3
 80011a2:	4963      	ldr	r1, [pc, #396]	; (8001330 <checkBrickHit+0xa80>)
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4403      	add	r3, r0
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	440b      	add	r3, r1
 80011b2:	3308      	adds	r3, #8
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	f040 85ce 	bne.w	8001d58 <checkBrickHit+0x14a8>
                bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness--;
 80011bc:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <checkBrickHit+0xa84>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f1a3 0209 	sub.w	r2, r3, #9
 80011c4:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <checkBrickHit+0xa84>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da00      	bge.n	80011d0 <checkBrickHit+0x920>
 80011ce:	3307      	adds	r3, #7
 80011d0:	10db      	asrs	r3, r3, #3
 80011d2:	4619      	mov	r1, r3
 80011d4:	4856      	ldr	r0, [pc, #344]	; (8001330 <checkBrickHit+0xa80>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	440b      	add	r3, r1
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	4403      	add	r3, r0
 80011e4:	330c      	adds	r3, #12
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	1e58      	subs	r0, r3, #1
 80011ea:	4c51      	ldr	r4, [pc, #324]	; (8001330 <checkBrickHit+0xa80>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	440b      	add	r3, r1
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	4423      	add	r3, r4
 80011fa:	330c      	adds	r3, #12
 80011fc:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness <= 0) {
 80011fe:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <checkBrickHit+0xa84>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f1a3 0209 	sub.w	r2, r3, #9
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <checkBrickHit+0xa84>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	da00      	bge.n	8001212 <checkBrickHit+0x962>
 8001210:	3307      	adds	r3, #7
 8001212:	10db      	asrs	r3, r3, #3
 8001214:	4618      	mov	r0, r3
 8001216:	4946      	ldr	r1, [pc, #280]	; (8001330 <checkBrickHit+0xa80>)
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4403      	add	r3, r0
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	440b      	add	r3, r1
 8001226:	330c      	adds	r3, #12
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	dc2b      	bgt.n	8001286 <checkBrickHit+0x9d6>
                    bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible = 0;
 800122e:	4b41      	ldr	r3, [pc, #260]	; (8001334 <checkBrickHit+0xa84>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f1a3 0209 	sub.w	r2, r3, #9
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <checkBrickHit+0xa84>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	da00      	bge.n	8001242 <checkBrickHit+0x992>
 8001240:	3307      	adds	r3, #7
 8001242:	10db      	asrs	r3, r3, #3
 8001244:	4618      	mov	r0, r3
 8001246:	493a      	ldr	r1, [pc, #232]	; (8001330 <checkBrickHit+0xa80>)
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4403      	add	r3, r0
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	440b      	add	r3, r1
 8001256:	3308      	adds	r3, #8
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
                    points++;
 800125c:	4b37      	ldr	r3, [pc, #220]	; (800133c <checkBrickHit+0xa8c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <checkBrickHit+0xa8c>)
 8001266:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    dropPowerUp((ball.x + 1)/8, ball.y - 1 - 8);
 8001268:	4b32      	ldr	r3, [pc, #200]	; (8001334 <checkBrickHit+0xa84>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	da00      	bge.n	8001274 <checkBrickHit+0x9c4>
 8001272:	3307      	adds	r3, #7
 8001274:	10db      	asrs	r3, r3, #3
 8001276:	461a      	mov	r2, r3
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <checkBrickHit+0xa84>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	3b09      	subs	r3, #9
 800127e:	4619      	mov	r1, r3
 8001280:	4610      	mov	r0, r2
 8001282:	f000 fd7b 	bl	8001d7c <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness]);
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <checkBrickHit+0xa84>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f1a3 0209 	sub.w	r2, r3, #9
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <checkBrickHit+0xa84>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	da00      	bge.n	800129a <checkBrickHit+0x9ea>
 8001298:	3307      	adds	r3, #7
 800129a:	10db      	asrs	r3, r3, #3
 800129c:	4618      	mov	r0, r3
 800129e:	4924      	ldr	r1, [pc, #144]	; (8001330 <checkBrickHit+0xa80>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4403      	add	r3, r0
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	440b      	add	r3, r1
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	b298      	uxth	r0, r3
 80012b6:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <checkBrickHit+0xa84>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f1a3 0209 	sub.w	r2, r3, #9
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <checkBrickHit+0xa84>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da00      	bge.n	80012ca <checkBrickHit+0xa1a>
 80012c8:	3307      	adds	r3, #7
 80012ca:	10db      	asrs	r3, r3, #3
 80012cc:	461c      	mov	r4, r3
 80012ce:	4918      	ldr	r1, [pc, #96]	; (8001330 <checkBrickHit+0xa80>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4423      	add	r3, r4
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	440b      	add	r3, r1
 80012de:	3304      	adds	r3, #4
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	b299      	uxth	r1, r3
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <checkBrickHit+0xa84>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f1a3 0209 	sub.w	r2, r3, #9
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <checkBrickHit+0xa84>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	da00      	bge.n	80012fc <checkBrickHit+0xa4c>
 80012fa:	3307      	adds	r3, #7
 80012fc:	10db      	asrs	r3, r3, #3
 80012fe:	461d      	mov	r5, r3
 8001300:	4c0b      	ldr	r4, [pc, #44]	; (8001330 <checkBrickHit+0xa80>)
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	442b      	add	r3, r5
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4423      	add	r3, r4
 8001310:	330c      	adds	r3, #12
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a08      	ldr	r2, [pc, #32]	; (8001338 <checkBrickHit+0xa88>)
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	b29b      	uxth	r3, r3
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2304      	movs	r3, #4
 8001320:	2220      	movs	r2, #32
 8001322:	f003 fcbb 	bl	8004c9c <Displ_FillArea>
                ball.dir = SW;
 8001326:	4b03      	ldr	r3, [pc, #12]	; (8001334 <checkBrickHit+0xa84>)
 8001328:	2205      	movs	r2, #5
 800132a:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 800132c:	f000 bd14 	b.w	8001d58 <checkBrickHit+0x14a8>
 8001330:	200000e8 	.word	0x200000e8
 8001334:	20000034 	.word	0x20000034
 8001338:	20000004 	.word	0x20000004
 800133c:	20001ee8 	.word	0x20001ee8
    case SE:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 8001340:	4bb6      	ldr	r3, [pc, #728]	; (800161c <checkBrickHit+0xd6c>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	1fda      	subs	r2, r3, #7
 8001346:	4bb5      	ldr	r3, [pc, #724]	; (800161c <checkBrickHit+0xd6c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	da00      	bge.n	8001350 <checkBrickHit+0xaa0>
 800134e:	3307      	adds	r3, #7
 8001350:	10db      	asrs	r3, r3, #3
 8001352:	4618      	mov	r0, r3
 8001354:	49b2      	ldr	r1, [pc, #712]	; (8001620 <checkBrickHit+0xd70>)
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4403      	add	r3, r0
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	440b      	add	r3, r1
 8001364:	3308      	adds	r3, #8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 80ae 	bne.w	80014ca <checkBrickHit+0xc1a>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 800136e:	4bab      	ldr	r3, [pc, #684]	; (800161c <checkBrickHit+0xd6c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	1fda      	subs	r2, r3, #7
 8001374:	4ba9      	ldr	r3, [pc, #676]	; (800161c <checkBrickHit+0xd6c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	da00      	bge.n	800137e <checkBrickHit+0xace>
 800137c:	3307      	adds	r3, #7
 800137e:	10db      	asrs	r3, r3, #3
 8001380:	4619      	mov	r1, r3
 8001382:	48a7      	ldr	r0, [pc, #668]	; (8001620 <checkBrickHit+0xd70>)
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	440b      	add	r3, r1
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4403      	add	r3, r0
 8001392:	330c      	adds	r3, #12
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	1e58      	subs	r0, r3, #1
 8001398:	4ca1      	ldr	r4, [pc, #644]	; (8001620 <checkBrickHit+0xd70>)
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	440b      	add	r3, r1
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4423      	add	r3, r4
 80013a8:	330c      	adds	r3, #12
 80013aa:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 80013ac:	4b9b      	ldr	r3, [pc, #620]	; (800161c <checkBrickHit+0xd6c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	1fda      	subs	r2, r3, #7
 80013b2:	4b9a      	ldr	r3, [pc, #616]	; (800161c <checkBrickHit+0xd6c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	da00      	bge.n	80013bc <checkBrickHit+0xb0c>
 80013ba:	3307      	adds	r3, #7
 80013bc:	10db      	asrs	r3, r3, #3
 80013be:	4618      	mov	r0, r3
 80013c0:	4997      	ldr	r1, [pc, #604]	; (8001620 <checkBrickHit+0xd70>)
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4403      	add	r3, r0
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	440b      	add	r3, r1
 80013d0:	330c      	adds	r3, #12
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	dc28      	bgt.n	800142a <checkBrickHit+0xb7a>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 80013d8:	4b90      	ldr	r3, [pc, #576]	; (800161c <checkBrickHit+0xd6c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	1fda      	subs	r2, r3, #7
 80013de:	4b8f      	ldr	r3, [pc, #572]	; (800161c <checkBrickHit+0xd6c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da00      	bge.n	80013e8 <checkBrickHit+0xb38>
 80013e6:	3307      	adds	r3, #7
 80013e8:	10db      	asrs	r3, r3, #3
 80013ea:	4618      	mov	r0, r3
 80013ec:	498c      	ldr	r1, [pc, #560]	; (8001620 <checkBrickHit+0xd70>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4403      	add	r3, r0
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	440b      	add	r3, r1
 80013fc:	3308      	adds	r3, #8
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
                points++;
 8001402:	4b88      	ldr	r3, [pc, #544]	; (8001624 <checkBrickHit+0xd74>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b86      	ldr	r3, [pc, #536]	; (8001624 <checkBrickHit+0xd74>)
 800140c:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 800140e:	4b83      	ldr	r3, [pc, #524]	; (800161c <checkBrickHit+0xd6c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	da00      	bge.n	8001418 <checkBrickHit+0xb68>
 8001416:	3307      	adds	r3, #7
 8001418:	10db      	asrs	r3, r3, #3
 800141a:	461a      	mov	r2, r3
 800141c:	4b7f      	ldr	r3, [pc, #508]	; (800161c <checkBrickHit+0xd6c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	3b07      	subs	r3, #7
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f000 fca9 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 800142a:	4b7c      	ldr	r3, [pc, #496]	; (800161c <checkBrickHit+0xd6c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	1fda      	subs	r2, r3, #7
 8001430:	4b7a      	ldr	r3, [pc, #488]	; (800161c <checkBrickHit+0xd6c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	da00      	bge.n	800143a <checkBrickHit+0xb8a>
 8001438:	3307      	adds	r3, #7
 800143a:	10db      	asrs	r3, r3, #3
 800143c:	4618      	mov	r0, r3
 800143e:	4978      	ldr	r1, [pc, #480]	; (8001620 <checkBrickHit+0xd70>)
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4403      	add	r3, r0
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	440b      	add	r3, r1
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b29b      	uxth	r3, r3
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	b298      	uxth	r0, r3
 8001456:	4b71      	ldr	r3, [pc, #452]	; (800161c <checkBrickHit+0xd6c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	1fda      	subs	r2, r3, #7
 800145c:	4b6f      	ldr	r3, [pc, #444]	; (800161c <checkBrickHit+0xd6c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	da00      	bge.n	8001466 <checkBrickHit+0xbb6>
 8001464:	3307      	adds	r3, #7
 8001466:	10db      	asrs	r3, r3, #3
 8001468:	461c      	mov	r4, r3
 800146a:	496d      	ldr	r1, [pc, #436]	; (8001620 <checkBrickHit+0xd70>)
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4423      	add	r3, r4
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	440b      	add	r3, r1
 800147a:	3304      	adds	r3, #4
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	b299      	uxth	r1, r3
 8001484:	4b65      	ldr	r3, [pc, #404]	; (800161c <checkBrickHit+0xd6c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	1fda      	subs	r2, r3, #7
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <checkBrickHit+0xd6c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	da00      	bge.n	8001494 <checkBrickHit+0xbe4>
 8001492:	3307      	adds	r3, #7
 8001494:	10db      	asrs	r3, r3, #3
 8001496:	461d      	mov	r5, r3
 8001498:	4c61      	ldr	r4, [pc, #388]	; (8001620 <checkBrickHit+0xd70>)
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	442b      	add	r3, r5
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	4423      	add	r3, r4
 80014a8:	330c      	adds	r3, #12
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a5e      	ldr	r2, [pc, #376]	; (8001628 <checkBrickHit+0xd78>)
 80014ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2304      	movs	r3, #4
 80014b8:	2220      	movs	r2, #32
 80014ba:	f003 fbef 	bl	8004c9c <Displ_FillArea>
            bricksHit++;
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	3301      	adds	r3, #1
 80014c2:	71fb      	strb	r3, [r7, #7]
            ball.dir = NE;
 80014c4:	4b55      	ldr	r3, [pc, #340]	; (800161c <checkBrickHit+0xd6c>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 80014ca:	4b54      	ldr	r3, [pc, #336]	; (800161c <checkBrickHit+0xd6c>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f1a3 0208 	sub.w	r2, r3, #8
 80014d2:	4b52      	ldr	r3, [pc, #328]	; (800161c <checkBrickHit+0xd6c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da00      	bge.n	80014de <checkBrickHit+0xc2e>
 80014dc:	3307      	adds	r3, #7
 80014de:	10db      	asrs	r3, r3, #3
 80014e0:	4618      	mov	r0, r3
 80014e2:	494f      	ldr	r1, [pc, #316]	; (8001620 <checkBrickHit+0xd70>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4403      	add	r3, r0
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	440b      	add	r3, r1
 80014f2:	3308      	adds	r3, #8
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	f040 80d0 	bne.w	800169c <checkBrickHit+0xdec>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 80014fc:	4b47      	ldr	r3, [pc, #284]	; (800161c <checkBrickHit+0xd6c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f1a3 0208 	sub.w	r2, r3, #8
 8001504:	4b45      	ldr	r3, [pc, #276]	; (800161c <checkBrickHit+0xd6c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	da00      	bge.n	8001510 <checkBrickHit+0xc60>
 800150e:	3307      	adds	r3, #7
 8001510:	10db      	asrs	r3, r3, #3
 8001512:	4619      	mov	r1, r3
 8001514:	4842      	ldr	r0, [pc, #264]	; (8001620 <checkBrickHit+0xd70>)
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	440b      	add	r3, r1
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	4403      	add	r3, r0
 8001524:	330c      	adds	r3, #12
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	1e58      	subs	r0, r3, #1
 800152a:	4c3d      	ldr	r4, [pc, #244]	; (8001620 <checkBrickHit+0xd70>)
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	440b      	add	r3, r1
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	4423      	add	r3, r4
 800153a:	330c      	adds	r3, #12
 800153c:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 800153e:	4b37      	ldr	r3, [pc, #220]	; (800161c <checkBrickHit+0xd6c>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f1a3 0208 	sub.w	r2, r3, #8
 8001546:	4b35      	ldr	r3, [pc, #212]	; (800161c <checkBrickHit+0xd6c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	da00      	bge.n	8001552 <checkBrickHit+0xca2>
 8001550:	3307      	adds	r3, #7
 8001552:	10db      	asrs	r3, r3, #3
 8001554:	4618      	mov	r0, r3
 8001556:	4932      	ldr	r1, [pc, #200]	; (8001620 <checkBrickHit+0xd70>)
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4403      	add	r3, r0
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	440b      	add	r3, r1
 8001566:	330c      	adds	r3, #12
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	dc2b      	bgt.n	80015c6 <checkBrickHit+0xd16>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <checkBrickHit+0xd6c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f1a3 0208 	sub.w	r2, r3, #8
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <checkBrickHit+0xd6c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	da00      	bge.n	8001582 <checkBrickHit+0xcd2>
 8001580:	3307      	adds	r3, #7
 8001582:	10db      	asrs	r3, r3, #3
 8001584:	4618      	mov	r0, r3
 8001586:	4926      	ldr	r1, [pc, #152]	; (8001620 <checkBrickHit+0xd70>)
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4403      	add	r3, r0
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	440b      	add	r3, r1
 8001596:	3308      	adds	r3, #8
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
                points++;
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <checkBrickHit+0xd74>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <checkBrickHit+0xd74>)
 80015a6:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <checkBrickHit+0xd6c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da00      	bge.n	80015b4 <checkBrickHit+0xd04>
 80015b2:	3307      	adds	r3, #7
 80015b4:	10db      	asrs	r3, r3, #3
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <checkBrickHit+0xd6c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	3b08      	subs	r3, #8
 80015be:	4619      	mov	r1, r3
 80015c0:	4610      	mov	r0, r2
 80015c2:	f000 fbdb 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <checkBrickHit+0xd6c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f1a3 0208 	sub.w	r2, r3, #8
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <checkBrickHit+0xd6c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	da00      	bge.n	80015da <checkBrickHit+0xd2a>
 80015d8:	3307      	adds	r3, #7
 80015da:	10db      	asrs	r3, r3, #3
 80015dc:	4618      	mov	r0, r3
 80015de:	4910      	ldr	r1, [pc, #64]	; (8001620 <checkBrickHit+0xd70>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4403      	add	r3, r0
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	440b      	add	r3, r1
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	b298      	uxth	r0, r3
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <checkBrickHit+0xd6c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f1a3 0208 	sub.w	r2, r3, #8
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <checkBrickHit+0xd6c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	da00      	bge.n	800160a <checkBrickHit+0xd5a>
 8001608:	3307      	adds	r3, #7
 800160a:	10db      	asrs	r3, r3, #3
 800160c:	461c      	mov	r4, r3
 800160e:	4904      	ldr	r1, [pc, #16]	; (8001620 <checkBrickHit+0xd70>)
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	e008      	b.n	800162c <checkBrickHit+0xd7c>
 800161a:	bf00      	nop
 800161c:	20000034 	.word	0x20000034
 8001620:	200000e8 	.word	0x200000e8
 8001624:	20001ee8 	.word	0x20001ee8
 8001628:	20000004 	.word	0x20000004
 800162c:	4423      	add	r3, r4
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	440b      	add	r3, r1
 8001632:	3304      	adds	r3, #4
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	b299      	uxth	r1, r3
 800163c:	4b7f      	ldr	r3, [pc, #508]	; (800183c <checkBrickHit+0xf8c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f1a3 0208 	sub.w	r2, r3, #8
 8001644:	4b7d      	ldr	r3, [pc, #500]	; (800183c <checkBrickHit+0xf8c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	da00      	bge.n	8001650 <checkBrickHit+0xda0>
 800164e:	3307      	adds	r3, #7
 8001650:	10db      	asrs	r3, r3, #3
 8001652:	461d      	mov	r5, r3
 8001654:	4c7a      	ldr	r4, [pc, #488]	; (8001840 <checkBrickHit+0xf90>)
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	442b      	add	r3, r5
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	4423      	add	r3, r4
 8001664:	330c      	adds	r3, #12
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a76      	ldr	r2, [pc, #472]	; (8001844 <checkBrickHit+0xf94>)
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	b29b      	uxth	r3, r3
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2304      	movs	r3, #4
 8001674:	2220      	movs	r2, #32
 8001676:	f003 fb11 	bl	8004c9c <Displ_FillArea>
            bricksHit++;
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	3301      	adds	r3, #1
 800167e:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SE) {
 8001680:	4b6e      	ldr	r3, [pc, #440]	; (800183c <checkBrickHit+0xf8c>)
 8001682:	7a1b      	ldrb	r3, [r3, #8]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d102      	bne.n	800168e <checkBrickHit+0xdde>
                ball.dir = SW;
 8001688:	4b6c      	ldr	r3, [pc, #432]	; (800183c <checkBrickHit+0xf8c>)
 800168a:	2205      	movs	r2, #5
 800168c:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NE) {
 800168e:	4b6b      	ldr	r3, [pc, #428]	; (800183c <checkBrickHit+0xf8c>)
 8001690:	7a1b      	ldrb	r3, [r3, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d102      	bne.n	800169c <checkBrickHit+0xdec>
                ball.dir = NW;
 8001696:	4b69      	ldr	r3, [pc, #420]	; (800183c <checkBrickHit+0xf8c>)
 8001698:	2207      	movs	r2, #7
 800169a:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f040 835c 	bne.w	8001d5c <checkBrickHit+0x14ac>
            if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible == 1) {
 80016a4:	4b65      	ldr	r3, [pc, #404]	; (800183c <checkBrickHit+0xf8c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	1fda      	subs	r2, r3, #7
 80016aa:	4b64      	ldr	r3, [pc, #400]	; (800183c <checkBrickHit+0xf8c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da00      	bge.n	80016b6 <checkBrickHit+0xe06>
 80016b4:	3307      	adds	r3, #7
 80016b6:	10db      	asrs	r3, r3, #3
 80016b8:	4618      	mov	r0, r3
 80016ba:	4961      	ldr	r1, [pc, #388]	; (8001840 <checkBrickHit+0xf90>)
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4403      	add	r3, r0
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	440b      	add	r3, r1
 80016ca:	3308      	adds	r3, #8
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	f040 8344 	bne.w	8001d5c <checkBrickHit+0x14ac>
                bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness--;
 80016d4:	4b59      	ldr	r3, [pc, #356]	; (800183c <checkBrickHit+0xf8c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	1fda      	subs	r2, r3, #7
 80016da:	4b58      	ldr	r3, [pc, #352]	; (800183c <checkBrickHit+0xf8c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da00      	bge.n	80016e6 <checkBrickHit+0xe36>
 80016e4:	3307      	adds	r3, #7
 80016e6:	10db      	asrs	r3, r3, #3
 80016e8:	4619      	mov	r1, r3
 80016ea:	4855      	ldr	r0, [pc, #340]	; (8001840 <checkBrickHit+0xf90>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	440b      	add	r3, r1
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	4403      	add	r3, r0
 80016fa:	330c      	adds	r3, #12
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	1e58      	subs	r0, r3, #1
 8001700:	4c4f      	ldr	r4, [pc, #316]	; (8001840 <checkBrickHit+0xf90>)
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	440b      	add	r3, r1
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4423      	add	r3, r4
 8001710:	330c      	adds	r3, #12
 8001712:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness <= 0) {
 8001714:	4b49      	ldr	r3, [pc, #292]	; (800183c <checkBrickHit+0xf8c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	1fda      	subs	r2, r3, #7
 800171a:	4b48      	ldr	r3, [pc, #288]	; (800183c <checkBrickHit+0xf8c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	da00      	bge.n	8001726 <checkBrickHit+0xe76>
 8001724:	3307      	adds	r3, #7
 8001726:	10db      	asrs	r3, r3, #3
 8001728:	4618      	mov	r0, r3
 800172a:	4945      	ldr	r1, [pc, #276]	; (8001840 <checkBrickHit+0xf90>)
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4403      	add	r3, r0
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	440b      	add	r3, r1
 800173a:	330c      	adds	r3, #12
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	dc2a      	bgt.n	8001798 <checkBrickHit+0xee8>
                    bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible = 0;
 8001742:	4b3e      	ldr	r3, [pc, #248]	; (800183c <checkBrickHit+0xf8c>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	1fda      	subs	r2, r3, #7
 8001748:	4b3c      	ldr	r3, [pc, #240]	; (800183c <checkBrickHit+0xf8c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	da00      	bge.n	8001754 <checkBrickHit+0xea4>
 8001752:	3307      	adds	r3, #7
 8001754:	10db      	asrs	r3, r3, #3
 8001756:	4618      	mov	r0, r3
 8001758:	4939      	ldr	r1, [pc, #228]	; (8001840 <checkBrickHit+0xf90>)
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4403      	add	r3, r0
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	440b      	add	r3, r1
 8001768:	3308      	adds	r3, #8
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
                    points++;
 800176e:	4b36      	ldr	r3, [pc, #216]	; (8001848 <checkBrickHit+0xf98>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b34      	ldr	r3, [pc, #208]	; (8001848 <checkBrickHit+0xf98>)
 8001778:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    dropPowerUp((ball.x + 1)/8, ball.y - 8 + 1);
 800177a:	4b30      	ldr	r3, [pc, #192]	; (800183c <checkBrickHit+0xf8c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	da00      	bge.n	8001786 <checkBrickHit+0xed6>
 8001784:	3307      	adds	r3, #7
 8001786:	10db      	asrs	r3, r3, #3
 8001788:	461a      	mov	r2, r3
 800178a:	4b2c      	ldr	r3, [pc, #176]	; (800183c <checkBrickHit+0xf8c>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	3b07      	subs	r3, #7
 8001790:	4619      	mov	r1, r3
 8001792:	4610      	mov	r0, r2
 8001794:	f000 faf2 	bl	8001d7c <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 8 + 1][(ball.x + 1)/8].x*4, bricks[ball.y - 8 + 1][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness]);
 8001798:	4b28      	ldr	r3, [pc, #160]	; (800183c <checkBrickHit+0xf8c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	1fda      	subs	r2, r3, #7
 800179e:	4b27      	ldr	r3, [pc, #156]	; (800183c <checkBrickHit+0xf8c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da00      	bge.n	80017aa <checkBrickHit+0xefa>
 80017a8:	3307      	adds	r3, #7
 80017aa:	10db      	asrs	r3, r3, #3
 80017ac:	4618      	mov	r0, r3
 80017ae:	4924      	ldr	r1, [pc, #144]	; (8001840 <checkBrickHit+0xf90>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4403      	add	r3, r0
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	440b      	add	r3, r1
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	b298      	uxth	r0, r3
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <checkBrickHit+0xf8c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	1fda      	subs	r2, r3, #7
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <checkBrickHit+0xf8c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da00      	bge.n	80017d8 <checkBrickHit+0xf28>
 80017d6:	3307      	adds	r3, #7
 80017d8:	10db      	asrs	r3, r3, #3
 80017da:	461c      	mov	r4, r3
 80017dc:	4918      	ldr	r1, [pc, #96]	; (8001840 <checkBrickHit+0xf90>)
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4423      	add	r3, r4
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	440b      	add	r3, r1
 80017ec:	3304      	adds	r3, #4
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	b299      	uxth	r1, r3
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <checkBrickHit+0xf8c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	1fda      	subs	r2, r3, #7
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <checkBrickHit+0xf8c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	da00      	bge.n	8001808 <checkBrickHit+0xf58>
 8001806:	3307      	adds	r3, #7
 8001808:	10db      	asrs	r3, r3, #3
 800180a:	461d      	mov	r5, r3
 800180c:	4c0c      	ldr	r4, [pc, #48]	; (8001840 <checkBrickHit+0xf90>)
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	442b      	add	r3, r5
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4423      	add	r3, r4
 800181c:	330c      	adds	r3, #12
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a08      	ldr	r2, [pc, #32]	; (8001844 <checkBrickHit+0xf94>)
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	b29b      	uxth	r3, r3
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2304      	movs	r3, #4
 800182c:	2220      	movs	r2, #32
 800182e:	f003 fa35 	bl	8004c9c <Displ_FillArea>
                ball.dir = NW;
 8001832:	4b02      	ldr	r3, [pc, #8]	; (800183c <checkBrickHit+0xf8c>)
 8001834:	2207      	movs	r2, #7
 8001836:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8001838:	e290      	b.n	8001d5c <checkBrickHit+0x14ac>
 800183a:	bf00      	nop
 800183c:	20000034 	.word	0x20000034
 8001840:	200000e8 	.word	0x200000e8
 8001844:	20000004 	.word	0x20000004
 8001848:	20001ee8 	.word	0x20001ee8
    case SW:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 800184c:	4bb6      	ldr	r3, [pc, #728]	; (8001b28 <checkBrickHit+0x1278>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	1fda      	subs	r2, r3, #7
 8001852:	4bb5      	ldr	r3, [pc, #724]	; (8001b28 <checkBrickHit+0x1278>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	da00      	bge.n	800185c <checkBrickHit+0xfac>
 800185a:	3307      	adds	r3, #7
 800185c:	10db      	asrs	r3, r3, #3
 800185e:	4618      	mov	r0, r3
 8001860:	49b2      	ldr	r1, [pc, #712]	; (8001b2c <checkBrickHit+0x127c>)
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4403      	add	r3, r0
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	440b      	add	r3, r1
 8001870:	3308      	adds	r3, #8
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	f040 80ae 	bne.w	80019d6 <checkBrickHit+0x1126>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 800187a:	4bab      	ldr	r3, [pc, #684]	; (8001b28 <checkBrickHit+0x1278>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	1fda      	subs	r2, r3, #7
 8001880:	4ba9      	ldr	r3, [pc, #676]	; (8001b28 <checkBrickHit+0x1278>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	da00      	bge.n	800188a <checkBrickHit+0xfda>
 8001888:	3307      	adds	r3, #7
 800188a:	10db      	asrs	r3, r3, #3
 800188c:	4619      	mov	r1, r3
 800188e:	48a7      	ldr	r0, [pc, #668]	; (8001b2c <checkBrickHit+0x127c>)
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	440b      	add	r3, r1
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	4403      	add	r3, r0
 800189e:	330c      	adds	r3, #12
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	1e58      	subs	r0, r3, #1
 80018a4:	4ca1      	ldr	r4, [pc, #644]	; (8001b2c <checkBrickHit+0x127c>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	440b      	add	r3, r1
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	4423      	add	r3, r4
 80018b4:	330c      	adds	r3, #12
 80018b6:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 80018b8:	4b9b      	ldr	r3, [pc, #620]	; (8001b28 <checkBrickHit+0x1278>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	1fda      	subs	r2, r3, #7
 80018be:	4b9a      	ldr	r3, [pc, #616]	; (8001b28 <checkBrickHit+0x1278>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da00      	bge.n	80018c8 <checkBrickHit+0x1018>
 80018c6:	3307      	adds	r3, #7
 80018c8:	10db      	asrs	r3, r3, #3
 80018ca:	4618      	mov	r0, r3
 80018cc:	4997      	ldr	r1, [pc, #604]	; (8001b2c <checkBrickHit+0x127c>)
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4403      	add	r3, r0
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	440b      	add	r3, r1
 80018dc:	330c      	adds	r3, #12
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dc28      	bgt.n	8001936 <checkBrickHit+0x1086>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 80018e4:	4b90      	ldr	r3, [pc, #576]	; (8001b28 <checkBrickHit+0x1278>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	1fda      	subs	r2, r3, #7
 80018ea:	4b8f      	ldr	r3, [pc, #572]	; (8001b28 <checkBrickHit+0x1278>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	da00      	bge.n	80018f4 <checkBrickHit+0x1044>
 80018f2:	3307      	adds	r3, #7
 80018f4:	10db      	asrs	r3, r3, #3
 80018f6:	4618      	mov	r0, r3
 80018f8:	498c      	ldr	r1, [pc, #560]	; (8001b2c <checkBrickHit+0x127c>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4403      	add	r3, r0
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	440b      	add	r3, r1
 8001908:	3308      	adds	r3, #8
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
                points++;
 800190e:	4b88      	ldr	r3, [pc, #544]	; (8001b30 <checkBrickHit+0x1280>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b86      	ldr	r3, [pc, #536]	; (8001b30 <checkBrickHit+0x1280>)
 8001918:	701a      	strb	r2, [r3, #0]
                ////QD << "score:" << points;
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 800191a:	4b83      	ldr	r3, [pc, #524]	; (8001b28 <checkBrickHit+0x1278>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	da00      	bge.n	8001924 <checkBrickHit+0x1074>
 8001922:	3307      	adds	r3, #7
 8001924:	10db      	asrs	r3, r3, #3
 8001926:	461a      	mov	r2, r3
 8001928:	4b7f      	ldr	r3, [pc, #508]	; (8001b28 <checkBrickHit+0x1278>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	3b07      	subs	r3, #7
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f000 fa23 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 8001936:	4b7c      	ldr	r3, [pc, #496]	; (8001b28 <checkBrickHit+0x1278>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	1fda      	subs	r2, r3, #7
 800193c:	4b7a      	ldr	r3, [pc, #488]	; (8001b28 <checkBrickHit+0x1278>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	da00      	bge.n	8001946 <checkBrickHit+0x1096>
 8001944:	3307      	adds	r3, #7
 8001946:	10db      	asrs	r3, r3, #3
 8001948:	4618      	mov	r0, r3
 800194a:	4978      	ldr	r1, [pc, #480]	; (8001b2c <checkBrickHit+0x127c>)
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4403      	add	r3, r0
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	440b      	add	r3, r1
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	b298      	uxth	r0, r3
 8001962:	4b71      	ldr	r3, [pc, #452]	; (8001b28 <checkBrickHit+0x1278>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	1fda      	subs	r2, r3, #7
 8001968:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <checkBrickHit+0x1278>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	da00      	bge.n	8001972 <checkBrickHit+0x10c2>
 8001970:	3307      	adds	r3, #7
 8001972:	10db      	asrs	r3, r3, #3
 8001974:	461c      	mov	r4, r3
 8001976:	496d      	ldr	r1, [pc, #436]	; (8001b2c <checkBrickHit+0x127c>)
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4423      	add	r3, r4
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	440b      	add	r3, r1
 8001986:	3304      	adds	r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	b299      	uxth	r1, r3
 8001990:	4b65      	ldr	r3, [pc, #404]	; (8001b28 <checkBrickHit+0x1278>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	1fda      	subs	r2, r3, #7
 8001996:	4b64      	ldr	r3, [pc, #400]	; (8001b28 <checkBrickHit+0x1278>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	da00      	bge.n	80019a0 <checkBrickHit+0x10f0>
 800199e:	3307      	adds	r3, #7
 80019a0:	10db      	asrs	r3, r3, #3
 80019a2:	461d      	mov	r5, r3
 80019a4:	4c61      	ldr	r4, [pc, #388]	; (8001b2c <checkBrickHit+0x127c>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	442b      	add	r3, r5
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	4423      	add	r3, r4
 80019b4:	330c      	adds	r3, #12
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a5e      	ldr	r2, [pc, #376]	; (8001b34 <checkBrickHit+0x1284>)
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2304      	movs	r3, #4
 80019c4:	2220      	movs	r2, #32
 80019c6:	f003 f969 	bl	8004c9c <Displ_FillArea>
            bricksHit++;
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	3301      	adds	r3, #1
 80019ce:	71fb      	strb	r3, [r7, #7]
            ball.dir = NW;
 80019d0:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <checkBrickHit+0x1278>)
 80019d2:	2207      	movs	r2, #7
 80019d4:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 80019d6:	4b54      	ldr	r3, [pc, #336]	; (8001b28 <checkBrickHit+0x1278>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f1a3 0208 	sub.w	r2, r3, #8
 80019de:	4b52      	ldr	r3, [pc, #328]	; (8001b28 <checkBrickHit+0x1278>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da00      	bge.n	80019ea <checkBrickHit+0x113a>
 80019e8:	3307      	adds	r3, #7
 80019ea:	10db      	asrs	r3, r3, #3
 80019ec:	4618      	mov	r0, r3
 80019ee:	494f      	ldr	r1, [pc, #316]	; (8001b2c <checkBrickHit+0x127c>)
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4403      	add	r3, r0
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	440b      	add	r3, r1
 80019fe:	3308      	adds	r3, #8
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	f040 80d0 	bne.w	8001ba8 <checkBrickHit+0x12f8>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8001a08:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <checkBrickHit+0x1278>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f1a3 0208 	sub.w	r2, r3, #8
 8001a10:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <checkBrickHit+0x1278>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da00      	bge.n	8001a1c <checkBrickHit+0x116c>
 8001a1a:	3307      	adds	r3, #7
 8001a1c:	10db      	asrs	r3, r3, #3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4842      	ldr	r0, [pc, #264]	; (8001b2c <checkBrickHit+0x127c>)
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	440b      	add	r3, r1
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4403      	add	r3, r0
 8001a30:	330c      	adds	r3, #12
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	1e58      	subs	r0, r3, #1
 8001a36:	4c3d      	ldr	r4, [pc, #244]	; (8001b2c <checkBrickHit+0x127c>)
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	440b      	add	r3, r1
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	4423      	add	r3, r4
 8001a46:	330c      	adds	r3, #12
 8001a48:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <checkBrickHit+0x1278>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f1a3 0208 	sub.w	r2, r3, #8
 8001a52:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <checkBrickHit+0x1278>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	da00      	bge.n	8001a5e <checkBrickHit+0x11ae>
 8001a5c:	3307      	adds	r3, #7
 8001a5e:	10db      	asrs	r3, r3, #3
 8001a60:	4618      	mov	r0, r3
 8001a62:	4932      	ldr	r1, [pc, #200]	; (8001b2c <checkBrickHit+0x127c>)
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4403      	add	r3, r0
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	440b      	add	r3, r1
 8001a72:	330c      	adds	r3, #12
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	dc2b      	bgt.n	8001ad2 <checkBrickHit+0x1222>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <checkBrickHit+0x1278>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f1a3 0208 	sub.w	r2, r3, #8
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <checkBrickHit+0x1278>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da00      	bge.n	8001a8e <checkBrickHit+0x11de>
 8001a8c:	3307      	adds	r3, #7
 8001a8e:	10db      	asrs	r3, r3, #3
 8001a90:	4618      	mov	r0, r3
 8001a92:	4926      	ldr	r1, [pc, #152]	; (8001b2c <checkBrickHit+0x127c>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4403      	add	r3, r0
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3308      	adds	r3, #8
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
                points++;
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <checkBrickHit+0x1280>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	3301      	adds	r3, #1
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <checkBrickHit+0x1280>)
 8001ab2:	701a      	strb	r2, [r3, #0]
                ////QD << "score:" << points;
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <checkBrickHit+0x1278>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	da00      	bge.n	8001ac0 <checkBrickHit+0x1210>
 8001abe:	3307      	adds	r3, #7
 8001ac0:	10db      	asrs	r3, r3, #3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <checkBrickHit+0x1278>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	3b08      	subs	r3, #8
 8001aca:	4619      	mov	r1, r3
 8001acc:	4610      	mov	r0, r2
 8001ace:	f000 f955 	bl	8001d7c <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <checkBrickHit+0x1278>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f1a3 0208 	sub.w	r2, r3, #8
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <checkBrickHit+0x1278>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	da00      	bge.n	8001ae6 <checkBrickHit+0x1236>
 8001ae4:	3307      	adds	r3, #7
 8001ae6:	10db      	asrs	r3, r3, #3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	4910      	ldr	r1, [pc, #64]	; (8001b2c <checkBrickHit+0x127c>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4403      	add	r3, r0
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	440b      	add	r3, r1
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	b298      	uxth	r0, r3
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <checkBrickHit+0x1278>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f1a3 0208 	sub.w	r2, r3, #8
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <checkBrickHit+0x1278>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	da00      	bge.n	8001b16 <checkBrickHit+0x1266>
 8001b14:	3307      	adds	r3, #7
 8001b16:	10db      	asrs	r3, r3, #3
 8001b18:	461c      	mov	r4, r3
 8001b1a:	4904      	ldr	r1, [pc, #16]	; (8001b2c <checkBrickHit+0x127c>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	e008      	b.n	8001b38 <checkBrickHit+0x1288>
 8001b26:	bf00      	nop
 8001b28:	20000034 	.word	0x20000034
 8001b2c:	200000e8 	.word	0x200000e8
 8001b30:	20001ee8 	.word	0x20001ee8
 8001b34:	20000004 	.word	0x20000004
 8001b38:	4423      	add	r3, r4
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3304      	adds	r3, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	b299      	uxth	r1, r3
 8001b48:	4b88      	ldr	r3, [pc, #544]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f1a3 0208 	sub.w	r2, r3, #8
 8001b50:	4b86      	ldr	r3, [pc, #536]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	da00      	bge.n	8001b5c <checkBrickHit+0x12ac>
 8001b5a:	3307      	adds	r3, #7
 8001b5c:	10db      	asrs	r3, r3, #3
 8001b5e:	461d      	mov	r5, r3
 8001b60:	4c83      	ldr	r4, [pc, #524]	; (8001d70 <checkBrickHit+0x14c0>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	442b      	add	r3, r5
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	4423      	add	r3, r4
 8001b70:	330c      	adds	r3, #12
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a7f      	ldr	r2, [pc, #508]	; (8001d74 <checkBrickHit+0x14c4>)
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2304      	movs	r3, #4
 8001b80:	2220      	movs	r2, #32
 8001b82:	f003 f88b 	bl	8004c9c <Displ_FillArea>
            bricksHit++;
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SW) {
 8001b8c:	4b77      	ldr	r3, [pc, #476]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b8e:	7a1b      	ldrb	r3, [r3, #8]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d102      	bne.n	8001b9a <checkBrickHit+0x12ea>
                ball.dir = SE;
 8001b94:	4b75      	ldr	r3, [pc, #468]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b96:	2203      	movs	r2, #3
 8001b98:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NW) {
 8001b9a:	4b74      	ldr	r3, [pc, #464]	; (8001d6c <checkBrickHit+0x14bc>)
 8001b9c:	7a1b      	ldrb	r3, [r3, #8]
 8001b9e:	2b07      	cmp	r3, #7
 8001ba0:	d102      	bne.n	8001ba8 <checkBrickHit+0x12f8>
                ball.dir = NE;
 8001ba2:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <checkBrickHit+0x14bc>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 80d8 	bne.w	8001d60 <checkBrickHit+0x14b0>
            if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible == 1) {
 8001bb0:	4b6e      	ldr	r3, [pc, #440]	; (8001d6c <checkBrickHit+0x14bc>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	1fda      	subs	r2, r3, #7
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <checkBrickHit+0x14bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da00      	bge.n	8001bc2 <checkBrickHit+0x1312>
 8001bc0:	3307      	adds	r3, #7
 8001bc2:	10db      	asrs	r3, r3, #3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	496a      	ldr	r1, [pc, #424]	; (8001d70 <checkBrickHit+0x14c0>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4403      	add	r3, r0
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	f040 80c0 	bne.w	8001d60 <checkBrickHit+0x14b0>
                bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness--;
 8001be0:	4b62      	ldr	r3, [pc, #392]	; (8001d6c <checkBrickHit+0x14bc>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	1fda      	subs	r2, r3, #7
 8001be6:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <checkBrickHit+0x14bc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da00      	bge.n	8001bf2 <checkBrickHit+0x1342>
 8001bf0:	3307      	adds	r3, #7
 8001bf2:	10db      	asrs	r3, r3, #3
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	485e      	ldr	r0, [pc, #376]	; (8001d70 <checkBrickHit+0x14c0>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	440b      	add	r3, r1
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	4403      	add	r3, r0
 8001c06:	330c      	adds	r3, #12
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1e58      	subs	r0, r3, #1
 8001c0c:	4c58      	ldr	r4, [pc, #352]	; (8001d70 <checkBrickHit+0x14c0>)
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	440b      	add	r3, r1
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	4423      	add	r3, r4
 8001c1c:	330c      	adds	r3, #12
 8001c1e:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8001c20:	4b52      	ldr	r3, [pc, #328]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	1fda      	subs	r2, r3, #7
 8001c26:	4b51      	ldr	r3, [pc, #324]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	da00      	bge.n	8001c32 <checkBrickHit+0x1382>
 8001c30:	3307      	adds	r3, #7
 8001c32:	10db      	asrs	r3, r3, #3
 8001c34:	4618      	mov	r0, r3
 8001c36:	494e      	ldr	r1, [pc, #312]	; (8001d70 <checkBrickHit+0x14c0>)
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4403      	add	r3, r0
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	440b      	add	r3, r1
 8001c46:	330c      	adds	r3, #12
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	dc2a      	bgt.n	8001ca4 <checkBrickHit+0x13f4>
                    bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible = 0;
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	1fda      	subs	r2, r3, #7
 8001c54:	4b45      	ldr	r3, [pc, #276]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	da00      	bge.n	8001c60 <checkBrickHit+0x13b0>
 8001c5e:	3307      	adds	r3, #7
 8001c60:	10db      	asrs	r3, r3, #3
 8001c62:	4618      	mov	r0, r3
 8001c64:	4942      	ldr	r1, [pc, #264]	; (8001d70 <checkBrickHit+0x14c0>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4403      	add	r3, r0
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	440b      	add	r3, r1
 8001c74:	3308      	adds	r3, #8
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
                    points++;
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <checkBrickHit+0x14c8>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <checkBrickHit+0x14c8>)
 8001c84:	701a      	strb	r2, [r3, #0]
                    ////QD << "score:" << points;
                    dropPowerUp((ball.x - 1)/8, ball.y + 1 - 8);
 8001c86:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da00      	bge.n	8001c92 <checkBrickHit+0x13e2>
 8001c90:	3307      	adds	r3, #7
 8001c92:	10db      	asrs	r3, r3, #3
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <checkBrickHit+0x14bc>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	3b07      	subs	r3, #7
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f000 f86c 	bl	8001d7c <dropPowerUp>
                }
                ball.dir = NE;
 8001ca4:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <checkBrickHit+0x14bc>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	721a      	strb	r2, [r3, #8]
                Displ_FillArea(bricks[ball.y + 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y + 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness]);
 8001caa:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <checkBrickHit+0x14bc>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	1fda      	subs	r2, r3, #7
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <checkBrickHit+0x14bc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	da00      	bge.n	8001cbc <checkBrickHit+0x140c>
 8001cba:	3307      	adds	r3, #7
 8001cbc:	10db      	asrs	r3, r3, #3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	492b      	ldr	r1, [pc, #172]	; (8001d70 <checkBrickHit+0x14c0>)
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4403      	add	r3, r0
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	440b      	add	r3, r1
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	b298      	uxth	r0, r3
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <checkBrickHit+0x14bc>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	1fda      	subs	r2, r3, #7
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <checkBrickHit+0x14bc>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	da00      	bge.n	8001cea <checkBrickHit+0x143a>
 8001ce8:	3307      	adds	r3, #7
 8001cea:	10db      	asrs	r3, r3, #3
 8001cec:	461c      	mov	r4, r3
 8001cee:	4920      	ldr	r1, [pc, #128]	; (8001d70 <checkBrickHit+0x14c0>)
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4423      	add	r3, r4
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3304      	adds	r3, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	b299      	uxth	r1, r3
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <checkBrickHit+0x14bc>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	1fda      	subs	r2, r3, #7
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <checkBrickHit+0x14bc>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da00      	bge.n	8001d1a <checkBrickHit+0x146a>
 8001d18:	3307      	adds	r3, #7
 8001d1a:	10db      	asrs	r3, r3, #3
 8001d1c:	461d      	mov	r5, r3
 8001d1e:	4c14      	ldr	r4, [pc, #80]	; (8001d70 <checkBrickHit+0x14c0>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	442b      	add	r3, r5
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4423      	add	r3, r4
 8001d2e:	330c      	adds	r3, #12
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <checkBrickHit+0x14c4>)
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f002 ffac 	bl	8004c9c <Displ_FillArea>
            }
        }
        break;
 8001d44:	e00c      	b.n	8001d60 <checkBrickHit+0x14b0>
    case still:
        break;
    default:
        //////QD << "You shouldn't be here";
        ball.dir = ball.dir;
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <checkBrickHit+0x14bc>)
 8001d48:	7a1a      	ldrb	r2, [r3, #8]
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <checkBrickHit+0x14bc>)
 8001d4c:	721a      	strb	r2, [r3, #8]
    }
}
 8001d4e:	e008      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d50:	bf00      	nop
 8001d52:	e006      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d54:	bf00      	nop
 8001d56:	e004      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d58:	bf00      	nop
 8001d5a:	e002      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d5c:	bf00      	nop
 8001d5e:	e000      	b.n	8001d62 <checkBrickHit+0x14b2>
        break;
 8001d60:	bf00      	nop
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000034 	.word	0x20000034
 8001d70:	200000e8 	.word	0x200000e8
 8001d74:	20000004 	.word	0x20000004
 8001d78:	20001ee8 	.word	0x20001ee8

08001d7c <dropPowerUp>:

void dropPowerUp(int x, int y) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    uint8_t dropChance = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
    if (guardian == 0) {
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <dropPowerUp+0x70>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d114      	bne.n	8001dbc <dropPowerUp+0x40>
        srand(HAL_GetTick());
 8001d92:	f003 fda3 	bl	80058dc <HAL_GetTick>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f008 fc01 	bl	800a5a0 <srand>
        dropChance = rand() % 100;
 8001d9e:	f008 fc2d 	bl	800a5fc <rand>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <dropPowerUp+0x74>)
 8001da6:	fb82 1203 	smull	r1, r2, r2, r3
 8001daa:	1151      	asrs	r1, r2, #5
 8001dac:	17da      	asrs	r2, r3, #31
 8001dae:	1a8a      	subs	r2, r1, r2
 8001db0:	2164      	movs	r1, #100	; 0x64
 8001db2:	fb01 f202 	mul.w	r2, r1, r2
 8001db6:	1a9a      	subs	r2, r3, r2
 8001db8:	4613      	mov	r3, r2
 8001dba:	73fb      	strb	r3, [r7, #15]
    }

    if (dropChance <= 10 && dropChance > 0) {
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2b0a      	cmp	r3, #10
 8001dc0:	d805      	bhi.n	8001dce <dropPowerUp+0x52>
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <dropPowerUp+0x52>
        guardian = 1;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <dropPowerUp+0x70>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
        //////QD << "A power up just dropped from brick at x =" << x << "y =" << y;
    }

    if (dropChance <= 15 && dropChance > 10) {
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d806      	bhi.n	8001de2 <dropPowerUp+0x66>
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	2b0a      	cmp	r3, #10
 8001dd8:	d903      	bls.n	8001de2 <dropPowerUp+0x66>
        //////QD << "test";
        explodeBricks(x, y);
 8001dda:	6839      	ldr	r1, [r7, #0]
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8cb 	bl	8001f78 <explodeBricks>
        //////QD << "An explosion just happened at x =" << x << "y =" << y;
    }
}
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20001eea 	.word	0x20001eea
 8001df0:	51eb851f 	.word	0x51eb851f

08001df4 <printScreen>:

void printScreen() {
 8001df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df6:	b08b      	sub	sp, #44	; 0x2c
 8001df8:	af06      	add	r7, sp, #24
    for (int i = 0; i < lives1; i++) {
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	e00f      	b.n	8001e20 <printScreen+0x2c>
        Displ_FillArea(SCREEN_WIDTH*4 - 8 - (i*8), 4, 4, 4, D_BLUE);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	b298      	uxth	r0, r3
 8001e0c:	2318      	movs	r3, #24
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2304      	movs	r3, #4
 8001e12:	2204      	movs	r2, #4
 8001e14:	2104      	movs	r1, #4
 8001e16:	f002 ff41 	bl	8004c9c <Displ_FillArea>
    for (int i = 0; i < lives1; i++) {
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <printScreen+0x100>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	dbe9      	blt.n	8001e00 <printScreen+0xc>
    }

    if (guardian == 1) {
 8001e2c:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <printScreen+0x104>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d10f      	bne.n	8001e54 <printScreen+0x60>
        Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, GREY);
 8001e34:	4b31      	ldr	r3, [pc, #196]	; (8001efc <printScreen+0x108>)
 8001e36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	b299      	uxth	r1, r3
 8001e42:	f249 6396 	movw	r3, #38550	; 0x9696
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2304      	movs	r3, #4
 8001e4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f002 ff24 	bl	8004c9c <Displ_FillArea>
//                    game_screen[i][y] = ENC_RED;
//                }
//            }
//        }
//    }
    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, RED);
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <printScreen+0x108>)
 8001e56:	f993 3000 	ldrsb.w	r3, [r3]
 8001e5a:	3b19      	subs	r3, #25
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	b298      	uxth	r0, r3
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <printScreen+0x108>)
 8001e64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	b299      	uxth	r1, r3
 8001e6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2304      	movs	r3, #4
 8001e76:	22c8      	movs	r2, #200	; 0xc8
 8001e78:	f002 ff10 	bl	8004c9c <Displ_FillArea>
//
//    game_screen[ball.x][ball.y] = ENC_BLUE;
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_BLUE);
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <printScreen+0x10c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	b298      	uxth	r0, r3
 8001e86:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <printScreen+0x10c>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	b299      	uxth	r1, r3
 8001e90:	2318      	movs	r3, #24
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2304      	movs	r3, #4
 8001e96:	2204      	movs	r2, #4
 8001e98:	f002 ff00 	bl	8004c9c <Displ_FillArea>

    char str[12];
    snprintf(str, 12, "%u", points);
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <printScreen+0x110>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4638      	mov	r0, r7
 8001ea2:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <printScreen+0x114>)
 8001ea4:	210c      	movs	r1, #12
 8001ea6:	f008 fbe7 	bl	800a678 <sniprintf>
    Displ_WString(score.x*4, score.y, str, Font16, 1, WHITE, D_GREEN);
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <printScreen+0x118>)
 8001eac:	f993 3000 	ldrsb.w	r3, [r3]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	b29c      	uxth	r4, r3
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <printScreen+0x118>)
 8001eb8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ebc:	b29d      	uxth	r5, r3
 8001ebe:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <printScreen+0x11c>)
 8001ec0:	463e      	mov	r6, r7
 8001ec2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001ec6:	9204      	str	r2, [sp, #16]
 8001ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ecc:	9203      	str	r2, [sp, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	9202      	str	r2, [sp, #8]
 8001ed2:	46ec      	mov	ip, sp
 8001ed4:	1d1a      	adds	r2, r3, #4
 8001ed6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001eda:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4632      	mov	r2, r6
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f003 fc35 	bl	8005754 <Displ_WString>
    //displayText(game_screen, str, score.x, score.y, WHITE);
    //snprintf(str, 12, "%u", highScore);
    //displayText(game_screen, str, highScorePoint.x, highScorePoint.y, WHITE);
}
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000002 	.word	0x20000002
 8001ef8:	20001eea 	.word	0x20001eea
 8001efc:	20000030 	.word	0x20000030
 8001f00:	20000034 	.word	0x20000034
 8001f04:	20001ee8 	.word	0x20001ee8
 8001f08:	0800ba84 	.word	0x0800ba84
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000014 	.word	0x20000014

08001f14 <checkGuardianTimer>:

void checkGuardianTimer() {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af02      	add	r7, sp, #8
    if (guardian == 1) {
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <checkGuardianTimer+0x58>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d120      	bne.n	8001f64 <checkGuardianTimer+0x50>
        if (guardianTimer <= 0) {
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <checkGuardianTimer+0x5c>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d116      	bne.n	8001f58 <checkGuardianTimer+0x44>
            guardian = 0;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <checkGuardianTimer+0x58>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
            guardianTimer = 100;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <checkGuardianTimer+0x5c>)
 8001f32:	2264      	movs	r2, #100	; 0x64
 8001f34:	701a      	strb	r2, [r3, #0]
            Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, D_GREEN);
 8001f36:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <checkGuardianTimer+0x60>)
 8001f38:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	b299      	uxth	r1, r3
 8001f44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f50:	2000      	movs	r0, #0
 8001f52:	f002 fea3 	bl	8004c9c <Displ_FillArea>
        } else {
            guardianTimer--;
        }
    }
}
 8001f56:	e005      	b.n	8001f64 <checkGuardianTimer+0x50>
            guardianTimer--;
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <checkGuardianTimer+0x5c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <checkGuardianTimer+0x5c>)
 8001f62:	701a      	strb	r2, [r3, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20001eea 	.word	0x20001eea
 8001f70:	20000003 	.word	0x20000003
 8001f74:	20000030 	.word	0x20000030

08001f78 <explodeBricks>:

void explodeBricks(int x, int y) {
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    int ymin = y - 1;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
    int xmin = x - 1;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	61bb      	str	r3, [r7, #24]
    int ymax = y + 1;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
    int xmax = x + 1;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3301      	adds	r3, #1
 8001f98:	613b      	str	r3, [r7, #16]
    if(y == 0) {
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <explodeBricks+0x2c>
        ymin = y;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	61fb      	str	r3, [r7, #28]
    }
    if(y == MAX_BRICK_LINES) {
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b30      	cmp	r3, #48	; 0x30
 8001fa8:	d101      	bne.n	8001fae <explodeBricks+0x36>
        ymax = y;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	617b      	str	r3, [r7, #20]
    }
    if(x == 0) {
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <explodeBricks+0x40>
        xmin = x;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	61bb      	str	r3, [r7, #24]
    }
    if(x == 10) {
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b0a      	cmp	r3, #10
 8001fbc:	d101      	bne.n	8001fc2 <explodeBricks+0x4a>
        xmax = x;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
    }


    for(int i = ymin; i <= ymax; i++) {
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e03a      	b.n	800203e <explodeBricks+0xc6>
        for(int j = xmin; j <= xmax; j++) {
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	e030      	b.n	8002030 <explodeBricks+0xb8>
            if(bricks[i][j].visible == 1) {
 8001fce:	4921      	ldr	r1, [pc, #132]	; (8002054 <explodeBricks+0xdc>)
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4413      	add	r3, r2
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3308      	adds	r3, #8
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d11f      	bne.n	800202a <explodeBricks+0xb2>
                bricks[i][j].toughness = 0;
 8001fea:	491a      	ldr	r1, [pc, #104]	; (8002054 <explodeBricks+0xdc>)
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	440b      	add	r3, r1
 8001ffe:	330c      	adds	r3, #12
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
                bricks[i][j].visible = 0;
 8002004:	4913      	ldr	r1, [pc, #76]	; (8002054 <explodeBricks+0xdc>)
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	4413      	add	r3, r2
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	440b      	add	r3, r1
 8002018:	3308      	adds	r3, #8
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
                points++;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <explodeBricks+0xe0>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <explodeBricks+0xe0>)
 8002028:	701a      	strb	r2, [r3, #0]
        for(int j = xmin; j <= xmax; j++) {
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3301      	adds	r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	ddca      	ble.n	8001fce <explodeBricks+0x56>
    for(int i = ymin; i <= ymax; i++) {
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3301      	adds	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	429a      	cmp	r2, r3
 8002044:	ddc0      	ble.n	8001fc8 <explodeBricks+0x50>
            }
        }
    }
}
 8002046:	bf00      	nop
 8002048:	bf00      	nop
 800204a:	3724      	adds	r7, #36	; 0x24
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	200000e8 	.word	0x200000e8
 8002058:	20001ee8 	.word	0x20001ee8

0800205c <setBrickToughness>:

int setBrickToughness(void) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
    int toughnessPercent;
    int toughness = 1;
 8002062:	2301      	movs	r3, #1
 8002064:	607b      	str	r3, [r7, #4]

    toughnessPercent = rand() % (100) + 1;
 8002066:	f008 fac9 	bl	800a5fc <rand>
 800206a:	4602      	mov	r2, r0
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <setBrickToughness+0x68>)
 800206e:	fb83 1302 	smull	r1, r3, r3, r2
 8002072:	1159      	asrs	r1, r3, #5
 8002074:	17d3      	asrs	r3, r2, #31
 8002076:	1acb      	subs	r3, r1, r3
 8002078:	2164      	movs	r1, #100	; 0x64
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	3301      	adds	r3, #1
 8002082:	603b      	str	r3, [r7, #0]

    if(toughnessPercent > 0 && toughnessPercent <= 60) {
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	dd05      	ble.n	8002096 <setBrickToughness+0x3a>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b3c      	cmp	r3, #60	; 0x3c
 800208e:	dc02      	bgt.n	8002096 <setBrickToughness+0x3a>
        toughness = 1;
 8002090:	2301      	movs	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	e010      	b.n	80020b8 <setBrickToughness+0x5c>
    } else if(toughnessPercent > 60 && toughnessPercent < 90) {
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b3c      	cmp	r3, #60	; 0x3c
 800209a:	dd05      	ble.n	80020a8 <setBrickToughness+0x4c>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	2b59      	cmp	r3, #89	; 0x59
 80020a0:	dc02      	bgt.n	80020a8 <setBrickToughness+0x4c>
        toughness = 2;
 80020a2:	2302      	movs	r3, #2
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	e007      	b.n	80020b8 <setBrickToughness+0x5c>
    } else if(toughnessPercent > 90 && toughnessPercent < 100) {
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b5a      	cmp	r3, #90	; 0x5a
 80020ac:	dd04      	ble.n	80020b8 <setBrickToughness+0x5c>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b63      	cmp	r3, #99	; 0x63
 80020b2:	dc01      	bgt.n	80020b8 <setBrickToughness+0x5c>
        toughness = 3;
 80020b4:	2303      	movs	r3, #3
 80020b6:	607b      	str	r3, [r7, #4]
    }

    return toughness;
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	51eb851f 	.word	0x51eb851f

080020c8 <drawBricks>:

void drawBricks() {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af02      	add	r7, sp, #8
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	e0b0      	b.n	8002236 <drawBricks+0x16e>
        for(int j = 0; j < 10; j++) {
 80020d4:	2300      	movs	r3, #0
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	e0a6      	b.n	8002228 <drawBricks+0x160>
            if(bricks[i][j].visible == 1) {
 80020da:	495b      	ldr	r1, [pc, #364]	; (8002248 <drawBricks+0x180>)
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	4413      	add	r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	440b      	add	r3, r1
 80020ee:	3308      	adds	r3, #8
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	f040 8095 	bne.w	8002222 <drawBricks+0x15a>
                if (bricks[i][j].toughness == 3) {
 80020f8:	4953      	ldr	r1, [pc, #332]	; (8002248 <drawBricks+0x180>)
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	4413      	add	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	440b      	add	r3, r1
 800210c:	330c      	adds	r3, #12
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d122      	bne.n	800215a <drawBricks+0x92>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, BLACK);
 8002114:	494c      	ldr	r1, [pc, #304]	; (8002248 <drawBricks+0x180>)
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4413      	add	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	440b      	add	r3, r1
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	b298      	uxth	r0, r3
 8002130:	4945      	ldr	r1, [pc, #276]	; (8002248 <drawBricks+0x180>)
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	4413      	add	r3, r2
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	440b      	add	r3, r1
 8002144:	3304      	adds	r3, #4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	b299      	uxth	r1, r3
 800214e:	2300      	movs	r3, #0
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2304      	movs	r3, #4
 8002154:	2220      	movs	r2, #32
 8002156:	f002 fda1 	bl	8004c9c <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 2) {
 800215a:	493b      	ldr	r1, [pc, #236]	; (8002248 <drawBricks+0x180>)
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	4413      	add	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	440b      	add	r3, r1
 800216e:	330c      	adds	r3, #12
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d123      	bne.n	80021be <drawBricks+0xf6>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, DARK_GREY);
 8002176:	4934      	ldr	r1, [pc, #208]	; (8002248 <drawBricks+0x180>)
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	4413      	add	r3, r2
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	440b      	add	r3, r1
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	b29b      	uxth	r3, r3
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	b298      	uxth	r0, r3
 8002192:	492d      	ldr	r1, [pc, #180]	; (8002248 <drawBricks+0x180>)
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	440b      	add	r3, r1
 80021a6:	3304      	adds	r3, #4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	b299      	uxth	r1, r3
 80021b0:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2304      	movs	r3, #4
 80021b8:	2220      	movs	r2, #32
 80021ba:	f002 fd6f 	bl	8004c9c <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 1) {
 80021be:	4922      	ldr	r1, [pc, #136]	; (8002248 <drawBricks+0x180>)
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	440b      	add	r3, r1
 80021d2:	330c      	adds	r3, #12
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d123      	bne.n	8002222 <drawBricks+0x15a>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, GREY);
 80021da:	491b      	ldr	r1, [pc, #108]	; (8002248 <drawBricks+0x180>)
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	440b      	add	r3, r1
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	b298      	uxth	r0, r3
 80021f6:	4914      	ldr	r1, [pc, #80]	; (8002248 <drawBricks+0x180>)
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	4413      	add	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	440b      	add	r3, r1
 800220a:	3304      	adds	r3, #4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	b299      	uxth	r1, r3
 8002214:	f249 6396 	movw	r3, #38550	; 0x9696
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2304      	movs	r3, #4
 800221c:	2220      	movs	r2, #32
 800221e:	f002 fd3d 	bl	8004c9c <Displ_FillArea>
        for(int j = 0; j < 10; j++) {
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b09      	cmp	r3, #9
 800222c:	f77f af55 	ble.w	80020da <drawBricks+0x12>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3301      	adds	r3, #1
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b2f      	cmp	r3, #47	; 0x2f
 800223a:	f77f af4b 	ble.w	80020d4 <drawBricks+0xc>
                }
            }
        }
    }
}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200000e8 	.word	0x200000e8

0800224c <_write>:
#include "debug.h"

// Declare external UART handle
extern UART_HandleTypeDef huart3;

int _write(int file, char *ptr, int len) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3b01      	subs	r3, #1
    HAL_StatusTypeDef xStatus;
    switch (file) {
 800225c:	2b01      	cmp	r3, #1
 800225e:	d814      	bhi.n	800228a <_write+0x3e>
    case STDOUT_FILENO: /*stdout*/
    case STDERR_FILENO: /*stderr*/
        xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	b29a      	uxth	r2, r3
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	480f      	ldr	r0, [pc, #60]	; (80022a8 <_write+0x5c>)
 800226c:	f007 f9b2 	bl	80095d4 <HAL_UART_Transmit>
 8002270:	4603      	mov	r3, r0
 8002272:	75fb      	strb	r3, [r7, #23]
        if (xStatus != HAL_OK) {
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00f      	beq.n	800229a <_write+0x4e>
            errno = EIO;
 800227a:	f008 f8d1 	bl	800a420 <__errno>
 800227e:	4603      	mov	r3, r0
 8002280:	2205      	movs	r2, #5
 8002282:	601a      	str	r2, [r3, #0]
            return -1;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
 8002288:	e009      	b.n	800229e <_write+0x52>
        }
        break;
    default:
        errno = EBADF;
 800228a:	f008 f8c9 	bl	800a420 <__errno>
 800228e:	4603      	mov	r3, r0
 8002290:	2209      	movs	r2, #9
 8002292:	601a      	str	r2, [r3, #0]
        return -1;
 8002294:	f04f 33ff 	mov.w	r3, #4294967295
 8002298:	e001      	b.n	800229e <_write+0x52>
        break;
 800229a:	bf00      	nop
    }
    return len;
 800229c:	687b      	ldr	r3, [r7, #4]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20002074 	.word	0x20002074

080022ac <init>:
ballPoint ball = {(SCREEN_WIDTH)/2, SCREEN_HEIGHT - 6, still};
uint8_t start = 0;
uint8_t delay = BRICK_SPEED;
directions ballDirection = NE;

void init (void) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
    choice = 0;
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <init+0x28>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
    if(gamechoice == 1){
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <init+0x2c>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d102      	bne.n	80022c4 <init+0x18>
        initSpaceInvaders();
 80022be:	f000 ffc5 	bl	800324c <initSpaceInvaders>
    }else if(gamechoice == 2){
        initBrickbreaker();
    }


}
 80022c2:	e005      	b.n	80022d0 <init+0x24>
    }else if(gamechoice == 2){
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <init+0x2c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d101      	bne.n	80022d0 <init+0x24>
        initBrickbreaker();
 80022cc:	f7fd ffd0 	bl	8000270 <initBrickbreaker>
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20001eec 	.word	0x20001eec
 80022d8:	20001eed 	.word	0x20001eed

080022dc <loop>:

int loop (int key) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	6078      	str	r0, [r7, #4]
    updateScreen();
 80022e4:	f000 f9e0 	bl	80026a8 <updateScreen>
    if (play == menu){
 80022e8:	4b9d      	ldr	r3, [pc, #628]	; (8002560 <loop+0x284>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d104      	bne.n	80022fa <loop+0x1e>
        max_choice = total_games;
 80022f0:	4b9c      	ldr	r3, [pc, #624]	; (8002564 <loop+0x288>)
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	4b9c      	ldr	r3, [pc, #624]	; (8002568 <loop+0x28c>)
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	e002      	b.n	8002300 <loop+0x24>
    }else{
        max_choice = 1;
 80022fa:	4b9b      	ldr	r3, [pc, #620]	; (8002568 <loop+0x28c>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
    }
    if(key == left) {
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d15f      	bne.n	80023c6 <loop+0xea>
        if(play < paused){
 8002306:	4b96      	ldr	r3, [pc, #600]	; (8002560 <loop+0x284>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d84f      	bhi.n	80023ae <loop+0xd2>
        	if(gamechoice == 1){
 800230e:	4b97      	ldr	r3, [pc, #604]	; (800256c <loop+0x290>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d104      	bne.n	8002320 <loop+0x44>
        		moveSpaceship(-1);
 8002316:	f04f 30ff 	mov.w	r0, #4294967295
 800231a:	f001 fc8b 	bl	8003c34 <moveSpaceship>
 800231e:	e046      	b.n	80023ae <loop+0xd2>
        	}else if(gamechoice == 2) {
 8002320:	4b92      	ldr	r3, [pc, #584]	; (800256c <loop+0x290>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d142      	bne.n	80023ae <loop+0xd2>
        	    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 8002328:	4b91      	ldr	r3, [pc, #580]	; (8002570 <loop+0x294>)
 800232a:	f993 3000 	ldrsb.w	r3, [r3]
 800232e:	3b19      	subs	r3, #25
 8002330:	b29b      	uxth	r3, r3
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	b298      	uxth	r0, r3
 8002336:	4b8e      	ldr	r3, [pc, #568]	; (8002570 <loop+0x294>)
 8002338:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800233c:	b29b      	uxth	r3, r3
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	b299      	uxth	r1, r3
 8002342:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2304      	movs	r3, #4
 800234a:	22c8      	movs	r2, #200	; 0xc8
 800234c:	f002 fca6 	bl	8004c9c <Displ_FillArea>
                person.x--;
 8002350:	4b87      	ldr	r3, [pc, #540]	; (8002570 <loop+0x294>)
 8002352:	f993 3000 	ldrsb.w	r3, [r3]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	b25a      	sxtb	r2, r3
 800235e:	4b84      	ldr	r3, [pc, #528]	; (8002570 <loop+0x294>)
 8002360:	701a      	strb	r2, [r3, #0]
                if(person.x < BAR_SIZE/2) {
 8002362:	4b83      	ldr	r3, [pc, #524]	; (8002570 <loop+0x294>)
 8002364:	f993 3000 	ldrsb.w	r3, [r3]
 8002368:	2b18      	cmp	r3, #24
 800236a:	dc03      	bgt.n	8002374 <loop+0x98>
                    person.x = (BAR_SIZE/2);
 800236c:	4b80      	ldr	r3, [pc, #512]	; (8002570 <loop+0x294>)
 800236e:	2219      	movs	r2, #25
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e01c      	b.n	80023ae <loop+0xd2>
                } else {
                    if (ball.dir == still) {
 8002374:	4b7f      	ldr	r3, [pc, #508]	; (8002574 <loop+0x298>)
 8002376:	7a1b      	ldrb	r3, [r3, #8]
 8002378:	2b08      	cmp	r3, #8
 800237a:	d118      	bne.n	80023ae <loop+0xd2>
                        Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 800237c:	4b7d      	ldr	r3, [pc, #500]	; (8002574 <loop+0x298>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	b298      	uxth	r0, r3
 8002386:	4b7b      	ldr	r3, [pc, #492]	; (8002574 <loop+0x298>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	b29b      	uxth	r3, r3
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	b299      	uxth	r1, r3
 8002390:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2304      	movs	r3, #4
 8002398:	2204      	movs	r2, #4
 800239a:	f002 fc7f 	bl	8004c9c <Displ_FillArea>
                        ball.x--;
 800239e:	4b75      	ldr	r3, [pc, #468]	; (8002574 <loop+0x298>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	4a73      	ldr	r2, [pc, #460]	; (8002574 <loop+0x298>)
 80023a6:	6013      	str	r3, [r2, #0]
                        ballDirection = NW;
 80023a8:	4b73      	ldr	r3, [pc, #460]	; (8002578 <loop+0x29c>)
 80023aa:	2207      	movs	r2, #7
 80023ac:	701a      	strb	r2, [r3, #0]
                    }
                }
        	}
        }
        if (choice != 0){
 80023ae:	4b73      	ldr	r3, [pc, #460]	; (800257c <loop+0x2a0>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <loop+0xe6>
        	choice--;
 80023b6:	4b71      	ldr	r3, [pc, #452]	; (800257c <loop+0x2a0>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b6f      	ldr	r3, [pc, #444]	; (800257c <loop+0x2a0>)
 80023c0:	701a      	strb	r2, [r3, #0]
        }

        key = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
    }
    if(key == right) {
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d15f      	bne.n	800248c <loop+0x1b0>
    	if(play < paused){
 80023cc:	4b64      	ldr	r3, [pc, #400]	; (8002560 <loop+0x284>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d84d      	bhi.n	8002470 <loop+0x194>
    		if(gamechoice == 1){
 80023d4:	4b65      	ldr	r3, [pc, #404]	; (800256c <loop+0x290>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d103      	bne.n	80023e4 <loop+0x108>
    			moveSpaceship(1);
 80023dc:	2001      	movs	r0, #1
 80023de:	f001 fc29 	bl	8003c34 <moveSpaceship>
 80023e2:	e045      	b.n	8002470 <loop+0x194>
    		}else if (gamechoice == 2) {
 80023e4:	4b61      	ldr	r3, [pc, #388]	; (800256c <loop+0x290>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d141      	bne.n	8002470 <loop+0x194>
    			Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 80023ec:	4b60      	ldr	r3, [pc, #384]	; (8002570 <loop+0x294>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	3b19      	subs	r3, #25
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	b298      	uxth	r0, r3
 80023fa:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <loop+0x294>)
 80023fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002400:	b29b      	uxth	r3, r3
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	b299      	uxth	r1, r3
 8002406:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2304      	movs	r3, #4
 800240e:	22c8      	movs	r2, #200	; 0xc8
 8002410:	f002 fc44 	bl	8004c9c <Displ_FillArea>
    			person.x++;
 8002414:	4b56      	ldr	r3, [pc, #344]	; (8002570 <loop+0x294>)
 8002416:	f993 3000 	ldrsb.w	r3, [r3]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	3301      	adds	r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	b25a      	sxtb	r2, r3
 8002422:	4b53      	ldr	r3, [pc, #332]	; (8002570 <loop+0x294>)
 8002424:	701a      	strb	r2, [r3, #0]
    			if(person.x > SCREEN_WIDTH - (BAR_SIZE/2) - 1) {
 8002426:	4b52      	ldr	r3, [pc, #328]	; (8002570 <loop+0x294>)
 8002428:	f993 3000 	ldrsb.w	r3, [r3]
 800242c:	2b36      	cmp	r3, #54	; 0x36
 800242e:	dd02      	ble.n	8002436 <loop+0x15a>
    				person.x = SCREEN_WIDTH - (BAR_SIZE/2) - 1;
 8002430:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <loop+0x294>)
 8002432:	2236      	movs	r2, #54	; 0x36
 8002434:	701a      	strb	r2, [r3, #0]
    			}
    			if (ball.dir == still) {
 8002436:	4b4f      	ldr	r3, [pc, #316]	; (8002574 <loop+0x298>)
 8002438:	7a1b      	ldrb	r3, [r3, #8]
 800243a:	2b08      	cmp	r3, #8
 800243c:	d118      	bne.n	8002470 <loop+0x194>
    				Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 800243e:	4b4d      	ldr	r3, [pc, #308]	; (8002574 <loop+0x298>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	b298      	uxth	r0, r3
 8002448:	4b4a      	ldr	r3, [pc, #296]	; (8002574 <loop+0x298>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	b29b      	uxth	r3, r3
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	b299      	uxth	r1, r3
 8002452:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2304      	movs	r3, #4
 800245a:	2204      	movs	r2, #4
 800245c:	f002 fc1e 	bl	8004c9c <Displ_FillArea>
    				ball.x++;
 8002460:	4b44      	ldr	r3, [pc, #272]	; (8002574 <loop+0x298>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	4a43      	ldr	r2, [pc, #268]	; (8002574 <loop+0x298>)
 8002468:	6013      	str	r3, [r2, #0]
    				ballDirection = NE;
 800246a:	4b43      	ldr	r3, [pc, #268]	; (8002578 <loop+0x29c>)
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
    			}
    		}
    	}
    	if (choice != max_choice){
 8002470:	4b42      	ldr	r3, [pc, #264]	; (800257c <loop+0x2a0>)
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <loop+0x28c>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d005      	beq.n	8002488 <loop+0x1ac>
    		choice++;
 800247c:	4b3f      	ldr	r3, [pc, #252]	; (800257c <loop+0x2a0>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	b2da      	uxtb	r2, r3
 8002484:	4b3d      	ldr	r3, [pc, #244]	; (800257c <loop+0x2a0>)
 8002486:	701a      	strb	r2, [r3, #0]
    	}
    	key = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	607b      	str	r3, [r7, #4]
    }
    if(key == down){
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b04      	cmp	r3, #4
 8002490:	f040 8099 	bne.w	80025c6 <loop+0x2ea>
        if (play == notPlay){
 8002494:	4b32      	ldr	r3, [pc, #200]	; (8002560 <loop+0x284>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10c      	bne.n	80024b6 <loop+0x1da>
        	Displ_FillArea(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, 140, 20, DARK_GREY);
 800249c:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2314      	movs	r3, #20
 80024a4:	228c      	movs	r2, #140	; 0x8c
 80024a6:	2178      	movs	r1, #120	; 0x78
 80024a8:	205a      	movs	r0, #90	; 0x5a
 80024aa:	f002 fbf7 	bl	8004c9c <Displ_FillArea>
            play = inPlay;
 80024ae:	4b2c      	ldr	r3, [pc, #176]	; (8002560 <loop+0x284>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	e085      	b.n	80025c2 <loop+0x2e6>
        }else if(play == inPlay) {
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <loop+0x284>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d114      	bne.n	80024e8 <loop+0x20c>
            if (ball.dir == still) {
 80024be:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <loop+0x298>)
 80024c0:	7a1b      	ldrb	r3, [r3, #8]
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d108      	bne.n	80024d8 <loop+0x1fc>
                ball.dir = ballDirection;
 80024c6:	4b2c      	ldr	r3, [pc, #176]	; (8002578 <loop+0x29c>)
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <loop+0x298>)
 80024cc:	721a      	strb	r2, [r3, #8]
                start = 1;
 80024ce:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <loop+0x2a4>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
                playBall();
 80024d4:	f7fd ff6a 	bl	80003ac <playBall>
            }
            if(!hit){                  //not sure if this was yours or I added for fixing bug
 80024d8:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <loop+0x2a8>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d170      	bne.n	80025c2 <loop+0x2e6>
                spawnBullet(0);
 80024e0:	2000      	movs	r0, #0
 80024e2:	f000 fffd 	bl	80034e0 <spawnBullet>
 80024e6:	e06c      	b.n	80025c2 <loop+0x2e6>
            }
        }else if(play == paused){
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <loop+0x284>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d119      	bne.n	8002524 <loop+0x248>
            if(choice == 0){
 80024f0:	4b22      	ldr	r3, [pc, #136]	; (800257c <loop+0x2a0>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <loop+0x228>
                play = menu;
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <loop+0x284>)
 80024fa:	2203      	movs	r2, #3
 80024fc:	701a      	strb	r2, [r3, #0]
                init();
 80024fe:	f7ff fed5 	bl	80022ac <init>
 8002502:	e05e      	b.n	80025c2 <loop+0x2e6>
            }
            else if(choice == 1){
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <loop+0x2a0>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <loop+0x240>
            	displayPauseMenu(1);
 800250c:	2001      	movs	r0, #1
 800250e:	f000 fc8f 	bl	8002e30 <displayPauseMenu>
                play = last_state;
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <loop+0x2ac>)
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <loop+0x284>)
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e052      	b.n	80025c2 <loop+0x2e6>
            }else{
                displayPauseMenu(0);
 800251c:	2000      	movs	r0, #0
 800251e:	f000 fc87 	bl	8002e30 <displayPauseMenu>
 8002522:	e04e      	b.n	80025c2 <loop+0x2e6>
            }

        }else if(play == menu){
 8002524:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <loop+0x284>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d143      	bne.n	80025b4 <loop+0x2d8>
            if(choice == 0){
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <loop+0x2a0>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <loop+0x268>
                //toggle_multiplayer();
                HAL_UART_Transmit(&huart2, "Hello", strlen("Hello"), 300);
 8002534:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002538:	2205      	movs	r2, #5
 800253a:	4914      	ldr	r1, [pc, #80]	; (800258c <loop+0x2b0>)
 800253c:	4814      	ldr	r0, [pc, #80]	; (8002590 <loop+0x2b4>)
 800253e:	f007 f849 	bl	80095d4 <HAL_UART_Transmit>
 8002542:	e03e      	b.n	80025c2 <loop+0x2e6>
            }else if(choice == 1){
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <loop+0x2a0>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d123      	bne.n	8002594 <loop+0x2b8>
                gamechoice = 2;
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <loop+0x290>)
 800254e:	2202      	movs	r2, #2
 8002550:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 8002552:	4b03      	ldr	r3, [pc, #12]	; (8002560 <loop+0x284>)
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]

                init();
 8002558:	f7ff fea8 	bl	80022ac <init>
 800255c:	e031      	b.n	80025c2 <loop+0x2e6>
 800255e:	bf00      	nop
 8002560:	2000004a 	.word	0x2000004a
 8002564:	20000044 	.word	0x20000044
 8002568:	2000002d 	.word	0x2000002d
 800256c:	20001eed 	.word	0x20001eed
 8002570:	20000030 	.word	0x20000030
 8002574:	20000034 	.word	0x20000034
 8002578:	20000041 	.word	0x20000041
 800257c:	20001eec 	.word	0x20001eec
 8002580:	20001eef 	.word	0x20001eef
 8002584:	20001eeb 	.word	0x20001eeb
 8002588:	20001eee 	.word	0x20001eee
 800258c:	0800ba88 	.word	0x0800ba88
 8002590:	20001fec 	.word	0x20001fec
            }
            else if(choice == 2){
 8002594:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <loop+0x3a8>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d108      	bne.n	80025ae <loop+0x2d2>
                gamechoice = 1;
 800259c:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <loop+0x3ac>)
 800259e:	2201      	movs	r2, #1
 80025a0:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80025a2:	4b3a      	ldr	r3, [pc, #232]	; (800268c <loop+0x3b0>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]

                init();
 80025a8:	f7ff fe80 	bl	80022ac <init>
 80025ac:	e009      	b.n	80025c2 <loop+0x2e6>
            }else{
                displayMenu();
 80025ae:	f000 fca1 	bl	8002ef4 <displayMenu>
 80025b2:	e006      	b.n	80025c2 <loop+0x2e6>
            }
        }
        else if(!hit){
 80025b4:	4b36      	ldr	r3, [pc, #216]	; (8002690 <loop+0x3b4>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <loop+0x2e6>
            spawnBullet(0);
 80025bc:	2000      	movs	r0, #0
 80025be:	f000 ff8f 	bl	80034e0 <spawnBullet>
        }
        key = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
    }
    if(key == up && play < 2){
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d112      	bne.n	80025f2 <loop+0x316>
 80025cc:	4b2f      	ldr	r3, [pc, #188]	; (800268c <loop+0x3b0>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d80e      	bhi.n	80025f2 <loop+0x316>
    	last_state = play;
 80025d4:	4b2d      	ldr	r3, [pc, #180]	; (800268c <loop+0x3b0>)
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <loop+0x3b8>)
 80025da:	701a      	strb	r2, [r3, #0]
        play = paused;
 80025dc:	4b2b      	ldr	r3, [pc, #172]	; (800268c <loop+0x3b0>)
 80025de:	2202      	movs	r2, #2
 80025e0:	701a      	strb	r2, [r3, #0]
        choice = 1;
 80025e2:	4b28      	ldr	r3, [pc, #160]	; (8002684 <loop+0x3a8>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
        last_choice_pause = 40;
 80025e8:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <loop+0x3bc>)
 80025ea:	2228      	movs	r2, #40	; 0x28
 80025ec:	701a      	strb	r2, [r3, #0]
        key = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	607b      	str	r3, [r7, #4]
    }

    if(play == inPlay){
 80025f2:	4b26      	ldr	r3, [pc, #152]	; (800268c <loop+0x3b0>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d132      	bne.n	8002660 <loop+0x384>
    	if(gamechoice == 1){
 80025fa:	4b23      	ldr	r3, [pc, #140]	; (8002688 <loop+0x3ac>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d10a      	bne.n	8002618 <loop+0x33c>
    		spawnComet();
 8002602:	f000 fee7 	bl	80033d4 <spawnComet>
    		delayBullet();
 8002606:	f001 fdc9 	bl	800419c <delayBullet>
    		moveComets();
 800260a:	f001 f999 	bl	8003940 <moveComets>
    		moveBullets();
 800260e:	f001 f813 	bl	8003638 <moveBullets>
    		moveEnemyBullets();
 8002612:	f001 f8cd 	bl	80037b0 <moveEnemyBullets>
 8002616:	e021      	b.n	800265c <loop+0x380>
    	}else if(gamechoice == 2) {
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <loop+0x3ac>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d11d      	bne.n	800265c <loop+0x380>
            if (start == 1 && ball.dir != still) {
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <loop+0x3c0>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d115      	bne.n	8002654 <loop+0x378>
 8002628:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <loop+0x3c4>)
 800262a:	7a1b      	ldrb	r3, [r3, #8]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d011      	beq.n	8002654 <loop+0x378>
                if (delay <= 0) {
 8002630:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <loop+0x3c8>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <loop+0x368>
                    lowerBricks();
 8002638:	f7fe f89e 	bl	8000778 <lowerBricks>
                    delay = BRICK_SPEED;
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <loop+0x3c8>)
 800263e:	228c      	movs	r2, #140	; 0x8c
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e005      	b.n	8002650 <loop+0x374>
                } else {
                    delay--;
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <loop+0x3c8>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	3b01      	subs	r3, #1
 800264a:	b2da      	uxtb	r2, r3
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <loop+0x3c8>)
 800264e:	701a      	strb	r2, [r3, #0]
                }
                checkGameOver();
 8002650:	f7fe f8fa 	bl	8000848 <checkGameOver>
            }
            checkGuardianTimer();
 8002654:	f7ff fc5e 	bl	8001f14 <checkGuardianTimer>
            playBall();
 8002658:	f7fd fea8 	bl	80003ac <playBall>
        }

    	updateScreen();
 800265c:	f000 f824 	bl	80026a8 <updateScreen>
    }if(play < paused){
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <loop+0x3b0>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d807      	bhi.n	8002678 <loop+0x39c>
    	if(gamechoice == 1){
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <loop+0x3ac>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d103      	bne.n	8002678 <loop+0x39c>
    		spawnStar();
 8002670:	f000 ff8a 	bl	8003588 <spawnStar>
    		moveStars();
 8002674:	f001 fa7c 	bl	8003b70 <moveStars>
    	}

    }
    return key;
 8002678:	687b      	ldr	r3, [r7, #4]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20001eec 	.word	0x20001eec
 8002688:	20001eed 	.word	0x20001eed
 800268c:	2000004a 	.word	0x2000004a
 8002690:	20001eeb 	.word	0x20001eeb
 8002694:	20001eee 	.word	0x20001eee
 8002698:	2000002c 	.word	0x2000002c
 800269c:	20001eef 	.word	0x20001eef
 80026a0:	20000034 	.word	0x20000034
 80026a4:	20000040 	.word	0x20000040

080026a8 <updateScreen>:


void updateScreen()
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af06      	add	r7, sp, #24
    if (play == menu){
 80026ae:	4b21      	ldr	r3, [pc, #132]	; (8002734 <updateScreen+0x8c>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d102      	bne.n	80026bc <updateScreen+0x14>
    	displayMenu();
 80026b6:	f000 fc1d 	bl	8002ef4 <displayMenu>
        return;
 80026ba:	e037      	b.n	800272c <updateScreen+0x84>
    }

    if (gamechoice == 1){
 80026bc:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <updateScreen+0x90>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d10c      	bne.n	80026de <updateScreen+0x36>
        //hit
        if (hit > 0) {
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <updateScreen+0x94>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <updateScreen+0x28>
            spaceShipHitColorToggle();
 80026cc:	f001 fd1c 	bl	8004108 <spaceShipHitColorToggle>
        }

        //spaceship
        displaySpaceShip(RED);
 80026d0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80026d4:	f001 fc8c 	bl	8003ff0 <displaySpaceShip>

        //lives
        displayLives();
 80026d8:	f001 fccc 	bl	8004074 <displayLives>
 80026dc:	e005      	b.n	80026ea <updateScreen+0x42>
    }else if(gamechoice == 2) {
 80026de:	4b16      	ldr	r3, [pc, #88]	; (8002738 <updateScreen+0x90>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d101      	bne.n	80026ea <updateScreen+0x42>
        printScreen();
 80026e6:	f7ff fb85 	bl	8001df4 <printScreen>
    }

    //start
    if(!play){
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <updateScreen+0x8c>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d115      	bne.n	800271e <updateScreen+0x76>
    	Displ_WString(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, "START", Font20, 2, WHITE, DARK_GREY);
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <updateScreen+0x98>)
 80026f4:	f642 422c 	movw	r2, #11308	; 0x2c2c
 80026f8:	9204      	str	r2, [sp, #16]
 80026fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026fe:	9203      	str	r2, [sp, #12]
 8002700:	2202      	movs	r2, #2
 8002702:	9202      	str	r2, [sp, #8]
 8002704:	466c      	mov	r4, sp
 8002706:	1d1a      	adds	r2, r3, #4
 8002708:	e892 0003 	ldmia.w	r2, {r0, r1}
 800270c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <updateScreen+0x9c>)
 8002714:	2178      	movs	r1, #120	; 0x78
 8002716:	205a      	movs	r0, #90	; 0x5a
 8002718:	f003 f81c 	bl	8005754 <Displ_WString>
 800271c:	e006      	b.n	800272c <updateScreen+0x84>
    }
    else if(play == paused){
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <updateScreen+0x8c>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d102      	bne.n	800272c <updateScreen+0x84>
    	displayPauseMenu(0);
 8002726:	2000      	movs	r0, #0
 8002728:	f000 fb82 	bl	8002e30 <displayPauseMenu>
    }
}
 800272c:	3704      	adds	r7, #4
 800272e:	46bd      	mov	sp, r7
 8002730:	bd90      	pop	{r4, r7, pc}
 8002732:	bf00      	nop
 8002734:	2000004a 	.word	0x2000004a
 8002738:	20001eed 	.word	0x20001eed
 800273c:	20001eeb 	.word	0x20001eeb
 8002740:	20000020 	.word	0x20000020
 8002744:	0800ba90 	.word	0x0800ba90

08002748 <read_MPU_mem>:
//        return -1;
//    }
//    return len;
//}

uint8_t read_MPU_mem(uint8_t reg_addr){
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af04      	add	r7, sp, #16
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	b29a      	uxth	r2, r3
 8002756:	2364      	movs	r3, #100	; 0x64
 8002758:	9302      	str	r3, [sp, #8]
 800275a:	2301      	movs	r3, #1
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	f107 030f 	add.w	r3, r7, #15
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2301      	movs	r3, #1
 8002766:	21d0      	movs	r1, #208	; 0xd0
 8002768:	4807      	ldr	r0, [pc, #28]	; (8002788 <read_MPU_mem+0x40>)
 800276a:	f003 ff65 	bl	8006638 <HAL_I2C_Mem_Read>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <read_MPU_mem+0x30>
		return data;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	e003      	b.n	8002780 <read_MPU_mem+0x38>
	}
	else{
		printf("mem not read\r\n");
 8002778:	4804      	ldr	r0, [pc, #16]	; (800278c <read_MPU_mem+0x44>)
 800277a:	f007 ff09 	bl	800a590 <puts>
		return 0;
 800277e:	2300      	movs	r3, #0
	}
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20001ef0 	.word	0x20001ef0
 800278c:	0800ba98 	.word	0x0800ba98

08002790 <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af04      	add	r7, sp, #16
 8002796:	4603      	mov	r3, r0
 8002798:	460a      	mov	r2, r1
 800279a:	71fb      	strb	r3, [r7, #7]
 800279c:	4613      	mov	r3, r2
 800279e:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	2364      	movs	r3, #100	; 0x64
 80027a6:	9302      	str	r3, [sp, #8]
 80027a8:	2301      	movs	r3, #1
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	1dbb      	adds	r3, r7, #6
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2301      	movs	r3, #1
 80027b2:	21d1      	movs	r1, #209	; 0xd1
 80027b4:	4806      	ldr	r0, [pc, #24]	; (80027d0 <write_MPU_mem+0x40>)
 80027b6:	f003 fe2b 	bl	8006410 <HAL_I2C_Mem_Write>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 80027c0:	4804      	ldr	r0, [pc, #16]	; (80027d4 <write_MPU_mem+0x44>)
 80027c2:	f007 fee5 	bl	800a590 <puts>
    }
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20001ef0 	.word	0x20001ef0
 80027d4:	0800baa8 	.word	0x0800baa8

080027d8 <read_y_accel>:

void read_y_accel(){
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
	uint8_t LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 80027de:	203e      	movs	r0, #62	; 0x3e
 80027e0:	f7ff ffb2 	bl	8002748 <read_MPU_mem>
 80027e4:	4603      	mov	r3, r0
 80027e6:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 80027e8:	203d      	movs	r0, #61	; 0x3d
 80027ea:	f7ff ffad 	bl	8002748 <read_MPU_mem>
 80027ee:	4603      	mov	r3, r0
 80027f0:	71bb      	strb	r3, [r7, #6]

	ay = (((int16_t)MSByte << 8) | LSByte);
 80027f2:	79bb      	ldrb	r3, [r7, #6]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	b21b      	sxth	r3, r3
 80027fc:	4313      	orrs	r3, r2
 80027fe:	b21a      	sxth	r2, r3
 8002800:	4b02      	ldr	r3, [pc, #8]	; (800280c <read_y_accel+0x34>)
 8002802:	801a      	strh	r2, [r3, #0]

}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	200020fc 	.word	0x200020fc

08002810 <init_MPU>:

void init_MPU(){
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 8002814:	2100      	movs	r1, #0
 8002816:	206b      	movs	r0, #107	; 0x6b
 8002818:	f7ff ffba 	bl	8002790 <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 800281c:	2107      	movs	r1, #7
 800281e:	2019      	movs	r0, #25
 8002820:	f7ff ffb6 	bl	8002790 <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 8002824:	2100      	movs	r1, #0
 8002826:	201b      	movs	r0, #27
 8002828:	f7ff ffb2 	bl	8002790 <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 800282c:	2100      	movs	r1, #0
 800282e:	201c      	movs	r0, #28
 8002830:	f7ff ffae 	bl	8002790 <write_MPU_mem>
}
 8002834:	bf00      	nop
 8002836:	bd80      	pop	{r7, pc}

08002838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800283e:	f002 fff3 	bl	8005828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002842:	f000 f885 	bl	8002950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002846:	f000 f9db 	bl	8002c00 <MX_GPIO_Init>
  MX_DMA_Init();
 800284a:	f000 f9bb 	bl	8002bc4 <MX_DMA_Init>
  MX_I2C2_Init();
 800284e:	f000 f8d5 	bl	80029fc <MX_I2C2_Init>
  MX_SPI2_Init();
 8002852:	f000 f913 	bl	8002a7c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002856:	f000 f94f 	bl	8002af8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800285a:	f000 f983 	bl	8002b64 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 800285e:	2064      	movs	r0, #100	; 0x64
 8002860:	f003 f848 	bl	80058f4 <HAL_Delay>
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 8002864:	2364      	movs	r3, #100	; 0x64
 8002866:	2201      	movs	r2, #1
 8002868:	21d0      	movs	r1, #208	; 0xd0
 800286a:	4830      	ldr	r0, [pc, #192]	; (800292c <main+0xf4>)
 800286c:	f003 fffe 	bl	800686c <HAL_I2C_IsDeviceReady>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <main+0x4a>
	  printf("succesfully communicated\n\r");
 8002876:	482e      	ldr	r0, [pc, #184]	; (8002930 <main+0xf8>)
 8002878:	f007 fe04 	bl	800a484 <iprintf>
	  init_MPU();
 800287c:	f7ff ffc8 	bl	8002810 <init_MPU>
 8002880:	e002      	b.n	8002888 <main+0x50>
  }
  else{
	  printf("i2C not found\n\r");
 8002882:	482c      	ldr	r0, [pc, #176]	; (8002934 <main+0xfc>)
 8002884:	f007 fdfe 	bl	800a484 <iprintf>
  }

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8002888:	2001      	movs	r0, #1
 800288a:	f002 f965 	bl	8004b58 <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 800288e:	2000      	movs	r0, #0
 8002890:	f002 fbb8 	bl	8005004 <Displ_CLS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(100);
 8002894:	2064      	movs	r0, #100	; 0x64
 8002896:	f003 f82d 	bl	80058f4 <HAL_Delay>

      read_y_accel();
 800289a:	f7ff ff9d 	bl	80027d8 <read_y_accel>
      if (ay > 2000){
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <main+0x100>)
 80028a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028a8:	dd07      	ble.n	80028ba <main+0x82>
          if(x < 320 - 88){
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <main+0x104>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	2be7      	cmp	r3, #231	; 0xe7
 80028b0:	d810      	bhi.n	80028d4 <main+0x9c>
        	  key = right;
 80028b2:	4b23      	ldr	r3, [pc, #140]	; (8002940 <main+0x108>)
 80028b4:	2203      	movs	r2, #3
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	e00c      	b.n	80028d4 <main+0x9c>
          }
      }
      else if (ay < -2000){
 80028ba:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <main+0x100>)
 80028bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028c0:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80028c4:	da06      	bge.n	80028d4 <main+0x9c>
          if(x > 0){
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <main+0x104>)
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <main+0x9c>
        	  key = left;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <main+0x108>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
          }
      }
      else{
      }
      key = loop(key);
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <main+0x108>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fcff 	bl	80022dc <loop>
 80028de:	4603      	mov	r3, r0
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <main+0x108>)
 80028e4:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ammo.in_play; i++){
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]
 80028ea:	e017      	b.n	800291c <main+0xe4>
    	  printf("hello?\r\n");
 80028ec:	4815      	ldr	r0, [pc, #84]	; (8002944 <main+0x10c>)
 80028ee:	f007 fe4f 	bl	800a590 <puts>
    	  printf("ammo %d: x:%d, y:%d\r\n",i,ammo.bullet_ar[i].x,ammo.bullet_ar[i].y);
 80028f2:	4a15      	ldr	r2, [pc, #84]	; (8002948 <main+0x110>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80028fe:	4619      	mov	r1, r3
 8002900:	4a11      	ldr	r2, [pc, #68]	; (8002948 <main+0x110>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800290c:	460a      	mov	r2, r1
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	480e      	ldr	r0, [pc, #56]	; (800294c <main+0x114>)
 8002912:	f007 fdb7 	bl	800a484 <iprintf>
      for (int i = 0; i < ammo.in_play; i++){
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3301      	adds	r3, #1
 800291a:	607b      	str	r3, [r7, #4]
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <main+0x110>)
 800291e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002922:	461a      	mov	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4293      	cmp	r3, r2
 8002928:	dbe0      	blt.n	80028ec <main+0xb4>
      HAL_Delay(100);
 800292a:	e7b3      	b.n	8002894 <main+0x5c>
 800292c:	20001ef0 	.word	0x20001ef0
 8002930:	0800babc 	.word	0x0800babc
 8002934:	0800bad8 	.word	0x0800bad8
 8002938:	200020fc 	.word	0x200020fc
 800293c:	20000042 	.word	0x20000042
 8002940:	20002104 	.word	0x20002104
 8002944:	0800bae8 	.word	0x0800bae8
 8002948:	2000216c 	.word	0x2000216c
 800294c:	0800baf0 	.word	0x0800baf0

08002950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b09c      	sub	sp, #112	; 0x70
 8002954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002956:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800295a:	2228      	movs	r2, #40	; 0x28
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f007 fd88 	bl	800a474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002964:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	2230      	movs	r2, #48	; 0x30
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f007 fd7a 	bl	800a474 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002980:	2302      	movs	r3, #2
 8002982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002984:	2301      	movs	r3, #1
 8002986:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002988:	2310      	movs	r3, #16
 800298a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800298c:	2302      	movs	r3, #2
 800298e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002990:	2300      	movs	r3, #0
 8002992:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002994:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002998:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800299a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800299e:	4618      	mov	r0, r3
 80029a0:	f004 fbbe 	bl	8007120 <HAL_RCC_OscConfig>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80029aa:	f000 fa3b 	bl	8002e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ae:	230f      	movs	r3, #15
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029b2:	2302      	movs	r3, #2
 80029b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029b6:	2300      	movs	r3, #0
 80029b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029c0:	2300      	movs	r3, #0
 80029c2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029c8:	2102      	movs	r1, #2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f005 fbe6 	bl	800819c <HAL_RCC_ClockConfig>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80029d6:	f000 fa25 	bl	8002e24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80029da:	2340      	movs	r3, #64	; 0x40
 80029dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	4618      	mov	r0, r3
 80029e6:	f005 fe0f 	bl	8008608 <HAL_RCCEx_PeriphCLKConfig>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80029f0:	f000 fa18 	bl	8002e24 <Error_Handler>
  }
}
 80029f4:	bf00      	nop
 80029f6:	3770      	adds	r7, #112	; 0x70
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a02:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <MX_I2C2_Init+0x78>)
 8002a04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a08:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <MX_I2C2_Init+0x7c>)
 8002a0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002a0c:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a12:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002a1e:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a36:	480e      	ldr	r0, [pc, #56]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a38:	f003 fc5a 	bl	80062f0 <HAL_I2C_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002a42:	f000 f9ef 	bl	8002e24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a46:	2100      	movs	r1, #0
 8002a48:	4809      	ldr	r0, [pc, #36]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a4a:	f004 fad1 	bl	8006ff0 <HAL_I2CEx_ConfigAnalogFilter>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002a54:	f000 f9e6 	bl	8002e24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4805      	ldr	r0, [pc, #20]	; (8002a70 <MX_I2C2_Init+0x74>)
 8002a5c:	f004 fb13 	bl	8007086 <HAL_I2CEx_ConfigDigitalFilter>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002a66:	f000 f9dd 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20001ef0 	.word	0x20001ef0
 8002a74:	40005800 	.word	0x40005800
 8002a78:	2000090e 	.word	0x2000090e

08002a7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002a82:	4a1c      	ldr	r2, [pc, #112]	; (8002af4 <MX_SPI2_Init+0x78>)
 8002a84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a8e:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002a96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a9a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a9c:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aa2:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002aca:	2207      	movs	r2, #7
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002ad6:	2208      	movs	r2, #8
 8002ad8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ada:	4805      	ldr	r0, [pc, #20]	; (8002af0 <MX_SPI2_Init+0x74>)
 8002adc:	f005 ff18 	bl	8008910 <HAL_SPI_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002ae6:	f000 f99d 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20001f44 	.word	0x20001f44
 8002af4:	40003800 	.word	0x40003800

08002af8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <MX_USART2_UART_Init+0x64>)
 8002afe:	4a18      	ldr	r2, [pc, #96]	; (8002b60 <MX_USART2_UART_Init+0x68>)
 8002b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b02:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <MX_USART2_UART_Init+0x64>)
 8002b04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <MX_USART2_UART_Init+0x64>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <MX_USART2_UART_Init+0x64>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <MX_USART2_UART_Init+0x64>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <MX_USART2_UART_Init+0x64>)
 8002b1e:	220c      	movs	r2, #12
 8002b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <MX_USART2_UART_Init+0x64>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <MX_USART2_UART_Init+0x64>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <MX_USART2_UART_Init+0x64>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <MX_USART2_UART_Init+0x64>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b3a:	4808      	ldr	r0, [pc, #32]	; (8002b5c <MX_USART2_UART_Init+0x64>)
 8002b3c:	f006 fcfc 	bl	8009538 <HAL_UART_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002b46:	f000 f96d 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART2->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <MX_USART2_UART_Init+0x68>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <MX_USART2_UART_Init+0x68>)
 8002b50:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8002b54:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20001fec 	.word	0x20001fec
 8002b60:	40004400 	.word	0x40004400

08002b64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <MX_USART3_UART_Init+0x58>)
 8002b6a:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <MX_USART3_UART_Init+0x5c>)
 8002b6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002b6e:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <MX_USART3_UART_Init+0x58>)
 8002b70:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002b74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <MX_USART3_UART_Init+0x58>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <MX_USART3_UART_Init+0x58>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <MX_USART3_UART_Init+0x58>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <MX_USART3_UART_Init+0x58>)
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <MX_USART3_UART_Init+0x58>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <MX_USART3_UART_Init+0x58>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <MX_USART3_UART_Init+0x58>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <MX_USART3_UART_Init+0x58>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ba6:	4805      	ldr	r0, [pc, #20]	; (8002bbc <MX_USART3_UART_Init+0x58>)
 8002ba8:	f006 fcc6 	bl	8009538 <HAL_UART_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002bb2:	f000 f937 	bl	8002e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20002074 	.word	0x20002074
 8002bc0:	40004800 	.word	0x40004800

08002bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <MX_DMA_Init+0x38>)
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	4a0b      	ldr	r2, [pc, #44]	; (8002bfc <MX_DMA_Init+0x38>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6153      	str	r3, [r2, #20]
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <MX_DMA_Init+0x38>)
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2100      	movs	r1, #0
 8002be6:	200f      	movs	r0, #15
 8002be8:	f002 ff83 	bl	8005af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002bec:	200f      	movs	r0, #15
 8002bee:	f002 ff9c 	bl	8005b2a <HAL_NVIC_EnableIRQ>

}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000

08002c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	; 0x28
 8002c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c06:	f107 0314 	add.w	r3, r7, #20
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	60da      	str	r2, [r3, #12]
 8002c14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c16:	4b46      	ldr	r3, [pc, #280]	; (8002d30 <MX_GPIO_Init+0x130>)
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	4a45      	ldr	r2, [pc, #276]	; (8002d30 <MX_GPIO_Init+0x130>)
 8002c1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c20:	6153      	str	r3, [r2, #20]
 8002c22:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <MX_GPIO_Init+0x130>)
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c2e:	4b40      	ldr	r3, [pc, #256]	; (8002d30 <MX_GPIO_Init+0x130>)
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	4a3f      	ldr	r2, [pc, #252]	; (8002d30 <MX_GPIO_Init+0x130>)
 8002c34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c38:	6153      	str	r3, [r2, #20]
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <MX_GPIO_Init+0x130>)
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <MX_GPIO_Init+0x130>)
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	4a39      	ldr	r2, [pc, #228]	; (8002d30 <MX_GPIO_Init+0x130>)
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c50:	6153      	str	r3, [r2, #20]
 8002c52:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <MX_GPIO_Init+0x130>)
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <MX_GPIO_Init+0x130>)
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	4a33      	ldr	r2, [pc, #204]	; (8002d30 <MX_GPIO_Init+0x130>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c68:	6153      	str	r3, [r2, #20]
 8002c6a:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <MX_GPIO_Init+0x130>)
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8002c76:	2200      	movs	r2, #0
 8002c78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c7c:	482d      	ldr	r0, [pc, #180]	; (8002d34 <MX_GPIO_Init+0x134>)
 8002c7e:	f003 fb07 	bl	8006290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8002c82:	2200      	movs	r2, #0
 8002c84:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c8c:	f003 fb00 	bl	8006290 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8002c90:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4824      	ldr	r0, [pc, #144]	; (8002d38 <MX_GPIO_Init+0x138>)
 8002ca8:	f003 f968 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8002cac:	2301      	movs	r3, #1
 8002cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cb0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 8002cba:	f107 0314 	add.w	r3, r7, #20
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cc4:	f003 f95a 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8002cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4814      	ldr	r0, [pc, #80]	; (8002d34 <MX_GPIO_Init+0x134>)
 8002ce2:	f003 f94b 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 8002ce6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cec:	2301      	movs	r3, #1
 8002cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d02:	f003 f93b 	bl	8005f7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	2006      	movs	r0, #6
 8002d0c:	f002 fef1 	bl	8005af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d10:	2006      	movs	r0, #6
 8002d12:	f002 ff0a 	bl	8005b2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d16:	2200      	movs	r2, #0
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2028      	movs	r0, #40	; 0x28
 8002d1c:	f002 fee9 	bl	8005af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d20:	2028      	movs	r0, #40	; 0x28
 8002d22:	f002 ff02 	bl	8005b2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d26:	bf00      	nop
 8002d28:	3728      	adds	r7, #40	; 0x28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	48000400 	.word	0x48000400
 8002d38:	48000800 	.word	0x48000800

08002d3c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	80fb      	strh	r3, [r7, #6]
    // Get the current time
    uint32_t current_time = HAL_GetTick();
 8002d46:	f002 fdc9 	bl	80058dc <HAL_GetTick>
 8002d4a:	60f8      	str	r0, [r7, #12]

    // Check if it's been long enough since the last debounce
    if (current_time - debounce_time > DEBOUNCE_DELAY) {
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b1e      	cmp	r3, #30
 8002d56:	d951      	bls.n	8002dfc <HAL_GPIO_EXTI_Callback+0xc0>
        // Update debounce time
        debounce_time = current_time;
 8002d58:	4a2a      	ldr	r2, [pc, #168]	; (8002e04 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6013      	str	r3, [r2, #0]
        // Your button handling code here
        printf("interrupt!\r\n");
 8002d5e:	482a      	ldr	r0, [pc, #168]	; (8002e08 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002d60:	f007 fc16 	bl	800a590 <puts>
        if (GPIO_Pin == LEFT_Pin && HAL_GPIO_ReadPin(LEFT_GPIO_Port, GPIO_Pin) == 0) {
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d6a:	d10e      	bne.n	8002d8a <HAL_GPIO_EXTI_Callback+0x4e>
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4826      	ldr	r0, [pc, #152]	; (8002e0c <HAL_GPIO_EXTI_Callback+0xd0>)
 8002d72:	f003 fa75 	bl	8006260 <HAL_GPIO_ReadPin>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d106      	bne.n	8002d8a <HAL_GPIO_EXTI_Callback+0x4e>
            key = left;
 8002d7c:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
            printf("left clicked\r\n");
 8002d82:	4824      	ldr	r0, [pc, #144]	; (8002e14 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002d84:	f007 fc04 	bl	800a590 <puts>
 8002d88:	e038      	b.n	8002dfc <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == TOP_Pin && HAL_GPIO_ReadPin(TOP_GPIO_Port, GPIO_Pin) == 0) {
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d90:	d10e      	bne.n	8002db0 <HAL_GPIO_EXTI_Callback+0x74>
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	4619      	mov	r1, r3
 8002d96:	481d      	ldr	r0, [pc, #116]	; (8002e0c <HAL_GPIO_EXTI_Callback+0xd0>)
 8002d98:	f003 fa62 	bl	8006260 <HAL_GPIO_ReadPin>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_GPIO_EXTI_Callback+0x74>
            key = up;
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002da4:	2202      	movs	r2, #2
 8002da6:	701a      	strb	r2, [r3, #0]
            printf("up clicked\r\n");
 8002da8:	481b      	ldr	r0, [pc, #108]	; (8002e18 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002daa:	f007 fbf1 	bl	800a590 <puts>
 8002dae:	e025      	b.n	8002dfc <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == RIGHT_Pin && HAL_GPIO_ReadPin(RIGHT_GPIO_Port, GPIO_Pin) == 0) {
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002db6:	d10e      	bne.n	8002dd6 <HAL_GPIO_EXTI_Callback+0x9a>
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4813      	ldr	r0, [pc, #76]	; (8002e0c <HAL_GPIO_EXTI_Callback+0xd0>)
 8002dbe:	f003 fa4f 	bl	8006260 <HAL_GPIO_ReadPin>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d106      	bne.n	8002dd6 <HAL_GPIO_EXTI_Callback+0x9a>
            key = right;
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002dca:	2203      	movs	r2, #3
 8002dcc:	701a      	strb	r2, [r3, #0]
            printf("right clicked\r\n");
 8002dce:	4813      	ldr	r0, [pc, #76]	; (8002e1c <HAL_GPIO_EXTI_Callback+0xe0>)
 8002dd0:	f007 fbde 	bl	800a590 <puts>
 8002dd4:	e012      	b.n	8002dfc <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == MIDDLE_Pin && HAL_GPIO_ReadPin(MIDDLE_GPIO_Port, GPIO_Pin) == 0) {
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d10f      	bne.n	8002dfc <HAL_GPIO_EXTI_Callback+0xc0>
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	4619      	mov	r1, r3
 8002de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de4:	f003 fa3c 	bl	8006260 <HAL_GPIO_ReadPin>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_GPIO_EXTI_Callback+0xc0>
            key = down;
 8002dee:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002df0:	2204      	movs	r2, #4
 8002df2:	701a      	strb	r2, [r3, #0]
            printf("down clicked\r\n");
 8002df4:	480a      	ldr	r0, [pc, #40]	; (8002e20 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002df6:	f007 fbcb 	bl	800a590 <puts>
        }
    }
}
 8002dfa:	e7ff      	b.n	8002dfc <HAL_GPIO_EXTI_Callback+0xc0>
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20002100 	.word	0x20002100
 8002e08:	0800bb08 	.word	0x0800bb08
 8002e0c:	48000800 	.word	0x48000800
 8002e10:	20002104 	.word	0x20002104
 8002e14:	0800bb14 	.word	0x0800bb14
 8002e18:	0800bb24 	.word	0x0800bb24
 8002e1c:	0800bb30 	.word	0x0800bb30
 8002e20:	0800bb40 	.word	0x0800bb40

08002e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e28:	b672      	cpsid	i
}
 8002e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e2c:	e7fe      	b.n	8002e2c <Error_Handler+0x8>
	...

08002e30 <displayPauseMenu>:

void displayMultiplayerIcon(void);
void displayBricksIcon(void);
void displaySpaceIcon(void);

void displayPauseMenu(uint8_t clear){
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af04      	add	r7, sp, #16
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
	uint16_t back_color = GREY;
 8002e3a:	f249 6396 	movw	r3, #38550	; 0x9696
 8002e3e:	81fb      	strh	r3, [r7, #14]
	uint16_t continue_color = RED;
 8002e40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e44:	81bb      	strh	r3, [r7, #12]
	uint16_t triangle_color = WHITE;
 8002e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e4a:	817b      	strh	r3, [r7, #10]
	if(choice != last_choice_pause || clear){
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <displayPauseMenu+0xbc>)
 8002e4e:	781a      	ldrb	r2, [r3, #0]
 8002e50:	4b27      	ldr	r3, [pc, #156]	; (8002ef0 <displayPauseMenu+0xc0>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d102      	bne.n	8002e5e <displayPauseMenu+0x2e>
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d042      	beq.n	8002ee4 <displayPauseMenu+0xb4>
		last_choice_pause = choice;
 8002e5e:	4b23      	ldr	r3, [pc, #140]	; (8002eec <displayPauseMenu+0xbc>)
 8002e60:	781a      	ldrb	r2, [r3, #0]
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <displayPauseMenu+0xc0>)
 8002e64:	701a      	strb	r2, [r3, #0]
		if(choice == 0){
 8002e66:	4b21      	ldr	r3, [pc, #132]	; (8002eec <displayPauseMenu+0xbc>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <displayPauseMenu+0x4c>
			back_color = RED;
 8002e6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e72:	81fb      	strh	r3, [r7, #14]
			continue_color = GREY;
 8002e74:	f249 6396 	movw	r3, #38550	; 0x9696
 8002e78:	81bb      	strh	r3, [r7, #12]
 8002e7a:	e00b      	b.n	8002e94 <displayPauseMenu+0x64>
		}
		else if(clear){
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <displayPauseMenu+0x64>
			back_color = DARK_GREY;
 8002e82:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002e86:	81fb      	strh	r3, [r7, #14]
			continue_color = DARK_GREY;
 8002e88:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002e8c:	81bb      	strh	r3, [r7, #12]
			triangle_color = DARK_GREY;
 8002e8e:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002e92:	817b      	strh	r3, [r7, #10]
		}
		Displ_FillArea(SCREEN_WIDTH * 2 - BUTTON_SIZE - 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, back_color);
 8002e94:	89fb      	ldrh	r3, [r7, #14]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2340      	movs	r3, #64	; 0x40
 8002e9a:	2240      	movs	r2, #64	; 0x40
 8002e9c:	2158      	movs	r1, #88	; 0x58
 8002e9e:	2054      	movs	r0, #84	; 0x54
 8002ea0:	f001 fefc 	bl	8004c9c <Displ_FillArea>
		Displ_FillArea(SCREEN_WIDTH * 2 + 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, continue_color);
 8002ea4:	89bb      	ldrh	r3, [r7, #12]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	2340      	movs	r3, #64	; 0x40
 8002eaa:	2240      	movs	r2, #64	; 0x40
 8002eac:	2158      	movs	r1, #88	; 0x58
 8002eae:	20ac      	movs	r0, #172	; 0xac
 8002eb0:	f001 fef4 	bl	8004c9c <Displ_FillArea>

		Displ_fillTriangle(SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 + 20 + BUTTON_SIZE - 16, SCREEN_HEIGHT * 2, triangle_color);
 8002eb4:	897b      	ldrh	r3, [r7, #10]
 8002eb6:	9302      	str	r3, [sp, #8]
 8002eb8:	2378      	movs	r3, #120	; 0x78
 8002eba:	9301      	str	r3, [sp, #4]
 8002ebc:	23e4      	movs	r3, #228	; 0xe4
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2390      	movs	r3, #144	; 0x90
 8002ec2:	22b4      	movs	r2, #180	; 0xb4
 8002ec4:	2160      	movs	r1, #96	; 0x60
 8002ec6:	20b4      	movs	r0, #180	; 0xb4
 8002ec8:	f002 f9e9 	bl	800529e <Displ_fillTriangle>
		Displ_fillTriangle(SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 - 20 - BUTTON_SIZE + 16, SCREEN_HEIGHT * 2, triangle_color);
 8002ecc:	897b      	ldrh	r3, [r7, #10]
 8002ece:	9302      	str	r3, [sp, #8]
 8002ed0:	2378      	movs	r3, #120	; 0x78
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	235c      	movs	r3, #92	; 0x5c
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	2390      	movs	r3, #144	; 0x90
 8002eda:	228c      	movs	r2, #140	; 0x8c
 8002edc:	2160      	movs	r1, #96	; 0x60
 8002ede:	208c      	movs	r0, #140	; 0x8c
 8002ee0:	f002 f9dd 	bl	800529e <Displ_fillTriangle>
	}

}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20001eec 	.word	0x20001eec
 8002ef0:	2000002c 	.word	0x2000002c

08002ef4 <displayMenu>:

void displayMenu(){
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b08b      	sub	sp, #44	; 0x2c
 8002ef8:	af06      	add	r7, sp, #24
	int y_offset = 12;
 8002efa:	230c      	movs	r3, #12
 8002efc:	60fb      	str	r3, [r7, #12]
	int x_offset = 12;
 8002efe:	230c      	movs	r3, #12
 8002f00:	60bb      	str	r3, [r7, #8]
	//box around
	if(choice != last_choice_menu){
 8002f02:	4b4c      	ldr	r3, [pc, #304]	; (8003034 <displayMenu+0x140>)
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	4b4c      	ldr	r3, [pc, #304]	; (8003038 <displayMenu+0x144>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d03d      	beq.n	8002f8a <displayMenu+0x96>
		last_choice_menu =  choice;
 8002f0e:	4b49      	ldr	r3, [pc, #292]	; (8003034 <displayMenu+0x140>)
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	4b49      	ldr	r3, [pc, #292]	; (8003038 <displayMenu+0x144>)
 8002f14:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	e02e      	b.n	8002f7a <displayMenu+0x86>
			if(i == choice){
 8002f1c:	4b45      	ldr	r3, [pc, #276]	; (8003034 <displayMenu+0x140>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d10b      	bne.n	8002f40 <displayMenu+0x4c>
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, RED);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	b298      	uxth	r0, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	b299      	uxth	r1, r3
 8002f30:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	2340      	movs	r3, #64	; 0x40
 8002f38:	2240      	movs	r2, #64	; 0x40
 8002f3a:	f001 feaf 	bl	8004c9c <Displ_FillArea>
 8002f3e:	e00a      	b.n	8002f56 <displayMenu+0x62>
			}else{
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, GREY);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	b298      	uxth	r0, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	b299      	uxth	r1, r3
 8002f48:	f249 6396 	movw	r3, #38550	; 0x9696
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	2340      	movs	r3, #64	; 0x40
 8002f50:	2240      	movs	r2, #64	; 0x40
 8002f52:	f001 fea3 	bl	8004c9c <Displ_FillArea>
			}if((i + 1)% 4 == 0){
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d105      	bne.n	8002f6e <displayMenu+0x7a>
				x_offset = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
				y_offset += BUTTON_SIZE + 12;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	334c      	adds	r3, #76	; 0x4c
 8002f6a:	60fb      	str	r3, [r7, #12]
				continue;
 8002f6c:	e002      	b.n	8002f74 <displayMenu+0x80>
			}
			x_offset += BUTTON_SIZE + 12;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	334c      	adds	r3, #76	; 0x4c
 8002f72:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3301      	adds	r3, #1
 8002f78:	607b      	str	r3, [r7, #4]
 8002f7a:	4b30      	ldr	r3, [pc, #192]	; (800303c <displayMenu+0x148>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	dc02      	bgt.n	8002f8a <displayMenu+0x96>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b07      	cmp	r3, #7
 8002f88:	ddc8      	ble.n	8002f1c <displayMenu+0x28>
		}
	}
    displayMenuIcons();
 8002f8a:	f000 f861 	bl	8003050 <displayMenuIcons>

    // text
    switch (choice) {
 8002f8e:	4b29      	ldr	r3, [pc, #164]	; (8003034 <displayMenu+0x140>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d032      	beq.n	8002ffc <displayMenu+0x108>
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	dc46      	bgt.n	8003028 <displayMenu+0x134>
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <displayMenu+0xb0>
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d016      	beq.n	8002fd0 <displayMenu+0xdc>
        break;
    case 2:
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
        break;
    default:
        break;
 8002fa2:	e041      	b.n	8003028 <displayMenu+0x134>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Multiplayer   ", Font20, 1, WHITE, DARK_GREY);
 8002fa4:	4b26      	ldr	r3, [pc, #152]	; (8003040 <displayMenu+0x14c>)
 8002fa6:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8002faa:	9204      	str	r2, [sp, #16]
 8002fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fb0:	9203      	str	r2, [sp, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	9202      	str	r2, [sp, #8]
 8002fb6:	466c      	mov	r4, sp
 8002fb8:	1d1a      	adds	r2, r3, #4
 8002fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fbe:	e884 0003 	stmia.w	r4, {r0, r1}
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <displayMenu+0x150>)
 8002fc6:	21c8      	movs	r1, #200	; 0xc8
 8002fc8:	2008      	movs	r0, #8
 8002fca:	f002 fbc3 	bl	8005754 <Displ_WString>
        break;
 8002fce:	e02c      	b.n	800302a <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Brick Breaker ", Font20, 1, WHITE, DARK_GREY);
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <displayMenu+0x14c>)
 8002fd2:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8002fd6:	9204      	str	r2, [sp, #16]
 8002fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fdc:	9203      	str	r2, [sp, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	9202      	str	r2, [sp, #8]
 8002fe2:	466c      	mov	r4, sp
 8002fe4:	1d1a      	adds	r2, r3, #4
 8002fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fea:	e884 0003 	stmia.w	r4, {r0, r1}
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a15      	ldr	r2, [pc, #84]	; (8003048 <displayMenu+0x154>)
 8002ff2:	21c8      	movs	r1, #200	; 0xc8
 8002ff4:	2008      	movs	r0, #8
 8002ff6:	f002 fbad 	bl	8005754 <Displ_WString>
        break;
 8002ffa:	e016      	b.n	800302a <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
 8002ffc:	4b10      	ldr	r3, [pc, #64]	; (8003040 <displayMenu+0x14c>)
 8002ffe:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8003002:	9204      	str	r2, [sp, #16]
 8003004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003008:	9203      	str	r2, [sp, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	9202      	str	r2, [sp, #8]
 800300e:	466c      	mov	r4, sp
 8003010:	1d1a      	adds	r2, r3, #4
 8003012:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003016:	e884 0003 	stmia.w	r4, {r0, r1}
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a0b      	ldr	r2, [pc, #44]	; (800304c <displayMenu+0x158>)
 800301e:	21c8      	movs	r1, #200	; 0xc8
 8003020:	2008      	movs	r0, #8
 8003022:	f002 fb97 	bl	8005754 <Displ_WString>
        break;
 8003026:	e000      	b.n	800302a <displayMenu+0x136>
        break;
 8003028:	bf00      	nop
    }
}
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bd90      	pop	{r4, r7, pc}
 8003032:	bf00      	nop
 8003034:	20001eec 	.word	0x20001eec
 8003038:	20000048 	.word	0x20000048
 800303c:	20000044 	.word	0x20000044
 8003040:	20000020 	.word	0x20000020
 8003044:	0800bb50 	.word	0x0800bb50
 8003048:	0800bb60 	.word	0x0800bb60
 800304c:	0800bb70 	.word	0x0800bb70

08003050 <displayMenuIcons>:

void displayMenuIcons(){
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0

    // multiplayer
	displayMultiplayerIcon();
 8003054:	f000 f806 	bl	8003064 <displayMultiplayerIcon>

    // brick
	displayBricksIcon();
 8003058:	f000 f868 	bl	800312c <displayBricksIcon>

    //spaceinvaders
	displaySpaceIcon();
 800305c:	f000 f890 	bl	8003180 <displaySpaceIcon>
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}

08003064 <displayMultiplayerIcon>:

void displayMultiplayerIcon(){
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af02      	add	r7, sp, #8
	if(connected){
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <displayMultiplayerIcon+0xc4>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d023      	beq.n	80030ba <displayMultiplayerIcon+0x56>
		Displ_FillArea(20, 20, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 8003072:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2304      	movs	r3, #4
 800307a:	2230      	movs	r2, #48	; 0x30
 800307c:	2114      	movs	r1, #20
 800307e:	2014      	movs	r0, #20
 8003080:	f001 fe0c 	bl	8004c9c <Displ_FillArea>
		Displ_FillArea(20, 12, 4, 8, LIGHT_GREEN);
 8003084:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	2308      	movs	r3, #8
 800308c:	2204      	movs	r2, #4
 800308e:	210c      	movs	r1, #12
 8003090:	2014      	movs	r0, #20
 8003092:	f001 fe03 	bl	8004c9c <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE, 12, 4, 8, LIGHT_GREEN);
 8003096:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2308      	movs	r3, #8
 800309e:	2204      	movs	r2, #4
 80030a0:	210c      	movs	r1, #12
 80030a2:	2040      	movs	r0, #64	; 0x40
 80030a4:	f001 fdfa 	bl	8004c9c <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE/2 + 8, 24, 8, BUTTON_SIZE - 24, LIGHT_GREEN);
 80030a8:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	2328      	movs	r3, #40	; 0x28
 80030b0:	2208      	movs	r2, #8
 80030b2:	2118      	movs	r1, #24
 80030b4:	2028      	movs	r0, #40	; 0x28
 80030b6:	f001 fdf1 	bl	8004c9c <Displ_FillArea>
	}
	Displ_FillArea(20, BUTTON_SIZE, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 80030ba:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2304      	movs	r3, #4
 80030c2:	2230      	movs	r2, #48	; 0x30
 80030c4:	2140      	movs	r1, #64	; 0x40
 80030c6:	2014      	movs	r0, #20
 80030c8:	f001 fde8 	bl	8004c9c <Displ_FillArea>
	Displ_FillArea(20, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 80030cc:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	2308      	movs	r3, #8
 80030d4:	2204      	movs	r2, #4
 80030d6:	2144      	movs	r1, #68	; 0x44
 80030d8:	2014      	movs	r0, #20
 80030da:	f001 fddf 	bl	8004c9c <Displ_FillArea>
	Displ_FillArea(BUTTON_SIZE, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 80030de:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	2308      	movs	r3, #8
 80030e6:	2204      	movs	r2, #4
 80030e8:	2144      	movs	r1, #68	; 0x44
 80030ea:	2040      	movs	r0, #64	; 0x40
 80030ec:	f001 fdd6 	bl	8004c9c <Displ_FillArea>
	if(!connected){
 80030f0:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <displayMultiplayerIcon+0xc4>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d112      	bne.n	800311e <displayMultiplayerIcon+0xba>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 80030f8:	2318      	movs	r3, #24
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	e00c      	b.n	8003118 <displayMultiplayerIcon+0xb4>
			Displ_FillArea(BUTTON_SIZE/2 + 8, k, 8, 4, LIGHT_GREEN);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	b299      	uxth	r1, r3
 8003102:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	2304      	movs	r3, #4
 800310a:	2208      	movs	r2, #8
 800310c:	2028      	movs	r0, #40	; 0x28
 800310e:	f001 fdc5 	bl	8004c9c <Displ_FillArea>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3308      	adds	r3, #8
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b3f      	cmp	r3, #63	; 0x3f
 800311c:	ddef      	ble.n	80030fe <displayMultiplayerIcon+0x9a>
		}
	}
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20002105 	.word	0x20002105

0800312c <displayBricksIcon>:

void displayBricksIcon(){
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af02      	add	r7, sp, #8
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE, 20, 4, LIGHT_GREEN);
 8003132:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2304      	movs	r3, #4
 800313a:	2214      	movs	r2, #20
 800313c:	2140      	movs	r1, #64	; 0x40
 800313e:	2068      	movs	r0, #104	; 0x68
 8003140:	f001 fdac 	bl	8004c9c <Displ_FillArea>
	Displ_FillArea(28+BUTTON_SIZE, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 8003144:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2340      	movs	r3, #64	; 0x40
 800314c:	2204      	movs	r2, #4
 800314e:	210c      	movs	r1, #12
 8003150:	205c      	movs	r0, #92	; 0x5c
 8003152:	f001 fda3 	bl	8004c9c <Displ_FillArea>
	Displ_FillArea((8+BUTTON_SIZE)*2, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 8003156:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	2340      	movs	r3, #64	; 0x40
 800315e:	2204      	movs	r2, #4
 8003160:	210c      	movs	r1, #12
 8003162:	2090      	movs	r0, #144	; 0x90
 8003164:	f001 fd9a 	bl	8004c9c <Displ_FillArea>
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE - 20, 4, 4, LIGHT_GREEN);
 8003168:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2304      	movs	r3, #4
 8003170:	2204      	movs	r2, #4
 8003172:	212c      	movs	r1, #44	; 0x2c
 8003174:	2068      	movs	r0, #104	; 0x68
 8003176:	f001 fd91 	bl	8004c9c <Displ_FillArea>
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <displaySpaceIcon>:

void displaySpaceIcon(){
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af02      	add	r7, sp, #8
	Displ_FillArea((BUTTON_SIZE+12)*3 - 48, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 8003186:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2310      	movs	r3, #16
 800318e:	2204      	movs	r2, #4
 8003190:	2134      	movs	r1, #52	; 0x34
 8003192:	20b4      	movs	r0, #180	; 0xb4
 8003194:	f001 fd82 	bl	8004c9c <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 32, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 8003198:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	2310      	movs	r3, #16
 80031a0:	2204      	movs	r2, #4
 80031a2:	2134      	movs	r1, #52	; 0x34
 80031a4:	20c4      	movs	r0, #196	; 0xc4
 80031a6:	f001 fd79 	bl	8004c9c <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 44, BUTTON_SIZE -8, 12, 4, LIGHT_GREEN);
 80031aa:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	2304      	movs	r3, #4
 80031b2:	220c      	movs	r2, #12
 80031b4:	2138      	movs	r1, #56	; 0x38
 80031b6:	20b8      	movs	r0, #184	; 0xb8
 80031b8:	f001 fd70 	bl	8004c9c <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 40, BUTTON_SIZE -16, 4, 16, LIGHT_GREEN);
 80031bc:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	2310      	movs	r3, #16
 80031c4:	2204      	movs	r2, #4
 80031c6:	2130      	movs	r1, #48	; 0x30
 80031c8:	20bc      	movs	r0, #188	; 0xbc
 80031ca:	f001 fd67 	bl	8004c9c <Displ_FillArea>

	Displ_FillArea((BUTTON_SIZE+12)*3 - 36, BUTTON_SIZE -40, 12, 12, LIGHT_GREEN);
 80031ce:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	230c      	movs	r3, #12
 80031d6:	220c      	movs	r2, #12
 80031d8:	2118      	movs	r1, #24
 80031da:	20c0      	movs	r0, #192	; 0xc0
 80031dc:	f001 fd5e 	bl	8004c9c <Displ_FillArea>
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <addCharacterToArray>:
        check_availability();
    }

}

void addCharacterToArray(char c) {
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b08b      	sub	sp, #44	; 0x2c
 80031ec:	af06      	add	r7, sp, #24
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
    char filler[2];
    filler[0] = c;
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	733b      	strb	r3, [r7, #12]
    filler[1] = '\0';
 80031f6:	2300      	movs	r3, #0
 80031f8:	737b      	strb	r3, [r7, #13]

    strcat(characterArray, filler);
 80031fa:	f107 030c 	add.w	r3, r7, #12
 80031fe:	4619      	mov	r1, r3
 8003200:	480f      	ldr	r0, [pc, #60]	; (8003240 <addCharacterToArray+0x58>)
 8003202:	f007 fa6d 	bl	800a6e0 <strcat>
    printf("%s\r\n", characterArray);
 8003206:	490e      	ldr	r1, [pc, #56]	; (8003240 <addCharacterToArray+0x58>)
 8003208:	480e      	ldr	r0, [pc, #56]	; (8003244 <addCharacterToArray+0x5c>)
 800320a:	f007 f93b 	bl	800a484 <iprintf>
    Displ_WString(20, 150, characterArray, Font16, 1, WHITE, BLACK);
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <addCharacterToArray+0x60>)
 8003210:	2200      	movs	r2, #0
 8003212:	9204      	str	r2, [sp, #16]
 8003214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003218:	9203      	str	r2, [sp, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	9202      	str	r2, [sp, #8]
 800321e:	466c      	mov	r4, sp
 8003220:	1d1a      	adds	r2, r3, #4
 8003222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003226:	e884 0003 	stmia.w	r4, {r0, r1}
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a04      	ldr	r2, [pc, #16]	; (8003240 <addCharacterToArray+0x58>)
 800322e:	2196      	movs	r1, #150	; 0x96
 8003230:	2014      	movs	r0, #20
 8003232:	f002 fa8f 	bl	8005754 <Displ_WString>
}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	bf00      	nop
 8003240:	20002108 	.word	0x20002108
 8003244:	0800bb80 	.word	0x0800bb80
 8003248:	20000014 	.word	0x20000014

0800324c <initSpaceInvaders>:
 * initialises ammo by clearing all values using initAmmo()
 * initialises comets by clearing all values using initComets()
 * initialises stars by clearing all values using initStars()
 *
 */
void initSpaceInvaders(){
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
    money = 0;
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <initSpaceInvaders+0x6c>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
    lives = 3;
 8003256:	4b19      	ldr	r3, [pc, #100]	; (80032bc <initSpaceInvaders+0x70>)
 8003258:	2203      	movs	r2, #3
 800325a:	701a      	strb	r2, [r3, #0]

    Displ_CLS(DARK_GREY);
 800325c:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003260:	f001 fed0 	bl	8005004 <Displ_CLS>
    // Seed the random number generator
    srand(HAL_GetTick());
 8003264:	f002 fb3a 	bl	80058dc <HAL_GetTick>
 8003268:	4603      	mov	r3, r0
 800326a:	4618      	mov	r0, r3
 800326c:	f007 f998 	bl	800a5a0 <srand>
    comet_delay = RANDOM(5,20);
 8003270:	f007 f9c4 	bl	800a5fc <rand>
 8003274:	4603      	mov	r3, r0
 8003276:	425a      	negs	r2, r3
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	f002 020f 	and.w	r2, r2, #15
 8003280:	bf58      	it	pl
 8003282:	4253      	negpl	r3, r2
 8003284:	b2db      	uxtb	r3, r3
 8003286:	3305      	adds	r3, #5
 8003288:	b2da      	uxtb	r2, r3
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <initSpaceInvaders+0x74>)
 800328c:	701a      	strb	r2, [r3, #0]
    initSpaceShip();
 800328e:	f000 f81f 	bl	80032d0 <initSpaceShip>
    initAmmo(&ammo,0);
 8003292:	2100      	movs	r1, #0
 8003294:	480b      	ldr	r0, [pc, #44]	; (80032c4 <initSpaceInvaders+0x78>)
 8003296:	f000 f827 	bl	80032e8 <initAmmo>
    if(in_multiplayer){
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <initSpaceInvaders+0x7c>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <initSpaceInvaders+0x5e>
        initAmmo(&enemy_ammo,1);
 80032a2:	2101      	movs	r1, #1
 80032a4:	4809      	ldr	r0, [pc, #36]	; (80032cc <initSpaceInvaders+0x80>)
 80032a6:	f000 f81f 	bl	80032e8 <initAmmo>
    }
    initComets();
 80032aa:	f000 f845 	bl	8003338 <initComets>
    initStars();
 80032ae:	f000 f86d 	bl	800338c <initStars>
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200021d0 	.word	0x200021d0
 80032bc:	20000049 	.word	0x20000049
 80032c0:	200021d4 	.word	0x200021d4
 80032c4:	2000216c 	.word	0x2000216c
 80032c8:	20000051 	.word	0x20000051
 80032cc:	2000217c 	.word	0x2000217c

080032d0 <initSpaceShip>:

void initSpaceShip(){
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
    SpaceShip.x = SCREEN_WIDTH/2;
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <initSpaceShip+0x14>)
 80032d6:	2228      	movs	r2, #40	; 0x28
 80032d8:	701a      	strb	r2, [r3, #0]
}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	2000004c 	.word	0x2000004c

080032e8 <initAmmo>:

void initAmmo(bullets *am,int enemy){
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
    am->enemy = enemy;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	b25a      	sxtb	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	701a      	strb	r2, [r3, #0]
    am->in_play=0;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	705a      	strb	r2, [r3, #1]
    for (int i = 0;i<MAX_BULLETS;i++){
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	e00e      	b.n	8003324 <initAmmo+0x3c>
        am->bullet_ar[i].x = -1;
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	22ff      	movs	r2, #255	; 0xff
 8003310:	709a      	strb	r2, [r3, #2]
        am->bullet_ar[i].y = -1;
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	22ff      	movs	r2, #255	; 0xff
 800331c:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_BULLETS;i++){
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	3301      	adds	r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b05      	cmp	r3, #5
 8003328:	dded      	ble.n	8003306 <initAmmo+0x1e>
    }
}
 800332a:	bf00      	nop
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <initComets>:

void initComets(){
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
    Comet.in_play = 0;
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <initComets+0x50>)
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 8003344:	2300      	movs	r3, #0
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	e014      	b.n	8003374 <initComets+0x3c>
        COMET_X(i) = -1;
 800334a:	4a0f      	ldr	r2, [pc, #60]	; (8003388 <initComets+0x50>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	22ff      	movs	r2, #255	; 0xff
 8003354:	705a      	strb	r2, [r3, #1]
        COMET_Y(i) = -1;
 8003356:	4a0c      	ldr	r2, [pc, #48]	; (8003388 <initComets+0x50>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	22ff      	movs	r2, #255	; 0xff
 8003360:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(i) = 2;
 8003362:	4a09      	ldr	r2, [pc, #36]	; (8003388 <initComets+0x50>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	2202      	movs	r2, #2
 800336c:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_COMETS;i++){
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3301      	adds	r3, #1
 8003372:	607b      	str	r3, [r7, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b09      	cmp	r3, #9
 8003378:	dde7      	ble.n	800334a <initComets+0x12>
    }
}
 800337a:	bf00      	nop
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	2000218c 	.word	0x2000218c

0800338c <initStars>:

void initStars(){
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
    Star.in_play = 0;
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <initStars+0x44>)
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 8003398:	2300      	movs	r3, #0
 800339a:	607b      	str	r3, [r7, #4]
 800339c:	e00e      	b.n	80033bc <initStars+0x30>
    	STAR_X(i) = -1;
 800339e:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <initStars+0x44>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	22ff      	movs	r2, #255	; 0xff
 80033a8:	705a      	strb	r2, [r3, #1]
    	STAR_Y(i) = -1;
 80033aa:	4a09      	ldr	r2, [pc, #36]	; (80033d0 <initStars+0x44>)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	22ff      	movs	r2, #255	; 0xff
 80033b4:	709a      	strb	r2, [r3, #2]
    for (int i = 0;i<MAX_COMETS;i++){
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3301      	adds	r3, #1
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b09      	cmp	r3, #9
 80033c0:	dded      	ble.n	800339e <initStars+0x12>
    }
}
 80033c2:	bf00      	nop
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	200021b8 	.word	0x200021b8

080033d4 <spawnComet>:

void spawnComet(){
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 80033d8:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <spawnComet+0xfc>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d16e      	bne.n	80034be <spawnComet+0xea>
 80033e0:	4b3c      	ldr	r3, [pc, #240]	; (80034d4 <spawnComet+0x100>)
 80033e2:	f993 3000 	ldrsb.w	r3, [r3]
 80033e6:	2b09      	cmp	r3, #9
 80033e8:	dc69      	bgt.n	80034be <spawnComet+0xea>
    	COMET_X(Comet.in_play) = RANDOM(PLAYABLE_OFFSET, PLAYABLE_MAX);
 80033ea:	f007 f907 	bl	800a5fc <rand>
 80033ee:	4602      	mov	r2, r0
 80033f0:	4b39      	ldr	r3, [pc, #228]	; (80034d8 <spawnComet+0x104>)
 80033f2:	fb83 1302 	smull	r1, r3, r3, r2
 80033f6:	4413      	add	r3, r2
 80033f8:	1199      	asrs	r1, r3, #6
 80033fa:	17d3      	asrs	r3, r2, #31
 80033fc:	1ac9      	subs	r1, r1, r3
 80033fe:	460b      	mov	r3, r1
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	440b      	add	r3, r1
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	1a5b      	subs	r3, r3, r1
 8003408:	1ad1      	subs	r1, r2, r3
 800340a:	b2cb      	uxtb	r3, r1
 800340c:	4a31      	ldr	r2, [pc, #196]	; (80034d4 <spawnComet+0x100>)
 800340e:	f992 2000 	ldrsb.w	r2, [r2]
 8003412:	4610      	mov	r0, r2
 8003414:	3305      	adds	r3, #5
 8003416:	b2d9      	uxtb	r1, r3
 8003418:	4a2e      	ldr	r2, [pc, #184]	; (80034d4 <spawnComet+0x100>)
 800341a:	0083      	lsls	r3, r0, #2
 800341c:	4413      	add	r3, r2
 800341e:	460a      	mov	r2, r1
 8003420:	705a      	strb	r2, [r3, #1]
    	COMET_Y(Comet.in_play) = 0;
 8003422:	4b2c      	ldr	r3, [pc, #176]	; (80034d4 <spawnComet+0x100>)
 8003424:	f993 3000 	ldrsb.w	r3, [r3]
 8003428:	4a2a      	ldr	r2, [pc, #168]	; (80034d4 <spawnComet+0x100>)
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	2200      	movs	r2, #0
 8003430:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(Comet.in_play) = RANDOM(MIN_COMET_SIZE,MAX_COMET_SIZE);
 8003432:	f007 f8e3 	bl	800a5fc <rand>
 8003436:	4602      	mov	r2, r0
 8003438:	4b28      	ldr	r3, [pc, #160]	; (80034dc <spawnComet+0x108>)
 800343a:	fb83 3102 	smull	r3, r1, r3, r2
 800343e:	17d3      	asrs	r3, r2, #31
 8003440:	1ac9      	subs	r1, r1, r3
 8003442:	460b      	mov	r3, r1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	440b      	add	r3, r1
 8003448:	1ad1      	subs	r1, r2, r3
 800344a:	b2cb      	uxtb	r3, r1
 800344c:	3302      	adds	r3, #2
 800344e:	b2da      	uxtb	r2, r3
 8003450:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <spawnComet+0x100>)
 8003452:	f993 3000 	ldrsb.w	r3, [r3]
 8003456:	b251      	sxtb	r1, r2
 8003458:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <spawnComet+0x100>)
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	460a      	mov	r2, r1
 8003460:	70da      	strb	r2, [r3, #3]

        COMET_COINS(Comet.in_play) = 7 - COMET_SIZE(Comet.in_play);
 8003462:	4b1c      	ldr	r3, [pc, #112]	; (80034d4 <spawnComet+0x100>)
 8003464:	f993 3000 	ldrsb.w	r3, [r3]
 8003468:	4a1a      	ldr	r2, [pc, #104]	; (80034d4 <spawnComet+0x100>)
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f1c3 0307 	rsb	r3, r3, #7
 8003478:	b2da      	uxtb	r2, r3
 800347a:	4b16      	ldr	r3, [pc, #88]	; (80034d4 <spawnComet+0x100>)
 800347c:	f993 3000 	ldrsb.w	r3, [r3]
 8003480:	b251      	sxtb	r1, r2
 8003482:	4a14      	ldr	r2, [pc, #80]	; (80034d4 <spawnComet+0x100>)
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	460a      	mov	r2, r1
 800348a:	711a      	strb	r2, [r3, #4]
        comet_delay = RANDOM(5,20);
 800348c:	f007 f8b6 	bl	800a5fc <rand>
 8003490:	4603      	mov	r3, r0
 8003492:	425a      	negs	r2, r3
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	f002 020f 	and.w	r2, r2, #15
 800349c:	bf58      	it	pl
 800349e:	4253      	negpl	r3, r2
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	3305      	adds	r3, #5
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <spawnComet+0xfc>)
 80034a8:	701a      	strb	r2, [r3, #0]
        Comet.in_play++;
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <spawnComet+0x100>)
 80034ac:	f993 3000 	ldrsb.w	r3, [r3]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	3301      	adds	r3, #1
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	b25a      	sxtb	r2, r3
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <spawnComet+0x100>)
 80034ba:	701a      	strb	r2, [r3, #0]
 80034bc:	e006      	b.n	80034cc <spawnComet+0xf8>
    }else{
        comet_delay--;
 80034be:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <spawnComet+0xfc>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	4b02      	ldr	r3, [pc, #8]	; (80034d0 <spawnComet+0xfc>)
 80034c8:	701a      	strb	r2, [r3, #0]
    }

}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	200021d4 	.word	0x200021d4
 80034d4:	2000218c 	.word	0x2000218c
 80034d8:	e6c2b449 	.word	0xe6c2b449
 80034dc:	55555556 	.word	0x55555556

080034e0 <spawnBullet>:

void spawnBullet(int enemy){
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
    int x_val = SpaceShip.x;
 80034e8:	4b23      	ldr	r3, [pc, #140]	; (8003578 <spawnBullet+0x98>)
 80034ea:	f993 3000 	ldrsb.w	r3, [r3]
 80034ee:	60fb      	str	r3, [r7, #12]
    int y_val = SpaceShip.y - 3;
 80034f0:	4b21      	ldr	r3, [pc, #132]	; (8003578 <spawnBullet+0x98>)
 80034f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80034f6:	3b03      	subs	r3, #3
 80034f8:	617b      	str	r3, [r7, #20]
    bullets *am_p;
    if (enemy){
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <spawnBullet+0x26>
        am_p = &enemy_ammo;
 8003500:	4b1e      	ldr	r3, [pc, #120]	; (800357c <spawnBullet+0x9c>)
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	e001      	b.n	800350a <spawnBullet+0x2a>
    }else{
        am_p = &ammo;
 8003506:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <spawnBullet+0xa0>)
 8003508:	613b      	str	r3, [r7, #16]
    }
    if(am_p->in_play < MAX_BULLETS && bullet_delay == 0){
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003510:	2b05      	cmp	r3, #5
 8003512:	dc2a      	bgt.n	800356a <spawnBullet+0x8a>
 8003514:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <spawnBullet+0xa4>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d126      	bne.n	800356a <spawnBullet+0x8a>
        if(am_p->enemy){
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f993 3000 	ldrsb.w	r3, [r3]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <spawnBullet+0x4a>
            //x_val = read the input from multiplayer;
            y_val = 3;
 8003526:	2303      	movs	r3, #3
 8003528:	617b      	str	r3, [r7, #20]
        }
        am_p->bullet_ar[am_p->in_play].x = x_val;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	b251      	sxtb	r1, r2
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4413      	add	r3, r2
 800353a:	460a      	mov	r2, r1
 800353c:	709a      	strb	r2, [r3, #2]
        am_p->bullet_ar[am_p->in_play].y = y_val;
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	b251      	sxtb	r1, r2
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	460a      	mov	r2, r1
 8003550:	70da      	strb	r2, [r3, #3]
        am_p->in_play++;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	3301      	adds	r3, #1
 800355c:	b2db      	uxtb	r3, r3
 800355e:	b25a      	sxtb	r2, r3
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	705a      	strb	r2, [r3, #1]
        bullet_delay = MAX_DELAY_BULLETS;
 8003564:	4b07      	ldr	r3, [pc, #28]	; (8003584 <spawnBullet+0xa4>)
 8003566:	220a      	movs	r2, #10
 8003568:	701a      	strb	r2, [r3, #0]
    }
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	2000004c 	.word	0x2000004c
 800357c:	2000217c 	.word	0x2000217c
 8003580:	2000216c 	.word	0x2000216c
 8003584:	200021cd 	.word	0x200021cd

08003588 <spawnStar>:

void spawnStar(){
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 800358c:	4b27      	ldr	r3, [pc, #156]	; (800362c <spawnStar+0xa4>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d141      	bne.n	8003618 <spawnStar+0x90>
 8003594:	4b26      	ldr	r3, [pc, #152]	; (8003630 <spawnStar+0xa8>)
 8003596:	f993 3000 	ldrsb.w	r3, [r3]
 800359a:	2b09      	cmp	r3, #9
 800359c:	dc3c      	bgt.n	8003618 <spawnStar+0x90>
    	STAR_X(Star.in_play) = RANDOM(PLAYABLE_OFFSET,PLAYABLE_MAX);
 800359e:	f007 f82d 	bl	800a5fc <rand>
 80035a2:	4602      	mov	r2, r0
 80035a4:	4b23      	ldr	r3, [pc, #140]	; (8003634 <spawnStar+0xac>)
 80035a6:	fb83 1302 	smull	r1, r3, r3, r2
 80035aa:	4413      	add	r3, r2
 80035ac:	1199      	asrs	r1, r3, #6
 80035ae:	17d3      	asrs	r3, r2, #31
 80035b0:	1ac9      	subs	r1, r1, r3
 80035b2:	460b      	mov	r3, r1
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	1a5b      	subs	r3, r3, r1
 80035bc:	1ad1      	subs	r1, r2, r3
 80035be:	b2cb      	uxtb	r3, r1
 80035c0:	3305      	adds	r3, #5
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	4b1a      	ldr	r3, [pc, #104]	; (8003630 <spawnStar+0xa8>)
 80035c6:	f993 3000 	ldrsb.w	r3, [r3]
 80035ca:	b251      	sxtb	r1, r2
 80035cc:	4a18      	ldr	r2, [pc, #96]	; (8003630 <spawnStar+0xa8>)
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	460a      	mov	r2, r1
 80035d4:	705a      	strb	r2, [r3, #1]
    	STAR_Y(Star.in_play) = 0;
 80035d6:	4b16      	ldr	r3, [pc, #88]	; (8003630 <spawnStar+0xa8>)
 80035d8:	f993 3000 	ldrsb.w	r3, [r3]
 80035dc:	4a14      	ldr	r2, [pc, #80]	; (8003630 <spawnStar+0xa8>)
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	2200      	movs	r2, #0
 80035e4:	709a      	strb	r2, [r3, #2]
        star_delay = RANDOM(5,20);
 80035e6:	f007 f809 	bl	800a5fc <rand>
 80035ea:	4603      	mov	r3, r0
 80035ec:	425a      	negs	r2, r3
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	f002 020f 	and.w	r2, r2, #15
 80035f6:	bf58      	it	pl
 80035f8:	4253      	negpl	r3, r2
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3305      	adds	r3, #5
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <spawnStar+0xa4>)
 8003602:	701a      	strb	r2, [r3, #0]
        Star.in_play++;
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <spawnStar+0xa8>)
 8003606:	f993 3000 	ldrsb.w	r3, [r3]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	3301      	adds	r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	b25a      	sxtb	r2, r3
 8003612:	4b07      	ldr	r3, [pc, #28]	; (8003630 <spawnStar+0xa8>)
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e006      	b.n	8003626 <spawnStar+0x9e>
    }else{
        star_delay--;
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <spawnStar+0xa4>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	3b01      	subs	r3, #1
 800361e:	b2da      	uxtb	r2, r3
 8003620:	4b02      	ldr	r3, [pc, #8]	; (800362c <spawnStar+0xa4>)
 8003622:	701a      	strb	r2, [r3, #0]
    }
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200021d5 	.word	0x200021d5
 8003630:	200021b8 	.word	0x200021b8
 8003634:	e6c2b449 	.word	0xe6c2b449

08003638 <moveBullets>:

void moveBullets(){
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
	displayAmmo(DARK_GREY);
 800363e:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003642:	f000 fc37 	bl	8003eb4 <displayAmmo>
	for(int i = 0; i < ammo.in_play; i++){
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e09c      	b.n	8003786 <moveBullets+0x14e>
		for (int j = 0; j < Comet.in_play; j++){
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	e040      	b.n	80036d4 <moveBullets+0x9c>
			if(AMMO_X(i) >= COMET_X(j) && AMMO_X(i) < COMET_X(j) + COMET_SIZE(j)){
 8003652:	4a55      	ldr	r2, [pc, #340]	; (80037a8 <moveBullets+0x170>)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4413      	add	r3, r2
 800365a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800365e:	4619      	mov	r1, r3
 8003660:	4a52      	ldr	r2, [pc, #328]	; (80037ac <moveBullets+0x174>)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	785b      	ldrb	r3, [r3, #1]
 800366a:	4299      	cmp	r1, r3
 800366c:	db2f      	blt.n	80036ce <moveBullets+0x96>
 800366e:	4a4e      	ldr	r2, [pc, #312]	; (80037a8 <moveBullets+0x170>)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4413      	add	r3, r2
 8003676:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800367a:	4619      	mov	r1, r3
 800367c:	4a4b      	ldr	r2, [pc, #300]	; (80037ac <moveBullets+0x174>)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	785b      	ldrb	r3, [r3, #1]
 8003686:	4618      	mov	r0, r3
 8003688:	4a48      	ldr	r2, [pc, #288]	; (80037ac <moveBullets+0x174>)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003694:	4403      	add	r3, r0
 8003696:	4299      	cmp	r1, r3
 8003698:	da19      	bge.n	80036ce <moveBullets+0x96>
				if (AMMO_Y(i) <= COMET_Y(j) + COMET_SIZE(j) - 1){
 800369a:	4a44      	ldr	r2, [pc, #272]	; (80037ac <moveBullets+0x174>)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	789b      	ldrb	r3, [r3, #2]
 80036a4:	4619      	mov	r1, r3
 80036a6:	4a41      	ldr	r2, [pc, #260]	; (80037ac <moveBullets+0x174>)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80036b2:	18ca      	adds	r2, r1, r3
 80036b4:	493c      	ldr	r1, [pc, #240]	; (80037a8 <moveBullets+0x170>)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	440b      	add	r3, r1
 80036bc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	dd04      	ble.n	80036ce <moveBullets+0x96>
					hitComet(i,j);
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fb20 	bl	8003d0c <hitComet>
					continue;
 80036cc:	bf00      	nop
		for (int j = 0; j < Comet.in_play; j++){
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	3301      	adds	r3, #1
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	4b35      	ldr	r3, [pc, #212]	; (80037ac <moveBullets+0x174>)
 80036d6:	f993 3000 	ldrsb.w	r3, [r3]
 80036da:	461a      	mov	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4293      	cmp	r3, r2
 80036e0:	dbb7      	blt.n	8003652 <moveBullets+0x1a>
				}
			}

		}
		AMMO_Y(i)--;
 80036e2:	4a31      	ldr	r2, [pc, #196]	; (80037a8 <moveBullets+0x170>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	b259      	sxtb	r1, r3
 80036f6:	4a2c      	ldr	r2, [pc, #176]	; (80037a8 <moveBullets+0x170>)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	460a      	mov	r2, r1
 8003700:	70da      	strb	r2, [r3, #3]
		if (AMMO_Y(i) < 0){
 8003702:	4a29      	ldr	r2, [pc, #164]	; (80037a8 <moveBullets+0x170>)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800370e:	2b00      	cmp	r3, #0
 8003710:	da36      	bge.n	8003780 <moveBullets+0x148>
			send_Bullet(ammo.bullet_ar[i]);
 8003712:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <moveBullets+0x170>)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4413      	add	r3, r2
 800371a:	885a      	ldrh	r2, [r3, #2]
 800371c:	2300      	movs	r3, #0
 800371e:	f362 030f 	bfi	r3, r2, #0, #16
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fd6e 	bl	8004204 <send_Bullet>
			for(int j = i; j < MAX_BULLETS - 1; j++){
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	607b      	str	r3, [r7, #4]
 800372c:	e01c      	b.n	8003768 <moveBullets+0x130>
				AMMO_X(j) = AMMO_X(j+1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3301      	adds	r3, #1
 8003732:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <moveBullets+0x170>)
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4413      	add	r3, r2
 8003738:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800373c:	4a1a      	ldr	r2, [pc, #104]	; (80037a8 <moveBullets+0x170>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	460a      	mov	r2, r1
 8003746:	709a      	strb	r2, [r3, #2]
				AMMO_Y(j) = AMMO_Y(j+1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3301      	adds	r3, #1
 800374c:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <moveBullets+0x170>)
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003756:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <moveBullets+0x170>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	4413      	add	r3, r2
 800375e:	460a      	mov	r2, r1
 8003760:	70da      	strb	r2, [r3, #3]
			for(int j = i; j < MAX_BULLETS - 1; j++){
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3301      	adds	r3, #1
 8003766:	607b      	str	r3, [r7, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b04      	cmp	r3, #4
 800376c:	dddf      	ble.n	800372e <moveBullets+0xf6>
			}
			ammo.in_play--;
 800376e:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <moveBullets+0x170>)
 8003770:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	b25a      	sxtb	r2, r3
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <moveBullets+0x170>)
 800377e:	705a      	strb	r2, [r3, #1]
	for(int i = 0; i < ammo.in_play; i++){
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3301      	adds	r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <moveBullets+0x170>)
 8003788:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800378c:	461a      	mov	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4293      	cmp	r3, r2
 8003792:	f6ff af5b 	blt.w	800364c <moveBullets+0x14>
		}
	}
	displayAmmo(RED);
 8003796:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800379a:	f000 fb8b 	bl	8003eb4 <displayAmmo>
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	2000216c 	.word	0x2000216c
 80037ac:	2000218c 	.word	0x2000218c

080037b0 <moveEnemyBullets>:

void moveEnemyBullets(void){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
    if (!in_multiplayer){
 80037b6:	4b5e      	ldr	r3, [pc, #376]	; (8003930 <moveEnemyBullets+0x180>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80b4 	beq.w	8003928 <moveEnemyBullets+0x178>
        //QD << "not multiplayer";  // change to uart debug
        return;
    }
    displayAmmo(DARK_GREY);
 80037c0:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80037c4:	f000 fb76 	bl	8003eb4 <displayAmmo>
    for(int i = 0; i < enemy_ammo.in_play; i++){
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	e09f      	b.n	800390e <moveEnemyBullets+0x15e>
        if(E_AMMO_X(i) <= SPACESHIP_X_BOUND(+) && E_AMMO_X(i) >= SPACESHIP_X_BOUND(-)){
 80037ce:	4a59      	ldr	r2, [pc, #356]	; (8003934 <moveEnemyBullets+0x184>)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80037da:	461a      	mov	r2, r3
 80037dc:	4b56      	ldr	r3, [pc, #344]	; (8003938 <moveEnemyBullets+0x188>)
 80037de:	f993 3000 	ldrsb.w	r3, [r3]
 80037e2:	3302      	adds	r3, #2
 80037e4:	429a      	cmp	r2, r3
 80037e6:	dc4b      	bgt.n	8003880 <moveEnemyBullets+0xd0>
 80037e8:	4a52      	ldr	r2, [pc, #328]	; (8003934 <moveEnemyBullets+0x184>)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4413      	add	r3, r2
 80037f0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80037f4:	461a      	mov	r2, r3
 80037f6:	4b50      	ldr	r3, [pc, #320]	; (8003938 <moveEnemyBullets+0x188>)
 80037f8:	f993 3000 	ldrsb.w	r3, [r3]
 80037fc:	3b02      	subs	r3, #2
 80037fe:	429a      	cmp	r2, r3
 8003800:	db3e      	blt.n	8003880 <moveEnemyBullets+0xd0>
            if (E_AMMO_Y(i) >= SPACESHIP_Y_BOUND && hit == 0){
 8003802:	4a4c      	ldr	r2, [pc, #304]	; (8003934 <moveEnemyBullets+0x184>)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4413      	add	r3, r2
 800380a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800380e:	461a      	mov	r2, r3
 8003810:	4b49      	ldr	r3, [pc, #292]	; (8003938 <moveEnemyBullets+0x188>)
 8003812:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003816:	3b02      	subs	r3, #2
 8003818:	429a      	cmp	r2, r3
 800381a:	db31      	blt.n	8003880 <moveEnemyBullets+0xd0>
 800381c:	4b47      	ldr	r3, [pc, #284]	; (800393c <moveEnemyBullets+0x18c>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d12d      	bne.n	8003880 <moveEnemyBullets+0xd0>
                beenHit();
 8003824:	f000 fcce 	bl	80041c4 <beenHit>
                for(int j = i; j < MAX_BULLETS - 1; j++){
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	e01c      	b.n	8003868 <moveEnemyBullets+0xb8>
                	E_AMMO_X(j) = E_AMMO_X(j+1);
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	3301      	adds	r3, #1
 8003832:	4a40      	ldr	r2, [pc, #256]	; (8003934 <moveEnemyBullets+0x184>)
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	4413      	add	r3, r2
 8003838:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800383c:	4a3d      	ldr	r2, [pc, #244]	; (8003934 <moveEnemyBullets+0x184>)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	4413      	add	r3, r2
 8003844:	460a      	mov	r2, r1
 8003846:	709a      	strb	r2, [r3, #2]
                	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	3301      	adds	r3, #1
 800384c:	4a39      	ldr	r2, [pc, #228]	; (8003934 <moveEnemyBullets+0x184>)
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003856:	4a37      	ldr	r2, [pc, #220]	; (8003934 <moveEnemyBullets+0x184>)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4413      	add	r3, r2
 800385e:	460a      	mov	r2, r1
 8003860:	70da      	strb	r2, [r3, #3]
                for(int j = i; j < MAX_BULLETS - 1; j++){
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	3301      	adds	r3, #1
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b04      	cmp	r3, #4
 800386c:	dddf      	ble.n	800382e <moveEnemyBullets+0x7e>
                }
                enemy_ammo.in_play--;
 800386e:	4b31      	ldr	r3, [pc, #196]	; (8003934 <moveEnemyBullets+0x184>)
 8003870:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b2db      	uxtb	r3, r3
 800387a:	b25a      	sxtb	r2, r3
 800387c:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <moveEnemyBullets+0x184>)
 800387e:	705a      	strb	r2, [r3, #1]
            }
        }
        E_AMMO_Y(i)++;
 8003880:	4a2c      	ldr	r2, [pc, #176]	; (8003934 <moveEnemyBullets+0x184>)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4413      	add	r3, r2
 8003888:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	3301      	adds	r3, #1
 8003890:	b2db      	uxtb	r3, r3
 8003892:	b259      	sxtb	r1, r3
 8003894:	4a27      	ldr	r2, [pc, #156]	; (8003934 <moveEnemyBullets+0x184>)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	460a      	mov	r2, r1
 800389e:	70da      	strb	r2, [r3, #3]
        if (E_AMMO_Y(i) > SCREEN_HEIGHT - 1){
 80038a0:	4a24      	ldr	r2, [pc, #144]	; (8003934 <moveEnemyBullets+0x184>)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4413      	add	r3, r2
 80038a8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80038ac:	2b3b      	cmp	r3, #59	; 0x3b
 80038ae:	dd2b      	ble.n	8003908 <moveEnemyBullets+0x158>
            for(int j = i; j < MAX_BULLETS - 1; j++){
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	e01c      	b.n	80038f0 <moveEnemyBullets+0x140>
            	E_AMMO_X(j) = E_AMMO_X(j+1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3301      	adds	r3, #1
 80038ba:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <moveEnemyBullets+0x184>)
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4413      	add	r3, r2
 80038c0:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80038c4:	4a1b      	ldr	r2, [pc, #108]	; (8003934 <moveEnemyBullets+0x184>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4413      	add	r3, r2
 80038cc:	460a      	mov	r2, r1
 80038ce:	709a      	strb	r2, [r3, #2]
            	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3301      	adds	r3, #1
 80038d4:	4a17      	ldr	r2, [pc, #92]	; (8003934 <moveEnemyBullets+0x184>)
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	f993 1003 	ldrsb.w	r1, [r3, #3]
 80038de:	4a15      	ldr	r2, [pc, #84]	; (8003934 <moveEnemyBullets+0x184>)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4413      	add	r3, r2
 80038e6:	460a      	mov	r2, r1
 80038e8:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_BULLETS - 1; j++){
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3301      	adds	r3, #1
 80038ee:	607b      	str	r3, [r7, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	dddf      	ble.n	80038b6 <moveEnemyBullets+0x106>
            }
            enemy_ammo.in_play--;
 80038f6:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <moveEnemyBullets+0x184>)
 80038f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	b25a      	sxtb	r2, r3
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <moveEnemyBullets+0x184>)
 8003906:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < enemy_ammo.in_play; i++){
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3301      	adds	r3, #1
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <moveEnemyBullets+0x184>)
 8003910:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003914:	461a      	mov	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4293      	cmp	r3, r2
 800391a:	f6ff af58 	blt.w	80037ce <moveEnemyBullets+0x1e>
        }
    }
    displayAmmo(LIGHT_BLUE);
 800391e:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003922:	f000 fac7 	bl	8003eb4 <displayAmmo>
 8003926:	e000      	b.n	800392a <moveEnemyBullets+0x17a>
        return;
 8003928:	bf00      	nop
}
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20000051 	.word	0x20000051
 8003934:	2000217c 	.word	0x2000217c
 8003938:	2000004c 	.word	0x2000004c
 800393c:	20001eeb 	.word	0x20001eeb

08003940 <moveComets>:

void moveComets(){
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
	displayComets(DARK_GREY);
 8003946:	f642 402c 	movw	r0, #11308	; 0x2c2c
 800394a:	f000 fb11 	bl	8003f70 <displayComets>
	for (int i = 0; i<Comet.in_play; i++){
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	e0f2      	b.n	8003b3a <moveComets+0x1fa>
		for(int j = 0; j < COMET_SIZE(i); j++){
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	e05f      	b.n	8003a1a <moveComets+0xda>
			if(COMET_X(i) + j <= SPACESHIP_X_BOUND(+) && COMET_X(i) + j >= SPACESHIP_X_BOUND(-)){
 800395a:	4a80      	ldr	r2, [pc, #512]	; (8003b5c <moveComets+0x21c>)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	785b      	ldrb	r3, [r3, #1]
 8003964:	461a      	mov	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	441a      	add	r2, r3
 800396a:	4b7d      	ldr	r3, [pc, #500]	; (8003b60 <moveComets+0x220>)
 800396c:	f993 3000 	ldrsb.w	r3, [r3]
 8003970:	3302      	adds	r3, #2
 8003972:	429a      	cmp	r2, r3
 8003974:	dc4e      	bgt.n	8003a14 <moveComets+0xd4>
 8003976:	4a79      	ldr	r2, [pc, #484]	; (8003b5c <moveComets+0x21c>)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	785b      	ldrb	r3, [r3, #1]
 8003980:	461a      	mov	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	441a      	add	r2, r3
 8003986:	4b76      	ldr	r3, [pc, #472]	; (8003b60 <moveComets+0x220>)
 8003988:	f993 3000 	ldrsb.w	r3, [r3]
 800398c:	3b02      	subs	r3, #2
 800398e:	429a      	cmp	r2, r3
 8003990:	db40      	blt.n	8003a14 <moveComets+0xd4>
				if(powerUp == 2 && COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND){
 8003992:	4b74      	ldr	r3, [pc, #464]	; (8003b64 <moveComets+0x224>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d11e      	bne.n	80039d8 <moveComets+0x98>
 800399a:	4a70      	ldr	r2, [pc, #448]	; (8003b5c <moveComets+0x21c>)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	789b      	ldrb	r3, [r3, #2]
 80039a4:	4619      	mov	r1, r3
 80039a6:	4a6d      	ldr	r2, [pc, #436]	; (8003b5c <moveComets+0x21c>)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80039b2:	18ca      	adds	r2, r1, r3
 80039b4:	4b6a      	ldr	r3, [pc, #424]	; (8003b60 <moveComets+0x220>)
 80039b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	429a      	cmp	r2, r3
 80039be:	db0b      	blt.n	80039d8 <moveComets+0x98>
					hitComet(420,i);
 80039c0:	68f9      	ldr	r1, [r7, #12]
 80039c2:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80039c6:	f000 f9a1 	bl	8003d0c <hitComet>
					displayPowerup(DARK_GREY);
 80039ca:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80039ce:	f000 fcaf 	bl	8004330 <displayPowerup>
					powerUp = 0;
 80039d2:	4b64      	ldr	r3, [pc, #400]	; (8003b64 <moveComets+0x224>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
				}
                if (COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND && hit == 0){
 80039d8:	4a60      	ldr	r2, [pc, #384]	; (8003b5c <moveComets+0x21c>)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	789b      	ldrb	r3, [r3, #2]
 80039e2:	4619      	mov	r1, r3
 80039e4:	4a5d      	ldr	r2, [pc, #372]	; (8003b5c <moveComets+0x21c>)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80039f0:	18ca      	adds	r2, r1, r3
 80039f2:	4b5b      	ldr	r3, [pc, #364]	; (8003b60 <moveComets+0x220>)
 80039f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	429a      	cmp	r2, r3
 80039fc:	db0a      	blt.n	8003a14 <moveComets+0xd4>
 80039fe:	4b5a      	ldr	r3, [pc, #360]	; (8003b68 <moveComets+0x228>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <moveComets+0xd4>
                    hitComet(420,i);
 8003a06:	68f9      	ldr	r1, [r7, #12]
 8003a08:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003a0c:	f000 f97e 	bl	8003d0c <hitComet>
                    beenHit();
 8003a10:	f000 fbd8 	bl	80041c4 <beenHit>
		for(int j = 0; j < COMET_SIZE(i); j++){
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	3301      	adds	r3, #1
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	4a50      	ldr	r2, [pc, #320]	; (8003b5c <moveComets+0x21c>)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	db95      	blt.n	800395a <moveComets+0x1a>
                }
            }
        }
        if(powerUp == 1 && SpaceShip.x >= COMET_X(i) && SpaceShip.x <= COMET_X(i) + COMET_SIZE(i)){
 8003a2e:	4b4d      	ldr	r3, [pc, #308]	; (8003b64 <moveComets+0x224>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d133      	bne.n	8003a9e <moveComets+0x15e>
 8003a36:	4b4a      	ldr	r3, [pc, #296]	; (8003b60 <moveComets+0x220>)
 8003a38:	f993 3000 	ldrsb.w	r3, [r3]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4a47      	ldr	r2, [pc, #284]	; (8003b5c <moveComets+0x21c>)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	4299      	cmp	r1, r3
 8003a4a:	db28      	blt.n	8003a9e <moveComets+0x15e>
 8003a4c:	4b44      	ldr	r3, [pc, #272]	; (8003b60 <moveComets+0x220>)
 8003a4e:	f993 3000 	ldrsb.w	r3, [r3]
 8003a52:	4619      	mov	r1, r3
 8003a54:	4a41      	ldr	r2, [pc, #260]	; (8003b5c <moveComets+0x21c>)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	4a3e      	ldr	r2, [pc, #248]	; (8003b5c <moveComets+0x21c>)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003a6c:	4403      	add	r3, r0
 8003a6e:	4299      	cmp	r1, r3
 8003a70:	dc15      	bgt.n	8003a9e <moveComets+0x15e>
        	hitComet(420,i);
 8003a72:	68f9      	ldr	r1, [r7, #12]
 8003a74:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003a78:	f000 f948 	bl	8003d0c <hitComet>
        	if(powerUp_delay == 0){
 8003a7c:	4b3b      	ldr	r3, [pc, #236]	; (8003b6c <moveComets+0x22c>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d106      	bne.n	8003a92 <moveComets+0x152>
        		displayPowerup(DARK_GREY);
 8003a84:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003a88:	f000 fc52 	bl	8004330 <displayPowerup>
        		powerUp = 0;
 8003a8c:	4b35      	ldr	r3, [pc, #212]	; (8003b64 <moveComets+0x224>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]

        	}
        	powerUp_delay--;
 8003a92:	4b36      	ldr	r3, [pc, #216]	; (8003b6c <moveComets+0x22c>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4b34      	ldr	r3, [pc, #208]	; (8003b6c <moveComets+0x22c>)
 8003a9c:	701a      	strb	r2, [r3, #0]
        }
        COMET_Y(i)++;
 8003a9e:	4a2f      	ldr	r2, [pc, #188]	; (8003b5c <moveComets+0x21c>)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	789b      	ldrb	r3, [r3, #2]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	b2d9      	uxtb	r1, r3
 8003aac:	4a2b      	ldr	r2, [pc, #172]	; (8003b5c <moveComets+0x21c>)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	460a      	mov	r2, r1
 8003ab6:	709a      	strb	r2, [r3, #2]
        if (COMET_Y(i) > SCREEN_HEIGHT - 1){
 8003ab8:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <moveComets+0x21c>)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	789b      	ldrb	r3, [r3, #2]
 8003ac2:	2b3b      	cmp	r3, #59	; 0x3b
 8003ac4:	d936      	bls.n	8003b34 <moveComets+0x1f4>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	607b      	str	r3, [r7, #4]
 8003aca:	e027      	b.n	8003b1c <moveComets+0x1dc>
            	COMET_X(j) = COMET_X(j+1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <moveComets+0x21c>)
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	7859      	ldrb	r1, [r3, #1]
 8003ad8:	4a20      	ldr	r2, [pc, #128]	; (8003b5c <moveComets+0x21c>)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	460a      	mov	r2, r1
 8003ae2:	705a      	strb	r2, [r3, #1]
            	COMET_Y(j) = COMET_Y(j+1);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <moveComets+0x21c>)
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	7899      	ldrb	r1, [r3, #2]
 8003af0:	4a1a      	ldr	r2, [pc, #104]	; (8003b5c <moveComets+0x21c>)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	460a      	mov	r2, r1
 8003afa:	709a      	strb	r2, [r3, #2]
                COMET_SIZE(j) = COMET_SIZE(j+1);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3301      	adds	r3, #1
 8003b00:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <moveComets+0x21c>)
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003b0a:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <moveComets+0x21c>)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	460a      	mov	r2, r1
 8003b14:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	607b      	str	r3, [r7, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	ddd4      	ble.n	8003acc <moveComets+0x18c>
            }
            Comet.in_play--;
 8003b22:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <moveComets+0x21c>)
 8003b24:	f993 3000 	ldrsb.w	r3, [r3]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	b25a      	sxtb	r2, r3
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <moveComets+0x21c>)
 8003b32:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<Comet.in_play; i++){
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3301      	adds	r3, #1
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <moveComets+0x21c>)
 8003b3c:	f993 3000 	ldrsb.w	r3, [r3]
 8003b40:	461a      	mov	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4293      	cmp	r3, r2
 8003b46:	f6ff af05 	blt.w	8003954 <moveComets+0x14>
        }
    }
    displayComets(GREY);
 8003b4a:	f249 6096 	movw	r0, #38550	; 0x9696
 8003b4e:	f000 fa0f 	bl	8003f70 <displayComets>
}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2000218c 	.word	0x2000218c
 8003b60:	2000004c 	.word	0x2000004c
 8003b64:	200021d6 	.word	0x200021d6
 8003b68:	20001eeb 	.word	0x20001eeb
 8003b6c:	200021d7 	.word	0x200021d7

08003b70 <moveStars>:

void moveStars(){
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
	displayStars(DARK_GREY);
 8003b76:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003b7a:	f000 f969 	bl	8003e50 <displayStars>
    for (int i = 0; i<Star.in_play; i++){
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	e046      	b.n	8003c12 <moveStars+0xa2>
    	STAR_Y(i)++;
 8003b84:	4a2a      	ldr	r2, [pc, #168]	; (8003c30 <moveStars+0xc0>)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	3301      	adds	r3, #1
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	b259      	sxtb	r1, r3
 8003b98:	4a25      	ldr	r2, [pc, #148]	; (8003c30 <moveStars+0xc0>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	4413      	add	r3, r2
 8003ba0:	460a      	mov	r2, r1
 8003ba2:	709a      	strb	r2, [r3, #2]
        if (STAR_Y(i) > SCREEN_HEIGHT - 4){
 8003ba4:	4a22      	ldr	r2, [pc, #136]	; (8003c30 <moveStars+0xc0>)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	4413      	add	r3, r2
 8003bac:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003bb0:	2b38      	cmp	r3, #56	; 0x38
 8003bb2:	dd2b      	ble.n	8003c0c <moveStars+0x9c>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	e01c      	b.n	8003bf4 <moveStars+0x84>
            	STAR_X(j) = STAR_X(j+1);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	4a1c      	ldr	r2, [pc, #112]	; (8003c30 <moveStars+0xc0>)
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f993 1001 	ldrsb.w	r1, [r3, #1]
 8003bc8:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <moveStars+0xc0>)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	4413      	add	r3, r2
 8003bd0:	460a      	mov	r2, r1
 8003bd2:	705a      	strb	r2, [r3, #1]
            	STAR_Y(j) = STAR_Y(j+1);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <moveStars+0xc0>)
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4413      	add	r3, r2
 8003bde:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003be2:	4a13      	ldr	r2, [pc, #76]	; (8003c30 <moveStars+0xc0>)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	460a      	mov	r2, r1
 8003bec:	709a      	strb	r2, [r3, #2]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	dddf      	ble.n	8003bba <moveStars+0x4a>
            }
            Star.in_play--;
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	; (8003c30 <moveStars+0xc0>)
 8003bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	b25a      	sxtb	r2, r3
 8003c08:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <moveStars+0xc0>)
 8003c0a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Star.in_play; i++){
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	607b      	str	r3, [r7, #4]
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <moveStars+0xc0>)
 8003c14:	f993 3000 	ldrsb.w	r3, [r3]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	dbb1      	blt.n	8003b84 <moveStars+0x14>
        }
    }
    displayStars(YELLOW);
 8003c20:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003c24:	f000 f914 	bl	8003e50 <displayStars>
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	200021b8 	.word	0x200021b8

08003c34 <moveSpaceship>:

void moveSpaceship(int direction){
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	displaySpaceShip(DARK_GREY);
 8003c3c:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003c40:	f000 f9d6 	bl	8003ff0 <displaySpaceShip>
	if(powerUp > 0){
 8003c44:	4b2e      	ldr	r3, [pc, #184]	; (8003d00 <moveSpaceship+0xcc>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <moveSpaceship+0x20>
		displayPowerup(DARK_GREY);
 8003c4c:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003c50:	f000 fb6e 	bl	8004330 <displayPowerup>
	}
    if(direction < 0){
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	da26      	bge.n	8003ca8 <moveSpaceship+0x74>
        SpaceShip.x--;
 8003c5a:	4b2a      	ldr	r3, [pc, #168]	; (8003d04 <moveSpaceship+0xd0>)
 8003c5c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	b25a      	sxtb	r2, r3
 8003c68:	4b26      	ldr	r3, [pc, #152]	; (8003d04 <moveSpaceship+0xd0>)
 8003c6a:	701a      	strb	r2, [r3, #0]
        if(SpaceShip.x < SPACESHIP_WIDTH/2) {
 8003c6c:	4b25      	ldr	r3, [pc, #148]	; (8003d04 <moveSpaceship+0xd0>)
 8003c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	dc02      	bgt.n	8003c7c <moveSpaceship+0x48>
        	SpaceShip.x = (SPACESHIP_WIDTH/2);
 8003c76:	4b23      	ldr	r3, [pc, #140]	; (8003d04 <moveSpaceship+0xd0>)
 8003c78:	2202      	movs	r2, #2
 8003c7a:	701a      	strb	r2, [r3, #0]
        }
        displaySpaceShip(spaceshipCurrentColor);
 8003c7c:	4b22      	ldr	r3, [pc, #136]	; (8003d08 <moveSpaceship+0xd4>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 f9b5 	bl	8003ff0 <displaySpaceShip>
        if(powerUp == 1){
 8003c86:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <moveSpaceship+0xcc>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d103      	bne.n	8003c96 <moveSpaceship+0x62>
        	displayPowerup(RED);
 8003c8e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003c92:	f000 fb4d 	bl	8004330 <displayPowerup>
        }
        if(powerUp == 2){
 8003c96:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <moveSpaceship+0xcc>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d12b      	bne.n	8003cf6 <moveSpaceship+0xc2>
        	displayPowerup(LIGHT_BLUE);
 8003c9e:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003ca2:	f000 fb45 	bl	8004330 <displayPowerup>
        }
        return;
 8003ca6:	e026      	b.n	8003cf6 <moveSpaceship+0xc2>
    }
    SpaceShip.x++;
 8003ca8:	4b16      	ldr	r3, [pc, #88]	; (8003d04 <moveSpaceship+0xd0>)
 8003caa:	f993 3000 	ldrsb.w	r3, [r3]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	b25a      	sxtb	r2, r3
 8003cb6:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <moveSpaceship+0xd0>)
 8003cb8:	701a      	strb	r2, [r3, #0]
    if(SpaceShip.x > SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1) {
 8003cba:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <moveSpaceship+0xd0>)
 8003cbc:	f993 3000 	ldrsb.w	r3, [r3]
 8003cc0:	2b4d      	cmp	r3, #77	; 0x4d
 8003cc2:	dd02      	ble.n	8003cca <moveSpaceship+0x96>
    	SpaceShip.x = SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1;
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <moveSpaceship+0xd0>)
 8003cc6:	224d      	movs	r2, #77	; 0x4d
 8003cc8:	701a      	strb	r2, [r3, #0]
    }
    displaySpaceShip(spaceshipCurrentColor);
 8003cca:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <moveSpaceship+0xd4>)
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 f98e 	bl	8003ff0 <displaySpaceShip>
    if(powerUp == 1){
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <moveSpaceship+0xcc>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d103      	bne.n	8003ce4 <moveSpaceship+0xb0>
    	displayPowerup(RED);
 8003cdc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003ce0:	f000 fb26 	bl	8004330 <displayPowerup>
    }
	if(powerUp == 2){
 8003ce4:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <moveSpaceship+0xcc>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d105      	bne.n	8003cf8 <moveSpaceship+0xc4>
		displayPowerup(LIGHT_BLUE);
 8003cec:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003cf0:	f000 fb1e 	bl	8004330 <displayPowerup>
 8003cf4:	e000      	b.n	8003cf8 <moveSpaceship+0xc4>
        return;
 8003cf6:	bf00      	nop
	}
}
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	200021d6 	.word	0x200021d6
 8003d04:	2000004c 	.word	0x2000004c
 8003d08:	2000004e 	.word	0x2000004e

08003d0c <hitComet>:

void hitComet(int bul,int com){
 8003d0c:	b590      	push	{r4, r7, lr}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
    money += COMET_COINS(com);
 8003d16:	4a4b      	ldr	r2, [pc, #300]	; (8003e44 <hitComet+0x138>)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003d22:	461a      	mov	r2, r3
 8003d24:	4b48      	ldr	r3, [pc, #288]	; (8003e48 <hitComet+0x13c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4413      	add	r3, r2
 8003d2a:	4a47      	ldr	r2, [pc, #284]	; (8003e48 <hitComet+0x13c>)
 8003d2c:	6013      	str	r3, [r2, #0]
    Displ_FillArea(COMET_X(com) * 4, COMET_Y(com) * 4, COMET_SIZE(com) * 4, COMET_SIZE(com) * 4, DARK_GREY);
 8003d2e:	4a45      	ldr	r2, [pc, #276]	; (8003e44 <hitComet+0x138>)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	b298      	uxth	r0, r3
 8003d3e:	4a41      	ldr	r2, [pc, #260]	; (8003e44 <hitComet+0x138>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	789b      	ldrb	r3, [r3, #2]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	b299      	uxth	r1, r3
 8003d4e:	4a3d      	ldr	r2, [pc, #244]	; (8003e44 <hitComet+0x138>)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	4c38      	ldr	r4, [pc, #224]	; (8003e44 <hitComet+0x138>)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4423      	add	r3, r4
 8003d68:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f642 442c 	movw	r4, #11308	; 0x2c2c
 8003d76:	9400      	str	r4, [sp, #0]
 8003d78:	f000 ff90 	bl	8004c9c <Displ_FillArea>
    if(bul != 420){
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8003d82:	d024      	beq.n	8003dce <hitComet+0xc2>
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	e01c      	b.n	8003dc4 <hitComet+0xb8>
        	AMMO_X(j)= AMMO_X(j+1);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	4a2f      	ldr	r2, [pc, #188]	; (8003e4c <hitComet+0x140>)
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	4413      	add	r3, r2
 8003d94:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8003d98:	4a2c      	ldr	r2, [pc, #176]	; (8003e4c <hitComet+0x140>)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	4413      	add	r3, r2
 8003da0:	460a      	mov	r2, r1
 8003da2:	709a      	strb	r2, [r3, #2]
        	AMMO_Y(j) = AMMO_Y(j+1);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3301      	adds	r3, #1
 8003da8:	4a28      	ldr	r2, [pc, #160]	; (8003e4c <hitComet+0x140>)
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4413      	add	r3, r2
 8003dae:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003db2:	4a26      	ldr	r2, [pc, #152]	; (8003e4c <hitComet+0x140>)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	460a      	mov	r2, r1
 8003dbc:	70da      	strb	r2, [r3, #3]
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	dddf      	ble.n	8003d8a <hitComet+0x7e>
        }
        powerups();
 8003dca:	f000 fa6d 	bl	80042a8 <powerups>
    }

    for(int j = com; j < MAX_COMETS - 1; j++){
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	e027      	b.n	8003e24 <hitComet+0x118>
    	COMET_X(j) = COMET_X(j+1);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	4a1a      	ldr	r2, [pc, #104]	; (8003e44 <hitComet+0x138>)
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	7859      	ldrb	r1, [r3, #1]
 8003de0:	4a18      	ldr	r2, [pc, #96]	; (8003e44 <hitComet+0x138>)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	460a      	mov	r2, r1
 8003dea:	705a      	strb	r2, [r3, #1]
    	COMET_Y(j) = COMET_Y(j+1);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	3301      	adds	r3, #1
 8003df0:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <hitComet+0x138>)
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	7899      	ldrb	r1, [r3, #2]
 8003df8:	4a12      	ldr	r2, [pc, #72]	; (8003e44 <hitComet+0x138>)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	460a      	mov	r2, r1
 8003e02:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(j) = COMET_SIZE(j+1);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	3301      	adds	r3, #1
 8003e08:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <hitComet+0x138>)
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003e12:	4a0c      	ldr	r2, [pc, #48]	; (8003e44 <hitComet+0x138>)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	460a      	mov	r2, r1
 8003e1c:	70da      	strb	r2, [r3, #3]
    for(int j = com; j < MAX_COMETS - 1; j++){
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	3301      	adds	r3, #1
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	ddd4      	ble.n	8003dd4 <hitComet+0xc8>
    }
    Comet.in_play--;
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <hitComet+0x138>)
 8003e2c:	f993 3000 	ldrsb.w	r3, [r3]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	b25a      	sxtb	r2, r3
 8003e38:	4b02      	ldr	r3, [pc, #8]	; (8003e44 <hitComet+0x138>)
 8003e3a:	701a      	strb	r2, [r3, #0]
}
 8003e3c:	bf00      	nop
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd90      	pop	{r4, r7, pc}
 8003e44:	2000218c 	.word	0x2000218c
 8003e48:	200021d0 	.word	0x200021d0
 8003e4c:	2000216c 	.word	0x2000216c

08003e50 <displayStars>:




void displayStars(uint16_t color){
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	4603      	mov	r3, r0
 8003e58:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < Star.in_play; i++){
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	e01a      	b.n	8003e96 <displayStars+0x46>
    	Displ_FillArea(STAR_X(i)* 4, STAR_Y(i) * 4, 4, 4, color);
 8003e60:	4a13      	ldr	r2, [pc, #76]	; (8003eb0 <displayStars+0x60>)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	4413      	add	r3, r2
 8003e68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	b298      	uxth	r0, r3
 8003e72:	4a0f      	ldr	r2, [pc, #60]	; (8003eb0 <displayStars+0x60>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	4413      	add	r3, r2
 8003e7a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	b299      	uxth	r1, r3
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2304      	movs	r3, #4
 8003e8a:	2204      	movs	r2, #4
 8003e8c:	f000 ff06 	bl	8004c9c <Displ_FillArea>
    for(int i = 0; i < Star.in_play; i++){
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3301      	adds	r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <displayStars+0x60>)
 8003e98:	f993 3000 	ldrsb.w	r3, [r3]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	dbdd      	blt.n	8003e60 <displayStars+0x10>
    }
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	200021b8 	.word	0x200021b8

08003eb4 <displayAmmo>:

void displayAmmo(uint16_t color){
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	4603      	mov	r3, r0
 8003ebc:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < ammo.in_play; i++){
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e01a      	b.n	8003efa <displayAmmo+0x46>
    	Displ_FillArea(AMMO_X(i) * 4, AMMO_Y(i) * 4, 4, 4, color);
 8003ec4:	4a27      	ldr	r2, [pc, #156]	; (8003f64 <displayAmmo+0xb0>)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4413      	add	r3, r2
 8003ecc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	b298      	uxth	r0, r3
 8003ed6:	4a23      	ldr	r2, [pc, #140]	; (8003f64 <displayAmmo+0xb0>)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	b299      	uxth	r1, r3
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	2304      	movs	r3, #4
 8003eee:	2204      	movs	r2, #4
 8003ef0:	f000 fed4 	bl	8004c9c <Displ_FillArea>
    for(int i = 0; i < ammo.in_play; i++){
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <displayAmmo+0xb0>)
 8003efc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003f00:	461a      	mov	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4293      	cmp	r3, r2
 8003f06:	dbdd      	blt.n	8003ec4 <displayAmmo+0x10>
    }
    if(in_multiplayer){
 8003f08:	4b17      	ldr	r3, [pc, #92]	; (8003f68 <displayAmmo+0xb4>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d025      	beq.n	8003f5c <displayAmmo+0xa8>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8003f10:	2300      	movs	r3, #0
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	e01b      	b.n	8003f4e <displayAmmo+0x9a>
            Displ_FillArea(E_AMMO_X(i) * 4, E_AMMO_Y(i) * 4, 4, 4, LIGHT_BLUE);
 8003f16:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <displayAmmo+0xb8>)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	b298      	uxth	r0, r3
 8003f28:	4a10      	ldr	r2, [pc, #64]	; (8003f6c <displayAmmo+0xb8>)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	4413      	add	r3, r2
 8003f30:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	b299      	uxth	r1, r3
 8003f3a:	f24f 73db 	movw	r3, #63451	; 0xf7db
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	2304      	movs	r3, #4
 8003f42:	2204      	movs	r2, #4
 8003f44:	f000 feaa 	bl	8004c9c <Displ_FillArea>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <displayAmmo+0xb8>)
 8003f50:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003f54:	461a      	mov	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	dbdc      	blt.n	8003f16 <displayAmmo+0x62>
        }
    }
}
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	2000216c 	.word	0x2000216c
 8003f68:	20000051 	.word	0x20000051
 8003f6c:	2000217c 	.word	0x2000217c

08003f70 <displayComets>:

void displayComets(uint16_t color){
 8003f70:	b590      	push	{r4, r7, lr}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	4603      	mov	r3, r0
 8003f78:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < Comet.in_play; i++){
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e029      	b.n	8003fd4 <displayComets+0x64>
        Displ_FillArea(COMET_X(i) * 4, COMET_Y(i)  * 4, COMET_SIZE(i) * 4, COMET_SIZE(i) * 4, color);
 8003f80:	4a1a      	ldr	r2, [pc, #104]	; (8003fec <displayComets+0x7c>)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	785b      	ldrb	r3, [r3, #1]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	b298      	uxth	r0, r3
 8003f90:	4a16      	ldr	r2, [pc, #88]	; (8003fec <displayComets+0x7c>)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	789b      	ldrb	r3, [r3, #2]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	b299      	uxth	r1, r3
 8003fa0:	4a12      	ldr	r2, [pc, #72]	; (8003fec <displayComets+0x7c>)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	4c0e      	ldr	r4, [pc, #56]	; (8003fec <displayComets+0x7c>)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4423      	add	r3, r4
 8003fba:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	b29c      	uxth	r4, r3
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	4623      	mov	r3, r4
 8003fca:	f000 fe67 	bl	8004c9c <Displ_FillArea>
    for (int i = 0; i < Comet.in_play; i++){
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <displayComets+0x7c>)
 8003fd6:	f993 3000 	ldrsb.w	r3, [r3]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	dbce      	blt.n	8003f80 <displayComets+0x10>
    }
}
 8003fe2:	bf00      	nop
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd90      	pop	{r4, r7, pc}
 8003fec:	2000218c 	.word	0x2000218c

08003ff0 <displaySpaceShip>:

void displaySpaceShip(uint16_t color){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(SpaceShip.x*4 - 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8003ffa:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <displaySpaceShip+0x80>)
 8003ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8004000:	3b02      	subs	r3, #2
 8004002:	b29b      	uxth	r3, r3
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	b298      	uxth	r0, r3
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	2310      	movs	r3, #16
 800400e:	2204      	movs	r2, #4
 8004010:	21d8      	movs	r1, #216	; 0xd8
 8004012:	f000 fe43 	bl	8004c9c <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 + 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8004016:	4b16      	ldr	r3, [pc, #88]	; (8004070 <displaySpaceShip+0x80>)
 8004018:	f993 3000 	ldrsb.w	r3, [r3]
 800401c:	3302      	adds	r3, #2
 800401e:	b29b      	uxth	r3, r3
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	b298      	uxth	r0, r3
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	2310      	movs	r3, #16
 800402a:	2204      	movs	r2, #4
 800402c:	21d8      	movs	r1, #216	; 0xd8
 800402e:	f000 fe35 	bl	8004c9c <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 - 4, SCREEN_HEIGHT*4 -20, 12, 4, color);
 8004032:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <displaySpaceShip+0x80>)
 8004034:	f993 3000 	ldrsb.w	r3, [r3]
 8004038:	3b01      	subs	r3, #1
 800403a:	b29b      	uxth	r3, r3
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	b298      	uxth	r0, r3
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2304      	movs	r3, #4
 8004046:	220c      	movs	r2, #12
 8004048:	21dc      	movs	r1, #220	; 0xdc
 800404a:	f000 fe27 	bl	8004c9c <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4, SCREEN_HEIGHT*4 -28, 4, 16, color);
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <displaySpaceShip+0x80>)
 8004050:	f993 3000 	ldrsb.w	r3, [r3]
 8004054:	b29b      	uxth	r3, r3
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	b298      	uxth	r0, r3
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	2310      	movs	r3, #16
 8004060:	2204      	movs	r2, #4
 8004062:	21d4      	movs	r1, #212	; 0xd4
 8004064:	f000 fe1a 	bl	8004c9c <Displ_FillArea>

}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	2000004c 	.word	0x2000004c

08004074 <displayLives>:

void displayLives(){
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af02      	add	r7, sp, #8
    for(int i = 0; i < lives; i++){
 800407a:	2300      	movs	r3, #0
 800407c:	607b      	str	r3, [r7, #4]
 800407e:	e013      	b.n	80040a8 <displayLives+0x34>
    	Displ_FillArea(HEARTS_X+HEARTS_OFFSET*i, HEARTS_Y, 4, 4, LIGHT_GREEN);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	b29b      	uxth	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	0052      	lsls	r2, r2, #1
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	b29b      	uxth	r3, r3
 800408e:	3308      	adds	r3, #8
 8004090:	b298      	uxth	r0, r3
 8004092:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2304      	movs	r3, #4
 800409a:	2204      	movs	r2, #4
 800409c:	2108      	movs	r1, #8
 800409e:	f000 fdfd 	bl	8004c9c <Displ_FillArea>
    for(int i = 0; i < lives; i++){
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3301      	adds	r3, #1
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	4b16      	ldr	r3, [pc, #88]	; (8004104 <displayLives+0x90>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4293      	cmp	r3, r2
 80040b2:	dbe5      	blt.n	8004080 <displayLives+0xc>
    }
    if(lives < 3){
 80040b4:	4b13      	ldr	r3, [pc, #76]	; (8004104 <displayLives+0x90>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d81f      	bhi.n	80040fc <displayLives+0x88>
    	for(int i = 0; i < 3 - lives; i++){
 80040bc:	2300      	movs	r3, #0
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	e015      	b.n	80040ee <displayLives+0x7a>
    		Displ_FillArea(HEARTS_X+HEARTS_OFFSET*(3-i), HEARTS_Y, 4, 4, DARK_GREY);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	f1c3 0303 	rsb	r3, r3, #3
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	0052      	lsls	r2, r2, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3308      	adds	r3, #8
 80040d6:	b298      	uxth	r0, r3
 80040d8:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	2304      	movs	r3, #4
 80040e0:	2204      	movs	r2, #4
 80040e2:	2108      	movs	r1, #8
 80040e4:	f000 fdda 	bl	8004c9c <Displ_FillArea>
    	for(int i = 0; i < 3 - lives; i++){
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	3301      	adds	r3, #1
 80040ec:	603b      	str	r3, [r7, #0]
 80040ee:	4b05      	ldr	r3, [pc, #20]	; (8004104 <displayLives+0x90>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	f1c3 0303 	rsb	r3, r3, #3
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	dbe2      	blt.n	80040c2 <displayLives+0x4e>
    	}
    }
}
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000049 	.word	0x20000049

08004108 <spaceShipHitColorToggle>:


void spaceShipHitColorToggle(){
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
    if(spaceshipCurrentColor == RED && hit % 10 == 0){
 800410c:	4b1f      	ldr	r3, [pc, #124]	; (800418c <spaceShipHitColorToggle+0x84>)
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8004114:	d112      	bne.n	800413c <spaceShipHitColorToggle+0x34>
 8004116:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <spaceShipHitColorToggle+0x88>)
 8004118:	781a      	ldrb	r2, [r3, #0]
 800411a:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <spaceShipHitColorToggle+0x8c>)
 800411c:	fba3 1302 	umull	r1, r3, r3, r2
 8004120:	08d9      	lsrs	r1, r3, #3
 8004122:	460b      	mov	r3, r1
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <spaceShipHitColorToggle+0x34>
        spaceshipCurrentColor = WHITE;
 8004132:	4b16      	ldr	r3, [pc, #88]	; (800418c <spaceShipHitColorToggle+0x84>)
 8004134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004138:	801a      	strh	r2, [r3, #0]
 800413a:	e011      	b.n	8004160 <spaceShipHitColorToggle+0x58>
    }else if(hit % 10 == 0){
 800413c:	4b14      	ldr	r3, [pc, #80]	; (8004190 <spaceShipHitColorToggle+0x88>)
 800413e:	781a      	ldrb	r2, [r3, #0]
 8004140:	4b14      	ldr	r3, [pc, #80]	; (8004194 <spaceShipHitColorToggle+0x8c>)
 8004142:	fba3 1302 	umull	r1, r3, r3, r2
 8004146:	08d9      	lsrs	r1, r3, #3
 8004148:	460b      	mov	r3, r1
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d103      	bne.n	8004160 <spaceShipHitColorToggle+0x58>
        spaceshipCurrentColor = RED;
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <spaceShipHitColorToggle+0x84>)
 800415a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800415e:	801a      	strh	r2, [r3, #0]
    }
    if(hit < hit_graph_counter){
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <spaceShipHitColorToggle+0x88>)
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <spaceShipHitColorToggle+0x90>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d206      	bcs.n	800417a <spaceShipHitColorToggle+0x72>
        hit++;
 800416c:	4b08      	ldr	r3, [pc, #32]	; (8004190 <spaceShipHitColorToggle+0x88>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	3301      	adds	r3, #1
 8004172:	b2da      	uxtb	r2, r3
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <spaceShipHitColorToggle+0x88>)
 8004176:	701a      	strb	r2, [r3, #0]
    }else{
        hit = 0;
    }
}
 8004178:	e002      	b.n	8004180 <spaceShipHitColorToggle+0x78>
        hit = 0;
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <spaceShipHitColorToggle+0x88>)
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
}
 8004180:	bf00      	nop
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	2000004e 	.word	0x2000004e
 8004190:	20001eeb 	.word	0x20001eeb
 8004194:	cccccccd 	.word	0xcccccccd
 8004198:	20000050 	.word	0x20000050

0800419c <delayBullet>:

void delayBullet(){
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
    if (bullet_delay > 0){
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <delayBullet+0x24>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <delayBullet+0x18>
        bullet_delay--;
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <delayBullet+0x24>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <delayBullet+0x24>)
 80041b2:	701a      	strb	r2, [r3, #0]
    }
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	200021cd 	.word	0x200021cd

080041c4 <beenHit>:

void beenHit(){
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
    hit = 1;
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <beenHit+0x34>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
    lives--;
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <beenHit+0x38>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	4b09      	ldr	r3, [pc, #36]	; (80041fc <beenHit+0x38>)
 80041d8:	701a      	strb	r2, [r3, #0]
    if(lives <= 0){
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <beenHit+0x38>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d107      	bne.n	80041f2 <beenHit+0x2e>
        play = 0;
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <beenHit+0x3c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
        hit = 0;
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <beenHit+0x34>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	701a      	strb	r2, [r3, #0]
        initSpaceInvaders();
 80041ee:	f7ff f82d 	bl	800324c <initSpaceInvaders>

    }
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20001eeb 	.word	0x20001eeb
 80041fc:	20000049 	.word	0x20000049
 8004200:	2000004a 	.word	0x2000004a

08004204 <send_Bullet>:

void send_Bullet(point bullet){
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	80b8      	strh	r0, [r7, #4]
    if(connected && bullet.y != -2){
 800420c:	4b22      	ldr	r3, [pc, #136]	; (8004298 <send_Bullet+0x94>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d03d      	beq.n	8004290 <send_Bullet+0x8c>
 8004214:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004218:	f113 0f02 	cmn.w	r3, #2
 800421c:	d038      	beq.n	8004290 <send_Bullet+0x8c>
        //QD << "a bullet has been send to the other player at x:" << bullet.x;  // change to uart debug
        if(enemy_ammo.in_play < MAX_BULLETS){
 800421e:	4b1f      	ldr	r3, [pc, #124]	; (800429c <send_Bullet+0x98>)
 8004220:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004224:	2b05      	cmp	r3, #5
 8004226:	dc2d      	bgt.n	8004284 <send_Bullet+0x80>
        	E_AMMO_X(enemy_ammo.in_play) = RANDOM(PLAYABLE_OFFSET, PLAYABLE_MAX);
 8004228:	f006 f9e8 	bl	800a5fc <rand>
 800422c:	4602      	mov	r2, r0
 800422e:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <send_Bullet+0x9c>)
 8004230:	fb83 1302 	smull	r1, r3, r3, r2
 8004234:	4413      	add	r3, r2
 8004236:	1199      	asrs	r1, r3, #6
 8004238:	17d3      	asrs	r3, r2, #31
 800423a:	1ac9      	subs	r1, r1, r3
 800423c:	460b      	mov	r3, r1
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	440b      	add	r3, r1
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	1a5b      	subs	r3, r3, r1
 8004246:	1ad1      	subs	r1, r2, r3
 8004248:	b2cb      	uxtb	r3, r1
 800424a:	3305      	adds	r3, #5
 800424c:	b2da      	uxtb	r2, r3
 800424e:	4b13      	ldr	r3, [pc, #76]	; (800429c <send_Bullet+0x98>)
 8004250:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004254:	b251      	sxtb	r1, r2
 8004256:	4a11      	ldr	r2, [pc, #68]	; (800429c <send_Bullet+0x98>)
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	4413      	add	r3, r2
 800425c:	460a      	mov	r2, r1
 800425e:	709a      	strb	r2, [r3, #2]
        	E_AMMO_Y(enemy_ammo.in_play) = 3;
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <send_Bullet+0x98>)
 8004262:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004266:	4a0d      	ldr	r2, [pc, #52]	; (800429c <send_Bullet+0x98>)
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	2203      	movs	r2, #3
 800426e:	70da      	strb	r2, [r3, #3]
            enemy_ammo.in_play++;
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <send_Bullet+0x98>)
 8004272:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	3301      	adds	r3, #1
 800427a:	b2db      	uxtb	r3, r3
 800427c:	b25a      	sxtb	r2, r3
 800427e:	4b07      	ldr	r3, [pc, #28]	; (800429c <send_Bullet+0x98>)
 8004280:	705a      	strb	r2, [r3, #1]
        }else{
            star_delay--;
        }
    }
}
 8004282:	e005      	b.n	8004290 <send_Bullet+0x8c>
            star_delay--;
 8004284:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <send_Bullet+0xa0>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	3b01      	subs	r3, #1
 800428a:	b2da      	uxtb	r2, r3
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <send_Bullet+0xa0>)
 800428e:	701a      	strb	r2, [r3, #0]
}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20002105 	.word	0x20002105
 800429c:	2000217c 	.word	0x2000217c
 80042a0:	e6c2b449 	.word	0xe6c2b449
 80042a4:	200021d5 	.word	0x200021d5

080042a8 <powerups>:

void powerups(){
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
    uint8_t powerupornot = RANDOM(0,3);
 80042ae:	f006 f9a5 	bl	800a5fc <rand>
 80042b2:	4603      	mov	r3, r0
 80042b4:	425a      	negs	r2, r3
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	f002 0203 	and.w	r2, r2, #3
 80042be:	bf58      	it	pl
 80042c0:	4253      	negpl	r3, r2
 80042c2:	71fb      	strb	r3, [r7, #7]
    if(powerUp == 0 && powerupornot == 0){
 80042c4:	4b17      	ldr	r3, [pc, #92]	; (8004324 <powerups+0x7c>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d127      	bne.n	800431c <powerups+0x74>
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d124      	bne.n	800431c <powerups+0x74>
        powerUp = RANDOM(1,3);
 80042d2:	f006 f993 	bl	800a5fc <rand>
 80042d6:	4602      	mov	r2, r0
 80042d8:	4b13      	ldr	r3, [pc, #76]	; (8004328 <powerups+0x80>)
 80042da:	fb83 3102 	smull	r3, r1, r3, r2
 80042de:	17d3      	asrs	r3, r2, #31
 80042e0:	1ac9      	subs	r1, r1, r3
 80042e2:	460b      	mov	r3, r1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	440b      	add	r3, r1
 80042e8:	1ad1      	subs	r1, r2, r3
 80042ea:	b2cb      	uxtb	r3, r1
 80042ec:	3301      	adds	r3, #1
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <powerups+0x7c>)
 80042f2:	701a      	strb	r2, [r3, #0]
        if(powerUp == 1){
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <powerups+0x7c>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d104      	bne.n	8004306 <powerups+0x5e>
        	displayPowerup(RED);
 80042fc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004300:	f000 f816 	bl	8004330 <displayPowerup>
 8004304:	e007      	b.n	8004316 <powerups+0x6e>
        }
        else if(powerUp == 2){
 8004306:	4b07      	ldr	r3, [pc, #28]	; (8004324 <powerups+0x7c>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d103      	bne.n	8004316 <powerups+0x6e>
        	displayPowerup(LIGHT_BLUE);
 800430e:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8004312:	f000 f80d 	bl	8004330 <displayPowerup>
        }
        powerUp_delay = MAX_DELAY_POWERUP;
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <powerups+0x84>)
 8004318:	2205      	movs	r2, #5
 800431a:	701a      	strb	r2, [r3, #0]
    }
}
 800431c:	bf00      	nop
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	200021d6 	.word	0x200021d6
 8004328:	55555556 	.word	0x55555556
 800432c:	200021d7 	.word	0x200021d7

08004330 <displayPowerup>:

void displayPowerup(uint16_t color){
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af02      	add	r7, sp, #8
 8004336:	4603      	mov	r3, r0
 8004338:	80fb      	strh	r3, [r7, #6]

    if(powerUp == 1){
 800433a:	4b1f      	ldr	r3, [pc, #124]	; (80043b8 <displayPowerup+0x88>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d11c      	bne.n	800437c <displayPowerup+0x4c>
		Displ_FillArea(SpaceShip.x * 4, 0, 4, 180, color);
 8004342:	4b1e      	ldr	r3, [pc, #120]	; (80043bc <displayPowerup+0x8c>)
 8004344:	f993 3000 	ldrsb.w	r3, [r3]
 8004348:	b29b      	uxth	r3, r3
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	b298      	uxth	r0, r3
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	23b4      	movs	r3, #180	; 0xb4
 8004354:	2204      	movs	r2, #4
 8004356:	2100      	movs	r1, #0
 8004358:	f000 fca0 	bl	8004c9c <Displ_FillArea>
		Displ_FillArea(SpaceShip.x * 4 + 1, 180, 2, 30, color);
 800435c:	4b17      	ldr	r3, [pc, #92]	; (80043bc <displayPowerup+0x8c>)
 800435e:	f993 3000 	ldrsb.w	r3, [r3]
 8004362:	b29b      	uxth	r3, r3
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	b29b      	uxth	r3, r3
 8004368:	3301      	adds	r3, #1
 800436a:	b298      	uxth	r0, r3
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	231e      	movs	r3, #30
 8004372:	2202      	movs	r2, #2
 8004374:	21b4      	movs	r1, #180	; 0xb4
 8004376:	f000 fc91 	bl	8004c9c <Displ_FillArea>
    }
    else if(powerUp == 2){
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
    }
}
 800437a:	e019      	b.n	80043b0 <displayPowerup+0x80>
    else if(powerUp == 2){
 800437c:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <displayPowerup+0x88>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d115      	bne.n	80043b0 <displayPowerup+0x80>
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
 8004384:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <displayPowerup+0x8c>)
 8004386:	f993 3000 	ldrsb.w	r3, [r3]
 800438a:	b29b      	uxth	r3, r3
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	b29b      	uxth	r3, r3
 8004390:	3301      	adds	r3, #1
 8004392:	b29b      	uxth	r3, r3
 8004394:	b218      	sxth	r0, r3
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <displayPowerup+0x8c>)
 8004398:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800439c:	b29b      	uxth	r3, r3
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3302      	adds	r3, #2
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	b219      	sxth	r1, r3
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	220e      	movs	r2, #14
 80043ac:	f000 fd56 	bl	8004e5c <Displ_drawCircle>
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	200021d6 	.word	0x200021d6
 80043bc:	2000004c 	.word	0x2000004c

080043c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c6:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <HAL_MspInit+0x44>)
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	4a0e      	ldr	r2, [pc, #56]	; (8004404 <HAL_MspInit+0x44>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6193      	str	r3, [r2, #24]
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <HAL_MspInit+0x44>)
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	607b      	str	r3, [r7, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <HAL_MspInit+0x44>)
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	4a08      	ldr	r2, [pc, #32]	; (8004404 <HAL_MspInit+0x44>)
 80043e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e8:	61d3      	str	r3, [r2, #28]
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_MspInit+0x44>)
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000

08004408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	; 0x28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004410:	f107 0314 	add.w	r3, r7, #20
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	605a      	str	r2, [r3, #4]
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <HAL_I2C_MspInit+0x7c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d127      	bne.n	800447a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800442a:	4b17      	ldr	r3, [pc, #92]	; (8004488 <HAL_I2C_MspInit+0x80>)
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	4a16      	ldr	r2, [pc, #88]	; (8004488 <HAL_I2C_MspInit+0x80>)
 8004430:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004434:	6153      	str	r3, [r2, #20]
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <HAL_I2C_MspInit+0x80>)
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004442:	2303      	movs	r3, #3
 8004444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004446:	2312      	movs	r3, #18
 8004448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800444a:	2301      	movs	r3, #1
 800444c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800444e:	2303      	movs	r3, #3
 8004450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004452:	2304      	movs	r3, #4
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004456:	f107 0314 	add.w	r3, r7, #20
 800445a:	4619      	mov	r1, r3
 800445c:	480b      	ldr	r0, [pc, #44]	; (800448c <HAL_I2C_MspInit+0x84>)
 800445e:	f001 fd8d 	bl	8005f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_I2C_MspInit+0x80>)
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	4a08      	ldr	r2, [pc, #32]	; (8004488 <HAL_I2C_MspInit+0x80>)
 8004468:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800446c:	61d3      	str	r3, [r2, #28]
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_I2C_MspInit+0x80>)
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800447a:	bf00      	nop
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40005800 	.word	0x40005800
 8004488:	40021000 	.word	0x40021000
 800448c:	48001400 	.word	0x48001400

08004490 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2e      	ldr	r2, [pc, #184]	; (8004568 <HAL_SPI_MspInit+0xd8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d156      	bne.n	8004560 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044b2:	4b2e      	ldr	r3, [pc, #184]	; (800456c <HAL_SPI_MspInit+0xdc>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	4a2d      	ldr	r2, [pc, #180]	; (800456c <HAL_SPI_MspInit+0xdc>)
 80044b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044bc:	61d3      	str	r3, [r2, #28]
 80044be:	4b2b      	ldr	r3, [pc, #172]	; (800456c <HAL_SPI_MspInit+0xdc>)
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ca:	4b28      	ldr	r3, [pc, #160]	; (800456c <HAL_SPI_MspInit+0xdc>)
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	4a27      	ldr	r2, [pc, #156]	; (800456c <HAL_SPI_MspInit+0xdc>)
 80044d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d4:	6153      	str	r3, [r2, #20]
 80044d6:	4b25      	ldr	r3, [pc, #148]	; (800456c <HAL_SPI_MspInit+0xdc>)
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80044e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80044e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e8:	2302      	movs	r3, #2
 80044ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044f0:	2303      	movs	r3, #3
 80044f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80044f4:	2305      	movs	r3, #5
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044f8:	f107 0314 	add.w	r3, r7, #20
 80044fc:	4619      	mov	r1, r3
 80044fe:	481c      	ldr	r0, [pc, #112]	; (8004570 <HAL_SPI_MspInit+0xe0>)
 8004500:	f001 fd3c 	bl	8005f7c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8004504:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <HAL_SPI_MspInit+0xe4>)
 8004506:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <HAL_SPI_MspInit+0xe8>)
 8004508:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800450a:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <HAL_SPI_MspInit+0xe4>)
 800450c:	2210      	movs	r2, #16
 800450e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004510:	4b18      	ldr	r3, [pc, #96]	; (8004574 <HAL_SPI_MspInit+0xe4>)
 8004512:	2200      	movs	r2, #0
 8004514:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004516:	4b17      	ldr	r3, [pc, #92]	; (8004574 <HAL_SPI_MspInit+0xe4>)
 8004518:	2280      	movs	r2, #128	; 0x80
 800451a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800451c:	4b15      	ldr	r3, [pc, #84]	; (8004574 <HAL_SPI_MspInit+0xe4>)
 800451e:	2200      	movs	r2, #0
 8004520:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004522:	4b14      	ldr	r3, [pc, #80]	; (8004574 <HAL_SPI_MspInit+0xe4>)
 8004524:	2200      	movs	r2, #0
 8004526:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004528:	4b12      	ldr	r3, [pc, #72]	; (8004574 <HAL_SPI_MspInit+0xe4>)
 800452a:	2200      	movs	r2, #0
 800452c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800452e:	4b11      	ldr	r3, [pc, #68]	; (8004574 <HAL_SPI_MspInit+0xe4>)
 8004530:	2200      	movs	r2, #0
 8004532:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004534:	480f      	ldr	r0, [pc, #60]	; (8004574 <HAL_SPI_MspInit+0xe4>)
 8004536:	f001 fb12 	bl	8005b5e <HAL_DMA_Init>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8004540:	f7fe fc70 	bl	8002e24 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a0b      	ldr	r2, [pc, #44]	; (8004574 <HAL_SPI_MspInit+0xe4>)
 8004548:	655a      	str	r2, [r3, #84]	; 0x54
 800454a:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <HAL_SPI_MspInit+0xe4>)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004550:	2200      	movs	r2, #0
 8004552:	2100      	movs	r1, #0
 8004554:	2024      	movs	r0, #36	; 0x24
 8004556:	f001 facc 	bl	8005af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800455a:	2024      	movs	r0, #36	; 0x24
 800455c:	f001 fae5 	bl	8005b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004560:	bf00      	nop
 8004562:	3728      	adds	r7, #40	; 0x28
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40003800 	.word	0x40003800
 800456c:	40021000 	.word	0x40021000
 8004570:	48000400 	.word	0x48000400
 8004574:	20001fa8 	.word	0x20001fa8
 8004578:	40020058 	.word	0x40020058

0800457c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08c      	sub	sp, #48	; 0x30
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004584:	f107 031c 	add.w	r3, r7, #28
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	605a      	str	r2, [r3, #4]
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	60da      	str	r2, [r3, #12]
 8004592:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a33      	ldr	r2, [pc, #204]	; (8004668 <HAL_UART_MspInit+0xec>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d131      	bne.n	8004602 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800459e:	4b33      	ldr	r3, [pc, #204]	; (800466c <HAL_UART_MspInit+0xf0>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	4a32      	ldr	r2, [pc, #200]	; (800466c <HAL_UART_MspInit+0xf0>)
 80045a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a8:	61d3      	str	r3, [r2, #28]
 80045aa:	4b30      	ldr	r3, [pc, #192]	; (800466c <HAL_UART_MspInit+0xf0>)
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b6:	4b2d      	ldr	r3, [pc, #180]	; (800466c <HAL_UART_MspInit+0xf0>)
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	4a2c      	ldr	r2, [pc, #176]	; (800466c <HAL_UART_MspInit+0xf0>)
 80045bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c0:	6153      	str	r3, [r2, #20]
 80045c2:	4b2a      	ldr	r3, [pc, #168]	; (800466c <HAL_UART_MspInit+0xf0>)
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80045ce:	230c      	movs	r3, #12
 80045d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d2:	2302      	movs	r3, #2
 80045d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045da:	2303      	movs	r3, #3
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80045de:	2307      	movs	r3, #7
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e2:	f107 031c 	add.w	r3, r7, #28
 80045e6:	4619      	mov	r1, r3
 80045e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045ec:	f001 fcc6 	bl	8005f7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80045f0:	2200      	movs	r2, #0
 80045f2:	2100      	movs	r1, #0
 80045f4:	2026      	movs	r0, #38	; 0x26
 80045f6:	f001 fa7c 	bl	8005af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045fa:	2026      	movs	r0, #38	; 0x26
 80045fc:	f001 fa95 	bl	8005b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004600:	e02d      	b.n	800465e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1a      	ldr	r2, [pc, #104]	; (8004670 <HAL_UART_MspInit+0xf4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d128      	bne.n	800465e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800460c:	4b17      	ldr	r3, [pc, #92]	; (800466c <HAL_UART_MspInit+0xf0>)
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	4a16      	ldr	r2, [pc, #88]	; (800466c <HAL_UART_MspInit+0xf0>)
 8004612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004616:	61d3      	str	r3, [r2, #28]
 8004618:	4b14      	ldr	r3, [pc, #80]	; (800466c <HAL_UART_MspInit+0xf0>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <HAL_UART_MspInit+0xf0>)
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	4a10      	ldr	r2, [pc, #64]	; (800466c <HAL_UART_MspInit+0xf0>)
 800462a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800462e:	6153      	str	r3, [r2, #20]
 8004630:	4b0e      	ldr	r3, [pc, #56]	; (800466c <HAL_UART_MspInit+0xf0>)
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800463c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004642:	2302      	movs	r3, #2
 8004644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004646:	2300      	movs	r3, #0
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800464a:	2303      	movs	r3, #3
 800464c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800464e:	2307      	movs	r3, #7
 8004650:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004652:	f107 031c 	add.w	r3, r7, #28
 8004656:	4619      	mov	r1, r3
 8004658:	4806      	ldr	r0, [pc, #24]	; (8004674 <HAL_UART_MspInit+0xf8>)
 800465a:	f001 fc8f 	bl	8005f7c <HAL_GPIO_Init>
}
 800465e:	bf00      	nop
 8004660:	3730      	adds	r7, #48	; 0x30
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40004400 	.word	0x40004400
 800466c:	40021000 	.word	0x40021000
 8004670:	40004800 	.word	0x40004800
 8004674:	48000400 	.word	0x48000400

08004678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800467c:	e7fe      	b.n	800467c <NMI_Handler+0x4>

0800467e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800467e:	b480      	push	{r7}
 8004680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004682:	e7fe      	b.n	8004682 <HardFault_Handler+0x4>

08004684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004688:	e7fe      	b.n	8004688 <MemManage_Handler+0x4>

0800468a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800468a:	b480      	push	{r7}
 800468c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800468e:	e7fe      	b.n	800468e <BusFault_Handler+0x4>

08004690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004694:	e7fe      	b.n	8004694 <UsageFault_Handler+0x4>

08004696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004696:	b480      	push	{r7}
 8004698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046b2:	b480      	push	{r7}
 80046b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046b6:	bf00      	nop
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046c4:	f001 f8f6 	bl	80058b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046c8:	bf00      	nop
 80046ca:	bd80      	pop	{r7, pc}

080046cc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 80046d0:	2001      	movs	r0, #1
 80046d2:	f001 fdf5 	bl	80062c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80046e0:	4802      	ldr	r0, [pc, #8]	; (80046ec <DMA1_Channel5_IRQHandler+0x10>)
 80046e2:	f001 fb59 	bl	8005d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20001fa8 	.word	0x20001fa8

080046f0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80046f4:	4802      	ldr	r0, [pc, #8]	; (8004700 <SPI2_IRQHandler+0x10>)
 80046f6:	f004 fc1b 	bl	8008f30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20001f44 	.word	0x20001f44

08004704 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char ch;
    uint16_t number;

    uint32_t isrflags = READ_REG(huart2.Instance->ISR);
 800470a:	4b12      	ldr	r3, [pc, #72]	; (8004754 <USART2_IRQHandler+0x50>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	60fb      	str	r3, [r7, #12]
    uint32_t crlits = READ_REG(huart2.Instance->CR1);
 8004712:	4b10      	ldr	r3, [pc, #64]	; (8004754 <USART2_IRQHandler+0x50>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60bb      	str	r3, [r7, #8]

    if (((isrflags & USART_ISR_RXNE) != RESET) && ((crlits & USART_CR1_RXNEIE) != RESET)) {
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d010      	beq.n	8004746 <USART2_IRQHandler+0x42>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00b      	beq.n	8004746 <USART2_IRQHandler+0x42>
        huart2.Instance->ISR;
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <USART2_IRQHandler+0x50>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69db      	ldr	r3, [r3, #28]
        //number = huart2.Instance->RDR;
        ch = huart2.Instance->RDR;
 8004734:	4b07      	ldr	r3, [pc, #28]	; (8004754 <USART2_IRQHandler+0x50>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800473a:	b29b      	uxth	r3, r3
 800473c:	71fb      	strb	r3, [r7, #7]
        //printf("%ul\r\n", number);
        //printf("%c\r\n", ch);
        addCharacterToArray(ch);
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	4618      	mov	r0, r3
 8004742:	f7fe fd51 	bl	80031e8 <addCharacterToArray>
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004746:	4803      	ldr	r0, [pc, #12]	; (8004754 <USART2_IRQHandler+0x50>)
 8004748:	f004 ffce 	bl	80096e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20001fec 	.word	0x20001fec

08004758 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 800475c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004760:	f001 fdae 	bl	80062c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8004764:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004768:	f001 fdaa 	bl	80062c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 800476c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004770:	f001 fda6 	bl	80062c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004774:	bf00      	nop
 8004776:	bd80      	pop	{r7, pc}

08004778 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return 1;
 800477c:	2301      	movs	r3, #1
}
 800477e:	4618      	mov	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <_kill>:

int _kill(int pid, int sig)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004792:	f005 fe45 	bl	800a420 <__errno>
 8004796:	4603      	mov	r3, r0
 8004798:	2216      	movs	r2, #22
 800479a:	601a      	str	r2, [r3, #0]
  return -1;
 800479c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <_exit>:

void _exit (int status)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80047b0:	f04f 31ff 	mov.w	r1, #4294967295
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff ffe7 	bl	8004788 <_kill>
  while (1) {}    /* Make sure we hang here */
 80047ba:	e7fe      	b.n	80047ba <_exit+0x12>

080047bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	e00a      	b.n	80047e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80047ce:	f3af 8000 	nop.w
 80047d2:	4601      	mov	r1, r0
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	60ba      	str	r2, [r7, #8]
 80047da:	b2ca      	uxtb	r2, r1
 80047dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	3301      	adds	r3, #1
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	dbf0      	blt.n	80047ce <_read+0x12>
  }

  return len;
 80047ec:	687b      	ldr	r3, [r7, #4]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800481e:	605a      	str	r2, [r3, #4]
  return 0;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <_isatty>:

int _isatty(int file)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004836:	2301      	movs	r3, #1
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004868:	4a14      	ldr	r2, [pc, #80]	; (80048bc <_sbrk+0x5c>)
 800486a:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <_sbrk+0x60>)
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004874:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <_sbrk+0x64>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d102      	bne.n	8004882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800487c:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <_sbrk+0x64>)
 800487e:	4a12      	ldr	r2, [pc, #72]	; (80048c8 <_sbrk+0x68>)
 8004880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <_sbrk+0x64>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4413      	add	r3, r2
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	429a      	cmp	r2, r3
 800488e:	d207      	bcs.n	80048a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004890:	f005 fdc6 	bl	800a420 <__errno>
 8004894:	4603      	mov	r3, r0
 8004896:	220c      	movs	r2, #12
 8004898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800489a:	f04f 33ff 	mov.w	r3, #4294967295
 800489e:	e009      	b.n	80048b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048a0:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <_sbrk+0x64>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048a6:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <_sbrk+0x64>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	4a05      	ldr	r2, [pc, #20]	; (80048c4 <_sbrk+0x64>)
 80048b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048b2:	68fb      	ldr	r3, [r7, #12]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20004000 	.word	0x20004000
 80048c0:	00000400 	.word	0x00000400
 80048c4:	200021d8 	.word	0x200021d8
 80048c8:	20002a00 	.word	0x20002a00

080048cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <SystemInit+0x20>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	4a05      	ldr	r2, [pc, #20]	; (80048ec <SystemInit+0x20>)
 80048d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	e000ed00 	.word	0xe000ed00

080048f0 <Displ_Select>:

/******************************************
 * @brief   enable display, disabling touch
 *          device selected if CS low
 ******************************************/
void Displ_Select(void) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
    if (TOUCH_SPI==DISPL_SPI){                                                      // if SPI port shared (display <-> touch)
        if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {                   // if display not yet selected
 80048f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048fc:	f001 fcb0 	bl	8006260 <HAL_GPIO_ReadPin>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d017      	beq.n	8004936 <Displ_Select+0x46>
            HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch
 8004906:	2201      	movs	r2, #1
 8004908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800490c:	480b      	ldr	r0, [pc, #44]	; (800493c <Displ_Select+0x4c>)
 800490e:	f001 fcbf 	bl	8006290 <HAL_GPIO_WritePin>
            SET_DISPL_SPI_BAUDRATE;                                                 //change SPI port speed as per display needs
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <Displ_Select+0x50>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	490a      	ldr	r1, [pc, #40]	; (8004940 <Displ_Select+0x50>)
 8004918:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 800491c:	4013      	ands	r3, r2
 800491e:	600b      	str	r3, [r1, #0]
 8004920:	4b07      	ldr	r3, [pc, #28]	; (8004940 <Displ_Select+0x50>)
 8004922:	4a07      	ldr	r2, [pc, #28]	; (8004940 <Displ_Select+0x50>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
 8004928:	2200      	movs	r2, #0
 800492a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800492e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004932:	f001 fcad 	bl	8006290 <HAL_GPIO_WritePin>
        }
    }
}
 8004936:	bf00      	nop
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	48000400 	.word	0x48000400
 8004940:	40003800 	.word	0x40003800

08004944 <Displ_Transmit>:
 * @PARAM   DC_Status   indicates if sending command or data
 *          data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6039      	str	r1, [r7, #0]
 800494c:	4611      	mov	r1, r2
 800494e:	461a      	mov	r2, r3
 8004950:	4603      	mov	r3, r0
 8004952:	71fb      	strb	r3, [r7, #7]
 8004954:	460b      	mov	r3, r1
 8004956:	80bb      	strh	r3, [r7, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	71bb      	strb	r3, [r7, #6]

    while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 800495c:	bf00      	nop
 800495e:	4b23      	ldr	r3, [pc, #140]	; (80049ec <Displ_Transmit+0xa8>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0fa      	beq.n	800495e <Displ_Transmit+0x1a>

    Displ_Select();
 8004968:	f7ff ffc2 	bl	80048f0 <Displ_Select>
    HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	461a      	mov	r2, r3
 8004970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004978:	f001 fc8a 	bl	8006290 <HAL_GPIO_WritePin>

    if (isTouchGFXBuffer){
 800497c:	79bb      	ldrb	r3, [r7, #6]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
        uint32_t *limit=(uint32_t*)(data+dataSize);
 8004982:	88bb      	ldrh	r3, [r7, #4]
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	4413      	add	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	e00b      	b.n	80049a8 <Displ_Transmit+0x64>
            *data32=__REV16(*data32);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	ba5b      	rev16	r3, r3
 800499a:	60bb      	str	r3, [r7, #8]
  return result;
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	601a      	str	r2, [r3, #0]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	3304      	adds	r3, #4
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d3ef      	bcc.n	8004990 <Displ_Transmit+0x4c>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
        Displ_SpiAvailable=0;
        HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
        if (dataSize<DISPL_DMA_CUTOFF) {
 80049b0:	88bb      	ldrh	r3, [r7, #4]
 80049b2:	2b13      	cmp	r3, #19
 80049b4:	d80d      	bhi.n	80049d2 <Displ_Transmit+0x8e>
#endif //DISPLAY_SPI_DMA_MODE
            Displ_SpiAvailable=0;
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <Displ_Transmit+0xa8>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 80049bc:	88ba      	ldrh	r2, [r7, #4]
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	6839      	ldr	r1, [r7, #0]
 80049c4:	480a      	ldr	r0, [pc, #40]	; (80049f0 <Displ_Transmit+0xac>)
 80049c6:	f004 f84e 	bl	8008a66 <HAL_SPI_Transmit>
            Displ_SpiAvailable=1;
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <Displ_Transmit+0xa8>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]
            Displ_SpiAvailable=0;
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
        }
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
    }
 80049d0:	e008      	b.n	80049e4 <Displ_Transmit+0xa0>
            Displ_SpiAvailable=0;
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <Displ_Transmit+0xa8>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 80049d8:	88bb      	ldrh	r3, [r7, #4]
 80049da:	461a      	mov	r2, r3
 80049dc:	6839      	ldr	r1, [r7, #0]
 80049de:	4804      	ldr	r0, [pc, #16]	; (80049f0 <Displ_Transmit+0xac>)
 80049e0:	f004 f9b6 	bl	8008d50 <HAL_SPI_Transmit_DMA>
    }
 80049e4:	bf00      	nop
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000058 	.word	0x20000058
 80049f0:	20001f44 	.word	0x20001f44

080049f4 <Displ_WriteCommand>:


/**********************************
 * @BRIEF   transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	71fb      	strb	r3, [r7, #7]
    Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 80049fe:	1df9      	adds	r1, r7, #7
 8004a00:	2300      	movs	r3, #0
 8004a02:	2201      	movs	r2, #1
 8004a04:	2000      	movs	r0, #0
 8004a06:	f7ff ff9d 	bl	8004944 <Displ_Transmit>
}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <Displ_WriteData>:
 * @BRIEF   transmit a set of data in a SPI_DATA format
 * @PARAM   data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	71fb      	strb	r3, [r7, #7]
    if (buff_size==0) return;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d007      	beq.n	8004a36 <Displ_WriteData+0x24>
    Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	2001      	movs	r0, #1
 8004a30:	f7ff ff88 	bl	8004944 <Displ_Transmit>
 8004a34:	e000      	b.n	8004a38 <Displ_WriteData+0x26>
    if (buff_size==0) return;
 8004a36:	bf00      	nop
}
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <ILI9XXX_Init>:


/**********************************
 * @brief   ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
    Displ_Select();
 8004a44:	f7ff ff54 	bl	80048f0 <Displ_Select>

    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a52:	f001 fc1d 	bl	8006290 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8004a56:	2001      	movs	r0, #1
 8004a58:	f000 ff4c 	bl	80058f4 <HAL_Delay>
    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a66:	f001 fc13 	bl	8006290 <HAL_GPIO_WritePin>
    HAL_Delay(150);
 8004a6a:	2096      	movs	r0, #150	; 0x96
 8004a6c:	f000 ff42 	bl	80058f4 <HAL_Delay>
        Displ_WriteData(data,3);
    #endif
*/


    Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8004a70:	203a      	movs	r0, #58	; 0x3a
 8004a72:	f7ff ffbf 	bl	80049f4 <Displ_WriteCommand>
#ifdef Z_RGB666
    Displ_WriteData((uint8_t *)"\x66",1,0);     // RGB666
#endif
#ifdef Z_RGB565
    Displ_WriteData((uint8_t *)"\x55",1,0);     // RGB565
 8004a76:	2200      	movs	r2, #0
 8004a78:	2101      	movs	r1, #1
 8004a7a:	4810      	ldr	r0, [pc, #64]	; (8004abc <ILI9XXX_Init+0x7c>)
 8004a7c:	f7ff ffc9 	bl	8004a12 <Displ_WriteData>
#endif
    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004a80:	20b0      	movs	r0, #176	; 0xb0
 8004a82:	f7ff ffb7 	bl	80049f4 <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004a86:	2200      	movs	r2, #0
 8004a88:	2101      	movs	r1, #1
 8004a8a:	480d      	ldr	r0, [pc, #52]	; (8004ac0 <ILI9XXX_Init+0x80>)
 8004a8c:	f7ff ffc1 	bl	8004a12 <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004a90:	20b0      	movs	r0, #176	; 0xb0
 8004a92:	f7ff ffaf 	bl	80049f4 <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004a96:	2200      	movs	r2, #0
 8004a98:	2101      	movs	r1, #1
 8004a9a:	4809      	ldr	r0, [pc, #36]	; (8004ac0 <ILI9XXX_Init+0x80>)
 8004a9c:	f7ff ffb9 	bl	8004a12 <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8004aa0:	2011      	movs	r0, #17
 8004aa2:	f7ff ffa7 	bl	80049f4 <Displ_WriteCommand>
    HAL_Delay(120);
 8004aa6:	2078      	movs	r0, #120	; 0x78
 8004aa8:	f000 ff24 	bl	80058f4 <HAL_Delay>

    Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8004aac:	2029      	movs	r0, #41	; 0x29
 8004aae:	f7ff ffa1 	bl	80049f4 <Displ_WriteCommand>
    HAL_Delay(5);
 8004ab2:	2005      	movs	r0, #5
 8004ab4:	f000 ff1e 	bl	80058f4 <HAL_Delay>

}
 8004ab8:	bf00      	nop
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	0800bb88 	.word	0x0800bb88
 8004ac0:	0800bb8c 	.word	0x0800bb8c

08004ac4 <Displ_SetAddressWindow>:
 *          information
 * @param  x1,y1,x2,y2 top left and bottom
 *                     right corner of the area
 *                     to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4604      	mov	r4, r0
 8004acc:	4608      	mov	r0, r1
 8004ace:	4611      	mov	r1, r2
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4623      	mov	r3, r4
 8004ad4:	80fb      	strh	r3, [r7, #6]
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	80bb      	strh	r3, [r7, #4]
 8004ada:	460b      	mov	r3, r1
 8004adc:	807b      	strh	r3, [r7, #2]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	803b      	strh	r3, [r7, #0]
    static uint8_t data[4];

    ((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8004ae2:	887b      	ldrh	r3, [r7, #2]
 8004ae4:	061a      	lsls	r2, r3, #24
 8004ae6:	887b      	ldrh	r3, [r7, #2]
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004aee:	431a      	orrs	r2, r3
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	4313      	orrs	r3, r2
 8004af8:	88fa      	ldrh	r2, [r7, #6]
 8004afa:	0a12      	lsrs	r2, r2, #8
 8004afc:	b292      	uxth	r2, r2
 8004afe:	431a      	orrs	r2, r3
 8004b00:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <Displ_SetAddressWindow+0x90>)
 8004b02:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8004b04:	202a      	movs	r0, #42	; 0x2a
 8004b06:	f7ff ff75 	bl	80049f4 <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2104      	movs	r1, #4
 8004b0e:	4811      	ldr	r0, [pc, #68]	; (8004b54 <Displ_SetAddressWindow+0x90>)
 8004b10:	f7ff ff7f 	bl	8004a12 <Displ_WriteData>

    ((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8004b14:	883b      	ldrh	r3, [r7, #0]
 8004b16:	061a      	lsls	r2, r3, #24
 8004b18:	883b      	ldrh	r3, [r7, #0]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b20:	431a      	orrs	r2, r3
 8004b22:	88bb      	ldrh	r3, [r7, #4]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	88ba      	ldrh	r2, [r7, #4]
 8004b2c:	0a12      	lsrs	r2, r2, #8
 8004b2e:	b292      	uxth	r2, r2
 8004b30:	431a      	orrs	r2, r3
 8004b32:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <Displ_SetAddressWindow+0x90>)
 8004b34:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8004b36:	202b      	movs	r0, #43	; 0x2b
 8004b38:	f7ff ff5c 	bl	80049f4 <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2104      	movs	r1, #4
 8004b40:	4804      	ldr	r0, [pc, #16]	; (8004b54 <Displ_SetAddressWindow+0x90>)
 8004b42:	f7ff ff66 	bl	8004a12 <Displ_WriteData>
    Displ_WriteCommand(ILI9XXX_MEMWR);
 8004b46:	202c      	movs	r0, #44	; 0x2c
 8004b48:	f7ff ff54 	bl	80049f4 <Displ_WriteCommand>
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd90      	pop	{r4, r7, pc}
 8004b54:	200029e4 	.word	0x200029e4

08004b58 <Displ_Init>:

/*****************************************************
 * @brief               first display initialization.
 * @param   orientation display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
    if (TOUCH_SPI==DISPL_SPI){                                                  // if touch and display share the same SPI port
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);      // unselect display (will be selected at writing time)
 8004b62:	2201      	movs	r2, #1
 8004b64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b6c:	f001 fb90 	bl	8006290 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch (will be selected at writing time)
 8004b70:	2201      	movs	r2, #1
 8004b72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b76:	4806      	ldr	r0, [pc, #24]	; (8004b90 <Displ_Init+0x38>)
 8004b78:	f001 fb8a 	bl	8006290 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
        SET_DISPL_SPI_BAUDRATE;
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);    // select touch
        SET_TOUCH_SPI_BAUDRATE;
    }
    ILI9XXX_Init();
 8004b7c:	f7ff ff60 	bl	8004a40 <ILI9XXX_Init>
    Displ_Orientation(orientation);
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f806 	bl	8004b94 <Displ_Orientation>
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	48000400 	.word	0x48000400

08004b94 <Displ_Orientation>:

/**********************************************
 * @brief       set orientation of the display
 * @param   m   orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	71fb      	strb	r3, [r7, #7]
    static uint8_t data[1];
    switch(orientation) {
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d837      	bhi.n	8004c14 <Displ_Orientation+0x80>
 8004ba4:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <Displ_Orientation+0x18>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bd3 	.word	0x08004bd3
 8004bb4:	08004be9 	.word	0x08004be9
 8004bb8:	08004bff 	.word	0x08004bff
        case Displ_Orientat_0:
            data[0]=ILI9XXX_MADCTL_0DEG;
 8004bbc:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <Displ_Orientation+0xa0>)
 8004bbe:	2288      	movs	r2, #136	; 0x88
 8004bc0:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8004bc2:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <Displ_Orientation+0xa4>)
 8004bc4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004bc8:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 8004bca:	4b1c      	ldr	r3, [pc, #112]	; (8004c3c <Displ_Orientation+0xa8>)
 8004bcc:	22f0      	movs	r2, #240	; 0xf0
 8004bce:	801a      	strh	r2, [r3, #0]
            break;
 8004bd0:	e020      	b.n	8004c14 <Displ_Orientation+0x80>
        case Displ_Orientat_90:
            data[0]=ILI9XXX_MADCTL_90DEG;
 8004bd2:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <Displ_Orientation+0xa0>)
 8004bd4:	22e8      	movs	r2, #232	; 0xe8
 8004bd6:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 8004bd8:	4b17      	ldr	r3, [pc, #92]	; (8004c38 <Displ_Orientation+0xa4>)
 8004bda:	22f0      	movs	r2, #240	; 0xf0
 8004bdc:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 8004bde:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <Displ_Orientation+0xa8>)
 8004be0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004be4:	801a      	strh	r2, [r3, #0]
            break;
 8004be6:	e015      	b.n	8004c14 <Displ_Orientation+0x80>
        case Displ_Orientat_180:
            data[0]=ILI9XXX_MADCTL_180DEG;
 8004be8:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <Displ_Orientation+0xa0>)
 8004bea:	2248      	movs	r2, #72	; 0x48
 8004bec:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8004bee:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <Displ_Orientation+0xa4>)
 8004bf0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004bf4:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 8004bf6:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <Displ_Orientation+0xa8>)
 8004bf8:	22f0      	movs	r2, #240	; 0xf0
 8004bfa:	801a      	strh	r2, [r3, #0]
            break;
 8004bfc:	e00a      	b.n	8004c14 <Displ_Orientation+0x80>
        case Displ_Orientat_270:
            data[0]=ILI9XXX_MADCTL_270DEG;
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <Displ_Orientation+0xa0>)
 8004c00:	2228      	movs	r2, #40	; 0x28
 8004c02:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 8004c04:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <Displ_Orientation+0xa4>)
 8004c06:	22f0      	movs	r2, #240	; 0xf0
 8004c08:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 8004c0a:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <Displ_Orientation+0xa8>)
 8004c0c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c10:	801a      	strh	r2, [r3, #0]
            break;
 8004c12:	bf00      	nop
    }
    Displ_WriteCommand(ILI9XXX_MADCTL);
 8004c14:	2036      	movs	r0, #54	; 0x36
 8004c16:	f7ff feed 	bl	80049f4 <Displ_WriteCommand>
    Displ_WriteData(data,1,0);
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	4805      	ldr	r0, [pc, #20]	; (8004c34 <Displ_Orientation+0xa0>)
 8004c20:	f7ff fef7 	bl	8004a12 <Displ_WriteData>
    current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8004c24:	4a06      	ldr	r2, [pc, #24]	; (8004c40 <Displ_Orientation+0xac>)
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	7013      	strb	r3, [r2, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	200029e8 	.word	0x200029e8
 8004c38:	200021e0 	.word	0x200021e0
 8004c3c:	200021de 	.word	0x200021de
 8004c40:	200021dc 	.word	0x200021dc

08004c44 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a05      	ldr	r2, [pc, #20]	; (8004c68 <HAL_SPI_ErrorCallback+0x24>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d102      	bne.n	8004c5c <HAL_SPI_ErrorCallback+0x18>
        Displ_SpiAvailable=1;
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_SPI_ErrorCallback+0x28>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	701a      	strb	r2, [r3, #0]
    }
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	40003800 	.word	0x40003800
 8004c6c:	20000058 	.word	0x20000058

08004c70 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a05      	ldr	r2, [pc, #20]	; (8004c94 <HAL_SPI_TxCpltCallback+0x24>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d102      	bne.n	8004c88 <HAL_SPI_TxCpltCallback+0x18>
        Displ_SpiAvailable=1;
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <HAL_SPI_TxCpltCallback+0x28>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	701a      	strb	r2, [r3, #0]
    #ifdef DISPLAY_USING_TOUCHGFX
        DisplayDriver_TransferCompleteCallback();
    #endif

    }
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40003800 	.word	0x40003800
 8004c98:	20000058 	.word	0x20000058

08004c9c <Displ_FillArea>:
/*****************************
 * @brief   fill a rectangle with a color
 * @param   x, y    top left corner of the rectangle
 *          w, h    width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b08b      	sub	sp, #44	; 0x2c
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4623      	mov	r3, r4
 8004cac:	80fb      	strh	r3, [r7, #6]
 8004cae:	4603      	mov	r3, r0
 8004cb0:	80bb      	strh	r3, [r7, #4]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	807b      	strh	r3, [r7, #2]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	803b      	strh	r3, [r7, #0]
 * -    swap buffers
 */

    uint32_t k,x1,y1,area,times;

    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	4a4f      	ldr	r2, [pc, #316]	; (8004dfc <Displ_FillArea+0x160>)
 8004cbe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	f280 8096 	bge.w	8004df4 <Displ_FillArea+0x158>
 8004cc8:	88bb      	ldrh	r3, [r7, #4]
 8004cca:	4a4d      	ldr	r2, [pc, #308]	; (8004e00 <Displ_FillArea+0x164>)
 8004ccc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	f280 808f 	bge.w	8004df4 <Displ_FillArea+0x158>
 8004cd6:	887b      	ldrh	r3, [r7, #2]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 808b 	beq.w	8004df4 <Displ_FillArea+0x158>
 8004cde:	883b      	ldrh	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 8087 	beq.w	8004df4 <Displ_FillArea+0x158>

    x1=x + w - 1;
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	887b      	ldrh	r3, [r7, #2]
 8004cea:	4413      	add	r3, r2
 8004cec:	3b01      	subs	r3, #1
 8004cee:	623b      	str	r3, [r7, #32]
    if (x1 > _width) {
 8004cf0:	4b42      	ldr	r3, [pc, #264]	; (8004dfc <Displ_FillArea+0x160>)
 8004cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d903      	bls.n	8004d06 <Displ_FillArea+0x6a>
        x1=_width;
 8004cfe:	4b3f      	ldr	r3, [pc, #252]	; (8004dfc <Displ_FillArea+0x160>)
 8004d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d04:	623b      	str	r3, [r7, #32]
    }

    y1=y + h - 1;
 8004d06:	88ba      	ldrh	r2, [r7, #4]
 8004d08:	883b      	ldrh	r3, [r7, #0]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	61fb      	str	r3, [r7, #28]
    if (y1 > _height) {
 8004d10:	4b3b      	ldr	r3, [pc, #236]	; (8004e00 <Displ_FillArea+0x164>)
 8004d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d16:	461a      	mov	r2, r3
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d903      	bls.n	8004d26 <Displ_FillArea+0x8a>
        y1=_height;
 8004d1e:	4b38      	ldr	r3, [pc, #224]	; (8004e00 <Displ_FillArea+0x164>)
 8004d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d24:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

    uint32_t data32;

    data32=(color>>8) | (color<<8) | (color<<24);   // supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8004d26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d28:	0a1b      	lsrs	r3, r3, #8
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d30:	021b      	lsls	r3, r3, #8
 8004d32:	431a      	orrs	r2, r3
 8004d34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d36:	061b      	lsls	r3, r3, #24
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
    area=((y1-y+1)*(x1-x+1));                       // area to fill in 16bit pixels
 8004d3c:	88bb      	ldrh	r3, [r7, #4]
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	3301      	adds	r3, #1
 8004d44:	88fa      	ldrh	r2, [r7, #6]
 8004d46:	6a39      	ldr	r1, [r7, #32]
 8004d48:	1a8a      	subs	r2, r1, r2
 8004d4a:	3201      	adds	r2, #1
 8004d4c:	fb02 f303 	mul.w	r3, r2, r3
 8004d50:	60fb      	str	r3, [r7, #12]
    uint32_t *buf32Pos=(uint32_t *)dispBuffer;      //dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8004d52:	4b2c      	ldr	r3, [pc, #176]	; (8004e04 <Displ_FillArea+0x168>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	617b      	str	r3, [r7, #20]
    if (area<(SIZEBUF>>1))                          // if area is smaller than dispBuffer
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d5e:	d204      	bcs.n	8004d6a <Displ_FillArea+0xce>
        times=(area>>1)+1;                          // number of times data32 has to be loaded into buffer
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	3301      	adds	r3, #1
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	e002      	b.n	8004d70 <Displ_FillArea+0xd4>
    else
        times=(SIZEBUF>>2);                         // dispBuffer size as 32bit-words
 8004d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d6e:	61bb      	str	r3, [r7, #24]
    for (k = 0; k < times; k++)
 8004d70:	2300      	movs	r3, #0
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
 8004d74:	e007      	b.n	8004d86 <Displ_FillArea+0xea>
        *(buf32Pos++)=data32;                       // loads buffer moving 32bit-words
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	1d1a      	adds	r2, r3, #4
 8004d7a:	617a      	str	r2, [r7, #20]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	601a      	str	r2, [r3, #0]
    for (k = 0; k < times; k++)
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	3301      	adds	r3, #1
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
 8004d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d3f3      	bcc.n	8004d76 <Displ_FillArea+0xda>
    }
    datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
    Displ_SetAddressWindow(x, y, x1, y1);
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	88b9      	ldrh	r1, [r7, #4]
 8004d98:	88f8      	ldrh	r0, [r7, #6]
 8004d9a:	f7ff fe93 	bl	8004ac4 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
    times=(area>>(BUFLEVEL-1));                     //how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	0a5b      	lsrs	r3, r3, #9
 8004da2:	61bb      	str	r3, [r7, #24]
    for  (k=0;k<times;k++) {
 8004da4:	2300      	movs	r3, #0
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
 8004da8:	e00a      	b.n	8004dc0 <Displ_FillArea+0x124>
        Displ_WriteData(dispBuffer,SIZEBUF,0);
 8004daa:	4b16      	ldr	r3, [pc, #88]	; (8004e04 <Displ_FillArea+0x168>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fe2c 	bl	8004a12 <Displ_WriteData>
    for  (k=0;k<times;k++) {
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d3f0      	bcc.n	8004daa <Displ_FillArea+0x10e>
    }
    Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8004dc8:	4b0e      	ldr	r3, [pc, #56]	; (8004e04 <Displ_FillArea+0x168>)
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	005a      	lsls	r2, r3, #1
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	029b      	lsls	r3, r3, #10
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f7ff fe1a 	bl	8004a12 <Displ_WriteData>
    }
    Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8004dde:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <Displ_FillArea+0x168>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a09      	ldr	r2, [pc, #36]	; (8004e08 <Displ_FillArea+0x16c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d101      	bne.n	8004dec <Displ_FillArea+0x150>
 8004de8:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <Displ_FillArea+0x170>)
 8004dea:	e000      	b.n	8004dee <Displ_FillArea+0x152>
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <Displ_FillArea+0x16c>)
 8004dee:	4a05      	ldr	r2, [pc, #20]	; (8004e04 <Displ_FillArea+0x168>)
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e000      	b.n	8004df6 <Displ_FillArea+0x15a>
    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004df4:	bf00      	nop

}
 8004df6:	372c      	adds	r7, #44	; 0x2c
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd90      	pop	{r4, r7, pc}
 8004dfc:	200021de 	.word	0x200021de
 8004e00:	200021e0 	.word	0x200021e0
 8004e04:	2000005c 	.word	0x2000005c
 8004e08:	200021e4 	.word	0x200021e4
 8004e0c:	200025e4 	.word	0x200025e4

08004e10 <Displ_Pixel>:
/***********************
 * @brief   print a single pixel
 * @params  x, y    pixel position on display
 *          color   ... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	4603      	mov	r3, r0
 8004e18:	80fb      	strh	r3, [r7, #6]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	80bb      	strh	r3, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	4a0b      	ldr	r2, [pc, #44]	; (8004e54 <Displ_Pixel+0x44>)
 8004e26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	da0e      	bge.n	8004e4c <Displ_Pixel+0x3c>
 8004e2e:	88bb      	ldrh	r3, [r7, #4]
 8004e30:	4a09      	ldr	r2, [pc, #36]	; (8004e58 <Displ_Pixel+0x48>)
 8004e32:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004e36:	4293      	cmp	r3, r2
 8004e38:	da08      	bge.n	8004e4c <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8004e3a:	88b9      	ldrh	r1, [r7, #4]
 8004e3c:	88f8      	ldrh	r0, [r7, #6]
 8004e3e:	887b      	ldrh	r3, [r7, #2]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	2301      	movs	r3, #1
 8004e44:	2201      	movs	r2, #1
 8004e46:	f7ff ff29 	bl	8004c9c <Displ_FillArea>
 8004e4a:	e000      	b.n	8004e4e <Displ_Pixel+0x3e>
        return;
 8004e4c:	bf00      	nop

}
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	200021de 	.word	0x200021de
 8004e58:	200021e0 	.word	0x200021e0

08004e5c <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4604      	mov	r4, r0
 8004e64:	4608      	mov	r0, r1
 8004e66:	4611      	mov	r1, r2
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4623      	mov	r3, r4
 8004e6c:	80fb      	strh	r3, [r7, #6]
 8004e6e:	4603      	mov	r3, r0
 8004e70:	80bb      	strh	r3, [r7, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	807b      	strh	r3, [r7, #2]
 8004e76:	4613      	mov	r3, r2
 8004e78:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8004e7a:	887b      	ldrh	r3, [r7, #2]
 8004e7c:	f1c3 0301 	rsb	r3, r3, #1
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8004e84:	2301      	movs	r3, #1
 8004e86:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8004e88:	887b      	ldrh	r3, [r7, #2]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	03d2      	lsls	r2, r2, #15
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8004e9a:	887b      	ldrh	r3, [r7, #2]
 8004e9c:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8004e9e:	88f8      	ldrh	r0, [r7, #6]
 8004ea0:	88ba      	ldrh	r2, [r7, #4]
 8004ea2:	887b      	ldrh	r3, [r7, #2]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	883a      	ldrh	r2, [r7, #0]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	f7ff ffb0 	bl	8004e10 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8004eb0:	88f8      	ldrh	r0, [r7, #6]
 8004eb2:	88ba      	ldrh	r2, [r7, #4]
 8004eb4:	887b      	ldrh	r3, [r7, #2]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	883a      	ldrh	r2, [r7, #0]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	f7ff ffa7 	bl	8004e10 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8004ec2:	88fa      	ldrh	r2, [r7, #6]
 8004ec4:	887b      	ldrh	r3, [r7, #2]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	88b9      	ldrh	r1, [r7, #4]
 8004ecc:	883a      	ldrh	r2, [r7, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff ff9e 	bl	8004e10 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 8004ed4:	88fa      	ldrh	r2, [r7, #6]
 8004ed6:	887b      	ldrh	r3, [r7, #2]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	88b9      	ldrh	r1, [r7, #4]
 8004ede:	883a      	ldrh	r2, [r7, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff ff95 	bl	8004e10 <Displ_Pixel>

    while (x<y) {
 8004ee6:	e081      	b.n	8004fec <Displ_drawCircle+0x190>
        if (f >= 0) {
 8004ee8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	db0e      	blt.n	8004f0e <Displ_drawCircle+0xb2>
            y--;
 8004ef0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8004efc:	8a7b      	ldrh	r3, [r7, #18]
 8004efe:	3302      	adds	r3, #2
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8004f04:	8afa      	ldrh	r2, [r7, #22]
 8004f06:	8a7b      	ldrh	r3, [r7, #18]
 8004f08:	4413      	add	r3, r2
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8004f0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3301      	adds	r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8004f1a:	8abb      	ldrh	r3, [r7, #20]
 8004f1c:	3302      	adds	r3, #2
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8004f22:	8afa      	ldrh	r2, [r7, #22]
 8004f24:	8abb      	ldrh	r3, [r7, #20]
 8004f26:	4413      	add	r3, r2
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8004f2c:	88fa      	ldrh	r2, [r7, #6]
 8004f2e:	8a3b      	ldrh	r3, [r7, #16]
 8004f30:	4413      	add	r3, r2
 8004f32:	b298      	uxth	r0, r3
 8004f34:	88ba      	ldrh	r2, [r7, #4]
 8004f36:	89fb      	ldrh	r3, [r7, #14]
 8004f38:	4413      	add	r3, r2
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	883a      	ldrh	r2, [r7, #0]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	f7ff ff66 	bl	8004e10 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8004f44:	88fa      	ldrh	r2, [r7, #6]
 8004f46:	8a3b      	ldrh	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	b298      	uxth	r0, r3
 8004f4c:	88ba      	ldrh	r2, [r7, #4]
 8004f4e:	89fb      	ldrh	r3, [r7, #14]
 8004f50:	4413      	add	r3, r2
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	883a      	ldrh	r2, [r7, #0]
 8004f56:	4619      	mov	r1, r3
 8004f58:	f7ff ff5a 	bl	8004e10 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8004f5c:	88fa      	ldrh	r2, [r7, #6]
 8004f5e:	8a3b      	ldrh	r3, [r7, #16]
 8004f60:	4413      	add	r3, r2
 8004f62:	b298      	uxth	r0, r3
 8004f64:	88ba      	ldrh	r2, [r7, #4]
 8004f66:	89fb      	ldrh	r3, [r7, #14]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	883a      	ldrh	r2, [r7, #0]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	f7ff ff4e 	bl	8004e10 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8004f74:	88fa      	ldrh	r2, [r7, #6]
 8004f76:	8a3b      	ldrh	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	b298      	uxth	r0, r3
 8004f7c:	88ba      	ldrh	r2, [r7, #4]
 8004f7e:	89fb      	ldrh	r3, [r7, #14]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	883a      	ldrh	r2, [r7, #0]
 8004f86:	4619      	mov	r1, r3
 8004f88:	f7ff ff42 	bl	8004e10 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8004f8c:	88fa      	ldrh	r2, [r7, #6]
 8004f8e:	89fb      	ldrh	r3, [r7, #14]
 8004f90:	4413      	add	r3, r2
 8004f92:	b298      	uxth	r0, r3
 8004f94:	88ba      	ldrh	r2, [r7, #4]
 8004f96:	8a3b      	ldrh	r3, [r7, #16]
 8004f98:	4413      	add	r3, r2
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	883a      	ldrh	r2, [r7, #0]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	f7ff ff36 	bl	8004e10 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8004fa4:	88fa      	ldrh	r2, [r7, #6]
 8004fa6:	89fb      	ldrh	r3, [r7, #14]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	b298      	uxth	r0, r3
 8004fac:	88ba      	ldrh	r2, [r7, #4]
 8004fae:	8a3b      	ldrh	r3, [r7, #16]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	883a      	ldrh	r2, [r7, #0]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f7ff ff2a 	bl	8004e10 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8004fbc:	88fa      	ldrh	r2, [r7, #6]
 8004fbe:	89fb      	ldrh	r3, [r7, #14]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	b298      	uxth	r0, r3
 8004fc4:	88ba      	ldrh	r2, [r7, #4]
 8004fc6:	8a3b      	ldrh	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	883a      	ldrh	r2, [r7, #0]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f7ff ff1e 	bl	8004e10 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8004fd4:	88fa      	ldrh	r2, [r7, #6]
 8004fd6:	89fb      	ldrh	r3, [r7, #14]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	b298      	uxth	r0, r3
 8004fdc:	88ba      	ldrh	r2, [r7, #4]
 8004fde:	8a3b      	ldrh	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	883a      	ldrh	r2, [r7, #0]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	f7ff ff12 	bl	8004e10 <Displ_Pixel>
    while (x<y) {
 8004fec:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004ff0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	f6ff af77 	blt.w	8004ee8 <Displ_drawCircle+0x8c>
    }
}
 8004ffa:	bf00      	nop
 8004ffc:	bf00      	nop
 8004ffe:	371c      	adds	r7, #28
 8005000:	46bd      	mov	sp, r7
 8005002:	bd90      	pop	{r4, r7, pc}

08005004 <Displ_CLS>:

/*****************
 * @brief   clear display with a color.
 * @param   bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af02      	add	r7, sp, #8
 800500a:	4603      	mov	r3, r0
 800500c:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(0, 0, _width, _height, bgcolor);
 800500e:	4b09      	ldr	r3, [pc, #36]	; (8005034 <Displ_CLS+0x30>)
 8005010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005014:	b29a      	uxth	r2, r3
 8005016:	4b08      	ldr	r3, [pc, #32]	; (8005038 <Displ_CLS+0x34>)
 8005018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800501c:	b299      	uxth	r1, r3
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	460b      	mov	r3, r1
 8005024:	2100      	movs	r1, #0
 8005026:	2000      	movs	r0, #0
 8005028:	f7ff fe38 	bl	8004c9c <Displ_FillArea>
}
 800502c:	bf00      	nop
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	200021de 	.word	0x200021de
 8005038:	200021e0 	.word	0x200021e0

0800503c <Displ_Line>:

/************************************************************************
 * @brief   draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800503c:	b590      	push	{r4, r7, lr}
 800503e:	b08b      	sub	sp, #44	; 0x2c
 8005040:	af02      	add	r7, sp, #8
 8005042:	4604      	mov	r4, r0
 8005044:	4608      	mov	r0, r1
 8005046:	4611      	mov	r1, r2
 8005048:	461a      	mov	r2, r3
 800504a:	4623      	mov	r3, r4
 800504c:	80fb      	strh	r3, [r7, #6]
 800504e:	4603      	mov	r3, r0
 8005050:	80bb      	strh	r3, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	807b      	strh	r3, [r7, #2]
 8005056:	4613      	mov	r3, r2
 8005058:	803b      	strh	r3, [r7, #0]
    int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 800505a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800505e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005062:	429a      	cmp	r2, r3
 8005064:	d123      	bne.n	80050ae <Displ_Line+0x72>
        if (y1>y0){
 8005066:	f9b7 2000 	ldrsh.w	r2, [r7]
 800506a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800506e:	429a      	cmp	r2, r3
 8005070:	dd0e      	ble.n	8005090 <Displ_Line+0x54>
            Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8005072:	88f8      	ldrh	r0, [r7, #6]
 8005074:	88b9      	ldrh	r1, [r7, #4]
 8005076:	883a      	ldrh	r2, [r7, #0]
 8005078:	88bb      	ldrh	r3, [r7, #4]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	b29b      	uxth	r3, r3
 800507e:	3301      	adds	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	4613      	mov	r3, r2
 8005088:	2201      	movs	r2, #1
 800508a:	f7ff fe07 	bl	8004c9c <Displ_FillArea>
        }
        else {
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
        }
        return;
 800508e:	e103      	b.n	8005298 <Displ_Line+0x25c>
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8005090:	88f8      	ldrh	r0, [r7, #6]
 8005092:	8839      	ldrh	r1, [r7, #0]
 8005094:	88ba      	ldrh	r2, [r7, #4]
 8005096:	883b      	ldrh	r3, [r7, #0]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	b29b      	uxth	r3, r3
 800509c:	3301      	adds	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	4613      	mov	r3, r2
 80050a6:	2201      	movs	r2, #1
 80050a8:	f7ff fdf8 	bl	8004c9c <Displ_FillArea>
        return;
 80050ac:	e0f4      	b.n	8005298 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 80050ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80050b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d121      	bne.n	80050fe <Displ_Line+0xc2>
        if (x1>x0)
 80050ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80050be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	dd0d      	ble.n	80050e2 <Displ_Line+0xa6>
            Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 80050c6:	88f8      	ldrh	r0, [r7, #6]
 80050c8:	88b9      	ldrh	r1, [r7, #4]
 80050ca:	887a      	ldrh	r2, [r7, #2]
 80050cc:	88fb      	ldrh	r3, [r7, #6]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3301      	adds	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	2301      	movs	r3, #1
 80050dc:	f7ff fdde 	bl	8004c9c <Displ_FillArea>
        else
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
        return;
 80050e0:	e0da      	b.n	8005298 <Displ_Line+0x25c>
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 80050e2:	8878      	ldrh	r0, [r7, #2]
 80050e4:	8839      	ldrh	r1, [r7, #0]
 80050e6:	88fa      	ldrh	r2, [r7, #6]
 80050e8:	887b      	ldrh	r3, [r7, #2]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	3301      	adds	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	2301      	movs	r3, #1
 80050f8:	f7ff fdd0 	bl	8004c9c <Displ_FillArea>
        return;
 80050fc:	e0cc      	b.n	8005298 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 80050fe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005102:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005106:	429a      	cmp	r2, r3
 8005108:	dd05      	ble.n	8005116 <Displ_Line+0xda>
 800510a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800510e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	e004      	b.n	8005120 <Displ_Line+0xe4>
 8005116:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800511a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800511e:	1ad2      	subs	r2, r2, r3
 8005120:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005128:	4299      	cmp	r1, r3
 800512a:	dd05      	ble.n	8005138 <Displ_Line+0xfc>
 800512c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005134:	1acb      	subs	r3, r1, r3
 8005136:	e004      	b.n	8005142 <Displ_Line+0x106>
 8005138:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800513c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005140:	1acb      	subs	r3, r1, r3
 8005142:	429a      	cmp	r2, r3
 8005144:	bfcc      	ite	gt
 8005146:	2301      	movgt	r3, #1
 8005148:	2300      	movle	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 800514e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00b      	beq.n	800516e <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 8005156:	88fb      	ldrh	r3, [r7, #6]
 8005158:	827b      	strh	r3, [r7, #18]
 800515a:	88bb      	ldrh	r3, [r7, #4]
 800515c:	80fb      	strh	r3, [r7, #6]
 800515e:	8a7b      	ldrh	r3, [r7, #18]
 8005160:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8005162:	887b      	ldrh	r3, [r7, #2]
 8005164:	823b      	strh	r3, [r7, #16]
 8005166:	883b      	ldrh	r3, [r7, #0]
 8005168:	807b      	strh	r3, [r7, #2]
 800516a:	8a3b      	ldrh	r3, [r7, #16]
 800516c:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800516e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005172:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005176:	429a      	cmp	r2, r3
 8005178:	dd0b      	ble.n	8005192 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	81fb      	strh	r3, [r7, #14]
 800517e:	887b      	ldrh	r3, [r7, #2]
 8005180:	80fb      	strh	r3, [r7, #6]
 8005182:	89fb      	ldrh	r3, [r7, #14]
 8005184:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8005186:	88bb      	ldrh	r3, [r7, #4]
 8005188:	81bb      	strh	r3, [r7, #12]
 800518a:	883b      	ldrh	r3, [r7, #0]
 800518c:	80bb      	strh	r3, [r7, #4]
 800518e:	89bb      	ldrh	r3, [r7, #12]
 8005190:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8005192:	887a      	ldrh	r2, [r7, #2]
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	b29b      	uxth	r3, r3
 800519a:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 800519c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051a0:	105b      	asrs	r3, r3, #1
 80051a2:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 80051a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80051a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	da07      	bge.n	80051c0 <Displ_Line+0x184>
        dy = y1-y0;
 80051b0:	883a      	ldrh	r2, [r7, #0]
 80051b2:	88bb      	ldrh	r3, [r7, #4]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 80051ba:	2301      	movs	r3, #1
 80051bc:	837b      	strh	r3, [r7, #26]
 80051be:	e007      	b.n	80051d0 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 80051c0:	88ba      	ldrh	r2, [r7, #4]
 80051c2:	883b      	ldrh	r3, [r7, #0]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 80051ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051ce:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 80051d0:	2300      	movs	r3, #0
 80051d2:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	83bb      	strh	r3, [r7, #28]
 80051d8:	e03a      	b.n	8005250 <Displ_Line+0x214>
        l++;
 80051da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3301      	adds	r3, #1
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 80051e6:	8b3a      	ldrh	r2, [r7, #24]
 80051e8:	8afb      	ldrh	r3, [r7, #22]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 80051f0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	da25      	bge.n	8005244 <Displ_Line+0x208>
            if (steep) {
 80051f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d009      	beq.n	8005214 <Displ_Line+0x1d8>
                Displ_FillArea(y0, x0, 1, l, color);
 8005200:	88b8      	ldrh	r0, [r7, #4]
 8005202:	88f9      	ldrh	r1, [r7, #6]
 8005204:	8bfa      	ldrh	r2, [r7, #30]
 8005206:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	4613      	mov	r3, r2
 800520c:	2201      	movs	r2, #1
 800520e:	f7ff fd45 	bl	8004c9c <Displ_FillArea>
 8005212:	e007      	b.n	8005224 <Displ_Line+0x1e8>
            } else {
                Displ_FillArea(x0, y0, l, 1, color);
 8005214:	88f8      	ldrh	r0, [r7, #6]
 8005216:	88b9      	ldrh	r1, [r7, #4]
 8005218:	8bfa      	ldrh	r2, [r7, #30]
 800521a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	2301      	movs	r3, #1
 8005220:	f7ff fd3c 	bl	8004c9c <Displ_FillArea>
            }
            y0 += ystep;
 8005224:	88ba      	ldrh	r2, [r7, #4]
 8005226:	8b7b      	ldrh	r3, [r7, #26]
 8005228:	4413      	add	r3, r2
 800522a:	b29b      	uxth	r3, r3
 800522c:	80bb      	strh	r3, [r7, #4]
            l=0;
 800522e:	2300      	movs	r3, #0
 8005230:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8005232:	8bbb      	ldrh	r3, [r7, #28]
 8005234:	3301      	adds	r3, #1
 8005236:	b29b      	uxth	r3, r3
 8005238:	80fb      	strh	r3, [r7, #6]
            err += dx;
 800523a:	8b3a      	ldrh	r2, [r7, #24]
 800523c:	897b      	ldrh	r3, [r7, #10]
 800523e:	4413      	add	r3, r2
 8005240:	b29b      	uxth	r3, r3
 8005242:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8005244:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005248:	b29b      	uxth	r3, r3
 800524a:	3301      	adds	r3, #1
 800524c:	b29b      	uxth	r3, r3
 800524e:	83bb      	strh	r3, [r7, #28]
 8005250:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005254:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005258:	429a      	cmp	r2, r3
 800525a:	ddbe      	ble.n	80051da <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 800525c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d019      	beq.n	8005298 <Displ_Line+0x25c>
        if (steep) {
 8005264:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00b      	beq.n	8005284 <Displ_Line+0x248>
            Displ_FillArea(y0, x0, 1, l-1, color);
 800526c:	88b8      	ldrh	r0, [r7, #4]
 800526e:	88f9      	ldrh	r1, [r7, #6]
 8005270:	8bfb      	ldrh	r3, [r7, #30]
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	4613      	mov	r3, r2
 800527c:	2201      	movs	r2, #1
 800527e:	f7ff fd0d 	bl	8004c9c <Displ_FillArea>
 8005282:	e009      	b.n	8005298 <Displ_Line+0x25c>
        } else {
            Displ_FillArea(x0, y0, l-1,1, color);
 8005284:	88f8      	ldrh	r0, [r7, #6]
 8005286:	88b9      	ldrh	r1, [r7, #4]
 8005288:	8bfb      	ldrh	r3, [r7, #30]
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	2301      	movs	r3, #1
 8005294:	f7ff fd02 	bl	8004c9c <Displ_FillArea>
        }
    }
}
 8005298:	3724      	adds	r7, #36	; 0x24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd90      	pop	{r4, r7, pc}

0800529e <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800529e:	b590      	push	{r4, r7, lr}
 80052a0:	b091      	sub	sp, #68	; 0x44
 80052a2:	af02      	add	r7, sp, #8
 80052a4:	4604      	mov	r4, r0
 80052a6:	4608      	mov	r0, r1
 80052a8:	4611      	mov	r1, r2
 80052aa:	461a      	mov	r2, r3
 80052ac:	4623      	mov	r3, r4
 80052ae:	80fb      	strh	r3, [r7, #6]
 80052b0:	4603      	mov	r3, r0
 80052b2:	80bb      	strh	r3, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	807b      	strh	r3, [r7, #2]
 80052b8:	4613      	mov	r3, r2
 80052ba:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 80052bc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80052c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	dd0b      	ble.n	80052e0 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80052c8:	88bb      	ldrh	r3, [r7, #4]
 80052ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80052cc:	883b      	ldrh	r3, [r7, #0]
 80052ce:	80bb      	strh	r3, [r7, #4]
 80052d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052d2:	803b      	strh	r3, [r7, #0]
 80052d4:	88fb      	ldrh	r3, [r7, #6]
 80052d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80052d8:	887b      	ldrh	r3, [r7, #2]
 80052da:	80fb      	strh	r3, [r7, #6]
 80052dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052de:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 80052e0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80052e4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80052e8:	429a      	cmp	r2, r3
 80052ea:	dd0f      	ble.n	800530c <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 80052ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80052f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80052f2:	883b      	ldrh	r3, [r7, #0]
 80052f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80052f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052fa:	803b      	strh	r3, [r7, #0]
 80052fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005300:	843b      	strh	r3, [r7, #32]
 8005302:	887b      	ldrh	r3, [r7, #2]
 8005304:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005308:	8c3b      	ldrh	r3, [r7, #32]
 800530a:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 800530c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005310:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005314:	429a      	cmp	r2, r3
 8005316:	dd0b      	ble.n	8005330 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005318:	88bb      	ldrh	r3, [r7, #4]
 800531a:	83fb      	strh	r3, [r7, #30]
 800531c:	883b      	ldrh	r3, [r7, #0]
 800531e:	80bb      	strh	r3, [r7, #4]
 8005320:	8bfb      	ldrh	r3, [r7, #30]
 8005322:	803b      	strh	r3, [r7, #0]
 8005324:	88fb      	ldrh	r3, [r7, #6]
 8005326:	83bb      	strh	r3, [r7, #28]
 8005328:	887b      	ldrh	r3, [r7, #2]
 800532a:	80fb      	strh	r3, [r7, #6]
 800532c:	8bbb      	ldrh	r3, [r7, #28]
 800532e:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8005330:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005334:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005338:	429a      	cmp	r2, r3
 800533a:	d136      	bne.n	80053aa <Displ_fillTriangle+0x10c>
        a = b = x0;
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005340:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005342:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8005344:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005348:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800534c:	429a      	cmp	r2, r3
 800534e:	da02      	bge.n	8005356 <Displ_fillTriangle+0xb8>
 8005350:	887b      	ldrh	r3, [r7, #2]
 8005352:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005354:	e007      	b.n	8005366 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8005356:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800535a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800535e:	429a      	cmp	r2, r3
 8005360:	dd01      	ble.n	8005366 <Displ_fillTriangle+0xc8>
 8005362:	887b      	ldrh	r3, [r7, #2]
 8005364:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8005366:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800536a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800536e:	429a      	cmp	r2, r3
 8005370:	da03      	bge.n	800537a <Displ_fillTriangle+0xdc>
 8005372:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005376:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005378:	e008      	b.n	800538c <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 800537a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800537e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005382:	429a      	cmp	r2, r3
 8005384:	dd02      	ble.n	800538c <Displ_fillTriangle+0xee>
 8005386:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800538a:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 800538c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005390:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005394:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005398:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800539c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	4623      	mov	r3, r4
 80053a4:	f7ff fe4a 	bl	800503c <Displ_Line>
        return;
 80053a8:	e0d2      	b.n	8005550 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 80053aa:	887a      	ldrh	r2, [r7, #2]
 80053ac:	88fb      	ldrh	r3, [r7, #6]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 80053b4:	883a      	ldrh	r2, [r7, #0]
 80053b6:	88bb      	ldrh	r3, [r7, #4]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 80053be:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 80053ca:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80053ce:	88bb      	ldrh	r3, [r7, #4]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 80053d6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80053da:	887b      	ldrh	r3, [r7, #2]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	b29b      	uxth	r3, r3
 80053e0:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 80053e2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80053e6:	883b      	ldrh	r3, [r7, #0]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 80053ee:	2300      	movs	r3, #0
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80053f6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80053fa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80053fe:	429a      	cmp	r2, r3
 8005400:	d102      	bne.n	8005408 <Displ_fillTriangle+0x16a>
 8005402:	883b      	ldrh	r3, [r7, #0]
 8005404:	863b      	strh	r3, [r7, #48]	; 0x30
 8005406:	e003      	b.n	8005410 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8005408:	883b      	ldrh	r3, [r7, #0]
 800540a:	3b01      	subs	r3, #1
 800540c:	b29b      	uxth	r3, r3
 800540e:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8005410:	88bb      	ldrh	r3, [r7, #4]
 8005412:	867b      	strh	r3, [r7, #50]	; 0x32
 8005414:	e03d      	b.n	8005492 <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8005416:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800541a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800541c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005420:	b29a      	uxth	r2, r3
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	4413      	add	r3, r2
 8005426:	b29b      	uxth	r3, r3
 8005428:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 800542a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800542e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005430:	fb92 f3f3 	sdiv	r3, r2, r3
 8005434:	b29a      	uxth	r2, r3
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	4413      	add	r3, r2
 800543a:	b29b      	uxth	r3, r3
 800543c:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 800543e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005444:	4413      	add	r3, r2
 8005446:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005448:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800544c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800544e:	4413      	add	r3, r2
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005452:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005456:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800545a:	429a      	cmp	r2, r3
 800545c:	dd05      	ble.n	800546a <Displ_fillTriangle+0x1cc>
 800545e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005460:	81bb      	strh	r3, [r7, #12]
 8005462:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005464:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005466:	89bb      	ldrh	r3, [r7, #12]
 8005468:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 800546a:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 800546e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005472:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005476:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800547a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	4623      	mov	r3, r4
 8005482:	f7ff fddb 	bl	800503c <Displ_Line>
    for(y=y0; y<=last; y++) {
 8005486:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800548a:	b29b      	uxth	r3, r3
 800548c:	3301      	adds	r3, #1
 800548e:	b29b      	uxth	r3, r3
 8005490:	867b      	strh	r3, [r7, #50]	; 0x32
 8005492:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005496:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800549a:	429a      	cmp	r2, r3
 800549c:	ddbb      	ble.n	8005416 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 800549e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054a2:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80054a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80054aa:	1a8a      	subs	r2, r1, r2
 80054ac:	fb02 f303 	mul.w	r3, r2, r3
 80054b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 80054b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80054b6:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80054ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80054be:	1a8a      	subs	r2, r1, r2
 80054c0:	fb02 f303 	mul.w	r3, r2, r3
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 80054c6:	e03d      	b.n	8005544 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 80054c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80054cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	887b      	ldrh	r3, [r7, #2]
 80054d6:	4413      	add	r3, r2
 80054d8:	b29b      	uxth	r3, r3
 80054da:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 80054dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80054e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	88fb      	ldrh	r3, [r7, #6]
 80054ea:	4413      	add	r3, r2
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 80054f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f6:	4413      	add	r3, r2
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80054fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80054fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005500:	4413      	add	r3, r2
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005504:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005508:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800550c:	429a      	cmp	r2, r3
 800550e:	dd05      	ble.n	800551c <Displ_fillTriangle+0x27e>
 8005510:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005512:	81fb      	strh	r3, [r7, #14]
 8005514:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005516:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005518:	89fb      	ldrh	r3, [r7, #14]
 800551a:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 800551c:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005520:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005524:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005528:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800552c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	4623      	mov	r3, r4
 8005534:	f7ff fd82 	bl	800503c <Displ_Line>
    for(; y<=y2; y++) {
 8005538:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800553c:	b29b      	uxth	r3, r3
 800553e:	3301      	adds	r3, #1
 8005540:	b29b      	uxth	r3, r3
 8005542:	867b      	strh	r3, [r7, #50]	; 0x32
 8005544:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005548:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800554c:	429a      	cmp	r2, r3
 800554e:	ddbb      	ble.n	80054c8 <Displ_fillTriangle+0x22a>
    }
}
 8005550:	373c      	adds	r7, #60	; 0x3c
 8005552:	46bd      	mov	sp, r7
 8005554:	bd90      	pop	{r4, r7, pc}
	...

08005558 <Displ_WChar>:
 * @brief   display one character on the display
 * @param   x,y: top left corner of the character to be printed
 *          ch, font, color, bgcolor: as per parameter name
 *          size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005558:	b082      	sub	sp, #8
 800555a:	b590      	push	{r4, r7, lr}
 800555c:	b08d      	sub	sp, #52	; 0x34
 800555e:	af00      	add	r7, sp, #0
 8005560:	647b      	str	r3, [r7, #68]	; 0x44
 8005562:	4603      	mov	r3, r0
 8005564:	80fb      	strh	r3, [r7, #6]
 8005566:	460b      	mov	r3, r1
 8005568:	80bb      	strh	r3, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
    uint8_t wsize=font.Width; //printing char width
 800556e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005572:	76fb      	strb	r3, [r7, #27]

    if (size==2)
 8005574:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005578:	2b02      	cmp	r3, #2
 800557a:	d102      	bne.n	8005582 <Displ_WChar+0x2a>
        wsize<<= 1;
 800557c:	7efb      	ldrb	r3, [r7, #27]
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	76fb      	strb	r3, [r7, #27]
    bufSize=0;
 8005582:	2300      	movs	r3, #0
 8005584:	623b      	str	r3, [r7, #32]
    bytes=font.Height * font.Size ;
 8005586:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800558a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800558e:	fb02 f303 	mul.w	r3, r2, r3
 8005592:	617b      	str	r3, [r7, #20]
    pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8005594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	3b20      	subs	r3, #32
 800559a:	4619      	mov	r1, r3
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	4413      	add	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
    switch (font.Size) {
 80055a6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d005      	beq.n	80055ba <Displ_WChar+0x62>
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d107      	bne.n	80055c2 <Displ_WChar+0x6a>
        case 3:
            mask=0x800000;
 80055b2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80055b6:	61fb      	str	r3, [r7, #28]
            break;
 80055b8:	e005      	b.n	80055c6 <Displ_WChar+0x6e>
        case 2:
            mask=0x8000;
 80055ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055be:	61fb      	str	r3, [r7, #28]
            break;
 80055c0:	e001      	b.n	80055c6 <Displ_WChar+0x6e>
        default:
            mask=0x80;
 80055c2:	2380      	movs	r3, #128	; 0x80
 80055c4:	61fb      	str	r3, [r7, #28]
    }

#ifdef Z_RGB565

    uint16_t color1, bgcolor1;
    uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 80055c6:	4b60      	ldr	r3, [pc, #384]	; (8005748 <Displ_WChar+0x1f0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60fb      	str	r3, [r7, #12]

    color1 = ((color & 0xFF)<<8 | (color >> 8));            //swapping byte endian: STM32 is little endian, ST7735 is big endian
 80055cc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	b21a      	sxth	r2, r3
 80055d4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80055d8:	0a1b      	lsrs	r3, r3, #8
 80055da:	b29b      	uxth	r3, r3
 80055dc:	b21b      	sxth	r3, r3
 80055de:	4313      	orrs	r3, r2
 80055e0:	b21b      	sxth	r3, r3
 80055e2:	817b      	strh	r3, [r7, #10]
    bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));      //swapping byte endian: STM32 is little endian, ST7735 is big endian
 80055e4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	b21a      	sxth	r2, r3
 80055ec:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80055f0:	0a1b      	lsrs	r3, r3, #8
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	b21b      	sxth	r3, r3
 80055f6:	4313      	orrs	r3, r2
 80055f8:	b21b      	sxth	r3, r3
 80055fa:	813b      	strh	r3, [r7, #8]

    for(i = 0; i < (bytes); i+=font.Size){
 80055fc:	2300      	movs	r3, #0
 80055fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005600:	e06f      	b.n	80056e2 <Displ_WChar+0x18a>
        b=0;
 8005602:	2300      	movs	r3, #0
 8005604:	62bb      	str	r3, [r7, #40]	; 0x28
        switch (font.Size) {
 8005606:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800560a:	2b02      	cmp	r3, #2
 800560c:	d015      	beq.n	800563a <Displ_WChar+0xe2>
 800560e:	2b03      	cmp	r3, #3
 8005610:	d120      	bne.n	8005654 <Displ_WChar+0xfc>
            case 3:
                b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005616:	4413      	add	r3, r2
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	041a      	lsls	r2, r3, #16
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	3301      	adds	r3, #1
 8005620:	6939      	ldr	r1, [r7, #16]
 8005622:	440b      	add	r3, r1
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	021b      	lsls	r3, r3, #8
 8005628:	4313      	orrs	r3, r2
 800562a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800562c:	3202      	adds	r2, #2
 800562e:	6939      	ldr	r1, [r7, #16]
 8005630:	440a      	add	r2, r1
 8005632:	7812      	ldrb	r2, [r2, #0]
 8005634:	4313      	orrs	r3, r2
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8005638:	e011      	b.n	800565e <Displ_WChar+0x106>
            case 2:
                b=pos[i]<<8 | pos[i+1];
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563e:	4413      	add	r3, r2
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	021b      	lsls	r3, r3, #8
 8005644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005646:	3201      	adds	r2, #1
 8005648:	6939      	ldr	r1, [r7, #16]
 800564a:	440a      	add	r2, r1
 800564c:	7812      	ldrb	r2, [r2, #0]
 800564e:	4313      	orrs	r3, r2
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8005652:	e004      	b.n	800565e <Displ_WChar+0x106>
            default:
                b=pos[i];
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	4413      	add	r3, r2
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        for(j = 0; j < font.Width; j++) {
 800565e:	2300      	movs	r3, #0
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
 8005662:	e032      	b.n	80056ca <Displ_WChar+0x172>
            if((b << j) & mask)  {
 8005664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	409a      	lsls	r2, r3
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4013      	ands	r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d014      	beq.n	800569c <Displ_WChar+0x144>
                dispBuffer16[bufSize++] = color1;
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	623a      	str	r2, [r7, #32]
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	897a      	ldrh	r2, [r7, #10]
 8005680:	801a      	strh	r2, [r3, #0]
                if (size==2){
 8005682:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005686:	2b02      	cmp	r3, #2
 8005688:	d11c      	bne.n	80056c4 <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = color1;
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	623a      	str	r2, [r7, #32]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4413      	add	r3, r2
 8005696:	897a      	ldrh	r2, [r7, #10]
 8005698:	801a      	strh	r2, [r3, #0]
 800569a:	e013      	b.n	80056c4 <Displ_WChar+0x16c>
                }
            } else {
                dispBuffer16[bufSize++] = bgcolor1;
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	623a      	str	r2, [r7, #32]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	893a      	ldrh	r2, [r7, #8]
 80056aa:	801a      	strh	r2, [r3, #0]
                if (size==2) {
 80056ac:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d107      	bne.n	80056c4 <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = bgcolor1;
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	623a      	str	r2, [r7, #32]
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	893a      	ldrh	r2, [r7, #8]
 80056c2:	801a      	strh	r2, [r3, #0]
        for(j = 0; j < font.Width; j++) {
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	3301      	adds	r3, #1
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056ce:	461a      	mov	r2, r3
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d3c6      	bcc.n	8005664 <Displ_WChar+0x10c>
    for(i = 0; i < (bytes); i+=font.Size){
 80056d6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80056da:	461a      	mov	r2, r3
 80056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056de:	4413      	add	r3, r2
 80056e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d38b      	bcc.n	8005602 <Displ_WChar+0xaa>
                }
            }
        }
    }
    bufSize<<=1;
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	623b      	str	r3, [r7, #32]
            }
        }
    }
#endif

    Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 80056f0:	7efb      	ldrb	r3, [r7, #27]
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	88fb      	ldrh	r3, [r7, #6]
 80056f6:	4413      	add	r3, r2
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29c      	uxth	r4, r3
 80056fe:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005702:	88bb      	ldrh	r3, [r7, #4]
 8005704:	4413      	add	r3, r2
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29b      	uxth	r3, r3
 800570c:	88b9      	ldrh	r1, [r7, #4]
 800570e:	88f8      	ldrh	r0, [r7, #6]
 8005710:	4622      	mov	r2, r4
 8005712:	f7ff f9d7 	bl	8004ac4 <Displ_SetAddressWindow>
    Displ_WriteData(dispBuffer,bufSize,0);
 8005716:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <Displ_WChar+0x1f0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2200      	movs	r2, #0
 800571c:	6a39      	ldr	r1, [r7, #32]
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff f977 	bl	8004a12 <Displ_WriteData>
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8005724:	4b08      	ldr	r3, [pc, #32]	; (8005748 <Displ_WChar+0x1f0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a08      	ldr	r2, [pc, #32]	; (800574c <Displ_WChar+0x1f4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d101      	bne.n	8005732 <Displ_WChar+0x1da>
 800572e:	4b08      	ldr	r3, [pc, #32]	; (8005750 <Displ_WChar+0x1f8>)
 8005730:	e000      	b.n	8005734 <Displ_WChar+0x1dc>
 8005732:	4b06      	ldr	r3, [pc, #24]	; (800574c <Displ_WChar+0x1f4>)
 8005734:	4a04      	ldr	r2, [pc, #16]	; (8005748 <Displ_WChar+0x1f0>)
 8005736:	6013      	str	r3, [r2, #0]

}
 8005738:	bf00      	nop
 800573a:	3734      	adds	r7, #52	; 0x34
 800573c:	46bd      	mov	sp, r7
 800573e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005742:	b002      	add	sp, #8
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	2000005c 	.word	0x2000005c
 800574c:	200021e4 	.word	0x200021e4
 8005750:	200025e4 	.word	0x200025e4

08005754 <Displ_WString>:
 *          font    to bu used
 *          size    1 (normal), 2 (double width)
 *          color   font color
 *          bgcolor background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005754:	b082      	sub	sp, #8
 8005756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005758:	b08b      	sub	sp, #44	; 0x2c
 800575a:	af06      	add	r7, sp, #24
 800575c:	603a      	str	r2, [r7, #0]
 800575e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005760:	4603      	mov	r3, r0
 8005762:	80fb      	strh	r3, [r7, #6]
 8005764:	460b      	mov	r3, r1
 8005766:	80bb      	strh	r3, [r7, #4]
    uint16_t delta=font.Width;
 8005768:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800576a:	81fb      	strh	r3, [r7, #14]
    if (size>1)
 800576c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005770:	2b01      	cmp	r3, #1
 8005772:	d922      	bls.n	80057ba <Displ_WString+0x66>
        delta<<=1;
 8005774:	89fb      	ldrh	r3, [r7, #14]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 800577a:	e01e      	b.n	80057ba <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781a      	ldrb	r2, [r3, #0]
 8005780:	88bd      	ldrh	r5, [r7, #4]
 8005782:	88fc      	ldrh	r4, [r7, #6]
 8005784:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005788:	9304      	str	r3, [sp, #16]
 800578a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800578c:	9303      	str	r3, [sp, #12]
 800578e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005792:	9302      	str	r3, [sp, #8]
 8005794:	466e      	mov	r6, sp
 8005796:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800579a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800579e:	e886 0003 	stmia.w	r6, {r0, r1}
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	4629      	mov	r1, r5
 80057a6:	4620      	mov	r0, r4
 80057a8:	f7ff fed6 	bl	8005558 <Displ_WChar>
        x += delta;
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	89fb      	ldrh	r3, [r7, #14]
 80057b0:	4413      	add	r3, r2
 80057b2:	80fb      	strh	r3, [r7, #6]
        str++;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	3301      	adds	r3, #1
 80057b8:	603b      	str	r3, [r7, #0]
    while(*str) {
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1dc      	bne.n	800577c <Displ_WString+0x28>
    }
}
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80057ce:	b002      	add	sp, #8
 80057d0:	4770      	bx	lr
	...

080057d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80057d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800580c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80057d8:	f7ff f878 	bl	80048cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80057dc:	480c      	ldr	r0, [pc, #48]	; (8005810 <LoopForever+0x6>)
  ldr r1, =_edata
 80057de:	490d      	ldr	r1, [pc, #52]	; (8005814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80057e0:	4a0d      	ldr	r2, [pc, #52]	; (8005818 <LoopForever+0xe>)
  movs r3, #0
 80057e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057e4:	e002      	b.n	80057ec <LoopCopyDataInit>

080057e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057ea:	3304      	adds	r3, #4

080057ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057f0:	d3f9      	bcc.n	80057e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057f2:	4a0a      	ldr	r2, [pc, #40]	; (800581c <LoopForever+0x12>)
  ldr r4, =_ebss
 80057f4:	4c0a      	ldr	r4, [pc, #40]	; (8005820 <LoopForever+0x16>)
  movs r3, #0
 80057f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057f8:	e001      	b.n	80057fe <LoopFillZerobss>

080057fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057fc:	3204      	adds	r2, #4

080057fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005800:	d3fb      	bcc.n	80057fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005802:	f004 fe13 	bl	800a42c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005806:	f7fd f817 	bl	8002838 <main>

0800580a <LoopForever>:

LoopForever:
    b LoopForever
 800580a:	e7fe      	b.n	800580a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800580c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005814:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8005818:	0800d7d0 	.word	0x0800d7d0
  ldr r2, =_sbss
 800581c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8005820:	20002a00 	.word	0x20002a00

08005824 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005824:	e7fe      	b.n	8005824 <ADC1_IRQHandler>
	...

08005828 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800582c:	4b08      	ldr	r3, [pc, #32]	; (8005850 <HAL_Init+0x28>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a07      	ldr	r2, [pc, #28]	; (8005850 <HAL_Init+0x28>)
 8005832:	f043 0310 	orr.w	r3, r3, #16
 8005836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005838:	2003      	movs	r0, #3
 800583a:	f000 f94f 	bl	8005adc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800583e:	200f      	movs	r0, #15
 8005840:	f000 f808 	bl	8005854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005844:	f7fe fdbc 	bl	80043c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40022000 	.word	0x40022000

08005854 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800585c:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <HAL_InitTick+0x54>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	4b12      	ldr	r3, [pc, #72]	; (80058ac <HAL_InitTick+0x58>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	4619      	mov	r1, r3
 8005866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800586a:	fbb3 f3f1 	udiv	r3, r3, r1
 800586e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005872:	4618      	mov	r0, r3
 8005874:	f000 f967 	bl	8005b46 <HAL_SYSTICK_Config>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e00e      	b.n	80058a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b0f      	cmp	r3, #15
 8005886:	d80a      	bhi.n	800589e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005888:	2200      	movs	r2, #0
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	f000 f92f 	bl	8005af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005894:	4a06      	ldr	r2, [pc, #24]	; (80058b0 <HAL_InitTick+0x5c>)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	e000      	b.n	80058a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	20000054 	.word	0x20000054
 80058ac:	20000064 	.word	0x20000064
 80058b0:	20000060 	.word	0x20000060

080058b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058b8:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <HAL_IncTick+0x20>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <HAL_IncTick+0x24>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4413      	add	r3, r2
 80058c4:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <HAL_IncTick+0x24>)
 80058c6:	6013      	str	r3, [r2, #0]
}
 80058c8:	bf00      	nop
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	20000064 	.word	0x20000064
 80058d8:	200029ec 	.word	0x200029ec

080058dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  return uwTick;  
 80058e0:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <HAL_GetTick+0x14>)
 80058e2:	681b      	ldr	r3, [r3, #0]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	200029ec 	.word	0x200029ec

080058f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058fc:	f7ff ffee 	bl	80058dc <HAL_GetTick>
 8005900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d005      	beq.n	800591a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <HAL_Delay+0x44>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800591a:	bf00      	nop
 800591c:	f7ff ffde 	bl	80058dc <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	429a      	cmp	r2, r3
 800592a:	d8f7      	bhi.n	800591c <HAL_Delay+0x28>
  {
  }
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000064 	.word	0x20000064

0800593c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800594c:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <__NVIC_SetPriorityGrouping+0x44>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005958:	4013      	ands	r3, r2
 800595a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800596c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800596e:	4a04      	ldr	r2, [pc, #16]	; (8005980 <__NVIC_SetPriorityGrouping+0x44>)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	60d3      	str	r3, [r2, #12]
}
 8005974:	bf00      	nop
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	e000ed00 	.word	0xe000ed00

08005984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005988:	4b04      	ldr	r3, [pc, #16]	; (800599c <__NVIC_GetPriorityGrouping+0x18>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	0a1b      	lsrs	r3, r3, #8
 800598e:	f003 0307 	and.w	r3, r3, #7
}
 8005992:	4618      	mov	r0, r3
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	e000ed00 	.word	0xe000ed00

080059a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	db0b      	blt.n	80059ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	f003 021f 	and.w	r2, r3, #31
 80059b8:	4907      	ldr	r1, [pc, #28]	; (80059d8 <__NVIC_EnableIRQ+0x38>)
 80059ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	2001      	movs	r0, #1
 80059c2:	fa00 f202 	lsl.w	r2, r0, r2
 80059c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	e000e100 	.word	0xe000e100

080059dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	4603      	mov	r3, r0
 80059e4:	6039      	str	r1, [r7, #0]
 80059e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	db0a      	blt.n	8005a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	490c      	ldr	r1, [pc, #48]	; (8005a28 <__NVIC_SetPriority+0x4c>)
 80059f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059fa:	0112      	lsls	r2, r2, #4
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	440b      	add	r3, r1
 8005a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a04:	e00a      	b.n	8005a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	4908      	ldr	r1, [pc, #32]	; (8005a2c <__NVIC_SetPriority+0x50>)
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	3b04      	subs	r3, #4
 8005a14:	0112      	lsls	r2, r2, #4
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	440b      	add	r3, r1
 8005a1a:	761a      	strb	r2, [r3, #24]
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	e000e100 	.word	0xe000e100
 8005a2c:	e000ed00 	.word	0xe000ed00

08005a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b089      	sub	sp, #36	; 0x24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f1c3 0307 	rsb	r3, r3, #7
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	bf28      	it	cs
 8005a4e:	2304      	movcs	r3, #4
 8005a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	3304      	adds	r3, #4
 8005a56:	2b06      	cmp	r3, #6
 8005a58:	d902      	bls.n	8005a60 <NVIC_EncodePriority+0x30>
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	3b03      	subs	r3, #3
 8005a5e:	e000      	b.n	8005a62 <NVIC_EncodePriority+0x32>
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a64:	f04f 32ff 	mov.w	r2, #4294967295
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6e:	43da      	mvns	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	401a      	ands	r2, r3
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a78:	f04f 31ff 	mov.w	r1, #4294967295
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a82:	43d9      	mvns	r1, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a88:	4313      	orrs	r3, r2
         );
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3724      	adds	r7, #36	; 0x24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
	...

08005a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005aa8:	d301      	bcc.n	8005aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e00f      	b.n	8005ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005aae:	4a0a      	ldr	r2, [pc, #40]	; (8005ad8 <SysTick_Config+0x40>)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ab6:	210f      	movs	r1, #15
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8005abc:	f7ff ff8e 	bl	80059dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ac0:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <SysTick_Config+0x40>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ac6:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <SysTick_Config+0x40>)
 8005ac8:	2207      	movs	r2, #7
 8005aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	e000e010 	.word	0xe000e010

08005adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff ff29 	bl	800593c <__NVIC_SetPriorityGrouping>
}
 8005aea:	bf00      	nop
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b086      	sub	sp, #24
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	4603      	mov	r3, r0
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	607a      	str	r2, [r7, #4]
 8005afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b04:	f7ff ff3e 	bl	8005984 <__NVIC_GetPriorityGrouping>
 8005b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	6978      	ldr	r0, [r7, #20]
 8005b10:	f7ff ff8e 	bl	8005a30 <NVIC_EncodePriority>
 8005b14:	4602      	mov	r2, r0
 8005b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff ff5d 	bl	80059dc <__NVIC_SetPriority>
}
 8005b22:	bf00      	nop
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	4603      	mov	r3, r0
 8005b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff ff31 	bl	80059a0 <__NVIC_EnableIRQ>
}
 8005b3e:	bf00      	nop
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b082      	sub	sp, #8
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff ffa2 	bl	8005a98 <SysTick_Config>
 8005b54:	4603      	mov	r3, r0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e037      	b.n	8005be4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005b8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005b8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f9b8 	bl	8005f3c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}  
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_DMA_Start_IT+0x20>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e04a      	b.n	8005ca2 <HAL_DMA_Start_IT+0xb6>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d13a      	bne.n	8005c94 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2202      	movs	r2, #2
 8005c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0201 	bic.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f94b 	bl	8005ede <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d008      	beq.n	8005c62 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 020e 	orr.w	r2, r2, #14
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	e00f      	b.n	8005c82 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 020a 	orr.w	r2, r2, #10
 8005c70:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0204 	bic.w	r2, r2, #4
 8005c80:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0201 	orr.w	r2, r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	e005      	b.n	8005ca0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d008      	beq.n	8005cce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2204      	movs	r2, #4
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e020      	b.n	8005d10 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 020e 	bic.w	r2, r2, #14
 8005cdc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0201 	bic.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8005cfc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d005      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2204      	movs	r2, #4
 8005d36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	73fb      	strb	r3, [r7, #15]
 8005d3c:	e027      	b.n	8005d8e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 020e 	bic.w	r2, r2, #14
 8005d4c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0201 	bic.w	r2, r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d66:	2101      	movs	r1, #1
 8005d68:	fa01 f202 	lsl.w	r2, r1, r2
 8005d6c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4798      	blx	r3
    } 
  }
  return status;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	2204      	movs	r2, #4
 8005db6:	409a      	lsls	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d024      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x72>
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d01f      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d107      	bne.n	8005de8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0204 	bic.w	r2, r2, #4
 8005de6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df0:	2104      	movs	r1, #4
 8005df2:	fa01 f202 	lsl.w	r2, r1, r2
 8005df6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d06a      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005e08:	e065      	b.n	8005ed6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	2202      	movs	r2, #2
 8005e10:	409a      	lsls	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4013      	ands	r3, r2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d02c      	beq.n	8005e74 <HAL_DMA_IRQHandler+0xdc>
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d027      	beq.n	8005e74 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10b      	bne.n	8005e4a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 020a 	bic.w	r2, r2, #10
 8005e40:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e52:	2102      	movs	r1, #2
 8005e54:	fa01 f202 	lsl.w	r2, r1, r2
 8005e58:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d035      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005e72:	e030      	b.n	8005ed6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	2208      	movs	r2, #8
 8005e7a:	409a      	lsls	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d028      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x13e>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d023      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 020e 	bic.w	r2, r2, #14
 8005e9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8005eac:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d004      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	4798      	blx	r3
    }
  }
}  
 8005ed4:	e7ff      	b.n	8005ed6 <HAL_DMA_IRQHandler+0x13e>
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
 8005eea:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8005efa:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d108      	bne.n	8005f1e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f1c:	e007      	b.n	8005f2e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	60da      	str	r2, [r3, #12]
}
 8005f2e:	bf00      	nop
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <DMA_CalcBaseAndBitshift+0x34>)
 8005f4c:	4413      	add	r3, r2
 8005f4e:	4a09      	ldr	r2, [pc, #36]	; (8005f74 <DMA_CalcBaseAndBitshift+0x38>)
 8005f50:	fba2 2303 	umull	r2, r3, r2, r3
 8005f54:	091b      	lsrs	r3, r3, #4
 8005f56:	009a      	lsls	r2, r3, #2
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a06      	ldr	r2, [pc, #24]	; (8005f78 <DMA_CalcBaseAndBitshift+0x3c>)
 8005f60:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	bffdfff8 	.word	0xbffdfff8
 8005f74:	cccccccd 	.word	0xcccccccd
 8005f78:	40020000 	.word	0x40020000

08005f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f8a:	e14e      	b.n	800622a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	2101      	movs	r1, #1
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	fa01 f303 	lsl.w	r3, r1, r3
 8005f98:	4013      	ands	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 8140 	beq.w	8006224 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f003 0303 	and.w	r3, r3, #3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d005      	beq.n	8005fbc <HAL_GPIO_Init+0x40>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f003 0303 	and.w	r3, r3, #3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d130      	bne.n	800601e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	2203      	movs	r2, #3
 8005fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffa:	43db      	mvns	r3, r3
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4013      	ands	r3, r2
 8006000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	091b      	lsrs	r3, r3, #4
 8006008:	f003 0201 	and.w	r2, r3, #1
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	fa02 f303 	lsl.w	r3, r2, r3
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b03      	cmp	r3, #3
 8006028:	d017      	beq.n	800605a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	2203      	movs	r2, #3
 8006036:	fa02 f303 	lsl.w	r3, r2, r3
 800603a:	43db      	mvns	r3, r3
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	4013      	ands	r3, r2
 8006040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	fa02 f303 	lsl.w	r3, r2, r3
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d123      	bne.n	80060ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	08da      	lsrs	r2, r3, #3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3208      	adds	r2, #8
 800606e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	220f      	movs	r2, #15
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	43db      	mvns	r3, r3
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4013      	ands	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	08da      	lsrs	r2, r3, #3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3208      	adds	r2, #8
 80060a8:	6939      	ldr	r1, [r7, #16]
 80060aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	2203      	movs	r2, #3
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	43db      	mvns	r3, r3
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4013      	ands	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f003 0203 	and.w	r2, r3, #3
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 809a 	beq.w	8006224 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060f0:	4b55      	ldr	r3, [pc, #340]	; (8006248 <HAL_GPIO_Init+0x2cc>)
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	4a54      	ldr	r2, [pc, #336]	; (8006248 <HAL_GPIO_Init+0x2cc>)
 80060f6:	f043 0301 	orr.w	r3, r3, #1
 80060fa:	6193      	str	r3, [r2, #24]
 80060fc:	4b52      	ldr	r3, [pc, #328]	; (8006248 <HAL_GPIO_Init+0x2cc>)
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006108:	4a50      	ldr	r2, [pc, #320]	; (800624c <HAL_GPIO_Init+0x2d0>)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	089b      	lsrs	r3, r3, #2
 800610e:	3302      	adds	r3, #2
 8006110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006114:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	220f      	movs	r2, #15
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	43db      	mvns	r3, r3
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4013      	ands	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006132:	d013      	beq.n	800615c <HAL_GPIO_Init+0x1e0>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a46      	ldr	r2, [pc, #280]	; (8006250 <HAL_GPIO_Init+0x2d4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00d      	beq.n	8006158 <HAL_GPIO_Init+0x1dc>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a45      	ldr	r2, [pc, #276]	; (8006254 <HAL_GPIO_Init+0x2d8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d007      	beq.n	8006154 <HAL_GPIO_Init+0x1d8>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a44      	ldr	r2, [pc, #272]	; (8006258 <HAL_GPIO_Init+0x2dc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d101      	bne.n	8006150 <HAL_GPIO_Init+0x1d4>
 800614c:	2303      	movs	r3, #3
 800614e:	e006      	b.n	800615e <HAL_GPIO_Init+0x1e2>
 8006150:	2305      	movs	r3, #5
 8006152:	e004      	b.n	800615e <HAL_GPIO_Init+0x1e2>
 8006154:	2302      	movs	r3, #2
 8006156:	e002      	b.n	800615e <HAL_GPIO_Init+0x1e2>
 8006158:	2301      	movs	r3, #1
 800615a:	e000      	b.n	800615e <HAL_GPIO_Init+0x1e2>
 800615c:	2300      	movs	r3, #0
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	f002 0203 	and.w	r2, r2, #3
 8006164:	0092      	lsls	r2, r2, #2
 8006166:	4093      	lsls	r3, r2
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800616e:	4937      	ldr	r1, [pc, #220]	; (800624c <HAL_GPIO_Init+0x2d0>)
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	089b      	lsrs	r3, r3, #2
 8006174:	3302      	adds	r3, #2
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800617c:	4b37      	ldr	r3, [pc, #220]	; (800625c <HAL_GPIO_Init+0x2e0>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	43db      	mvns	r3, r3
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4013      	ands	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80061a0:	4a2e      	ldr	r2, [pc, #184]	; (800625c <HAL_GPIO_Init+0x2e0>)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061a6:	4b2d      	ldr	r3, [pc, #180]	; (800625c <HAL_GPIO_Init+0x2e0>)
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	43db      	mvns	r3, r3
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4013      	ands	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80061ca:	4a24      	ldr	r2, [pc, #144]	; (800625c <HAL_GPIO_Init+0x2e0>)
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061d0:	4b22      	ldr	r3, [pc, #136]	; (800625c <HAL_GPIO_Init+0x2e0>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	43db      	mvns	r3, r3
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4013      	ands	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80061f4:	4a19      	ldr	r2, [pc, #100]	; (800625c <HAL_GPIO_Init+0x2e0>)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061fa:	4b18      	ldr	r3, [pc, #96]	; (800625c <HAL_GPIO_Init+0x2e0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	43db      	mvns	r3, r3
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4013      	ands	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800621e:	4a0f      	ldr	r2, [pc, #60]	; (800625c <HAL_GPIO_Init+0x2e0>)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	3301      	adds	r3, #1
 8006228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	fa22 f303 	lsr.w	r3, r2, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	f47f aea9 	bne.w	8005f8c <HAL_GPIO_Init+0x10>
  }
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	40021000 	.word	0x40021000
 800624c:	40010000 	.word	0x40010000
 8006250:	48000400 	.word	0x48000400
 8006254:	48000800 	.word	0x48000800
 8006258:	48000c00 	.word	0x48000c00
 800625c:	40010400 	.word	0x40010400

08006260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691a      	ldr	r2, [r3, #16]
 8006270:	887b      	ldrh	r3, [r7, #2]
 8006272:	4013      	ands	r3, r2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
 800627c:	e001      	b.n	8006282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	807b      	strh	r3, [r7, #2]
 800629c:	4613      	mov	r3, r2
 800629e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062a0:	787b      	ldrb	r3, [r7, #1]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80062a6:	887a      	ldrh	r2, [r7, #2]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80062ac:	e002      	b.n	80062b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80062ae:	887a      	ldrh	r2, [r7, #2]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80062ca:	4b08      	ldr	r3, [pc, #32]	; (80062ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062cc:	695a      	ldr	r2, [r3, #20]
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	4013      	ands	r3, r2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d006      	beq.n	80062e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062d6:	4a05      	ldr	r2, [pc, #20]	; (80062ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062d8:	88fb      	ldrh	r3, [r7, #6]
 80062da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fc fd2c 	bl	8002d3c <HAL_GPIO_EXTI_Callback>
  }
}
 80062e4:	bf00      	nop
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40010400 	.word	0x40010400

080062f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e081      	b.n	8006406 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fe f876 	bl	8004408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2224      	movs	r2, #36	; 0x24
 8006320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0201 	bic.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006340:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006350:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d107      	bne.n	800636a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006366:	609a      	str	r2, [r3, #8]
 8006368:	e006      	b.n	8006378 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006376:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	2b02      	cmp	r3, #2
 800637e:	d104      	bne.n	800638a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006388:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800639c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691a      	ldr	r2, [r3, #16]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	69d9      	ldr	r1, [r3, #28]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1a      	ldr	r2, [r3, #32]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0201 	orr.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b088      	sub	sp, #32
 8006414:	af02      	add	r7, sp, #8
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	4608      	mov	r0, r1
 800641a:	4611      	mov	r1, r2
 800641c:	461a      	mov	r2, r3
 800641e:	4603      	mov	r3, r0
 8006420:	817b      	strh	r3, [r7, #10]
 8006422:	460b      	mov	r3, r1
 8006424:	813b      	strh	r3, [r7, #8]
 8006426:	4613      	mov	r3, r2
 8006428:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b20      	cmp	r3, #32
 8006434:	f040 80f9 	bne.w	800662a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <HAL_I2C_Mem_Write+0x34>
 800643e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006440:	2b00      	cmp	r3, #0
 8006442:	d105      	bne.n	8006450 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800644a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e0ed      	b.n	800662c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_I2C_Mem_Write+0x4e>
 800645a:	2302      	movs	r3, #2
 800645c:	e0e6      	b.n	800662c <HAL_I2C_Mem_Write+0x21c>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006466:	f7ff fa39 	bl	80058dc <HAL_GetTick>
 800646a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	2319      	movs	r3, #25
 8006472:	2201      	movs	r2, #1
 8006474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 fbcd 	bl	8006c18 <I2C_WaitOnFlagUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e0d1      	b.n	800662c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2221      	movs	r2, #33	; 0x21
 800648c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2240      	movs	r2, #64	; 0x40
 8006494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a3a      	ldr	r2, [r7, #32]
 80064a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064b0:	88f8      	ldrh	r0, [r7, #6]
 80064b2:	893a      	ldrh	r2, [r7, #8]
 80064b4:	8979      	ldrh	r1, [r7, #10]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	4603      	mov	r3, r0
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 fadd 	bl	8006a80 <I2C_RequestMemoryWrite>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0a9      	b.n	800662c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2bff      	cmp	r3, #255	; 0xff
 80064e0:	d90e      	bls.n	8006500 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	22ff      	movs	r2, #255	; 0xff
 80064e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	8979      	ldrh	r1, [r7, #10]
 80064f0:	2300      	movs	r3, #0
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 fd47 	bl	8006f8c <I2C_TransferConfig>
 80064fe:	e00f      	b.n	8006520 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650e:	b2da      	uxtb	r2, r3
 8006510:	8979      	ldrh	r1, [r7, #10]
 8006512:	2300      	movs	r3, #0
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fd36 	bl	8006f8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 fbc6 	bl	8006cb6 <I2C_WaitOnTXISFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e07b      	b.n	800662c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	781a      	ldrb	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654e:	b29b      	uxth	r3, r3
 8006550:	3b01      	subs	r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d034      	beq.n	80065d8 <HAL_I2C_Mem_Write+0x1c8>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006572:	2b00      	cmp	r3, #0
 8006574:	d130      	bne.n	80065d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	2200      	movs	r2, #0
 800657e:	2180      	movs	r1, #128	; 0x80
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fb49 	bl	8006c18 <I2C_WaitOnFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e04d      	b.n	800662c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	2bff      	cmp	r3, #255	; 0xff
 8006598:	d90e      	bls.n	80065b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	22ff      	movs	r2, #255	; 0xff
 800659e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	8979      	ldrh	r1, [r7, #10]
 80065a8:	2300      	movs	r3, #0
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 fceb 	bl	8006f8c <I2C_TransferConfig>
 80065b6:	e00f      	b.n	80065d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	8979      	ldrh	r1, [r7, #10]
 80065ca:	2300      	movs	r3, #0
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fcda 	bl	8006f8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d19e      	bne.n	8006520 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 fbac 	bl	8006d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e01a      	b.n	800662c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2220      	movs	r2, #32
 80065fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6859      	ldr	r1, [r3, #4]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <HAL_I2C_Mem_Write+0x224>)
 800660a:	400b      	ands	r3, r1
 800660c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	e000      	b.n	800662c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800662a:	2302      	movs	r3, #2
  }
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	fe00e800 	.word	0xfe00e800

08006638 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	4608      	mov	r0, r1
 8006642:	4611      	mov	r1, r2
 8006644:	461a      	mov	r2, r3
 8006646:	4603      	mov	r3, r0
 8006648:	817b      	strh	r3, [r7, #10]
 800664a:	460b      	mov	r3, r1
 800664c:	813b      	strh	r3, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b20      	cmp	r3, #32
 800665c:	f040 80fd 	bne.w	800685a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_I2C_Mem_Read+0x34>
 8006666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006668:	2b00      	cmp	r3, #0
 800666a:	d105      	bne.n	8006678 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006672:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0f1      	b.n	800685c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_I2C_Mem_Read+0x4e>
 8006682:	2302      	movs	r3, #2
 8006684:	e0ea      	b.n	800685c <HAL_I2C_Mem_Read+0x224>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800668e:	f7ff f925 	bl	80058dc <HAL_GetTick>
 8006692:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	2319      	movs	r3, #25
 800669a:	2201      	movs	r2, #1
 800669c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fab9 	bl	8006c18 <I2C_WaitOnFlagUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e0d5      	b.n	800685c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2222      	movs	r2, #34	; 0x22
 80066b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2240      	movs	r2, #64	; 0x40
 80066bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a3a      	ldr	r2, [r7, #32]
 80066ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80066d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066d8:	88f8      	ldrh	r0, [r7, #6]
 80066da:	893a      	ldrh	r2, [r7, #8]
 80066dc:	8979      	ldrh	r1, [r7, #10]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	4603      	mov	r3, r0
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 fa1d 	bl	8006b28 <I2C_RequestMemoryRead>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0ad      	b.n	800685c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006704:	b29b      	uxth	r3, r3
 8006706:	2bff      	cmp	r3, #255	; 0xff
 8006708:	d90e      	bls.n	8006728 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	22ff      	movs	r2, #255	; 0xff
 800670e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006714:	b2da      	uxtb	r2, r3
 8006716:	8979      	ldrh	r1, [r7, #10]
 8006718:	4b52      	ldr	r3, [pc, #328]	; (8006864 <HAL_I2C_Mem_Read+0x22c>)
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 fc33 	bl	8006f8c <I2C_TransferConfig>
 8006726:	e00f      	b.n	8006748 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006736:	b2da      	uxtb	r2, r3
 8006738:	8979      	ldrh	r1, [r7, #10]
 800673a:	4b4a      	ldr	r3, [pc, #296]	; (8006864 <HAL_I2C_Mem_Read+0x22c>)
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 fc22 	bl	8006f8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	2200      	movs	r2, #0
 8006750:	2104      	movs	r1, #4
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 fa60 	bl	8006c18 <I2C_WaitOnFlagUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e07c      	b.n	800685c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d034      	beq.n	8006808 <HAL_I2C_Mem_Read+0x1d0>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d130      	bne.n	8006808 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	2200      	movs	r2, #0
 80067ae:	2180      	movs	r1, #128	; 0x80
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 fa31 	bl	8006c18 <I2C_WaitOnFlagUntilTimeout>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e04d      	b.n	800685c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2bff      	cmp	r3, #255	; 0xff
 80067c8:	d90e      	bls.n	80067e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	22ff      	movs	r2, #255	; 0xff
 80067ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	8979      	ldrh	r1, [r7, #10]
 80067d8:	2300      	movs	r3, #0
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fbd3 	bl	8006f8c <I2C_TransferConfig>
 80067e6:	e00f      	b.n	8006808 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	8979      	ldrh	r1, [r7, #10]
 80067fa:	2300      	movs	r3, #0
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 fbc2 	bl	8006f8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d19a      	bne.n	8006748 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 fa94 	bl	8006d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e01a      	b.n	800685c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2220      	movs	r2, #32
 800682c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6859      	ldr	r1, [r3, #4]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	4b0b      	ldr	r3, [pc, #44]	; (8006868 <HAL_I2C_Mem_Read+0x230>)
 800683a:	400b      	ands	r3, r1
 800683c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	e000      	b.n	800685c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800685a:	2302      	movs	r3, #2
  }
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	80002400 	.word	0x80002400
 8006868:	fe00e800 	.word	0xfe00e800

0800686c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08a      	sub	sp, #40	; 0x28
 8006870:	af02      	add	r7, sp, #8
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	607a      	str	r2, [r7, #4]
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	460b      	mov	r3, r1
 800687a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b20      	cmp	r3, #32
 800688a:	f040 80f3 	bne.w	8006a74 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800689c:	d101      	bne.n	80068a2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800689e:	2302      	movs	r3, #2
 80068a0:	e0e9      	b.n	8006a76 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d101      	bne.n	80068b0 <HAL_I2C_IsDeviceReady+0x44>
 80068ac:	2302      	movs	r3, #2
 80068ae:	e0e2      	b.n	8006a76 <HAL_I2C_IsDeviceReady+0x20a>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2224      	movs	r2, #36	; 0x24
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d107      	bne.n	80068de <HAL_I2C_IsDeviceReady+0x72>
 80068ce:	897b      	ldrh	r3, [r7, #10]
 80068d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068dc:	e006      	b.n	80068ec <HAL_I2C_IsDeviceReady+0x80>
 80068de:	897b      	ldrh	r3, [r7, #10]
 80068e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068e8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80068f2:	f7fe fff3 	bl	80058dc <HAL_GetTick>
 80068f6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b20      	cmp	r3, #32
 8006904:	bf0c      	ite	eq
 8006906:	2301      	moveq	r3, #1
 8006908:	2300      	movne	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	2b10      	cmp	r3, #16
 800691a:	bf0c      	ite	eq
 800691c:	2301      	moveq	r3, #1
 800691e:	2300      	movne	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006924:	e034      	b.n	8006990 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d01a      	beq.n	8006964 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800692e:	f7fe ffd5 	bl	80058dc <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d302      	bcc.n	8006944 <HAL_I2C_IsDeviceReady+0xd8>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10f      	bne.n	8006964 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2220      	movs	r2, #32
 8006948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006950:	f043 0220 	orr.w	r2, r3, #32
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e088      	b.n	8006a76 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b20      	cmp	r3, #32
 8006970:	bf0c      	ite	eq
 8006972:	2301      	moveq	r3, #1
 8006974:	2300      	movne	r3, #0
 8006976:	b2db      	uxtb	r3, r3
 8006978:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	2b10      	cmp	r3, #16
 8006986:	bf0c      	ite	eq
 8006988:	2301      	moveq	r3, #1
 800698a:	2300      	movne	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006990:	7ffb      	ldrb	r3, [r7, #31]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d102      	bne.n	800699c <HAL_I2C_IsDeviceReady+0x130>
 8006996:	7fbb      	ldrb	r3, [r7, #30]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0c4      	beq.n	8006926 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	f003 0310 	and.w	r3, r3, #16
 80069a6:	2b10      	cmp	r3, #16
 80069a8:	d01a      	beq.n	80069e0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2200      	movs	r2, #0
 80069b2:	2120      	movs	r1, #32
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f92f 	bl	8006c18 <I2C_WaitOnFlagUntilTimeout>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e058      	b.n	8006a76 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2220      	movs	r2, #32
 80069ca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	e04a      	b.n	8006a76 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2200      	movs	r2, #0
 80069e8:	2120      	movs	r1, #32
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f914 	bl	8006c18 <I2C_WaitOnFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e03d      	b.n	8006a76 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2210      	movs	r2, #16
 8006a00:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2220      	movs	r2, #32
 8006a08:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d118      	bne.n	8006a44 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a20:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2120      	movs	r1, #32
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f8f3 	bl	8006c18 <I2C_WaitOnFlagUntilTimeout>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e01c      	b.n	8006a76 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2220      	movs	r2, #32
 8006a42:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	3301      	adds	r3, #1
 8006a48:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	f63f af39 	bhi.w	80068c6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a60:	f043 0220 	orr.w	r2, r3, #32
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8006a74:	2302      	movs	r3, #2
  }
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3720      	adds	r7, #32
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af02      	add	r7, sp, #8
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	4608      	mov	r0, r1
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	4603      	mov	r3, r0
 8006a90:	817b      	strh	r3, [r7, #10]
 8006a92:	460b      	mov	r3, r1
 8006a94:	813b      	strh	r3, [r7, #8]
 8006a96:	4613      	mov	r3, r2
 8006a98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006a9a:	88fb      	ldrh	r3, [r7, #6]
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	8979      	ldrh	r1, [r7, #10]
 8006aa0:	4b20      	ldr	r3, [pc, #128]	; (8006b24 <I2C_RequestMemoryWrite+0xa4>)
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fa6f 	bl	8006f8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	69b9      	ldr	r1, [r7, #24]
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 f8ff 	bl	8006cb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e02c      	b.n	8006b1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d105      	bne.n	8006ad4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ac8:	893b      	ldrh	r3, [r7, #8]
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8006ad2:	e015      	b.n	8006b00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ad4:	893b      	ldrh	r3, [r7, #8]
 8006ad6:	0a1b      	lsrs	r3, r3, #8
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ae2:	69fa      	ldr	r2, [r7, #28]
 8006ae4:	69b9      	ldr	r1, [r7, #24]
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 f8e5 	bl	8006cb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e012      	b.n	8006b1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006af6:	893b      	ldrh	r3, [r7, #8]
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	2200      	movs	r2, #0
 8006b08:	2180      	movs	r1, #128	; 0x80
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 f884 	bl	8006c18 <I2C_WaitOnFlagUntilTimeout>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	80002000 	.word	0x80002000

08006b28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	4608      	mov	r0, r1
 8006b32:	4611      	mov	r1, r2
 8006b34:	461a      	mov	r2, r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	817b      	strh	r3, [r7, #10]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	813b      	strh	r3, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006b42:	88fb      	ldrh	r3, [r7, #6]
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	8979      	ldrh	r1, [r7, #10]
 8006b48:	4b20      	ldr	r3, [pc, #128]	; (8006bcc <I2C_RequestMemoryRead+0xa4>)
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 fa1c 	bl	8006f8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b54:	69fa      	ldr	r2, [r7, #28]
 8006b56:	69b9      	ldr	r1, [r7, #24]
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f8ac 	bl	8006cb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e02c      	b.n	8006bc2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b68:	88fb      	ldrh	r3, [r7, #6]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d105      	bne.n	8006b7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b6e:	893b      	ldrh	r3, [r7, #8]
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	629a      	str	r2, [r3, #40]	; 0x28
 8006b78:	e015      	b.n	8006ba6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b7a:	893b      	ldrh	r3, [r7, #8]
 8006b7c:	0a1b      	lsrs	r3, r3, #8
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	69b9      	ldr	r1, [r7, #24]
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 f892 	bl	8006cb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e012      	b.n	8006bc2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b9c:	893b      	ldrh	r3, [r7, #8]
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	2200      	movs	r2, #0
 8006bae:	2140      	movs	r1, #64	; 0x40
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f831 	bl	8006c18 <I2C_WaitOnFlagUntilTimeout>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	80002000 	.word	0x80002000

08006bd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d103      	bne.n	8006bee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2200      	movs	r2, #0
 8006bec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d007      	beq.n	8006c0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699a      	ldr	r2, [r3, #24]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	619a      	str	r2, [r3, #24]
  }
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	4613      	mov	r3, r2
 8006c26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c28:	e031      	b.n	8006c8e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c30:	d02d      	beq.n	8006c8e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c32:	f7fe fe53 	bl	80058dc <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d302      	bcc.n	8006c48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d122      	bne.n	8006c8e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	4013      	ands	r3, r2
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	bf0c      	ite	eq
 8006c58:	2301      	moveq	r3, #1
 8006c5a:	2300      	movne	r3, #0
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	461a      	mov	r2, r3
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d113      	bne.n	8006c8e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6a:	f043 0220 	orr.w	r2, r3, #32
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e00f      	b.n	8006cae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	699a      	ldr	r2, [r3, #24]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4013      	ands	r3, r2
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	bf0c      	ite	eq
 8006c9e:	2301      	moveq	r3, #1
 8006ca0:	2300      	movne	r3, #0
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	79fb      	ldrb	r3, [r7, #7]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d0be      	beq.n	8006c2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cc2:	e033      	b.n	8006d2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f87f 	bl	8006dcc <I2C_IsErrorOccurred>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e031      	b.n	8006d3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d025      	beq.n	8006d2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ce0:	f7fe fdfc 	bl	80058dc <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d302      	bcc.n	8006cf6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d11a      	bne.n	8006d2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d013      	beq.n	8006d2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d08:	f043 0220 	orr.w	r2, r3, #32
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e007      	b.n	8006d3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d1c4      	bne.n	8006cc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d50:	e02f      	b.n	8006db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	68b9      	ldr	r1, [r7, #8]
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f838 	bl	8006dcc <I2C_IsErrorOccurred>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e02d      	b.n	8006dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d66:	f7fe fdb9 	bl	80058dc <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d302      	bcc.n	8006d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d11a      	bne.n	8006db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d013      	beq.n	8006db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8e:	f043 0220 	orr.w	r2, r3, #32
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e007      	b.n	8006dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	d1c8      	bne.n	8006d52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08a      	sub	sp, #40	; 0x28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d068      	beq.n	8006eca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2210      	movs	r2, #16
 8006dfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e00:	e049      	b.n	8006e96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e08:	d045      	beq.n	8006e96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e0a:	f7fe fd67 	bl	80058dc <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d302      	bcc.n	8006e20 <I2C_IsErrorOccurred+0x54>
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d13a      	bne.n	8006e96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e42:	d121      	bne.n	8006e88 <I2C_IsErrorOccurred+0xbc>
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e4a:	d01d      	beq.n	8006e88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006e4c:	7cfb      	ldrb	r3, [r7, #19]
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d01a      	beq.n	8006e88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006e62:	f7fe fd3b 	bl	80058dc <HAL_GetTick>
 8006e66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e68:	e00e      	b.n	8006e88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006e6a:	f7fe fd37 	bl	80058dc <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b19      	cmp	r3, #25
 8006e76:	d907      	bls.n	8006e88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	f043 0320 	orr.w	r3, r3, #32
 8006e7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006e86:	e006      	b.n	8006e96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b20      	cmp	r3, #32
 8006e94:	d1e9      	bne.n	8006e6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	f003 0320 	and.w	r3, r3, #32
 8006ea0:	2b20      	cmp	r3, #32
 8006ea2:	d003      	beq.n	8006eac <I2C_IsErrorOccurred+0xe0>
 8006ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0aa      	beq.n	8006e02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d103      	bne.n	8006ebc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	f043 0304 	orr.w	r3, r3, #4
 8006ec2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00b      	beq.n	8006ef4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	f043 0301 	orr.w	r3, r3, #1
 8006ee2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006eec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00b      	beq.n	8006f16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	f043 0308 	orr.w	r3, r3, #8
 8006f04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	f043 0302 	orr.w	r3, r3, #2
 8006f26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01c      	beq.n	8006f7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f7ff fe45 	bl	8006bd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6859      	ldr	r1, [r3, #4]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <I2C_IsErrorOccurred+0x1bc>)
 8006f52:	400b      	ands	r3, r1
 8006f54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3728      	adds	r7, #40	; 0x28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	fe00e800 	.word	0xfe00e800

08006f8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	607b      	str	r3, [r7, #4]
 8006f96:	460b      	mov	r3, r1
 8006f98:	817b      	strh	r3, [r7, #10]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f9e:	897b      	ldrh	r3, [r7, #10]
 8006fa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fa4:	7a7b      	ldrb	r3, [r7, #9]
 8006fa6:	041b      	lsls	r3, r3, #16
 8006fa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	0d5b      	lsrs	r3, r3, #21
 8006fc6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006fca:	4b08      	ldr	r3, [pc, #32]	; (8006fec <I2C_TransferConfig+0x60>)
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	43db      	mvns	r3, r3
 8006fd0:	ea02 0103 	and.w	r1, r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	03ff63ff 	.word	0x03ff63ff

08006ff0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b20      	cmp	r3, #32
 8007004:	d138      	bne.n	8007078 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800700c:	2b01      	cmp	r3, #1
 800700e:	d101      	bne.n	8007014 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007010:	2302      	movs	r3, #2
 8007012:	e032      	b.n	800707a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2224      	movs	r2, #36	; 0x24
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0201 	bic.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007042:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6819      	ldr	r1, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0201 	orr.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	e000      	b.n	800707a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007078:	2302      	movs	r3, #2
  }
}
 800707a:	4618      	mov	r0, r3
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b20      	cmp	r3, #32
 800709a:	d139      	bne.n	8007110 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e033      	b.n	8007112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2224      	movs	r2, #36	; 0x24
 80070b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0201 	bic.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80070d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	021b      	lsls	r3, r3, #8
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	e000      	b.n	8007112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007110:	2302      	movs	r3, #2
  }
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
	...

08007120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8007126:	af00      	add	r7, sp, #0
 8007128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800712c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007130:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007136:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d102      	bne.n	8007146 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	f001 b823 	b.w	800818c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800714a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 817d 	beq.w	8007456 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800715c:	4bbc      	ldr	r3, [pc, #752]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f003 030c 	and.w	r3, r3, #12
 8007164:	2b04      	cmp	r3, #4
 8007166:	d00c      	beq.n	8007182 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007168:	4bb9      	ldr	r3, [pc, #740]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f003 030c 	and.w	r3, r3, #12
 8007170:	2b08      	cmp	r3, #8
 8007172:	d15c      	bne.n	800722e <HAL_RCC_OscConfig+0x10e>
 8007174:	4bb6      	ldr	r3, [pc, #728]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800717c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007180:	d155      	bne.n	800722e <HAL_RCC_OscConfig+0x10e>
 8007182:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007186:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800718a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800718e:	fa93 f3a3 	rbit	r3, r3
 8007192:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007196:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800719a:	fab3 f383 	clz	r3, r3
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	095b      	lsrs	r3, r3, #5
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f043 0301 	orr.w	r3, r3, #1
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d102      	bne.n	80071b4 <HAL_RCC_OscConfig+0x94>
 80071ae:	4ba8      	ldr	r3, [pc, #672]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	e015      	b.n	80071e0 <HAL_RCC_OscConfig+0xc0>
 80071b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80071c0:	fa93 f3a3 	rbit	r3, r3
 80071c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80071c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80071d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80071d4:	fa93 f3a3 	rbit	r3, r3
 80071d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80071dc:	4b9c      	ldr	r3, [pc, #624]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80071e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80071e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80071ec:	fa92 f2a2 	rbit	r2, r2
 80071f0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80071f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80071f8:	fab2 f282 	clz	r2, r2
 80071fc:	b2d2      	uxtb	r2, r2
 80071fe:	f042 0220 	orr.w	r2, r2, #32
 8007202:	b2d2      	uxtb	r2, r2
 8007204:	f002 021f 	and.w	r2, r2, #31
 8007208:	2101      	movs	r1, #1
 800720a:	fa01 f202 	lsl.w	r2, r1, r2
 800720e:	4013      	ands	r3, r2
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 811f 	beq.w	8007454 <HAL_RCC_OscConfig+0x334>
 8007216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800721a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	f040 8116 	bne.w	8007454 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	f000 bfaf 	b.w	800818c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800722e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007232:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800723e:	d106      	bne.n	800724e <HAL_RCC_OscConfig+0x12e>
 8007240:	4b83      	ldr	r3, [pc, #524]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a82      	ldr	r2, [pc, #520]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 8007246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	e036      	b.n	80072bc <HAL_RCC_OscConfig+0x19c>
 800724e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007252:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10c      	bne.n	8007278 <HAL_RCC_OscConfig+0x158>
 800725e:	4b7c      	ldr	r3, [pc, #496]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a7b      	ldr	r2, [pc, #492]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 8007264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	4b79      	ldr	r3, [pc, #484]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a78      	ldr	r2, [pc, #480]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 8007270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	e021      	b.n	80072bc <HAL_RCC_OscConfig+0x19c>
 8007278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800727c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007288:	d10c      	bne.n	80072a4 <HAL_RCC_OscConfig+0x184>
 800728a:	4b71      	ldr	r3, [pc, #452]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a70      	ldr	r2, [pc, #448]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 8007290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	4b6e      	ldr	r3, [pc, #440]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a6d      	ldr	r2, [pc, #436]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 800729c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	e00b      	b.n	80072bc <HAL_RCC_OscConfig+0x19c>
 80072a4:	4b6a      	ldr	r3, [pc, #424]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a69      	ldr	r2, [pc, #420]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 80072aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	4b67      	ldr	r3, [pc, #412]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a66      	ldr	r2, [pc, #408]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 80072b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072ba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80072bc:	4b64      	ldr	r3, [pc, #400]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	f023 020f 	bic.w	r2, r3, #15
 80072c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	495f      	ldr	r1, [pc, #380]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d059      	beq.n	800739a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e6:	f7fe faf9 	bl	80058dc <HAL_GetTick>
 80072ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072ee:	e00a      	b.n	8007306 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072f0:	f7fe faf4 	bl	80058dc <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b64      	cmp	r3, #100	; 0x64
 80072fe:	d902      	bls.n	8007306 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	f000 bf43 	b.w	800818c <HAL_RCC_OscConfig+0x106c>
 8007306:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800730a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800730e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007312:	fa93 f3a3 	rbit	r3, r3
 8007316:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800731a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800731e:	fab3 f383 	clz	r3, r3
 8007322:	b2db      	uxtb	r3, r3
 8007324:	095b      	lsrs	r3, r3, #5
 8007326:	b2db      	uxtb	r3, r3
 8007328:	f043 0301 	orr.w	r3, r3, #1
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b01      	cmp	r3, #1
 8007330:	d102      	bne.n	8007338 <HAL_RCC_OscConfig+0x218>
 8007332:	4b47      	ldr	r3, [pc, #284]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	e015      	b.n	8007364 <HAL_RCC_OscConfig+0x244>
 8007338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800733c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007340:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007344:	fa93 f3a3 	rbit	r3, r3
 8007348:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800734c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007350:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007354:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007358:	fa93 f3a3 	rbit	r3, r3
 800735c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007360:	4b3b      	ldr	r3, [pc, #236]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007368:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800736c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007370:	fa92 f2a2 	rbit	r2, r2
 8007374:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007378:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800737c:	fab2 f282 	clz	r2, r2
 8007380:	b2d2      	uxtb	r2, r2
 8007382:	f042 0220 	orr.w	r2, r2, #32
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	f002 021f 	and.w	r2, r2, #31
 800738c:	2101      	movs	r1, #1
 800738e:	fa01 f202 	lsl.w	r2, r1, r2
 8007392:	4013      	ands	r3, r2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d0ab      	beq.n	80072f0 <HAL_RCC_OscConfig+0x1d0>
 8007398:	e05d      	b.n	8007456 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800739a:	f7fe fa9f 	bl	80058dc <HAL_GetTick>
 800739e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073a2:	e00a      	b.n	80073ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073a4:	f7fe fa9a 	bl	80058dc <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b64      	cmp	r3, #100	; 0x64
 80073b2:	d902      	bls.n	80073ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	f000 bee9 	b.w	800818c <HAL_RCC_OscConfig+0x106c>
 80073ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073be:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80073c6:	fa93 f3a3 	rbit	r3, r3
 80073ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80073ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073d2:	fab3 f383 	clz	r3, r3
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	095b      	lsrs	r3, r3, #5
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	f043 0301 	orr.w	r3, r3, #1
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d102      	bne.n	80073ec <HAL_RCC_OscConfig+0x2cc>
 80073e6:	4b1a      	ldr	r3, [pc, #104]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	e015      	b.n	8007418 <HAL_RCC_OscConfig+0x2f8>
 80073ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073f0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80073f8:	fa93 f3a3 	rbit	r3, r3
 80073fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007404:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007408:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800740c:	fa93 f3a3 	rbit	r3, r3
 8007410:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007414:	4b0e      	ldr	r3, [pc, #56]	; (8007450 <HAL_RCC_OscConfig+0x330>)
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800741c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007420:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007424:	fa92 f2a2 	rbit	r2, r2
 8007428:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800742c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007430:	fab2 f282 	clz	r2, r2
 8007434:	b2d2      	uxtb	r2, r2
 8007436:	f042 0220 	orr.w	r2, r2, #32
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	f002 021f 	and.w	r2, r2, #31
 8007440:	2101      	movs	r1, #1
 8007442:	fa01 f202 	lsl.w	r2, r1, r2
 8007446:	4013      	ands	r3, r2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1ab      	bne.n	80073a4 <HAL_RCC_OscConfig+0x284>
 800744c:	e003      	b.n	8007456 <HAL_RCC_OscConfig+0x336>
 800744e:	bf00      	nop
 8007450:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800745a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 817d 	beq.w	8007766 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800746c:	4ba6      	ldr	r3, [pc, #664]	; (8007708 <HAL_RCC_OscConfig+0x5e8>)
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f003 030c 	and.w	r3, r3, #12
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007478:	4ba3      	ldr	r3, [pc, #652]	; (8007708 <HAL_RCC_OscConfig+0x5e8>)
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f003 030c 	and.w	r3, r3, #12
 8007480:	2b08      	cmp	r3, #8
 8007482:	d172      	bne.n	800756a <HAL_RCC_OscConfig+0x44a>
 8007484:	4ba0      	ldr	r3, [pc, #640]	; (8007708 <HAL_RCC_OscConfig+0x5e8>)
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d16c      	bne.n	800756a <HAL_RCC_OscConfig+0x44a>
 8007490:	2302      	movs	r3, #2
 8007492:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007496:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800749a:	fa93 f3a3 	rbit	r3, r3
 800749e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80074a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074a6:	fab3 f383 	clz	r3, r3
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	095b      	lsrs	r3, r3, #5
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	f043 0301 	orr.w	r3, r3, #1
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d102      	bne.n	80074c0 <HAL_RCC_OscConfig+0x3a0>
 80074ba:	4b93      	ldr	r3, [pc, #588]	; (8007708 <HAL_RCC_OscConfig+0x5e8>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	e013      	b.n	80074e8 <HAL_RCC_OscConfig+0x3c8>
 80074c0:	2302      	movs	r3, #2
 80074c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80074ca:	fa93 f3a3 	rbit	r3, r3
 80074ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80074d2:	2302      	movs	r3, #2
 80074d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80074d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80074dc:	fa93 f3a3 	rbit	r3, r3
 80074e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80074e4:	4b88      	ldr	r3, [pc, #544]	; (8007708 <HAL_RCC_OscConfig+0x5e8>)
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	2202      	movs	r2, #2
 80074ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80074ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80074f2:	fa92 f2a2 	rbit	r2, r2
 80074f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80074fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80074fe:	fab2 f282 	clz	r2, r2
 8007502:	b2d2      	uxtb	r2, r2
 8007504:	f042 0220 	orr.w	r2, r2, #32
 8007508:	b2d2      	uxtb	r2, r2
 800750a:	f002 021f 	and.w	r2, r2, #31
 800750e:	2101      	movs	r1, #1
 8007510:	fa01 f202 	lsl.w	r2, r1, r2
 8007514:	4013      	ands	r3, r2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <HAL_RCC_OscConfig+0x410>
 800751a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800751e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d002      	beq.n	8007530 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	f000 be2e 	b.w	800818c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007530:	4b75      	ldr	r3, [pc, #468]	; (8007708 <HAL_RCC_OscConfig+0x5e8>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800753c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	21f8      	movs	r1, #248	; 0xf8
 8007546:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800754a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800754e:	fa91 f1a1 	rbit	r1, r1
 8007552:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007556:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800755a:	fab1 f181 	clz	r1, r1
 800755e:	b2c9      	uxtb	r1, r1
 8007560:	408b      	lsls	r3, r1
 8007562:	4969      	ldr	r1, [pc, #420]	; (8007708 <HAL_RCC_OscConfig+0x5e8>)
 8007564:	4313      	orrs	r3, r2
 8007566:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007568:	e0fd      	b.n	8007766 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800756a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800756e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 8088 	beq.w	800768c <HAL_RCC_OscConfig+0x56c>
 800757c:	2301      	movs	r3, #1
 800757e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007582:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007586:	fa93 f3a3 	rbit	r3, r3
 800758a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800758e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007592:	fab3 f383 	clz	r3, r3
 8007596:	b2db      	uxtb	r3, r3
 8007598:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800759c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	461a      	mov	r2, r3
 80075a4:	2301      	movs	r3, #1
 80075a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a8:	f7fe f998 	bl	80058dc <HAL_GetTick>
 80075ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075b0:	e00a      	b.n	80075c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075b2:	f7fe f993 	bl	80058dc <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d902      	bls.n	80075c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	f000 bde2 	b.w	800818c <HAL_RCC_OscConfig+0x106c>
 80075c8:	2302      	movs	r3, #2
 80075ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80075d2:	fa93 f3a3 	rbit	r3, r3
 80075d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80075da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075de:	fab3 f383 	clz	r3, r3
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	095b      	lsrs	r3, r3, #5
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	f043 0301 	orr.w	r3, r3, #1
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d102      	bne.n	80075f8 <HAL_RCC_OscConfig+0x4d8>
 80075f2:	4b45      	ldr	r3, [pc, #276]	; (8007708 <HAL_RCC_OscConfig+0x5e8>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	e013      	b.n	8007620 <HAL_RCC_OscConfig+0x500>
 80075f8:	2302      	movs	r3, #2
 80075fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007602:	fa93 f3a3 	rbit	r3, r3
 8007606:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800760a:	2302      	movs	r3, #2
 800760c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007610:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007614:	fa93 f3a3 	rbit	r3, r3
 8007618:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800761c:	4b3a      	ldr	r3, [pc, #232]	; (8007708 <HAL_RCC_OscConfig+0x5e8>)
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	2202      	movs	r2, #2
 8007622:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007626:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800762a:	fa92 f2a2 	rbit	r2, r2
 800762e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007632:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007636:	fab2 f282 	clz	r2, r2
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	f042 0220 	orr.w	r2, r2, #32
 8007640:	b2d2      	uxtb	r2, r2
 8007642:	f002 021f 	and.w	r2, r2, #31
 8007646:	2101      	movs	r1, #1
 8007648:	fa01 f202 	lsl.w	r2, r1, r2
 800764c:	4013      	ands	r3, r2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0af      	beq.n	80075b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007652:	4b2d      	ldr	r3, [pc, #180]	; (8007708 <HAL_RCC_OscConfig+0x5e8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800765a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800765e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	21f8      	movs	r1, #248	; 0xf8
 8007668:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800766c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007670:	fa91 f1a1 	rbit	r1, r1
 8007674:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007678:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800767c:	fab1 f181 	clz	r1, r1
 8007680:	b2c9      	uxtb	r1, r1
 8007682:	408b      	lsls	r3, r1
 8007684:	4920      	ldr	r1, [pc, #128]	; (8007708 <HAL_RCC_OscConfig+0x5e8>)
 8007686:	4313      	orrs	r3, r2
 8007688:	600b      	str	r3, [r1, #0]
 800768a:	e06c      	b.n	8007766 <HAL_RCC_OscConfig+0x646>
 800768c:	2301      	movs	r3, #1
 800768e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007692:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007696:	fa93 f3a3 	rbit	r3, r3
 800769a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800769e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076a2:	fab3 f383 	clz	r3, r3
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80076ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	461a      	mov	r2, r3
 80076b4:	2300      	movs	r3, #0
 80076b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076b8:	f7fe f910 	bl	80058dc <HAL_GetTick>
 80076bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076c0:	e00a      	b.n	80076d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076c2:	f7fe f90b 	bl	80058dc <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d902      	bls.n	80076d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	f000 bd5a 	b.w	800818c <HAL_RCC_OscConfig+0x106c>
 80076d8:	2302      	movs	r3, #2
 80076da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80076e2:	fa93 f3a3 	rbit	r3, r3
 80076e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80076ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ee:	fab3 f383 	clz	r3, r3
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	f043 0301 	orr.w	r3, r3, #1
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d104      	bne.n	800770c <HAL_RCC_OscConfig+0x5ec>
 8007702:	4b01      	ldr	r3, [pc, #4]	; (8007708 <HAL_RCC_OscConfig+0x5e8>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	e015      	b.n	8007734 <HAL_RCC_OscConfig+0x614>
 8007708:	40021000 	.word	0x40021000
 800770c:	2302      	movs	r3, #2
 800770e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007712:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007716:	fa93 f3a3 	rbit	r3, r3
 800771a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800771e:	2302      	movs	r3, #2
 8007720:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007724:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007728:	fa93 f3a3 	rbit	r3, r3
 800772c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007730:	4bc8      	ldr	r3, [pc, #800]	; (8007a54 <HAL_RCC_OscConfig+0x934>)
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	2202      	movs	r2, #2
 8007736:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800773a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800773e:	fa92 f2a2 	rbit	r2, r2
 8007742:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007746:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800774a:	fab2 f282 	clz	r2, r2
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	f042 0220 	orr.w	r2, r2, #32
 8007754:	b2d2      	uxtb	r2, r2
 8007756:	f002 021f 	and.w	r2, r2, #31
 800775a:	2101      	movs	r1, #1
 800775c:	fa01 f202 	lsl.w	r2, r1, r2
 8007760:	4013      	ands	r3, r2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1ad      	bne.n	80076c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800776a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0308 	and.w	r3, r3, #8
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 8110 	beq.w	800799c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800777c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007780:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d079      	beq.n	8007880 <HAL_RCC_OscConfig+0x760>
 800778c:	2301      	movs	r3, #1
 800778e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007792:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007796:	fa93 f3a3 	rbit	r3, r3
 800779a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800779e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077a2:	fab3 f383 	clz	r3, r3
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	4bab      	ldr	r3, [pc, #684]	; (8007a58 <HAL_RCC_OscConfig+0x938>)
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	461a      	mov	r2, r3
 80077b2:	2301      	movs	r3, #1
 80077b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077b6:	f7fe f891 	bl	80058dc <HAL_GetTick>
 80077ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077be:	e00a      	b.n	80077d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077c0:	f7fe f88c 	bl	80058dc <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d902      	bls.n	80077d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	f000 bcdb 	b.w	800818c <HAL_RCC_OscConfig+0x106c>
 80077d6:	2302      	movs	r3, #2
 80077d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077e0:	fa93 f3a3 	rbit	r3, r3
 80077e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80077e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80077f0:	2202      	movs	r2, #2
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	fa93 f2a3 	rbit	r2, r3
 8007802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007806:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007814:	2202      	movs	r2, #2
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800781c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	fa93 f2a3 	rbit	r2, r3
 8007826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800782a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800782e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007830:	4b88      	ldr	r3, [pc, #544]	; (8007a54 <HAL_RCC_OscConfig+0x934>)
 8007832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007838:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800783c:	2102      	movs	r1, #2
 800783e:	6019      	str	r1, [r3, #0]
 8007840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007844:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	fa93 f1a3 	rbit	r1, r3
 800784e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007852:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007856:	6019      	str	r1, [r3, #0]
  return result;
 8007858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800785c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	fab3 f383 	clz	r3, r3
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800786c:	b2db      	uxtb	r3, r3
 800786e:	f003 031f 	and.w	r3, r3, #31
 8007872:	2101      	movs	r1, #1
 8007874:	fa01 f303 	lsl.w	r3, r1, r3
 8007878:	4013      	ands	r3, r2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0a0      	beq.n	80077c0 <HAL_RCC_OscConfig+0x6a0>
 800787e:	e08d      	b.n	800799c <HAL_RCC_OscConfig+0x87c>
 8007880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007884:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007888:	2201      	movs	r2, #1
 800788a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007890:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	fa93 f2a3 	rbit	r2, r3
 800789a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800789e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80078a2:	601a      	str	r2, [r3, #0]
  return result;
 80078a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80078ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078ae:	fab3 f383 	clz	r3, r3
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	461a      	mov	r2, r3
 80078b6:	4b68      	ldr	r3, [pc, #416]	; (8007a58 <HAL_RCC_OscConfig+0x938>)
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	461a      	mov	r2, r3
 80078be:	2300      	movs	r3, #0
 80078c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078c2:	f7fe f80b 	bl	80058dc <HAL_GetTick>
 80078c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078ca:	e00a      	b.n	80078e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078cc:	f7fe f806 	bl	80058dc <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d902      	bls.n	80078e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	f000 bc55 	b.w	800818c <HAL_RCC_OscConfig+0x106c>
 80078e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80078ea:	2202      	movs	r2, #2
 80078ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	fa93 f2a3 	rbit	r2, r3
 80078fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007900:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800790a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800790e:	2202      	movs	r2, #2
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007916:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	fa93 f2a3 	rbit	r2, r3
 8007920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007924:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007928:	601a      	str	r2, [r3, #0]
 800792a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800792e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007932:	2202      	movs	r2, #2
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800793a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	fa93 f2a3 	rbit	r2, r3
 8007944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007948:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800794c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800794e:	4b41      	ldr	r3, [pc, #260]	; (8007a54 <HAL_RCC_OscConfig+0x934>)
 8007950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007956:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800795a:	2102      	movs	r1, #2
 800795c:	6019      	str	r1, [r3, #0]
 800795e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007962:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	fa93 f1a3 	rbit	r1, r3
 800796c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007970:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007974:	6019      	str	r1, [r3, #0]
  return result;
 8007976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800797a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	fab3 f383 	clz	r3, r3
 8007984:	b2db      	uxtb	r3, r3
 8007986:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800798a:	b2db      	uxtb	r3, r3
 800798c:	f003 031f 	and.w	r3, r3, #31
 8007990:	2101      	movs	r1, #1
 8007992:	fa01 f303 	lsl.w	r3, r1, r3
 8007996:	4013      	ands	r3, r2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d197      	bne.n	80078cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800799c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 81a1 	beq.w	8007cf4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079b2:	2300      	movs	r3, #0
 80079b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079b8:	4b26      	ldr	r3, [pc, #152]	; (8007a54 <HAL_RCC_OscConfig+0x934>)
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d116      	bne.n	80079f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079c4:	4b23      	ldr	r3, [pc, #140]	; (8007a54 <HAL_RCC_OscConfig+0x934>)
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	4a22      	ldr	r2, [pc, #136]	; (8007a54 <HAL_RCC_OscConfig+0x934>)
 80079ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ce:	61d3      	str	r3, [r2, #28]
 80079d0:	4b20      	ldr	r3, [pc, #128]	; (8007a54 <HAL_RCC_OscConfig+0x934>)
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80079d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80079ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80079ec:	2301      	movs	r3, #1
 80079ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079f2:	4b1a      	ldr	r3, [pc, #104]	; (8007a5c <HAL_RCC_OscConfig+0x93c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d11a      	bne.n	8007a34 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079fe:	4b17      	ldr	r3, [pc, #92]	; (8007a5c <HAL_RCC_OscConfig+0x93c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a16      	ldr	r2, [pc, #88]	; (8007a5c <HAL_RCC_OscConfig+0x93c>)
 8007a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a0a:	f7fd ff67 	bl	80058dc <HAL_GetTick>
 8007a0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a12:	e009      	b.n	8007a28 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a14:	f7fd ff62 	bl	80058dc <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b64      	cmp	r3, #100	; 0x64
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e3b1      	b.n	800818c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a28:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <HAL_RCC_OscConfig+0x93c>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0ef      	beq.n	8007a14 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d10d      	bne.n	8007a60 <HAL_RCC_OscConfig+0x940>
 8007a44:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <HAL_RCC_OscConfig+0x934>)
 8007a46:	6a1b      	ldr	r3, [r3, #32]
 8007a48:	4a02      	ldr	r2, [pc, #8]	; (8007a54 <HAL_RCC_OscConfig+0x934>)
 8007a4a:	f043 0301 	orr.w	r3, r3, #1
 8007a4e:	6213      	str	r3, [r2, #32]
 8007a50:	e03c      	b.n	8007acc <HAL_RCC_OscConfig+0x9ac>
 8007a52:	bf00      	nop
 8007a54:	40021000 	.word	0x40021000
 8007a58:	10908120 	.word	0x10908120
 8007a5c:	40007000 	.word	0x40007000
 8007a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10c      	bne.n	8007a8a <HAL_RCC_OscConfig+0x96a>
 8007a70:	4bc1      	ldr	r3, [pc, #772]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	4ac0      	ldr	r2, [pc, #768]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007a76:	f023 0301 	bic.w	r3, r3, #1
 8007a7a:	6213      	str	r3, [r2, #32]
 8007a7c:	4bbe      	ldr	r3, [pc, #760]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	4abd      	ldr	r2, [pc, #756]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007a82:	f023 0304 	bic.w	r3, r3, #4
 8007a86:	6213      	str	r3, [r2, #32]
 8007a88:	e020      	b.n	8007acc <HAL_RCC_OscConfig+0x9ac>
 8007a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	2b05      	cmp	r3, #5
 8007a98:	d10c      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x994>
 8007a9a:	4bb7      	ldr	r3, [pc, #732]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	4ab6      	ldr	r2, [pc, #728]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007aa0:	f043 0304 	orr.w	r3, r3, #4
 8007aa4:	6213      	str	r3, [r2, #32]
 8007aa6:	4bb4      	ldr	r3, [pc, #720]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	4ab3      	ldr	r2, [pc, #716]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007aac:	f043 0301 	orr.w	r3, r3, #1
 8007ab0:	6213      	str	r3, [r2, #32]
 8007ab2:	e00b      	b.n	8007acc <HAL_RCC_OscConfig+0x9ac>
 8007ab4:	4bb0      	ldr	r3, [pc, #704]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	4aaf      	ldr	r2, [pc, #700]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007aba:	f023 0301 	bic.w	r3, r3, #1
 8007abe:	6213      	str	r3, [r2, #32]
 8007ac0:	4bad      	ldr	r3, [pc, #692]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	4aac      	ldr	r2, [pc, #688]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007ac6:	f023 0304 	bic.w	r3, r3, #4
 8007aca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ad0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 8081 	beq.w	8007be0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ade:	f7fd fefd 	bl	80058dc <HAL_GetTick>
 8007ae2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ae6:	e00b      	b.n	8007b00 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ae8:	f7fd fef8 	bl	80058dc <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d901      	bls.n	8007b00 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e345      	b.n	800818c <HAL_RCC_OscConfig+0x106c>
 8007b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007b08:	2202      	movs	r2, #2
 8007b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	fa93 f2a3 	rbit	r2, r3
 8007b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	fa93 f2a3 	rbit	r2, r3
 8007b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b42:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007b46:	601a      	str	r2, [r3, #0]
  return result;
 8007b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b4c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007b50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b52:	fab3 f383 	clz	r3, r3
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	095b      	lsrs	r3, r3, #5
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f043 0302 	orr.w	r3, r3, #2
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d102      	bne.n	8007b6c <HAL_RCC_OscConfig+0xa4c>
 8007b66:	4b84      	ldr	r3, [pc, #528]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	e013      	b.n	8007b94 <HAL_RCC_OscConfig+0xa74>
 8007b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007b74:	2202      	movs	r2, #2
 8007b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	fa93 f2a3 	rbit	r2, r3
 8007b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b8a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	4b79      	ldr	r3, [pc, #484]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b98:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007b9c:	2102      	movs	r1, #2
 8007b9e:	6011      	str	r1, [r2, #0]
 8007ba0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ba4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007ba8:	6812      	ldr	r2, [r2, #0]
 8007baa:	fa92 f1a2 	rbit	r1, r2
 8007bae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bb2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007bb6:	6011      	str	r1, [r2, #0]
  return result;
 8007bb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bbc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007bc0:	6812      	ldr	r2, [r2, #0]
 8007bc2:	fab2 f282 	clz	r2, r2
 8007bc6:	b2d2      	uxtb	r2, r2
 8007bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	f002 021f 	and.w	r2, r2, #31
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8007bd8:	4013      	ands	r3, r2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d084      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x9c8>
 8007bde:	e07f      	b.n	8007ce0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007be0:	f7fd fe7c 	bl	80058dc <HAL_GetTick>
 8007be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007be8:	e00b      	b.n	8007c02 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bea:	f7fd fe77 	bl	80058dc <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e2c4      	b.n	800818c <HAL_RCC_OscConfig+0x106c>
 8007c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c06:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c12:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	fa93 f2a3 	rbit	r2, r3
 8007c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c20:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c2a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007c2e:	2202      	movs	r2, #2
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	fa93 f2a3 	rbit	r2, r3
 8007c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c44:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007c48:	601a      	str	r2, [r3, #0]
  return result;
 8007c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c4e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007c52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c54:	fab3 f383 	clz	r3, r3
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	095b      	lsrs	r3, r3, #5
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	f043 0302 	orr.w	r3, r3, #2
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d102      	bne.n	8007c6e <HAL_RCC_OscConfig+0xb4e>
 8007c68:	4b43      	ldr	r3, [pc, #268]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	e013      	b.n	8007c96 <HAL_RCC_OscConfig+0xb76>
 8007c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c72:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007c76:	2202      	movs	r2, #2
 8007c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c7e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	fa93 f2a3 	rbit	r2, r3
 8007c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	4b39      	ldr	r3, [pc, #228]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007c9a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007c9e:	2102      	movs	r1, #2
 8007ca0:	6011      	str	r1, [r2, #0]
 8007ca2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ca6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007caa:	6812      	ldr	r2, [r2, #0]
 8007cac:	fa92 f1a2 	rbit	r1, r2
 8007cb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007cb4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007cb8:	6011      	str	r1, [r2, #0]
  return result;
 8007cba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007cbe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007cc2:	6812      	ldr	r2, [r2, #0]
 8007cc4:	fab2 f282 	clz	r2, r2
 8007cc8:	b2d2      	uxtb	r2, r2
 8007cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	f002 021f 	and.w	r2, r2, #31
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8007cda:	4013      	ands	r3, r2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d184      	bne.n	8007bea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007ce0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d105      	bne.n	8007cf4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ce8:	4b23      	ldr	r3, [pc, #140]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	4a22      	ldr	r2, [pc, #136]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cf2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 8242 	beq.w	800818a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d06:	4b1c      	ldr	r3, [pc, #112]	; (8007d78 <HAL_RCC_OscConfig+0xc58>)
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f003 030c 	and.w	r3, r3, #12
 8007d0e:	2b08      	cmp	r3, #8
 8007d10:	f000 8213 	beq.w	800813a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	f040 8162 	bne.w	8007fea <HAL_RCC_OscConfig+0xeca>
 8007d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d2a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007d2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d38:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	fa93 f2a3 	rbit	r2, r3
 8007d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d46:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007d4a:	601a      	str	r2, [r3, #0]
  return result;
 8007d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d50:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007d54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d56:	fab3 f383 	clz	r3, r3
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007d60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	461a      	mov	r2, r3
 8007d68:	2300      	movs	r3, #0
 8007d6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d6c:	f7fd fdb6 	bl	80058dc <HAL_GetTick>
 8007d70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d74:	e00c      	b.n	8007d90 <HAL_RCC_OscConfig+0xc70>
 8007d76:	bf00      	nop
 8007d78:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d7c:	f7fd fdae 	bl	80058dc <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d901      	bls.n	8007d90 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e1fd      	b.n	800818c <HAL_RCC_OscConfig+0x106c>
 8007d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d94:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007d98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007da2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	fa93 f2a3 	rbit	r2, r3
 8007dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007db0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007db4:	601a      	str	r2, [r3, #0]
  return result;
 8007db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007dbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007dc0:	fab3 f383 	clz	r3, r3
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	095b      	lsrs	r3, r3, #5
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	f043 0301 	orr.w	r3, r3, #1
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d102      	bne.n	8007dda <HAL_RCC_OscConfig+0xcba>
 8007dd4:	4bb0      	ldr	r3, [pc, #704]	; (8008098 <HAL_RCC_OscConfig+0xf78>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	e027      	b.n	8007e2a <HAL_RCC_OscConfig+0xd0a>
 8007dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dde:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007de2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	fa93 f2a3 	rbit	r2, r3
 8007df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dfa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e04:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007e08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e12:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	fa93 f2a3 	rbit	r2, r3
 8007e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	4b9c      	ldr	r3, [pc, #624]	; (8008098 <HAL_RCC_OscConfig+0xf78>)
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e2e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007e32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007e36:	6011      	str	r1, [r2, #0]
 8007e38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e3c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007e40:	6812      	ldr	r2, [r2, #0]
 8007e42:	fa92 f1a2 	rbit	r1, r2
 8007e46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e4a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007e4e:	6011      	str	r1, [r2, #0]
  return result;
 8007e50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e54:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007e58:	6812      	ldr	r2, [r2, #0]
 8007e5a:	fab2 f282 	clz	r2, r2
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	f042 0220 	orr.w	r2, r2, #32
 8007e64:	b2d2      	uxtb	r2, r2
 8007e66:	f002 021f 	and.w	r2, r2, #31
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8007e70:	4013      	ands	r3, r2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d182      	bne.n	8007d7c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e76:	4b88      	ldr	r3, [pc, #544]	; (8008098 <HAL_RCC_OscConfig+0xf78>)
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	430b      	orrs	r3, r1
 8007e98:	497f      	ldr	r1, [pc, #508]	; (8008098 <HAL_RCC_OscConfig+0xf78>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	604b      	str	r3, [r1, #4]
 8007e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ea2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007ea6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eb0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	fa93 f2a3 	rbit	r2, r3
 8007eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ebe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007ec2:	601a      	str	r2, [r3, #0]
  return result;
 8007ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ec8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007ecc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ece:	fab3 f383 	clz	r3, r3
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007ed8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	461a      	mov	r2, r3
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ee4:	f7fd fcfa 	bl	80058dc <HAL_GetTick>
 8007ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007eec:	e009      	b.n	8007f02 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007eee:	f7fd fcf5 	bl	80058dc <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d901      	bls.n	8007f02 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e144      	b.n	800818c <HAL_RCC_OscConfig+0x106c>
 8007f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f06:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007f0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f14:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	fa93 f2a3 	rbit	r2, r3
 8007f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f22:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007f26:	601a      	str	r2, [r3, #0]
  return result;
 8007f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f2c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007f30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f32:	fab3 f383 	clz	r3, r3
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	095b      	lsrs	r3, r3, #5
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	f043 0301 	orr.w	r3, r3, #1
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d102      	bne.n	8007f4c <HAL_RCC_OscConfig+0xe2c>
 8007f46:	4b54      	ldr	r3, [pc, #336]	; (8008098 <HAL_RCC_OscConfig+0xf78>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	e027      	b.n	8007f9c <HAL_RCC_OscConfig+0xe7c>
 8007f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007f54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f5e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	fa93 f2a3 	rbit	r2, r3
 8007f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f6c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f76:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007f7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f84:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	fa93 f2a3 	rbit	r2, r3
 8007f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f92:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	4b3f      	ldr	r3, [pc, #252]	; (8008098 <HAL_RCC_OscConfig+0xf78>)
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fa0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007fa4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007fa8:	6011      	str	r1, [r2, #0]
 8007faa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007fb2:	6812      	ldr	r2, [r2, #0]
 8007fb4:	fa92 f1a2 	rbit	r1, r2
 8007fb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fbc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007fc0:	6011      	str	r1, [r2, #0]
  return result;
 8007fc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fc6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007fca:	6812      	ldr	r2, [r2, #0]
 8007fcc:	fab2 f282 	clz	r2, r2
 8007fd0:	b2d2      	uxtb	r2, r2
 8007fd2:	f042 0220 	orr.w	r2, r2, #32
 8007fd6:	b2d2      	uxtb	r2, r2
 8007fd8:	f002 021f 	and.w	r2, r2, #31
 8007fdc:	2101      	movs	r1, #1
 8007fde:	fa01 f202 	lsl.w	r2, r1, r2
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d082      	beq.n	8007eee <HAL_RCC_OscConfig+0xdce>
 8007fe8:	e0cf      	b.n	800818a <HAL_RCC_OscConfig+0x106a>
 8007fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007ff2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ffc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	fa93 f2a3 	rbit	r2, r3
 8008006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800800a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800800e:	601a      	str	r2, [r3, #0]
  return result;
 8008010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008014:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008018:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800801a:	fab3 f383 	clz	r3, r3
 800801e:	b2db      	uxtb	r3, r3
 8008020:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008024:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	461a      	mov	r2, r3
 800802c:	2300      	movs	r3, #0
 800802e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008030:	f7fd fc54 	bl	80058dc <HAL_GetTick>
 8008034:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008038:	e009      	b.n	800804e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800803a:	f7fd fc4f 	bl	80058dc <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b02      	cmp	r3, #2
 8008048:	d901      	bls.n	800804e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e09e      	b.n	800818c <HAL_RCC_OscConfig+0x106c>
 800804e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008052:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008056:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800805a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800805c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008060:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	fa93 f2a3 	rbit	r2, r3
 800806a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800806e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008072:	601a      	str	r2, [r3, #0]
  return result;
 8008074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008078:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800807c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800807e:	fab3 f383 	clz	r3, r3
 8008082:	b2db      	uxtb	r3, r3
 8008084:	095b      	lsrs	r3, r3, #5
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f043 0301 	orr.w	r3, r3, #1
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b01      	cmp	r3, #1
 8008090:	d104      	bne.n	800809c <HAL_RCC_OscConfig+0xf7c>
 8008092:	4b01      	ldr	r3, [pc, #4]	; (8008098 <HAL_RCC_OscConfig+0xf78>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	e029      	b.n	80080ec <HAL_RCC_OscConfig+0xfcc>
 8008098:	40021000 	.word	0x40021000
 800809c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80080a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080ae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	fa93 f2a3 	rbit	r2, r3
 80080b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80080ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080d4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	fa93 f2a3 	rbit	r2, r3
 80080de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	4b2b      	ldr	r3, [pc, #172]	; (8008198 <HAL_RCC_OscConfig+0x1078>)
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80080f0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80080f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80080f8:	6011      	str	r1, [r2, #0]
 80080fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80080fe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008102:	6812      	ldr	r2, [r2, #0]
 8008104:	fa92 f1a2 	rbit	r1, r2
 8008108:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800810c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008110:	6011      	str	r1, [r2, #0]
  return result;
 8008112:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008116:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800811a:	6812      	ldr	r2, [r2, #0]
 800811c:	fab2 f282 	clz	r2, r2
 8008120:	b2d2      	uxtb	r2, r2
 8008122:	f042 0220 	orr.w	r2, r2, #32
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	f002 021f 	and.w	r2, r2, #31
 800812c:	2101      	movs	r1, #1
 800812e:	fa01 f202 	lsl.w	r2, r1, r2
 8008132:	4013      	ands	r3, r2
 8008134:	2b00      	cmp	r3, #0
 8008136:	d180      	bne.n	800803a <HAL_RCC_OscConfig+0xf1a>
 8008138:	e027      	b.n	800818a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800813a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800813e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d101      	bne.n	800814e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e01e      	b.n	800818c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800814e:	4b12      	ldr	r3, [pc, #72]	; (8008198 <HAL_RCC_OscConfig+0x1078>)
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008156:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800815a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800815e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	429a      	cmp	r2, r3
 800816c:	d10b      	bne.n	8008186 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800816e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008172:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800817a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008182:	429a      	cmp	r2, r3
 8008184:	d001      	beq.n	800818a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e000      	b.n	800818c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	40021000 	.word	0x40021000

0800819c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b09e      	sub	sp, #120	; 0x78
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e162      	b.n	800847a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081b4:	4b90      	ldr	r3, [pc, #576]	; (80083f8 <HAL_RCC_ClockConfig+0x25c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d910      	bls.n	80081e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081c2:	4b8d      	ldr	r3, [pc, #564]	; (80083f8 <HAL_RCC_ClockConfig+0x25c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f023 0207 	bic.w	r2, r3, #7
 80081ca:	498b      	ldr	r1, [pc, #556]	; (80083f8 <HAL_RCC_ClockConfig+0x25c>)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081d2:	4b89      	ldr	r3, [pc, #548]	; (80083f8 <HAL_RCC_ClockConfig+0x25c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0307 	and.w	r3, r3, #7
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d001      	beq.n	80081e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e14a      	b.n	800847a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d008      	beq.n	8008202 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081f0:	4b82      	ldr	r3, [pc, #520]	; (80083fc <HAL_RCC_ClockConfig+0x260>)
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	497f      	ldr	r1, [pc, #508]	; (80083fc <HAL_RCC_ClockConfig+0x260>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 80dc 	beq.w	80083c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d13c      	bne.n	8008292 <HAL_RCC_ClockConfig+0xf6>
 8008218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800821c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800821e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008220:	fa93 f3a3 	rbit	r3, r3
 8008224:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008228:	fab3 f383 	clz	r3, r3
 800822c:	b2db      	uxtb	r3, r3
 800822e:	095b      	lsrs	r3, r3, #5
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f043 0301 	orr.w	r3, r3, #1
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b01      	cmp	r3, #1
 800823a:	d102      	bne.n	8008242 <HAL_RCC_ClockConfig+0xa6>
 800823c:	4b6f      	ldr	r3, [pc, #444]	; (80083fc <HAL_RCC_ClockConfig+0x260>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	e00f      	b.n	8008262 <HAL_RCC_ClockConfig+0xc6>
 8008242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008246:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800824a:	fa93 f3a3 	rbit	r3, r3
 800824e:	667b      	str	r3, [r7, #100]	; 0x64
 8008250:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008254:	663b      	str	r3, [r7, #96]	; 0x60
 8008256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008258:	fa93 f3a3 	rbit	r3, r3
 800825c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800825e:	4b67      	ldr	r3, [pc, #412]	; (80083fc <HAL_RCC_ClockConfig+0x260>)
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008266:	65ba      	str	r2, [r7, #88]	; 0x58
 8008268:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800826a:	fa92 f2a2 	rbit	r2, r2
 800826e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008270:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008272:	fab2 f282 	clz	r2, r2
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	f042 0220 	orr.w	r2, r2, #32
 800827c:	b2d2      	uxtb	r2, r2
 800827e:	f002 021f 	and.w	r2, r2, #31
 8008282:	2101      	movs	r1, #1
 8008284:	fa01 f202 	lsl.w	r2, r1, r2
 8008288:	4013      	ands	r3, r2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d17b      	bne.n	8008386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e0f3      	b.n	800847a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	2b02      	cmp	r3, #2
 8008298:	d13c      	bne.n	8008314 <HAL_RCC_ClockConfig+0x178>
 800829a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800829e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082a2:	fa93 f3a3 	rbit	r3, r3
 80082a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80082a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082aa:	fab3 f383 	clz	r3, r3
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	095b      	lsrs	r3, r3, #5
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	f043 0301 	orr.w	r3, r3, #1
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d102      	bne.n	80082c4 <HAL_RCC_ClockConfig+0x128>
 80082be:	4b4f      	ldr	r3, [pc, #316]	; (80083fc <HAL_RCC_ClockConfig+0x260>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	e00f      	b.n	80082e4 <HAL_RCC_ClockConfig+0x148>
 80082c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082cc:	fa93 f3a3 	rbit	r3, r3
 80082d0:	647b      	str	r3, [r7, #68]	; 0x44
 80082d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082d6:	643b      	str	r3, [r7, #64]	; 0x40
 80082d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082da:	fa93 f3a3 	rbit	r3, r3
 80082de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082e0:	4b46      	ldr	r3, [pc, #280]	; (80083fc <HAL_RCC_ClockConfig+0x260>)
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80082e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80082ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082ec:	fa92 f2a2 	rbit	r2, r2
 80082f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80082f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082f4:	fab2 f282 	clz	r2, r2
 80082f8:	b2d2      	uxtb	r2, r2
 80082fa:	f042 0220 	orr.w	r2, r2, #32
 80082fe:	b2d2      	uxtb	r2, r2
 8008300:	f002 021f 	and.w	r2, r2, #31
 8008304:	2101      	movs	r1, #1
 8008306:	fa01 f202 	lsl.w	r2, r1, r2
 800830a:	4013      	ands	r3, r2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d13a      	bne.n	8008386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e0b2      	b.n	800847a <HAL_RCC_ClockConfig+0x2de>
 8008314:	2302      	movs	r3, #2
 8008316:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831a:	fa93 f3a3 	rbit	r3, r3
 800831e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008322:	fab3 f383 	clz	r3, r3
 8008326:	b2db      	uxtb	r3, r3
 8008328:	095b      	lsrs	r3, r3, #5
 800832a:	b2db      	uxtb	r3, r3
 800832c:	f043 0301 	orr.w	r3, r3, #1
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b01      	cmp	r3, #1
 8008334:	d102      	bne.n	800833c <HAL_RCC_ClockConfig+0x1a0>
 8008336:	4b31      	ldr	r3, [pc, #196]	; (80083fc <HAL_RCC_ClockConfig+0x260>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	e00d      	b.n	8008358 <HAL_RCC_ClockConfig+0x1bc>
 800833c:	2302      	movs	r3, #2
 800833e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	fa93 f3a3 	rbit	r3, r3
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
 8008348:	2302      	movs	r3, #2
 800834a:	623b      	str	r3, [r7, #32]
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	fa93 f3a3 	rbit	r3, r3
 8008352:	61fb      	str	r3, [r7, #28]
 8008354:	4b29      	ldr	r3, [pc, #164]	; (80083fc <HAL_RCC_ClockConfig+0x260>)
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	2202      	movs	r2, #2
 800835a:	61ba      	str	r2, [r7, #24]
 800835c:	69ba      	ldr	r2, [r7, #24]
 800835e:	fa92 f2a2 	rbit	r2, r2
 8008362:	617a      	str	r2, [r7, #20]
  return result;
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	fab2 f282 	clz	r2, r2
 800836a:	b2d2      	uxtb	r2, r2
 800836c:	f042 0220 	orr.w	r2, r2, #32
 8008370:	b2d2      	uxtb	r2, r2
 8008372:	f002 021f 	and.w	r2, r2, #31
 8008376:	2101      	movs	r1, #1
 8008378:	fa01 f202 	lsl.w	r2, r1, r2
 800837c:	4013      	ands	r3, r2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e079      	b.n	800847a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008386:	4b1d      	ldr	r3, [pc, #116]	; (80083fc <HAL_RCC_ClockConfig+0x260>)
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f023 0203 	bic.w	r2, r3, #3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	491a      	ldr	r1, [pc, #104]	; (80083fc <HAL_RCC_ClockConfig+0x260>)
 8008394:	4313      	orrs	r3, r2
 8008396:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008398:	f7fd faa0 	bl	80058dc <HAL_GetTick>
 800839c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800839e:	e00a      	b.n	80083b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083a0:	f7fd fa9c 	bl	80058dc <HAL_GetTick>
 80083a4:	4602      	mov	r2, r0
 80083a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d901      	bls.n	80083b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e061      	b.n	800847a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083b6:	4b11      	ldr	r3, [pc, #68]	; (80083fc <HAL_RCC_ClockConfig+0x260>)
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f003 020c 	and.w	r2, r3, #12
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d1eb      	bne.n	80083a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083c8:	4b0b      	ldr	r3, [pc, #44]	; (80083f8 <HAL_RCC_ClockConfig+0x25c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0307 	and.w	r3, r3, #7
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d214      	bcs.n	8008400 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083d6:	4b08      	ldr	r3, [pc, #32]	; (80083f8 <HAL_RCC_ClockConfig+0x25c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f023 0207 	bic.w	r2, r3, #7
 80083de:	4906      	ldr	r1, [pc, #24]	; (80083f8 <HAL_RCC_ClockConfig+0x25c>)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083e6:	4b04      	ldr	r3, [pc, #16]	; (80083f8 <HAL_RCC_ClockConfig+0x25c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d005      	beq.n	8008400 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e040      	b.n	800847a <HAL_RCC_ClockConfig+0x2de>
 80083f8:	40022000 	.word	0x40022000
 80083fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0304 	and.w	r3, r3, #4
 8008408:	2b00      	cmp	r3, #0
 800840a:	d008      	beq.n	800841e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800840c:	4b1d      	ldr	r3, [pc, #116]	; (8008484 <HAL_RCC_ClockConfig+0x2e8>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	491a      	ldr	r1, [pc, #104]	; (8008484 <HAL_RCC_ClockConfig+0x2e8>)
 800841a:	4313      	orrs	r3, r2
 800841c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0308 	and.w	r3, r3, #8
 8008426:	2b00      	cmp	r3, #0
 8008428:	d009      	beq.n	800843e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800842a:	4b16      	ldr	r3, [pc, #88]	; (8008484 <HAL_RCC_ClockConfig+0x2e8>)
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	4912      	ldr	r1, [pc, #72]	; (8008484 <HAL_RCC_ClockConfig+0x2e8>)
 800843a:	4313      	orrs	r3, r2
 800843c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800843e:	f000 f829 	bl	8008494 <HAL_RCC_GetSysClockFreq>
 8008442:	4601      	mov	r1, r0
 8008444:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <HAL_RCC_ClockConfig+0x2e8>)
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800844c:	22f0      	movs	r2, #240	; 0xf0
 800844e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	fa92 f2a2 	rbit	r2, r2
 8008456:	60fa      	str	r2, [r7, #12]
  return result;
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	fab2 f282 	clz	r2, r2
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	40d3      	lsrs	r3, r2
 8008462:	4a09      	ldr	r2, [pc, #36]	; (8008488 <HAL_RCC_ClockConfig+0x2ec>)
 8008464:	5cd3      	ldrb	r3, [r2, r3]
 8008466:	fa21 f303 	lsr.w	r3, r1, r3
 800846a:	4a08      	ldr	r2, [pc, #32]	; (800848c <HAL_RCC_ClockConfig+0x2f0>)
 800846c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800846e:	4b08      	ldr	r3, [pc, #32]	; (8008490 <HAL_RCC_ClockConfig+0x2f4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4618      	mov	r0, r3
 8008474:	f7fd f9ee 	bl	8005854 <HAL_InitTick>
  
  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3778      	adds	r7, #120	; 0x78
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	40021000 	.word	0x40021000
 8008488:	0800d648 	.word	0x0800d648
 800848c:	20000054 	.word	0x20000054
 8008490:	20000060 	.word	0x20000060

08008494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008494:	b480      	push	{r7}
 8008496:	b08b      	sub	sp, #44	; 0x2c
 8008498:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800849a:	2300      	movs	r3, #0
 800849c:	61fb      	str	r3, [r7, #28]
 800849e:	2300      	movs	r3, #0
 80084a0:	61bb      	str	r3, [r7, #24]
 80084a2:	2300      	movs	r3, #0
 80084a4:	627b      	str	r3, [r7, #36]	; 0x24
 80084a6:	2300      	movs	r3, #0
 80084a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80084ae:	4b29      	ldr	r3, [pc, #164]	; (8008554 <HAL_RCC_GetSysClockFreq+0xc0>)
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	f003 030c 	and.w	r3, r3, #12
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	d002      	beq.n	80084c4 <HAL_RCC_GetSysClockFreq+0x30>
 80084be:	2b08      	cmp	r3, #8
 80084c0:	d003      	beq.n	80084ca <HAL_RCC_GetSysClockFreq+0x36>
 80084c2:	e03c      	b.n	800853e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80084c4:	4b24      	ldr	r3, [pc, #144]	; (8008558 <HAL_RCC_GetSysClockFreq+0xc4>)
 80084c6:	623b      	str	r3, [r7, #32]
      break;
 80084c8:	e03c      	b.n	8008544 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80084d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80084d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	fa92 f2a2 	rbit	r2, r2
 80084dc:	607a      	str	r2, [r7, #4]
  return result;
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	fab2 f282 	clz	r2, r2
 80084e4:	b2d2      	uxtb	r2, r2
 80084e6:	40d3      	lsrs	r3, r2
 80084e8:	4a1c      	ldr	r2, [pc, #112]	; (800855c <HAL_RCC_GetSysClockFreq+0xc8>)
 80084ea:	5cd3      	ldrb	r3, [r2, r3]
 80084ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80084ee:	4b19      	ldr	r3, [pc, #100]	; (8008554 <HAL_RCC_GetSysClockFreq+0xc0>)
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	220f      	movs	r2, #15
 80084f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	fa92 f2a2 	rbit	r2, r2
 8008500:	60fa      	str	r2, [r7, #12]
  return result;
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	fab2 f282 	clz	r2, r2
 8008508:	b2d2      	uxtb	r2, r2
 800850a:	40d3      	lsrs	r3, r2
 800850c:	4a14      	ldr	r2, [pc, #80]	; (8008560 <HAL_RCC_GetSysClockFreq+0xcc>)
 800850e:	5cd3      	ldrb	r3, [r2, r3]
 8008510:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d008      	beq.n	800852e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800851c:	4a0e      	ldr	r2, [pc, #56]	; (8008558 <HAL_RCC_GetSysClockFreq+0xc4>)
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	fbb2 f2f3 	udiv	r2, r2, r3
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	fb02 f303 	mul.w	r3, r2, r3
 800852a:	627b      	str	r3, [r7, #36]	; 0x24
 800852c:	e004      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	4a0c      	ldr	r2, [pc, #48]	; (8008564 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008532:	fb02 f303 	mul.w	r3, r2, r3
 8008536:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853a:	623b      	str	r3, [r7, #32]
      break;
 800853c:	e002      	b.n	8008544 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800853e:	4b06      	ldr	r3, [pc, #24]	; (8008558 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008540:	623b      	str	r3, [r7, #32]
      break;
 8008542:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008544:	6a3b      	ldr	r3, [r7, #32]
}
 8008546:	4618      	mov	r0, r3
 8008548:	372c      	adds	r7, #44	; 0x2c
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	40021000 	.word	0x40021000
 8008558:	007a1200 	.word	0x007a1200
 800855c:	0800d660 	.word	0x0800d660
 8008560:	0800d670 	.word	0x0800d670
 8008564:	003d0900 	.word	0x003d0900

08008568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800856c:	4b03      	ldr	r3, [pc, #12]	; (800857c <HAL_RCC_GetHCLKFreq+0x14>)
 800856e:	681b      	ldr	r3, [r3, #0]
}
 8008570:	4618      	mov	r0, r3
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	20000054 	.word	0x20000054

08008580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008586:	f7ff ffef 	bl	8008568 <HAL_RCC_GetHCLKFreq>
 800858a:	4601      	mov	r1, r0
 800858c:	4b0b      	ldr	r3, [pc, #44]	; (80085bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008594:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008598:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	fa92 f2a2 	rbit	r2, r2
 80085a0:	603a      	str	r2, [r7, #0]
  return result;
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	fab2 f282 	clz	r2, r2
 80085a8:	b2d2      	uxtb	r2, r2
 80085aa:	40d3      	lsrs	r3, r2
 80085ac:	4a04      	ldr	r2, [pc, #16]	; (80085c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80085ae:	5cd3      	ldrb	r3, [r2, r3]
 80085b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80085b4:	4618      	mov	r0, r3
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	40021000 	.word	0x40021000
 80085c0:	0800d658 	.word	0x0800d658

080085c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80085ca:	f7ff ffcd 	bl	8008568 <HAL_RCC_GetHCLKFreq>
 80085ce:	4601      	mov	r1, r0
 80085d0:	4b0b      	ldr	r3, [pc, #44]	; (8008600 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80085d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80085dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	fa92 f2a2 	rbit	r2, r2
 80085e4:	603a      	str	r2, [r7, #0]
  return result;
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	fab2 f282 	clz	r2, r2
 80085ec:	b2d2      	uxtb	r2, r2
 80085ee:	40d3      	lsrs	r3, r2
 80085f0:	4a04      	ldr	r2, [pc, #16]	; (8008604 <HAL_RCC_GetPCLK2Freq+0x40>)
 80085f2:	5cd3      	ldrb	r3, [r2, r3]
 80085f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	40021000 	.word	0x40021000
 8008604:	0800d658 	.word	0x0800d658

08008608 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b092      	sub	sp, #72	; 0x48
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008618:	2300      	movs	r3, #0
 800861a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 80d4 	beq.w	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800862c:	4b4e      	ldr	r3, [pc, #312]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10e      	bne.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008638:	4b4b      	ldr	r3, [pc, #300]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	4a4a      	ldr	r2, [pc, #296]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800863e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008642:	61d3      	str	r3, [r2, #28]
 8008644:	4b48      	ldr	r3, [pc, #288]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800864c:	60bb      	str	r3, [r7, #8]
 800864e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008650:	2301      	movs	r3, #1
 8008652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008656:	4b45      	ldr	r3, [pc, #276]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800865e:	2b00      	cmp	r3, #0
 8008660:	d118      	bne.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008662:	4b42      	ldr	r3, [pc, #264]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a41      	ldr	r2, [pc, #260]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800866c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800866e:	f7fd f935 	bl	80058dc <HAL_GetTick>
 8008672:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008674:	e008      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008676:	f7fd f931 	bl	80058dc <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b64      	cmp	r3, #100	; 0x64
 8008682:	d901      	bls.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e13c      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008688:	4b38      	ldr	r3, [pc, #224]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0f0      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008694:	4b34      	ldr	r3, [pc, #208]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800869c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800869e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 8084 	beq.w	80087ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d07c      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086b4:	4b2c      	ldr	r3, [pc, #176]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	fa93 f3a3 	rbit	r3, r3
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80086cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086ce:	fab3 f383 	clz	r3, r3
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	461a      	mov	r2, r3
 80086d6:	4b26      	ldr	r3, [pc, #152]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	461a      	mov	r2, r3
 80086de:	2301      	movs	r3, #1
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ea:	fa93 f3a3 	rbit	r3, r3
 80086ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80086f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086f2:	fab3 f383 	clz	r3, r3
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	461a      	mov	r2, r3
 80086fa:	4b1d      	ldr	r3, [pc, #116]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80086fc:	4413      	add	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	461a      	mov	r2, r3
 8008702:	2300      	movs	r3, #0
 8008704:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008706:	4a18      	ldr	r2, [pc, #96]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800870c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	d04b      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008716:	f7fd f8e1 	bl	80058dc <HAL_GetTick>
 800871a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800871c:	e00a      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800871e:	f7fd f8dd 	bl	80058dc <HAL_GetTick>
 8008722:	4602      	mov	r2, r0
 8008724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	f241 3288 	movw	r2, #5000	; 0x1388
 800872c:	4293      	cmp	r3, r2
 800872e:	d901      	bls.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e0e6      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8008734:	2302      	movs	r3, #2
 8008736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873a:	fa93 f3a3 	rbit	r3, r3
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
 8008740:	2302      	movs	r3, #2
 8008742:	623b      	str	r3, [r7, #32]
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	fa93 f3a3 	rbit	r3, r3
 800874a:	61fb      	str	r3, [r7, #28]
  return result;
 800874c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800874e:	fab3 f383 	clz	r3, r3
 8008752:	b2db      	uxtb	r3, r3
 8008754:	095b      	lsrs	r3, r3, #5
 8008756:	b2db      	uxtb	r3, r3
 8008758:	f043 0302 	orr.w	r3, r3, #2
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b02      	cmp	r3, #2
 8008760:	d108      	bne.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008762:	4b01      	ldr	r3, [pc, #4]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	e00d      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008768:	40021000 	.word	0x40021000
 800876c:	40007000 	.word	0x40007000
 8008770:	10908100 	.word	0x10908100
 8008774:	2302      	movs	r3, #2
 8008776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	fa93 f3a3 	rbit	r3, r3
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	4b62      	ldr	r3, [pc, #392]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	2202      	movs	r2, #2
 8008786:	613a      	str	r2, [r7, #16]
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	fa92 f2a2 	rbit	r2, r2
 800878e:	60fa      	str	r2, [r7, #12]
  return result;
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	fab2 f282 	clz	r2, r2
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800879c:	b2d2      	uxtb	r2, r2
 800879e:	f002 021f 	and.w	r2, r2, #31
 80087a2:	2101      	movs	r1, #1
 80087a4:	fa01 f202 	lsl.w	r2, r1, r2
 80087a8:	4013      	ands	r3, r2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0b7      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80087ae:	4b57      	ldr	r3, [pc, #348]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	4954      	ldr	r1, [pc, #336]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80087c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d105      	bne.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087c8:	4b50      	ldr	r3, [pc, #320]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	4a4f      	ldr	r2, [pc, #316]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0301 	and.w	r3, r3, #1
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d008      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087e0:	4b4a      	ldr	r3, [pc, #296]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e4:	f023 0203 	bic.w	r2, r3, #3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	4947      	ldr	r1, [pc, #284]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0320 	and.w	r3, r3, #32
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d008      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80087fe:	4b43      	ldr	r3, [pc, #268]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008802:	f023 0210 	bic.w	r2, r3, #16
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	4940      	ldr	r1, [pc, #256]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800880c:	4313      	orrs	r3, r2
 800880e:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008818:	2b00      	cmp	r3, #0
 800881a:	d008      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800881c:	4b3b      	ldr	r3, [pc, #236]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800881e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008820:	f023 0220 	bic.w	r2, r3, #32
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	4938      	ldr	r1, [pc, #224]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800882a:	4313      	orrs	r3, r2
 800882c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d008      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800883a:	4b34      	ldr	r3, [pc, #208]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800883c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	4931      	ldr	r1, [pc, #196]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008848:	4313      	orrs	r3, r2
 800884a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008854:	2b00      	cmp	r3, #0
 8008856:	d008      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008858:	4b2c      	ldr	r3, [pc, #176]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	4929      	ldr	r1, [pc, #164]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008866:	4313      	orrs	r3, r2
 8008868:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008872:	2b00      	cmp	r3, #0
 8008874:	d008      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8008876:	4b25      	ldr	r3, [pc, #148]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	4922      	ldr	r1, [pc, #136]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008884:	4313      	orrs	r3, r2
 8008886:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d008      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008894:	4b1d      	ldr	r3, [pc, #116]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008898:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	491a      	ldr	r1, [pc, #104]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d008      	beq.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80088b2:	4b16      	ldr	r3, [pc, #88]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	4913      	ldr	r1, [pc, #76]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d008      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80088d0:	4b0e      	ldr	r3, [pc, #56]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088dc:	490b      	ldr	r1, [pc, #44]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d008      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80088ee:	4b07      	ldr	r3, [pc, #28]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fa:	4904      	ldr	r1, [pc, #16]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3748      	adds	r7, #72	; 0x48
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	40021000 	.word	0x40021000

08008910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e09d      	b.n	8008a5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	2b00      	cmp	r3, #0
 8008928:	d108      	bne.n	800893c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008932:	d009      	beq.n	8008948 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	61da      	str	r2, [r3, #28]
 800893a:	e005      	b.n	8008948 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d106      	bne.n	8008968 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7fb fd94 	bl	8004490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800897e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008988:	d902      	bls.n	8008990 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800898a:	2300      	movs	r3, #0
 800898c:	60fb      	str	r3, [r7, #12]
 800898e:	e002      	b.n	8008996 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008994:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800899e:	d007      	beq.n	80089b0 <HAL_SPI_Init+0xa0>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089a8:	d002      	beq.n	80089b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089c0:	431a      	orrs	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	f003 0301 	and.w	r3, r3, #1
 80089d4:	431a      	orrs	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089de:	431a      	orrs	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	69db      	ldr	r3, [r3, #28]
 80089e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089e8:	431a      	orrs	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f2:	ea42 0103 	orr.w	r1, r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	430a      	orrs	r2, r1
 8008a04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	0c1b      	lsrs	r3, r3, #16
 8008a0c:	f003 0204 	and.w	r2, r3, #4
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a14:	f003 0310 	and.w	r3, r3, #16
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1e:	f003 0308 	and.w	r3, r3, #8
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008a2c:	ea42 0103 	orr.w	r1, r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69da      	ldr	r2, [r3, #28]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b088      	sub	sp, #32
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	603b      	str	r3, [r7, #0]
 8008a72:	4613      	mov	r3, r2
 8008a74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d101      	bne.n	8008a88 <HAL_SPI_Transmit+0x22>
 8008a84:	2302      	movs	r3, #2
 8008a86:	e15f      	b.n	8008d48 <HAL_SPI_Transmit+0x2e2>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a90:	f7fc ff24 	bl	80058dc <HAL_GetTick>
 8008a94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008a96:	88fb      	ldrh	r3, [r7, #6]
 8008a98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d002      	beq.n	8008aac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008aaa:	e148      	b.n	8008d3e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <HAL_SPI_Transmit+0x52>
 8008ab2:	88fb      	ldrh	r3, [r7, #6]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d102      	bne.n	8008abe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008abc:	e13f      	b.n	8008d3e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2203      	movs	r2, #3
 8008ac2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	88fa      	ldrh	r2, [r7, #6]
 8008ad6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	88fa      	ldrh	r2, [r7, #6]
 8008adc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b08:	d10f      	bne.n	8008b2a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b34:	2b40      	cmp	r3, #64	; 0x40
 8008b36:	d007      	beq.n	8008b48 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b50:	d94f      	bls.n	8008bf2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <HAL_SPI_Transmit+0xfa>
 8008b5a:	8afb      	ldrh	r3, [r7, #22]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d142      	bne.n	8008be6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b64:	881a      	ldrh	r2, [r3, #0]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b70:	1c9a      	adds	r2, r3, #2
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b84:	e02f      	b.n	8008be6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f003 0302 	and.w	r3, r3, #2
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d112      	bne.n	8008bba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b98:	881a      	ldrh	r2, [r3, #0]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba4:	1c9a      	adds	r2, r3, #2
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bb8:	e015      	b.n	8008be6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bba:	f7fc fe8f 	bl	80058dc <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d803      	bhi.n	8008bd2 <HAL_SPI_Transmit+0x16c>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd0:	d102      	bne.n	8008bd8 <HAL_SPI_Transmit+0x172>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d106      	bne.n	8008be6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008be4:	e0ab      	b.n	8008d3e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1ca      	bne.n	8008b86 <HAL_SPI_Transmit+0x120>
 8008bf0:	e080      	b.n	8008cf4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d002      	beq.n	8008c00 <HAL_SPI_Transmit+0x19a>
 8008bfa:	8afb      	ldrh	r3, [r7, #22]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d174      	bne.n	8008cea <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d912      	bls.n	8008c30 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0e:	881a      	ldrh	r2, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	1c9a      	adds	r2, r3, #2
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	3b02      	subs	r3, #2
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c2e:	e05c      	b.n	8008cea <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	330c      	adds	r3, #12
 8008c3a:	7812      	ldrb	r2, [r2, #0]
 8008c3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008c56:	e048      	b.n	8008cea <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d12b      	bne.n	8008cbe <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d912      	bls.n	8008c96 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c74:	881a      	ldrh	r2, [r3, #0]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	1c9a      	adds	r2, r3, #2
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	3b02      	subs	r3, #2
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c94:	e029      	b.n	8008cea <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	330c      	adds	r3, #12
 8008ca0:	7812      	ldrb	r2, [r2, #0]
 8008ca2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cbc:	e015      	b.n	8008cea <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cbe:	f7fc fe0d 	bl	80058dc <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d803      	bhi.n	8008cd6 <HAL_SPI_Transmit+0x270>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd4:	d102      	bne.n	8008cdc <HAL_SPI_Transmit+0x276>
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d106      	bne.n	8008cea <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008ce8:	e029      	b.n	8008d3e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1b1      	bne.n	8008c58 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 fbd7 	bl	80094ac <SPI_EndRxTxTransaction>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2220      	movs	r2, #32
 8008d08:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10a      	bne.n	8008d28 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d12:	2300      	movs	r3, #0
 8008d14:	613b      	str	r3, [r7, #16]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	613b      	str	r3, [r7, #16]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	613b      	str	r3, [r7, #16]
 8008d26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d002      	beq.n	8008d36 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	77fb      	strb	r3, [r7, #31]
 8008d34:	e003      	b.n	8008d3e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d46:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3720      	adds	r7, #32
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d101      	bne.n	8008d70 <HAL_SPI_Transmit_DMA+0x20>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	e0d4      	b.n	8008f1a <HAL_SPI_Transmit_DMA+0x1ca>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d002      	beq.n	8008d8a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008d84:	2302      	movs	r3, #2
 8008d86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d88:	e0c2      	b.n	8008f10 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <HAL_SPI_Transmit_DMA+0x46>
 8008d90:	88fb      	ldrh	r3, [r7, #6]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d102      	bne.n	8008d9c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d9a:	e0b9      	b.n	8008f10 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2203      	movs	r2, #3
 8008da0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	88fa      	ldrh	r2, [r7, #6]
 8008db4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	88fa      	ldrh	r2, [r7, #6]
 8008dba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008de6:	d10f      	bne.n	8008e08 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008df6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e0c:	4a45      	ldr	r2, [pc, #276]	; (8008f24 <HAL_SPI_Transmit_DMA+0x1d4>)
 8008e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e14:	4a44      	ldr	r2, [pc, #272]	; (8008f28 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008e16:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e1c:	4a43      	ldr	r2, [pc, #268]	; (8008f2c <HAL_SPI_Transmit_DMA+0x1dc>)
 8008e1e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e24:	2200      	movs	r2, #0
 8008e26:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e36:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e40:	d82d      	bhi.n	8008e9e <HAL_SPI_Transmit_DMA+0x14e>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e46:	695b      	ldr	r3, [r3, #20]
 8008e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e4c:	d127      	bne.n	8008e9e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10f      	bne.n	8008e7c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e6a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	085b      	lsrs	r3, r3, #1
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e7a:	e010      	b.n	8008e9e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e8a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	085b      	lsrs	r3, r3, #1
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3301      	adds	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	330c      	adds	r3, #12
 8008eae:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008eb6:	f7fc fe99 	bl	8005bec <HAL_DMA_Start_IT>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d008      	beq.n	8008ed2 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ec4:	f043 0210 	orr.w	r2, r3, #16
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	75fb      	strb	r3, [r7, #23]

    goto error;
 8008ed0:	e01e      	b.n	8008f10 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008edc:	2b40      	cmp	r3, #64	; 0x40
 8008ede:	d007      	beq.n	8008ef0 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eee:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f042 0220 	orr.w	r2, r2, #32
 8008efe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f042 0202 	orr.w	r2, r2, #2
 8008f0e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	080091eb 	.word	0x080091eb
 8008f28:	08009145 	.word	0x08009145
 8008f2c:	08009207 	.word	0x08009207

08008f30 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	099b      	lsrs	r3, r3, #6
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10f      	bne.n	8008f74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00a      	beq.n	8008f74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	099b      	lsrs	r3, r3, #6
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d004      	beq.n	8008f74 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	4798      	blx	r3
    return;
 8008f72:	e0d7      	b.n	8009124 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	085b      	lsrs	r3, r3, #1
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00a      	beq.n	8008f96 <HAL_SPI_IRQHandler+0x66>
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	09db      	lsrs	r3, r3, #7
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d004      	beq.n	8008f96 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	4798      	blx	r3
    return;
 8008f94:	e0c6      	b.n	8009124 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	095b      	lsrs	r3, r3, #5
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10c      	bne.n	8008fbc <HAL_SPI_IRQHandler+0x8c>
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	099b      	lsrs	r3, r3, #6
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	0a1b      	lsrs	r3, r3, #8
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 80b4 	beq.w	8009124 <HAL_SPI_IRQHandler+0x1f4>
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	095b      	lsrs	r3, r3, #5
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 80ad 	beq.w	8009124 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	099b      	lsrs	r3, r3, #6
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d023      	beq.n	800901e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d011      	beq.n	8009006 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fe6:	f043 0204 	orr.w	r2, r3, #4
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fee:	2300      	movs	r3, #0
 8008ff0:	617b      	str	r3, [r7, #20]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	617b      	str	r3, [r7, #20]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	617b      	str	r3, [r7, #20]
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	e00b      	b.n	800901e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009006:	2300      	movs	r3, #0
 8009008:	613b      	str	r3, [r7, #16]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	613b      	str	r3, [r7, #16]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	613b      	str	r3, [r7, #16]
 800901a:	693b      	ldr	r3, [r7, #16]
        return;
 800901c:	e082      	b.n	8009124 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	095b      	lsrs	r3, r3, #5
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	d014      	beq.n	8009054 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800902e:	f043 0201 	orr.w	r2, r3, #1
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	60fb      	str	r3, [r7, #12]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	0a1b      	lsrs	r3, r3, #8
 8009058:	f003 0301 	and.w	r3, r3, #1
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00c      	beq.n	800907a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009064:	f043 0208 	orr.w	r2, r3, #8
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800906c:	2300      	movs	r3, #0
 800906e:	60bb      	str	r3, [r7, #8]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	60bb      	str	r3, [r7, #8]
 8009078:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800907e:	2b00      	cmp	r3, #0
 8009080:	d04f      	beq.n	8009122 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685a      	ldr	r2, [r3, #4]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009090:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d104      	bne.n	80090ae <HAL_SPI_IRQHandler+0x17e>
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d034      	beq.n	8009118 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0203 	bic.w	r2, r2, #3
 80090bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d011      	beq.n	80090ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ca:	4a18      	ldr	r2, [pc, #96]	; (800912c <HAL_SPI_IRQHandler+0x1fc>)
 80090cc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fc fe22 	bl	8005d1c <HAL_DMA_Abort_IT>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d005      	beq.n	80090ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d016      	beq.n	8009120 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090f6:	4a0d      	ldr	r2, [pc, #52]	; (800912c <HAL_SPI_IRQHandler+0x1fc>)
 80090f8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fc fe0c 	bl	8005d1c <HAL_DMA_Abort_IT>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00a      	beq.n	8009120 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800910e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009116:	e003      	b.n	8009120 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7fb fd93 	bl	8004c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800911e:	e000      	b.n	8009122 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009120:	bf00      	nop
    return;
 8009122:	bf00      	nop
  }
}
 8009124:	3720      	adds	r7, #32
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	08009247 	.word	0x08009247

08009130 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009150:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009152:	f7fc fbc3 	bl	80058dc <HAL_GetTick>
 8009156:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 0320 	and.w	r3, r3, #32
 8009162:	2b20      	cmp	r3, #32
 8009164:	d03b      	beq.n	80091de <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0220 	bic.w	r2, r2, #32
 8009174:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0202 	bic.w	r2, r2, #2
 8009184:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	2164      	movs	r1, #100	; 0x64
 800918a:	6978      	ldr	r0, [r7, #20]
 800918c:	f000 f98e 	bl	80094ac <SPI_EndRxTxTransaction>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d005      	beq.n	80091a2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800919a:	f043 0220 	orr.w	r2, r3, #32
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10a      	bne.n	80091c0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	60fb      	str	r3, [r7, #12]
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	60fb      	str	r3, [r7, #12]
 80091be:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	2200      	movs	r2, #0
 80091c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d003      	beq.n	80091de <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80091d6:	6978      	ldr	r0, [r7, #20]
 80091d8:	f7fb fd34 	bl	8004c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80091dc:	e002      	b.n	80091e4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80091de:	6978      	ldr	r0, [r7, #20]
 80091e0:	f7fb fd46 	bl	8004c70 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f7ff ff99 	bl	8009130 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091fe:	bf00      	nop
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009212:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 0203 	bic.w	r2, r2, #3
 8009222:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009228:	f043 0210 	orr.w	r2, r3, #16
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f7fb fd03 	bl	8004c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800923e:	bf00      	nop
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b084      	sub	sp, #16
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009252:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f7fb fcee 	bl	8004c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009268:	bf00      	nop
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	603b      	str	r3, [r7, #0]
 800927c:	4613      	mov	r3, r2
 800927e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009280:	f7fc fb2c 	bl	80058dc <HAL_GetTick>
 8009284:	4602      	mov	r2, r0
 8009286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009288:	1a9b      	subs	r3, r3, r2
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	4413      	add	r3, r2
 800928e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009290:	f7fc fb24 	bl	80058dc <HAL_GetTick>
 8009294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009296:	4b39      	ldr	r3, [pc, #228]	; (800937c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	015b      	lsls	r3, r3, #5
 800929c:	0d1b      	lsrs	r3, r3, #20
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	fb02 f303 	mul.w	r3, r2, r3
 80092a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092a6:	e054      	b.n	8009352 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ae:	d050      	beq.n	8009352 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092b0:	f7fc fb14 	bl	80058dc <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	69fa      	ldr	r2, [r7, #28]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d902      	bls.n	80092c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d13d      	bne.n	8009342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092de:	d111      	bne.n	8009304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092e8:	d004      	beq.n	80092f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092f2:	d107      	bne.n	8009304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800930c:	d10f      	bne.n	800932e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800932c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e017      	b.n	8009372 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	3b01      	subs	r3, #1
 8009350:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	4013      	ands	r3, r2
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	429a      	cmp	r2, r3
 8009360:	bf0c      	ite	eq
 8009362:	2301      	moveq	r3, #1
 8009364:	2300      	movne	r3, #0
 8009366:	b2db      	uxtb	r3, r3
 8009368:	461a      	mov	r2, r3
 800936a:	79fb      	ldrb	r3, [r7, #7]
 800936c:	429a      	cmp	r2, r3
 800936e:	d19b      	bne.n	80092a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3720      	adds	r7, #32
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	20000054 	.word	0x20000054

08009380 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08a      	sub	sp, #40	; 0x28
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009392:	f7fc faa3 	bl	80058dc <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939a:	1a9b      	subs	r3, r3, r2
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	4413      	add	r3, r2
 80093a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80093a2:	f7fc fa9b 	bl	80058dc <HAL_GetTick>
 80093a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	330c      	adds	r3, #12
 80093ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80093b0:	4b3d      	ldr	r3, [pc, #244]	; (80094a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	4613      	mov	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4413      	add	r3, r2
 80093ba:	00da      	lsls	r2, r3, #3
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	0d1b      	lsrs	r3, r3, #20
 80093c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093c2:	fb02 f303 	mul.w	r3, r2, r3
 80093c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80093c8:	e060      	b.n	800948c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80093d0:	d107      	bne.n	80093e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d104      	bne.n	80093e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e8:	d050      	beq.n	800948c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093ea:	f7fc fa77 	bl	80058dc <HAL_GetTick>
 80093ee:	4602      	mov	r2, r0
 80093f0:	6a3b      	ldr	r3, [r7, #32]
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d902      	bls.n	8009400 <SPI_WaitFifoStateUntilTimeout+0x80>
 80093fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d13d      	bne.n	800947c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	685a      	ldr	r2, [r3, #4]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800940e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009418:	d111      	bne.n	800943e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009422:	d004      	beq.n	800942e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800942c:	d107      	bne.n	800943e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800943c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009446:	d10f      	bne.n	8009468 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009466:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e010      	b.n	800949e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d101      	bne.n	8009486 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009482:	2300      	movs	r3, #0
 8009484:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	3b01      	subs	r3, #1
 800948a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689a      	ldr	r2, [r3, #8]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	4013      	ands	r3, r2
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	429a      	cmp	r2, r3
 800949a:	d196      	bne.n	80093ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3728      	adds	r7, #40	; 0x28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	20000054 	.word	0x20000054

080094ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af02      	add	r7, sp, #8
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2200      	movs	r2, #0
 80094c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f7ff ff5b 	bl	8009380 <SPI_WaitFifoStateUntilTimeout>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d007      	beq.n	80094e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094d4:	f043 0220 	orr.w	r2, r3, #32
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80094dc:	2303      	movs	r3, #3
 80094de:	e027      	b.n	8009530 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2200      	movs	r2, #0
 80094e8:	2180      	movs	r1, #128	; 0x80
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f7ff fec0 	bl	8009270 <SPI_WaitFlagStateUntilTimeout>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d007      	beq.n	8009506 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094fa:	f043 0220 	orr.w	r2, r3, #32
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e014      	b.n	8009530 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	2200      	movs	r2, #0
 800950e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f7ff ff34 	bl	8009380 <SPI_WaitFifoStateUntilTimeout>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d007      	beq.n	800952e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009522:	f043 0220 	orr.w	r2, r3, #32
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e000      	b.n	8009530 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e040      	b.n	80095cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800954e:	2b00      	cmp	r3, #0
 8009550:	d106      	bne.n	8009560 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7fb f80e 	bl	800457c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2224      	movs	r2, #36	; 0x24
 8009564:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0201 	bic.w	r2, r2, #1
 8009574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fbbc 	bl	8009cf4 <UART_SetConfig>
 800957c:	4603      	mov	r3, r0
 800957e:	2b01      	cmp	r3, #1
 8009580:	d101      	bne.n	8009586 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e022      	b.n	80095cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958a:	2b00      	cmp	r3, #0
 800958c:	d002      	beq.n	8009594 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fce6 	bl	8009f60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689a      	ldr	r2, [r3, #8]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f042 0201 	orr.w	r2, r2, #1
 80095c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fd6d 	bl	800a0a4 <UART_CheckIdleState>
 80095ca:	4603      	mov	r3, r0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08a      	sub	sp, #40	; 0x28
 80095d8:	af02      	add	r7, sp, #8
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	603b      	str	r3, [r7, #0]
 80095e0:	4613      	mov	r3, r2
 80095e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	d178      	bne.n	80096de <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d002      	beq.n	80095f8 <HAL_UART_Transmit+0x24>
 80095f2:	88fb      	ldrh	r3, [r7, #6]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e071      	b.n	80096e0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2221      	movs	r2, #33	; 0x21
 8009608:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800960a:	f7fc f967 	bl	80058dc <HAL_GetTick>
 800960e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	88fa      	ldrh	r2, [r7, #6]
 8009614:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	88fa      	ldrh	r2, [r7, #6]
 800961c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009628:	d108      	bne.n	800963c <HAL_UART_Transmit+0x68>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d104      	bne.n	800963c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009632:	2300      	movs	r3, #0
 8009634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	61bb      	str	r3, [r7, #24]
 800963a:	e003      	b.n	8009644 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009640:	2300      	movs	r3, #0
 8009642:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009644:	e030      	b.n	80096a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2200      	movs	r2, #0
 800964e:	2180      	movs	r1, #128	; 0x80
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 fdcf 	bl	800a1f4 <UART_WaitOnFlagUntilTimeout>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d004      	beq.n	8009666 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2220      	movs	r2, #32
 8009660:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	e03c      	b.n	80096e0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10b      	bne.n	8009684 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	881a      	ldrh	r2, [r3, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009678:	b292      	uxth	r2, r2
 800967a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	3302      	adds	r3, #2
 8009680:	61bb      	str	r3, [r7, #24]
 8009682:	e008      	b.n	8009696 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	781a      	ldrb	r2, [r3, #0]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	b292      	uxth	r2, r2
 800968e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	3301      	adds	r3, #1
 8009694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800969c:	b29b      	uxth	r3, r3
 800969e:	3b01      	subs	r3, #1
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1c8      	bne.n	8009646 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	2200      	movs	r2, #0
 80096bc:	2140      	movs	r1, #64	; 0x40
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f000 fd98 	bl	800a1f4 <UART_WaitOnFlagUntilTimeout>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2220      	movs	r2, #32
 80096ce:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e005      	b.n	80096e0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2220      	movs	r2, #32
 80096d8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	e000      	b.n	80096e0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80096de:	2302      	movs	r3, #2
  }
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3720      	adds	r7, #32
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b0ba      	sub	sp, #232	; 0xe8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	69db      	ldr	r3, [r3, #28]
 80096f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800970e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009712:	f640 030f 	movw	r3, #2063	; 0x80f
 8009716:	4013      	ands	r3, r2
 8009718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800971c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009720:	2b00      	cmp	r3, #0
 8009722:	d115      	bne.n	8009750 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009728:	f003 0320 	and.w	r3, r3, #32
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00f      	beq.n	8009750 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009734:	f003 0320 	and.w	r3, r3, #32
 8009738:	2b00      	cmp	r3, #0
 800973a:	d009      	beq.n	8009750 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 82ab 	beq.w	8009c9c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	4798      	blx	r3
      }
      return;
 800974e:	e2a5      	b.n	8009c9c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009754:	2b00      	cmp	r3, #0
 8009756:	f000 8117 	beq.w	8009988 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800975a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009766:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800976a:	4b85      	ldr	r3, [pc, #532]	; (8009980 <HAL_UART_IRQHandler+0x298>)
 800976c:	4013      	ands	r3, r2
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 810a 	beq.w	8009988 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	2b00      	cmp	r3, #0
 800977e:	d011      	beq.n	80097a4 <HAL_UART_IRQHandler+0xbc>
 8009780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00b      	beq.n	80097a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2201      	movs	r2, #1
 8009792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800979a:	f043 0201 	orr.w	r2, r3, #1
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097a8:	f003 0302 	and.w	r3, r3, #2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d011      	beq.n	80097d4 <HAL_UART_IRQHandler+0xec>
 80097b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097b4:	f003 0301 	and.w	r3, r3, #1
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00b      	beq.n	80097d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2202      	movs	r2, #2
 80097c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097ca:	f043 0204 	orr.w	r2, r3, #4
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d011      	beq.n	8009804 <HAL_UART_IRQHandler+0x11c>
 80097e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097e4:	f003 0301 	and.w	r3, r3, #1
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00b      	beq.n	8009804 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2204      	movs	r2, #4
 80097f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097fa:	f043 0202 	orr.w	r2, r3, #2
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009808:	f003 0308 	and.w	r3, r3, #8
 800980c:	2b00      	cmp	r3, #0
 800980e:	d017      	beq.n	8009840 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009814:	f003 0320 	and.w	r3, r3, #32
 8009818:	2b00      	cmp	r3, #0
 800981a:	d105      	bne.n	8009828 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800981c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009820:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00b      	beq.n	8009840 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2208      	movs	r2, #8
 800982e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009836:	f043 0208 	orr.w	r2, r3, #8
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009848:	2b00      	cmp	r3, #0
 800984a:	d012      	beq.n	8009872 <HAL_UART_IRQHandler+0x18a>
 800984c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00c      	beq.n	8009872 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009868:	f043 0220 	orr.w	r2, r3, #32
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 8211 	beq.w	8009ca0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800987e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009882:	f003 0320 	and.w	r3, r3, #32
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00d      	beq.n	80098a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800988a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800988e:	f003 0320 	and.w	r3, r3, #32
 8009892:	2b00      	cmp	r3, #0
 8009894:	d007      	beq.n	80098a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ba:	2b40      	cmp	r3, #64	; 0x40
 80098bc:	d005      	beq.n	80098ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d04f      	beq.n	800996a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fcf9 	bl	800a2c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098da:	2b40      	cmp	r3, #64	; 0x40
 80098dc:	d141      	bne.n	8009962 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3308      	adds	r3, #8
 80098e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098ec:	e853 3f00 	ldrex	r3, [r3]
 80098f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80098f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3308      	adds	r3, #8
 8009906:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800990a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800990e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009912:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009916:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800991a:	e841 2300 	strex	r3, r2, [r1]
 800991e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1d9      	bne.n	80098de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800992e:	2b00      	cmp	r3, #0
 8009930:	d013      	beq.n	800995a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009936:	4a13      	ldr	r2, [pc, #76]	; (8009984 <HAL_UART_IRQHandler+0x29c>)
 8009938:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800993e:	4618      	mov	r0, r3
 8009940:	f7fc f9ec 	bl	8005d1c <HAL_DMA_Abort_IT>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d017      	beq.n	800997a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800994e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009954:	4610      	mov	r0, r2
 8009956:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009958:	e00f      	b.n	800997a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f9b4 	bl	8009cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009960:	e00b      	b.n	800997a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f9b0 	bl	8009cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009968:	e007      	b.n	800997a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f9ac 	bl	8009cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009978:	e192      	b.n	8009ca0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997a:	bf00      	nop
    return;
 800997c:	e190      	b.n	8009ca0 <HAL_UART_IRQHandler+0x5b8>
 800997e:	bf00      	nop
 8009980:	04000120 	.word	0x04000120
 8009984:	0800a38b 	.word	0x0800a38b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800998c:	2b01      	cmp	r3, #1
 800998e:	f040 814b 	bne.w	8009c28 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009996:	f003 0310 	and.w	r3, r3, #16
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 8144 	beq.w	8009c28 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80099a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099a4:	f003 0310 	and.w	r3, r3, #16
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f000 813d 	beq.w	8009c28 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2210      	movs	r2, #16
 80099b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c0:	2b40      	cmp	r3, #64	; 0x40
 80099c2:	f040 80b5 	bne.w	8009b30 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 8164 	beq.w	8009ca4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80099e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099e6:	429a      	cmp	r2, r3
 80099e8:	f080 815c 	bcs.w	8009ca4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	2b20      	cmp	r3, #32
 80099fe:	f000 8086 	beq.w	8009b0e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a0e:	e853 3f00 	ldrex	r3, [r3]
 8009a12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	461a      	mov	r2, r3
 8009a28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009a2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a30:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a34:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009a38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a3c:	e841 2300 	strex	r3, r2, [r1]
 8009a40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1da      	bne.n	8009a02 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3308      	adds	r3, #8
 8009a52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a56:	e853 3f00 	ldrex	r3, [r3]
 8009a5a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a5e:	f023 0301 	bic.w	r3, r3, #1
 8009a62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a7c:	e841 2300 	strex	r3, r2, [r1]
 8009a80:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1e1      	bne.n	8009a4c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a92:	e853 3f00 	ldrex	r3, [r3]
 8009a96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009aac:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009aae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ab2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ab4:	e841 2300 	strex	r3, r2, [r1]
 8009ab8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1e3      	bne.n	8009a88 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad6:	e853 3f00 	ldrex	r3, [r3]
 8009ada:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ade:	f023 0310 	bic.w	r3, r3, #16
 8009ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009af0:	65bb      	str	r3, [r7, #88]	; 0x58
 8009af2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009af6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009af8:	e841 2300 	strex	r3, r2, [r1]
 8009afc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1e4      	bne.n	8009ace <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fc f8ce 	bl	8005caa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2202      	movs	r2, #2
 8009b12:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	4619      	mov	r1, r3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f8d7 	bl	8009cdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b2e:	e0b9      	b.n	8009ca4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f000 80ab 	beq.w	8009ca8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8009b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f000 80a6 	beq.w	8009ca8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b64:	e853 3f00 	ldrex	r3, [r3]
 8009b68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8009b80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b86:	e841 2300 	strex	r3, r2, [r1]
 8009b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1e4      	bne.n	8009b5c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3308      	adds	r3, #8
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	e853 3f00 	ldrex	r3, [r3]
 8009ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ba2:	6a3b      	ldr	r3, [r7, #32]
 8009ba4:	f023 0301 	bic.w	r3, r3, #1
 8009ba8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3308      	adds	r3, #8
 8009bb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009bb6:	633a      	str	r2, [r7, #48]	; 0x30
 8009bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bbe:	e841 2300 	strex	r3, r2, [r1]
 8009bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1e3      	bne.n	8009b92 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2220      	movs	r2, #32
 8009bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	e853 3f00 	ldrex	r3, [r3]
 8009bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f023 0310 	bic.w	r3, r3, #16
 8009bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c00:	61fb      	str	r3, [r7, #28]
 8009c02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c04:	69b9      	ldr	r1, [r7, #24]
 8009c06:	69fa      	ldr	r2, [r7, #28]
 8009c08:	e841 2300 	strex	r3, r2, [r1]
 8009c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1e4      	bne.n	8009bde <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2202      	movs	r2, #2
 8009c18:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f85b 	bl	8009cdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c26:	e03f      	b.n	8009ca8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00e      	beq.n	8009c52 <HAL_UART_IRQHandler+0x56a>
 8009c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d008      	beq.n	8009c52 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009c48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fbdd 	bl	800a40a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c50:	e02d      	b.n	8009cae <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00e      	beq.n	8009c7c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d008      	beq.n	8009c7c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d01c      	beq.n	8009cac <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	4798      	blx	r3
    }
    return;
 8009c7a:	e017      	b.n	8009cac <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d012      	beq.n	8009cae <HAL_UART_IRQHandler+0x5c6>
 8009c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00c      	beq.n	8009cae <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fb8e 	bl	800a3b6 <UART_EndTransmit_IT>
    return;
 8009c9a:	e008      	b.n	8009cae <HAL_UART_IRQHandler+0x5c6>
      return;
 8009c9c:	bf00      	nop
 8009c9e:	e006      	b.n	8009cae <HAL_UART_IRQHandler+0x5c6>
    return;
 8009ca0:	bf00      	nop
 8009ca2:	e004      	b.n	8009cae <HAL_UART_IRQHandler+0x5c6>
      return;
 8009ca4:	bf00      	nop
 8009ca6:	e002      	b.n	8009cae <HAL_UART_IRQHandler+0x5c6>
      return;
 8009ca8:	bf00      	nop
 8009caa:	e000      	b.n	8009cae <HAL_UART_IRQHandler+0x5c6>
    return;
 8009cac:	bf00      	nop
  }

}
 8009cae:	37e8      	adds	r7, #232	; 0xe8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b088      	sub	sp, #32
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	689a      	ldr	r2, [r3, #8]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	69db      	ldr	r3, [r3, #28]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	4b8a      	ldr	r3, [pc, #552]	; (8009f48 <UART_SetConfig+0x254>)
 8009d20:	4013      	ands	r3, r2
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	6812      	ldr	r2, [r2, #0]
 8009d26:	6979      	ldr	r1, [r7, #20]
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6a1b      	ldr	r3, [r3, #32]
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	430a      	orrs	r2, r1
 8009d64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a78      	ldr	r2, [pc, #480]	; (8009f4c <UART_SetConfig+0x258>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d120      	bne.n	8009db2 <UART_SetConfig+0xbe>
 8009d70:	4b77      	ldr	r3, [pc, #476]	; (8009f50 <UART_SetConfig+0x25c>)
 8009d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d74:	f003 0303 	and.w	r3, r3, #3
 8009d78:	2b03      	cmp	r3, #3
 8009d7a:	d817      	bhi.n	8009dac <UART_SetConfig+0xb8>
 8009d7c:	a201      	add	r2, pc, #4	; (adr r2, 8009d84 <UART_SetConfig+0x90>)
 8009d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d82:	bf00      	nop
 8009d84:	08009d95 	.word	0x08009d95
 8009d88:	08009da1 	.word	0x08009da1
 8009d8c:	08009da7 	.word	0x08009da7
 8009d90:	08009d9b 	.word	0x08009d9b
 8009d94:	2300      	movs	r3, #0
 8009d96:	77fb      	strb	r3, [r7, #31]
 8009d98:	e01d      	b.n	8009dd6 <UART_SetConfig+0xe2>
 8009d9a:	2302      	movs	r3, #2
 8009d9c:	77fb      	strb	r3, [r7, #31]
 8009d9e:	e01a      	b.n	8009dd6 <UART_SetConfig+0xe2>
 8009da0:	2304      	movs	r3, #4
 8009da2:	77fb      	strb	r3, [r7, #31]
 8009da4:	e017      	b.n	8009dd6 <UART_SetConfig+0xe2>
 8009da6:	2308      	movs	r3, #8
 8009da8:	77fb      	strb	r3, [r7, #31]
 8009daa:	e014      	b.n	8009dd6 <UART_SetConfig+0xe2>
 8009dac:	2310      	movs	r3, #16
 8009dae:	77fb      	strb	r3, [r7, #31]
 8009db0:	e011      	b.n	8009dd6 <UART_SetConfig+0xe2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a67      	ldr	r2, [pc, #412]	; (8009f54 <UART_SetConfig+0x260>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d102      	bne.n	8009dc2 <UART_SetConfig+0xce>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	77fb      	strb	r3, [r7, #31]
 8009dc0:	e009      	b.n	8009dd6 <UART_SetConfig+0xe2>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a64      	ldr	r2, [pc, #400]	; (8009f58 <UART_SetConfig+0x264>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d102      	bne.n	8009dd2 <UART_SetConfig+0xde>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	77fb      	strb	r3, [r7, #31]
 8009dd0:	e001      	b.n	8009dd6 <UART_SetConfig+0xe2>
 8009dd2:	2310      	movs	r3, #16
 8009dd4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dde:	d15a      	bne.n	8009e96 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8009de0:	7ffb      	ldrb	r3, [r7, #31]
 8009de2:	2b08      	cmp	r3, #8
 8009de4:	d827      	bhi.n	8009e36 <UART_SetConfig+0x142>
 8009de6:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <UART_SetConfig+0xf8>)
 8009de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dec:	08009e11 	.word	0x08009e11
 8009df0:	08009e19 	.word	0x08009e19
 8009df4:	08009e21 	.word	0x08009e21
 8009df8:	08009e37 	.word	0x08009e37
 8009dfc:	08009e27 	.word	0x08009e27
 8009e00:	08009e37 	.word	0x08009e37
 8009e04:	08009e37 	.word	0x08009e37
 8009e08:	08009e37 	.word	0x08009e37
 8009e0c:	08009e2f 	.word	0x08009e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e10:	f7fe fbb6 	bl	8008580 <HAL_RCC_GetPCLK1Freq>
 8009e14:	61b8      	str	r0, [r7, #24]
        break;
 8009e16:	e013      	b.n	8009e40 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e18:	f7fe fbd4 	bl	80085c4 <HAL_RCC_GetPCLK2Freq>
 8009e1c:	61b8      	str	r0, [r7, #24]
        break;
 8009e1e:	e00f      	b.n	8009e40 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e20:	4b4e      	ldr	r3, [pc, #312]	; (8009f5c <UART_SetConfig+0x268>)
 8009e22:	61bb      	str	r3, [r7, #24]
        break;
 8009e24:	e00c      	b.n	8009e40 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e26:	f7fe fb35 	bl	8008494 <HAL_RCC_GetSysClockFreq>
 8009e2a:	61b8      	str	r0, [r7, #24]
        break;
 8009e2c:	e008      	b.n	8009e40 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e32:	61bb      	str	r3, [r7, #24]
        break;
 8009e34:	e004      	b.n	8009e40 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8009e36:	2300      	movs	r3, #0
 8009e38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	77bb      	strb	r3, [r7, #30]
        break;
 8009e3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d074      	beq.n	8009f30 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	005a      	lsls	r2, r3, #1
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	085b      	lsrs	r3, r3, #1
 8009e50:	441a      	add	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	2b0f      	cmp	r3, #15
 8009e60:	d916      	bls.n	8009e90 <UART_SetConfig+0x19c>
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e68:	d212      	bcs.n	8009e90 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	f023 030f 	bic.w	r3, r3, #15
 8009e72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	085b      	lsrs	r3, r3, #1
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	89fb      	ldrh	r3, [r7, #14]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	89fa      	ldrh	r2, [r7, #14]
 8009e8c:	60da      	str	r2, [r3, #12]
 8009e8e:	e04f      	b.n	8009f30 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	77bb      	strb	r3, [r7, #30]
 8009e94:	e04c      	b.n	8009f30 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e96:	7ffb      	ldrb	r3, [r7, #31]
 8009e98:	2b08      	cmp	r3, #8
 8009e9a:	d828      	bhi.n	8009eee <UART_SetConfig+0x1fa>
 8009e9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ea4 <UART_SetConfig+0x1b0>)
 8009e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea2:	bf00      	nop
 8009ea4:	08009ec9 	.word	0x08009ec9
 8009ea8:	08009ed1 	.word	0x08009ed1
 8009eac:	08009ed9 	.word	0x08009ed9
 8009eb0:	08009eef 	.word	0x08009eef
 8009eb4:	08009edf 	.word	0x08009edf
 8009eb8:	08009eef 	.word	0x08009eef
 8009ebc:	08009eef 	.word	0x08009eef
 8009ec0:	08009eef 	.word	0x08009eef
 8009ec4:	08009ee7 	.word	0x08009ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ec8:	f7fe fb5a 	bl	8008580 <HAL_RCC_GetPCLK1Freq>
 8009ecc:	61b8      	str	r0, [r7, #24]
        break;
 8009ece:	e013      	b.n	8009ef8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ed0:	f7fe fb78 	bl	80085c4 <HAL_RCC_GetPCLK2Freq>
 8009ed4:	61b8      	str	r0, [r7, #24]
        break;
 8009ed6:	e00f      	b.n	8009ef8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ed8:	4b20      	ldr	r3, [pc, #128]	; (8009f5c <UART_SetConfig+0x268>)
 8009eda:	61bb      	str	r3, [r7, #24]
        break;
 8009edc:	e00c      	b.n	8009ef8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ede:	f7fe fad9 	bl	8008494 <HAL_RCC_GetSysClockFreq>
 8009ee2:	61b8      	str	r0, [r7, #24]
        break;
 8009ee4:	e008      	b.n	8009ef8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eea:	61bb      	str	r3, [r7, #24]
        break;
 8009eec:	e004      	b.n	8009ef8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	77bb      	strb	r3, [r7, #30]
        break;
 8009ef6:	bf00      	nop
    }

    if (pclk != 0U)
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d018      	beq.n	8009f30 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	085a      	lsrs	r2, r3, #1
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	441a      	add	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	2b0f      	cmp	r3, #15
 8009f16:	d909      	bls.n	8009f2c <UART_SetConfig+0x238>
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f1e:	d205      	bcs.n	8009f2c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	60da      	str	r2, [r3, #12]
 8009f2a:	e001      	b.n	8009f30 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009f3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3720      	adds	r7, #32
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	efff69f3 	.word	0xefff69f3
 8009f4c:	40013800 	.word	0x40013800
 8009f50:	40021000 	.word	0x40021000
 8009f54:	40004400 	.word	0x40004400
 8009f58:	40004800 	.word	0x40004800
 8009f5c:	007a1200 	.word	0x007a1200

08009f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6c:	f003 0301 	and.w	r3, r3, #1
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00a      	beq.n	8009f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	430a      	orrs	r2, r1
 8009f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8e:	f003 0302 	and.w	r3, r3, #2
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00a      	beq.n	8009fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	430a      	orrs	r2, r1
 8009faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb0:	f003 0304 	and.w	r3, r3, #4
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00a      	beq.n	8009fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	430a      	orrs	r2, r1
 8009fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd2:	f003 0308 	and.w	r3, r3, #8
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00a      	beq.n	8009ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	430a      	orrs	r2, r1
 8009fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff4:	f003 0310 	and.w	r3, r3, #16
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00a      	beq.n	800a012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	430a      	orrs	r2, r1
 800a010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a016:	f003 0320 	and.w	r3, r3, #32
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00a      	beq.n	800a034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	430a      	orrs	r2, r1
 800a032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d01a      	beq.n	800a076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	430a      	orrs	r2, r1
 800a054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a05e:	d10a      	bne.n	800a076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	430a      	orrs	r2, r1
 800a074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00a      	beq.n	800a098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	430a      	orrs	r2, r1
 800a096:	605a      	str	r2, [r3, #4]
  }
}
 800a098:	bf00      	nop
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b098      	sub	sp, #96	; 0x60
 800a0a8:	af02      	add	r7, sp, #8
 800a0aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0b4:	f7fb fc12 	bl	80058dc <HAL_GetTick>
 800a0b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 0308 	and.w	r3, r3, #8
 800a0c4:	2b08      	cmp	r3, #8
 800a0c6:	d12e      	bne.n	800a126 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f88c 	bl	800a1f4 <UART_WaitOnFlagUntilTimeout>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d021      	beq.n	800a126 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	e853 3f00 	ldrex	r3, [r3]
 800a0ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0f6:	653b      	str	r3, [r7, #80]	; 0x50
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a100:	647b      	str	r3, [r7, #68]	; 0x44
 800a102:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a104:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a108:	e841 2300 	strex	r3, r2, [r1]
 800a10c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1e6      	bne.n	800a0e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2220      	movs	r2, #32
 800a118:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a122:	2303      	movs	r3, #3
 800a124:	e062      	b.n	800a1ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 0304 	and.w	r3, r3, #4
 800a130:	2b04      	cmp	r3, #4
 800a132:	d149      	bne.n	800a1c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a134:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a13c:	2200      	movs	r2, #0
 800a13e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f856 	bl	800a1f4 <UART_WaitOnFlagUntilTimeout>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d03c      	beq.n	800a1c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	e853 3f00 	ldrex	r3, [r3]
 800a15a:	623b      	str	r3, [r7, #32]
   return(result);
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a162:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	461a      	mov	r2, r3
 800a16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a16c:	633b      	str	r3, [r7, #48]	; 0x30
 800a16e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a170:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a174:	e841 2300 	strex	r3, r2, [r1]
 800a178:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1e6      	bne.n	800a14e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	3308      	adds	r3, #8
 800a186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	e853 3f00 	ldrex	r3, [r3]
 800a18e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f023 0301 	bic.w	r3, r3, #1
 800a196:	64bb      	str	r3, [r7, #72]	; 0x48
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	3308      	adds	r3, #8
 800a19e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1a0:	61fa      	str	r2, [r7, #28]
 800a1a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a4:	69b9      	ldr	r1, [r7, #24]
 800a1a6:	69fa      	ldr	r2, [r7, #28]
 800a1a8:	e841 2300 	strex	r3, r2, [r1]
 800a1ac:	617b      	str	r3, [r7, #20]
   return(result);
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e5      	bne.n	800a180 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2220      	movs	r2, #32
 800a1b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e011      	b.n	800a1ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2220      	movs	r2, #32
 800a1cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3758      	adds	r7, #88	; 0x58
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	603b      	str	r3, [r7, #0]
 800a200:	4613      	mov	r3, r2
 800a202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a204:	e049      	b.n	800a29a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20c:	d045      	beq.n	800a29a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a20e:	f7fb fb65 	bl	80058dc <HAL_GetTick>
 800a212:	4602      	mov	r2, r0
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	69ba      	ldr	r2, [r7, #24]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d302      	bcc.n	800a224 <UART_WaitOnFlagUntilTimeout+0x30>
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	e048      	b.n	800a2ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 0304 	and.w	r3, r3, #4
 800a232:	2b00      	cmp	r3, #0
 800a234:	d031      	beq.n	800a29a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	69db      	ldr	r3, [r3, #28]
 800a23c:	f003 0308 	and.w	r3, r3, #8
 800a240:	2b08      	cmp	r3, #8
 800a242:	d110      	bne.n	800a266 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2208      	movs	r2, #8
 800a24a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f000 f838 	bl	800a2c2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2208      	movs	r2, #8
 800a256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e029      	b.n	800a2ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	69db      	ldr	r3, [r3, #28]
 800a26c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a274:	d111      	bne.n	800a29a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a27e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f000 f81e 	bl	800a2c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2220      	movs	r2, #32
 800a28a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a296:	2303      	movs	r3, #3
 800a298:	e00f      	b.n	800a2ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	69da      	ldr	r2, [r3, #28]
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	4013      	ands	r3, r2
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	bf0c      	ite	eq
 800a2aa:	2301      	moveq	r3, #1
 800a2ac:	2300      	movne	r3, #0
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	79fb      	ldrb	r3, [r7, #7]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d0a6      	beq.n	800a206 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2c2:	b480      	push	{r7}
 800a2c4:	b095      	sub	sp, #84	; 0x54
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d2:	e853 3f00 	ldrex	r3, [r3]
 800a2d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2e8:	643b      	str	r3, [r7, #64]	; 0x40
 800a2ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2f0:	e841 2300 	strex	r3, r2, [r1]
 800a2f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1e6      	bne.n	800a2ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3308      	adds	r3, #8
 800a302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a304:	6a3b      	ldr	r3, [r7, #32]
 800a306:	e853 3f00 	ldrex	r3, [r3]
 800a30a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	f023 0301 	bic.w	r3, r3, #1
 800a312:	64bb      	str	r3, [r7, #72]	; 0x48
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3308      	adds	r3, #8
 800a31a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a31c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a31e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a324:	e841 2300 	strex	r3, r2, [r1]
 800a328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e5      	bne.n	800a2fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a334:	2b01      	cmp	r3, #1
 800a336:	d118      	bne.n	800a36a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	e853 3f00 	ldrex	r3, [r3]
 800a344:	60bb      	str	r3, [r7, #8]
   return(result);
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	f023 0310 	bic.w	r3, r3, #16
 800a34c:	647b      	str	r3, [r7, #68]	; 0x44
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a356:	61bb      	str	r3, [r7, #24]
 800a358:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35a:	6979      	ldr	r1, [r7, #20]
 800a35c:	69ba      	ldr	r2, [r7, #24]
 800a35e:	e841 2300 	strex	r3, r2, [r1]
 800a362:	613b      	str	r3, [r7, #16]
   return(result);
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1e6      	bne.n	800a338 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2220      	movs	r2, #32
 800a36e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a37e:	bf00      	nop
 800a380:	3754      	adds	r7, #84	; 0x54
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b084      	sub	sp, #16
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a396:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f7ff fc8d 	bl	8009cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3ae:	bf00      	nop
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b088      	sub	sp, #32
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	e853 3f00 	ldrex	r3, [r3]
 800a3ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3d2:	61fb      	str	r3, [r7, #28]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	61bb      	str	r3, [r7, #24]
 800a3de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e0:	6979      	ldr	r1, [r7, #20]
 800a3e2:	69ba      	ldr	r2, [r7, #24]
 800a3e4:	e841 2300 	strex	r3, r2, [r1]
 800a3e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1e6      	bne.n	800a3be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2220      	movs	r2, #32
 800a3f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f7ff fc59 	bl	8009cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a402:	bf00      	nop
 800a404:	3720      	adds	r7, #32
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a40a:	b480      	push	{r7}
 800a40c:	b083      	sub	sp, #12
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a412:	bf00      	nop
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
	...

0800a420 <__errno>:
 800a420:	4b01      	ldr	r3, [pc, #4]	; (800a428 <__errno+0x8>)
 800a422:	6818      	ldr	r0, [r3, #0]
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	20000068 	.word	0x20000068

0800a42c <__libc_init_array>:
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	4d0d      	ldr	r5, [pc, #52]	; (800a464 <__libc_init_array+0x38>)
 800a430:	4c0d      	ldr	r4, [pc, #52]	; (800a468 <__libc_init_array+0x3c>)
 800a432:	1b64      	subs	r4, r4, r5
 800a434:	10a4      	asrs	r4, r4, #2
 800a436:	2600      	movs	r6, #0
 800a438:	42a6      	cmp	r6, r4
 800a43a:	d109      	bne.n	800a450 <__libc_init_array+0x24>
 800a43c:	4d0b      	ldr	r5, [pc, #44]	; (800a46c <__libc_init_array+0x40>)
 800a43e:	4c0c      	ldr	r4, [pc, #48]	; (800a470 <__libc_init_array+0x44>)
 800a440:	f001 fb14 	bl	800ba6c <_init>
 800a444:	1b64      	subs	r4, r4, r5
 800a446:	10a4      	asrs	r4, r4, #2
 800a448:	2600      	movs	r6, #0
 800a44a:	42a6      	cmp	r6, r4
 800a44c:	d105      	bne.n	800a45a <__libc_init_array+0x2e>
 800a44e:	bd70      	pop	{r4, r5, r6, pc}
 800a450:	f855 3b04 	ldr.w	r3, [r5], #4
 800a454:	4798      	blx	r3
 800a456:	3601      	adds	r6, #1
 800a458:	e7ee      	b.n	800a438 <__libc_init_array+0xc>
 800a45a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a45e:	4798      	blx	r3
 800a460:	3601      	adds	r6, #1
 800a462:	e7f2      	b.n	800a44a <__libc_init_array+0x1e>
 800a464:	0800d7c8 	.word	0x0800d7c8
 800a468:	0800d7c8 	.word	0x0800d7c8
 800a46c:	0800d7c8 	.word	0x0800d7c8
 800a470:	0800d7cc 	.word	0x0800d7cc

0800a474 <memset>:
 800a474:	4402      	add	r2, r0
 800a476:	4603      	mov	r3, r0
 800a478:	4293      	cmp	r3, r2
 800a47a:	d100      	bne.n	800a47e <memset+0xa>
 800a47c:	4770      	bx	lr
 800a47e:	f803 1b01 	strb.w	r1, [r3], #1
 800a482:	e7f9      	b.n	800a478 <memset+0x4>

0800a484 <iprintf>:
 800a484:	b40f      	push	{r0, r1, r2, r3}
 800a486:	4b0a      	ldr	r3, [pc, #40]	; (800a4b0 <iprintf+0x2c>)
 800a488:	b513      	push	{r0, r1, r4, lr}
 800a48a:	681c      	ldr	r4, [r3, #0]
 800a48c:	b124      	cbz	r4, 800a498 <iprintf+0x14>
 800a48e:	69a3      	ldr	r3, [r4, #24]
 800a490:	b913      	cbnz	r3, 800a498 <iprintf+0x14>
 800a492:	4620      	mov	r0, r4
 800a494:	f000 fb2c 	bl	800aaf0 <__sinit>
 800a498:	ab05      	add	r3, sp, #20
 800a49a:	9a04      	ldr	r2, [sp, #16]
 800a49c:	68a1      	ldr	r1, [r4, #8]
 800a49e:	9301      	str	r3, [sp, #4]
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 feab 	bl	800b1fc <_vfiprintf_r>
 800a4a6:	b002      	add	sp, #8
 800a4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4ac:	b004      	add	sp, #16
 800a4ae:	4770      	bx	lr
 800a4b0:	20000068 	.word	0x20000068

0800a4b4 <_puts_r>:
 800a4b4:	b570      	push	{r4, r5, r6, lr}
 800a4b6:	460e      	mov	r6, r1
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	b118      	cbz	r0, 800a4c4 <_puts_r+0x10>
 800a4bc:	6983      	ldr	r3, [r0, #24]
 800a4be:	b90b      	cbnz	r3, 800a4c4 <_puts_r+0x10>
 800a4c0:	f000 fb16 	bl	800aaf0 <__sinit>
 800a4c4:	69ab      	ldr	r3, [r5, #24]
 800a4c6:	68ac      	ldr	r4, [r5, #8]
 800a4c8:	b913      	cbnz	r3, 800a4d0 <_puts_r+0x1c>
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f000 fb10 	bl	800aaf0 <__sinit>
 800a4d0:	4b2c      	ldr	r3, [pc, #176]	; (800a584 <_puts_r+0xd0>)
 800a4d2:	429c      	cmp	r4, r3
 800a4d4:	d120      	bne.n	800a518 <_puts_r+0x64>
 800a4d6:	686c      	ldr	r4, [r5, #4]
 800a4d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4da:	07db      	lsls	r3, r3, #31
 800a4dc:	d405      	bmi.n	800a4ea <_puts_r+0x36>
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	0598      	lsls	r0, r3, #22
 800a4e2:	d402      	bmi.n	800a4ea <_puts_r+0x36>
 800a4e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4e6:	f000 fbb3 	bl	800ac50 <__retarget_lock_acquire_recursive>
 800a4ea:	89a3      	ldrh	r3, [r4, #12]
 800a4ec:	0719      	lsls	r1, r3, #28
 800a4ee:	d51d      	bpl.n	800a52c <_puts_r+0x78>
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	b1db      	cbz	r3, 800a52c <_puts_r+0x78>
 800a4f4:	3e01      	subs	r6, #1
 800a4f6:	68a3      	ldr	r3, [r4, #8]
 800a4f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	60a3      	str	r3, [r4, #8]
 800a500:	bb39      	cbnz	r1, 800a552 <_puts_r+0x9e>
 800a502:	2b00      	cmp	r3, #0
 800a504:	da38      	bge.n	800a578 <_puts_r+0xc4>
 800a506:	4622      	mov	r2, r4
 800a508:	210a      	movs	r1, #10
 800a50a:	4628      	mov	r0, r5
 800a50c:	f000 f8f8 	bl	800a700 <__swbuf_r>
 800a510:	3001      	adds	r0, #1
 800a512:	d011      	beq.n	800a538 <_puts_r+0x84>
 800a514:	250a      	movs	r5, #10
 800a516:	e011      	b.n	800a53c <_puts_r+0x88>
 800a518:	4b1b      	ldr	r3, [pc, #108]	; (800a588 <_puts_r+0xd4>)
 800a51a:	429c      	cmp	r4, r3
 800a51c:	d101      	bne.n	800a522 <_puts_r+0x6e>
 800a51e:	68ac      	ldr	r4, [r5, #8]
 800a520:	e7da      	b.n	800a4d8 <_puts_r+0x24>
 800a522:	4b1a      	ldr	r3, [pc, #104]	; (800a58c <_puts_r+0xd8>)
 800a524:	429c      	cmp	r4, r3
 800a526:	bf08      	it	eq
 800a528:	68ec      	ldreq	r4, [r5, #12]
 800a52a:	e7d5      	b.n	800a4d8 <_puts_r+0x24>
 800a52c:	4621      	mov	r1, r4
 800a52e:	4628      	mov	r0, r5
 800a530:	f000 f938 	bl	800a7a4 <__swsetup_r>
 800a534:	2800      	cmp	r0, #0
 800a536:	d0dd      	beq.n	800a4f4 <_puts_r+0x40>
 800a538:	f04f 35ff 	mov.w	r5, #4294967295
 800a53c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a53e:	07da      	lsls	r2, r3, #31
 800a540:	d405      	bmi.n	800a54e <_puts_r+0x9a>
 800a542:	89a3      	ldrh	r3, [r4, #12]
 800a544:	059b      	lsls	r3, r3, #22
 800a546:	d402      	bmi.n	800a54e <_puts_r+0x9a>
 800a548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a54a:	f000 fb82 	bl	800ac52 <__retarget_lock_release_recursive>
 800a54e:	4628      	mov	r0, r5
 800a550:	bd70      	pop	{r4, r5, r6, pc}
 800a552:	2b00      	cmp	r3, #0
 800a554:	da04      	bge.n	800a560 <_puts_r+0xac>
 800a556:	69a2      	ldr	r2, [r4, #24]
 800a558:	429a      	cmp	r2, r3
 800a55a:	dc06      	bgt.n	800a56a <_puts_r+0xb6>
 800a55c:	290a      	cmp	r1, #10
 800a55e:	d004      	beq.n	800a56a <_puts_r+0xb6>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	1c5a      	adds	r2, r3, #1
 800a564:	6022      	str	r2, [r4, #0]
 800a566:	7019      	strb	r1, [r3, #0]
 800a568:	e7c5      	b.n	800a4f6 <_puts_r+0x42>
 800a56a:	4622      	mov	r2, r4
 800a56c:	4628      	mov	r0, r5
 800a56e:	f000 f8c7 	bl	800a700 <__swbuf_r>
 800a572:	3001      	adds	r0, #1
 800a574:	d1bf      	bne.n	800a4f6 <_puts_r+0x42>
 800a576:	e7df      	b.n	800a538 <_puts_r+0x84>
 800a578:	6823      	ldr	r3, [r4, #0]
 800a57a:	250a      	movs	r5, #10
 800a57c:	1c5a      	adds	r2, r3, #1
 800a57e:	6022      	str	r2, [r4, #0]
 800a580:	701d      	strb	r5, [r3, #0]
 800a582:	e7db      	b.n	800a53c <_puts_r+0x88>
 800a584:	0800d754 	.word	0x0800d754
 800a588:	0800d774 	.word	0x0800d774
 800a58c:	0800d734 	.word	0x0800d734

0800a590 <puts>:
 800a590:	4b02      	ldr	r3, [pc, #8]	; (800a59c <puts+0xc>)
 800a592:	4601      	mov	r1, r0
 800a594:	6818      	ldr	r0, [r3, #0]
 800a596:	f7ff bf8d 	b.w	800a4b4 <_puts_r>
 800a59a:	bf00      	nop
 800a59c:	20000068 	.word	0x20000068

0800a5a0 <srand>:
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	4b10      	ldr	r3, [pc, #64]	; (800a5e4 <srand+0x44>)
 800a5a4:	681d      	ldr	r5, [r3, #0]
 800a5a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	b9b3      	cbnz	r3, 800a5da <srand+0x3a>
 800a5ac:	2018      	movs	r0, #24
 800a5ae:	f000 fbb7 	bl	800ad20 <malloc>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	63a8      	str	r0, [r5, #56]	; 0x38
 800a5b6:	b920      	cbnz	r0, 800a5c2 <srand+0x22>
 800a5b8:	4b0b      	ldr	r3, [pc, #44]	; (800a5e8 <srand+0x48>)
 800a5ba:	480c      	ldr	r0, [pc, #48]	; (800a5ec <srand+0x4c>)
 800a5bc:	2142      	movs	r1, #66	; 0x42
 800a5be:	f000 f95f 	bl	800a880 <__assert_func>
 800a5c2:	490b      	ldr	r1, [pc, #44]	; (800a5f0 <srand+0x50>)
 800a5c4:	4b0b      	ldr	r3, [pc, #44]	; (800a5f4 <srand+0x54>)
 800a5c6:	e9c0 1300 	strd	r1, r3, [r0]
 800a5ca:	4b0b      	ldr	r3, [pc, #44]	; (800a5f8 <srand+0x58>)
 800a5cc:	6083      	str	r3, [r0, #8]
 800a5ce:	230b      	movs	r3, #11
 800a5d0:	8183      	strh	r3, [r0, #12]
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	2001      	movs	r0, #1
 800a5d6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a5da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a5dc:	2200      	movs	r2, #0
 800a5de:	611c      	str	r4, [r3, #16]
 800a5e0:	615a      	str	r2, [r3, #20]
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	20000068 	.word	0x20000068
 800a5e8:	0800d684 	.word	0x0800d684
 800a5ec:	0800d69b 	.word	0x0800d69b
 800a5f0:	abcd330e 	.word	0xabcd330e
 800a5f4:	e66d1234 	.word	0xe66d1234
 800a5f8:	0005deec 	.word	0x0005deec

0800a5fc <rand>:
 800a5fc:	4b16      	ldr	r3, [pc, #88]	; (800a658 <rand+0x5c>)
 800a5fe:	b510      	push	{r4, lr}
 800a600:	681c      	ldr	r4, [r3, #0]
 800a602:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a604:	b9b3      	cbnz	r3, 800a634 <rand+0x38>
 800a606:	2018      	movs	r0, #24
 800a608:	f000 fb8a 	bl	800ad20 <malloc>
 800a60c:	63a0      	str	r0, [r4, #56]	; 0x38
 800a60e:	b928      	cbnz	r0, 800a61c <rand+0x20>
 800a610:	4602      	mov	r2, r0
 800a612:	4b12      	ldr	r3, [pc, #72]	; (800a65c <rand+0x60>)
 800a614:	4812      	ldr	r0, [pc, #72]	; (800a660 <rand+0x64>)
 800a616:	214e      	movs	r1, #78	; 0x4e
 800a618:	f000 f932 	bl	800a880 <__assert_func>
 800a61c:	4a11      	ldr	r2, [pc, #68]	; (800a664 <rand+0x68>)
 800a61e:	4b12      	ldr	r3, [pc, #72]	; (800a668 <rand+0x6c>)
 800a620:	e9c0 2300 	strd	r2, r3, [r0]
 800a624:	4b11      	ldr	r3, [pc, #68]	; (800a66c <rand+0x70>)
 800a626:	6083      	str	r3, [r0, #8]
 800a628:	230b      	movs	r3, #11
 800a62a:	8183      	strh	r3, [r0, #12]
 800a62c:	2201      	movs	r2, #1
 800a62e:	2300      	movs	r3, #0
 800a630:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a634:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a636:	4a0e      	ldr	r2, [pc, #56]	; (800a670 <rand+0x74>)
 800a638:	6920      	ldr	r0, [r4, #16]
 800a63a:	6963      	ldr	r3, [r4, #20]
 800a63c:	490d      	ldr	r1, [pc, #52]	; (800a674 <rand+0x78>)
 800a63e:	4342      	muls	r2, r0
 800a640:	fb01 2203 	mla	r2, r1, r3, r2
 800a644:	fba0 0101 	umull	r0, r1, r0, r1
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	eb42 0001 	adc.w	r0, r2, r1
 800a64e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800a652:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a656:	bd10      	pop	{r4, pc}
 800a658:	20000068 	.word	0x20000068
 800a65c:	0800d684 	.word	0x0800d684
 800a660:	0800d69b 	.word	0x0800d69b
 800a664:	abcd330e 	.word	0xabcd330e
 800a668:	e66d1234 	.word	0xe66d1234
 800a66c:	0005deec 	.word	0x0005deec
 800a670:	5851f42d 	.word	0x5851f42d
 800a674:	4c957f2d 	.word	0x4c957f2d

0800a678 <sniprintf>:
 800a678:	b40c      	push	{r2, r3}
 800a67a:	b530      	push	{r4, r5, lr}
 800a67c:	4b17      	ldr	r3, [pc, #92]	; (800a6dc <sniprintf+0x64>)
 800a67e:	1e0c      	subs	r4, r1, #0
 800a680:	681d      	ldr	r5, [r3, #0]
 800a682:	b09d      	sub	sp, #116	; 0x74
 800a684:	da08      	bge.n	800a698 <sniprintf+0x20>
 800a686:	238b      	movs	r3, #139	; 0x8b
 800a688:	602b      	str	r3, [r5, #0]
 800a68a:	f04f 30ff 	mov.w	r0, #4294967295
 800a68e:	b01d      	add	sp, #116	; 0x74
 800a690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a694:	b002      	add	sp, #8
 800a696:	4770      	bx	lr
 800a698:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a69c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a6a0:	bf14      	ite	ne
 800a6a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a6a6:	4623      	moveq	r3, r4
 800a6a8:	9304      	str	r3, [sp, #16]
 800a6aa:	9307      	str	r3, [sp, #28]
 800a6ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a6b0:	9002      	str	r0, [sp, #8]
 800a6b2:	9006      	str	r0, [sp, #24]
 800a6b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a6b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a6ba:	ab21      	add	r3, sp, #132	; 0x84
 800a6bc:	a902      	add	r1, sp, #8
 800a6be:	4628      	mov	r0, r5
 800a6c0:	9301      	str	r3, [sp, #4]
 800a6c2:	f000 fc71 	bl	800afa8 <_svfiprintf_r>
 800a6c6:	1c43      	adds	r3, r0, #1
 800a6c8:	bfbc      	itt	lt
 800a6ca:	238b      	movlt	r3, #139	; 0x8b
 800a6cc:	602b      	strlt	r3, [r5, #0]
 800a6ce:	2c00      	cmp	r4, #0
 800a6d0:	d0dd      	beq.n	800a68e <sniprintf+0x16>
 800a6d2:	9b02      	ldr	r3, [sp, #8]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	701a      	strb	r2, [r3, #0]
 800a6d8:	e7d9      	b.n	800a68e <sniprintf+0x16>
 800a6da:	bf00      	nop
 800a6dc:	20000068 	.word	0x20000068

0800a6e0 <strcat>:
 800a6e0:	b510      	push	{r4, lr}
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	7814      	ldrb	r4, [r2, #0]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	3201      	adds	r2, #1
 800a6ea:	2c00      	cmp	r4, #0
 800a6ec:	d1fa      	bne.n	800a6e4 <strcat+0x4>
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6f8:	2a00      	cmp	r2, #0
 800a6fa:	d1f9      	bne.n	800a6f0 <strcat+0x10>
 800a6fc:	bd10      	pop	{r4, pc}
	...

0800a700 <__swbuf_r>:
 800a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a702:	460e      	mov	r6, r1
 800a704:	4614      	mov	r4, r2
 800a706:	4605      	mov	r5, r0
 800a708:	b118      	cbz	r0, 800a712 <__swbuf_r+0x12>
 800a70a:	6983      	ldr	r3, [r0, #24]
 800a70c:	b90b      	cbnz	r3, 800a712 <__swbuf_r+0x12>
 800a70e:	f000 f9ef 	bl	800aaf0 <__sinit>
 800a712:	4b21      	ldr	r3, [pc, #132]	; (800a798 <__swbuf_r+0x98>)
 800a714:	429c      	cmp	r4, r3
 800a716:	d12b      	bne.n	800a770 <__swbuf_r+0x70>
 800a718:	686c      	ldr	r4, [r5, #4]
 800a71a:	69a3      	ldr	r3, [r4, #24]
 800a71c:	60a3      	str	r3, [r4, #8]
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	071a      	lsls	r2, r3, #28
 800a722:	d52f      	bpl.n	800a784 <__swbuf_r+0x84>
 800a724:	6923      	ldr	r3, [r4, #16]
 800a726:	b36b      	cbz	r3, 800a784 <__swbuf_r+0x84>
 800a728:	6923      	ldr	r3, [r4, #16]
 800a72a:	6820      	ldr	r0, [r4, #0]
 800a72c:	1ac0      	subs	r0, r0, r3
 800a72e:	6963      	ldr	r3, [r4, #20]
 800a730:	b2f6      	uxtb	r6, r6
 800a732:	4283      	cmp	r3, r0
 800a734:	4637      	mov	r7, r6
 800a736:	dc04      	bgt.n	800a742 <__swbuf_r+0x42>
 800a738:	4621      	mov	r1, r4
 800a73a:	4628      	mov	r0, r5
 800a73c:	f000 f944 	bl	800a9c8 <_fflush_r>
 800a740:	bb30      	cbnz	r0, 800a790 <__swbuf_r+0x90>
 800a742:	68a3      	ldr	r3, [r4, #8]
 800a744:	3b01      	subs	r3, #1
 800a746:	60a3      	str	r3, [r4, #8]
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	1c5a      	adds	r2, r3, #1
 800a74c:	6022      	str	r2, [r4, #0]
 800a74e:	701e      	strb	r6, [r3, #0]
 800a750:	6963      	ldr	r3, [r4, #20]
 800a752:	3001      	adds	r0, #1
 800a754:	4283      	cmp	r3, r0
 800a756:	d004      	beq.n	800a762 <__swbuf_r+0x62>
 800a758:	89a3      	ldrh	r3, [r4, #12]
 800a75a:	07db      	lsls	r3, r3, #31
 800a75c:	d506      	bpl.n	800a76c <__swbuf_r+0x6c>
 800a75e:	2e0a      	cmp	r6, #10
 800a760:	d104      	bne.n	800a76c <__swbuf_r+0x6c>
 800a762:	4621      	mov	r1, r4
 800a764:	4628      	mov	r0, r5
 800a766:	f000 f92f 	bl	800a9c8 <_fflush_r>
 800a76a:	b988      	cbnz	r0, 800a790 <__swbuf_r+0x90>
 800a76c:	4638      	mov	r0, r7
 800a76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a770:	4b0a      	ldr	r3, [pc, #40]	; (800a79c <__swbuf_r+0x9c>)
 800a772:	429c      	cmp	r4, r3
 800a774:	d101      	bne.n	800a77a <__swbuf_r+0x7a>
 800a776:	68ac      	ldr	r4, [r5, #8]
 800a778:	e7cf      	b.n	800a71a <__swbuf_r+0x1a>
 800a77a:	4b09      	ldr	r3, [pc, #36]	; (800a7a0 <__swbuf_r+0xa0>)
 800a77c:	429c      	cmp	r4, r3
 800a77e:	bf08      	it	eq
 800a780:	68ec      	ldreq	r4, [r5, #12]
 800a782:	e7ca      	b.n	800a71a <__swbuf_r+0x1a>
 800a784:	4621      	mov	r1, r4
 800a786:	4628      	mov	r0, r5
 800a788:	f000 f80c 	bl	800a7a4 <__swsetup_r>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d0cb      	beq.n	800a728 <__swbuf_r+0x28>
 800a790:	f04f 37ff 	mov.w	r7, #4294967295
 800a794:	e7ea      	b.n	800a76c <__swbuf_r+0x6c>
 800a796:	bf00      	nop
 800a798:	0800d754 	.word	0x0800d754
 800a79c:	0800d774 	.word	0x0800d774
 800a7a0:	0800d734 	.word	0x0800d734

0800a7a4 <__swsetup_r>:
 800a7a4:	4b32      	ldr	r3, [pc, #200]	; (800a870 <__swsetup_r+0xcc>)
 800a7a6:	b570      	push	{r4, r5, r6, lr}
 800a7a8:	681d      	ldr	r5, [r3, #0]
 800a7aa:	4606      	mov	r6, r0
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	b125      	cbz	r5, 800a7ba <__swsetup_r+0x16>
 800a7b0:	69ab      	ldr	r3, [r5, #24]
 800a7b2:	b913      	cbnz	r3, 800a7ba <__swsetup_r+0x16>
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	f000 f99b 	bl	800aaf0 <__sinit>
 800a7ba:	4b2e      	ldr	r3, [pc, #184]	; (800a874 <__swsetup_r+0xd0>)
 800a7bc:	429c      	cmp	r4, r3
 800a7be:	d10f      	bne.n	800a7e0 <__swsetup_r+0x3c>
 800a7c0:	686c      	ldr	r4, [r5, #4]
 800a7c2:	89a3      	ldrh	r3, [r4, #12]
 800a7c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7c8:	0719      	lsls	r1, r3, #28
 800a7ca:	d42c      	bmi.n	800a826 <__swsetup_r+0x82>
 800a7cc:	06dd      	lsls	r5, r3, #27
 800a7ce:	d411      	bmi.n	800a7f4 <__swsetup_r+0x50>
 800a7d0:	2309      	movs	r3, #9
 800a7d2:	6033      	str	r3, [r6, #0]
 800a7d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7d8:	81a3      	strh	r3, [r4, #12]
 800a7da:	f04f 30ff 	mov.w	r0, #4294967295
 800a7de:	e03e      	b.n	800a85e <__swsetup_r+0xba>
 800a7e0:	4b25      	ldr	r3, [pc, #148]	; (800a878 <__swsetup_r+0xd4>)
 800a7e2:	429c      	cmp	r4, r3
 800a7e4:	d101      	bne.n	800a7ea <__swsetup_r+0x46>
 800a7e6:	68ac      	ldr	r4, [r5, #8]
 800a7e8:	e7eb      	b.n	800a7c2 <__swsetup_r+0x1e>
 800a7ea:	4b24      	ldr	r3, [pc, #144]	; (800a87c <__swsetup_r+0xd8>)
 800a7ec:	429c      	cmp	r4, r3
 800a7ee:	bf08      	it	eq
 800a7f0:	68ec      	ldreq	r4, [r5, #12]
 800a7f2:	e7e6      	b.n	800a7c2 <__swsetup_r+0x1e>
 800a7f4:	0758      	lsls	r0, r3, #29
 800a7f6:	d512      	bpl.n	800a81e <__swsetup_r+0x7a>
 800a7f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7fa:	b141      	cbz	r1, 800a80e <__swsetup_r+0x6a>
 800a7fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a800:	4299      	cmp	r1, r3
 800a802:	d002      	beq.n	800a80a <__swsetup_r+0x66>
 800a804:	4630      	mov	r0, r6
 800a806:	f000 fa93 	bl	800ad30 <_free_r>
 800a80a:	2300      	movs	r3, #0
 800a80c:	6363      	str	r3, [r4, #52]	; 0x34
 800a80e:	89a3      	ldrh	r3, [r4, #12]
 800a810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a814:	81a3      	strh	r3, [r4, #12]
 800a816:	2300      	movs	r3, #0
 800a818:	6063      	str	r3, [r4, #4]
 800a81a:	6923      	ldr	r3, [r4, #16]
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	f043 0308 	orr.w	r3, r3, #8
 800a824:	81a3      	strh	r3, [r4, #12]
 800a826:	6923      	ldr	r3, [r4, #16]
 800a828:	b94b      	cbnz	r3, 800a83e <__swsetup_r+0x9a>
 800a82a:	89a3      	ldrh	r3, [r4, #12]
 800a82c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a834:	d003      	beq.n	800a83e <__swsetup_r+0x9a>
 800a836:	4621      	mov	r1, r4
 800a838:	4630      	mov	r0, r6
 800a83a:	f000 fa31 	bl	800aca0 <__smakebuf_r>
 800a83e:	89a0      	ldrh	r0, [r4, #12]
 800a840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a844:	f010 0301 	ands.w	r3, r0, #1
 800a848:	d00a      	beq.n	800a860 <__swsetup_r+0xbc>
 800a84a:	2300      	movs	r3, #0
 800a84c:	60a3      	str	r3, [r4, #8]
 800a84e:	6963      	ldr	r3, [r4, #20]
 800a850:	425b      	negs	r3, r3
 800a852:	61a3      	str	r3, [r4, #24]
 800a854:	6923      	ldr	r3, [r4, #16]
 800a856:	b943      	cbnz	r3, 800a86a <__swsetup_r+0xc6>
 800a858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a85c:	d1ba      	bne.n	800a7d4 <__swsetup_r+0x30>
 800a85e:	bd70      	pop	{r4, r5, r6, pc}
 800a860:	0781      	lsls	r1, r0, #30
 800a862:	bf58      	it	pl
 800a864:	6963      	ldrpl	r3, [r4, #20]
 800a866:	60a3      	str	r3, [r4, #8]
 800a868:	e7f4      	b.n	800a854 <__swsetup_r+0xb0>
 800a86a:	2000      	movs	r0, #0
 800a86c:	e7f7      	b.n	800a85e <__swsetup_r+0xba>
 800a86e:	bf00      	nop
 800a870:	20000068 	.word	0x20000068
 800a874:	0800d754 	.word	0x0800d754
 800a878:	0800d774 	.word	0x0800d774
 800a87c:	0800d734 	.word	0x0800d734

0800a880 <__assert_func>:
 800a880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a882:	4614      	mov	r4, r2
 800a884:	461a      	mov	r2, r3
 800a886:	4b09      	ldr	r3, [pc, #36]	; (800a8ac <__assert_func+0x2c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4605      	mov	r5, r0
 800a88c:	68d8      	ldr	r0, [r3, #12]
 800a88e:	b14c      	cbz	r4, 800a8a4 <__assert_func+0x24>
 800a890:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <__assert_func+0x30>)
 800a892:	9100      	str	r1, [sp, #0]
 800a894:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a898:	4906      	ldr	r1, [pc, #24]	; (800a8b4 <__assert_func+0x34>)
 800a89a:	462b      	mov	r3, r5
 800a89c:	f000 f9a6 	bl	800abec <fiprintf>
 800a8a0:	f000 ffd6 	bl	800b850 <abort>
 800a8a4:	4b04      	ldr	r3, [pc, #16]	; (800a8b8 <__assert_func+0x38>)
 800a8a6:	461c      	mov	r4, r3
 800a8a8:	e7f3      	b.n	800a892 <__assert_func+0x12>
 800a8aa:	bf00      	nop
 800a8ac:	20000068 	.word	0x20000068
 800a8b0:	0800d6f6 	.word	0x0800d6f6
 800a8b4:	0800d703 	.word	0x0800d703
 800a8b8:	0800d731 	.word	0x0800d731

0800a8bc <__sflush_r>:
 800a8bc:	898a      	ldrh	r2, [r1, #12]
 800a8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c2:	4605      	mov	r5, r0
 800a8c4:	0710      	lsls	r0, r2, #28
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	d458      	bmi.n	800a97c <__sflush_r+0xc0>
 800a8ca:	684b      	ldr	r3, [r1, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	dc05      	bgt.n	800a8dc <__sflush_r+0x20>
 800a8d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	dc02      	bgt.n	800a8dc <__sflush_r+0x20>
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8de:	2e00      	cmp	r6, #0
 800a8e0:	d0f9      	beq.n	800a8d6 <__sflush_r+0x1a>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8e8:	682f      	ldr	r7, [r5, #0]
 800a8ea:	602b      	str	r3, [r5, #0]
 800a8ec:	d032      	beq.n	800a954 <__sflush_r+0x98>
 800a8ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8f0:	89a3      	ldrh	r3, [r4, #12]
 800a8f2:	075a      	lsls	r2, r3, #29
 800a8f4:	d505      	bpl.n	800a902 <__sflush_r+0x46>
 800a8f6:	6863      	ldr	r3, [r4, #4]
 800a8f8:	1ac0      	subs	r0, r0, r3
 800a8fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8fc:	b10b      	cbz	r3, 800a902 <__sflush_r+0x46>
 800a8fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a900:	1ac0      	subs	r0, r0, r3
 800a902:	2300      	movs	r3, #0
 800a904:	4602      	mov	r2, r0
 800a906:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a908:	6a21      	ldr	r1, [r4, #32]
 800a90a:	4628      	mov	r0, r5
 800a90c:	47b0      	blx	r6
 800a90e:	1c43      	adds	r3, r0, #1
 800a910:	89a3      	ldrh	r3, [r4, #12]
 800a912:	d106      	bne.n	800a922 <__sflush_r+0x66>
 800a914:	6829      	ldr	r1, [r5, #0]
 800a916:	291d      	cmp	r1, #29
 800a918:	d82c      	bhi.n	800a974 <__sflush_r+0xb8>
 800a91a:	4a2a      	ldr	r2, [pc, #168]	; (800a9c4 <__sflush_r+0x108>)
 800a91c:	40ca      	lsrs	r2, r1
 800a91e:	07d6      	lsls	r6, r2, #31
 800a920:	d528      	bpl.n	800a974 <__sflush_r+0xb8>
 800a922:	2200      	movs	r2, #0
 800a924:	6062      	str	r2, [r4, #4]
 800a926:	04d9      	lsls	r1, r3, #19
 800a928:	6922      	ldr	r2, [r4, #16]
 800a92a:	6022      	str	r2, [r4, #0]
 800a92c:	d504      	bpl.n	800a938 <__sflush_r+0x7c>
 800a92e:	1c42      	adds	r2, r0, #1
 800a930:	d101      	bne.n	800a936 <__sflush_r+0x7a>
 800a932:	682b      	ldr	r3, [r5, #0]
 800a934:	b903      	cbnz	r3, 800a938 <__sflush_r+0x7c>
 800a936:	6560      	str	r0, [r4, #84]	; 0x54
 800a938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a93a:	602f      	str	r7, [r5, #0]
 800a93c:	2900      	cmp	r1, #0
 800a93e:	d0ca      	beq.n	800a8d6 <__sflush_r+0x1a>
 800a940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a944:	4299      	cmp	r1, r3
 800a946:	d002      	beq.n	800a94e <__sflush_r+0x92>
 800a948:	4628      	mov	r0, r5
 800a94a:	f000 f9f1 	bl	800ad30 <_free_r>
 800a94e:	2000      	movs	r0, #0
 800a950:	6360      	str	r0, [r4, #52]	; 0x34
 800a952:	e7c1      	b.n	800a8d8 <__sflush_r+0x1c>
 800a954:	6a21      	ldr	r1, [r4, #32]
 800a956:	2301      	movs	r3, #1
 800a958:	4628      	mov	r0, r5
 800a95a:	47b0      	blx	r6
 800a95c:	1c41      	adds	r1, r0, #1
 800a95e:	d1c7      	bne.n	800a8f0 <__sflush_r+0x34>
 800a960:	682b      	ldr	r3, [r5, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d0c4      	beq.n	800a8f0 <__sflush_r+0x34>
 800a966:	2b1d      	cmp	r3, #29
 800a968:	d001      	beq.n	800a96e <__sflush_r+0xb2>
 800a96a:	2b16      	cmp	r3, #22
 800a96c:	d101      	bne.n	800a972 <__sflush_r+0xb6>
 800a96e:	602f      	str	r7, [r5, #0]
 800a970:	e7b1      	b.n	800a8d6 <__sflush_r+0x1a>
 800a972:	89a3      	ldrh	r3, [r4, #12]
 800a974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a978:	81a3      	strh	r3, [r4, #12]
 800a97a:	e7ad      	b.n	800a8d8 <__sflush_r+0x1c>
 800a97c:	690f      	ldr	r7, [r1, #16]
 800a97e:	2f00      	cmp	r7, #0
 800a980:	d0a9      	beq.n	800a8d6 <__sflush_r+0x1a>
 800a982:	0793      	lsls	r3, r2, #30
 800a984:	680e      	ldr	r6, [r1, #0]
 800a986:	bf08      	it	eq
 800a988:	694b      	ldreq	r3, [r1, #20]
 800a98a:	600f      	str	r7, [r1, #0]
 800a98c:	bf18      	it	ne
 800a98e:	2300      	movne	r3, #0
 800a990:	eba6 0807 	sub.w	r8, r6, r7
 800a994:	608b      	str	r3, [r1, #8]
 800a996:	f1b8 0f00 	cmp.w	r8, #0
 800a99a:	dd9c      	ble.n	800a8d6 <__sflush_r+0x1a>
 800a99c:	6a21      	ldr	r1, [r4, #32]
 800a99e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9a0:	4643      	mov	r3, r8
 800a9a2:	463a      	mov	r2, r7
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	47b0      	blx	r6
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	dc06      	bgt.n	800a9ba <__sflush_r+0xfe>
 800a9ac:	89a3      	ldrh	r3, [r4, #12]
 800a9ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9b2:	81a3      	strh	r3, [r4, #12]
 800a9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b8:	e78e      	b.n	800a8d8 <__sflush_r+0x1c>
 800a9ba:	4407      	add	r7, r0
 800a9bc:	eba8 0800 	sub.w	r8, r8, r0
 800a9c0:	e7e9      	b.n	800a996 <__sflush_r+0xda>
 800a9c2:	bf00      	nop
 800a9c4:	20400001 	.word	0x20400001

0800a9c8 <_fflush_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	690b      	ldr	r3, [r1, #16]
 800a9cc:	4605      	mov	r5, r0
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	b913      	cbnz	r3, 800a9d8 <_fflush_r+0x10>
 800a9d2:	2500      	movs	r5, #0
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	bd38      	pop	{r3, r4, r5, pc}
 800a9d8:	b118      	cbz	r0, 800a9e2 <_fflush_r+0x1a>
 800a9da:	6983      	ldr	r3, [r0, #24]
 800a9dc:	b90b      	cbnz	r3, 800a9e2 <_fflush_r+0x1a>
 800a9de:	f000 f887 	bl	800aaf0 <__sinit>
 800a9e2:	4b14      	ldr	r3, [pc, #80]	; (800aa34 <_fflush_r+0x6c>)
 800a9e4:	429c      	cmp	r4, r3
 800a9e6:	d11b      	bne.n	800aa20 <_fflush_r+0x58>
 800a9e8:	686c      	ldr	r4, [r5, #4]
 800a9ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d0ef      	beq.n	800a9d2 <_fflush_r+0xa>
 800a9f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9f4:	07d0      	lsls	r0, r2, #31
 800a9f6:	d404      	bmi.n	800aa02 <_fflush_r+0x3a>
 800a9f8:	0599      	lsls	r1, r3, #22
 800a9fa:	d402      	bmi.n	800aa02 <_fflush_r+0x3a>
 800a9fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9fe:	f000 f927 	bl	800ac50 <__retarget_lock_acquire_recursive>
 800aa02:	4628      	mov	r0, r5
 800aa04:	4621      	mov	r1, r4
 800aa06:	f7ff ff59 	bl	800a8bc <__sflush_r>
 800aa0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa0c:	07da      	lsls	r2, r3, #31
 800aa0e:	4605      	mov	r5, r0
 800aa10:	d4e0      	bmi.n	800a9d4 <_fflush_r+0xc>
 800aa12:	89a3      	ldrh	r3, [r4, #12]
 800aa14:	059b      	lsls	r3, r3, #22
 800aa16:	d4dd      	bmi.n	800a9d4 <_fflush_r+0xc>
 800aa18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa1a:	f000 f91a 	bl	800ac52 <__retarget_lock_release_recursive>
 800aa1e:	e7d9      	b.n	800a9d4 <_fflush_r+0xc>
 800aa20:	4b05      	ldr	r3, [pc, #20]	; (800aa38 <_fflush_r+0x70>)
 800aa22:	429c      	cmp	r4, r3
 800aa24:	d101      	bne.n	800aa2a <_fflush_r+0x62>
 800aa26:	68ac      	ldr	r4, [r5, #8]
 800aa28:	e7df      	b.n	800a9ea <_fflush_r+0x22>
 800aa2a:	4b04      	ldr	r3, [pc, #16]	; (800aa3c <_fflush_r+0x74>)
 800aa2c:	429c      	cmp	r4, r3
 800aa2e:	bf08      	it	eq
 800aa30:	68ec      	ldreq	r4, [r5, #12]
 800aa32:	e7da      	b.n	800a9ea <_fflush_r+0x22>
 800aa34:	0800d754 	.word	0x0800d754
 800aa38:	0800d774 	.word	0x0800d774
 800aa3c:	0800d734 	.word	0x0800d734

0800aa40 <std>:
 800aa40:	2300      	movs	r3, #0
 800aa42:	b510      	push	{r4, lr}
 800aa44:	4604      	mov	r4, r0
 800aa46:	e9c0 3300 	strd	r3, r3, [r0]
 800aa4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa4e:	6083      	str	r3, [r0, #8]
 800aa50:	8181      	strh	r1, [r0, #12]
 800aa52:	6643      	str	r3, [r0, #100]	; 0x64
 800aa54:	81c2      	strh	r2, [r0, #14]
 800aa56:	6183      	str	r3, [r0, #24]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	2208      	movs	r2, #8
 800aa5c:	305c      	adds	r0, #92	; 0x5c
 800aa5e:	f7ff fd09 	bl	800a474 <memset>
 800aa62:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <std+0x38>)
 800aa64:	6263      	str	r3, [r4, #36]	; 0x24
 800aa66:	4b05      	ldr	r3, [pc, #20]	; (800aa7c <std+0x3c>)
 800aa68:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa6a:	4b05      	ldr	r3, [pc, #20]	; (800aa80 <std+0x40>)
 800aa6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa6e:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <std+0x44>)
 800aa70:	6224      	str	r4, [r4, #32]
 800aa72:	6323      	str	r3, [r4, #48]	; 0x30
 800aa74:	bd10      	pop	{r4, pc}
 800aa76:	bf00      	nop
 800aa78:	0800b7a5 	.word	0x0800b7a5
 800aa7c:	0800b7c7 	.word	0x0800b7c7
 800aa80:	0800b7ff 	.word	0x0800b7ff
 800aa84:	0800b823 	.word	0x0800b823

0800aa88 <_cleanup_r>:
 800aa88:	4901      	ldr	r1, [pc, #4]	; (800aa90 <_cleanup_r+0x8>)
 800aa8a:	f000 b8c1 	b.w	800ac10 <_fwalk_reent>
 800aa8e:	bf00      	nop
 800aa90:	0800a9c9 	.word	0x0800a9c9

0800aa94 <__sfmoreglue>:
 800aa94:	b570      	push	{r4, r5, r6, lr}
 800aa96:	2268      	movs	r2, #104	; 0x68
 800aa98:	1e4d      	subs	r5, r1, #1
 800aa9a:	4355      	muls	r5, r2
 800aa9c:	460e      	mov	r6, r1
 800aa9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aaa2:	f000 f9b1 	bl	800ae08 <_malloc_r>
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	b140      	cbz	r0, 800aabc <__sfmoreglue+0x28>
 800aaaa:	2100      	movs	r1, #0
 800aaac:	e9c0 1600 	strd	r1, r6, [r0]
 800aab0:	300c      	adds	r0, #12
 800aab2:	60a0      	str	r0, [r4, #8]
 800aab4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aab8:	f7ff fcdc 	bl	800a474 <memset>
 800aabc:	4620      	mov	r0, r4
 800aabe:	bd70      	pop	{r4, r5, r6, pc}

0800aac0 <__sfp_lock_acquire>:
 800aac0:	4801      	ldr	r0, [pc, #4]	; (800aac8 <__sfp_lock_acquire+0x8>)
 800aac2:	f000 b8c5 	b.w	800ac50 <__retarget_lock_acquire_recursive>
 800aac6:	bf00      	nop
 800aac8:	200029f1 	.word	0x200029f1

0800aacc <__sfp_lock_release>:
 800aacc:	4801      	ldr	r0, [pc, #4]	; (800aad4 <__sfp_lock_release+0x8>)
 800aace:	f000 b8c0 	b.w	800ac52 <__retarget_lock_release_recursive>
 800aad2:	bf00      	nop
 800aad4:	200029f1 	.word	0x200029f1

0800aad8 <__sinit_lock_acquire>:
 800aad8:	4801      	ldr	r0, [pc, #4]	; (800aae0 <__sinit_lock_acquire+0x8>)
 800aada:	f000 b8b9 	b.w	800ac50 <__retarget_lock_acquire_recursive>
 800aade:	bf00      	nop
 800aae0:	200029f2 	.word	0x200029f2

0800aae4 <__sinit_lock_release>:
 800aae4:	4801      	ldr	r0, [pc, #4]	; (800aaec <__sinit_lock_release+0x8>)
 800aae6:	f000 b8b4 	b.w	800ac52 <__retarget_lock_release_recursive>
 800aaea:	bf00      	nop
 800aaec:	200029f2 	.word	0x200029f2

0800aaf0 <__sinit>:
 800aaf0:	b510      	push	{r4, lr}
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	f7ff fff0 	bl	800aad8 <__sinit_lock_acquire>
 800aaf8:	69a3      	ldr	r3, [r4, #24]
 800aafa:	b11b      	cbz	r3, 800ab04 <__sinit+0x14>
 800aafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab00:	f7ff bff0 	b.w	800aae4 <__sinit_lock_release>
 800ab04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab08:	6523      	str	r3, [r4, #80]	; 0x50
 800ab0a:	4b13      	ldr	r3, [pc, #76]	; (800ab58 <__sinit+0x68>)
 800ab0c:	4a13      	ldr	r2, [pc, #76]	; (800ab5c <__sinit+0x6c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab12:	42a3      	cmp	r3, r4
 800ab14:	bf04      	itt	eq
 800ab16:	2301      	moveq	r3, #1
 800ab18:	61a3      	streq	r3, [r4, #24]
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f000 f820 	bl	800ab60 <__sfp>
 800ab20:	6060      	str	r0, [r4, #4]
 800ab22:	4620      	mov	r0, r4
 800ab24:	f000 f81c 	bl	800ab60 <__sfp>
 800ab28:	60a0      	str	r0, [r4, #8]
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 f818 	bl	800ab60 <__sfp>
 800ab30:	2200      	movs	r2, #0
 800ab32:	60e0      	str	r0, [r4, #12]
 800ab34:	2104      	movs	r1, #4
 800ab36:	6860      	ldr	r0, [r4, #4]
 800ab38:	f7ff ff82 	bl	800aa40 <std>
 800ab3c:	68a0      	ldr	r0, [r4, #8]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	2109      	movs	r1, #9
 800ab42:	f7ff ff7d 	bl	800aa40 <std>
 800ab46:	68e0      	ldr	r0, [r4, #12]
 800ab48:	2202      	movs	r2, #2
 800ab4a:	2112      	movs	r1, #18
 800ab4c:	f7ff ff78 	bl	800aa40 <std>
 800ab50:	2301      	movs	r3, #1
 800ab52:	61a3      	str	r3, [r4, #24]
 800ab54:	e7d2      	b.n	800aafc <__sinit+0xc>
 800ab56:	bf00      	nop
 800ab58:	0800d680 	.word	0x0800d680
 800ab5c:	0800aa89 	.word	0x0800aa89

0800ab60 <__sfp>:
 800ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab62:	4607      	mov	r7, r0
 800ab64:	f7ff ffac 	bl	800aac0 <__sfp_lock_acquire>
 800ab68:	4b1e      	ldr	r3, [pc, #120]	; (800abe4 <__sfp+0x84>)
 800ab6a:	681e      	ldr	r6, [r3, #0]
 800ab6c:	69b3      	ldr	r3, [r6, #24]
 800ab6e:	b913      	cbnz	r3, 800ab76 <__sfp+0x16>
 800ab70:	4630      	mov	r0, r6
 800ab72:	f7ff ffbd 	bl	800aaf0 <__sinit>
 800ab76:	3648      	adds	r6, #72	; 0x48
 800ab78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	d503      	bpl.n	800ab88 <__sfp+0x28>
 800ab80:	6833      	ldr	r3, [r6, #0]
 800ab82:	b30b      	cbz	r3, 800abc8 <__sfp+0x68>
 800ab84:	6836      	ldr	r6, [r6, #0]
 800ab86:	e7f7      	b.n	800ab78 <__sfp+0x18>
 800ab88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab8c:	b9d5      	cbnz	r5, 800abc4 <__sfp+0x64>
 800ab8e:	4b16      	ldr	r3, [pc, #88]	; (800abe8 <__sfp+0x88>)
 800ab90:	60e3      	str	r3, [r4, #12]
 800ab92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab96:	6665      	str	r5, [r4, #100]	; 0x64
 800ab98:	f000 f859 	bl	800ac4e <__retarget_lock_init_recursive>
 800ab9c:	f7ff ff96 	bl	800aacc <__sfp_lock_release>
 800aba0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aba4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aba8:	6025      	str	r5, [r4, #0]
 800abaa:	61a5      	str	r5, [r4, #24]
 800abac:	2208      	movs	r2, #8
 800abae:	4629      	mov	r1, r5
 800abb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abb4:	f7ff fc5e 	bl	800a474 <memset>
 800abb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abc0:	4620      	mov	r0, r4
 800abc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abc4:	3468      	adds	r4, #104	; 0x68
 800abc6:	e7d9      	b.n	800ab7c <__sfp+0x1c>
 800abc8:	2104      	movs	r1, #4
 800abca:	4638      	mov	r0, r7
 800abcc:	f7ff ff62 	bl	800aa94 <__sfmoreglue>
 800abd0:	4604      	mov	r4, r0
 800abd2:	6030      	str	r0, [r6, #0]
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d1d5      	bne.n	800ab84 <__sfp+0x24>
 800abd8:	f7ff ff78 	bl	800aacc <__sfp_lock_release>
 800abdc:	230c      	movs	r3, #12
 800abde:	603b      	str	r3, [r7, #0]
 800abe0:	e7ee      	b.n	800abc0 <__sfp+0x60>
 800abe2:	bf00      	nop
 800abe4:	0800d680 	.word	0x0800d680
 800abe8:	ffff0001 	.word	0xffff0001

0800abec <fiprintf>:
 800abec:	b40e      	push	{r1, r2, r3}
 800abee:	b503      	push	{r0, r1, lr}
 800abf0:	4601      	mov	r1, r0
 800abf2:	ab03      	add	r3, sp, #12
 800abf4:	4805      	ldr	r0, [pc, #20]	; (800ac0c <fiprintf+0x20>)
 800abf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800abfa:	6800      	ldr	r0, [r0, #0]
 800abfc:	9301      	str	r3, [sp, #4]
 800abfe:	f000 fafd 	bl	800b1fc <_vfiprintf_r>
 800ac02:	b002      	add	sp, #8
 800ac04:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac08:	b003      	add	sp, #12
 800ac0a:	4770      	bx	lr
 800ac0c:	20000068 	.word	0x20000068

0800ac10 <_fwalk_reent>:
 800ac10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac14:	4606      	mov	r6, r0
 800ac16:	4688      	mov	r8, r1
 800ac18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac1c:	2700      	movs	r7, #0
 800ac1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac22:	f1b9 0901 	subs.w	r9, r9, #1
 800ac26:	d505      	bpl.n	800ac34 <_fwalk_reent+0x24>
 800ac28:	6824      	ldr	r4, [r4, #0]
 800ac2a:	2c00      	cmp	r4, #0
 800ac2c:	d1f7      	bne.n	800ac1e <_fwalk_reent+0xe>
 800ac2e:	4638      	mov	r0, r7
 800ac30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac34:	89ab      	ldrh	r3, [r5, #12]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d907      	bls.n	800ac4a <_fwalk_reent+0x3a>
 800ac3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	d003      	beq.n	800ac4a <_fwalk_reent+0x3a>
 800ac42:	4629      	mov	r1, r5
 800ac44:	4630      	mov	r0, r6
 800ac46:	47c0      	blx	r8
 800ac48:	4307      	orrs	r7, r0
 800ac4a:	3568      	adds	r5, #104	; 0x68
 800ac4c:	e7e9      	b.n	800ac22 <_fwalk_reent+0x12>

0800ac4e <__retarget_lock_init_recursive>:
 800ac4e:	4770      	bx	lr

0800ac50 <__retarget_lock_acquire_recursive>:
 800ac50:	4770      	bx	lr

0800ac52 <__retarget_lock_release_recursive>:
 800ac52:	4770      	bx	lr

0800ac54 <__swhatbuf_r>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	460e      	mov	r6, r1
 800ac58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac5c:	2900      	cmp	r1, #0
 800ac5e:	b096      	sub	sp, #88	; 0x58
 800ac60:	4614      	mov	r4, r2
 800ac62:	461d      	mov	r5, r3
 800ac64:	da08      	bge.n	800ac78 <__swhatbuf_r+0x24>
 800ac66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	602a      	str	r2, [r5, #0]
 800ac6e:	061a      	lsls	r2, r3, #24
 800ac70:	d410      	bmi.n	800ac94 <__swhatbuf_r+0x40>
 800ac72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac76:	e00e      	b.n	800ac96 <__swhatbuf_r+0x42>
 800ac78:	466a      	mov	r2, sp
 800ac7a:	f000 fe01 	bl	800b880 <_fstat_r>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	dbf1      	blt.n	800ac66 <__swhatbuf_r+0x12>
 800ac82:	9a01      	ldr	r2, [sp, #4]
 800ac84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac8c:	425a      	negs	r2, r3
 800ac8e:	415a      	adcs	r2, r3
 800ac90:	602a      	str	r2, [r5, #0]
 800ac92:	e7ee      	b.n	800ac72 <__swhatbuf_r+0x1e>
 800ac94:	2340      	movs	r3, #64	; 0x40
 800ac96:	2000      	movs	r0, #0
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	b016      	add	sp, #88	; 0x58
 800ac9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aca0 <__smakebuf_r>:
 800aca0:	898b      	ldrh	r3, [r1, #12]
 800aca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aca4:	079d      	lsls	r5, r3, #30
 800aca6:	4606      	mov	r6, r0
 800aca8:	460c      	mov	r4, r1
 800acaa:	d507      	bpl.n	800acbc <__smakebuf_r+0x1c>
 800acac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	6123      	str	r3, [r4, #16]
 800acb4:	2301      	movs	r3, #1
 800acb6:	6163      	str	r3, [r4, #20]
 800acb8:	b002      	add	sp, #8
 800acba:	bd70      	pop	{r4, r5, r6, pc}
 800acbc:	ab01      	add	r3, sp, #4
 800acbe:	466a      	mov	r2, sp
 800acc0:	f7ff ffc8 	bl	800ac54 <__swhatbuf_r>
 800acc4:	9900      	ldr	r1, [sp, #0]
 800acc6:	4605      	mov	r5, r0
 800acc8:	4630      	mov	r0, r6
 800acca:	f000 f89d 	bl	800ae08 <_malloc_r>
 800acce:	b948      	cbnz	r0, 800ace4 <__smakebuf_r+0x44>
 800acd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd4:	059a      	lsls	r2, r3, #22
 800acd6:	d4ef      	bmi.n	800acb8 <__smakebuf_r+0x18>
 800acd8:	f023 0303 	bic.w	r3, r3, #3
 800acdc:	f043 0302 	orr.w	r3, r3, #2
 800ace0:	81a3      	strh	r3, [r4, #12]
 800ace2:	e7e3      	b.n	800acac <__smakebuf_r+0xc>
 800ace4:	4b0d      	ldr	r3, [pc, #52]	; (800ad1c <__smakebuf_r+0x7c>)
 800ace6:	62b3      	str	r3, [r6, #40]	; 0x28
 800ace8:	89a3      	ldrh	r3, [r4, #12]
 800acea:	6020      	str	r0, [r4, #0]
 800acec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acf0:	81a3      	strh	r3, [r4, #12]
 800acf2:	9b00      	ldr	r3, [sp, #0]
 800acf4:	6163      	str	r3, [r4, #20]
 800acf6:	9b01      	ldr	r3, [sp, #4]
 800acf8:	6120      	str	r0, [r4, #16]
 800acfa:	b15b      	cbz	r3, 800ad14 <__smakebuf_r+0x74>
 800acfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad00:	4630      	mov	r0, r6
 800ad02:	f000 fdcf 	bl	800b8a4 <_isatty_r>
 800ad06:	b128      	cbz	r0, 800ad14 <__smakebuf_r+0x74>
 800ad08:	89a3      	ldrh	r3, [r4, #12]
 800ad0a:	f023 0303 	bic.w	r3, r3, #3
 800ad0e:	f043 0301 	orr.w	r3, r3, #1
 800ad12:	81a3      	strh	r3, [r4, #12]
 800ad14:	89a0      	ldrh	r0, [r4, #12]
 800ad16:	4305      	orrs	r5, r0
 800ad18:	81a5      	strh	r5, [r4, #12]
 800ad1a:	e7cd      	b.n	800acb8 <__smakebuf_r+0x18>
 800ad1c:	0800aa89 	.word	0x0800aa89

0800ad20 <malloc>:
 800ad20:	4b02      	ldr	r3, [pc, #8]	; (800ad2c <malloc+0xc>)
 800ad22:	4601      	mov	r1, r0
 800ad24:	6818      	ldr	r0, [r3, #0]
 800ad26:	f000 b86f 	b.w	800ae08 <_malloc_r>
 800ad2a:	bf00      	nop
 800ad2c:	20000068 	.word	0x20000068

0800ad30 <_free_r>:
 800ad30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad32:	2900      	cmp	r1, #0
 800ad34:	d044      	beq.n	800adc0 <_free_r+0x90>
 800ad36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad3a:	9001      	str	r0, [sp, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f1a1 0404 	sub.w	r4, r1, #4
 800ad42:	bfb8      	it	lt
 800ad44:	18e4      	addlt	r4, r4, r3
 800ad46:	f000 fdf7 	bl	800b938 <__malloc_lock>
 800ad4a:	4a1e      	ldr	r2, [pc, #120]	; (800adc4 <_free_r+0x94>)
 800ad4c:	9801      	ldr	r0, [sp, #4]
 800ad4e:	6813      	ldr	r3, [r2, #0]
 800ad50:	b933      	cbnz	r3, 800ad60 <_free_r+0x30>
 800ad52:	6063      	str	r3, [r4, #4]
 800ad54:	6014      	str	r4, [r2, #0]
 800ad56:	b003      	add	sp, #12
 800ad58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad5c:	f000 bdf2 	b.w	800b944 <__malloc_unlock>
 800ad60:	42a3      	cmp	r3, r4
 800ad62:	d908      	bls.n	800ad76 <_free_r+0x46>
 800ad64:	6825      	ldr	r5, [r4, #0]
 800ad66:	1961      	adds	r1, r4, r5
 800ad68:	428b      	cmp	r3, r1
 800ad6a:	bf01      	itttt	eq
 800ad6c:	6819      	ldreq	r1, [r3, #0]
 800ad6e:	685b      	ldreq	r3, [r3, #4]
 800ad70:	1949      	addeq	r1, r1, r5
 800ad72:	6021      	streq	r1, [r4, #0]
 800ad74:	e7ed      	b.n	800ad52 <_free_r+0x22>
 800ad76:	461a      	mov	r2, r3
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	b10b      	cbz	r3, 800ad80 <_free_r+0x50>
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	d9fa      	bls.n	800ad76 <_free_r+0x46>
 800ad80:	6811      	ldr	r1, [r2, #0]
 800ad82:	1855      	adds	r5, r2, r1
 800ad84:	42a5      	cmp	r5, r4
 800ad86:	d10b      	bne.n	800ada0 <_free_r+0x70>
 800ad88:	6824      	ldr	r4, [r4, #0]
 800ad8a:	4421      	add	r1, r4
 800ad8c:	1854      	adds	r4, r2, r1
 800ad8e:	42a3      	cmp	r3, r4
 800ad90:	6011      	str	r1, [r2, #0]
 800ad92:	d1e0      	bne.n	800ad56 <_free_r+0x26>
 800ad94:	681c      	ldr	r4, [r3, #0]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	6053      	str	r3, [r2, #4]
 800ad9a:	4421      	add	r1, r4
 800ad9c:	6011      	str	r1, [r2, #0]
 800ad9e:	e7da      	b.n	800ad56 <_free_r+0x26>
 800ada0:	d902      	bls.n	800ada8 <_free_r+0x78>
 800ada2:	230c      	movs	r3, #12
 800ada4:	6003      	str	r3, [r0, #0]
 800ada6:	e7d6      	b.n	800ad56 <_free_r+0x26>
 800ada8:	6825      	ldr	r5, [r4, #0]
 800adaa:	1961      	adds	r1, r4, r5
 800adac:	428b      	cmp	r3, r1
 800adae:	bf04      	itt	eq
 800adb0:	6819      	ldreq	r1, [r3, #0]
 800adb2:	685b      	ldreq	r3, [r3, #4]
 800adb4:	6063      	str	r3, [r4, #4]
 800adb6:	bf04      	itt	eq
 800adb8:	1949      	addeq	r1, r1, r5
 800adba:	6021      	streq	r1, [r4, #0]
 800adbc:	6054      	str	r4, [r2, #4]
 800adbe:	e7ca      	b.n	800ad56 <_free_r+0x26>
 800adc0:	b003      	add	sp, #12
 800adc2:	bd30      	pop	{r4, r5, pc}
 800adc4:	200029f4 	.word	0x200029f4

0800adc8 <sbrk_aligned>:
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	4e0e      	ldr	r6, [pc, #56]	; (800ae04 <sbrk_aligned+0x3c>)
 800adcc:	460c      	mov	r4, r1
 800adce:	6831      	ldr	r1, [r6, #0]
 800add0:	4605      	mov	r5, r0
 800add2:	b911      	cbnz	r1, 800adda <sbrk_aligned+0x12>
 800add4:	f000 fcd6 	bl	800b784 <_sbrk_r>
 800add8:	6030      	str	r0, [r6, #0]
 800adda:	4621      	mov	r1, r4
 800addc:	4628      	mov	r0, r5
 800adde:	f000 fcd1 	bl	800b784 <_sbrk_r>
 800ade2:	1c43      	adds	r3, r0, #1
 800ade4:	d00a      	beq.n	800adfc <sbrk_aligned+0x34>
 800ade6:	1cc4      	adds	r4, r0, #3
 800ade8:	f024 0403 	bic.w	r4, r4, #3
 800adec:	42a0      	cmp	r0, r4
 800adee:	d007      	beq.n	800ae00 <sbrk_aligned+0x38>
 800adf0:	1a21      	subs	r1, r4, r0
 800adf2:	4628      	mov	r0, r5
 800adf4:	f000 fcc6 	bl	800b784 <_sbrk_r>
 800adf8:	3001      	adds	r0, #1
 800adfa:	d101      	bne.n	800ae00 <sbrk_aligned+0x38>
 800adfc:	f04f 34ff 	mov.w	r4, #4294967295
 800ae00:	4620      	mov	r0, r4
 800ae02:	bd70      	pop	{r4, r5, r6, pc}
 800ae04:	200029f8 	.word	0x200029f8

0800ae08 <_malloc_r>:
 800ae08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae0c:	1ccd      	adds	r5, r1, #3
 800ae0e:	f025 0503 	bic.w	r5, r5, #3
 800ae12:	3508      	adds	r5, #8
 800ae14:	2d0c      	cmp	r5, #12
 800ae16:	bf38      	it	cc
 800ae18:	250c      	movcc	r5, #12
 800ae1a:	2d00      	cmp	r5, #0
 800ae1c:	4607      	mov	r7, r0
 800ae1e:	db01      	blt.n	800ae24 <_malloc_r+0x1c>
 800ae20:	42a9      	cmp	r1, r5
 800ae22:	d905      	bls.n	800ae30 <_malloc_r+0x28>
 800ae24:	230c      	movs	r3, #12
 800ae26:	603b      	str	r3, [r7, #0]
 800ae28:	2600      	movs	r6, #0
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae30:	4e2e      	ldr	r6, [pc, #184]	; (800aeec <_malloc_r+0xe4>)
 800ae32:	f000 fd81 	bl	800b938 <__malloc_lock>
 800ae36:	6833      	ldr	r3, [r6, #0]
 800ae38:	461c      	mov	r4, r3
 800ae3a:	bb34      	cbnz	r4, 800ae8a <_malloc_r+0x82>
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	4638      	mov	r0, r7
 800ae40:	f7ff ffc2 	bl	800adc8 <sbrk_aligned>
 800ae44:	1c43      	adds	r3, r0, #1
 800ae46:	4604      	mov	r4, r0
 800ae48:	d14d      	bne.n	800aee6 <_malloc_r+0xde>
 800ae4a:	6834      	ldr	r4, [r6, #0]
 800ae4c:	4626      	mov	r6, r4
 800ae4e:	2e00      	cmp	r6, #0
 800ae50:	d140      	bne.n	800aed4 <_malloc_r+0xcc>
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	4631      	mov	r1, r6
 800ae56:	4638      	mov	r0, r7
 800ae58:	eb04 0803 	add.w	r8, r4, r3
 800ae5c:	f000 fc92 	bl	800b784 <_sbrk_r>
 800ae60:	4580      	cmp	r8, r0
 800ae62:	d13a      	bne.n	800aeda <_malloc_r+0xd2>
 800ae64:	6821      	ldr	r1, [r4, #0]
 800ae66:	3503      	adds	r5, #3
 800ae68:	1a6d      	subs	r5, r5, r1
 800ae6a:	f025 0503 	bic.w	r5, r5, #3
 800ae6e:	3508      	adds	r5, #8
 800ae70:	2d0c      	cmp	r5, #12
 800ae72:	bf38      	it	cc
 800ae74:	250c      	movcc	r5, #12
 800ae76:	4629      	mov	r1, r5
 800ae78:	4638      	mov	r0, r7
 800ae7a:	f7ff ffa5 	bl	800adc8 <sbrk_aligned>
 800ae7e:	3001      	adds	r0, #1
 800ae80:	d02b      	beq.n	800aeda <_malloc_r+0xd2>
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	442b      	add	r3, r5
 800ae86:	6023      	str	r3, [r4, #0]
 800ae88:	e00e      	b.n	800aea8 <_malloc_r+0xa0>
 800ae8a:	6822      	ldr	r2, [r4, #0]
 800ae8c:	1b52      	subs	r2, r2, r5
 800ae8e:	d41e      	bmi.n	800aece <_malloc_r+0xc6>
 800ae90:	2a0b      	cmp	r2, #11
 800ae92:	d916      	bls.n	800aec2 <_malloc_r+0xba>
 800ae94:	1961      	adds	r1, r4, r5
 800ae96:	42a3      	cmp	r3, r4
 800ae98:	6025      	str	r5, [r4, #0]
 800ae9a:	bf18      	it	ne
 800ae9c:	6059      	strne	r1, [r3, #4]
 800ae9e:	6863      	ldr	r3, [r4, #4]
 800aea0:	bf08      	it	eq
 800aea2:	6031      	streq	r1, [r6, #0]
 800aea4:	5162      	str	r2, [r4, r5]
 800aea6:	604b      	str	r3, [r1, #4]
 800aea8:	4638      	mov	r0, r7
 800aeaa:	f104 060b 	add.w	r6, r4, #11
 800aeae:	f000 fd49 	bl	800b944 <__malloc_unlock>
 800aeb2:	f026 0607 	bic.w	r6, r6, #7
 800aeb6:	1d23      	adds	r3, r4, #4
 800aeb8:	1af2      	subs	r2, r6, r3
 800aeba:	d0b6      	beq.n	800ae2a <_malloc_r+0x22>
 800aebc:	1b9b      	subs	r3, r3, r6
 800aebe:	50a3      	str	r3, [r4, r2]
 800aec0:	e7b3      	b.n	800ae2a <_malloc_r+0x22>
 800aec2:	6862      	ldr	r2, [r4, #4]
 800aec4:	42a3      	cmp	r3, r4
 800aec6:	bf0c      	ite	eq
 800aec8:	6032      	streq	r2, [r6, #0]
 800aeca:	605a      	strne	r2, [r3, #4]
 800aecc:	e7ec      	b.n	800aea8 <_malloc_r+0xa0>
 800aece:	4623      	mov	r3, r4
 800aed0:	6864      	ldr	r4, [r4, #4]
 800aed2:	e7b2      	b.n	800ae3a <_malloc_r+0x32>
 800aed4:	4634      	mov	r4, r6
 800aed6:	6876      	ldr	r6, [r6, #4]
 800aed8:	e7b9      	b.n	800ae4e <_malloc_r+0x46>
 800aeda:	230c      	movs	r3, #12
 800aedc:	603b      	str	r3, [r7, #0]
 800aede:	4638      	mov	r0, r7
 800aee0:	f000 fd30 	bl	800b944 <__malloc_unlock>
 800aee4:	e7a1      	b.n	800ae2a <_malloc_r+0x22>
 800aee6:	6025      	str	r5, [r4, #0]
 800aee8:	e7de      	b.n	800aea8 <_malloc_r+0xa0>
 800aeea:	bf00      	nop
 800aeec:	200029f4 	.word	0x200029f4

0800aef0 <__ssputs_r>:
 800aef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef4:	688e      	ldr	r6, [r1, #8]
 800aef6:	429e      	cmp	r6, r3
 800aef8:	4682      	mov	sl, r0
 800aefa:	460c      	mov	r4, r1
 800aefc:	4690      	mov	r8, r2
 800aefe:	461f      	mov	r7, r3
 800af00:	d838      	bhi.n	800af74 <__ssputs_r+0x84>
 800af02:	898a      	ldrh	r2, [r1, #12]
 800af04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af08:	d032      	beq.n	800af70 <__ssputs_r+0x80>
 800af0a:	6825      	ldr	r5, [r4, #0]
 800af0c:	6909      	ldr	r1, [r1, #16]
 800af0e:	eba5 0901 	sub.w	r9, r5, r1
 800af12:	6965      	ldr	r5, [r4, #20]
 800af14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af1c:	3301      	adds	r3, #1
 800af1e:	444b      	add	r3, r9
 800af20:	106d      	asrs	r5, r5, #1
 800af22:	429d      	cmp	r5, r3
 800af24:	bf38      	it	cc
 800af26:	461d      	movcc	r5, r3
 800af28:	0553      	lsls	r3, r2, #21
 800af2a:	d531      	bpl.n	800af90 <__ssputs_r+0xa0>
 800af2c:	4629      	mov	r1, r5
 800af2e:	f7ff ff6b 	bl	800ae08 <_malloc_r>
 800af32:	4606      	mov	r6, r0
 800af34:	b950      	cbnz	r0, 800af4c <__ssputs_r+0x5c>
 800af36:	230c      	movs	r3, #12
 800af38:	f8ca 3000 	str.w	r3, [sl]
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af42:	81a3      	strh	r3, [r4, #12]
 800af44:	f04f 30ff 	mov.w	r0, #4294967295
 800af48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af4c:	6921      	ldr	r1, [r4, #16]
 800af4e:	464a      	mov	r2, r9
 800af50:	f000 fcca 	bl	800b8e8 <memcpy>
 800af54:	89a3      	ldrh	r3, [r4, #12]
 800af56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af5e:	81a3      	strh	r3, [r4, #12]
 800af60:	6126      	str	r6, [r4, #16]
 800af62:	6165      	str	r5, [r4, #20]
 800af64:	444e      	add	r6, r9
 800af66:	eba5 0509 	sub.w	r5, r5, r9
 800af6a:	6026      	str	r6, [r4, #0]
 800af6c:	60a5      	str	r5, [r4, #8]
 800af6e:	463e      	mov	r6, r7
 800af70:	42be      	cmp	r6, r7
 800af72:	d900      	bls.n	800af76 <__ssputs_r+0x86>
 800af74:	463e      	mov	r6, r7
 800af76:	6820      	ldr	r0, [r4, #0]
 800af78:	4632      	mov	r2, r6
 800af7a:	4641      	mov	r1, r8
 800af7c:	f000 fcc2 	bl	800b904 <memmove>
 800af80:	68a3      	ldr	r3, [r4, #8]
 800af82:	1b9b      	subs	r3, r3, r6
 800af84:	60a3      	str	r3, [r4, #8]
 800af86:	6823      	ldr	r3, [r4, #0]
 800af88:	4433      	add	r3, r6
 800af8a:	6023      	str	r3, [r4, #0]
 800af8c:	2000      	movs	r0, #0
 800af8e:	e7db      	b.n	800af48 <__ssputs_r+0x58>
 800af90:	462a      	mov	r2, r5
 800af92:	f000 fcdd 	bl	800b950 <_realloc_r>
 800af96:	4606      	mov	r6, r0
 800af98:	2800      	cmp	r0, #0
 800af9a:	d1e1      	bne.n	800af60 <__ssputs_r+0x70>
 800af9c:	6921      	ldr	r1, [r4, #16]
 800af9e:	4650      	mov	r0, sl
 800afa0:	f7ff fec6 	bl	800ad30 <_free_r>
 800afa4:	e7c7      	b.n	800af36 <__ssputs_r+0x46>
	...

0800afa8 <_svfiprintf_r>:
 800afa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	4698      	mov	r8, r3
 800afae:	898b      	ldrh	r3, [r1, #12]
 800afb0:	061b      	lsls	r3, r3, #24
 800afb2:	b09d      	sub	sp, #116	; 0x74
 800afb4:	4607      	mov	r7, r0
 800afb6:	460d      	mov	r5, r1
 800afb8:	4614      	mov	r4, r2
 800afba:	d50e      	bpl.n	800afda <_svfiprintf_r+0x32>
 800afbc:	690b      	ldr	r3, [r1, #16]
 800afbe:	b963      	cbnz	r3, 800afda <_svfiprintf_r+0x32>
 800afc0:	2140      	movs	r1, #64	; 0x40
 800afc2:	f7ff ff21 	bl	800ae08 <_malloc_r>
 800afc6:	6028      	str	r0, [r5, #0]
 800afc8:	6128      	str	r0, [r5, #16]
 800afca:	b920      	cbnz	r0, 800afd6 <_svfiprintf_r+0x2e>
 800afcc:	230c      	movs	r3, #12
 800afce:	603b      	str	r3, [r7, #0]
 800afd0:	f04f 30ff 	mov.w	r0, #4294967295
 800afd4:	e0d1      	b.n	800b17a <_svfiprintf_r+0x1d2>
 800afd6:	2340      	movs	r3, #64	; 0x40
 800afd8:	616b      	str	r3, [r5, #20]
 800afda:	2300      	movs	r3, #0
 800afdc:	9309      	str	r3, [sp, #36]	; 0x24
 800afde:	2320      	movs	r3, #32
 800afe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afe4:	f8cd 800c 	str.w	r8, [sp, #12]
 800afe8:	2330      	movs	r3, #48	; 0x30
 800afea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b194 <_svfiprintf_r+0x1ec>
 800afee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aff2:	f04f 0901 	mov.w	r9, #1
 800aff6:	4623      	mov	r3, r4
 800aff8:	469a      	mov	sl, r3
 800affa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800affe:	b10a      	cbz	r2, 800b004 <_svfiprintf_r+0x5c>
 800b000:	2a25      	cmp	r2, #37	; 0x25
 800b002:	d1f9      	bne.n	800aff8 <_svfiprintf_r+0x50>
 800b004:	ebba 0b04 	subs.w	fp, sl, r4
 800b008:	d00b      	beq.n	800b022 <_svfiprintf_r+0x7a>
 800b00a:	465b      	mov	r3, fp
 800b00c:	4622      	mov	r2, r4
 800b00e:	4629      	mov	r1, r5
 800b010:	4638      	mov	r0, r7
 800b012:	f7ff ff6d 	bl	800aef0 <__ssputs_r>
 800b016:	3001      	adds	r0, #1
 800b018:	f000 80aa 	beq.w	800b170 <_svfiprintf_r+0x1c8>
 800b01c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b01e:	445a      	add	r2, fp
 800b020:	9209      	str	r2, [sp, #36]	; 0x24
 800b022:	f89a 3000 	ldrb.w	r3, [sl]
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 80a2 	beq.w	800b170 <_svfiprintf_r+0x1c8>
 800b02c:	2300      	movs	r3, #0
 800b02e:	f04f 32ff 	mov.w	r2, #4294967295
 800b032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b036:	f10a 0a01 	add.w	sl, sl, #1
 800b03a:	9304      	str	r3, [sp, #16]
 800b03c:	9307      	str	r3, [sp, #28]
 800b03e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b042:	931a      	str	r3, [sp, #104]	; 0x68
 800b044:	4654      	mov	r4, sl
 800b046:	2205      	movs	r2, #5
 800b048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b04c:	4851      	ldr	r0, [pc, #324]	; (800b194 <_svfiprintf_r+0x1ec>)
 800b04e:	f7f5 f8bf 	bl	80001d0 <memchr>
 800b052:	9a04      	ldr	r2, [sp, #16]
 800b054:	b9d8      	cbnz	r0, 800b08e <_svfiprintf_r+0xe6>
 800b056:	06d0      	lsls	r0, r2, #27
 800b058:	bf44      	itt	mi
 800b05a:	2320      	movmi	r3, #32
 800b05c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b060:	0711      	lsls	r1, r2, #28
 800b062:	bf44      	itt	mi
 800b064:	232b      	movmi	r3, #43	; 0x2b
 800b066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b06a:	f89a 3000 	ldrb.w	r3, [sl]
 800b06e:	2b2a      	cmp	r3, #42	; 0x2a
 800b070:	d015      	beq.n	800b09e <_svfiprintf_r+0xf6>
 800b072:	9a07      	ldr	r2, [sp, #28]
 800b074:	4654      	mov	r4, sl
 800b076:	2000      	movs	r0, #0
 800b078:	f04f 0c0a 	mov.w	ip, #10
 800b07c:	4621      	mov	r1, r4
 800b07e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b082:	3b30      	subs	r3, #48	; 0x30
 800b084:	2b09      	cmp	r3, #9
 800b086:	d94e      	bls.n	800b126 <_svfiprintf_r+0x17e>
 800b088:	b1b0      	cbz	r0, 800b0b8 <_svfiprintf_r+0x110>
 800b08a:	9207      	str	r2, [sp, #28]
 800b08c:	e014      	b.n	800b0b8 <_svfiprintf_r+0x110>
 800b08e:	eba0 0308 	sub.w	r3, r0, r8
 800b092:	fa09 f303 	lsl.w	r3, r9, r3
 800b096:	4313      	orrs	r3, r2
 800b098:	9304      	str	r3, [sp, #16]
 800b09a:	46a2      	mov	sl, r4
 800b09c:	e7d2      	b.n	800b044 <_svfiprintf_r+0x9c>
 800b09e:	9b03      	ldr	r3, [sp, #12]
 800b0a0:	1d19      	adds	r1, r3, #4
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	9103      	str	r1, [sp, #12]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	bfbb      	ittet	lt
 800b0aa:	425b      	neglt	r3, r3
 800b0ac:	f042 0202 	orrlt.w	r2, r2, #2
 800b0b0:	9307      	strge	r3, [sp, #28]
 800b0b2:	9307      	strlt	r3, [sp, #28]
 800b0b4:	bfb8      	it	lt
 800b0b6:	9204      	strlt	r2, [sp, #16]
 800b0b8:	7823      	ldrb	r3, [r4, #0]
 800b0ba:	2b2e      	cmp	r3, #46	; 0x2e
 800b0bc:	d10c      	bne.n	800b0d8 <_svfiprintf_r+0x130>
 800b0be:	7863      	ldrb	r3, [r4, #1]
 800b0c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c2:	d135      	bne.n	800b130 <_svfiprintf_r+0x188>
 800b0c4:	9b03      	ldr	r3, [sp, #12]
 800b0c6:	1d1a      	adds	r2, r3, #4
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	9203      	str	r2, [sp, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	bfb8      	it	lt
 800b0d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0d4:	3402      	adds	r4, #2
 800b0d6:	9305      	str	r3, [sp, #20]
 800b0d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b1a4 <_svfiprintf_r+0x1fc>
 800b0dc:	7821      	ldrb	r1, [r4, #0]
 800b0de:	2203      	movs	r2, #3
 800b0e0:	4650      	mov	r0, sl
 800b0e2:	f7f5 f875 	bl	80001d0 <memchr>
 800b0e6:	b140      	cbz	r0, 800b0fa <_svfiprintf_r+0x152>
 800b0e8:	2340      	movs	r3, #64	; 0x40
 800b0ea:	eba0 000a 	sub.w	r0, r0, sl
 800b0ee:	fa03 f000 	lsl.w	r0, r3, r0
 800b0f2:	9b04      	ldr	r3, [sp, #16]
 800b0f4:	4303      	orrs	r3, r0
 800b0f6:	3401      	adds	r4, #1
 800b0f8:	9304      	str	r3, [sp, #16]
 800b0fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0fe:	4826      	ldr	r0, [pc, #152]	; (800b198 <_svfiprintf_r+0x1f0>)
 800b100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b104:	2206      	movs	r2, #6
 800b106:	f7f5 f863 	bl	80001d0 <memchr>
 800b10a:	2800      	cmp	r0, #0
 800b10c:	d038      	beq.n	800b180 <_svfiprintf_r+0x1d8>
 800b10e:	4b23      	ldr	r3, [pc, #140]	; (800b19c <_svfiprintf_r+0x1f4>)
 800b110:	bb1b      	cbnz	r3, 800b15a <_svfiprintf_r+0x1b2>
 800b112:	9b03      	ldr	r3, [sp, #12]
 800b114:	3307      	adds	r3, #7
 800b116:	f023 0307 	bic.w	r3, r3, #7
 800b11a:	3308      	adds	r3, #8
 800b11c:	9303      	str	r3, [sp, #12]
 800b11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b120:	4433      	add	r3, r6
 800b122:	9309      	str	r3, [sp, #36]	; 0x24
 800b124:	e767      	b.n	800aff6 <_svfiprintf_r+0x4e>
 800b126:	fb0c 3202 	mla	r2, ip, r2, r3
 800b12a:	460c      	mov	r4, r1
 800b12c:	2001      	movs	r0, #1
 800b12e:	e7a5      	b.n	800b07c <_svfiprintf_r+0xd4>
 800b130:	2300      	movs	r3, #0
 800b132:	3401      	adds	r4, #1
 800b134:	9305      	str	r3, [sp, #20]
 800b136:	4619      	mov	r1, r3
 800b138:	f04f 0c0a 	mov.w	ip, #10
 800b13c:	4620      	mov	r0, r4
 800b13e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b142:	3a30      	subs	r2, #48	; 0x30
 800b144:	2a09      	cmp	r2, #9
 800b146:	d903      	bls.n	800b150 <_svfiprintf_r+0x1a8>
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d0c5      	beq.n	800b0d8 <_svfiprintf_r+0x130>
 800b14c:	9105      	str	r1, [sp, #20]
 800b14e:	e7c3      	b.n	800b0d8 <_svfiprintf_r+0x130>
 800b150:	fb0c 2101 	mla	r1, ip, r1, r2
 800b154:	4604      	mov	r4, r0
 800b156:	2301      	movs	r3, #1
 800b158:	e7f0      	b.n	800b13c <_svfiprintf_r+0x194>
 800b15a:	ab03      	add	r3, sp, #12
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	462a      	mov	r2, r5
 800b160:	4b0f      	ldr	r3, [pc, #60]	; (800b1a0 <_svfiprintf_r+0x1f8>)
 800b162:	a904      	add	r1, sp, #16
 800b164:	4638      	mov	r0, r7
 800b166:	f3af 8000 	nop.w
 800b16a:	1c42      	adds	r2, r0, #1
 800b16c:	4606      	mov	r6, r0
 800b16e:	d1d6      	bne.n	800b11e <_svfiprintf_r+0x176>
 800b170:	89ab      	ldrh	r3, [r5, #12]
 800b172:	065b      	lsls	r3, r3, #25
 800b174:	f53f af2c 	bmi.w	800afd0 <_svfiprintf_r+0x28>
 800b178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b17a:	b01d      	add	sp, #116	; 0x74
 800b17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b180:	ab03      	add	r3, sp, #12
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	462a      	mov	r2, r5
 800b186:	4b06      	ldr	r3, [pc, #24]	; (800b1a0 <_svfiprintf_r+0x1f8>)
 800b188:	a904      	add	r1, sp, #16
 800b18a:	4638      	mov	r0, r7
 800b18c:	f000 f9d4 	bl	800b538 <_printf_i>
 800b190:	e7eb      	b.n	800b16a <_svfiprintf_r+0x1c2>
 800b192:	bf00      	nop
 800b194:	0800d794 	.word	0x0800d794
 800b198:	0800d79e 	.word	0x0800d79e
 800b19c:	00000000 	.word	0x00000000
 800b1a0:	0800aef1 	.word	0x0800aef1
 800b1a4:	0800d79a 	.word	0x0800d79a

0800b1a8 <__sfputc_r>:
 800b1a8:	6893      	ldr	r3, [r2, #8]
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	b410      	push	{r4}
 800b1b0:	6093      	str	r3, [r2, #8]
 800b1b2:	da08      	bge.n	800b1c6 <__sfputc_r+0x1e>
 800b1b4:	6994      	ldr	r4, [r2, #24]
 800b1b6:	42a3      	cmp	r3, r4
 800b1b8:	db01      	blt.n	800b1be <__sfputc_r+0x16>
 800b1ba:	290a      	cmp	r1, #10
 800b1bc:	d103      	bne.n	800b1c6 <__sfputc_r+0x1e>
 800b1be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1c2:	f7ff ba9d 	b.w	800a700 <__swbuf_r>
 800b1c6:	6813      	ldr	r3, [r2, #0]
 800b1c8:	1c58      	adds	r0, r3, #1
 800b1ca:	6010      	str	r0, [r2, #0]
 800b1cc:	7019      	strb	r1, [r3, #0]
 800b1ce:	4608      	mov	r0, r1
 800b1d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <__sfputs_r>:
 800b1d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d8:	4606      	mov	r6, r0
 800b1da:	460f      	mov	r7, r1
 800b1dc:	4614      	mov	r4, r2
 800b1de:	18d5      	adds	r5, r2, r3
 800b1e0:	42ac      	cmp	r4, r5
 800b1e2:	d101      	bne.n	800b1e8 <__sfputs_r+0x12>
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	e007      	b.n	800b1f8 <__sfputs_r+0x22>
 800b1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ec:	463a      	mov	r2, r7
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f7ff ffda 	bl	800b1a8 <__sfputc_r>
 800b1f4:	1c43      	adds	r3, r0, #1
 800b1f6:	d1f3      	bne.n	800b1e0 <__sfputs_r+0xa>
 800b1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1fc <_vfiprintf_r>:
 800b1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b200:	460d      	mov	r5, r1
 800b202:	b09d      	sub	sp, #116	; 0x74
 800b204:	4614      	mov	r4, r2
 800b206:	4698      	mov	r8, r3
 800b208:	4606      	mov	r6, r0
 800b20a:	b118      	cbz	r0, 800b214 <_vfiprintf_r+0x18>
 800b20c:	6983      	ldr	r3, [r0, #24]
 800b20e:	b90b      	cbnz	r3, 800b214 <_vfiprintf_r+0x18>
 800b210:	f7ff fc6e 	bl	800aaf0 <__sinit>
 800b214:	4b89      	ldr	r3, [pc, #548]	; (800b43c <_vfiprintf_r+0x240>)
 800b216:	429d      	cmp	r5, r3
 800b218:	d11b      	bne.n	800b252 <_vfiprintf_r+0x56>
 800b21a:	6875      	ldr	r5, [r6, #4]
 800b21c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b21e:	07d9      	lsls	r1, r3, #31
 800b220:	d405      	bmi.n	800b22e <_vfiprintf_r+0x32>
 800b222:	89ab      	ldrh	r3, [r5, #12]
 800b224:	059a      	lsls	r2, r3, #22
 800b226:	d402      	bmi.n	800b22e <_vfiprintf_r+0x32>
 800b228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b22a:	f7ff fd11 	bl	800ac50 <__retarget_lock_acquire_recursive>
 800b22e:	89ab      	ldrh	r3, [r5, #12]
 800b230:	071b      	lsls	r3, r3, #28
 800b232:	d501      	bpl.n	800b238 <_vfiprintf_r+0x3c>
 800b234:	692b      	ldr	r3, [r5, #16]
 800b236:	b9eb      	cbnz	r3, 800b274 <_vfiprintf_r+0x78>
 800b238:	4629      	mov	r1, r5
 800b23a:	4630      	mov	r0, r6
 800b23c:	f7ff fab2 	bl	800a7a4 <__swsetup_r>
 800b240:	b1c0      	cbz	r0, 800b274 <_vfiprintf_r+0x78>
 800b242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b244:	07dc      	lsls	r4, r3, #31
 800b246:	d50e      	bpl.n	800b266 <_vfiprintf_r+0x6a>
 800b248:	f04f 30ff 	mov.w	r0, #4294967295
 800b24c:	b01d      	add	sp, #116	; 0x74
 800b24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b252:	4b7b      	ldr	r3, [pc, #492]	; (800b440 <_vfiprintf_r+0x244>)
 800b254:	429d      	cmp	r5, r3
 800b256:	d101      	bne.n	800b25c <_vfiprintf_r+0x60>
 800b258:	68b5      	ldr	r5, [r6, #8]
 800b25a:	e7df      	b.n	800b21c <_vfiprintf_r+0x20>
 800b25c:	4b79      	ldr	r3, [pc, #484]	; (800b444 <_vfiprintf_r+0x248>)
 800b25e:	429d      	cmp	r5, r3
 800b260:	bf08      	it	eq
 800b262:	68f5      	ldreq	r5, [r6, #12]
 800b264:	e7da      	b.n	800b21c <_vfiprintf_r+0x20>
 800b266:	89ab      	ldrh	r3, [r5, #12]
 800b268:	0598      	lsls	r0, r3, #22
 800b26a:	d4ed      	bmi.n	800b248 <_vfiprintf_r+0x4c>
 800b26c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b26e:	f7ff fcf0 	bl	800ac52 <__retarget_lock_release_recursive>
 800b272:	e7e9      	b.n	800b248 <_vfiprintf_r+0x4c>
 800b274:	2300      	movs	r3, #0
 800b276:	9309      	str	r3, [sp, #36]	; 0x24
 800b278:	2320      	movs	r3, #32
 800b27a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b27e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b282:	2330      	movs	r3, #48	; 0x30
 800b284:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b448 <_vfiprintf_r+0x24c>
 800b288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b28c:	f04f 0901 	mov.w	r9, #1
 800b290:	4623      	mov	r3, r4
 800b292:	469a      	mov	sl, r3
 800b294:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b298:	b10a      	cbz	r2, 800b29e <_vfiprintf_r+0xa2>
 800b29a:	2a25      	cmp	r2, #37	; 0x25
 800b29c:	d1f9      	bne.n	800b292 <_vfiprintf_r+0x96>
 800b29e:	ebba 0b04 	subs.w	fp, sl, r4
 800b2a2:	d00b      	beq.n	800b2bc <_vfiprintf_r+0xc0>
 800b2a4:	465b      	mov	r3, fp
 800b2a6:	4622      	mov	r2, r4
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f7ff ff93 	bl	800b1d6 <__sfputs_r>
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	f000 80aa 	beq.w	800b40a <_vfiprintf_r+0x20e>
 800b2b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2b8:	445a      	add	r2, fp
 800b2ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b2bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f000 80a2 	beq.w	800b40a <_vfiprintf_r+0x20e>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2d0:	f10a 0a01 	add.w	sl, sl, #1
 800b2d4:	9304      	str	r3, [sp, #16]
 800b2d6:	9307      	str	r3, [sp, #28]
 800b2d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2dc:	931a      	str	r3, [sp, #104]	; 0x68
 800b2de:	4654      	mov	r4, sl
 800b2e0:	2205      	movs	r2, #5
 800b2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e6:	4858      	ldr	r0, [pc, #352]	; (800b448 <_vfiprintf_r+0x24c>)
 800b2e8:	f7f4 ff72 	bl	80001d0 <memchr>
 800b2ec:	9a04      	ldr	r2, [sp, #16]
 800b2ee:	b9d8      	cbnz	r0, 800b328 <_vfiprintf_r+0x12c>
 800b2f0:	06d1      	lsls	r1, r2, #27
 800b2f2:	bf44      	itt	mi
 800b2f4:	2320      	movmi	r3, #32
 800b2f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2fa:	0713      	lsls	r3, r2, #28
 800b2fc:	bf44      	itt	mi
 800b2fe:	232b      	movmi	r3, #43	; 0x2b
 800b300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b304:	f89a 3000 	ldrb.w	r3, [sl]
 800b308:	2b2a      	cmp	r3, #42	; 0x2a
 800b30a:	d015      	beq.n	800b338 <_vfiprintf_r+0x13c>
 800b30c:	9a07      	ldr	r2, [sp, #28]
 800b30e:	4654      	mov	r4, sl
 800b310:	2000      	movs	r0, #0
 800b312:	f04f 0c0a 	mov.w	ip, #10
 800b316:	4621      	mov	r1, r4
 800b318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b31c:	3b30      	subs	r3, #48	; 0x30
 800b31e:	2b09      	cmp	r3, #9
 800b320:	d94e      	bls.n	800b3c0 <_vfiprintf_r+0x1c4>
 800b322:	b1b0      	cbz	r0, 800b352 <_vfiprintf_r+0x156>
 800b324:	9207      	str	r2, [sp, #28]
 800b326:	e014      	b.n	800b352 <_vfiprintf_r+0x156>
 800b328:	eba0 0308 	sub.w	r3, r0, r8
 800b32c:	fa09 f303 	lsl.w	r3, r9, r3
 800b330:	4313      	orrs	r3, r2
 800b332:	9304      	str	r3, [sp, #16]
 800b334:	46a2      	mov	sl, r4
 800b336:	e7d2      	b.n	800b2de <_vfiprintf_r+0xe2>
 800b338:	9b03      	ldr	r3, [sp, #12]
 800b33a:	1d19      	adds	r1, r3, #4
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	9103      	str	r1, [sp, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	bfbb      	ittet	lt
 800b344:	425b      	neglt	r3, r3
 800b346:	f042 0202 	orrlt.w	r2, r2, #2
 800b34a:	9307      	strge	r3, [sp, #28]
 800b34c:	9307      	strlt	r3, [sp, #28]
 800b34e:	bfb8      	it	lt
 800b350:	9204      	strlt	r2, [sp, #16]
 800b352:	7823      	ldrb	r3, [r4, #0]
 800b354:	2b2e      	cmp	r3, #46	; 0x2e
 800b356:	d10c      	bne.n	800b372 <_vfiprintf_r+0x176>
 800b358:	7863      	ldrb	r3, [r4, #1]
 800b35a:	2b2a      	cmp	r3, #42	; 0x2a
 800b35c:	d135      	bne.n	800b3ca <_vfiprintf_r+0x1ce>
 800b35e:	9b03      	ldr	r3, [sp, #12]
 800b360:	1d1a      	adds	r2, r3, #4
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	9203      	str	r2, [sp, #12]
 800b366:	2b00      	cmp	r3, #0
 800b368:	bfb8      	it	lt
 800b36a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b36e:	3402      	adds	r4, #2
 800b370:	9305      	str	r3, [sp, #20]
 800b372:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b458 <_vfiprintf_r+0x25c>
 800b376:	7821      	ldrb	r1, [r4, #0]
 800b378:	2203      	movs	r2, #3
 800b37a:	4650      	mov	r0, sl
 800b37c:	f7f4 ff28 	bl	80001d0 <memchr>
 800b380:	b140      	cbz	r0, 800b394 <_vfiprintf_r+0x198>
 800b382:	2340      	movs	r3, #64	; 0x40
 800b384:	eba0 000a 	sub.w	r0, r0, sl
 800b388:	fa03 f000 	lsl.w	r0, r3, r0
 800b38c:	9b04      	ldr	r3, [sp, #16]
 800b38e:	4303      	orrs	r3, r0
 800b390:	3401      	adds	r4, #1
 800b392:	9304      	str	r3, [sp, #16]
 800b394:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b398:	482c      	ldr	r0, [pc, #176]	; (800b44c <_vfiprintf_r+0x250>)
 800b39a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b39e:	2206      	movs	r2, #6
 800b3a0:	f7f4 ff16 	bl	80001d0 <memchr>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d03f      	beq.n	800b428 <_vfiprintf_r+0x22c>
 800b3a8:	4b29      	ldr	r3, [pc, #164]	; (800b450 <_vfiprintf_r+0x254>)
 800b3aa:	bb1b      	cbnz	r3, 800b3f4 <_vfiprintf_r+0x1f8>
 800b3ac:	9b03      	ldr	r3, [sp, #12]
 800b3ae:	3307      	adds	r3, #7
 800b3b0:	f023 0307 	bic.w	r3, r3, #7
 800b3b4:	3308      	adds	r3, #8
 800b3b6:	9303      	str	r3, [sp, #12]
 800b3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ba:	443b      	add	r3, r7
 800b3bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b3be:	e767      	b.n	800b290 <_vfiprintf_r+0x94>
 800b3c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3c4:	460c      	mov	r4, r1
 800b3c6:	2001      	movs	r0, #1
 800b3c8:	e7a5      	b.n	800b316 <_vfiprintf_r+0x11a>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	3401      	adds	r4, #1
 800b3ce:	9305      	str	r3, [sp, #20]
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	f04f 0c0a 	mov.w	ip, #10
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3dc:	3a30      	subs	r2, #48	; 0x30
 800b3de:	2a09      	cmp	r2, #9
 800b3e0:	d903      	bls.n	800b3ea <_vfiprintf_r+0x1ee>
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d0c5      	beq.n	800b372 <_vfiprintf_r+0x176>
 800b3e6:	9105      	str	r1, [sp, #20]
 800b3e8:	e7c3      	b.n	800b372 <_vfiprintf_r+0x176>
 800b3ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e7f0      	b.n	800b3d6 <_vfiprintf_r+0x1da>
 800b3f4:	ab03      	add	r3, sp, #12
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	462a      	mov	r2, r5
 800b3fa:	4b16      	ldr	r3, [pc, #88]	; (800b454 <_vfiprintf_r+0x258>)
 800b3fc:	a904      	add	r1, sp, #16
 800b3fe:	4630      	mov	r0, r6
 800b400:	f3af 8000 	nop.w
 800b404:	4607      	mov	r7, r0
 800b406:	1c78      	adds	r0, r7, #1
 800b408:	d1d6      	bne.n	800b3b8 <_vfiprintf_r+0x1bc>
 800b40a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b40c:	07d9      	lsls	r1, r3, #31
 800b40e:	d405      	bmi.n	800b41c <_vfiprintf_r+0x220>
 800b410:	89ab      	ldrh	r3, [r5, #12]
 800b412:	059a      	lsls	r2, r3, #22
 800b414:	d402      	bmi.n	800b41c <_vfiprintf_r+0x220>
 800b416:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b418:	f7ff fc1b 	bl	800ac52 <__retarget_lock_release_recursive>
 800b41c:	89ab      	ldrh	r3, [r5, #12]
 800b41e:	065b      	lsls	r3, r3, #25
 800b420:	f53f af12 	bmi.w	800b248 <_vfiprintf_r+0x4c>
 800b424:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b426:	e711      	b.n	800b24c <_vfiprintf_r+0x50>
 800b428:	ab03      	add	r3, sp, #12
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	462a      	mov	r2, r5
 800b42e:	4b09      	ldr	r3, [pc, #36]	; (800b454 <_vfiprintf_r+0x258>)
 800b430:	a904      	add	r1, sp, #16
 800b432:	4630      	mov	r0, r6
 800b434:	f000 f880 	bl	800b538 <_printf_i>
 800b438:	e7e4      	b.n	800b404 <_vfiprintf_r+0x208>
 800b43a:	bf00      	nop
 800b43c:	0800d754 	.word	0x0800d754
 800b440:	0800d774 	.word	0x0800d774
 800b444:	0800d734 	.word	0x0800d734
 800b448:	0800d794 	.word	0x0800d794
 800b44c:	0800d79e 	.word	0x0800d79e
 800b450:	00000000 	.word	0x00000000
 800b454:	0800b1d7 	.word	0x0800b1d7
 800b458:	0800d79a 	.word	0x0800d79a

0800b45c <_printf_common>:
 800b45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b460:	4616      	mov	r6, r2
 800b462:	4699      	mov	r9, r3
 800b464:	688a      	ldr	r2, [r1, #8]
 800b466:	690b      	ldr	r3, [r1, #16]
 800b468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b46c:	4293      	cmp	r3, r2
 800b46e:	bfb8      	it	lt
 800b470:	4613      	movlt	r3, r2
 800b472:	6033      	str	r3, [r6, #0]
 800b474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b478:	4607      	mov	r7, r0
 800b47a:	460c      	mov	r4, r1
 800b47c:	b10a      	cbz	r2, 800b482 <_printf_common+0x26>
 800b47e:	3301      	adds	r3, #1
 800b480:	6033      	str	r3, [r6, #0]
 800b482:	6823      	ldr	r3, [r4, #0]
 800b484:	0699      	lsls	r1, r3, #26
 800b486:	bf42      	ittt	mi
 800b488:	6833      	ldrmi	r3, [r6, #0]
 800b48a:	3302      	addmi	r3, #2
 800b48c:	6033      	strmi	r3, [r6, #0]
 800b48e:	6825      	ldr	r5, [r4, #0]
 800b490:	f015 0506 	ands.w	r5, r5, #6
 800b494:	d106      	bne.n	800b4a4 <_printf_common+0x48>
 800b496:	f104 0a19 	add.w	sl, r4, #25
 800b49a:	68e3      	ldr	r3, [r4, #12]
 800b49c:	6832      	ldr	r2, [r6, #0]
 800b49e:	1a9b      	subs	r3, r3, r2
 800b4a0:	42ab      	cmp	r3, r5
 800b4a2:	dc26      	bgt.n	800b4f2 <_printf_common+0x96>
 800b4a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4a8:	1e13      	subs	r3, r2, #0
 800b4aa:	6822      	ldr	r2, [r4, #0]
 800b4ac:	bf18      	it	ne
 800b4ae:	2301      	movne	r3, #1
 800b4b0:	0692      	lsls	r2, r2, #26
 800b4b2:	d42b      	bmi.n	800b50c <_printf_common+0xb0>
 800b4b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4b8:	4649      	mov	r1, r9
 800b4ba:	4638      	mov	r0, r7
 800b4bc:	47c0      	blx	r8
 800b4be:	3001      	adds	r0, #1
 800b4c0:	d01e      	beq.n	800b500 <_printf_common+0xa4>
 800b4c2:	6823      	ldr	r3, [r4, #0]
 800b4c4:	68e5      	ldr	r5, [r4, #12]
 800b4c6:	6832      	ldr	r2, [r6, #0]
 800b4c8:	f003 0306 	and.w	r3, r3, #6
 800b4cc:	2b04      	cmp	r3, #4
 800b4ce:	bf08      	it	eq
 800b4d0:	1aad      	subeq	r5, r5, r2
 800b4d2:	68a3      	ldr	r3, [r4, #8]
 800b4d4:	6922      	ldr	r2, [r4, #16]
 800b4d6:	bf0c      	ite	eq
 800b4d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4dc:	2500      	movne	r5, #0
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	bfc4      	itt	gt
 800b4e2:	1a9b      	subgt	r3, r3, r2
 800b4e4:	18ed      	addgt	r5, r5, r3
 800b4e6:	2600      	movs	r6, #0
 800b4e8:	341a      	adds	r4, #26
 800b4ea:	42b5      	cmp	r5, r6
 800b4ec:	d11a      	bne.n	800b524 <_printf_common+0xc8>
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	e008      	b.n	800b504 <_printf_common+0xa8>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	4652      	mov	r2, sl
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	4638      	mov	r0, r7
 800b4fa:	47c0      	blx	r8
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d103      	bne.n	800b508 <_printf_common+0xac>
 800b500:	f04f 30ff 	mov.w	r0, #4294967295
 800b504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b508:	3501      	adds	r5, #1
 800b50a:	e7c6      	b.n	800b49a <_printf_common+0x3e>
 800b50c:	18e1      	adds	r1, r4, r3
 800b50e:	1c5a      	adds	r2, r3, #1
 800b510:	2030      	movs	r0, #48	; 0x30
 800b512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b516:	4422      	add	r2, r4
 800b518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b51c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b520:	3302      	adds	r3, #2
 800b522:	e7c7      	b.n	800b4b4 <_printf_common+0x58>
 800b524:	2301      	movs	r3, #1
 800b526:	4622      	mov	r2, r4
 800b528:	4649      	mov	r1, r9
 800b52a:	4638      	mov	r0, r7
 800b52c:	47c0      	blx	r8
 800b52e:	3001      	adds	r0, #1
 800b530:	d0e6      	beq.n	800b500 <_printf_common+0xa4>
 800b532:	3601      	adds	r6, #1
 800b534:	e7d9      	b.n	800b4ea <_printf_common+0x8e>
	...

0800b538 <_printf_i>:
 800b538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b53c:	7e0f      	ldrb	r7, [r1, #24]
 800b53e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b540:	2f78      	cmp	r7, #120	; 0x78
 800b542:	4691      	mov	r9, r2
 800b544:	4680      	mov	r8, r0
 800b546:	460c      	mov	r4, r1
 800b548:	469a      	mov	sl, r3
 800b54a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b54e:	d807      	bhi.n	800b560 <_printf_i+0x28>
 800b550:	2f62      	cmp	r7, #98	; 0x62
 800b552:	d80a      	bhi.n	800b56a <_printf_i+0x32>
 800b554:	2f00      	cmp	r7, #0
 800b556:	f000 80d8 	beq.w	800b70a <_printf_i+0x1d2>
 800b55a:	2f58      	cmp	r7, #88	; 0x58
 800b55c:	f000 80a3 	beq.w	800b6a6 <_printf_i+0x16e>
 800b560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b568:	e03a      	b.n	800b5e0 <_printf_i+0xa8>
 800b56a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b56e:	2b15      	cmp	r3, #21
 800b570:	d8f6      	bhi.n	800b560 <_printf_i+0x28>
 800b572:	a101      	add	r1, pc, #4	; (adr r1, 800b578 <_printf_i+0x40>)
 800b574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b578:	0800b5d1 	.word	0x0800b5d1
 800b57c:	0800b5e5 	.word	0x0800b5e5
 800b580:	0800b561 	.word	0x0800b561
 800b584:	0800b561 	.word	0x0800b561
 800b588:	0800b561 	.word	0x0800b561
 800b58c:	0800b561 	.word	0x0800b561
 800b590:	0800b5e5 	.word	0x0800b5e5
 800b594:	0800b561 	.word	0x0800b561
 800b598:	0800b561 	.word	0x0800b561
 800b59c:	0800b561 	.word	0x0800b561
 800b5a0:	0800b561 	.word	0x0800b561
 800b5a4:	0800b6f1 	.word	0x0800b6f1
 800b5a8:	0800b615 	.word	0x0800b615
 800b5ac:	0800b6d3 	.word	0x0800b6d3
 800b5b0:	0800b561 	.word	0x0800b561
 800b5b4:	0800b561 	.word	0x0800b561
 800b5b8:	0800b713 	.word	0x0800b713
 800b5bc:	0800b561 	.word	0x0800b561
 800b5c0:	0800b615 	.word	0x0800b615
 800b5c4:	0800b561 	.word	0x0800b561
 800b5c8:	0800b561 	.word	0x0800b561
 800b5cc:	0800b6db 	.word	0x0800b6db
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	1d1a      	adds	r2, r3, #4
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	602a      	str	r2, [r5, #0]
 800b5d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e0a3      	b.n	800b72c <_printf_i+0x1f4>
 800b5e4:	6820      	ldr	r0, [r4, #0]
 800b5e6:	6829      	ldr	r1, [r5, #0]
 800b5e8:	0606      	lsls	r6, r0, #24
 800b5ea:	f101 0304 	add.w	r3, r1, #4
 800b5ee:	d50a      	bpl.n	800b606 <_printf_i+0xce>
 800b5f0:	680e      	ldr	r6, [r1, #0]
 800b5f2:	602b      	str	r3, [r5, #0]
 800b5f4:	2e00      	cmp	r6, #0
 800b5f6:	da03      	bge.n	800b600 <_printf_i+0xc8>
 800b5f8:	232d      	movs	r3, #45	; 0x2d
 800b5fa:	4276      	negs	r6, r6
 800b5fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b600:	485e      	ldr	r0, [pc, #376]	; (800b77c <_printf_i+0x244>)
 800b602:	230a      	movs	r3, #10
 800b604:	e019      	b.n	800b63a <_printf_i+0x102>
 800b606:	680e      	ldr	r6, [r1, #0]
 800b608:	602b      	str	r3, [r5, #0]
 800b60a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b60e:	bf18      	it	ne
 800b610:	b236      	sxthne	r6, r6
 800b612:	e7ef      	b.n	800b5f4 <_printf_i+0xbc>
 800b614:	682b      	ldr	r3, [r5, #0]
 800b616:	6820      	ldr	r0, [r4, #0]
 800b618:	1d19      	adds	r1, r3, #4
 800b61a:	6029      	str	r1, [r5, #0]
 800b61c:	0601      	lsls	r1, r0, #24
 800b61e:	d501      	bpl.n	800b624 <_printf_i+0xec>
 800b620:	681e      	ldr	r6, [r3, #0]
 800b622:	e002      	b.n	800b62a <_printf_i+0xf2>
 800b624:	0646      	lsls	r6, r0, #25
 800b626:	d5fb      	bpl.n	800b620 <_printf_i+0xe8>
 800b628:	881e      	ldrh	r6, [r3, #0]
 800b62a:	4854      	ldr	r0, [pc, #336]	; (800b77c <_printf_i+0x244>)
 800b62c:	2f6f      	cmp	r7, #111	; 0x6f
 800b62e:	bf0c      	ite	eq
 800b630:	2308      	moveq	r3, #8
 800b632:	230a      	movne	r3, #10
 800b634:	2100      	movs	r1, #0
 800b636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b63a:	6865      	ldr	r5, [r4, #4]
 800b63c:	60a5      	str	r5, [r4, #8]
 800b63e:	2d00      	cmp	r5, #0
 800b640:	bfa2      	ittt	ge
 800b642:	6821      	ldrge	r1, [r4, #0]
 800b644:	f021 0104 	bicge.w	r1, r1, #4
 800b648:	6021      	strge	r1, [r4, #0]
 800b64a:	b90e      	cbnz	r6, 800b650 <_printf_i+0x118>
 800b64c:	2d00      	cmp	r5, #0
 800b64e:	d04d      	beq.n	800b6ec <_printf_i+0x1b4>
 800b650:	4615      	mov	r5, r2
 800b652:	fbb6 f1f3 	udiv	r1, r6, r3
 800b656:	fb03 6711 	mls	r7, r3, r1, r6
 800b65a:	5dc7      	ldrb	r7, [r0, r7]
 800b65c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b660:	4637      	mov	r7, r6
 800b662:	42bb      	cmp	r3, r7
 800b664:	460e      	mov	r6, r1
 800b666:	d9f4      	bls.n	800b652 <_printf_i+0x11a>
 800b668:	2b08      	cmp	r3, #8
 800b66a:	d10b      	bne.n	800b684 <_printf_i+0x14c>
 800b66c:	6823      	ldr	r3, [r4, #0]
 800b66e:	07de      	lsls	r6, r3, #31
 800b670:	d508      	bpl.n	800b684 <_printf_i+0x14c>
 800b672:	6923      	ldr	r3, [r4, #16]
 800b674:	6861      	ldr	r1, [r4, #4]
 800b676:	4299      	cmp	r1, r3
 800b678:	bfde      	ittt	le
 800b67a:	2330      	movle	r3, #48	; 0x30
 800b67c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b680:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b684:	1b52      	subs	r2, r2, r5
 800b686:	6122      	str	r2, [r4, #16]
 800b688:	f8cd a000 	str.w	sl, [sp]
 800b68c:	464b      	mov	r3, r9
 800b68e:	aa03      	add	r2, sp, #12
 800b690:	4621      	mov	r1, r4
 800b692:	4640      	mov	r0, r8
 800b694:	f7ff fee2 	bl	800b45c <_printf_common>
 800b698:	3001      	adds	r0, #1
 800b69a:	d14c      	bne.n	800b736 <_printf_i+0x1fe>
 800b69c:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a0:	b004      	add	sp, #16
 800b6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a6:	4835      	ldr	r0, [pc, #212]	; (800b77c <_printf_i+0x244>)
 800b6a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b6ac:	6829      	ldr	r1, [r5, #0]
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b6b4:	6029      	str	r1, [r5, #0]
 800b6b6:	061d      	lsls	r5, r3, #24
 800b6b8:	d514      	bpl.n	800b6e4 <_printf_i+0x1ac>
 800b6ba:	07df      	lsls	r7, r3, #31
 800b6bc:	bf44      	itt	mi
 800b6be:	f043 0320 	orrmi.w	r3, r3, #32
 800b6c2:	6023      	strmi	r3, [r4, #0]
 800b6c4:	b91e      	cbnz	r6, 800b6ce <_printf_i+0x196>
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	f023 0320 	bic.w	r3, r3, #32
 800b6cc:	6023      	str	r3, [r4, #0]
 800b6ce:	2310      	movs	r3, #16
 800b6d0:	e7b0      	b.n	800b634 <_printf_i+0xfc>
 800b6d2:	6823      	ldr	r3, [r4, #0]
 800b6d4:	f043 0320 	orr.w	r3, r3, #32
 800b6d8:	6023      	str	r3, [r4, #0]
 800b6da:	2378      	movs	r3, #120	; 0x78
 800b6dc:	4828      	ldr	r0, [pc, #160]	; (800b780 <_printf_i+0x248>)
 800b6de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6e2:	e7e3      	b.n	800b6ac <_printf_i+0x174>
 800b6e4:	0659      	lsls	r1, r3, #25
 800b6e6:	bf48      	it	mi
 800b6e8:	b2b6      	uxthmi	r6, r6
 800b6ea:	e7e6      	b.n	800b6ba <_printf_i+0x182>
 800b6ec:	4615      	mov	r5, r2
 800b6ee:	e7bb      	b.n	800b668 <_printf_i+0x130>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	6826      	ldr	r6, [r4, #0]
 800b6f4:	6961      	ldr	r1, [r4, #20]
 800b6f6:	1d18      	adds	r0, r3, #4
 800b6f8:	6028      	str	r0, [r5, #0]
 800b6fa:	0635      	lsls	r5, r6, #24
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	d501      	bpl.n	800b704 <_printf_i+0x1cc>
 800b700:	6019      	str	r1, [r3, #0]
 800b702:	e002      	b.n	800b70a <_printf_i+0x1d2>
 800b704:	0670      	lsls	r0, r6, #25
 800b706:	d5fb      	bpl.n	800b700 <_printf_i+0x1c8>
 800b708:	8019      	strh	r1, [r3, #0]
 800b70a:	2300      	movs	r3, #0
 800b70c:	6123      	str	r3, [r4, #16]
 800b70e:	4615      	mov	r5, r2
 800b710:	e7ba      	b.n	800b688 <_printf_i+0x150>
 800b712:	682b      	ldr	r3, [r5, #0]
 800b714:	1d1a      	adds	r2, r3, #4
 800b716:	602a      	str	r2, [r5, #0]
 800b718:	681d      	ldr	r5, [r3, #0]
 800b71a:	6862      	ldr	r2, [r4, #4]
 800b71c:	2100      	movs	r1, #0
 800b71e:	4628      	mov	r0, r5
 800b720:	f7f4 fd56 	bl	80001d0 <memchr>
 800b724:	b108      	cbz	r0, 800b72a <_printf_i+0x1f2>
 800b726:	1b40      	subs	r0, r0, r5
 800b728:	6060      	str	r0, [r4, #4]
 800b72a:	6863      	ldr	r3, [r4, #4]
 800b72c:	6123      	str	r3, [r4, #16]
 800b72e:	2300      	movs	r3, #0
 800b730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b734:	e7a8      	b.n	800b688 <_printf_i+0x150>
 800b736:	6923      	ldr	r3, [r4, #16]
 800b738:	462a      	mov	r2, r5
 800b73a:	4649      	mov	r1, r9
 800b73c:	4640      	mov	r0, r8
 800b73e:	47d0      	blx	sl
 800b740:	3001      	adds	r0, #1
 800b742:	d0ab      	beq.n	800b69c <_printf_i+0x164>
 800b744:	6823      	ldr	r3, [r4, #0]
 800b746:	079b      	lsls	r3, r3, #30
 800b748:	d413      	bmi.n	800b772 <_printf_i+0x23a>
 800b74a:	68e0      	ldr	r0, [r4, #12]
 800b74c:	9b03      	ldr	r3, [sp, #12]
 800b74e:	4298      	cmp	r0, r3
 800b750:	bfb8      	it	lt
 800b752:	4618      	movlt	r0, r3
 800b754:	e7a4      	b.n	800b6a0 <_printf_i+0x168>
 800b756:	2301      	movs	r3, #1
 800b758:	4632      	mov	r2, r6
 800b75a:	4649      	mov	r1, r9
 800b75c:	4640      	mov	r0, r8
 800b75e:	47d0      	blx	sl
 800b760:	3001      	adds	r0, #1
 800b762:	d09b      	beq.n	800b69c <_printf_i+0x164>
 800b764:	3501      	adds	r5, #1
 800b766:	68e3      	ldr	r3, [r4, #12]
 800b768:	9903      	ldr	r1, [sp, #12]
 800b76a:	1a5b      	subs	r3, r3, r1
 800b76c:	42ab      	cmp	r3, r5
 800b76e:	dcf2      	bgt.n	800b756 <_printf_i+0x21e>
 800b770:	e7eb      	b.n	800b74a <_printf_i+0x212>
 800b772:	2500      	movs	r5, #0
 800b774:	f104 0619 	add.w	r6, r4, #25
 800b778:	e7f5      	b.n	800b766 <_printf_i+0x22e>
 800b77a:	bf00      	nop
 800b77c:	0800d7a5 	.word	0x0800d7a5
 800b780:	0800d7b6 	.word	0x0800d7b6

0800b784 <_sbrk_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4d06      	ldr	r5, [pc, #24]	; (800b7a0 <_sbrk_r+0x1c>)
 800b788:	2300      	movs	r3, #0
 800b78a:	4604      	mov	r4, r0
 800b78c:	4608      	mov	r0, r1
 800b78e:	602b      	str	r3, [r5, #0]
 800b790:	f7f9 f866 	bl	8004860 <_sbrk>
 800b794:	1c43      	adds	r3, r0, #1
 800b796:	d102      	bne.n	800b79e <_sbrk_r+0x1a>
 800b798:	682b      	ldr	r3, [r5, #0]
 800b79a:	b103      	cbz	r3, 800b79e <_sbrk_r+0x1a>
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	bd38      	pop	{r3, r4, r5, pc}
 800b7a0:	200029fc 	.word	0x200029fc

0800b7a4 <__sread>:
 800b7a4:	b510      	push	{r4, lr}
 800b7a6:	460c      	mov	r4, r1
 800b7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ac:	f000 f900 	bl	800b9b0 <_read_r>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	bfab      	itete	ge
 800b7b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b7b8:	181b      	addge	r3, r3, r0
 800b7ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7be:	bfac      	ite	ge
 800b7c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7c2:	81a3      	strhlt	r3, [r4, #12]
 800b7c4:	bd10      	pop	{r4, pc}

0800b7c6 <__swrite>:
 800b7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ca:	461f      	mov	r7, r3
 800b7cc:	898b      	ldrh	r3, [r1, #12]
 800b7ce:	05db      	lsls	r3, r3, #23
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	4616      	mov	r6, r2
 800b7d6:	d505      	bpl.n	800b7e4 <__swrite+0x1e>
 800b7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7dc:	2302      	movs	r3, #2
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f000 f870 	bl	800b8c4 <_lseek_r>
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7ee:	81a3      	strh	r3, [r4, #12]
 800b7f0:	4632      	mov	r2, r6
 800b7f2:	463b      	mov	r3, r7
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7fa:	f000 b817 	b.w	800b82c <_write_r>

0800b7fe <__sseek>:
 800b7fe:	b510      	push	{r4, lr}
 800b800:	460c      	mov	r4, r1
 800b802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b806:	f000 f85d 	bl	800b8c4 <_lseek_r>
 800b80a:	1c43      	adds	r3, r0, #1
 800b80c:	89a3      	ldrh	r3, [r4, #12]
 800b80e:	bf15      	itete	ne
 800b810:	6560      	strne	r0, [r4, #84]	; 0x54
 800b812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b81a:	81a3      	strheq	r3, [r4, #12]
 800b81c:	bf18      	it	ne
 800b81e:	81a3      	strhne	r3, [r4, #12]
 800b820:	bd10      	pop	{r4, pc}

0800b822 <__sclose>:
 800b822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b826:	f000 b81b 	b.w	800b860 <_close_r>
	...

0800b82c <_write_r>:
 800b82c:	b538      	push	{r3, r4, r5, lr}
 800b82e:	4d07      	ldr	r5, [pc, #28]	; (800b84c <_write_r+0x20>)
 800b830:	4604      	mov	r4, r0
 800b832:	4608      	mov	r0, r1
 800b834:	4611      	mov	r1, r2
 800b836:	2200      	movs	r2, #0
 800b838:	602a      	str	r2, [r5, #0]
 800b83a:	461a      	mov	r2, r3
 800b83c:	f7f6 fd06 	bl	800224c <_write>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d102      	bne.n	800b84a <_write_r+0x1e>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	b103      	cbz	r3, 800b84a <_write_r+0x1e>
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	200029fc 	.word	0x200029fc

0800b850 <abort>:
 800b850:	b508      	push	{r3, lr}
 800b852:	2006      	movs	r0, #6
 800b854:	f000 f8e6 	bl	800ba24 <raise>
 800b858:	2001      	movs	r0, #1
 800b85a:	f7f8 ffa5 	bl	80047a8 <_exit>
	...

0800b860 <_close_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	4d06      	ldr	r5, [pc, #24]	; (800b87c <_close_r+0x1c>)
 800b864:	2300      	movs	r3, #0
 800b866:	4604      	mov	r4, r0
 800b868:	4608      	mov	r0, r1
 800b86a:	602b      	str	r3, [r5, #0]
 800b86c:	f7f8 ffc3 	bl	80047f6 <_close>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d102      	bne.n	800b87a <_close_r+0x1a>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	b103      	cbz	r3, 800b87a <_close_r+0x1a>
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	bd38      	pop	{r3, r4, r5, pc}
 800b87c:	200029fc 	.word	0x200029fc

0800b880 <_fstat_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4d07      	ldr	r5, [pc, #28]	; (800b8a0 <_fstat_r+0x20>)
 800b884:	2300      	movs	r3, #0
 800b886:	4604      	mov	r4, r0
 800b888:	4608      	mov	r0, r1
 800b88a:	4611      	mov	r1, r2
 800b88c:	602b      	str	r3, [r5, #0]
 800b88e:	f7f8 ffbe 	bl	800480e <_fstat>
 800b892:	1c43      	adds	r3, r0, #1
 800b894:	d102      	bne.n	800b89c <_fstat_r+0x1c>
 800b896:	682b      	ldr	r3, [r5, #0]
 800b898:	b103      	cbz	r3, 800b89c <_fstat_r+0x1c>
 800b89a:	6023      	str	r3, [r4, #0]
 800b89c:	bd38      	pop	{r3, r4, r5, pc}
 800b89e:	bf00      	nop
 800b8a0:	200029fc 	.word	0x200029fc

0800b8a4 <_isatty_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4d06      	ldr	r5, [pc, #24]	; (800b8c0 <_isatty_r+0x1c>)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	4608      	mov	r0, r1
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	f7f8 ffbd 	bl	800482e <_isatty>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	d102      	bne.n	800b8be <_isatty_r+0x1a>
 800b8b8:	682b      	ldr	r3, [r5, #0]
 800b8ba:	b103      	cbz	r3, 800b8be <_isatty_r+0x1a>
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	200029fc 	.word	0x200029fc

0800b8c4 <_lseek_r>:
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	4d07      	ldr	r5, [pc, #28]	; (800b8e4 <_lseek_r+0x20>)
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	4608      	mov	r0, r1
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	602a      	str	r2, [r5, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f7f8 ffb6 	bl	8004844 <_lseek>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	d102      	bne.n	800b8e2 <_lseek_r+0x1e>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	b103      	cbz	r3, 800b8e2 <_lseek_r+0x1e>
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	bd38      	pop	{r3, r4, r5, pc}
 800b8e4:	200029fc 	.word	0x200029fc

0800b8e8 <memcpy>:
 800b8e8:	440a      	add	r2, r1
 800b8ea:	4291      	cmp	r1, r2
 800b8ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8f0:	d100      	bne.n	800b8f4 <memcpy+0xc>
 800b8f2:	4770      	bx	lr
 800b8f4:	b510      	push	{r4, lr}
 800b8f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8fe:	4291      	cmp	r1, r2
 800b900:	d1f9      	bne.n	800b8f6 <memcpy+0xe>
 800b902:	bd10      	pop	{r4, pc}

0800b904 <memmove>:
 800b904:	4288      	cmp	r0, r1
 800b906:	b510      	push	{r4, lr}
 800b908:	eb01 0402 	add.w	r4, r1, r2
 800b90c:	d902      	bls.n	800b914 <memmove+0x10>
 800b90e:	4284      	cmp	r4, r0
 800b910:	4623      	mov	r3, r4
 800b912:	d807      	bhi.n	800b924 <memmove+0x20>
 800b914:	1e43      	subs	r3, r0, #1
 800b916:	42a1      	cmp	r1, r4
 800b918:	d008      	beq.n	800b92c <memmove+0x28>
 800b91a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b91e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b922:	e7f8      	b.n	800b916 <memmove+0x12>
 800b924:	4402      	add	r2, r0
 800b926:	4601      	mov	r1, r0
 800b928:	428a      	cmp	r2, r1
 800b92a:	d100      	bne.n	800b92e <memmove+0x2a>
 800b92c:	bd10      	pop	{r4, pc}
 800b92e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b932:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b936:	e7f7      	b.n	800b928 <memmove+0x24>

0800b938 <__malloc_lock>:
 800b938:	4801      	ldr	r0, [pc, #4]	; (800b940 <__malloc_lock+0x8>)
 800b93a:	f7ff b989 	b.w	800ac50 <__retarget_lock_acquire_recursive>
 800b93e:	bf00      	nop
 800b940:	200029f0 	.word	0x200029f0

0800b944 <__malloc_unlock>:
 800b944:	4801      	ldr	r0, [pc, #4]	; (800b94c <__malloc_unlock+0x8>)
 800b946:	f7ff b984 	b.w	800ac52 <__retarget_lock_release_recursive>
 800b94a:	bf00      	nop
 800b94c:	200029f0 	.word	0x200029f0

0800b950 <_realloc_r>:
 800b950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b954:	4680      	mov	r8, r0
 800b956:	4614      	mov	r4, r2
 800b958:	460e      	mov	r6, r1
 800b95a:	b921      	cbnz	r1, 800b966 <_realloc_r+0x16>
 800b95c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b960:	4611      	mov	r1, r2
 800b962:	f7ff ba51 	b.w	800ae08 <_malloc_r>
 800b966:	b92a      	cbnz	r2, 800b974 <_realloc_r+0x24>
 800b968:	f7ff f9e2 	bl	800ad30 <_free_r>
 800b96c:	4625      	mov	r5, r4
 800b96e:	4628      	mov	r0, r5
 800b970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b974:	f000 f872 	bl	800ba5c <_malloc_usable_size_r>
 800b978:	4284      	cmp	r4, r0
 800b97a:	4607      	mov	r7, r0
 800b97c:	d802      	bhi.n	800b984 <_realloc_r+0x34>
 800b97e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b982:	d812      	bhi.n	800b9aa <_realloc_r+0x5a>
 800b984:	4621      	mov	r1, r4
 800b986:	4640      	mov	r0, r8
 800b988:	f7ff fa3e 	bl	800ae08 <_malloc_r>
 800b98c:	4605      	mov	r5, r0
 800b98e:	2800      	cmp	r0, #0
 800b990:	d0ed      	beq.n	800b96e <_realloc_r+0x1e>
 800b992:	42bc      	cmp	r4, r7
 800b994:	4622      	mov	r2, r4
 800b996:	4631      	mov	r1, r6
 800b998:	bf28      	it	cs
 800b99a:	463a      	movcs	r2, r7
 800b99c:	f7ff ffa4 	bl	800b8e8 <memcpy>
 800b9a0:	4631      	mov	r1, r6
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	f7ff f9c4 	bl	800ad30 <_free_r>
 800b9a8:	e7e1      	b.n	800b96e <_realloc_r+0x1e>
 800b9aa:	4635      	mov	r5, r6
 800b9ac:	e7df      	b.n	800b96e <_realloc_r+0x1e>
	...

0800b9b0 <_read_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4d07      	ldr	r5, [pc, #28]	; (800b9d0 <_read_r+0x20>)
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	4608      	mov	r0, r1
 800b9b8:	4611      	mov	r1, r2
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	602a      	str	r2, [r5, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f7f8 fefc 	bl	80047bc <_read>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d102      	bne.n	800b9ce <_read_r+0x1e>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	b103      	cbz	r3, 800b9ce <_read_r+0x1e>
 800b9cc:	6023      	str	r3, [r4, #0]
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	200029fc 	.word	0x200029fc

0800b9d4 <_raise_r>:
 800b9d4:	291f      	cmp	r1, #31
 800b9d6:	b538      	push	{r3, r4, r5, lr}
 800b9d8:	4604      	mov	r4, r0
 800b9da:	460d      	mov	r5, r1
 800b9dc:	d904      	bls.n	800b9e8 <_raise_r+0x14>
 800b9de:	2316      	movs	r3, #22
 800b9e0:	6003      	str	r3, [r0, #0]
 800b9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e6:	bd38      	pop	{r3, r4, r5, pc}
 800b9e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b9ea:	b112      	cbz	r2, 800b9f2 <_raise_r+0x1e>
 800b9ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9f0:	b94b      	cbnz	r3, 800ba06 <_raise_r+0x32>
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f000 f830 	bl	800ba58 <_getpid_r>
 800b9f8:	462a      	mov	r2, r5
 800b9fa:	4601      	mov	r1, r0
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba02:	f000 b817 	b.w	800ba34 <_kill_r>
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d00a      	beq.n	800ba20 <_raise_r+0x4c>
 800ba0a:	1c59      	adds	r1, r3, #1
 800ba0c:	d103      	bne.n	800ba16 <_raise_r+0x42>
 800ba0e:	2316      	movs	r3, #22
 800ba10:	6003      	str	r3, [r0, #0]
 800ba12:	2001      	movs	r0, #1
 800ba14:	e7e7      	b.n	800b9e6 <_raise_r+0x12>
 800ba16:	2400      	movs	r4, #0
 800ba18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	4798      	blx	r3
 800ba20:	2000      	movs	r0, #0
 800ba22:	e7e0      	b.n	800b9e6 <_raise_r+0x12>

0800ba24 <raise>:
 800ba24:	4b02      	ldr	r3, [pc, #8]	; (800ba30 <raise+0xc>)
 800ba26:	4601      	mov	r1, r0
 800ba28:	6818      	ldr	r0, [r3, #0]
 800ba2a:	f7ff bfd3 	b.w	800b9d4 <_raise_r>
 800ba2e:	bf00      	nop
 800ba30:	20000068 	.word	0x20000068

0800ba34 <_kill_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	4d07      	ldr	r5, [pc, #28]	; (800ba54 <_kill_r+0x20>)
 800ba38:	2300      	movs	r3, #0
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	4608      	mov	r0, r1
 800ba3e:	4611      	mov	r1, r2
 800ba40:	602b      	str	r3, [r5, #0]
 800ba42:	f7f8 fea1 	bl	8004788 <_kill>
 800ba46:	1c43      	adds	r3, r0, #1
 800ba48:	d102      	bne.n	800ba50 <_kill_r+0x1c>
 800ba4a:	682b      	ldr	r3, [r5, #0]
 800ba4c:	b103      	cbz	r3, 800ba50 <_kill_r+0x1c>
 800ba4e:	6023      	str	r3, [r4, #0]
 800ba50:	bd38      	pop	{r3, r4, r5, pc}
 800ba52:	bf00      	nop
 800ba54:	200029fc 	.word	0x200029fc

0800ba58 <_getpid_r>:
 800ba58:	f7f8 be8e 	b.w	8004778 <_getpid>

0800ba5c <_malloc_usable_size_r>:
 800ba5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba60:	1f18      	subs	r0, r3, #4
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	bfbc      	itt	lt
 800ba66:	580b      	ldrlt	r3, [r1, r0]
 800ba68:	18c0      	addlt	r0, r0, r3
 800ba6a:	4770      	bx	lr

0800ba6c <_init>:
 800ba6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6e:	bf00      	nop
 800ba70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba72:	bc08      	pop	{r3}
 800ba74:	469e      	mov	lr, r3
 800ba76:	4770      	bx	lr

0800ba78 <_fini>:
 800ba78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7a:	bf00      	nop
 800ba7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba7e:	bc08      	pop	{r3}
 800ba80:	469e      	mov	lr, r3
 800ba82:	4770      	bx	lr
