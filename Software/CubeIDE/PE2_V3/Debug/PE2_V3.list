
PE2_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e4c  0800bbb0  0800bbb0  0001bbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9fc  0800d9fc  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800d9fc  0800d9fc  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d9fc  0800d9fc  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9fc  0800d9fc  0001d9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da00  0800da00  0001da00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800da04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002938  200000cc  0800dad0  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a04  0800dad0  00022a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015408  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003624  00000000  00000000  00035504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00038b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00039c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197c7  00000000  00000000  0003aba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019203  00000000  00000000  00054367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865b4  00000000  00000000  0006d56a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3b1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005128  00000000  00000000  000f3b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb98 	.word	0x0800bb98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	0800bb98 	.word	0x0800bb98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <initBrickbreaker>:
uint8_t loopTester = 0;
uint8_t guardian = 0;
uint8_t guardianTimer = 100;
int toughnessColor[4] = {D_GREEN, GREY, DARK_GREY, BLACK};

void initBrickbreaker() {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
    person.x = SCREEN_WIDTH/2;
 8000286:	4b49      	ldr	r3, [pc, #292]	; (80003ac <initBrickbreaker+0x12c>)
 8000288:	2228      	movs	r2, #40	; 0x28
 800028a:	701a      	strb	r2, [r3, #0]
    person.y = SCREEN_HEIGHT - 5;
 800028c:	4b47      	ldr	r3, [pc, #284]	; (80003ac <initBrickbreaker+0x12c>)
 800028e:	2237      	movs	r2, #55	; 0x37
 8000290:	705a      	strb	r2, [r3, #1]
    ball.x = SCREEN_WIDTH/2;
 8000292:	4b47      	ldr	r3, [pc, #284]	; (80003b0 <initBrickbreaker+0x130>)
 8000294:	2228      	movs	r2, #40	; 0x28
 8000296:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000298:	4b45      	ldr	r3, [pc, #276]	; (80003b0 <initBrickbreaker+0x130>)
 800029a:	2236      	movs	r2, #54	; 0x36
 800029c:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 800029e:	4b44      	ldr	r3, [pc, #272]	; (80003b0 <initBrickbreaker+0x130>)
 80002a0:	2208      	movs	r2, #8
 80002a2:	721a      	strb	r2, [r3, #8]
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e041      	b.n	800032e <initBrickbreaker+0xae>
        for(int j = 0; j < 10; j++) {
 80002aa:	2300      	movs	r3, #0
 80002ac:	60bb      	str	r3, [r7, #8]
 80002ae:	e038      	b.n	8000322 <initBrickbreaker+0xa2>
            bricks[i][j].x = j * 8;
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	00d9      	lsls	r1, r3, #3
 80002b4:	483f      	ldr	r0, [pc, #252]	; (80003b4 <initBrickbreaker+0x134>)
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	4613      	mov	r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	4413      	add	r3, r2
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	68ba      	ldr	r2, [r7, #8]
 80002c2:	4413      	add	r3, r2
 80002c4:	011b      	lsls	r3, r3, #4
 80002c6:	4403      	add	r3, r0
 80002c8:	6019      	str	r1, [r3, #0]
            bricks[i][j].y = i + 8;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	f103 0108 	add.w	r1, r3, #8
 80002d0:	4838      	ldr	r0, [pc, #224]	; (80003b4 <initBrickbreaker+0x134>)
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	4613      	mov	r3, r2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4413      	add	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	4413      	add	r3, r2
 80002e0:	011b      	lsls	r3, r3, #4
 80002e2:	4403      	add	r3, r0
 80002e4:	3304      	adds	r3, #4
 80002e6:	6019      	str	r1, [r3, #0]
            bricks[i][j].visible = 0;
 80002e8:	4932      	ldr	r1, [pc, #200]	; (80003b4 <initBrickbreaker+0x134>)
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	4613      	mov	r3, r2
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	4413      	add	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	68ba      	ldr	r2, [r7, #8]
 80002f6:	4413      	add	r3, r2
 80002f8:	011b      	lsls	r3, r3, #4
 80002fa:	440b      	add	r3, r1
 80002fc:	3308      	adds	r3, #8
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = 1;
 8000302:	492c      	ldr	r1, [pc, #176]	; (80003b4 <initBrickbreaker+0x134>)
 8000304:	68fa      	ldr	r2, [r7, #12]
 8000306:	4613      	mov	r3, r2
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	4413      	add	r3, r2
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	4413      	add	r3, r2
 8000312:	011b      	lsls	r3, r3, #4
 8000314:	440b      	add	r3, r1
 8000316:	330c      	adds	r3, #12
 8000318:	2201      	movs	r2, #1
 800031a:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < 10; j++) {
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	3301      	adds	r3, #1
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	2b09      	cmp	r3, #9
 8000326:	ddc3      	ble.n	80002b0 <initBrickbreaker+0x30>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2b2f      	cmp	r3, #47	; 0x2f
 8000332:	ddba      	ble.n	80002aa <initBrickbreaker+0x2a>
        }
    }

    for (int i = 0; i < BRICK_LINES; i++) {
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	e027      	b.n	800038a <initBrickbreaker+0x10a>
        for(int j = 0; j < 10; j++) {
 800033a:	2300      	movs	r3, #0
 800033c:	603b      	str	r3, [r7, #0]
 800033e:	e01e      	b.n	800037e <initBrickbreaker+0xfe>
            bricks[i][j].visible = 1;
 8000340:	491c      	ldr	r1, [pc, #112]	; (80003b4 <initBrickbreaker+0x134>)
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	4613      	mov	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	4413      	add	r3, r2
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	683a      	ldr	r2, [r7, #0]
 800034e:	4413      	add	r3, r2
 8000350:	011b      	lsls	r3, r3, #4
 8000352:	440b      	add	r3, r1
 8000354:	3308      	adds	r3, #8
 8000356:	2201      	movs	r2, #1
 8000358:	601a      	str	r2, [r3, #0]
            bricks[i][j].toughness = setBrickToughness();
 800035a:	f001 fe79 	bl	8002050 <setBrickToughness>
 800035e:	4601      	mov	r1, r0
 8000360:	4814      	ldr	r0, [pc, #80]	; (80003b4 <initBrickbreaker+0x134>)
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	4613      	mov	r3, r2
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	4413      	add	r3, r2
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	4413      	add	r3, r2
 8000370:	011b      	lsls	r3, r3, #4
 8000372:	4403      	add	r3, r0
 8000374:	330c      	adds	r3, #12
 8000376:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < 10; j++) {
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	3301      	adds	r3, #1
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b09      	cmp	r3, #9
 8000382:	dddd      	ble.n	8000340 <initBrickbreaker+0xc0>
    for (int i = 0; i < BRICK_LINES; i++) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b09      	cmp	r3, #9
 800038e:	ddd4      	ble.n	800033a <initBrickbreaker+0xba>
        }
    }
    points = 0;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <initBrickbreaker+0x138>)
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
    Displ_CLS(D_GREEN);
 8000396:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800039a:	f004 fe27 	bl	8004fec <Displ_CLS>
    drawBricks();
 800039e:	f001 fe8d 	bl	80020bc <drawBricks>
}
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000030 	.word	0x20000030
 80003b0:	20000034 	.word	0x20000034
 80003b4:	200000e8 	.word	0x200000e8
 80003b8:	20001ee8 	.word	0x20001ee8

080003bc <playBall>:

void playBall() {
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
    if (ball.y == 0) {
 80003c0:	4b3b      	ldr	r3, [pc, #236]	; (80004b0 <playBall+0xf4>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d102      	bne.n	80003ce <playBall+0x12>
        changeDirection(N);
 80003c8:	2000      	movs	r0, #0
 80003ca:	f000 f8eb 	bl	80005a4 <changeDirection>
    }
    if (ball.y == SCREEN_HEIGHT - 6) {
 80003ce:	4b38      	ldr	r3, [pc, #224]	; (80004b0 <playBall+0xf4>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	2b36      	cmp	r3, #54	; 0x36
 80003d4:	d149      	bne.n	800046a <playBall+0xae>
        if (ball.x >= person.x - (BAR_SIZE/2) && ball.x <= person.x + (BAR_SIZE/2)) {
 80003d6:	4b36      	ldr	r3, [pc, #216]	; (80004b0 <playBall+0xf4>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	4b36      	ldr	r3, [pc, #216]	; (80004b4 <playBall+0xf8>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	3b19      	subs	r3, #25
 80003e0:	429a      	cmp	r2, r3
 80003e2:	db0a      	blt.n	80003fa <playBall+0x3e>
 80003e4:	4b32      	ldr	r3, [pc, #200]	; (80004b0 <playBall+0xf4>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	4b32      	ldr	r3, [pc, #200]	; (80004b4 <playBall+0xf8>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	3319      	adds	r3, #25
 80003ee:	429a      	cmp	r2, r3
 80003f0:	dc03      	bgt.n	80003fa <playBall+0x3e>
            changeDirection(S);
 80003f2:	2004      	movs	r0, #4
 80003f4:	f000 f8d6 	bl	80005a4 <changeDirection>
 80003f8:	e037      	b.n	800046a <playBall+0xae>
        } else {
            if (ball.x == person.x - (BAR_SIZE/2) - 1) {
 80003fa:	4b2d      	ldr	r3, [pc, #180]	; (80004b0 <playBall+0xf4>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	4b2d      	ldr	r3, [pc, #180]	; (80004b4 <playBall+0xf8>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	3b1a      	subs	r3, #26
 8000404:	429a      	cmp	r2, r3
 8000406:	d110      	bne.n	800042a <playBall+0x6e>
                if (ball.dir == SE) {
 8000408:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <playBall+0xf4>)
 800040a:	7a1b      	ldrb	r3, [r3, #8]
 800040c:	2b03      	cmp	r3, #3
 800040e:	d103      	bne.n	8000418 <playBall+0x5c>
                    ball.dir = NW;
 8000410:	4b27      	ldr	r3, [pc, #156]	; (80004b0 <playBall+0xf4>)
 8000412:	2207      	movs	r2, #7
 8000414:	721a      	strb	r2, [r3, #8]
 8000416:	e028      	b.n	800046a <playBall+0xae>
                } else {
                    lives1--;
 8000418:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <playBall+0xfc>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	3b01      	subs	r3, #1
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <playBall+0xfc>)
 8000422:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 8000424:	f000 f964 	bl	80006f0 <gameEnd>
 8000428:	e01f      	b.n	800046a <playBall+0xae>
                }
            } else {
                if (ball.x == person.x + (BAR_SIZE/2) + 1) {
 800042a:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <playBall+0xf4>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <playBall+0xf8>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	331a      	adds	r3, #26
 8000434:	429a      	cmp	r2, r3
 8000436:	d110      	bne.n	800045a <playBall+0x9e>
                    if (ball.dir == SW) {
 8000438:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <playBall+0xf4>)
 800043a:	7a1b      	ldrb	r3, [r3, #8]
 800043c:	2b05      	cmp	r3, #5
 800043e:	d103      	bne.n	8000448 <playBall+0x8c>
                        ball.dir = NE;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <playBall+0xf4>)
 8000442:	2201      	movs	r2, #1
 8000444:	721a      	strb	r2, [r3, #8]
 8000446:	e010      	b.n	800046a <playBall+0xae>
                    } else {
                        lives1--;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <playBall+0xfc>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	3b01      	subs	r3, #1
 800044e:	b2da      	uxtb	r2, r3
 8000450:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <playBall+0xfc>)
 8000452:	701a      	strb	r2, [r3, #0]
                        gameEnd();
 8000454:	f000 f94c 	bl	80006f0 <gameEnd>
 8000458:	e007      	b.n	800046a <playBall+0xae>
                    }
                } else {
                    lives1--;
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <playBall+0xfc>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	3b01      	subs	r3, #1
 8000460:	b2da      	uxtb	r2, r3
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <playBall+0xfc>)
 8000464:	701a      	strb	r2, [r3, #0]
                    gameEnd();
 8000466:	f000 f943 	bl	80006f0 <gameEnd>
                }
            }
        }
    }
    if (ball.x == 0) {
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <playBall+0xf4>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d102      	bne.n	8000478 <playBall+0xbc>
        changeDirection(W);
 8000472:	2006      	movs	r0, #6
 8000474:	f000 f896 	bl	80005a4 <changeDirection>
    }
    if (ball.x == SCREEN_WIDTH - 1) {
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <playBall+0xf4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b4f      	cmp	r3, #79	; 0x4f
 800047e:	d102      	bne.n	8000486 <playBall+0xca>
        changeDirection(E);
 8000480:	2002      	movs	r0, #2
 8000482:	f000 f88f 	bl	80005a4 <changeDirection>
    }

    if (guardian == 1) {
 8000486:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <playBall+0x100>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d109      	bne.n	80004a2 <playBall+0xe6>
        if (ball.y == person.y - 2) {
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <playBall+0xf4>)
 8000490:	685a      	ldr	r2, [r3, #4]
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <playBall+0xf8>)
 8000494:	785b      	ldrb	r3, [r3, #1]
 8000496:	3b02      	subs	r3, #2
 8000498:	429a      	cmp	r2, r3
 800049a:	d102      	bne.n	80004a2 <playBall+0xe6>
            changeDirection(S);
 800049c:	2004      	movs	r0, #4
 800049e:	f000 f881 	bl	80005a4 <changeDirection>
        }
    }

    checkBrickHit();
 80004a2:	f000 fa07 	bl	80008b4 <checkBrickHit>
    moveBall();
 80004a6:	f000 f80b 	bl	80004c0 <moveBall>
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000034 	.word	0x20000034
 80004b4:	20000030 	.word	0x20000030
 80004b8:	20000002 	.word	0x20000002
 80004bc:	20001eea 	.word	0x20001eea

080004c0 <moveBall>:

void moveBall() {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af02      	add	r7, sp, #8
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 80004c6:	4b36      	ldr	r3, [pc, #216]	; (80005a0 <moveBall+0xe0>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	b298      	uxth	r0, r3
 80004d0:	4b33      	ldr	r3, [pc, #204]	; (80005a0 <moveBall+0xe0>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	b299      	uxth	r1, r3
 80004da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2304      	movs	r3, #4
 80004e2:	2204      	movs	r2, #4
 80004e4:	f004 fbce 	bl	8004c84 <Displ_FillArea>
    switch (ball.dir) {
 80004e8:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <moveBall+0xe0>)
 80004ea:	7a1b      	ldrb	r3, [r3, #8]
 80004ec:	2b08      	cmp	r3, #8
 80004ee:	d84d      	bhi.n	800058c <moveBall+0xcc>
 80004f0:	a201      	add	r2, pc, #4	; (adr r2, 80004f8 <moveBall+0x38>)
 80004f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f6:	bf00      	nop
 80004f8:	0800051d 	.word	0x0800051d
 80004fc:	08000535 	.word	0x08000535
 8000500:	0800058d 	.word	0x0800058d
 8000504:	08000561 	.word	0x08000561
 8000508:	08000529 	.word	0x08000529
 800050c:	08000577 	.word	0x08000577
 8000510:	0800058d 	.word	0x0800058d
 8000514:	0800054b 	.word	0x0800054b
 8000518:	08000597 	.word	0x08000597
    case N:
        ball.y -= 1;
 800051c:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <moveBall+0xe0>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	3b01      	subs	r3, #1
 8000522:	4a1f      	ldr	r2, [pc, #124]	; (80005a0 <moveBall+0xe0>)
 8000524:	6053      	str	r3, [r2, #4]
        break;
 8000526:	e037      	b.n	8000598 <moveBall+0xd8>
    case S:
        ball.y += 1;
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <moveBall+0xe0>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	3301      	adds	r3, #1
 800052e:	4a1c      	ldr	r2, [pc, #112]	; (80005a0 <moveBall+0xe0>)
 8000530:	6053      	str	r3, [r2, #4]
        break;
 8000532:	e031      	b.n	8000598 <moveBall+0xd8>
    case NE:
        ball.y -= 1;
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <moveBall+0xe0>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	3b01      	subs	r3, #1
 800053a:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <moveBall+0xe0>)
 800053c:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <moveBall+0xe0>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <moveBall+0xe0>)
 8000546:	6013      	str	r3, [r2, #0]
        break;
 8000548:	e026      	b.n	8000598 <moveBall+0xd8>
    case NW:
        ball.y -= 1;
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <moveBall+0xe0>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	3b01      	subs	r3, #1
 8000550:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <moveBall+0xe0>)
 8000552:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <moveBall+0xe0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	3b01      	subs	r3, #1
 800055a:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <moveBall+0xe0>)
 800055c:	6013      	str	r3, [r2, #0]
        break;
 800055e:	e01b      	b.n	8000598 <moveBall+0xd8>
    case SE:
        ball.y += 1;
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <moveBall+0xe0>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <moveBall+0xe0>)
 8000568:	6053      	str	r3, [r2, #4]
        ball.x += 1;
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <moveBall+0xe0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	3301      	adds	r3, #1
 8000570:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <moveBall+0xe0>)
 8000572:	6013      	str	r3, [r2, #0]
        break;
 8000574:	e010      	b.n	8000598 <moveBall+0xd8>
    case SW:
        ball.y += 1;
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <moveBall+0xe0>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	3301      	adds	r3, #1
 800057c:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <moveBall+0xe0>)
 800057e:	6053      	str	r3, [r2, #4]
        ball.x -= 1;
 8000580:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <moveBall+0xe0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3b01      	subs	r3, #1
 8000586:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <moveBall+0xe0>)
 8000588:	6013      	str	r3, [r2, #0]
        break;
 800058a:	e005      	b.n	8000598 <moveBall+0xd8>
    case still:
        break;
    default:
        //////QD << "You shouldn't be here!";
        ball.x = ball.x;
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <moveBall+0xe0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <moveBall+0xe0>)
 8000592:	6013      	str	r3, [r2, #0]
    }

}
 8000594:	e000      	b.n	8000598 <moveBall+0xd8>
        break;
 8000596:	bf00      	nop
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000034 	.word	0x20000034

080005a4 <changeDirection>:

void changeDirection(directions inDir) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    if (inDir == N) {
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d12a      	bne.n	800060a <changeDirection+0x66>
        switch (ball.dir) {
 80005b4:	4b4d      	ldr	r3, [pc, #308]	; (80006ec <changeDirection+0x148>)
 80005b6:	7a1b      	ldrb	r3, [r3, #8]
 80005b8:	2b08      	cmp	r3, #8
 80005ba:	d821      	bhi.n	8000600 <changeDirection+0x5c>
 80005bc:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <changeDirection+0x20>)
 80005be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c2:	bf00      	nop
 80005c4:	080005e9 	.word	0x080005e9
 80005c8:	080005f9 	.word	0x080005f9
 80005cc:	08000601 	.word	0x08000601
 80005d0:	08000601 	.word	0x08000601
 80005d4:	08000601 	.word	0x08000601
 80005d8:	08000601 	.word	0x08000601
 80005dc:	08000601 	.word	0x08000601
 80005e0:	080005f1 	.word	0x080005f1
 80005e4:	0800060f 	.word	0x0800060f
        case N:
            ball.dir = S;
 80005e8:	4b40      	ldr	r3, [pc, #256]	; (80006ec <changeDirection+0x148>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	721a      	strb	r2, [r3, #8]
            break;
 80005ee:	e00f      	b.n	8000610 <changeDirection+0x6c>
        case NW:
            ball.dir = SW;
 80005f0:	4b3e      	ldr	r3, [pc, #248]	; (80006ec <changeDirection+0x148>)
 80005f2:	2205      	movs	r2, #5
 80005f4:	721a      	strb	r2, [r3, #8]
            break;
 80005f6:	e00b      	b.n	8000610 <changeDirection+0x6c>
        case NE:
            ball.dir = SE;
 80005f8:	4b3c      	ldr	r3, [pc, #240]	; (80006ec <changeDirection+0x148>)
 80005fa:	2203      	movs	r2, #3
 80005fc:	721a      	strb	r2, [r3, #8]
            break;
 80005fe:	e007      	b.n	8000610 <changeDirection+0x6c>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 8000600:	4b3a      	ldr	r3, [pc, #232]	; (80006ec <changeDirection+0x148>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a39      	ldr	r2, [pc, #228]	; (80006ec <changeDirection+0x148>)
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	e002      	b.n	8000610 <changeDirection+0x6c>
        }
    }
 800060a:	bf00      	nop
 800060c:	e000      	b.n	8000610 <changeDirection+0x6c>
            break;
 800060e:	bf00      	nop

    if (inDir == E) {
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b02      	cmp	r3, #2
 8000614:	d117      	bne.n	8000646 <changeDirection+0xa2>
        switch (ball.dir) {
 8000616:	4b35      	ldr	r3, [pc, #212]	; (80006ec <changeDirection+0x148>)
 8000618:	7a1b      	ldrb	r3, [r3, #8]
 800061a:	2b08      	cmp	r3, #8
 800061c:	d015      	beq.n	800064a <changeDirection+0xa6>
 800061e:	2b08      	cmp	r3, #8
 8000620:	dc0c      	bgt.n	800063c <changeDirection+0x98>
 8000622:	2b01      	cmp	r3, #1
 8000624:	d002      	beq.n	800062c <changeDirection+0x88>
 8000626:	2b03      	cmp	r3, #3
 8000628:	d004      	beq.n	8000634 <changeDirection+0x90>
 800062a:	e007      	b.n	800063c <changeDirection+0x98>
        case NE:
            ball.dir = NW;
 800062c:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <changeDirection+0x148>)
 800062e:	2207      	movs	r2, #7
 8000630:	721a      	strb	r2, [r3, #8]
            break;
 8000632:	e00b      	b.n	800064c <changeDirection+0xa8>
        case SE:
            ball.dir = SW;
 8000634:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <changeDirection+0x148>)
 8000636:	2205      	movs	r2, #5
 8000638:	721a      	strb	r2, [r3, #8]
            break;
 800063a:	e007      	b.n	800064c <changeDirection+0xa8>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 800063c:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <changeDirection+0x148>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a2a      	ldr	r2, [pc, #168]	; (80006ec <changeDirection+0x148>)
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	e002      	b.n	800064c <changeDirection+0xa8>
        }
    }
 8000646:	bf00      	nop
 8000648:	e000      	b.n	800064c <changeDirection+0xa8>
            break;
 800064a:	bf00      	nop

    if (inDir == S) {
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	2b04      	cmp	r3, #4
 8000650:	d125      	bne.n	800069e <changeDirection+0xfa>
        switch (ball.dir) {
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <changeDirection+0x148>)
 8000654:	7a1b      	ldrb	r3, [r3, #8]
 8000656:	3b03      	subs	r3, #3
 8000658:	2b05      	cmp	r3, #5
 800065a:	d81b      	bhi.n	8000694 <changeDirection+0xf0>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <changeDirection+0xc0>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	08000685 	.word	0x08000685
 8000668:	0800067d 	.word	0x0800067d
 800066c:	0800068d 	.word	0x0800068d
 8000670:	08000695 	.word	0x08000695
 8000674:	08000695 	.word	0x08000695
 8000678:	080006a3 	.word	0x080006a3
        case S:
            ball.dir = N;
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <changeDirection+0x148>)
 800067e:	2200      	movs	r2, #0
 8000680:	721a      	strb	r2, [r3, #8]
            break;
 8000682:	e00f      	b.n	80006a4 <changeDirection+0x100>
        case SE:
            ball.dir = NE;
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <changeDirection+0x148>)
 8000686:	2201      	movs	r2, #1
 8000688:	721a      	strb	r2, [r3, #8]
            break;
 800068a:	e00b      	b.n	80006a4 <changeDirection+0x100>
        case SW:
            ball.dir = NW;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <changeDirection+0x148>)
 800068e:	2207      	movs	r2, #7
 8000690:	721a      	strb	r2, [r3, #8]
            break;
 8000692:	e007      	b.n	80006a4 <changeDirection+0x100>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.dir = ball.dir;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <changeDirection+0x148>)
 8000696:	7a1a      	ldrb	r2, [r3, #8]
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <changeDirection+0x148>)
 800069a:	721a      	strb	r2, [r3, #8]
 800069c:	e002      	b.n	80006a4 <changeDirection+0x100>
        }
    }
 800069e:	bf00      	nop
 80006a0:	e000      	b.n	80006a4 <changeDirection+0x100>
            break;
 80006a2:	bf00      	nop

    if (inDir == W) {
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b06      	cmp	r3, #6
 80006a8:	d116      	bne.n	80006d8 <changeDirection+0x134>
        switch (ball.dir) {
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <changeDirection+0x148>)
 80006ac:	7a1b      	ldrb	r3, [r3, #8]
 80006ae:	2b08      	cmp	r3, #8
 80006b0:	d014      	beq.n	80006dc <changeDirection+0x138>
 80006b2:	2b08      	cmp	r3, #8
 80006b4:	dc0b      	bgt.n	80006ce <changeDirection+0x12a>
 80006b6:	2b05      	cmp	r3, #5
 80006b8:	d005      	beq.n	80006c6 <changeDirection+0x122>
 80006ba:	2b07      	cmp	r3, #7
 80006bc:	d107      	bne.n	80006ce <changeDirection+0x12a>
        case NW:
            ball.dir = NE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <changeDirection+0x148>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	721a      	strb	r2, [r3, #8]
            break;
 80006c4:	e00b      	b.n	80006de <changeDirection+0x13a>
        case SW:
            ball.dir = SE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <changeDirection+0x148>)
 80006c8:	2203      	movs	r2, #3
 80006ca:	721a      	strb	r2, [r3, #8]
            break;
 80006cc:	e007      	b.n	80006de <changeDirection+0x13a>
        case still:
            break;
        default:
            //////QD << "You shouldn't be here!";
            ball.x = ball.x;
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <changeDirection+0x148>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a06      	ldr	r2, [pc, #24]	; (80006ec <changeDirection+0x148>)
 80006d4:	6013      	str	r3, [r2, #0]
        }
    }
}
 80006d6:	e002      	b.n	80006de <changeDirection+0x13a>
    }
 80006d8:	bf00      	nop
 80006da:	e000      	b.n	80006de <changeDirection+0x13a>
            break;
 80006dc:	bf00      	nop
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000034 	.word	0x20000034

080006f0 <gameEnd>:

void gameEnd() {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af02      	add	r7, sp, #8
    Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 10, D_GREEN);
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <gameEnd+0x74>)
 80006f8:	785b      	ldrb	r3, [r3, #1]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	b299      	uxth	r1, r3
 8000702:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	230a      	movs	r3, #10
 800070a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800070e:	2000      	movs	r0, #0
 8000710:	f004 fab8 	bl	8004c84 <Displ_FillArea>
    person.x = (SCREEN_WIDTH)/2;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <gameEnd+0x74>)
 8000716:	2228      	movs	r2, #40	; 0x28
 8000718:	701a      	strb	r2, [r3, #0]
    ball.x = person.x;
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <gameEnd+0x74>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <gameEnd+0x78>)
 8000722:	601a      	str	r2, [r3, #0]
    ball.y = SCREEN_HEIGHT - 6;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <gameEnd+0x78>)
 8000726:	2236      	movs	r2, #54	; 0x36
 8000728:	605a      	str	r2, [r3, #4]
    ball.dir = still;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <gameEnd+0x78>)
 800072c:	2208      	movs	r2, #8
 800072e:	721a      	strb	r2, [r3, #8]

    if (lives1 <= 0) {
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <gameEnd+0x7c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d112      	bne.n	800075e <gameEnd+0x6e>
        if (points > highScore) {
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <gameEnd+0x80>)
 800073a:	781a      	ldrb	r2, [r3, #0]
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <gameEnd+0x84>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d903      	bls.n	800074c <gameEnd+0x5c>
            highScore = points;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <gameEnd+0x80>)
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <gameEnd+0x84>)
 800074a:	701a      	strb	r2, [r3, #0]
            //////QD << highScore;
        }

        start = 0;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <gameEnd+0x88>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
        points = 0;
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <gameEnd+0x80>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
        lives1 = 3;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <gameEnd+0x7c>)
 800075a:	2203      	movs	r2, #3
 800075c:	701a      	strb	r2, [r3, #0]
    }
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000030 	.word	0x20000030
 8000768:	20000034 	.word	0x20000034
 800076c:	20000002 	.word	0x20000002
 8000770:	20001ee8 	.word	0x20001ee8
 8000774:	20001ee9 	.word	0x20001ee9
 8000778:	20001eef 	.word	0x20001eef

0800077c <lowerBricks>:

void lowerBricks() {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 8000782:	232e      	movs	r3, #46	; 0x2e
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	e03d      	b.n	8000804 <lowerBricks+0x88>
        for (int j = 0; j < 10; j++) {
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	e034      	b.n	80007f8 <lowerBricks+0x7c>
            bricks[i + 1][j].visible = bricks[i][j].visible;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	1c5a      	adds	r2, r3, #1
 8000792:	482d      	ldr	r0, [pc, #180]	; (8000848 <lowerBricks+0xcc>)
 8000794:	68f9      	ldr	r1, [r7, #12]
 8000796:	460b      	mov	r3, r1
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	440b      	add	r3, r1
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	68b9      	ldr	r1, [r7, #8]
 80007a0:	440b      	add	r3, r1
 80007a2:	011b      	lsls	r3, r3, #4
 80007a4:	4403      	add	r3, r0
 80007a6:	3308      	adds	r3, #8
 80007a8:	6819      	ldr	r1, [r3, #0]
 80007aa:	4827      	ldr	r0, [pc, #156]	; (8000848 <lowerBricks+0xcc>)
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	68ba      	ldr	r2, [r7, #8]
 80007b6:	4413      	add	r3, r2
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	4403      	add	r3, r0
 80007bc:	3308      	adds	r3, #8
 80007be:	6019      	str	r1, [r3, #0]
            bricks[i + 1][j].toughness = bricks[i][j].toughness;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	4820      	ldr	r0, [pc, #128]	; (8000848 <lowerBricks+0xcc>)
 80007c6:	68f9      	ldr	r1, [r7, #12]
 80007c8:	460b      	mov	r3, r1
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	440b      	add	r3, r1
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	440b      	add	r3, r1
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	4403      	add	r3, r0
 80007d8:	330c      	adds	r3, #12
 80007da:	6819      	ldr	r1, [r3, #0]
 80007dc:	481a      	ldr	r0, [pc, #104]	; (8000848 <lowerBricks+0xcc>)
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	4413      	add	r3, r2
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	4403      	add	r3, r0
 80007ee:	330c      	adds	r3, #12
 80007f0:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 10; j++) {
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	3301      	adds	r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	2b09      	cmp	r3, #9
 80007fc:	ddc7      	ble.n	800078e <lowerBricks+0x12>
    for (int i = MAX_BRICK_LINES - 2; i >= 0; i--) {
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	3b01      	subs	r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	dabe      	bge.n	8000788 <lowerBricks+0xc>
        }
    }
    for(int j = 0; j < 10; j++) {
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	e012      	b.n	8000836 <lowerBricks+0xba>
        bricks[0][j].visible = 1;
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <lowerBricks+0xcc>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	011b      	lsls	r3, r3, #4
 8000816:	4413      	add	r3, r2
 8000818:	3308      	adds	r3, #8
 800081a:	2201      	movs	r2, #1
 800081c:	601a      	str	r2, [r3, #0]
        bricks[0][j].toughness = setBrickToughness();
 800081e:	f001 fc17 	bl	8002050 <setBrickToughness>
 8000822:	4602      	mov	r2, r0
 8000824:	4908      	ldr	r1, [pc, #32]	; (8000848 <lowerBricks+0xcc>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	011b      	lsls	r3, r3, #4
 800082a:	440b      	add	r3, r1
 800082c:	330c      	adds	r3, #12
 800082e:	601a      	str	r2, [r3, #0]
    for(int j = 0; j < 10; j++) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3301      	adds	r3, #1
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b09      	cmp	r3, #9
 800083a:	dde9      	ble.n	8000810 <lowerBricks+0x94>
    }

    drawBricks();
 800083c:	f001 fc3e 	bl	80020bc <drawBricks>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000e8 	.word	0x200000e8

0800084c <checkGameOver>:

void checkGameOver() {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
    for (int j = 0; j < 10; j++) {
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	e01c      	b.n	8000892 <checkGameOver+0x46>
        if (bricks[MAX_BRICK_LINES - 1][j].visible == 1) {
 8000858:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <checkGameOver+0x58>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	4413      	add	r3, r2
 8000860:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8000864:	3308      	adds	r3, #8
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d10f      	bne.n	800088c <checkGameOver+0x40>

            lives1 = 0;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <checkGameOver+0x5c>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
            ball.x = person.x;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <checkGameOver+0x60>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <checkGameOver+0x64>)
 800087a:	601a      	str	r2, [r3, #0]
            ball.y = SCREEN_HEIGHT - 6;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <checkGameOver+0x64>)
 800087e:	2236      	movs	r2, #54	; 0x36
 8000880:	605a      	str	r2, [r3, #4]
            ball.dir = still;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <checkGameOver+0x64>)
 8000884:	2208      	movs	r2, #8
 8000886:	721a      	strb	r2, [r3, #8]
            gameEnd();
 8000888:	f7ff ff32 	bl	80006f0 <gameEnd>
    for (int j = 0; j < 10; j++) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3301      	adds	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b09      	cmp	r3, #9
 8000896:	dddf      	ble.n	8000858 <checkGameOver+0xc>
            //////QD << "Game Over, noob";
        }
    }
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000e8 	.word	0x200000e8
 80008a8:	20000002 	.word	0x20000002
 80008ac:	20000030 	.word	0x20000030
 80008b0:	20000034 	.word	0x20000034

080008b4 <checkBrickHit>:

void checkBrickHit() {
 80008b4:	b5b0      	push	{r4, r5, r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af02      	add	r7, sp, #8
    uint8_t bricksHit = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	71fb      	strb	r3, [r7, #7]
    switch (ball.dir) {
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <checkBrickHit+0x3c>)
 80008c0:	7a1b      	ldrb	r3, [r3, #8]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2b07      	cmp	r3, #7
 80008c6:	f201 8240 	bhi.w	8001d4a <checkBrickHit+0x1496>
 80008ca:	a201      	add	r2, pc, #4	; (adr r2, 80008d0 <checkBrickHit+0x1c>)
 80008cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d0:	08000e1d 	.word	0x08000e1d
 80008d4:	08001d4b 	.word	0x08001d4b
 80008d8:	08001345 	.word	0x08001345
 80008dc:	08001d4b 	.word	0x08001d4b
 80008e0:	08001851 	.word	0x08001851
 80008e4:	08001d4b 	.word	0x08001d4b
 80008e8:	080008f5 	.word	0x080008f5
 80008ec:	08001d55 	.word	0x08001d55
 80008f0:	20000034 	.word	0x20000034
    case NW :
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 80008f4:	4bb6      	ldr	r3, [pc, #728]	; (8000bd0 <checkBrickHit+0x31c>)
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f1a3 0209 	sub.w	r2, r3, #9
 80008fc:	4bb4      	ldr	r3, [pc, #720]	; (8000bd0 <checkBrickHit+0x31c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	da00      	bge.n	8000906 <checkBrickHit+0x52>
 8000904:	3307      	adds	r3, #7
 8000906:	10db      	asrs	r3, r3, #3
 8000908:	4618      	mov	r0, r3
 800090a:	49b2      	ldr	r1, [pc, #712]	; (8000bd4 <checkBrickHit+0x320>)
 800090c:	4613      	mov	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	4403      	add	r3, r0
 8000916:	011b      	lsls	r3, r3, #4
 8000918:	440b      	add	r3, r1
 800091a:	3308      	adds	r3, #8
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b01      	cmp	r3, #1
 8000920:	f040 80b4 	bne.w	8000a8c <checkBrickHit+0x1d8>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000924:	4baa      	ldr	r3, [pc, #680]	; (8000bd0 <checkBrickHit+0x31c>)
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f1a3 0209 	sub.w	r2, r3, #9
 800092c:	4ba8      	ldr	r3, [pc, #672]	; (8000bd0 <checkBrickHit+0x31c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	da00      	bge.n	8000936 <checkBrickHit+0x82>
 8000934:	3307      	adds	r3, #7
 8000936:	10db      	asrs	r3, r3, #3
 8000938:	4619      	mov	r1, r3
 800093a:	48a6      	ldr	r0, [pc, #664]	; (8000bd4 <checkBrickHit+0x320>)
 800093c:	4613      	mov	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	4413      	add	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	440b      	add	r3, r1
 8000946:	011b      	lsls	r3, r3, #4
 8000948:	4403      	add	r3, r0
 800094a:	330c      	adds	r3, #12
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	1e58      	subs	r0, r3, #1
 8000950:	4ca0      	ldr	r4, [pc, #640]	; (8000bd4 <checkBrickHit+0x320>)
 8000952:	4613      	mov	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4413      	add	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	440b      	add	r3, r1
 800095c:	011b      	lsls	r3, r3, #4
 800095e:	4423      	add	r3, r4
 8000960:	330c      	adds	r3, #12
 8000962:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000964:	4b9a      	ldr	r3, [pc, #616]	; (8000bd0 <checkBrickHit+0x31c>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f1a3 0209 	sub.w	r2, r3, #9
 800096c:	4b98      	ldr	r3, [pc, #608]	; (8000bd0 <checkBrickHit+0x31c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	da00      	bge.n	8000976 <checkBrickHit+0xc2>
 8000974:	3307      	adds	r3, #7
 8000976:	10db      	asrs	r3, r3, #3
 8000978:	4618      	mov	r0, r3
 800097a:	4996      	ldr	r1, [pc, #600]	; (8000bd4 <checkBrickHit+0x320>)
 800097c:	4613      	mov	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4403      	add	r3, r0
 8000986:	011b      	lsls	r3, r3, #4
 8000988:	440b      	add	r3, r1
 800098a:	330c      	adds	r3, #12
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	dc29      	bgt.n	80009e6 <checkBrickHit+0x132>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 8000992:	4b8f      	ldr	r3, [pc, #572]	; (8000bd0 <checkBrickHit+0x31c>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f1a3 0209 	sub.w	r2, r3, #9
 800099a:	4b8d      	ldr	r3, [pc, #564]	; (8000bd0 <checkBrickHit+0x31c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	da00      	bge.n	80009a4 <checkBrickHit+0xf0>
 80009a2:	3307      	adds	r3, #7
 80009a4:	10db      	asrs	r3, r3, #3
 80009a6:	4618      	mov	r0, r3
 80009a8:	498a      	ldr	r1, [pc, #552]	; (8000bd4 <checkBrickHit+0x320>)
 80009aa:	4613      	mov	r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4413      	add	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4403      	add	r3, r0
 80009b4:	011b      	lsls	r3, r3, #4
 80009b6:	440b      	add	r3, r1
 80009b8:	3308      	adds	r3, #8
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
                points++;
 80009be:	4b86      	ldr	r3, [pc, #536]	; (8000bd8 <checkBrickHit+0x324>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	3301      	adds	r3, #1
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b84      	ldr	r3, [pc, #528]	; (8000bd8 <checkBrickHit+0x324>)
 80009c8:	701a      	strb	r2, [r3, #0]
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 80009ca:	4b81      	ldr	r3, [pc, #516]	; (8000bd0 <checkBrickHit+0x31c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	da00      	bge.n	80009d4 <checkBrickHit+0x120>
 80009d2:	3307      	adds	r3, #7
 80009d4:	10db      	asrs	r3, r3, #3
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b7d      	ldr	r3, [pc, #500]	; (8000bd0 <checkBrickHit+0x31c>)
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	3b09      	subs	r3, #9
 80009de:	4619      	mov	r1, r3
 80009e0:	4610      	mov	r0, r2
 80009e2:	f001 f9cd 	bl	8001d80 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 80009e6:	4b7a      	ldr	r3, [pc, #488]	; (8000bd0 <checkBrickHit+0x31c>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f1a3 0209 	sub.w	r2, r3, #9
 80009ee:	4b78      	ldr	r3, [pc, #480]	; (8000bd0 <checkBrickHit+0x31c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da00      	bge.n	80009f8 <checkBrickHit+0x144>
 80009f6:	3307      	adds	r3, #7
 80009f8:	10db      	asrs	r3, r3, #3
 80009fa:	4618      	mov	r0, r3
 80009fc:	4975      	ldr	r1, [pc, #468]	; (8000bd4 <checkBrickHit+0x320>)
 80009fe:	4613      	mov	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4403      	add	r3, r0
 8000a08:	011b      	lsls	r3, r3, #4
 8000a0a:	440b      	add	r3, r1
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	b298      	uxth	r0, r3
 8000a14:	4b6e      	ldr	r3, [pc, #440]	; (8000bd0 <checkBrickHit+0x31c>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f1a3 0209 	sub.w	r2, r3, #9
 8000a1c:	4b6c      	ldr	r3, [pc, #432]	; (8000bd0 <checkBrickHit+0x31c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	da00      	bge.n	8000a26 <checkBrickHit+0x172>
 8000a24:	3307      	adds	r3, #7
 8000a26:	10db      	asrs	r3, r3, #3
 8000a28:	461c      	mov	r4, r3
 8000a2a:	496a      	ldr	r1, [pc, #424]	; (8000bd4 <checkBrickHit+0x320>)
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4423      	add	r3, r4
 8000a36:	011b      	lsls	r3, r3, #4
 8000a38:	440b      	add	r3, r1
 8000a3a:	3304      	adds	r3, #4
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	b299      	uxth	r1, r3
 8000a44:	4b62      	ldr	r3, [pc, #392]	; (8000bd0 <checkBrickHit+0x31c>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f1a3 0209 	sub.w	r2, r3, #9
 8000a4c:	4b60      	ldr	r3, [pc, #384]	; (8000bd0 <checkBrickHit+0x31c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	da00      	bge.n	8000a56 <checkBrickHit+0x1a2>
 8000a54:	3307      	adds	r3, #7
 8000a56:	10db      	asrs	r3, r3, #3
 8000a58:	461d      	mov	r5, r3
 8000a5a:	4c5e      	ldr	r4, [pc, #376]	; (8000bd4 <checkBrickHit+0x320>)
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4413      	add	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	442b      	add	r3, r5
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	4423      	add	r3, r4
 8000a6a:	330c      	adds	r3, #12
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a5b      	ldr	r2, [pc, #364]	; (8000bdc <checkBrickHit+0x328>)
 8000a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2304      	movs	r3, #4
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	f004 f902 	bl	8004c84 <Displ_FillArea>
            bricksHit++;
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	3301      	adds	r3, #1
 8000a84:	71fb      	strb	r3, [r7, #7]
            ball.dir = SW;
 8000a86:	4b52      	ldr	r3, [pc, #328]	; (8000bd0 <checkBrickHit+0x31c>)
 8000a88:	2205      	movs	r2, #5
 8000a8a:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 8000a8c:	4b50      	ldr	r3, [pc, #320]	; (8000bd0 <checkBrickHit+0x31c>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f1a3 0208 	sub.w	r2, r3, #8
 8000a94:	4b4e      	ldr	r3, [pc, #312]	; (8000bd0 <checkBrickHit+0x31c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	da00      	bge.n	8000aa0 <checkBrickHit+0x1ec>
 8000a9e:	3307      	adds	r3, #7
 8000aa0:	10db      	asrs	r3, r3, #3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	494b      	ldr	r1, [pc, #300]	; (8000bd4 <checkBrickHit+0x320>)
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4403      	add	r3, r0
 8000ab0:	011b      	lsls	r3, r3, #4
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	f040 80d0 	bne.w	8000c5e <checkBrickHit+0x3aa>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8000abe:	4b44      	ldr	r3, [pc, #272]	; (8000bd0 <checkBrickHit+0x31c>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f1a3 0208 	sub.w	r2, r3, #8
 8000ac6:	4b42      	ldr	r3, [pc, #264]	; (8000bd0 <checkBrickHit+0x31c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	da00      	bge.n	8000ad2 <checkBrickHit+0x21e>
 8000ad0:	3307      	adds	r3, #7
 8000ad2:	10db      	asrs	r3, r3, #3
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	483f      	ldr	r0, [pc, #252]	; (8000bd4 <checkBrickHit+0x320>)
 8000ad8:	4613      	mov	r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	440b      	add	r3, r1
 8000ae2:	011b      	lsls	r3, r3, #4
 8000ae4:	4403      	add	r3, r0
 8000ae6:	330c      	adds	r3, #12
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	1e58      	subs	r0, r3, #1
 8000aec:	4c39      	ldr	r4, [pc, #228]	; (8000bd4 <checkBrickHit+0x320>)
 8000aee:	4613      	mov	r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	4413      	add	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	440b      	add	r3, r1
 8000af8:	011b      	lsls	r3, r3, #4
 8000afa:	4423      	add	r3, r4
 8000afc:	330c      	adds	r3, #12
 8000afe:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8000b00:	4b33      	ldr	r3, [pc, #204]	; (8000bd0 <checkBrickHit+0x31c>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f1a3 0208 	sub.w	r2, r3, #8
 8000b08:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <checkBrickHit+0x31c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	da00      	bge.n	8000b14 <checkBrickHit+0x260>
 8000b12:	3307      	adds	r3, #7
 8000b14:	10db      	asrs	r3, r3, #3
 8000b16:	4618      	mov	r0, r3
 8000b18:	492e      	ldr	r1, [pc, #184]	; (8000bd4 <checkBrickHit+0x320>)
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	4403      	add	r3, r0
 8000b24:	011b      	lsls	r3, r3, #4
 8000b26:	440b      	add	r3, r1
 8000b28:	330c      	adds	r3, #12
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	dc2b      	bgt.n	8000b88 <checkBrickHit+0x2d4>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <checkBrickHit+0x31c>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f1a3 0208 	sub.w	r2, r3, #8
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <checkBrickHit+0x31c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	da00      	bge.n	8000b44 <checkBrickHit+0x290>
 8000b42:	3307      	adds	r3, #7
 8000b44:	10db      	asrs	r3, r3, #3
 8000b46:	4618      	mov	r0, r3
 8000b48:	4922      	ldr	r1, [pc, #136]	; (8000bd4 <checkBrickHit+0x320>)
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4403      	add	r3, r0
 8000b54:	011b      	lsls	r3, r3, #4
 8000b56:	440b      	add	r3, r1
 8000b58:	3308      	adds	r3, #8
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
                points++;
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <checkBrickHit+0x324>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <checkBrickHit+0x324>)
 8000b68:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <checkBrickHit+0x31c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	da00      	bge.n	8000b76 <checkBrickHit+0x2c2>
 8000b74:	3307      	adds	r3, #7
 8000b76:	10db      	asrs	r3, r3, #3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <checkBrickHit+0x31c>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	3b08      	subs	r3, #8
 8000b80:	4619      	mov	r1, r3
 8000b82:	4610      	mov	r0, r2
 8000b84:	f001 f8fc 	bl	8001d80 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <checkBrickHit+0x31c>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f1a3 0208 	sub.w	r2, r3, #8
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <checkBrickHit+0x31c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	da00      	bge.n	8000b9c <checkBrickHit+0x2e8>
 8000b9a:	3307      	adds	r3, #7
 8000b9c:	10db      	asrs	r3, r3, #3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <checkBrickHit+0x320>)
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4403      	add	r3, r0
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	440b      	add	r3, r1
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	b298      	uxth	r0, r3
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <checkBrickHit+0x31c>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f1a3 0208 	sub.w	r2, r3, #8
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <checkBrickHit+0x31c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	da0a      	bge.n	8000be0 <checkBrickHit+0x32c>
 8000bca:	3307      	adds	r3, #7
 8000bcc:	e008      	b.n	8000be0 <checkBrickHit+0x32c>
 8000bce:	bf00      	nop
 8000bd0:	20000034 	.word	0x20000034
 8000bd4:	200000e8 	.word	0x200000e8
 8000bd8:	20001ee8 	.word	0x20001ee8
 8000bdc:	20000004 	.word	0x20000004
 8000be0:	10db      	asrs	r3, r3, #3
 8000be2:	461c      	mov	r4, r3
 8000be4:	4989      	ldr	r1, [pc, #548]	; (8000e0c <checkBrickHit+0x558>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4423      	add	r3, r4
 8000bf0:	011b      	lsls	r3, r3, #4
 8000bf2:	440b      	add	r3, r1
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	b299      	uxth	r1, r3
 8000bfe:	4b84      	ldr	r3, [pc, #528]	; (8000e10 <checkBrickHit+0x55c>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f1a3 0208 	sub.w	r2, r3, #8
 8000c06:	4b82      	ldr	r3, [pc, #520]	; (8000e10 <checkBrickHit+0x55c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	da00      	bge.n	8000c12 <checkBrickHit+0x35e>
 8000c10:	3307      	adds	r3, #7
 8000c12:	10db      	asrs	r3, r3, #3
 8000c14:	461d      	mov	r5, r3
 8000c16:	4c7d      	ldr	r4, [pc, #500]	; (8000e0c <checkBrickHit+0x558>)
 8000c18:	4613      	mov	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	442b      	add	r3, r5
 8000c22:	011b      	lsls	r3, r3, #4
 8000c24:	4423      	add	r3, r4
 8000c26:	330c      	adds	r3, #12
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a7a      	ldr	r2, [pc, #488]	; (8000e14 <checkBrickHit+0x560>)
 8000c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2304      	movs	r3, #4
 8000c36:	2220      	movs	r2, #32
 8000c38:	f004 f824 	bl	8004c84 <Displ_FillArea>
            bricksHit++;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NW) {
 8000c42:	4b73      	ldr	r3, [pc, #460]	; (8000e10 <checkBrickHit+0x55c>)
 8000c44:	7a1b      	ldrb	r3, [r3, #8]
 8000c46:	2b07      	cmp	r3, #7
 8000c48:	d102      	bne.n	8000c50 <checkBrickHit+0x39c>
                ball.dir = NE;
 8000c4a:	4b71      	ldr	r3, [pc, #452]	; (8000e10 <checkBrickHit+0x55c>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SW) {
 8000c50:	4b6f      	ldr	r3, [pc, #444]	; (8000e10 <checkBrickHit+0x55c>)
 8000c52:	7a1b      	ldrb	r3, [r3, #8]
 8000c54:	2b05      	cmp	r3, #5
 8000c56:	d102      	bne.n	8000c5e <checkBrickHit+0x3aa>
                ball.dir = SE;
 8000c58:	4b6d      	ldr	r3, [pc, #436]	; (8000e10 <checkBrickHit+0x55c>)
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f041 8079 	bne.w	8001d58 <checkBrickHit+0x14a4>
            if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible == 1) {
 8000c66:	4b6a      	ldr	r3, [pc, #424]	; (8000e10 <checkBrickHit+0x55c>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f1a3 0209 	sub.w	r2, r3, #9
 8000c6e:	4b68      	ldr	r3, [pc, #416]	; (8000e10 <checkBrickHit+0x55c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	da00      	bge.n	8000c7a <checkBrickHit+0x3c6>
 8000c78:	3307      	adds	r3, #7
 8000c7a:	10db      	asrs	r3, r3, #3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	4963      	ldr	r1, [pc, #396]	; (8000e0c <checkBrickHit+0x558>)
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	4403      	add	r3, r0
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	440b      	add	r3, r1
 8000c8e:	3308      	adds	r3, #8
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	f041 8060 	bne.w	8001d58 <checkBrickHit+0x14a4>
                bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness--;
 8000c98:	4b5d      	ldr	r3, [pc, #372]	; (8000e10 <checkBrickHit+0x55c>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f1a3 0209 	sub.w	r2, r3, #9
 8000ca0:	4b5b      	ldr	r3, [pc, #364]	; (8000e10 <checkBrickHit+0x55c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	da00      	bge.n	8000cac <checkBrickHit+0x3f8>
 8000caa:	3307      	adds	r3, #7
 8000cac:	10db      	asrs	r3, r3, #3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4856      	ldr	r0, [pc, #344]	; (8000e0c <checkBrickHit+0x558>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	440b      	add	r3, r1
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	4403      	add	r3, r0
 8000cc0:	330c      	adds	r3, #12
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	1e58      	subs	r0, r3, #1
 8000cc6:	4c51      	ldr	r4, [pc, #324]	; (8000e0c <checkBrickHit+0x558>)
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	440b      	add	r3, r1
 8000cd2:	011b      	lsls	r3, r3, #4
 8000cd4:	4423      	add	r3, r4
 8000cd6:	330c      	adds	r3, #12
 8000cd8:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8000cda:	4b4d      	ldr	r3, [pc, #308]	; (8000e10 <checkBrickHit+0x55c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f1a3 0209 	sub.w	r2, r3, #9
 8000ce2:	4b4b      	ldr	r3, [pc, #300]	; (8000e10 <checkBrickHit+0x55c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	da00      	bge.n	8000cee <checkBrickHit+0x43a>
 8000cec:	3307      	adds	r3, #7
 8000cee:	10db      	asrs	r3, r3, #3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	4946      	ldr	r1, [pc, #280]	; (8000e0c <checkBrickHit+0x558>)
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4403      	add	r3, r0
 8000cfe:	011b      	lsls	r3, r3, #4
 8000d00:	440b      	add	r3, r1
 8000d02:	330c      	adds	r3, #12
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	dc2b      	bgt.n	8000d62 <checkBrickHit+0x4ae>
                    bricks[ball.y - 1 - 8][(ball.x - 1)/8].visible = 0;
 8000d0a:	4b41      	ldr	r3, [pc, #260]	; (8000e10 <checkBrickHit+0x55c>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f1a3 0209 	sub.w	r2, r3, #9
 8000d12:	4b3f      	ldr	r3, [pc, #252]	; (8000e10 <checkBrickHit+0x55c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	da00      	bge.n	8000d1e <checkBrickHit+0x46a>
 8000d1c:	3307      	adds	r3, #7
 8000d1e:	10db      	asrs	r3, r3, #3
 8000d20:	4618      	mov	r0, r3
 8000d22:	493a      	ldr	r1, [pc, #232]	; (8000e0c <checkBrickHit+0x558>)
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4403      	add	r3, r0
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	440b      	add	r3, r1
 8000d32:	3308      	adds	r3, #8
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
                    points++;
 8000d38:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <checkBrickHit+0x564>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b35      	ldr	r3, [pc, #212]	; (8000e18 <checkBrickHit+0x564>)
 8000d42:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    dropPowerUp((ball.x - 1)/8, ball.y - 1 - 8);
 8000d44:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <checkBrickHit+0x55c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	da00      	bge.n	8000d50 <checkBrickHit+0x49c>
 8000d4e:	3307      	adds	r3, #7
 8000d50:	10db      	asrs	r3, r3, #3
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <checkBrickHit+0x55c>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	3b09      	subs	r3, #9
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	f001 f80f 	bl	8001d80 <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x - 1)/8].toughness]);
 8000d62:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <checkBrickHit+0x55c>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f1a3 0209 	sub.w	r2, r3, #9
 8000d6a:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <checkBrickHit+0x55c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	da00      	bge.n	8000d76 <checkBrickHit+0x4c2>
 8000d74:	3307      	adds	r3, #7
 8000d76:	10db      	asrs	r3, r3, #3
 8000d78:	4618      	mov	r0, r3
 8000d7a:	4924      	ldr	r1, [pc, #144]	; (8000e0c <checkBrickHit+0x558>)
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4403      	add	r3, r0
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	440b      	add	r3, r1
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	b298      	uxth	r0, r3
 8000d92:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <checkBrickHit+0x55c>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f1a3 0209 	sub.w	r2, r3, #9
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <checkBrickHit+0x55c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	da00      	bge.n	8000da6 <checkBrickHit+0x4f2>
 8000da4:	3307      	adds	r3, #7
 8000da6:	10db      	asrs	r3, r3, #3
 8000da8:	461c      	mov	r4, r3
 8000daa:	4918      	ldr	r1, [pc, #96]	; (8000e0c <checkBrickHit+0x558>)
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4423      	add	r3, r4
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	440b      	add	r3, r1
 8000dba:	3304      	adds	r3, #4
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	b299      	uxth	r1, r3
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <checkBrickHit+0x55c>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f1a3 0209 	sub.w	r2, r3, #9
 8000dcc:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <checkBrickHit+0x55c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	da00      	bge.n	8000dd8 <checkBrickHit+0x524>
 8000dd6:	3307      	adds	r3, #7
 8000dd8:	10db      	asrs	r3, r3, #3
 8000dda:	461d      	mov	r5, r3
 8000ddc:	4c0b      	ldr	r4, [pc, #44]	; (8000e0c <checkBrickHit+0x558>)
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	442b      	add	r3, r5
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	4423      	add	r3, r4
 8000dec:	330c      	adds	r3, #12
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <checkBrickHit+0x560>)
 8000df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	2220      	movs	r2, #32
 8000dfe:	f003 ff41 	bl	8004c84 <Displ_FillArea>
                ball.dir = SE;
 8000e02:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <checkBrickHit+0x55c>)
 8000e04:	2203      	movs	r2, #3
 8000e06:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8000e08:	f000 bfa6 	b.w	8001d58 <checkBrickHit+0x14a4>
 8000e0c:	200000e8 	.word	0x200000e8
 8000e10:	20000034 	.word	0x20000034
 8000e14:	20000004 	.word	0x20000004
 8000e18:	20001ee8 	.word	0x20001ee8
    case NE:
        if (bricks[ball.y - 1 - 8][ball.x/8].visible == 1) {
 8000e1c:	4bb6      	ldr	r3, [pc, #728]	; (80010f8 <checkBrickHit+0x844>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f1a3 0209 	sub.w	r2, r3, #9
 8000e24:	4bb4      	ldr	r3, [pc, #720]	; (80010f8 <checkBrickHit+0x844>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	da00      	bge.n	8000e2e <checkBrickHit+0x57a>
 8000e2c:	3307      	adds	r3, #7
 8000e2e:	10db      	asrs	r3, r3, #3
 8000e30:	4618      	mov	r0, r3
 8000e32:	49b2      	ldr	r1, [pc, #712]	; (80010fc <checkBrickHit+0x848>)
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	4403      	add	r3, r0
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	440b      	add	r3, r1
 8000e42:	3308      	adds	r3, #8
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	f040 80b4 	bne.w	8000fb4 <checkBrickHit+0x700>
            bricks[ball.y - 1 - 8][ball.x/8].toughness--;
 8000e4c:	4baa      	ldr	r3, [pc, #680]	; (80010f8 <checkBrickHit+0x844>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f1a3 0209 	sub.w	r2, r3, #9
 8000e54:	4ba8      	ldr	r3, [pc, #672]	; (80010f8 <checkBrickHit+0x844>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	da00      	bge.n	8000e5e <checkBrickHit+0x5aa>
 8000e5c:	3307      	adds	r3, #7
 8000e5e:	10db      	asrs	r3, r3, #3
 8000e60:	4619      	mov	r1, r3
 8000e62:	48a6      	ldr	r0, [pc, #664]	; (80010fc <checkBrickHit+0x848>)
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	440b      	add	r3, r1
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	4403      	add	r3, r0
 8000e72:	330c      	adds	r3, #12
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1e58      	subs	r0, r3, #1
 8000e78:	4ca0      	ldr	r4, [pc, #640]	; (80010fc <checkBrickHit+0x848>)
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	440b      	add	r3, r1
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	4423      	add	r3, r4
 8000e88:	330c      	adds	r3, #12
 8000e8a:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 1 - 8][ball.x/8].toughness <= 0) {
 8000e8c:	4b9a      	ldr	r3, [pc, #616]	; (80010f8 <checkBrickHit+0x844>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f1a3 0209 	sub.w	r2, r3, #9
 8000e94:	4b98      	ldr	r3, [pc, #608]	; (80010f8 <checkBrickHit+0x844>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	da00      	bge.n	8000e9e <checkBrickHit+0x5ea>
 8000e9c:	3307      	adds	r3, #7
 8000e9e:	10db      	asrs	r3, r3, #3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	4996      	ldr	r1, [pc, #600]	; (80010fc <checkBrickHit+0x848>)
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4403      	add	r3, r0
 8000eae:	011b      	lsls	r3, r3, #4
 8000eb0:	440b      	add	r3, r1
 8000eb2:	330c      	adds	r3, #12
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	dc29      	bgt.n	8000f0e <checkBrickHit+0x65a>
                bricks[ball.y - 1 - 8][ball.x/8].visible = 0;
 8000eba:	4b8f      	ldr	r3, [pc, #572]	; (80010f8 <checkBrickHit+0x844>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f1a3 0209 	sub.w	r2, r3, #9
 8000ec2:	4b8d      	ldr	r3, [pc, #564]	; (80010f8 <checkBrickHit+0x844>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	da00      	bge.n	8000ecc <checkBrickHit+0x618>
 8000eca:	3307      	adds	r3, #7
 8000ecc:	10db      	asrs	r3, r3, #3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	498a      	ldr	r1, [pc, #552]	; (80010fc <checkBrickHit+0x848>)
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	4403      	add	r3, r0
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	440b      	add	r3, r1
 8000ee0:	3308      	adds	r3, #8
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
                points++;
 8000ee6:	4b86      	ldr	r3, [pc, #536]	; (8001100 <checkBrickHit+0x84c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b84      	ldr	r3, [pc, #528]	; (8001100 <checkBrickHit+0x84c>)
 8000ef0:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp(ball.x/8, ball.y - 1 - 8);
 8000ef2:	4b81      	ldr	r3, [pc, #516]	; (80010f8 <checkBrickHit+0x844>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	da00      	bge.n	8000efc <checkBrickHit+0x648>
 8000efa:	3307      	adds	r3, #7
 8000efc:	10db      	asrs	r3, r3, #3
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b7d      	ldr	r3, [pc, #500]	; (80010f8 <checkBrickHit+0x844>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	3b09      	subs	r3, #9
 8000f06:	4619      	mov	r1, r3
 8000f08:	4610      	mov	r0, r2
 8000f0a:	f000 ff39 	bl	8001d80 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 1 - 8][ball.x/8].x*4, bricks[ball.y - 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][ball.x/8].toughness]);
 8000f0e:	4b7a      	ldr	r3, [pc, #488]	; (80010f8 <checkBrickHit+0x844>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f1a3 0209 	sub.w	r2, r3, #9
 8000f16:	4b78      	ldr	r3, [pc, #480]	; (80010f8 <checkBrickHit+0x844>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	da00      	bge.n	8000f20 <checkBrickHit+0x66c>
 8000f1e:	3307      	adds	r3, #7
 8000f20:	10db      	asrs	r3, r3, #3
 8000f22:	4618      	mov	r0, r3
 8000f24:	4975      	ldr	r1, [pc, #468]	; (80010fc <checkBrickHit+0x848>)
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4403      	add	r3, r0
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	440b      	add	r3, r1
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	b298      	uxth	r0, r3
 8000f3c:	4b6e      	ldr	r3, [pc, #440]	; (80010f8 <checkBrickHit+0x844>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f1a3 0209 	sub.w	r2, r3, #9
 8000f44:	4b6c      	ldr	r3, [pc, #432]	; (80010f8 <checkBrickHit+0x844>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da00      	bge.n	8000f4e <checkBrickHit+0x69a>
 8000f4c:	3307      	adds	r3, #7
 8000f4e:	10db      	asrs	r3, r3, #3
 8000f50:	461c      	mov	r4, r3
 8000f52:	496a      	ldr	r1, [pc, #424]	; (80010fc <checkBrickHit+0x848>)
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4423      	add	r3, r4
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	440b      	add	r3, r1
 8000f62:	3304      	adds	r3, #4
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	4b62      	ldr	r3, [pc, #392]	; (80010f8 <checkBrickHit+0x844>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f1a3 0209 	sub.w	r2, r3, #9
 8000f74:	4b60      	ldr	r3, [pc, #384]	; (80010f8 <checkBrickHit+0x844>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	da00      	bge.n	8000f7e <checkBrickHit+0x6ca>
 8000f7c:	3307      	adds	r3, #7
 8000f7e:	10db      	asrs	r3, r3, #3
 8000f80:	461d      	mov	r5, r3
 8000f82:	4c5e      	ldr	r4, [pc, #376]	; (80010fc <checkBrickHit+0x848>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	442b      	add	r3, r5
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	4423      	add	r3, r4
 8000f92:	330c      	adds	r3, #12
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a5b      	ldr	r2, [pc, #364]	; (8001104 <checkBrickHit+0x850>)
 8000f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	f003 fe6e 	bl	8004c84 <Displ_FillArea>
            bricksHit++;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	3301      	adds	r3, #1
 8000fac:	71fb      	strb	r3, [r7, #7]
            ball.dir = SE;
 8000fae:	4b52      	ldr	r3, [pc, #328]	; (80010f8 <checkBrickHit+0x844>)
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 8000fb4:	4b50      	ldr	r3, [pc, #320]	; (80010f8 <checkBrickHit+0x844>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f1a3 0208 	sub.w	r2, r3, #8
 8000fbc:	4b4e      	ldr	r3, [pc, #312]	; (80010f8 <checkBrickHit+0x844>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	da00      	bge.n	8000fc8 <checkBrickHit+0x714>
 8000fc6:	3307      	adds	r3, #7
 8000fc8:	10db      	asrs	r3, r3, #3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	494b      	ldr	r1, [pc, #300]	; (80010fc <checkBrickHit+0x848>)
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4403      	add	r3, r0
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	440b      	add	r3, r1
 8000fdc:	3308      	adds	r3, #8
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	f040 80d0 	bne.w	8001186 <checkBrickHit+0x8d2>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 8000fe6:	4b44      	ldr	r3, [pc, #272]	; (80010f8 <checkBrickHit+0x844>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f1a3 0208 	sub.w	r2, r3, #8
 8000fee:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <checkBrickHit+0x844>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	da00      	bge.n	8000ffa <checkBrickHit+0x746>
 8000ff8:	3307      	adds	r3, #7
 8000ffa:	10db      	asrs	r3, r3, #3
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	483f      	ldr	r0, [pc, #252]	; (80010fc <checkBrickHit+0x848>)
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	440b      	add	r3, r1
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	4403      	add	r3, r0
 800100e:	330c      	adds	r3, #12
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1e58      	subs	r0, r3, #1
 8001014:	4c39      	ldr	r4, [pc, #228]	; (80010fc <checkBrickHit+0x848>)
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	440b      	add	r3, r1
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	4423      	add	r3, r4
 8001024:	330c      	adds	r3, #12
 8001026:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 8001028:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <checkBrickHit+0x844>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f1a3 0208 	sub.w	r2, r3, #8
 8001030:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <checkBrickHit+0x844>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	da00      	bge.n	800103c <checkBrickHit+0x788>
 800103a:	3307      	adds	r3, #7
 800103c:	10db      	asrs	r3, r3, #3
 800103e:	4618      	mov	r0, r3
 8001040:	492e      	ldr	r1, [pc, #184]	; (80010fc <checkBrickHit+0x848>)
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4403      	add	r3, r0
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	440b      	add	r3, r1
 8001050:	330c      	adds	r3, #12
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	dc2b      	bgt.n	80010b0 <checkBrickHit+0x7fc>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 8001058:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <checkBrickHit+0x844>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f1a3 0208 	sub.w	r2, r3, #8
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <checkBrickHit+0x844>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	3301      	adds	r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	da00      	bge.n	800106c <checkBrickHit+0x7b8>
 800106a:	3307      	adds	r3, #7
 800106c:	10db      	asrs	r3, r3, #3
 800106e:	4618      	mov	r0, r3
 8001070:	4922      	ldr	r1, [pc, #136]	; (80010fc <checkBrickHit+0x848>)
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4403      	add	r3, r0
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	440b      	add	r3, r1
 8001080:	3308      	adds	r3, #8
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
                points++;
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <checkBrickHit+0x84c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <checkBrickHit+0x84c>)
 8001090:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <checkBrickHit+0x844>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	2b00      	cmp	r3, #0
 800109a:	da00      	bge.n	800109e <checkBrickHit+0x7ea>
 800109c:	3307      	adds	r3, #7
 800109e:	10db      	asrs	r3, r3, #3
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <checkBrickHit+0x844>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	3b08      	subs	r3, #8
 80010a8:	4619      	mov	r1, r3
 80010aa:	4610      	mov	r0, r2
 80010ac:	f000 fe68 	bl	8001d80 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <checkBrickHit+0x844>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f1a3 0208 	sub.w	r2, r3, #8
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <checkBrickHit+0x844>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	da00      	bge.n	80010c4 <checkBrickHit+0x810>
 80010c2:	3307      	adds	r3, #7
 80010c4:	10db      	asrs	r3, r3, #3
 80010c6:	4618      	mov	r0, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <checkBrickHit+0x848>)
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4403      	add	r3, r0
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	440b      	add	r3, r1
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	b298      	uxth	r0, r3
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <checkBrickHit+0x844>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f1a3 0208 	sub.w	r2, r3, #8
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <checkBrickHit+0x844>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	da0a      	bge.n	8001108 <checkBrickHit+0x854>
 80010f2:	3307      	adds	r3, #7
 80010f4:	e008      	b.n	8001108 <checkBrickHit+0x854>
 80010f6:	bf00      	nop
 80010f8:	20000034 	.word	0x20000034
 80010fc:	200000e8 	.word	0x200000e8
 8001100:	20001ee8 	.word	0x20001ee8
 8001104:	20000004 	.word	0x20000004
 8001108:	10db      	asrs	r3, r3, #3
 800110a:	461c      	mov	r4, r3
 800110c:	4989      	ldr	r1, [pc, #548]	; (8001334 <checkBrickHit+0xa80>)
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4423      	add	r3, r4
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	440b      	add	r3, r1
 800111c:	3304      	adds	r3, #4
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	b29b      	uxth	r3, r3
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	b299      	uxth	r1, r3
 8001126:	4b84      	ldr	r3, [pc, #528]	; (8001338 <checkBrickHit+0xa84>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f1a3 0208 	sub.w	r2, r3, #8
 800112e:	4b82      	ldr	r3, [pc, #520]	; (8001338 <checkBrickHit+0xa84>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	da00      	bge.n	800113a <checkBrickHit+0x886>
 8001138:	3307      	adds	r3, #7
 800113a:	10db      	asrs	r3, r3, #3
 800113c:	461d      	mov	r5, r3
 800113e:	4c7d      	ldr	r4, [pc, #500]	; (8001334 <checkBrickHit+0xa80>)
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	442b      	add	r3, r5
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	4423      	add	r3, r4
 800114e:	330c      	adds	r3, #12
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a7a      	ldr	r2, [pc, #488]	; (800133c <checkBrickHit+0xa88>)
 8001154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001158:	b29b      	uxth	r3, r3
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2304      	movs	r3, #4
 800115e:	2220      	movs	r2, #32
 8001160:	f003 fd90 	bl	8004c84 <Displ_FillArea>
            bricksHit++;
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	3301      	adds	r3, #1
 8001168:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == NE) {
 800116a:	4b73      	ldr	r3, [pc, #460]	; (8001338 <checkBrickHit+0xa84>)
 800116c:	7a1b      	ldrb	r3, [r3, #8]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d102      	bne.n	8001178 <checkBrickHit+0x8c4>
                ball.dir = NW;
 8001172:	4b71      	ldr	r3, [pc, #452]	; (8001338 <checkBrickHit+0xa84>)
 8001174:	2207      	movs	r2, #7
 8001176:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == SE) {
 8001178:	4b6f      	ldr	r3, [pc, #444]	; (8001338 <checkBrickHit+0xa84>)
 800117a:	7a1b      	ldrb	r3, [r3, #8]
 800117c:	2b03      	cmp	r3, #3
 800117e:	d102      	bne.n	8001186 <checkBrickHit+0x8d2>
                ball.dir = SW;
 8001180:	4b6d      	ldr	r3, [pc, #436]	; (8001338 <checkBrickHit+0xa84>)
 8001182:	2205      	movs	r2, #5
 8001184:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 85e7 	bne.w	8001d5c <checkBrickHit+0x14a8>
            if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible == 1) {
 800118e:	4b6a      	ldr	r3, [pc, #424]	; (8001338 <checkBrickHit+0xa84>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f1a3 0209 	sub.w	r2, r3, #9
 8001196:	4b68      	ldr	r3, [pc, #416]	; (8001338 <checkBrickHit+0xa84>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	da00      	bge.n	80011a2 <checkBrickHit+0x8ee>
 80011a0:	3307      	adds	r3, #7
 80011a2:	10db      	asrs	r3, r3, #3
 80011a4:	4618      	mov	r0, r3
 80011a6:	4963      	ldr	r1, [pc, #396]	; (8001334 <checkBrickHit+0xa80>)
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4403      	add	r3, r0
 80011b2:	011b      	lsls	r3, r3, #4
 80011b4:	440b      	add	r3, r1
 80011b6:	3308      	adds	r3, #8
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	f040 85ce 	bne.w	8001d5c <checkBrickHit+0x14a8>
                bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness--;
 80011c0:	4b5d      	ldr	r3, [pc, #372]	; (8001338 <checkBrickHit+0xa84>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f1a3 0209 	sub.w	r2, r3, #9
 80011c8:	4b5b      	ldr	r3, [pc, #364]	; (8001338 <checkBrickHit+0xa84>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da00      	bge.n	80011d4 <checkBrickHit+0x920>
 80011d2:	3307      	adds	r3, #7
 80011d4:	10db      	asrs	r3, r3, #3
 80011d6:	4619      	mov	r1, r3
 80011d8:	4856      	ldr	r0, [pc, #344]	; (8001334 <checkBrickHit+0xa80>)
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	440b      	add	r3, r1
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	4403      	add	r3, r0
 80011e8:	330c      	adds	r3, #12
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	1e58      	subs	r0, r3, #1
 80011ee:	4c51      	ldr	r4, [pc, #324]	; (8001334 <checkBrickHit+0xa80>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	440b      	add	r3, r1
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	4423      	add	r3, r4
 80011fe:	330c      	adds	r3, #12
 8001200:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness <= 0) {
 8001202:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <checkBrickHit+0xa84>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f1a3 0209 	sub.w	r2, r3, #9
 800120a:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <checkBrickHit+0xa84>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	da00      	bge.n	8001216 <checkBrickHit+0x962>
 8001214:	3307      	adds	r3, #7
 8001216:	10db      	asrs	r3, r3, #3
 8001218:	4618      	mov	r0, r3
 800121a:	4946      	ldr	r1, [pc, #280]	; (8001334 <checkBrickHit+0xa80>)
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4403      	add	r3, r0
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	440b      	add	r3, r1
 800122a:	330c      	adds	r3, #12
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	dc2b      	bgt.n	800128a <checkBrickHit+0x9d6>
                    bricks[ball.y - 1 - 8][(ball.x + 1)/8].visible = 0;
 8001232:	4b41      	ldr	r3, [pc, #260]	; (8001338 <checkBrickHit+0xa84>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f1a3 0209 	sub.w	r2, r3, #9
 800123a:	4b3f      	ldr	r3, [pc, #252]	; (8001338 <checkBrickHit+0xa84>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	2b00      	cmp	r3, #0
 8001242:	da00      	bge.n	8001246 <checkBrickHit+0x992>
 8001244:	3307      	adds	r3, #7
 8001246:	10db      	asrs	r3, r3, #3
 8001248:	4618      	mov	r0, r3
 800124a:	493a      	ldr	r1, [pc, #232]	; (8001334 <checkBrickHit+0xa80>)
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4403      	add	r3, r0
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	440b      	add	r3, r1
 800125a:	3308      	adds	r3, #8
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
                    points++;
 8001260:	4b37      	ldr	r3, [pc, #220]	; (8001340 <checkBrickHit+0xa8c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b35      	ldr	r3, [pc, #212]	; (8001340 <checkBrickHit+0xa8c>)
 800126a:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    dropPowerUp((ball.x + 1)/8, ball.y - 1 - 8);
 800126c:	4b32      	ldr	r3, [pc, #200]	; (8001338 <checkBrickHit+0xa84>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	da00      	bge.n	8001278 <checkBrickHit+0x9c4>
 8001276:	3307      	adds	r3, #7
 8001278:	10db      	asrs	r3, r3, #3
 800127a:	461a      	mov	r2, r3
 800127c:	4b2e      	ldr	r3, [pc, #184]	; (8001338 <checkBrickHit+0xa84>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	3b09      	subs	r3, #9
 8001282:	4619      	mov	r1, r3
 8001284:	4610      	mov	r0, r2
 8001286:	f000 fd7b 	bl	8001d80 <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 1 - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 1 - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 1 - 8][(ball.x + 1)/8].toughness]);
 800128a:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <checkBrickHit+0xa84>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f1a3 0209 	sub.w	r2, r3, #9
 8001292:	4b29      	ldr	r3, [pc, #164]	; (8001338 <checkBrickHit+0xa84>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	da00      	bge.n	800129e <checkBrickHit+0x9ea>
 800129c:	3307      	adds	r3, #7
 800129e:	10db      	asrs	r3, r3, #3
 80012a0:	4618      	mov	r0, r3
 80012a2:	4924      	ldr	r1, [pc, #144]	; (8001334 <checkBrickHit+0xa80>)
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4403      	add	r3, r0
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	440b      	add	r3, r1
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	b298      	uxth	r0, r3
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <checkBrickHit+0xa84>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f1a3 0209 	sub.w	r2, r3, #9
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <checkBrickHit+0xa84>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	3301      	adds	r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da00      	bge.n	80012ce <checkBrickHit+0xa1a>
 80012cc:	3307      	adds	r3, #7
 80012ce:	10db      	asrs	r3, r3, #3
 80012d0:	461c      	mov	r4, r3
 80012d2:	4918      	ldr	r1, [pc, #96]	; (8001334 <checkBrickHit+0xa80>)
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4423      	add	r3, r4
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	440b      	add	r3, r1
 80012e2:	3304      	adds	r3, #4
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	b299      	uxth	r1, r3
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <checkBrickHit+0xa84>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f1a3 0209 	sub.w	r2, r3, #9
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <checkBrickHit+0xa84>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da00      	bge.n	8001300 <checkBrickHit+0xa4c>
 80012fe:	3307      	adds	r3, #7
 8001300:	10db      	asrs	r3, r3, #3
 8001302:	461d      	mov	r5, r3
 8001304:	4c0b      	ldr	r4, [pc, #44]	; (8001334 <checkBrickHit+0xa80>)
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	442b      	add	r3, r5
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	4423      	add	r3, r4
 8001314:	330c      	adds	r3, #12
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a08      	ldr	r2, [pc, #32]	; (800133c <checkBrickHit+0xa88>)
 800131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131e:	b29b      	uxth	r3, r3
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2304      	movs	r3, #4
 8001324:	2220      	movs	r2, #32
 8001326:	f003 fcad 	bl	8004c84 <Displ_FillArea>
                ball.dir = SW;
 800132a:	4b03      	ldr	r3, [pc, #12]	; (8001338 <checkBrickHit+0xa84>)
 800132c:	2205      	movs	r2, #5
 800132e:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 8001330:	f000 bd14 	b.w	8001d5c <checkBrickHit+0x14a8>
 8001334:	200000e8 	.word	0x200000e8
 8001338:	20000034 	.word	0x20000034
 800133c:	20000004 	.word	0x20000004
 8001340:	20001ee8 	.word	0x20001ee8
    case SE:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 8001344:	4bb6      	ldr	r3, [pc, #728]	; (8001620 <checkBrickHit+0xd6c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	1fda      	subs	r2, r3, #7
 800134a:	4bb5      	ldr	r3, [pc, #724]	; (8001620 <checkBrickHit+0xd6c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	da00      	bge.n	8001354 <checkBrickHit+0xaa0>
 8001352:	3307      	adds	r3, #7
 8001354:	10db      	asrs	r3, r3, #3
 8001356:	4618      	mov	r0, r3
 8001358:	49b2      	ldr	r1, [pc, #712]	; (8001624 <checkBrickHit+0xd70>)
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4403      	add	r3, r0
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	440b      	add	r3, r1
 8001368:	3308      	adds	r3, #8
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	f040 80ae 	bne.w	80014ce <checkBrickHit+0xc1a>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 8001372:	4bab      	ldr	r3, [pc, #684]	; (8001620 <checkBrickHit+0xd6c>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	1fda      	subs	r2, r3, #7
 8001378:	4ba9      	ldr	r3, [pc, #676]	; (8001620 <checkBrickHit+0xd6c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	da00      	bge.n	8001382 <checkBrickHit+0xace>
 8001380:	3307      	adds	r3, #7
 8001382:	10db      	asrs	r3, r3, #3
 8001384:	4619      	mov	r1, r3
 8001386:	48a7      	ldr	r0, [pc, #668]	; (8001624 <checkBrickHit+0xd70>)
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	440b      	add	r3, r1
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	4403      	add	r3, r0
 8001396:	330c      	adds	r3, #12
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	1e58      	subs	r0, r3, #1
 800139c:	4ca1      	ldr	r4, [pc, #644]	; (8001624 <checkBrickHit+0xd70>)
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	440b      	add	r3, r1
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	4423      	add	r3, r4
 80013ac:	330c      	adds	r3, #12
 80013ae:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 80013b0:	4b9b      	ldr	r3, [pc, #620]	; (8001620 <checkBrickHit+0xd6c>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	1fda      	subs	r2, r3, #7
 80013b6:	4b9a      	ldr	r3, [pc, #616]	; (8001620 <checkBrickHit+0xd6c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da00      	bge.n	80013c0 <checkBrickHit+0xb0c>
 80013be:	3307      	adds	r3, #7
 80013c0:	10db      	asrs	r3, r3, #3
 80013c2:	4618      	mov	r0, r3
 80013c4:	4997      	ldr	r1, [pc, #604]	; (8001624 <checkBrickHit+0xd70>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4403      	add	r3, r0
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	440b      	add	r3, r1
 80013d4:	330c      	adds	r3, #12
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	dc28      	bgt.n	800142e <checkBrickHit+0xb7a>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 80013dc:	4b90      	ldr	r3, [pc, #576]	; (8001620 <checkBrickHit+0xd6c>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	1fda      	subs	r2, r3, #7
 80013e2:	4b8f      	ldr	r3, [pc, #572]	; (8001620 <checkBrickHit+0xd6c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	da00      	bge.n	80013ec <checkBrickHit+0xb38>
 80013ea:	3307      	adds	r3, #7
 80013ec:	10db      	asrs	r3, r3, #3
 80013ee:	4618      	mov	r0, r3
 80013f0:	498c      	ldr	r1, [pc, #560]	; (8001624 <checkBrickHit+0xd70>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4403      	add	r3, r0
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	440b      	add	r3, r1
 8001400:	3308      	adds	r3, #8
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
                points++;
 8001406:	4b88      	ldr	r3, [pc, #544]	; (8001628 <checkBrickHit+0xd74>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b86      	ldr	r3, [pc, #536]	; (8001628 <checkBrickHit+0xd74>)
 8001410:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 8001412:	4b83      	ldr	r3, [pc, #524]	; (8001620 <checkBrickHit+0xd6c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	da00      	bge.n	800141c <checkBrickHit+0xb68>
 800141a:	3307      	adds	r3, #7
 800141c:	10db      	asrs	r3, r3, #3
 800141e:	461a      	mov	r2, r3
 8001420:	4b7f      	ldr	r3, [pc, #508]	; (8001620 <checkBrickHit+0xd6c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	3b07      	subs	r3, #7
 8001426:	4619      	mov	r1, r3
 8001428:	4610      	mov	r0, r2
 800142a:	f000 fca9 	bl	8001d80 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 800142e:	4b7c      	ldr	r3, [pc, #496]	; (8001620 <checkBrickHit+0xd6c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	1fda      	subs	r2, r3, #7
 8001434:	4b7a      	ldr	r3, [pc, #488]	; (8001620 <checkBrickHit+0xd6c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	da00      	bge.n	800143e <checkBrickHit+0xb8a>
 800143c:	3307      	adds	r3, #7
 800143e:	10db      	asrs	r3, r3, #3
 8001440:	4618      	mov	r0, r3
 8001442:	4978      	ldr	r1, [pc, #480]	; (8001624 <checkBrickHit+0xd70>)
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4403      	add	r3, r0
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	440b      	add	r3, r1
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	b298      	uxth	r0, r3
 800145a:	4b71      	ldr	r3, [pc, #452]	; (8001620 <checkBrickHit+0xd6c>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	1fda      	subs	r2, r3, #7
 8001460:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <checkBrickHit+0xd6c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	da00      	bge.n	800146a <checkBrickHit+0xbb6>
 8001468:	3307      	adds	r3, #7
 800146a:	10db      	asrs	r3, r3, #3
 800146c:	461c      	mov	r4, r3
 800146e:	496d      	ldr	r1, [pc, #436]	; (8001624 <checkBrickHit+0xd70>)
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4423      	add	r3, r4
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	440b      	add	r3, r1
 800147e:	3304      	adds	r3, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	b29b      	uxth	r3, r3
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	b299      	uxth	r1, r3
 8001488:	4b65      	ldr	r3, [pc, #404]	; (8001620 <checkBrickHit+0xd6c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	1fda      	subs	r2, r3, #7
 800148e:	4b64      	ldr	r3, [pc, #400]	; (8001620 <checkBrickHit+0xd6c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	da00      	bge.n	8001498 <checkBrickHit+0xbe4>
 8001496:	3307      	adds	r3, #7
 8001498:	10db      	asrs	r3, r3, #3
 800149a:	461d      	mov	r5, r3
 800149c:	4c61      	ldr	r4, [pc, #388]	; (8001624 <checkBrickHit+0xd70>)
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	442b      	add	r3, r5
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	4423      	add	r3, r4
 80014ac:	330c      	adds	r3, #12
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a5e      	ldr	r2, [pc, #376]	; (800162c <checkBrickHit+0xd78>)
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2304      	movs	r3, #4
 80014bc:	2220      	movs	r2, #32
 80014be:	f003 fbe1 	bl	8004c84 <Displ_FillArea>
            bricksHit++;
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	3301      	adds	r3, #1
 80014c6:	71fb      	strb	r3, [r7, #7]
            ball.dir = NE;
 80014c8:	4b55      	ldr	r3, [pc, #340]	; (8001620 <checkBrickHit+0xd6c>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x + 1)/8].visible == 1) {
 80014ce:	4b54      	ldr	r3, [pc, #336]	; (8001620 <checkBrickHit+0xd6c>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f1a3 0208 	sub.w	r2, r3, #8
 80014d6:	4b52      	ldr	r3, [pc, #328]	; (8001620 <checkBrickHit+0xd6c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da00      	bge.n	80014e2 <checkBrickHit+0xc2e>
 80014e0:	3307      	adds	r3, #7
 80014e2:	10db      	asrs	r3, r3, #3
 80014e4:	4618      	mov	r0, r3
 80014e6:	494f      	ldr	r1, [pc, #316]	; (8001624 <checkBrickHit+0xd70>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4403      	add	r3, r0
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	440b      	add	r3, r1
 80014f6:	3308      	adds	r3, #8
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	f040 80d0 	bne.w	80016a0 <checkBrickHit+0xdec>
            bricks[ball.y - 8][(ball.x + 1)/8].toughness--;
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <checkBrickHit+0xd6c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f1a3 0208 	sub.w	r2, r3, #8
 8001508:	4b45      	ldr	r3, [pc, #276]	; (8001620 <checkBrickHit+0xd6c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	da00      	bge.n	8001514 <checkBrickHit+0xc60>
 8001512:	3307      	adds	r3, #7
 8001514:	10db      	asrs	r3, r3, #3
 8001516:	4619      	mov	r1, r3
 8001518:	4842      	ldr	r0, [pc, #264]	; (8001624 <checkBrickHit+0xd70>)
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	440b      	add	r3, r1
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	4403      	add	r3, r0
 8001528:	330c      	adds	r3, #12
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	1e58      	subs	r0, r3, #1
 800152e:	4c3d      	ldr	r4, [pc, #244]	; (8001624 <checkBrickHit+0xd70>)
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	440b      	add	r3, r1
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	4423      	add	r3, r4
 800153e:	330c      	adds	r3, #12
 8001540:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x + 1)/8].toughness <= 0) {
 8001542:	4b37      	ldr	r3, [pc, #220]	; (8001620 <checkBrickHit+0xd6c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f1a3 0208 	sub.w	r2, r3, #8
 800154a:	4b35      	ldr	r3, [pc, #212]	; (8001620 <checkBrickHit+0xd6c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	da00      	bge.n	8001556 <checkBrickHit+0xca2>
 8001554:	3307      	adds	r3, #7
 8001556:	10db      	asrs	r3, r3, #3
 8001558:	4618      	mov	r0, r3
 800155a:	4932      	ldr	r1, [pc, #200]	; (8001624 <checkBrickHit+0xd70>)
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4403      	add	r3, r0
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	440b      	add	r3, r1
 800156a:	330c      	adds	r3, #12
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	dc2b      	bgt.n	80015ca <checkBrickHit+0xd16>
                bricks[ball.y - 8][(ball.x + 1)/8].visible = 0;
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <checkBrickHit+0xd6c>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f1a3 0208 	sub.w	r2, r3, #8
 800157a:	4b29      	ldr	r3, [pc, #164]	; (8001620 <checkBrickHit+0xd6c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	da00      	bge.n	8001586 <checkBrickHit+0xcd2>
 8001584:	3307      	adds	r3, #7
 8001586:	10db      	asrs	r3, r3, #3
 8001588:	4618      	mov	r0, r3
 800158a:	4926      	ldr	r1, [pc, #152]	; (8001624 <checkBrickHit+0xd70>)
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4403      	add	r3, r0
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	440b      	add	r3, r1
 800159a:	3308      	adds	r3, #8
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
                points++;
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <checkBrickHit+0xd74>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <checkBrickHit+0xd74>)
 80015aa:	701a      	strb	r2, [r3, #0]
                //////QD << "score:" << points;
                dropPowerUp((ball.x + 1)/8, ball.y - 8);
 80015ac:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <checkBrickHit+0xd6c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da00      	bge.n	80015b8 <checkBrickHit+0xd04>
 80015b6:	3307      	adds	r3, #7
 80015b8:	10db      	asrs	r3, r3, #3
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <checkBrickHit+0xd6c>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	3b08      	subs	r3, #8
 80015c2:	4619      	mov	r1, r3
 80015c4:	4610      	mov	r0, r2
 80015c6:	f000 fbdb 	bl	8001d80 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x + 1)/8].x*4, bricks[ball.y - 8][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x + 1)/8].toughness]);
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <checkBrickHit+0xd6c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f1a3 0208 	sub.w	r2, r3, #8
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <checkBrickHit+0xd6c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da00      	bge.n	80015de <checkBrickHit+0xd2a>
 80015dc:	3307      	adds	r3, #7
 80015de:	10db      	asrs	r3, r3, #3
 80015e0:	4618      	mov	r0, r3
 80015e2:	4910      	ldr	r1, [pc, #64]	; (8001624 <checkBrickHit+0xd70>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4403      	add	r3, r0
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	440b      	add	r3, r1
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	b298      	uxth	r0, r3
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <checkBrickHit+0xd6c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f1a3 0208 	sub.w	r2, r3, #8
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <checkBrickHit+0xd6c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	da00      	bge.n	800160e <checkBrickHit+0xd5a>
 800160c:	3307      	adds	r3, #7
 800160e:	10db      	asrs	r3, r3, #3
 8001610:	461c      	mov	r4, r3
 8001612:	4904      	ldr	r1, [pc, #16]	; (8001624 <checkBrickHit+0xd70>)
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	e008      	b.n	8001630 <checkBrickHit+0xd7c>
 800161e:	bf00      	nop
 8001620:	20000034 	.word	0x20000034
 8001624:	200000e8 	.word	0x200000e8
 8001628:	20001ee8 	.word	0x20001ee8
 800162c:	20000004 	.word	0x20000004
 8001630:	4423      	add	r3, r4
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	440b      	add	r3, r1
 8001636:	3304      	adds	r3, #4
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	b299      	uxth	r1, r3
 8001640:	4b7f      	ldr	r3, [pc, #508]	; (8001840 <checkBrickHit+0xf8c>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f1a3 0208 	sub.w	r2, r3, #8
 8001648:	4b7d      	ldr	r3, [pc, #500]	; (8001840 <checkBrickHit+0xf8c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	da00      	bge.n	8001654 <checkBrickHit+0xda0>
 8001652:	3307      	adds	r3, #7
 8001654:	10db      	asrs	r3, r3, #3
 8001656:	461d      	mov	r5, r3
 8001658:	4c7a      	ldr	r4, [pc, #488]	; (8001844 <checkBrickHit+0xf90>)
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	442b      	add	r3, r5
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	4423      	add	r3, r4
 8001668:	330c      	adds	r3, #12
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a76      	ldr	r2, [pc, #472]	; (8001848 <checkBrickHit+0xf94>)
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	b29b      	uxth	r3, r3
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2304      	movs	r3, #4
 8001678:	2220      	movs	r2, #32
 800167a:	f003 fb03 	bl	8004c84 <Displ_FillArea>
            bricksHit++;
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	3301      	adds	r3, #1
 8001682:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SE) {
 8001684:	4b6e      	ldr	r3, [pc, #440]	; (8001840 <checkBrickHit+0xf8c>)
 8001686:	7a1b      	ldrb	r3, [r3, #8]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d102      	bne.n	8001692 <checkBrickHit+0xdde>
                ball.dir = SW;
 800168c:	4b6c      	ldr	r3, [pc, #432]	; (8001840 <checkBrickHit+0xf8c>)
 800168e:	2205      	movs	r2, #5
 8001690:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NE) {
 8001692:	4b6b      	ldr	r3, [pc, #428]	; (8001840 <checkBrickHit+0xf8c>)
 8001694:	7a1b      	ldrb	r3, [r3, #8]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d102      	bne.n	80016a0 <checkBrickHit+0xdec>
                ball.dir = NW;
 800169a:	4b69      	ldr	r3, [pc, #420]	; (8001840 <checkBrickHit+0xf8c>)
 800169c:	2207      	movs	r2, #7
 800169e:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f040 835c 	bne.w	8001d60 <checkBrickHit+0x14ac>
            if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible == 1) {
 80016a8:	4b65      	ldr	r3, [pc, #404]	; (8001840 <checkBrickHit+0xf8c>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	1fda      	subs	r2, r3, #7
 80016ae:	4b64      	ldr	r3, [pc, #400]	; (8001840 <checkBrickHit+0xf8c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	da00      	bge.n	80016ba <checkBrickHit+0xe06>
 80016b8:	3307      	adds	r3, #7
 80016ba:	10db      	asrs	r3, r3, #3
 80016bc:	4618      	mov	r0, r3
 80016be:	4961      	ldr	r1, [pc, #388]	; (8001844 <checkBrickHit+0xf90>)
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4403      	add	r3, r0
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	440b      	add	r3, r1
 80016ce:	3308      	adds	r3, #8
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	f040 8344 	bne.w	8001d60 <checkBrickHit+0x14ac>
                bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness--;
 80016d8:	4b59      	ldr	r3, [pc, #356]	; (8001840 <checkBrickHit+0xf8c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	1fda      	subs	r2, r3, #7
 80016de:	4b58      	ldr	r3, [pc, #352]	; (8001840 <checkBrickHit+0xf8c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	da00      	bge.n	80016ea <checkBrickHit+0xe36>
 80016e8:	3307      	adds	r3, #7
 80016ea:	10db      	asrs	r3, r3, #3
 80016ec:	4619      	mov	r1, r3
 80016ee:	4855      	ldr	r0, [pc, #340]	; (8001844 <checkBrickHit+0xf90>)
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	440b      	add	r3, r1
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4403      	add	r3, r0
 80016fe:	330c      	adds	r3, #12
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	1e58      	subs	r0, r3, #1
 8001704:	4c4f      	ldr	r4, [pc, #316]	; (8001844 <checkBrickHit+0xf90>)
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	440b      	add	r3, r1
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	4423      	add	r3, r4
 8001714:	330c      	adds	r3, #12
 8001716:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness <= 0) {
 8001718:	4b49      	ldr	r3, [pc, #292]	; (8001840 <checkBrickHit+0xf8c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	1fda      	subs	r2, r3, #7
 800171e:	4b48      	ldr	r3, [pc, #288]	; (8001840 <checkBrickHit+0xf8c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	da00      	bge.n	800172a <checkBrickHit+0xe76>
 8001728:	3307      	adds	r3, #7
 800172a:	10db      	asrs	r3, r3, #3
 800172c:	4618      	mov	r0, r3
 800172e:	4945      	ldr	r1, [pc, #276]	; (8001844 <checkBrickHit+0xf90>)
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4403      	add	r3, r0
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	440b      	add	r3, r1
 800173e:	330c      	adds	r3, #12
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	dc2a      	bgt.n	800179c <checkBrickHit+0xee8>
                    bricks[ball.y - 8 + 1][(ball.x + 1)/8].visible = 0;
 8001746:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <checkBrickHit+0xf8c>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	1fda      	subs	r2, r3, #7
 800174c:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <checkBrickHit+0xf8c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	da00      	bge.n	8001758 <checkBrickHit+0xea4>
 8001756:	3307      	adds	r3, #7
 8001758:	10db      	asrs	r3, r3, #3
 800175a:	4618      	mov	r0, r3
 800175c:	4939      	ldr	r1, [pc, #228]	; (8001844 <checkBrickHit+0xf90>)
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4403      	add	r3, r0
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	440b      	add	r3, r1
 800176c:	3308      	adds	r3, #8
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
                    points++;
 8001772:	4b36      	ldr	r3, [pc, #216]	; (800184c <checkBrickHit+0xf98>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b34      	ldr	r3, [pc, #208]	; (800184c <checkBrickHit+0xf98>)
 800177c:	701a      	strb	r2, [r3, #0]
                    //////QD << "score:" << points;
                    dropPowerUp((ball.x + 1)/8, ball.y - 8 + 1);
 800177e:	4b30      	ldr	r3, [pc, #192]	; (8001840 <checkBrickHit+0xf8c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	da00      	bge.n	800178a <checkBrickHit+0xed6>
 8001788:	3307      	adds	r3, #7
 800178a:	10db      	asrs	r3, r3, #3
 800178c:	461a      	mov	r2, r3
 800178e:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <checkBrickHit+0xf8c>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	3b07      	subs	r3, #7
 8001794:	4619      	mov	r1, r3
 8001796:	4610      	mov	r0, r2
 8001798:	f000 faf2 	bl	8001d80 <dropPowerUp>
                }
                Displ_FillArea(bricks[ball.y - 8 + 1][(ball.x + 1)/8].x*4, bricks[ball.y - 8 + 1][(ball.x + 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8 + 1][(ball.x + 1)/8].toughness]);
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <checkBrickHit+0xf8c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	1fda      	subs	r2, r3, #7
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <checkBrickHit+0xf8c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	da00      	bge.n	80017ae <checkBrickHit+0xefa>
 80017ac:	3307      	adds	r3, #7
 80017ae:	10db      	asrs	r3, r3, #3
 80017b0:	4618      	mov	r0, r3
 80017b2:	4924      	ldr	r1, [pc, #144]	; (8001844 <checkBrickHit+0xf90>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4403      	add	r3, r0
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	440b      	add	r3, r1
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	b298      	uxth	r0, r3
 80017ca:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <checkBrickHit+0xf8c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	1fda      	subs	r2, r3, #7
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <checkBrickHit+0xf8c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da00      	bge.n	80017dc <checkBrickHit+0xf28>
 80017da:	3307      	adds	r3, #7
 80017dc:	10db      	asrs	r3, r3, #3
 80017de:	461c      	mov	r4, r3
 80017e0:	4918      	ldr	r1, [pc, #96]	; (8001844 <checkBrickHit+0xf90>)
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4423      	add	r3, r4
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	440b      	add	r3, r1
 80017f0:	3304      	adds	r3, #4
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	b299      	uxth	r1, r3
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <checkBrickHit+0xf8c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	1fda      	subs	r2, r3, #7
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <checkBrickHit+0xf8c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	da00      	bge.n	800180c <checkBrickHit+0xf58>
 800180a:	3307      	adds	r3, #7
 800180c:	10db      	asrs	r3, r3, #3
 800180e:	461d      	mov	r5, r3
 8001810:	4c0c      	ldr	r4, [pc, #48]	; (8001844 <checkBrickHit+0xf90>)
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	442b      	add	r3, r5
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	4423      	add	r3, r4
 8001820:	330c      	adds	r3, #12
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a08      	ldr	r2, [pc, #32]	; (8001848 <checkBrickHit+0xf94>)
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	b29b      	uxth	r3, r3
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2304      	movs	r3, #4
 8001830:	2220      	movs	r2, #32
 8001832:	f003 fa27 	bl	8004c84 <Displ_FillArea>
                ball.dir = NW;
 8001836:	4b02      	ldr	r3, [pc, #8]	; (8001840 <checkBrickHit+0xf8c>)
 8001838:	2207      	movs	r2, #7
 800183a:	721a      	strb	r2, [r3, #8]
            }
        }
        break;
 800183c:	e290      	b.n	8001d60 <checkBrickHit+0x14ac>
 800183e:	bf00      	nop
 8001840:	20000034 	.word	0x20000034
 8001844:	200000e8 	.word	0x200000e8
 8001848:	20000004 	.word	0x20000004
 800184c:	20001ee8 	.word	0x20001ee8
    case SW:
        if (bricks[ball.y + 1 - 8][ball.x/8].visible == 1) {
 8001850:	4bb6      	ldr	r3, [pc, #728]	; (8001b2c <checkBrickHit+0x1278>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	1fda      	subs	r2, r3, #7
 8001856:	4bb5      	ldr	r3, [pc, #724]	; (8001b2c <checkBrickHit+0x1278>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	da00      	bge.n	8001860 <checkBrickHit+0xfac>
 800185e:	3307      	adds	r3, #7
 8001860:	10db      	asrs	r3, r3, #3
 8001862:	4618      	mov	r0, r3
 8001864:	49b2      	ldr	r1, [pc, #712]	; (8001b30 <checkBrickHit+0x127c>)
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4403      	add	r3, r0
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	440b      	add	r3, r1
 8001874:	3308      	adds	r3, #8
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	f040 80ae 	bne.w	80019da <checkBrickHit+0x1126>
            bricks[ball.y + 1 - 8][ball.x/8].toughness--;
 800187e:	4bab      	ldr	r3, [pc, #684]	; (8001b2c <checkBrickHit+0x1278>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	1fda      	subs	r2, r3, #7
 8001884:	4ba9      	ldr	r3, [pc, #676]	; (8001b2c <checkBrickHit+0x1278>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	da00      	bge.n	800188e <checkBrickHit+0xfda>
 800188c:	3307      	adds	r3, #7
 800188e:	10db      	asrs	r3, r3, #3
 8001890:	4619      	mov	r1, r3
 8001892:	48a7      	ldr	r0, [pc, #668]	; (8001b30 <checkBrickHit+0x127c>)
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	440b      	add	r3, r1
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	4403      	add	r3, r0
 80018a2:	330c      	adds	r3, #12
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	1e58      	subs	r0, r3, #1
 80018a8:	4ca1      	ldr	r4, [pc, #644]	; (8001b30 <checkBrickHit+0x127c>)
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	440b      	add	r3, r1
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	4423      	add	r3, r4
 80018b8:	330c      	adds	r3, #12
 80018ba:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y + 1 - 8][ball.x/8].toughness <= 0) {
 80018bc:	4b9b      	ldr	r3, [pc, #620]	; (8001b2c <checkBrickHit+0x1278>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	1fda      	subs	r2, r3, #7
 80018c2:	4b9a      	ldr	r3, [pc, #616]	; (8001b2c <checkBrickHit+0x1278>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	da00      	bge.n	80018cc <checkBrickHit+0x1018>
 80018ca:	3307      	adds	r3, #7
 80018cc:	10db      	asrs	r3, r3, #3
 80018ce:	4618      	mov	r0, r3
 80018d0:	4997      	ldr	r1, [pc, #604]	; (8001b30 <checkBrickHit+0x127c>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4403      	add	r3, r0
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	440b      	add	r3, r1
 80018e0:	330c      	adds	r3, #12
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	dc28      	bgt.n	800193a <checkBrickHit+0x1086>
                bricks[ball.y + 1 - 8][ball.x/8].visible = 0;
 80018e8:	4b90      	ldr	r3, [pc, #576]	; (8001b2c <checkBrickHit+0x1278>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	1fda      	subs	r2, r3, #7
 80018ee:	4b8f      	ldr	r3, [pc, #572]	; (8001b2c <checkBrickHit+0x1278>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	da00      	bge.n	80018f8 <checkBrickHit+0x1044>
 80018f6:	3307      	adds	r3, #7
 80018f8:	10db      	asrs	r3, r3, #3
 80018fa:	4618      	mov	r0, r3
 80018fc:	498c      	ldr	r1, [pc, #560]	; (8001b30 <checkBrickHit+0x127c>)
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4403      	add	r3, r0
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	440b      	add	r3, r1
 800190c:	3308      	adds	r3, #8
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
                points++;
 8001912:	4b88      	ldr	r3, [pc, #544]	; (8001b34 <checkBrickHit+0x1280>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b86      	ldr	r3, [pc, #536]	; (8001b34 <checkBrickHit+0x1280>)
 800191c:	701a      	strb	r2, [r3, #0]
                ////QD << "score:" << points;
                dropPowerUp(ball.x/8, ball.y + 1 - 8);
 800191e:	4b83      	ldr	r3, [pc, #524]	; (8001b2c <checkBrickHit+0x1278>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	da00      	bge.n	8001928 <checkBrickHit+0x1074>
 8001926:	3307      	adds	r3, #7
 8001928:	10db      	asrs	r3, r3, #3
 800192a:	461a      	mov	r2, r3
 800192c:	4b7f      	ldr	r3, [pc, #508]	; (8001b2c <checkBrickHit+0x1278>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	3b07      	subs	r3, #7
 8001932:	4619      	mov	r1, r3
 8001934:	4610      	mov	r0, r2
 8001936:	f000 fa23 	bl	8001d80 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y + 1 - 8][ball.x/8].x*4, bricks[ball.y + 1 - 8][ball.x/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][ball.x/8].toughness]);
 800193a:	4b7c      	ldr	r3, [pc, #496]	; (8001b2c <checkBrickHit+0x1278>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	1fda      	subs	r2, r3, #7
 8001940:	4b7a      	ldr	r3, [pc, #488]	; (8001b2c <checkBrickHit+0x1278>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	da00      	bge.n	800194a <checkBrickHit+0x1096>
 8001948:	3307      	adds	r3, #7
 800194a:	10db      	asrs	r3, r3, #3
 800194c:	4618      	mov	r0, r3
 800194e:	4978      	ldr	r1, [pc, #480]	; (8001b30 <checkBrickHit+0x127c>)
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4403      	add	r3, r0
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	440b      	add	r3, r1
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	b29b      	uxth	r3, r3
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	b298      	uxth	r0, r3
 8001966:	4b71      	ldr	r3, [pc, #452]	; (8001b2c <checkBrickHit+0x1278>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	1fda      	subs	r2, r3, #7
 800196c:	4b6f      	ldr	r3, [pc, #444]	; (8001b2c <checkBrickHit+0x1278>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	da00      	bge.n	8001976 <checkBrickHit+0x10c2>
 8001974:	3307      	adds	r3, #7
 8001976:	10db      	asrs	r3, r3, #3
 8001978:	461c      	mov	r4, r3
 800197a:	496d      	ldr	r1, [pc, #436]	; (8001b30 <checkBrickHit+0x127c>)
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4423      	add	r3, r4
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	440b      	add	r3, r1
 800198a:	3304      	adds	r3, #4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	b299      	uxth	r1, r3
 8001994:	4b65      	ldr	r3, [pc, #404]	; (8001b2c <checkBrickHit+0x1278>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	1fda      	subs	r2, r3, #7
 800199a:	4b64      	ldr	r3, [pc, #400]	; (8001b2c <checkBrickHit+0x1278>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	da00      	bge.n	80019a4 <checkBrickHit+0x10f0>
 80019a2:	3307      	adds	r3, #7
 80019a4:	10db      	asrs	r3, r3, #3
 80019a6:	461d      	mov	r5, r3
 80019a8:	4c61      	ldr	r4, [pc, #388]	; (8001b30 <checkBrickHit+0x127c>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	442b      	add	r3, r5
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4423      	add	r3, r4
 80019b8:	330c      	adds	r3, #12
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a5e      	ldr	r2, [pc, #376]	; (8001b38 <checkBrickHit+0x1284>)
 80019be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2304      	movs	r3, #4
 80019c8:	2220      	movs	r2, #32
 80019ca:	f003 f95b 	bl	8004c84 <Displ_FillArea>
            bricksHit++;
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	3301      	adds	r3, #1
 80019d2:	71fb      	strb	r3, [r7, #7]
            ball.dir = NW;
 80019d4:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <checkBrickHit+0x1278>)
 80019d6:	2207      	movs	r2, #7
 80019d8:	721a      	strb	r2, [r3, #8]
        }
        if (bricks[ball.y - 8][(ball.x - 1)/8].visible == 1) {
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <checkBrickHit+0x1278>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f1a3 0208 	sub.w	r2, r3, #8
 80019e2:	4b52      	ldr	r3, [pc, #328]	; (8001b2c <checkBrickHit+0x1278>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da00      	bge.n	80019ee <checkBrickHit+0x113a>
 80019ec:	3307      	adds	r3, #7
 80019ee:	10db      	asrs	r3, r3, #3
 80019f0:	4618      	mov	r0, r3
 80019f2:	494f      	ldr	r1, [pc, #316]	; (8001b30 <checkBrickHit+0x127c>)
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4403      	add	r3, r0
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	440b      	add	r3, r1
 8001a02:	3308      	adds	r3, #8
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	f040 80d0 	bne.w	8001bac <checkBrickHit+0x12f8>
            bricks[ball.y - 8][(ball.x - 1)/8].toughness--;
 8001a0c:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <checkBrickHit+0x1278>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f1a3 0208 	sub.w	r2, r3, #8
 8001a14:	4b45      	ldr	r3, [pc, #276]	; (8001b2c <checkBrickHit+0x1278>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	da00      	bge.n	8001a20 <checkBrickHit+0x116c>
 8001a1e:	3307      	adds	r3, #7
 8001a20:	10db      	asrs	r3, r3, #3
 8001a22:	4619      	mov	r1, r3
 8001a24:	4842      	ldr	r0, [pc, #264]	; (8001b30 <checkBrickHit+0x127c>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	440b      	add	r3, r1
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	4403      	add	r3, r0
 8001a34:	330c      	adds	r3, #12
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	1e58      	subs	r0, r3, #1
 8001a3a:	4c3d      	ldr	r4, [pc, #244]	; (8001b30 <checkBrickHit+0x127c>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	440b      	add	r3, r1
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	4423      	add	r3, r4
 8001a4a:	330c      	adds	r3, #12
 8001a4c:	6018      	str	r0, [r3, #0]
            if (bricks[ball.y - 8][(ball.x - 1)/8].toughness <= 0) {
 8001a4e:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <checkBrickHit+0x1278>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f1a3 0208 	sub.w	r2, r3, #8
 8001a56:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <checkBrickHit+0x1278>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da00      	bge.n	8001a62 <checkBrickHit+0x11ae>
 8001a60:	3307      	adds	r3, #7
 8001a62:	10db      	asrs	r3, r3, #3
 8001a64:	4618      	mov	r0, r3
 8001a66:	4932      	ldr	r1, [pc, #200]	; (8001b30 <checkBrickHit+0x127c>)
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4403      	add	r3, r0
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	440b      	add	r3, r1
 8001a76:	330c      	adds	r3, #12
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	dc2b      	bgt.n	8001ad6 <checkBrickHit+0x1222>
                bricks[ball.y - 8][(ball.x - 1)/8].visible = 0;
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <checkBrickHit+0x1278>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f1a3 0208 	sub.w	r2, r3, #8
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <checkBrickHit+0x1278>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	da00      	bge.n	8001a92 <checkBrickHit+0x11de>
 8001a90:	3307      	adds	r3, #7
 8001a92:	10db      	asrs	r3, r3, #3
 8001a94:	4618      	mov	r0, r3
 8001a96:	4926      	ldr	r1, [pc, #152]	; (8001b30 <checkBrickHit+0x127c>)
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4403      	add	r3, r0
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
                points++;
 8001aac:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <checkBrickHit+0x1280>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <checkBrickHit+0x1280>)
 8001ab6:	701a      	strb	r2, [r3, #0]
                ////QD << "score:" << points;
                dropPowerUp((ball.x - 1)/8, ball.y - 8);
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <checkBrickHit+0x1278>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da00      	bge.n	8001ac4 <checkBrickHit+0x1210>
 8001ac2:	3307      	adds	r3, #7
 8001ac4:	10db      	asrs	r3, r3, #3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <checkBrickHit+0x1278>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	3b08      	subs	r3, #8
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	f000 f955 	bl	8001d80 <dropPowerUp>
            }
            Displ_FillArea(bricks[ball.y - 8][(ball.x - 1)/8].x*4, bricks[ball.y - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y - 8][(ball.x - 1)/8].toughness]);
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <checkBrickHit+0x1278>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f1a3 0208 	sub.w	r2, r3, #8
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <checkBrickHit+0x1278>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da00      	bge.n	8001aea <checkBrickHit+0x1236>
 8001ae8:	3307      	adds	r3, #7
 8001aea:	10db      	asrs	r3, r3, #3
 8001aec:	4618      	mov	r0, r3
 8001aee:	4910      	ldr	r1, [pc, #64]	; (8001b30 <checkBrickHit+0x127c>)
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4403      	add	r3, r0
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	440b      	add	r3, r1
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	b298      	uxth	r0, r3
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <checkBrickHit+0x1278>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f1a3 0208 	sub.w	r2, r3, #8
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <checkBrickHit+0x1278>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da00      	bge.n	8001b1a <checkBrickHit+0x1266>
 8001b18:	3307      	adds	r3, #7
 8001b1a:	10db      	asrs	r3, r3, #3
 8001b1c:	461c      	mov	r4, r3
 8001b1e:	4904      	ldr	r1, [pc, #16]	; (8001b30 <checkBrickHit+0x127c>)
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	e008      	b.n	8001b3c <checkBrickHit+0x1288>
 8001b2a:	bf00      	nop
 8001b2c:	20000034 	.word	0x20000034
 8001b30:	200000e8 	.word	0x200000e8
 8001b34:	20001ee8 	.word	0x20001ee8
 8001b38:	20000004 	.word	0x20000004
 8001b3c:	4423      	add	r3, r4
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	440b      	add	r3, r1
 8001b42:	3304      	adds	r3, #4
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	b299      	uxth	r1, r3
 8001b4c:	4b88      	ldr	r3, [pc, #544]	; (8001d70 <checkBrickHit+0x14bc>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f1a3 0208 	sub.w	r2, r3, #8
 8001b54:	4b86      	ldr	r3, [pc, #536]	; (8001d70 <checkBrickHit+0x14bc>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	da00      	bge.n	8001b60 <checkBrickHit+0x12ac>
 8001b5e:	3307      	adds	r3, #7
 8001b60:	10db      	asrs	r3, r3, #3
 8001b62:	461d      	mov	r5, r3
 8001b64:	4c83      	ldr	r4, [pc, #524]	; (8001d74 <checkBrickHit+0x14c0>)
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	442b      	add	r3, r5
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	4423      	add	r3, r4
 8001b74:	330c      	adds	r3, #12
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a7f      	ldr	r2, [pc, #508]	; (8001d78 <checkBrickHit+0x14c4>)
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	2304      	movs	r3, #4
 8001b84:	2220      	movs	r2, #32
 8001b86:	f003 f87d 	bl	8004c84 <Displ_FillArea>
            bricksHit++;
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	71fb      	strb	r3, [r7, #7]
            if (ball.dir == SW) {
 8001b90:	4b77      	ldr	r3, [pc, #476]	; (8001d70 <checkBrickHit+0x14bc>)
 8001b92:	7a1b      	ldrb	r3, [r3, #8]
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	d102      	bne.n	8001b9e <checkBrickHit+0x12ea>
                ball.dir = SE;
 8001b98:	4b75      	ldr	r3, [pc, #468]	; (8001d70 <checkBrickHit+0x14bc>)
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	721a      	strb	r2, [r3, #8]
            }
            if (ball.dir == NW) {
 8001b9e:	4b74      	ldr	r3, [pc, #464]	; (8001d70 <checkBrickHit+0x14bc>)
 8001ba0:	7a1b      	ldrb	r3, [r3, #8]
 8001ba2:	2b07      	cmp	r3, #7
 8001ba4:	d102      	bne.n	8001bac <checkBrickHit+0x12f8>
                ball.dir = NE;
 8001ba6:	4b72      	ldr	r3, [pc, #456]	; (8001d70 <checkBrickHit+0x14bc>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	721a      	strb	r2, [r3, #8]
            }
        }
        if (bricksHit <= 0) {
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 80d8 	bne.w	8001d64 <checkBrickHit+0x14b0>
            if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible == 1) {
 8001bb4:	4b6e      	ldr	r3, [pc, #440]	; (8001d70 <checkBrickHit+0x14bc>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	1fda      	subs	r2, r3, #7
 8001bba:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <checkBrickHit+0x14bc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	da00      	bge.n	8001bc6 <checkBrickHit+0x1312>
 8001bc4:	3307      	adds	r3, #7
 8001bc6:	10db      	asrs	r3, r3, #3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	496a      	ldr	r1, [pc, #424]	; (8001d74 <checkBrickHit+0x14c0>)
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4403      	add	r3, r0
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	440b      	add	r3, r1
 8001bda:	3308      	adds	r3, #8
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	f040 80c0 	bne.w	8001d64 <checkBrickHit+0x14b0>
                bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness--;
 8001be4:	4b62      	ldr	r3, [pc, #392]	; (8001d70 <checkBrickHit+0x14bc>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	1fda      	subs	r2, r3, #7
 8001bea:	4b61      	ldr	r3, [pc, #388]	; (8001d70 <checkBrickHit+0x14bc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	da00      	bge.n	8001bf6 <checkBrickHit+0x1342>
 8001bf4:	3307      	adds	r3, #7
 8001bf6:	10db      	asrs	r3, r3, #3
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	485e      	ldr	r0, [pc, #376]	; (8001d74 <checkBrickHit+0x14c0>)
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	440b      	add	r3, r1
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	4403      	add	r3, r0
 8001c0a:	330c      	adds	r3, #12
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	1e58      	subs	r0, r3, #1
 8001c10:	4c58      	ldr	r4, [pc, #352]	; (8001d74 <checkBrickHit+0x14c0>)
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	440b      	add	r3, r1
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	4423      	add	r3, r4
 8001c20:	330c      	adds	r3, #12
 8001c22:	6018      	str	r0, [r3, #0]
                if (bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness <= 0) {
 8001c24:	4b52      	ldr	r3, [pc, #328]	; (8001d70 <checkBrickHit+0x14bc>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	1fda      	subs	r2, r3, #7
 8001c2a:	4b51      	ldr	r3, [pc, #324]	; (8001d70 <checkBrickHit+0x14bc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	da00      	bge.n	8001c36 <checkBrickHit+0x1382>
 8001c34:	3307      	adds	r3, #7
 8001c36:	10db      	asrs	r3, r3, #3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	494e      	ldr	r1, [pc, #312]	; (8001d74 <checkBrickHit+0x14c0>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4403      	add	r3, r0
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	440b      	add	r3, r1
 8001c4a:	330c      	adds	r3, #12
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	dc2a      	bgt.n	8001ca8 <checkBrickHit+0x13f4>
                    bricks[ball.y + 1 - 8][(ball.x - 1)/8].visible = 0;
 8001c52:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <checkBrickHit+0x14bc>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	1fda      	subs	r2, r3, #7
 8001c58:	4b45      	ldr	r3, [pc, #276]	; (8001d70 <checkBrickHit+0x14bc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	da00      	bge.n	8001c64 <checkBrickHit+0x13b0>
 8001c62:	3307      	adds	r3, #7
 8001c64:	10db      	asrs	r3, r3, #3
 8001c66:	4618      	mov	r0, r3
 8001c68:	4942      	ldr	r1, [pc, #264]	; (8001d74 <checkBrickHit+0x14c0>)
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4403      	add	r3, r0
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	440b      	add	r3, r1
 8001c78:	3308      	adds	r3, #8
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
                    points++;
 8001c7e:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <checkBrickHit+0x14c8>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <checkBrickHit+0x14c8>)
 8001c88:	701a      	strb	r2, [r3, #0]
                    ////QD << "score:" << points;
                    dropPowerUp((ball.x - 1)/8, ball.y + 1 - 8);
 8001c8a:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <checkBrickHit+0x14bc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	da00      	bge.n	8001c96 <checkBrickHit+0x13e2>
 8001c94:	3307      	adds	r3, #7
 8001c96:	10db      	asrs	r3, r3, #3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <checkBrickHit+0x14bc>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	3b07      	subs	r3, #7
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	f000 f86c 	bl	8001d80 <dropPowerUp>
                }
                ball.dir = NE;
 8001ca8:	4b31      	ldr	r3, [pc, #196]	; (8001d70 <checkBrickHit+0x14bc>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	721a      	strb	r2, [r3, #8]
                Displ_FillArea(bricks[ball.y + 1 - 8][(ball.x - 1)/8].x*4, bricks[ball.y + 1 - 8][(ball.x - 1)/8].y*4, 32, 4, toughnessColor[bricks[ball.y + 1 - 8][(ball.x - 1)/8].toughness]);
 8001cae:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <checkBrickHit+0x14bc>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	1fda      	subs	r2, r3, #7
 8001cb4:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <checkBrickHit+0x14bc>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	da00      	bge.n	8001cc0 <checkBrickHit+0x140c>
 8001cbe:	3307      	adds	r3, #7
 8001cc0:	10db      	asrs	r3, r3, #3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	492b      	ldr	r1, [pc, #172]	; (8001d74 <checkBrickHit+0x14c0>)
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4403      	add	r3, r0
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	440b      	add	r3, r1
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	b298      	uxth	r0, r3
 8001cdc:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <checkBrickHit+0x14bc>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	1fda      	subs	r2, r3, #7
 8001ce2:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <checkBrickHit+0x14bc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	da00      	bge.n	8001cee <checkBrickHit+0x143a>
 8001cec:	3307      	adds	r3, #7
 8001cee:	10db      	asrs	r3, r3, #3
 8001cf0:	461c      	mov	r4, r3
 8001cf2:	4920      	ldr	r1, [pc, #128]	; (8001d74 <checkBrickHit+0x14c0>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4423      	add	r3, r4
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	440b      	add	r3, r1
 8001d02:	3304      	adds	r3, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	b299      	uxth	r1, r3
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <checkBrickHit+0x14bc>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	1fda      	subs	r2, r3, #7
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <checkBrickHit+0x14bc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	da00      	bge.n	8001d1e <checkBrickHit+0x146a>
 8001d1c:	3307      	adds	r3, #7
 8001d1e:	10db      	asrs	r3, r3, #3
 8001d20:	461d      	mov	r5, r3
 8001d22:	4c14      	ldr	r4, [pc, #80]	; (8001d74 <checkBrickHit+0x14c0>)
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	442b      	add	r3, r5
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	4423      	add	r3, r4
 8001d32:	330c      	adds	r3, #12
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <checkBrickHit+0x14c4>)
 8001d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2304      	movs	r3, #4
 8001d42:	2220      	movs	r2, #32
 8001d44:	f002 ff9e 	bl	8004c84 <Displ_FillArea>
            }
        }
        break;
 8001d48:	e00c      	b.n	8001d64 <checkBrickHit+0x14b0>
    case still:
        break;
    default:
        //////QD << "You shouldn't be here";
        ball.dir = ball.dir;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <checkBrickHit+0x14bc>)
 8001d4c:	7a1a      	ldrb	r2, [r3, #8]
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <checkBrickHit+0x14bc>)
 8001d50:	721a      	strb	r2, [r3, #8]
    }
}
 8001d52:	e008      	b.n	8001d66 <checkBrickHit+0x14b2>
        break;
 8001d54:	bf00      	nop
 8001d56:	e006      	b.n	8001d66 <checkBrickHit+0x14b2>
        break;
 8001d58:	bf00      	nop
 8001d5a:	e004      	b.n	8001d66 <checkBrickHit+0x14b2>
        break;
 8001d5c:	bf00      	nop
 8001d5e:	e002      	b.n	8001d66 <checkBrickHit+0x14b2>
        break;
 8001d60:	bf00      	nop
 8001d62:	e000      	b.n	8001d66 <checkBrickHit+0x14b2>
        break;
 8001d64:	bf00      	nop
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000034 	.word	0x20000034
 8001d74:	200000e8 	.word	0x200000e8
 8001d78:	20000004 	.word	0x20000004
 8001d7c:	20001ee8 	.word	0x20001ee8

08001d80 <dropPowerUp>:

void dropPowerUp(int x, int y) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
    uint8_t dropChance = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
    if (guardian == 0) {
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <dropPowerUp+0x70>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d114      	bne.n	8001dc0 <dropPowerUp+0x40>
        srand(HAL_GetTick());
 8001d96:	f003 fd95 	bl	80058c4 <HAL_GetTick>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f008 fbf7 	bl	800a590 <srand>
        dropChance = rand() % 100;
 8001da2:	f008 fc23 	bl	800a5ec <rand>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <dropPowerUp+0x74>)
 8001daa:	fb82 1203 	smull	r1, r2, r2, r3
 8001dae:	1151      	asrs	r1, r2, #5
 8001db0:	17da      	asrs	r2, r3, #31
 8001db2:	1a8a      	subs	r2, r1, r2
 8001db4:	2164      	movs	r1, #100	; 0x64
 8001db6:	fb01 f202 	mul.w	r2, r1, r2
 8001dba:	1a9a      	subs	r2, r3, r2
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	73fb      	strb	r3, [r7, #15]
    }

    if (dropChance <= 10 && dropChance > 0) {
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	2b0a      	cmp	r3, #10
 8001dc4:	d805      	bhi.n	8001dd2 <dropPowerUp+0x52>
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <dropPowerUp+0x52>
        guardian = 1;
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <dropPowerUp+0x70>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
        //////QD << "A power up just dropped from brick at x =" << x << "y =" << y;
    }

    if (dropChance <= 15 && dropChance > 10) {
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d806      	bhi.n	8001de6 <dropPowerUp+0x66>
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	2b0a      	cmp	r3, #10
 8001ddc:	d903      	bls.n	8001de6 <dropPowerUp+0x66>
        //////QD << "test";
        explodeBricks(x, y);
 8001dde:	6839      	ldr	r1, [r7, #0]
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f8c3 	bl	8001f6c <explodeBricks>
        //////QD << "An explosion just happened at x =" << x << "y =" << y;
    }
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20001eea 	.word	0x20001eea
 8001df4:	51eb851f 	.word	0x51eb851f

08001df8 <printScreen>:

void printScreen() {
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	b08b      	sub	sp, #44	; 0x2c
 8001dfc:	af06      	add	r7, sp, #24
    for (int i = 0; i < lives1; i++) {
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e00f      	b.n	8001e24 <printScreen+0x2c>
        Displ_FillArea(SCREEN_WIDTH*4 - 8 - (i*8), 4, 4, 4, D_BLUE);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	b298      	uxth	r0, r3
 8001e10:	2318      	movs	r3, #24
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2304      	movs	r3, #4
 8001e16:	2204      	movs	r2, #4
 8001e18:	2104      	movs	r1, #4
 8001e1a:	f002 ff33 	bl	8004c84 <Displ_FillArea>
    for (int i = 0; i < lives1; i++) {
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3301      	adds	r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	4b31      	ldr	r3, [pc, #196]	; (8001eec <printScreen+0xf4>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	dbe9      	blt.n	8001e04 <printScreen+0xc>
    }

    if (guardian == 1) {
 8001e30:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <printScreen+0xf8>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d10e      	bne.n	8001e56 <printScreen+0x5e>
        Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, GREY);
 8001e38:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <printScreen+0xfc>)
 8001e3a:	785b      	ldrb	r3, [r3, #1]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	b299      	uxth	r1, r3
 8001e44:	f249 6396 	movw	r3, #38550	; 0x9696
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e50:	2000      	movs	r0, #0
 8001e52:	f002 ff17 	bl	8004c84 <Displ_FillArea>
//                    game_screen[i][y] = ENC_RED;
//                }
//            }
//        }
//    }
    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, RED);
 8001e56:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <printScreen+0xfc>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	3b19      	subs	r3, #25
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	b298      	uxth	r0, r3
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <printScreen+0xfc>)
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	b299      	uxth	r1, r3
 8001e6c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2304      	movs	r3, #4
 8001e74:	22c8      	movs	r2, #200	; 0xc8
 8001e76:	f002 ff05 	bl	8004c84 <Displ_FillArea>
//
//    game_screen[ball.x][ball.y] = ENC_BLUE;
    Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_BLUE);
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <printScreen+0x100>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	b298      	uxth	r0, r3
 8001e84:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <printScreen+0x100>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	b299      	uxth	r1, r3
 8001e8e:	2318      	movs	r3, #24
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2304      	movs	r3, #4
 8001e94:	2204      	movs	r2, #4
 8001e96:	f002 fef5 	bl	8004c84 <Displ_FillArea>

    char str[12];
    snprintf(str, 12, "%u", points);
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <printScreen+0x104>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4638      	mov	r0, r7
 8001ea0:	4a17      	ldr	r2, [pc, #92]	; (8001f00 <printScreen+0x108>)
 8001ea2:	210c      	movs	r1, #12
 8001ea4:	f008 fbe0 	bl	800a668 <sniprintf>
    Displ_WString(score.x*4, score.y, str, Font16, 1, WHITE, D_GREEN);
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <printScreen+0x10c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	b29c      	uxth	r4, r3
 8001eb2:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <printScreen+0x10c>)
 8001eb4:	785b      	ldrb	r3, [r3, #1]
 8001eb6:	b29d      	uxth	r5, r3
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <printScreen+0x110>)
 8001eba:	463e      	mov	r6, r7
 8001ebc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001ec0:	9204      	str	r2, [sp, #16]
 8001ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec6:	9203      	str	r2, [sp, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	9202      	str	r2, [sp, #8]
 8001ecc:	46ec      	mov	ip, sp
 8001ece:	1d1a      	adds	r2, r3, #4
 8001ed0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ed4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4632      	mov	r2, r6
 8001edc:	4629      	mov	r1, r5
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f003 fc2c 	bl	800573c <Displ_WString>
    //displayText(game_screen, str, score.x, score.y, WHITE);
    //snprintf(str, 12, "%u", highScore);
    //displayText(game_screen, str, highScorePoint.x, highScorePoint.y, WHITE);
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eec:	20000002 	.word	0x20000002
 8001ef0:	20001eea 	.word	0x20001eea
 8001ef4:	20000030 	.word	0x20000030
 8001ef8:	20000034 	.word	0x20000034
 8001efc:	20001ee8 	.word	0x20001ee8
 8001f00:	0800bbb0 	.word	0x0800bbb0
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000014 	.word	0x20000014

08001f0c <checkGuardianTimer>:

void checkGuardianTimer() {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af02      	add	r7, sp, #8
    if (guardian == 1) {
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <checkGuardianTimer+0x54>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d11f      	bne.n	8001f5a <checkGuardianTimer+0x4e>
        if (guardianTimer <= 0) {
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <checkGuardianTimer+0x58>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d115      	bne.n	8001f4e <checkGuardianTimer+0x42>
            guardian = 0;
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <checkGuardianTimer+0x54>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
            guardianTimer = 100;
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <checkGuardianTimer+0x58>)
 8001f2a:	2264      	movs	r2, #100	; 0x64
 8001f2c:	701a      	strb	r2, [r3, #0]
            Displ_FillArea(0, (person.y - 1)*4, SCREEN_WIDTH*4, 4, D_GREEN);
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <checkGuardianTimer+0x5c>)
 8001f30:	785b      	ldrb	r3, [r3, #1]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	b299      	uxth	r1, r3
 8001f3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	2304      	movs	r3, #4
 8001f42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f46:	2000      	movs	r0, #0
 8001f48:	f002 fe9c 	bl	8004c84 <Displ_FillArea>
        } else {
            guardianTimer--;
        }
    }
}
 8001f4c:	e005      	b.n	8001f5a <checkGuardianTimer+0x4e>
            guardianTimer--;
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <checkGuardianTimer+0x58>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <checkGuardianTimer+0x58>)
 8001f58:	701a      	strb	r2, [r3, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20001eea 	.word	0x20001eea
 8001f64:	20000003 	.word	0x20000003
 8001f68:	20000030 	.word	0x20000030

08001f6c <explodeBricks>:

void explodeBricks(int x, int y) {
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
    int ymin = y - 1;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	61fb      	str	r3, [r7, #28]
    int xmin = x - 1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	61bb      	str	r3, [r7, #24]
    int ymax = y + 1;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	3301      	adds	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
    int xmax = x + 1;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	613b      	str	r3, [r7, #16]
    if(y == 0) {
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <explodeBricks+0x2c>
        ymin = y;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	61fb      	str	r3, [r7, #28]
    }
    if(y == MAX_BRICK_LINES) {
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b30      	cmp	r3, #48	; 0x30
 8001f9c:	d101      	bne.n	8001fa2 <explodeBricks+0x36>
        ymax = y;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	617b      	str	r3, [r7, #20]
    }
    if(x == 0) {
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <explodeBricks+0x40>
        xmin = x;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	61bb      	str	r3, [r7, #24]
    }
    if(x == 10) {
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b0a      	cmp	r3, #10
 8001fb0:	d101      	bne.n	8001fb6 <explodeBricks+0x4a>
        xmax = x;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	613b      	str	r3, [r7, #16]
    }


    for(int i = ymin; i <= ymax; i++) {
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	e03a      	b.n	8002032 <explodeBricks+0xc6>
        for(int j = xmin; j <= xmax; j++) {
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	e030      	b.n	8002024 <explodeBricks+0xb8>
            if(bricks[i][j].visible == 1) {
 8001fc2:	4921      	ldr	r1, [pc, #132]	; (8002048 <explodeBricks+0xdc>)
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3308      	adds	r3, #8
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d11f      	bne.n	800201e <explodeBricks+0xb2>
                bricks[i][j].toughness = 0;
 8001fde:	491a      	ldr	r1, [pc, #104]	; (8002048 <explodeBricks+0xdc>)
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	4413      	add	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	440b      	add	r3, r1
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
                bricks[i][j].visible = 0;
 8001ff8:	4913      	ldr	r1, [pc, #76]	; (8002048 <explodeBricks+0xdc>)
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	4413      	add	r3, r2
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	440b      	add	r3, r1
 800200c:	3308      	adds	r3, #8
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
                points++;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <explodeBricks+0xe0>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <explodeBricks+0xe0>)
 800201c:	701a      	strb	r2, [r3, #0]
        for(int j = xmin; j <= xmax; j++) {
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3301      	adds	r3, #1
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	ddca      	ble.n	8001fc2 <explodeBricks+0x56>
    for(int i = ymin; i <= ymax; i++) {
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3301      	adds	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	429a      	cmp	r2, r3
 8002038:	ddc0      	ble.n	8001fbc <explodeBricks+0x50>
            }
        }
    }
}
 800203a:	bf00      	nop
 800203c:	bf00      	nop
 800203e:	3724      	adds	r7, #36	; 0x24
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	200000e8 	.word	0x200000e8
 800204c:	20001ee8 	.word	0x20001ee8

08002050 <setBrickToughness>:

int setBrickToughness(void) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
    int toughnessPercent;
    int toughness = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	607b      	str	r3, [r7, #4]

    toughnessPercent = rand() % (100) + 1;
 800205a:	f008 fac7 	bl	800a5ec <rand>
 800205e:	4602      	mov	r2, r0
 8002060:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <setBrickToughness+0x68>)
 8002062:	fb83 1302 	smull	r1, r3, r3, r2
 8002066:	1159      	asrs	r1, r3, #5
 8002068:	17d3      	asrs	r3, r2, #31
 800206a:	1acb      	subs	r3, r1, r3
 800206c:	2164      	movs	r1, #100	; 0x64
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	3301      	adds	r3, #1
 8002076:	603b      	str	r3, [r7, #0]

    if(toughnessPercent > 0 && toughnessPercent <= 60) {
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	dd05      	ble.n	800208a <setBrickToughness+0x3a>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b3c      	cmp	r3, #60	; 0x3c
 8002082:	dc02      	bgt.n	800208a <setBrickToughness+0x3a>
        toughness = 1;
 8002084:	2301      	movs	r3, #1
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	e010      	b.n	80020ac <setBrickToughness+0x5c>
    } else if(toughnessPercent > 60 && toughnessPercent < 90) {
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b3c      	cmp	r3, #60	; 0x3c
 800208e:	dd05      	ble.n	800209c <setBrickToughness+0x4c>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2b59      	cmp	r3, #89	; 0x59
 8002094:	dc02      	bgt.n	800209c <setBrickToughness+0x4c>
        toughness = 2;
 8002096:	2302      	movs	r3, #2
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	e007      	b.n	80020ac <setBrickToughness+0x5c>
    } else if(toughnessPercent > 90 && toughnessPercent < 100) {
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	2b5a      	cmp	r3, #90	; 0x5a
 80020a0:	dd04      	ble.n	80020ac <setBrickToughness+0x5c>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b63      	cmp	r3, #99	; 0x63
 80020a6:	dc01      	bgt.n	80020ac <setBrickToughness+0x5c>
        toughness = 3;
 80020a8:	2303      	movs	r3, #3
 80020aa:	607b      	str	r3, [r7, #4]
    }

    return toughness;
 80020ac:	687b      	ldr	r3, [r7, #4]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	51eb851f 	.word	0x51eb851f

080020bc <drawBricks>:

void drawBricks() {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af02      	add	r7, sp, #8
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	e0b0      	b.n	800222a <drawBricks+0x16e>
        for(int j = 0; j < 10; j++) {
 80020c8:	2300      	movs	r3, #0
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	e0a6      	b.n	800221c <drawBricks+0x160>
            if(bricks[i][j].visible == 1) {
 80020ce:	495b      	ldr	r1, [pc, #364]	; (800223c <drawBricks+0x180>)
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	4413      	add	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	440b      	add	r3, r1
 80020e2:	3308      	adds	r3, #8
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	f040 8095 	bne.w	8002216 <drawBricks+0x15a>
                if (bricks[i][j].toughness == 3) {
 80020ec:	4953      	ldr	r1, [pc, #332]	; (800223c <drawBricks+0x180>)
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	440b      	add	r3, r1
 8002100:	330c      	adds	r3, #12
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d122      	bne.n	800214e <drawBricks+0x92>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, BLACK);
 8002108:	494c      	ldr	r1, [pc, #304]	; (800223c <drawBricks+0x180>)
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	4413      	add	r3, r2
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	440b      	add	r3, r1
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	b298      	uxth	r0, r3
 8002124:	4945      	ldr	r1, [pc, #276]	; (800223c <drawBricks+0x180>)
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	4413      	add	r3, r2
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	440b      	add	r3, r1
 8002138:	3304      	adds	r3, #4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	b29b      	uxth	r3, r3
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	b299      	uxth	r1, r3
 8002142:	2300      	movs	r3, #0
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2304      	movs	r3, #4
 8002148:	2220      	movs	r2, #32
 800214a:	f002 fd9b 	bl	8004c84 <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 2) {
 800214e:	493b      	ldr	r1, [pc, #236]	; (800223c <drawBricks+0x180>)
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	4413      	add	r3, r2
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	440b      	add	r3, r1
 8002162:	330c      	adds	r3, #12
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d123      	bne.n	80021b2 <drawBricks+0xf6>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, DARK_GREY);
 800216a:	4934      	ldr	r1, [pc, #208]	; (800223c <drawBricks+0x180>)
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	4413      	add	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	440b      	add	r3, r1
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	b298      	uxth	r0, r3
 8002186:	492d      	ldr	r1, [pc, #180]	; (800223c <drawBricks+0x180>)
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	4413      	add	r3, r2
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	440b      	add	r3, r1
 800219a:	3304      	adds	r3, #4
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	b299      	uxth	r1, r3
 80021a4:	f642 432c 	movw	r3, #11308	; 0x2c2c
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2304      	movs	r3, #4
 80021ac:	2220      	movs	r2, #32
 80021ae:	f002 fd69 	bl	8004c84 <Displ_FillArea>
                }
                if (bricks[i][j].toughness == 1) {
 80021b2:	4922      	ldr	r1, [pc, #136]	; (800223c <drawBricks+0x180>)
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	440b      	add	r3, r1
 80021c6:	330c      	adds	r3, #12
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d123      	bne.n	8002216 <drawBricks+0x15a>
                    Displ_FillArea(bricks[i][j].x*4, bricks[i][j].y*4, 32, 4, GREY);
 80021ce:	491b      	ldr	r1, [pc, #108]	; (800223c <drawBricks+0x180>)
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	4413      	add	r3, r2
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	440b      	add	r3, r1
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	b298      	uxth	r0, r3
 80021ea:	4914      	ldr	r1, [pc, #80]	; (800223c <drawBricks+0x180>)
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	4413      	add	r3, r2
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	440b      	add	r3, r1
 80021fe:	3304      	adds	r3, #4
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	b299      	uxth	r1, r3
 8002208:	f249 6396 	movw	r3, #38550	; 0x9696
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2304      	movs	r3, #4
 8002210:	2220      	movs	r2, #32
 8002212:	f002 fd37 	bl	8004c84 <Displ_FillArea>
        for(int j = 0; j < 10; j++) {
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b09      	cmp	r3, #9
 8002220:	f77f af55 	ble.w	80020ce <drawBricks+0x12>
    for (int i = 0; i < MAX_BRICK_LINES; i++) {
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3301      	adds	r3, #1
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b2f      	cmp	r3, #47	; 0x2f
 800222e:	f77f af4b 	ble.w	80020c8 <drawBricks+0xc>
                }
            }
        }
    }
}
 8002232:	bf00      	nop
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200000e8 	.word	0x200000e8

08002240 <_write>:
#include "debug.h"

// Declare external UART handle
extern UART_HandleTypeDef huart3;

int _write(int file, char *ptr, int len) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3b01      	subs	r3, #1
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8002250:	2b01      	cmp	r3, #1
 8002252:	d814      	bhi.n	800227e <_write+0x3e>
    case STDOUT_FILENO: /*stdout*/
    case STDERR_FILENO: /*stderr*/
        xStatus = HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	b29a      	uxth	r2, r3
 8002258:	f04f 33ff 	mov.w	r3, #4294967295
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	480f      	ldr	r0, [pc, #60]	; (800229c <_write+0x5c>)
 8002260:	f007 f9ac 	bl	80095bc <HAL_UART_Transmit>
 8002264:	4603      	mov	r3, r0
 8002266:	75fb      	strb	r3, [r7, #23]
        if (xStatus != HAL_OK) {
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00f      	beq.n	800228e <_write+0x4e>
            errno = EIO;
 800226e:	f008 f8cf 	bl	800a410 <__errno>
 8002272:	4603      	mov	r3, r0
 8002274:	2205      	movs	r2, #5
 8002276:	601a      	str	r2, [r3, #0]
            return -1;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295
 800227c:	e009      	b.n	8002292 <_write+0x52>
        }
        break;
    default:
        errno = EBADF;
 800227e:	f008 f8c7 	bl	800a410 <__errno>
 8002282:	4603      	mov	r3, r0
 8002284:	2209      	movs	r2, #9
 8002286:	601a      	str	r2, [r3, #0]
        return -1;
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
 800228c:	e001      	b.n	8002292 <_write+0x52>
        break;
 800228e:	bf00      	nop
    }
    return len;
 8002290:	687b      	ldr	r3, [r7, #4]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20002074 	.word	0x20002074

080022a0 <init>:
ballPoint ball = {(SCREEN_WIDTH)/2, SCREEN_HEIGHT - 6, still};
uint8_t start = 0;
uint8_t delay = BRICK_SPEED;
directions ballDirection = NE;

void init (void) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
    choice = 0;
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <init+0x28>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
    if(gamechoice == 1){
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <init+0x2c>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d102      	bne.n	80022b8 <init+0x18>
        initSpaceInvaders();
 80022b2:	f001 f88f 	bl	80033d4 <initSpaceInvaders>
    }else if(gamechoice == 2){
        initBrickbreaker();
    }


}
 80022b6:	e005      	b.n	80022c4 <init+0x24>
    }else if(gamechoice == 2){
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <init+0x2c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d101      	bne.n	80022c4 <init+0x24>
        initBrickbreaker();
 80022c0:	f7fd ffde 	bl	8000280 <initBrickbreaker>
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20001eec 	.word	0x20001eec
 80022cc:	20001eed 	.word	0x20001eed

080022d0 <loop>:

int loop (int key) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	6078      	str	r0, [r7, #4]
    updateScreen();
 80022d8:	f000 fa24 	bl	8002724 <updateScreen>
    if (play == menu){
 80022dc:	4b95      	ldr	r3, [pc, #596]	; (8002534 <loop+0x264>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d104      	bne.n	80022ee <loop+0x1e>
        max_choice = total_games;
 80022e4:	4b94      	ldr	r3, [pc, #592]	; (8002538 <loop+0x268>)
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	4b94      	ldr	r3, [pc, #592]	; (800253c <loop+0x26c>)
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	e002      	b.n	80022f4 <loop+0x24>
    }else{
        max_choice = 1;
 80022ee:	4b93      	ldr	r3, [pc, #588]	; (800253c <loop+0x26c>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
    }
    if(key == left) {
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d159      	bne.n	80023ae <loop+0xde>
        if(play < paused){
 80022fa:	4b8e      	ldr	r3, [pc, #568]	; (8002534 <loop+0x264>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d849      	bhi.n	8002396 <loop+0xc6>
        	if(gamechoice == 1){
 8002302:	4b8f      	ldr	r3, [pc, #572]	; (8002540 <loop+0x270>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d104      	bne.n	8002314 <loop+0x44>
        		moveSpaceship(-1);
 800230a:	f04f 30ff 	mov.w	r0, #4294967295
 800230e:	f001 fcef 	bl	8003cf0 <moveSpaceship>
 8002312:	e040      	b.n	8002396 <loop+0xc6>
        	}else if(gamechoice == 2) {
 8002314:	4b8a      	ldr	r3, [pc, #552]	; (8002540 <loop+0x270>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d13c      	bne.n	8002396 <loop+0xc6>
        	    Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 800231c:	4b89      	ldr	r3, [pc, #548]	; (8002544 <loop+0x274>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	3b19      	subs	r3, #25
 8002322:	b29b      	uxth	r3, r3
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	b298      	uxth	r0, r3
 8002328:	4b86      	ldr	r3, [pc, #536]	; (8002544 <loop+0x274>)
 800232a:	785b      	ldrb	r3, [r3, #1]
 800232c:	b29b      	uxth	r3, r3
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	b299      	uxth	r1, r3
 8002332:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2304      	movs	r3, #4
 800233a:	22c8      	movs	r2, #200	; 0xc8
 800233c:	f002 fca2 	bl	8004c84 <Displ_FillArea>
                person.x--;
 8002340:	4b80      	ldr	r3, [pc, #512]	; (8002544 <loop+0x274>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	3b01      	subs	r3, #1
 8002346:	b2da      	uxtb	r2, r3
 8002348:	4b7e      	ldr	r3, [pc, #504]	; (8002544 <loop+0x274>)
 800234a:	701a      	strb	r2, [r3, #0]
                if(person.x < BAR_SIZE/2) {
 800234c:	4b7d      	ldr	r3, [pc, #500]	; (8002544 <loop+0x274>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b18      	cmp	r3, #24
 8002352:	d803      	bhi.n	800235c <loop+0x8c>
                    person.x = (BAR_SIZE/2);
 8002354:	4b7b      	ldr	r3, [pc, #492]	; (8002544 <loop+0x274>)
 8002356:	2219      	movs	r2, #25
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	e01c      	b.n	8002396 <loop+0xc6>
                } else {
                    if (ball.dir == still) {
 800235c:	4b7a      	ldr	r3, [pc, #488]	; (8002548 <loop+0x278>)
 800235e:	7a1b      	ldrb	r3, [r3, #8]
 8002360:	2b08      	cmp	r3, #8
 8002362:	d118      	bne.n	8002396 <loop+0xc6>
                        Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 8002364:	4b78      	ldr	r3, [pc, #480]	; (8002548 <loop+0x278>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	b29b      	uxth	r3, r3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	b298      	uxth	r0, r3
 800236e:	4b76      	ldr	r3, [pc, #472]	; (8002548 <loop+0x278>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	b29b      	uxth	r3, r3
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	b299      	uxth	r1, r3
 8002378:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2304      	movs	r3, #4
 8002380:	2204      	movs	r2, #4
 8002382:	f002 fc7f 	bl	8004c84 <Displ_FillArea>
                        ball.x--;
 8002386:	4b70      	ldr	r3, [pc, #448]	; (8002548 <loop+0x278>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3b01      	subs	r3, #1
 800238c:	4a6e      	ldr	r2, [pc, #440]	; (8002548 <loop+0x278>)
 800238e:	6013      	str	r3, [r2, #0]
                        ballDirection = NW;
 8002390:	4b6e      	ldr	r3, [pc, #440]	; (800254c <loop+0x27c>)
 8002392:	2207      	movs	r2, #7
 8002394:	701a      	strb	r2, [r3, #0]
                    }
                }
        	}
        }
        if (choice != 0){
 8002396:	4b6e      	ldr	r3, [pc, #440]	; (8002550 <loop+0x280>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <loop+0xda>
        	choice--;
 800239e:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <loop+0x280>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b6a      	ldr	r3, [pc, #424]	; (8002550 <loop+0x280>)
 80023a8:	701a      	strb	r2, [r3, #0]
        }

        key = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
    }
    if(key == right) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d159      	bne.n	8002468 <loop+0x198>
    	if(play < paused){
 80023b4:	4b5f      	ldr	r3, [pc, #380]	; (8002534 <loop+0x264>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d847      	bhi.n	800244c <loop+0x17c>
    		if(gamechoice == 1){
 80023bc:	4b60      	ldr	r3, [pc, #384]	; (8002540 <loop+0x270>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d103      	bne.n	80023cc <loop+0xfc>
    			moveSpaceship(1);
 80023c4:	2001      	movs	r0, #1
 80023c6:	f001 fc93 	bl	8003cf0 <moveSpaceship>
 80023ca:	e03f      	b.n	800244c <loop+0x17c>
    		}else if (gamechoice == 2) {
 80023cc:	4b5c      	ldr	r3, [pc, #368]	; (8002540 <loop+0x270>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d13b      	bne.n	800244c <loop+0x17c>
    			Displ_FillArea(person.x*4 - BAR_SIZE*2, person.y*4, BAR_SIZE*4, 4, D_GREEN);
 80023d4:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <loop+0x274>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	3b19      	subs	r3, #25
 80023da:	b29b      	uxth	r3, r3
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	b298      	uxth	r0, r3
 80023e0:	4b58      	ldr	r3, [pc, #352]	; (8002544 <loop+0x274>)
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	b299      	uxth	r1, r3
 80023ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2304      	movs	r3, #4
 80023f2:	22c8      	movs	r2, #200	; 0xc8
 80023f4:	f002 fc46 	bl	8004c84 <Displ_FillArea>
    			person.x++;
 80023f8:	4b52      	ldr	r3, [pc, #328]	; (8002544 <loop+0x274>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	4b50      	ldr	r3, [pc, #320]	; (8002544 <loop+0x274>)
 8002402:	701a      	strb	r2, [r3, #0]
    			if(person.x > SCREEN_WIDTH - (BAR_SIZE/2) - 1) {
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <loop+0x274>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b36      	cmp	r3, #54	; 0x36
 800240a:	d902      	bls.n	8002412 <loop+0x142>
    				person.x = SCREEN_WIDTH - (BAR_SIZE/2) - 1;
 800240c:	4b4d      	ldr	r3, [pc, #308]	; (8002544 <loop+0x274>)
 800240e:	2236      	movs	r2, #54	; 0x36
 8002410:	701a      	strb	r2, [r3, #0]
    			}
    			if (ball.dir == still) {
 8002412:	4b4d      	ldr	r3, [pc, #308]	; (8002548 <loop+0x278>)
 8002414:	7a1b      	ldrb	r3, [r3, #8]
 8002416:	2b08      	cmp	r3, #8
 8002418:	d118      	bne.n	800244c <loop+0x17c>
    				Displ_FillArea(ball.x*4, ball.y*4, 4, 4, D_GREEN);
 800241a:	4b4b      	ldr	r3, [pc, #300]	; (8002548 <loop+0x278>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	b298      	uxth	r0, r3
 8002424:	4b48      	ldr	r3, [pc, #288]	; (8002548 <loop+0x278>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	b29b      	uxth	r3, r3
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	b299      	uxth	r1, r3
 800242e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2304      	movs	r3, #4
 8002436:	2204      	movs	r2, #4
 8002438:	f002 fc24 	bl	8004c84 <Displ_FillArea>
    				ball.x++;
 800243c:	4b42      	ldr	r3, [pc, #264]	; (8002548 <loop+0x278>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3301      	adds	r3, #1
 8002442:	4a41      	ldr	r2, [pc, #260]	; (8002548 <loop+0x278>)
 8002444:	6013      	str	r3, [r2, #0]
    				ballDirection = NE;
 8002446:	4b41      	ldr	r3, [pc, #260]	; (800254c <loop+0x27c>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
    			}
    		}
    	}
    	if (choice != max_choice){
 800244c:	4b40      	ldr	r3, [pc, #256]	; (8002550 <loop+0x280>)
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	4b3a      	ldr	r3, [pc, #232]	; (800253c <loop+0x26c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d005      	beq.n	8002464 <loop+0x194>
    		choice++;
 8002458:	4b3d      	ldr	r3, [pc, #244]	; (8002550 <loop+0x280>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	3301      	adds	r3, #1
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <loop+0x280>)
 8002462:	701a      	strb	r2, [r3, #0]
    	}
    	key = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	607b      	str	r3, [r7, #4]
    }
    if(key == down){
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b04      	cmp	r3, #4
 800246c:	f040 80bd 	bne.w	80025ea <loop+0x31a>
        if (play == notPlay){
 8002470:	4b30      	ldr	r3, [pc, #192]	; (8002534 <loop+0x264>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10c      	bne.n	8002492 <loop+0x1c2>
        	Displ_FillArea(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, 140, 20, DARK_GREY);
 8002478:	f642 432c 	movw	r3, #11308	; 0x2c2c
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2314      	movs	r3, #20
 8002480:	228c      	movs	r2, #140	; 0x8c
 8002482:	2178      	movs	r1, #120	; 0x78
 8002484:	205a      	movs	r0, #90	; 0x5a
 8002486:	f002 fbfd 	bl	8004c84 <Displ_FillArea>
            play = inPlay;
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <loop+0x264>)
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e0a9      	b.n	80025e6 <loop+0x316>
        }else if(play == inPlay) {
 8002492:	4b28      	ldr	r3, [pc, #160]	; (8002534 <loop+0x264>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d115      	bne.n	80024c6 <loop+0x1f6>
            if (ball.dir == still) {
 800249a:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <loop+0x278>)
 800249c:	7a1b      	ldrb	r3, [r3, #8]
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d108      	bne.n	80024b4 <loop+0x1e4>
                ball.dir = ballDirection;
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <loop+0x27c>)
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	4b28      	ldr	r3, [pc, #160]	; (8002548 <loop+0x278>)
 80024a8:	721a      	strb	r2, [r3, #8]
                start = 1;
 80024aa:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <loop+0x284>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
                playBall();
 80024b0:	f7fd ff84 	bl	80003bc <playBall>
            }
            if(!hit){                  //not sure if this was yours or I added for fixing bug
 80024b4:	4b28      	ldr	r3, [pc, #160]	; (8002558 <loop+0x288>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 8094 	bne.w	80025e6 <loop+0x316>
                spawnBullet(0);
 80024be:	2000      	movs	r0, #0
 80024c0:	f001 f8d2 	bl	8003668 <spawnBullet>
 80024c4:	e08f      	b.n	80025e6 <loop+0x316>
            }
        }else if(play == paused){
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <loop+0x264>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d11c      	bne.n	8002508 <loop+0x238>
            if(choice == 0){
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <loop+0x280>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d108      	bne.n	80024e8 <loop+0x218>
                play = menu;
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <loop+0x264>)
 80024d8:	2203      	movs	r2, #3
 80024da:	701a      	strb	r2, [r3, #0]
                gamechoice = 0;
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <loop+0x270>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
                init();
 80024e2:	f7ff fedd 	bl	80022a0 <init>
 80024e6:	e07e      	b.n	80025e6 <loop+0x316>
            }
            else if(choice == 1){
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <loop+0x280>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d107      	bne.n	8002500 <loop+0x230>
            	displayPauseMenu(1);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f000 fcc3 	bl	8002e7c <displayPauseMenu>
                play = last_state;
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <loop+0x28c>)
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <loop+0x264>)
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	e072      	b.n	80025e6 <loop+0x316>
            }else{
                displayPauseMenu(0);
 8002500:	2000      	movs	r0, #0
 8002502:	f000 fcbb 	bl	8002e7c <displayPauseMenu>
 8002506:	e06e      	b.n	80025e6 <loop+0x316>
            }

        }else if(play == menu){
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <loop+0x264>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d163      	bne.n	80025d8 <loop+0x308>
            if(choice == 0){
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <loop+0x280>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d134      	bne.n	8002582 <loop+0x2b2>
                //toggle_multiplayer();
                if(returnConnection() == 0) {
 8002518:	f000 ff0e 	bl	8003338 <returnConnection>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d122      	bne.n	8002568 <loop+0x298>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"Play?", strlen("Play?"), 300);
 8002522:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002526:	2205      	movs	r2, #5
 8002528:	490d      	ldr	r1, [pc, #52]	; (8002560 <loop+0x290>)
 800252a:	480e      	ldr	r0, [pc, #56]	; (8002564 <loop+0x294>)
 800252c:	f007 f846 	bl	80095bc <HAL_UART_Transmit>
 8002530:	e059      	b.n	80025e6 <loop+0x316>
 8002532:	bf00      	nop
 8002534:	2000004a 	.word	0x2000004a
 8002538:	20000044 	.word	0x20000044
 800253c:	2000002d 	.word	0x2000002d
 8002540:	20001eed 	.word	0x20001eed
 8002544:	20000030 	.word	0x20000030
 8002548:	20000034 	.word	0x20000034
 800254c:	20000041 	.word	0x20000041
 8002550:	20001eec 	.word	0x20001eec
 8002554:	20001eef 	.word	0x20001eef
 8002558:	20001eeb 	.word	0x20001eeb
 800255c:	20001eee 	.word	0x20001eee
 8002560:	0800bbb4 	.word	0x0800bbb4
 8002564:	20001fec 	.word	0x20001fec
                } else if(returnConnection() == 1) {
 8002568:	f000 fee6 	bl	8003338 <returnConnection>
 800256c:	4603      	mov	r3, r0
 800256e:	2b01      	cmp	r3, #1
 8002570:	d039      	beq.n	80025e6 <loop+0x316>
                    //HAL_UART_Transmit(&huart2, (uint8_t *)"")
                } else {
                    HAL_UART_Transmit(&huart2, (uint8_t *)"Hello", strlen("Hello"), 300);
 8002572:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002576:	2205      	movs	r2, #5
 8002578:	495d      	ldr	r1, [pc, #372]	; (80026f0 <loop+0x420>)
 800257a:	485e      	ldr	r0, [pc, #376]	; (80026f4 <loop+0x424>)
 800257c:	f007 f81e 	bl	80095bc <HAL_UART_Transmit>
 8002580:	e031      	b.n	80025e6 <loop+0x316>
                }

            }else if(choice == 1){
 8002582:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <loop+0x428>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d10f      	bne.n	80025aa <loop+0x2da>
                gamechoice = 2;
 800258a:	4b5c      	ldr	r3, [pc, #368]	; (80026fc <loop+0x42c>)
 800258c:	2202      	movs	r2, #2
 800258e:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 8002590:	4b5b      	ldr	r3, [pc, #364]	; (8002700 <loop+0x430>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart2, (uint8_t *)"2G", strlen("2G"), 300);
 8002596:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800259a:	2202      	movs	r2, #2
 800259c:	4959      	ldr	r1, [pc, #356]	; (8002704 <loop+0x434>)
 800259e:	4855      	ldr	r0, [pc, #340]	; (80026f4 <loop+0x424>)
 80025a0:	f007 f80c 	bl	80095bc <HAL_UART_Transmit>
                init();
 80025a4:	f7ff fe7c 	bl	80022a0 <init>
 80025a8:	e01d      	b.n	80025e6 <loop+0x316>
            }
            else if(choice == 2){
 80025aa:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <loop+0x428>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d10f      	bne.n	80025d2 <loop+0x302>
                gamechoice = 1;
 80025b2:	4b52      	ldr	r3, [pc, #328]	; (80026fc <loop+0x42c>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
                play = notPlay;
 80025b8:	4b51      	ldr	r3, [pc, #324]	; (8002700 <loop+0x430>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart2, (uint8_t *)"1G", strlen("1G"), 300);
 80025be:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80025c2:	2202      	movs	r2, #2
 80025c4:	4950      	ldr	r1, [pc, #320]	; (8002708 <loop+0x438>)
 80025c6:	484b      	ldr	r0, [pc, #300]	; (80026f4 <loop+0x424>)
 80025c8:	f006 fff8 	bl	80095bc <HAL_UART_Transmit>
                init();
 80025cc:	f7ff fe68 	bl	80022a0 <init>
 80025d0:	e009      	b.n	80025e6 <loop+0x316>
            }else{
                displayMenu();
 80025d2:	f000 fcb5 	bl	8002f40 <displayMenu>
 80025d6:	e006      	b.n	80025e6 <loop+0x316>
            }
        }
        else if(!hit){
 80025d8:	4b4c      	ldr	r3, [pc, #304]	; (800270c <loop+0x43c>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <loop+0x316>
            spawnBullet(0);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f001 f841 	bl	8003668 <spawnBullet>
        }
        key = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
    }
    if(key == up && play < 2){
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d112      	bne.n	8002616 <loop+0x346>
 80025f0:	4b43      	ldr	r3, [pc, #268]	; (8002700 <loop+0x430>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d80e      	bhi.n	8002616 <loop+0x346>
    	last_state = play;
 80025f8:	4b41      	ldr	r3, [pc, #260]	; (8002700 <loop+0x430>)
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	4b44      	ldr	r3, [pc, #272]	; (8002710 <loop+0x440>)
 80025fe:	701a      	strb	r2, [r3, #0]
        play = paused;
 8002600:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <loop+0x430>)
 8002602:	2202      	movs	r2, #2
 8002604:	701a      	strb	r2, [r3, #0]
        choice = 1;
 8002606:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <loop+0x428>)
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
        last_choice_pause = 40;
 800260c:	4b41      	ldr	r3, [pc, #260]	; (8002714 <loop+0x444>)
 800260e:	2228      	movs	r2, #40	; 0x28
 8002610:	701a      	strb	r2, [r3, #0]
        key = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	607b      	str	r3, [r7, #4]
    }

    if(play == inPlay){
 8002616:	4b3a      	ldr	r3, [pc, #232]	; (8002700 <loop+0x430>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d132      	bne.n	8002684 <loop+0x3b4>
    	if(gamechoice == 1){
 800261e:	4b37      	ldr	r3, [pc, #220]	; (80026fc <loop+0x42c>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10a      	bne.n	800263c <loop+0x36c>
    		spawnComet();
 8002626:	f000 ff99 	bl	800355c <spawnComet>
    		delayBullet();
 800262a:	f001 fe01 	bl	8004230 <delayBullet>
    		moveComets();
 800262e:	f001 f9f3 	bl	8003a18 <moveComets>
    		moveBullets();
 8002632:	f001 f8c3 	bl	80037bc <moveBullets>
    		moveEnemyBullets();
 8002636:	f001 f935 	bl	80038a4 <moveEnemyBullets>
 800263a:	e021      	b.n	8002680 <loop+0x3b0>
    	}else if(gamechoice == 2) {
 800263c:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <loop+0x42c>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d11d      	bne.n	8002680 <loop+0x3b0>
            if (start == 1 && ball.dir != still) {
 8002644:	4b34      	ldr	r3, [pc, #208]	; (8002718 <loop+0x448>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d115      	bne.n	8002678 <loop+0x3a8>
 800264c:	4b33      	ldr	r3, [pc, #204]	; (800271c <loop+0x44c>)
 800264e:	7a1b      	ldrb	r3, [r3, #8]
 8002650:	2b08      	cmp	r3, #8
 8002652:	d011      	beq.n	8002678 <loop+0x3a8>
                if (delay <= 0) {
 8002654:	4b32      	ldr	r3, [pc, #200]	; (8002720 <loop+0x450>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <loop+0x398>
                    lowerBricks();
 800265c:	f7fe f88e 	bl	800077c <lowerBricks>
                    delay = BRICK_SPEED;
 8002660:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <loop+0x450>)
 8002662:	228c      	movs	r2, #140	; 0x8c
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e005      	b.n	8002674 <loop+0x3a4>
                } else {
                    delay--;
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <loop+0x450>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	3b01      	subs	r3, #1
 800266e:	b2da      	uxtb	r2, r3
 8002670:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <loop+0x450>)
 8002672:	701a      	strb	r2, [r3, #0]
                }
                checkGameOver();
 8002674:	f7fe f8ea 	bl	800084c <checkGameOver>
            }
            checkGuardianTimer();
 8002678:	f7ff fc48 	bl	8001f0c <checkGuardianTimer>
            playBall();
 800267c:	f7fd fe9e 	bl	80003bc <playBall>
        }

    	updateScreen();
 8002680:	f000 f850 	bl	8002724 <updateScreen>
    }if(play < paused){
 8002684:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <loop+0x430>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d807      	bhi.n	800269c <loop+0x3cc>
    	if(gamechoice == 1){
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <loop+0x42c>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d103      	bne.n	800269c <loop+0x3cc>
    		spawnStar();
 8002694:	f001 f83a 	bl	800370c <spawnStar>
    		moveStars();
 8002698:	f001 face 	bl	8003c38 <moveStars>
    	}

    }


    if (returnTest() == 1) {
 800269c:	f000 fe34 	bl	8003308 <returnTest>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d11f      	bne.n	80026e6 <loop+0x416>
        if (gamechoice == 2) {
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <loop+0x42c>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d103      	bne.n	80026b6 <loop+0x3e6>
            lowerBricks();
 80026ae:	f7fe f865 	bl	800077c <lowerBricks>
            printArray();
 80026b2:	f000 fe13 	bl	80032dc <printArray>
        }
        if(returnConnection() == 1 && gamechoice == 0) {
 80026b6:	f000 fe3f 	bl	8003338 <returnConnection>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d112      	bne.n	80026e6 <loop+0x416>
 80026c0:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <loop+0x42c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10e      	bne.n	80026e6 <loop+0x416>
            gamechoice = returnMPGameChoice();
 80026c8:	f000 fe58 	bl	800337c <returnMPGameChoice>
 80026cc:	4603      	mov	r3, r0
 80026ce:	461a      	mov	r2, r3
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <loop+0x42c>)
 80026d2:	701a      	strb	r2, [r3, #0]
            printArray();
 80026d4:	f000 fe02 	bl	80032dc <printArray>
            turnOffTest();
 80026d8:	f000 fe22 	bl	8003320 <turnOffTest>
            play = notPlay;
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <loop+0x430>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
            init();
 80026e2:	f7ff fddd 	bl	80022a0 <init>

        }
    }

    return key;
 80026e6:	687b      	ldr	r3, [r7, #4]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	0800bbbc 	.word	0x0800bbbc
 80026f4:	20001fec 	.word	0x20001fec
 80026f8:	20001eec 	.word	0x20001eec
 80026fc:	20001eed 	.word	0x20001eed
 8002700:	2000004a 	.word	0x2000004a
 8002704:	0800bbc4 	.word	0x0800bbc4
 8002708:	0800bbc8 	.word	0x0800bbc8
 800270c:	20001eeb 	.word	0x20001eeb
 8002710:	20001eee 	.word	0x20001eee
 8002714:	2000002c 	.word	0x2000002c
 8002718:	20001eef 	.word	0x20001eef
 800271c:	20000034 	.word	0x20000034
 8002720:	20000040 	.word	0x20000040

08002724 <updateScreen>:


void updateScreen()
{
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b087      	sub	sp, #28
 8002728:	af06      	add	r7, sp, #24
    if (play == menu){
 800272a:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <updateScreen+0x8c>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d102      	bne.n	8002738 <updateScreen+0x14>
    	displayMenu();
 8002732:	f000 fc05 	bl	8002f40 <displayMenu>
        return;
 8002736:	e037      	b.n	80027a8 <updateScreen+0x84>
    }

    if (gamechoice == 1){
 8002738:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <updateScreen+0x90>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d10c      	bne.n	800275a <updateScreen+0x36>
        //hit
        if (hit > 0) {
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <updateScreen+0x94>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <updateScreen+0x28>
            spaceShipHitColorToggle();
 8002748:	f001 fd28 	bl	800419c <spaceShipHitColorToggle>
        }

        //spaceship
        displaySpaceShip(RED);
 800274c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002750:	f001 fc9c 	bl	800408c <displaySpaceShip>

        //lives
        displayLives();
 8002754:	f001 fcd8 	bl	8004108 <displayLives>
 8002758:	e005      	b.n	8002766 <updateScreen+0x42>
    }else if(gamechoice == 2) {
 800275a:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <updateScreen+0x90>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d101      	bne.n	8002766 <updateScreen+0x42>
        printScreen();
 8002762:	f7ff fb49 	bl	8001df8 <printScreen>
    }

    //start
    if(!play){
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <updateScreen+0x8c>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d115      	bne.n	800279a <updateScreen+0x76>
    	Displ_WString(SCREEN_WIDTH + 10, SCREEN_HEIGHT * 2, "START", Font20, 2, WHITE, DARK_GREY);
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <updateScreen+0x98>)
 8002770:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8002774:	9204      	str	r2, [sp, #16]
 8002776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800277a:	9203      	str	r2, [sp, #12]
 800277c:	2202      	movs	r2, #2
 800277e:	9202      	str	r2, [sp, #8]
 8002780:	466c      	mov	r4, sp
 8002782:	1d1a      	adds	r2, r3, #4
 8002784:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002788:	e884 0003 	stmia.w	r4, {r0, r1}
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a0c      	ldr	r2, [pc, #48]	; (80027c0 <updateScreen+0x9c>)
 8002790:	2178      	movs	r1, #120	; 0x78
 8002792:	205a      	movs	r0, #90	; 0x5a
 8002794:	f002 ffd2 	bl	800573c <Displ_WString>
 8002798:	e006      	b.n	80027a8 <updateScreen+0x84>
    }
    else if(play == paused){
 800279a:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <updateScreen+0x8c>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d102      	bne.n	80027a8 <updateScreen+0x84>
    	displayPauseMenu(0);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f000 fb6a 	bl	8002e7c <displayPauseMenu>
    }
}
 80027a8:	3704      	adds	r7, #4
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd90      	pop	{r4, r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000004a 	.word	0x2000004a
 80027b4:	20001eed 	.word	0x20001eed
 80027b8:	20001eeb 	.word	0x20001eeb
 80027bc:	20000020 	.word	0x20000020
 80027c0:	0800bbcc 	.word	0x0800bbcc

080027c4 <read_MPU_mem>:
//        return -1;
//    }
//    return len;
//}

uint8_t read_MPU_mem(uint8_t reg_addr){
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af04      	add	r7, sp, #16
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if(HAL_I2C_Mem_Read(&hi2c2, ADDR_R, reg_addr, 1, &data, 1, 100) == HAL_OK){
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	2364      	movs	r3, #100	; 0x64
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	2301      	movs	r3, #1
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	f107 030f 	add.w	r3, r7, #15
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2301      	movs	r3, #1
 80027e2:	21d0      	movs	r1, #208	; 0xd0
 80027e4:	4807      	ldr	r0, [pc, #28]	; (8002804 <read_MPU_mem+0x40>)
 80027e6:	f003 ff1b 	bl	8006620 <HAL_I2C_Mem_Read>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <read_MPU_mem+0x30>
		return data;
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	e003      	b.n	80027fc <read_MPU_mem+0x38>
	}
	else{
		printf("mem not read\r\n");
 80027f4:	4804      	ldr	r0, [pc, #16]	; (8002808 <read_MPU_mem+0x44>)
 80027f6:	f007 fec3 	bl	800a580 <puts>
		return 0;
 80027fa:	2300      	movs	r3, #0
	}
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20001ef0 	.word	0x20001ef0
 8002808:	0800bbd4 	.word	0x0800bbd4

0800280c <write_MPU_mem>:

void write_MPU_mem(uint8_t reg_addr, uint8_t data){
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af04      	add	r7, sp, #16
 8002812:	4603      	mov	r3, r0
 8002814:	460a      	mov	r2, r1
 8002816:	71fb      	strb	r3, [r7, #7]
 8002818:	4613      	mov	r3, r2
 800281a:	71bb      	strb	r3, [r7, #6]
    if(HAL_I2C_Mem_Write(&hi2c2, ADDR_W, reg_addr, 1, &data, 1, 100) != HAL_OK){
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	b29a      	uxth	r2, r3
 8002820:	2364      	movs	r3, #100	; 0x64
 8002822:	9302      	str	r3, [sp, #8]
 8002824:	2301      	movs	r3, #1
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	1dbb      	adds	r3, r7, #6
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2301      	movs	r3, #1
 800282e:	21d1      	movs	r1, #209	; 0xd1
 8002830:	4806      	ldr	r0, [pc, #24]	; (800284c <write_MPU_mem+0x40>)
 8002832:	f003 fde1 	bl	80063f8 <HAL_I2C_Mem_Write>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <write_MPU_mem+0x36>
        printf("mem not written\r\n");
 800283c:	4804      	ldr	r0, [pc, #16]	; (8002850 <write_MPU_mem+0x44>)
 800283e:	f007 fe9f 	bl	800a580 <puts>
    }
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20001ef0 	.word	0x20001ef0
 8002850:	0800bbe4 	.word	0x0800bbe4

08002854 <read_y_accel>:

void read_y_accel(){
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
	uint8_t LSByte = read_MPU_mem(REG_ACCEL_YOUT70);
 800285a:	203e      	movs	r0, #62	; 0x3e
 800285c:	f7ff ffb2 	bl	80027c4 <read_MPU_mem>
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
	uint8_t MSByte = read_MPU_mem(REG_ACCEL_YOUT158);
 8002864:	203d      	movs	r0, #61	; 0x3d
 8002866:	f7ff ffad 	bl	80027c4 <read_MPU_mem>
 800286a:	4603      	mov	r3, r0
 800286c:	71bb      	strb	r3, [r7, #6]

	ay = (((int16_t)MSByte << 8) | LSByte);
 800286e:	79bb      	ldrb	r3, [r7, #6]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	b21a      	sxth	r2, r3
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	b21b      	sxth	r3, r3
 8002878:	4313      	orrs	r3, r2
 800287a:	b21a      	sxth	r2, r3
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <read_y_accel+0x34>)
 800287e:	801a      	strh	r2, [r3, #0]

}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	200020fc 	.word	0x200020fc

0800288c <init_MPU>:

void init_MPU(){
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
	write_MPU_mem(REG_PWR_MGMT, 0);
 8002890:	2100      	movs	r1, #0
 8002892:	206b      	movs	r0, #107	; 0x6b
 8002894:	f7ff ffba 	bl	800280c <write_MPU_mem>
	write_MPU_mem(REG_SMPLRT_DIV,0x07);
 8002898:	2107      	movs	r1, #7
 800289a:	2019      	movs	r0, #25
 800289c:	f7ff ffb6 	bl	800280c <write_MPU_mem>
	write_MPU_mem(REG_GYRO_CONF, 0);
 80028a0:	2100      	movs	r1, #0
 80028a2:	201b      	movs	r0, #27
 80028a4:	f7ff ffb2 	bl	800280c <write_MPU_mem>
	write_MPU_mem(REG_ACCEL_CONF, 0);
 80028a8:	2100      	movs	r1, #0
 80028aa:	201c      	movs	r0, #28
 80028ac:	f7ff ffae 	bl	800280c <write_MPU_mem>
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ba:	f002 ffa9 	bl	8005810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028be:	f000 f86d 	bl	800299c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028c2:	f000 f9c3 	bl	8002c4c <MX_GPIO_Init>
  MX_DMA_Init();
 80028c6:	f000 f9a3 	bl	8002c10 <MX_DMA_Init>
  MX_I2C2_Init();
 80028ca:	f000 f8bd 	bl	8002a48 <MX_I2C2_Init>
  MX_SPI2_Init();
 80028ce:	f000 f8fb 	bl	8002ac8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80028d2:	f000 f937 	bl	8002b44 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80028d6:	f000 f96b 	bl	8002bb0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80028da:	2064      	movs	r0, #100	; 0x64
 80028dc:	f002 fffe 	bl	80058dc <HAL_Delay>
  if(HAL_I2C_IsDeviceReady(&hi2c2, ADDR_R, 1, 100) == HAL_OK){
 80028e0:	2364      	movs	r3, #100	; 0x64
 80028e2:	2201      	movs	r2, #1
 80028e4:	21d0      	movs	r1, #208	; 0xd0
 80028e6:	4826      	ldr	r0, [pc, #152]	; (8002980 <main+0xcc>)
 80028e8:	f003 ffb4 	bl	8006854 <HAL_I2C_IsDeviceReady>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d105      	bne.n	80028fe <main+0x4a>
	  printf("succesfully communicated\r\n");
 80028f2:	4824      	ldr	r0, [pc, #144]	; (8002984 <main+0xd0>)
 80028f4:	f007 fe44 	bl	800a580 <puts>
	  init_MPU();
 80028f8:	f7ff ffc8 	bl	800288c <init_MPU>
 80028fc:	e002      	b.n	8002904 <main+0x50>
  }
  else{
	  printf("i2C not found\r\n");
 80028fe:	4822      	ldr	r0, [pc, #136]	; (8002988 <main+0xd4>)
 8002900:	f007 fe3e 	bl	800a580 <puts>
  }

  Displ_Init(Displ_Orientat_90);       // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8002904:	2001      	movs	r0, #1
 8002906:	f002 f91b 	bl	8004b40 <Displ_Init>
  Displ_CLS(BLACK);           // after initialization (above) and before turning on backlight (below), you can draw the initial display appearance. (here I'm just clearing display with a black background)
 800290a:	2000      	movs	r0, #0
 800290c:	f002 fb6e 	bl	8004fec <Displ_CLS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(100);
 8002910:	2064      	movs	r0, #100	; 0x64
 8002912:	f002 ffe3 	bl	80058dc <HAL_Delay>

      read_y_accel();
 8002916:	f7ff ff9d 	bl	8002854 <read_y_accel>
      if (ay > 2000){
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <main+0xd8>)
 800291c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002920:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002924:	dd07      	ble.n	8002936 <main+0x82>
          if(x < 320 - 88){
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <main+0xdc>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	2be7      	cmp	r3, #231	; 0xe7
 800292c:	d810      	bhi.n	8002950 <main+0x9c>
        	  key = right;
 800292e:	4b19      	ldr	r3, [pc, #100]	; (8002994 <main+0xe0>)
 8002930:	2203      	movs	r2, #3
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e00c      	b.n	8002950 <main+0x9c>
          }
      }
      else if (ay < -2000){
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <main+0xd8>)
 8002938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800293c:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8002940:	da06      	bge.n	8002950 <main+0x9c>
          if(x > 0){
 8002942:	4b13      	ldr	r3, [pc, #76]	; (8002990 <main+0xdc>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <main+0x9c>
        	  key = left;
 800294a:	4b12      	ldr	r3, [pc, #72]	; (8002994 <main+0xe0>)
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
          }
      }
      else{
      }
      key = loop(key);
 8002950:	4b10      	ldr	r3, [pc, #64]	; (8002994 <main+0xe0>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fcbb 	bl	80022d0 <loop>
 800295a:	4603      	mov	r3, r0
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <main+0xe0>)
 8002960:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ammo.in_play; i++){
 8002962:	2300      	movs	r3, #0
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	e002      	b.n	800296e <main+0xba>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3301      	adds	r3, #1
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <main+0xe4>)
 8002970:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002974:	461a      	mov	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4293      	cmp	r3, r2
 800297a:	dbf5      	blt.n	8002968 <main+0xb4>
      HAL_Delay(100);
 800297c:	e7c8      	b.n	8002910 <main+0x5c>
 800297e:	bf00      	nop
 8002980:	20001ef0 	.word	0x20001ef0
 8002984:	0800bbf8 	.word	0x0800bbf8
 8002988:	0800bc14 	.word	0x0800bc14
 800298c:	200020fc 	.word	0x200020fc
 8002990:	20000042 	.word	0x20000042
 8002994:	20002104 	.word	0x20002104
 8002998:	20002170 	.word	0x20002170

0800299c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b09c      	sub	sp, #112	; 0x70
 80029a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029a6:	2228      	movs	r2, #40	; 0x28
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f007 fd5a 	bl	800a464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	2230      	movs	r2, #48	; 0x30
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f007 fd4c 	bl	800a464 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029cc:	2302      	movs	r3, #2
 80029ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029d0:	2301      	movs	r3, #1
 80029d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029d4:	2310      	movs	r3, #16
 80029d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029d8:	2302      	movs	r3, #2
 80029da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029dc:	2300      	movs	r3, #0
 80029de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80029e0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80029e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 fb8c 	bl	8007108 <HAL_RCC_OscConfig>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80029f6:	f000 fa3b 	bl	8002e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029fa:	230f      	movs	r3, #15
 80029fc:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029fe:	2302      	movs	r3, #2
 8002a00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a02:	2300      	movs	r3, #0
 8002a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a14:	2102      	movs	r1, #2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f005 fbb4 	bl	8008184 <HAL_RCC_ClockConfig>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002a22:	f000 fa25 	bl	8002e70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a26:	2340      	movs	r3, #64	; 0x40
 8002a28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	4618      	mov	r0, r3
 8002a32:	f005 fddd 	bl	80085f0 <HAL_RCCEx_PeriphCLKConfig>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002a3c:	f000 fa18 	bl	8002e70 <Error_Handler>
  }
}
 8002a40:	bf00      	nop
 8002a42:	3770      	adds	r7, #112	; 0x70
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <MX_I2C2_Init+0x74>)
 8002a4e:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <MX_I2C2_Init+0x78>)
 8002a50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <MX_I2C2_Init+0x74>)
 8002a54:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <MX_I2C2_Init+0x7c>)
 8002a56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002a58:	4b18      	ldr	r3, [pc, #96]	; (8002abc <MX_I2C2_Init+0x74>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a5e:	4b17      	ldr	r3, [pc, #92]	; (8002abc <MX_I2C2_Init+0x74>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a64:	4b15      	ldr	r3, [pc, #84]	; (8002abc <MX_I2C2_Init+0x74>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002a6a:	4b14      	ldr	r3, [pc, #80]	; (8002abc <MX_I2C2_Init+0x74>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a70:	4b12      	ldr	r3, [pc, #72]	; (8002abc <MX_I2C2_Init+0x74>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <MX_I2C2_Init+0x74>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <MX_I2C2_Init+0x74>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a82:	480e      	ldr	r0, [pc, #56]	; (8002abc <MX_I2C2_Init+0x74>)
 8002a84:	f003 fc28 	bl	80062d8 <HAL_I2C_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002a8e:	f000 f9ef 	bl	8002e70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a92:	2100      	movs	r1, #0
 8002a94:	4809      	ldr	r0, [pc, #36]	; (8002abc <MX_I2C2_Init+0x74>)
 8002a96:	f004 fa9f 	bl	8006fd8 <HAL_I2CEx_ConfigAnalogFilter>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002aa0:	f000 f9e6 	bl	8002e70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4805      	ldr	r0, [pc, #20]	; (8002abc <MX_I2C2_Init+0x74>)
 8002aa8:	f004 fae1 	bl	800706e <HAL_I2CEx_ConfigDigitalFilter>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002ab2:	f000 f9dd 	bl	8002e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20001ef0 	.word	0x20001ef0
 8002ac0:	40005800 	.word	0x40005800
 8002ac4:	2000090e 	.word	0x2000090e

08002ac8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002acc:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002ace:	4a1c      	ldr	r2, [pc, #112]	; (8002b40 <MX_SPI2_Init+0x78>)
 8002ad0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ad8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ae0:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002ae2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ae6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ae8:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002afa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002b16:	2207      	movs	r2, #7
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002b22:	2208      	movs	r2, #8
 8002b24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b26:	4805      	ldr	r0, [pc, #20]	; (8002b3c <MX_SPI2_Init+0x74>)
 8002b28:	f005 fee6 	bl	80088f8 <HAL_SPI_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002b32:	f000 f99d 	bl	8002e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20001f44 	.word	0x20001f44
 8002b40:	40003800 	.word	0x40003800

08002b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b48:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <MX_USART2_UART_Init+0x64>)
 8002b4a:	4a18      	ldr	r2, [pc, #96]	; (8002bac <MX_USART2_UART_Init+0x68>)
 8002b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <MX_USART2_UART_Init+0x64>)
 8002b50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <MX_USART2_UART_Init+0x64>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <MX_USART2_UART_Init+0x64>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <MX_USART2_UART_Init+0x64>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <MX_USART2_UART_Init+0x64>)
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <MX_USART2_UART_Init+0x64>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <MX_USART2_UART_Init+0x64>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <MX_USART2_UART_Init+0x64>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <MX_USART2_UART_Init+0x64>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b86:	4808      	ldr	r0, [pc, #32]	; (8002ba8 <MX_USART2_UART_Init+0x64>)
 8002b88:	f006 fcca 	bl	8009520 <HAL_UART_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002b92:	f000 f96d 	bl	8002e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART2->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <MX_USART2_UART_Init+0x68>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a04      	ldr	r2, [pc, #16]	; (8002bac <MX_USART2_UART_Init+0x68>)
 8002b9c:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8002ba0:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20001fec 	.word	0x20001fec
 8002bac:	40004400 	.word	0x40004400

08002bb0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MX_USART3_UART_Init+0x58>)
 8002bb6:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <MX_USART3_UART_Init+0x5c>)
 8002bb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <MX_USART3_UART_Init+0x58>)
 8002bbc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002bc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_USART3_UART_Init+0x58>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MX_USART3_UART_Init+0x58>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_USART3_UART_Init+0x58>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <MX_USART3_UART_Init+0x58>)
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <MX_USART3_UART_Init+0x58>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_USART3_UART_Init+0x58>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <MX_USART3_UART_Init+0x58>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MX_USART3_UART_Init+0x58>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <MX_USART3_UART_Init+0x58>)
 8002bf4:	f006 fc94 	bl	8009520 <HAL_UART_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002bfe:	f000 f937 	bl	8002e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20002074 	.word	0x20002074
 8002c0c:	40004800 	.word	0x40004800

08002c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <MX_DMA_Init+0x38>)
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <MX_DMA_Init+0x38>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6153      	str	r3, [r2, #20]
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <MX_DMA_Init+0x38>)
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	200f      	movs	r0, #15
 8002c34:	f002 ff51 	bl	8005ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002c38:	200f      	movs	r0, #15
 8002c3a:	f002 ff6a 	bl	8005b12 <HAL_NVIC_EnableIRQ>

}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000

08002c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c52:	f107 0314 	add.w	r3, r7, #20
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	60da      	str	r2, [r3, #12]
 8002c60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c62:	4b46      	ldr	r3, [pc, #280]	; (8002d7c <MX_GPIO_Init+0x130>)
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	4a45      	ldr	r2, [pc, #276]	; (8002d7c <MX_GPIO_Init+0x130>)
 8002c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c6c:	6153      	str	r3, [r2, #20]
 8002c6e:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <MX_GPIO_Init+0x130>)
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c7a:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <MX_GPIO_Init+0x130>)
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	4a3f      	ldr	r2, [pc, #252]	; (8002d7c <MX_GPIO_Init+0x130>)
 8002c80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c84:	6153      	str	r3, [r2, #20]
 8002c86:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <MX_GPIO_Init+0x130>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c92:	4b3a      	ldr	r3, [pc, #232]	; (8002d7c <MX_GPIO_Init+0x130>)
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	4a39      	ldr	r2, [pc, #228]	; (8002d7c <MX_GPIO_Init+0x130>)
 8002c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c9c:	6153      	str	r3, [r2, #20]
 8002c9e:	4b37      	ldr	r3, [pc, #220]	; (8002d7c <MX_GPIO_Init+0x130>)
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	4b34      	ldr	r3, [pc, #208]	; (8002d7c <MX_GPIO_Init+0x130>)
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	4a33      	ldr	r2, [pc, #204]	; (8002d7c <MX_GPIO_Init+0x130>)
 8002cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb4:	6153      	str	r3, [r2, #20]
 8002cb6:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <MX_GPIO_Init+0x130>)
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cc8:	482d      	ldr	r0, [pc, #180]	; (8002d80 <MX_GPIO_Init+0x134>)
 8002cca:	f003 fad5 	bl	8006278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin, GPIO_PIN_RESET);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd8:	f003 face 	bl	8006278 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOP_Pin RIGHT_Pin LEFT_Pin */
  GPIO_InitStruct.Pin = TOP_Pin|RIGHT_Pin|LEFT_Pin;
 8002cdc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ce2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4824      	ldr	r0, [pc, #144]	; (8002d84 <MX_GPIO_Init+0x138>)
 8002cf4:	f003 f936 	bl	8005f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIDDLE_Pin */
  GPIO_InitStruct.Pin = MIDDLE_Pin;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cfc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d02:	2301      	movs	r3, #1
 8002d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MIDDLE_GPIO_Port, &GPIO_InitStruct);
 8002d06:	f107 0314 	add.w	r3, r7, #20
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d10:	f003 f928 	bl	8005f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8002d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4814      	ldr	r0, [pc, #80]	; (8002d80 <MX_GPIO_Init+0x134>)
 8002d2e:	f003 f919 	bl	8005f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_CS_Pin DISPL_RST_Pin DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin|DISPL_RST_Pin|DISPL_DC_Pin;
 8002d32:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d40:	2300      	movs	r3, #0
 8002d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d4e:	f003 f909 	bl	8005f64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	2100      	movs	r1, #0
 8002d56:	2006      	movs	r0, #6
 8002d58:	f002 febf 	bl	8005ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d5c:	2006      	movs	r0, #6
 8002d5e:	f002 fed8 	bl	8005b12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	2028      	movs	r0, #40	; 0x28
 8002d68:	f002 feb7 	bl	8005ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d6c:	2028      	movs	r0, #40	; 0x28
 8002d6e:	f002 fed0 	bl	8005b12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d72:	bf00      	nop
 8002d74:	3728      	adds	r7, #40	; 0x28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	48000400 	.word	0x48000400
 8002d84:	48000800 	.word	0x48000800

08002d88 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	80fb      	strh	r3, [r7, #6]
    // Get the current time
    uint32_t current_time = HAL_GetTick();
 8002d92:	f002 fd97 	bl	80058c4 <HAL_GetTick>
 8002d96:	60f8      	str	r0, [r7, #12]

    // Check if it's been long enough since the last debounce
    if (current_time - debounce_time > DEBOUNCE_DELAY) {
 8002d98:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b1e      	cmp	r3, #30
 8002da2:	d951      	bls.n	8002e48 <HAL_GPIO_EXTI_Callback+0xc0>
        // Update debounce time
        debounce_time = current_time;
 8002da4:	4a2a      	ldr	r2, [pc, #168]	; (8002e50 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6013      	str	r3, [r2, #0]
        // Your button handling code here
        printf("interrupt!\r\n");
 8002daa:	482a      	ldr	r0, [pc, #168]	; (8002e54 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002dac:	f007 fbe8 	bl	800a580 <puts>
        if (GPIO_Pin == LEFT_Pin && HAL_GPIO_ReadPin(LEFT_GPIO_Port, GPIO_Pin) == 0) {
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db6:	d10e      	bne.n	8002dd6 <HAL_GPIO_EXTI_Callback+0x4e>
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4826      	ldr	r0, [pc, #152]	; (8002e58 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002dbe:	f003 fa43 	bl	8006248 <HAL_GPIO_ReadPin>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d106      	bne.n	8002dd6 <HAL_GPIO_EXTI_Callback+0x4e>
            key = left;
 8002dc8:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_GPIO_EXTI_Callback+0xd4>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
            printf("left clicked\r\n");
 8002dce:	4824      	ldr	r0, [pc, #144]	; (8002e60 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002dd0:	f007 fbd6 	bl	800a580 <puts>
 8002dd4:	e038      	b.n	8002e48 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == TOP_Pin && HAL_GPIO_ReadPin(TOP_GPIO_Port, GPIO_Pin) == 0) {
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ddc:	d10e      	bne.n	8002dfc <HAL_GPIO_EXTI_Callback+0x74>
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	4619      	mov	r1, r3
 8002de2:	481d      	ldr	r0, [pc, #116]	; (8002e58 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002de4:	f003 fa30 	bl	8006248 <HAL_GPIO_ReadPin>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_GPIO_EXTI_Callback+0x74>
            key = up;
 8002dee:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <HAL_GPIO_EXTI_Callback+0xd4>)
 8002df0:	2202      	movs	r2, #2
 8002df2:	701a      	strb	r2, [r3, #0]
            printf("up clicked\r\n");
 8002df4:	481b      	ldr	r0, [pc, #108]	; (8002e64 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002df6:	f007 fbc3 	bl	800a580 <puts>
 8002dfa:	e025      	b.n	8002e48 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == RIGHT_Pin && HAL_GPIO_ReadPin(RIGHT_GPIO_Port, GPIO_Pin) == 0) {
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e02:	d10e      	bne.n	8002e22 <HAL_GPIO_EXTI_Callback+0x9a>
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	4619      	mov	r1, r3
 8002e08:	4813      	ldr	r0, [pc, #76]	; (8002e58 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002e0a:	f003 fa1d 	bl	8006248 <HAL_GPIO_ReadPin>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d106      	bne.n	8002e22 <HAL_GPIO_EXTI_Callback+0x9a>
            key = right;
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_GPIO_EXTI_Callback+0xd4>)
 8002e16:	2203      	movs	r2, #3
 8002e18:	701a      	strb	r2, [r3, #0]
            printf("right clicked\r\n");
 8002e1a:	4813      	ldr	r0, [pc, #76]	; (8002e68 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002e1c:	f007 fbb0 	bl	800a580 <puts>
 8002e20:	e012      	b.n	8002e48 <HAL_GPIO_EXTI_Callback+0xc0>
        } else if (GPIO_Pin == MIDDLE_Pin && HAL_GPIO_ReadPin(MIDDLE_GPIO_Port, GPIO_Pin) == 0) {
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d10f      	bne.n	8002e48 <HAL_GPIO_EXTI_Callback+0xc0>
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e30:	f003 fa0a 	bl	8006248 <HAL_GPIO_ReadPin>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_GPIO_EXTI_Callback+0xc0>
            key = down;
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_GPIO_EXTI_Callback+0xd4>)
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	701a      	strb	r2, [r3, #0]
            printf("down clicked\r\n");
 8002e40:	480a      	ldr	r0, [pc, #40]	; (8002e6c <HAL_GPIO_EXTI_Callback+0xe4>)
 8002e42:	f007 fb9d 	bl	800a580 <puts>
        }
    }
}
 8002e46:	e7ff      	b.n	8002e48 <HAL_GPIO_EXTI_Callback+0xc0>
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20002100 	.word	0x20002100
 8002e54:	0800bc24 	.word	0x0800bc24
 8002e58:	48000800 	.word	0x48000800
 8002e5c:	20002104 	.word	0x20002104
 8002e60:	0800bc30 	.word	0x0800bc30
 8002e64:	0800bc40 	.word	0x0800bc40
 8002e68:	0800bc4c 	.word	0x0800bc4c
 8002e6c:	0800bc5c 	.word	0x0800bc5c

08002e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e74:	b672      	cpsid	i
}
 8002e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <Error_Handler+0x8>
	...

08002e7c <displayPauseMenu>:

void displayMultiplayerIcon(void);
void displayBricksIcon(void);
void displaySpaceIcon(void);

void displayPauseMenu(uint8_t clear){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af04      	add	r7, sp, #16
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
	uint16_t back_color = GREY;
 8002e86:	f249 6396 	movw	r3, #38550	; 0x9696
 8002e8a:	81fb      	strh	r3, [r7, #14]
	uint16_t continue_color = RED;
 8002e8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e90:	81bb      	strh	r3, [r7, #12]
	uint16_t triangle_color = WHITE;
 8002e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e96:	817b      	strh	r3, [r7, #10]
	if(choice != last_choice_pause || clear){
 8002e98:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <displayPauseMenu+0xbc>)
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <displayPauseMenu+0xc0>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d102      	bne.n	8002eaa <displayPauseMenu+0x2e>
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d042      	beq.n	8002f30 <displayPauseMenu+0xb4>
		last_choice_pause = choice;
 8002eaa:	4b23      	ldr	r3, [pc, #140]	; (8002f38 <displayPauseMenu+0xbc>)
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <displayPauseMenu+0xc0>)
 8002eb0:	701a      	strb	r2, [r3, #0]
		if(choice == 0){
 8002eb2:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <displayPauseMenu+0xbc>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <displayPauseMenu+0x4c>
			back_color = RED;
 8002eba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ebe:	81fb      	strh	r3, [r7, #14]
			continue_color = GREY;
 8002ec0:	f249 6396 	movw	r3, #38550	; 0x9696
 8002ec4:	81bb      	strh	r3, [r7, #12]
 8002ec6:	e00b      	b.n	8002ee0 <displayPauseMenu+0x64>
		}
		else if(clear){
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <displayPauseMenu+0x64>
			back_color = DARK_GREY;
 8002ece:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002ed2:	81fb      	strh	r3, [r7, #14]
			continue_color = DARK_GREY;
 8002ed4:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002ed8:	81bb      	strh	r3, [r7, #12]
			triangle_color = DARK_GREY;
 8002eda:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8002ede:	817b      	strh	r3, [r7, #10]
		}
		Displ_FillArea(SCREEN_WIDTH * 2 - BUTTON_SIZE - 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, back_color);
 8002ee0:	89fb      	ldrh	r3, [r7, #14]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2340      	movs	r3, #64	; 0x40
 8002ee6:	2240      	movs	r2, #64	; 0x40
 8002ee8:	2158      	movs	r1, #88	; 0x58
 8002eea:	2054      	movs	r0, #84	; 0x54
 8002eec:	f001 feca 	bl	8004c84 <Displ_FillArea>
		Displ_FillArea(SCREEN_WIDTH * 2 + 12, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2, BUTTON_SIZE, BUTTON_SIZE, continue_color);
 8002ef0:	89bb      	ldrh	r3, [r7, #12]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	2340      	movs	r3, #64	; 0x40
 8002ef6:	2240      	movs	r2, #64	; 0x40
 8002ef8:	2158      	movs	r1, #88	; 0x58
 8002efa:	20ac      	movs	r0, #172	; 0xac
 8002efc:	f001 fec2 	bl	8004c84 <Displ_FillArea>

		Displ_fillTriangle(SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 + 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 + 20 + BUTTON_SIZE - 16, SCREEN_HEIGHT * 2, triangle_color);
 8002f00:	897b      	ldrh	r3, [r7, #10]
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	2378      	movs	r3, #120	; 0x78
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	23e4      	movs	r3, #228	; 0xe4
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2390      	movs	r3, #144	; 0x90
 8002f0e:	22b4      	movs	r2, #180	; 0xb4
 8002f10:	2160      	movs	r1, #96	; 0x60
 8002f12:	20b4      	movs	r0, #180	; 0xb4
 8002f14:	f002 f9b7 	bl	8005286 <Displ_fillTriangle>
		Displ_fillTriangle(SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 - BUTTON_SIZE / 2 + 8, SCREEN_WIDTH * 2 - 20, SCREEN_HEIGHT * 2 + BUTTON_SIZE / 2 - 8, SCREEN_WIDTH * 2 - 20 - BUTTON_SIZE + 16, SCREEN_HEIGHT * 2, triangle_color);
 8002f18:	897b      	ldrh	r3, [r7, #10]
 8002f1a:	9302      	str	r3, [sp, #8]
 8002f1c:	2378      	movs	r3, #120	; 0x78
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	235c      	movs	r3, #92	; 0x5c
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2390      	movs	r3, #144	; 0x90
 8002f26:	228c      	movs	r2, #140	; 0x8c
 8002f28:	2160      	movs	r1, #96	; 0x60
 8002f2a:	208c      	movs	r0, #140	; 0x8c
 8002f2c:	f002 f9ab 	bl	8005286 <Displ_fillTriangle>
	}

}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20001eec 	.word	0x20001eec
 8002f3c:	2000002c 	.word	0x2000002c

08002f40 <displayMenu>:

void displayMenu(){
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b08b      	sub	sp, #44	; 0x2c
 8002f44:	af06      	add	r7, sp, #24
	int y_offset = 12;
 8002f46:	230c      	movs	r3, #12
 8002f48:	60fb      	str	r3, [r7, #12]
	int x_offset = 12;
 8002f4a:	230c      	movs	r3, #12
 8002f4c:	60bb      	str	r3, [r7, #8]
	//box around
	if(choice != last_choice_menu){
 8002f4e:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <displayMenu+0x140>)
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	4b4c      	ldr	r3, [pc, #304]	; (8003084 <displayMenu+0x144>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d03d      	beq.n	8002fd6 <displayMenu+0x96>
		last_choice_menu =  choice;
 8002f5a:	4b49      	ldr	r3, [pc, #292]	; (8003080 <displayMenu+0x140>)
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	4b49      	ldr	r3, [pc, #292]	; (8003084 <displayMenu+0x144>)
 8002f60:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
 8002f66:	e02e      	b.n	8002fc6 <displayMenu+0x86>
			if(i == choice){
 8002f68:	4b45      	ldr	r3, [pc, #276]	; (8003080 <displayMenu+0x140>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d10b      	bne.n	8002f8c <displayMenu+0x4c>
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, RED);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	b298      	uxth	r0, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	b299      	uxth	r1, r3
 8002f7c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	2340      	movs	r3, #64	; 0x40
 8002f84:	2240      	movs	r2, #64	; 0x40
 8002f86:	f001 fe7d 	bl	8004c84 <Displ_FillArea>
 8002f8a:	e00a      	b.n	8002fa2 <displayMenu+0x62>
			}else{
				Displ_FillArea(x_offset, y_offset,BUTTON_SIZE , BUTTON_SIZE, GREY);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	b298      	uxth	r0, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	b299      	uxth	r1, r3
 8002f94:	f249 6396 	movw	r3, #38550	; 0x9696
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2340      	movs	r3, #64	; 0x40
 8002f9c:	2240      	movs	r2, #64	; 0x40
 8002f9e:	f001 fe71 	bl	8004c84 <Displ_FillArea>
			}if((i + 1)% 4 == 0){
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d105      	bne.n	8002fba <displayMenu+0x7a>
				x_offset = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
				y_offset += BUTTON_SIZE + 12;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	334c      	adds	r3, #76	; 0x4c
 8002fb6:	60fb      	str	r3, [r7, #12]
				continue;
 8002fb8:	e002      	b.n	8002fc0 <displayMenu+0x80>
			}
			x_offset += BUTTON_SIZE + 12;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	334c      	adds	r3, #76	; 0x4c
 8002fbe:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < total_games + 1 && i < 8; i++){
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	4b30      	ldr	r3, [pc, #192]	; (8003088 <displayMenu+0x148>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	dc02      	bgt.n	8002fd6 <displayMenu+0x96>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b07      	cmp	r3, #7
 8002fd4:	ddc8      	ble.n	8002f68 <displayMenu+0x28>
		}
	}
    displayMenuIcons();
 8002fd6:	f000 f861 	bl	800309c <displayMenuIcons>

    // text
    switch (choice) {
 8002fda:	4b29      	ldr	r3, [pc, #164]	; (8003080 <displayMenu+0x140>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d032      	beq.n	8003048 <displayMenu+0x108>
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	dc46      	bgt.n	8003074 <displayMenu+0x134>
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <displayMenu+0xb0>
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d016      	beq.n	800301c <displayMenu+0xdc>
        break;
    case 2:
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
        break;
    default:
        break;
 8002fee:	e041      	b.n	8003074 <displayMenu+0x134>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Multiplayer   ", Font20, 1, WHITE, DARK_GREY);
 8002ff0:	4b26      	ldr	r3, [pc, #152]	; (800308c <displayMenu+0x14c>)
 8002ff2:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8002ff6:	9204      	str	r2, [sp, #16]
 8002ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ffc:	9203      	str	r2, [sp, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	9202      	str	r2, [sp, #8]
 8003002:	466c      	mov	r4, sp
 8003004:	1d1a      	adds	r2, r3, #4
 8003006:	e892 0003 	ldmia.w	r2, {r0, r1}
 800300a:	e884 0003 	stmia.w	r4, {r0, r1}
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <displayMenu+0x150>)
 8003012:	21c8      	movs	r1, #200	; 0xc8
 8003014:	2008      	movs	r0, #8
 8003016:	f002 fb91 	bl	800573c <Displ_WString>
        break;
 800301a:	e02c      	b.n	8003076 <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Brick Breaker ", Font20, 1, WHITE, DARK_GREY);
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <displayMenu+0x14c>)
 800301e:	f642 422c 	movw	r2, #11308	; 0x2c2c
 8003022:	9204      	str	r2, [sp, #16]
 8003024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003028:	9203      	str	r2, [sp, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	9202      	str	r2, [sp, #8]
 800302e:	466c      	mov	r4, sp
 8003030:	1d1a      	adds	r2, r3, #4
 8003032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003036:	e884 0003 	stmia.w	r4, {r0, r1}
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a15      	ldr	r2, [pc, #84]	; (8003094 <displayMenu+0x154>)
 800303e:	21c8      	movs	r1, #200	; 0xc8
 8003040:	2008      	movs	r0, #8
 8003042:	f002 fb7b 	bl	800573c <Displ_WString>
        break;
 8003046:	e016      	b.n	8003076 <displayMenu+0x136>
    	Displ_WString(8, SCREEN_HEIGHT * 4 - 40, "Space Invaders", Font20, 1, WHITE, DARK_GREY);
 8003048:	4b10      	ldr	r3, [pc, #64]	; (800308c <displayMenu+0x14c>)
 800304a:	f642 422c 	movw	r2, #11308	; 0x2c2c
 800304e:	9204      	str	r2, [sp, #16]
 8003050:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003054:	9203      	str	r2, [sp, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	9202      	str	r2, [sp, #8]
 800305a:	466c      	mov	r4, sp
 800305c:	1d1a      	adds	r2, r3, #4
 800305e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003062:	e884 0003 	stmia.w	r4, {r0, r1}
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <displayMenu+0x158>)
 800306a:	21c8      	movs	r1, #200	; 0xc8
 800306c:	2008      	movs	r0, #8
 800306e:	f002 fb65 	bl	800573c <Displ_WString>
        break;
 8003072:	e000      	b.n	8003076 <displayMenu+0x136>
        break;
 8003074:	bf00      	nop
    }
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	bd90      	pop	{r4, r7, pc}
 800307e:	bf00      	nop
 8003080:	20001eec 	.word	0x20001eec
 8003084:	20000048 	.word	0x20000048
 8003088:	20000044 	.word	0x20000044
 800308c:	20000020 	.word	0x20000020
 8003090:	0800bc6c 	.word	0x0800bc6c
 8003094:	0800bc7c 	.word	0x0800bc7c
 8003098:	0800bc8c 	.word	0x0800bc8c

0800309c <displayMenuIcons>:

void displayMenuIcons(){
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0

    // multiplayer
	displayMultiplayerIcon();
 80030a0:	f000 f806 	bl	80030b0 <displayMultiplayerIcon>

    // brick
	displayBricksIcon();
 80030a4:	f000 f868 	bl	8003178 <displayBricksIcon>

    //spaceinvaders
	displaySpaceIcon();
 80030a8:	f000 f890 	bl	80031cc <displaySpaceIcon>
}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <displayMultiplayerIcon>:

void displayMultiplayerIcon(){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af02      	add	r7, sp, #8
	if(connected){
 80030b6:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <displayMultiplayerIcon+0xc4>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d023      	beq.n	8003106 <displayMultiplayerIcon+0x56>
		Displ_FillArea(20, 20, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 80030be:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2304      	movs	r3, #4
 80030c6:	2230      	movs	r2, #48	; 0x30
 80030c8:	2114      	movs	r1, #20
 80030ca:	2014      	movs	r0, #20
 80030cc:	f001 fdda 	bl	8004c84 <Displ_FillArea>
		Displ_FillArea(20, 12, 4, 8, LIGHT_GREEN);
 80030d0:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2308      	movs	r3, #8
 80030d8:	2204      	movs	r2, #4
 80030da:	210c      	movs	r1, #12
 80030dc:	2014      	movs	r0, #20
 80030de:	f001 fdd1 	bl	8004c84 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE, 12, 4, 8, LIGHT_GREEN);
 80030e2:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2308      	movs	r3, #8
 80030ea:	2204      	movs	r2, #4
 80030ec:	210c      	movs	r1, #12
 80030ee:	2040      	movs	r0, #64	; 0x40
 80030f0:	f001 fdc8 	bl	8004c84 <Displ_FillArea>
		Displ_FillArea(BUTTON_SIZE/2 + 8, 24, 8, BUTTON_SIZE - 24, LIGHT_GREEN);
 80030f4:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2328      	movs	r3, #40	; 0x28
 80030fc:	2208      	movs	r2, #8
 80030fe:	2118      	movs	r1, #24
 8003100:	2028      	movs	r0, #40	; 0x28
 8003102:	f001 fdbf 	bl	8004c84 <Displ_FillArea>
	}
	Displ_FillArea(20, BUTTON_SIZE, BUTTON_SIZE - 16, 4, LIGHT_GREEN);
 8003106:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	2304      	movs	r3, #4
 800310e:	2230      	movs	r2, #48	; 0x30
 8003110:	2140      	movs	r1, #64	; 0x40
 8003112:	2014      	movs	r0, #20
 8003114:	f001 fdb6 	bl	8004c84 <Displ_FillArea>
	Displ_FillArea(20, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 8003118:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2308      	movs	r3, #8
 8003120:	2204      	movs	r2, #4
 8003122:	2144      	movs	r1, #68	; 0x44
 8003124:	2014      	movs	r0, #20
 8003126:	f001 fdad 	bl	8004c84 <Displ_FillArea>
	Displ_FillArea(BUTTON_SIZE, BUTTON_SIZE+4, 4, 8, LIGHT_GREEN);
 800312a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	2308      	movs	r3, #8
 8003132:	2204      	movs	r2, #4
 8003134:	2144      	movs	r1, #68	; 0x44
 8003136:	2040      	movs	r0, #64	; 0x40
 8003138:	f001 fda4 	bl	8004c84 <Displ_FillArea>
	if(!connected){
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <displayMultiplayerIcon+0xc4>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d112      	bne.n	800316a <displayMultiplayerIcon+0xba>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 8003144:	2318      	movs	r3, #24
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	e00c      	b.n	8003164 <displayMultiplayerIcon+0xb4>
			Displ_FillArea(BUTTON_SIZE/2 + 8, k, 8, 4, LIGHT_GREEN);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	b299      	uxth	r1, r3
 800314e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2304      	movs	r3, #4
 8003156:	2208      	movs	r2, #8
 8003158:	2028      	movs	r0, #40	; 0x28
 800315a:	f001 fd93 	bl	8004c84 <Displ_FillArea>
		for(int k = 24; k < BUTTON_SIZE; k += 8){
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3308      	adds	r3, #8
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b3f      	cmp	r3, #63	; 0x3f
 8003168:	ddef      	ble.n	800314a <displayMultiplayerIcon+0x9a>
		}
	}
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20002105 	.word	0x20002105

08003178 <displayBricksIcon>:

void displayBricksIcon(){
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af02      	add	r7, sp, #8
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE, 20, 4, LIGHT_GREEN);
 800317e:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2304      	movs	r3, #4
 8003186:	2214      	movs	r2, #20
 8003188:	2140      	movs	r1, #64	; 0x40
 800318a:	2068      	movs	r0, #104	; 0x68
 800318c:	f001 fd7a 	bl	8004c84 <Displ_FillArea>
	Displ_FillArea(28+BUTTON_SIZE, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 8003190:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	2340      	movs	r3, #64	; 0x40
 8003198:	2204      	movs	r2, #4
 800319a:	210c      	movs	r1, #12
 800319c:	205c      	movs	r0, #92	; 0x5c
 800319e:	f001 fd71 	bl	8004c84 <Displ_FillArea>
	Displ_FillArea((8+BUTTON_SIZE)*2, 12, 4, BUTTON_SIZE, LIGHT_GREEN);
 80031a2:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	2340      	movs	r3, #64	; 0x40
 80031aa:	2204      	movs	r2, #4
 80031ac:	210c      	movs	r1, #12
 80031ae:	2090      	movs	r0, #144	; 0x90
 80031b0:	f001 fd68 	bl	8004c84 <Displ_FillArea>
	Displ_FillArea(40+BUTTON_SIZE, BUTTON_SIZE - 20, 4, 4, LIGHT_GREEN);
 80031b4:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2304      	movs	r3, #4
 80031bc:	2204      	movs	r2, #4
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	2068      	movs	r0, #104	; 0x68
 80031c2:	f001 fd5f 	bl	8004c84 <Displ_FillArea>
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <displaySpaceIcon>:

void displaySpaceIcon(){
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af02      	add	r7, sp, #8
	Displ_FillArea((BUTTON_SIZE+12)*3 - 48, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 80031d2:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2310      	movs	r3, #16
 80031da:	2204      	movs	r2, #4
 80031dc:	2134      	movs	r1, #52	; 0x34
 80031de:	20b4      	movs	r0, #180	; 0xb4
 80031e0:	f001 fd50 	bl	8004c84 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 32, BUTTON_SIZE -12, 4, 16, LIGHT_GREEN);
 80031e4:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	2310      	movs	r3, #16
 80031ec:	2204      	movs	r2, #4
 80031ee:	2134      	movs	r1, #52	; 0x34
 80031f0:	20c4      	movs	r0, #196	; 0xc4
 80031f2:	f001 fd47 	bl	8004c84 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 44, BUTTON_SIZE -8, 12, 4, LIGHT_GREEN);
 80031f6:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	2304      	movs	r3, #4
 80031fe:	220c      	movs	r2, #12
 8003200:	2138      	movs	r1, #56	; 0x38
 8003202:	20b8      	movs	r0, #184	; 0xb8
 8003204:	f001 fd3e 	bl	8004c84 <Displ_FillArea>
	Displ_FillArea((BUTTON_SIZE+12)*3 - 40, BUTTON_SIZE -16, 4, 16, LIGHT_GREEN);
 8003208:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	2310      	movs	r3, #16
 8003210:	2204      	movs	r2, #4
 8003212:	2130      	movs	r1, #48	; 0x30
 8003214:	20bc      	movs	r0, #188	; 0xbc
 8003216:	f001 fd35 	bl	8004c84 <Displ_FillArea>

	Displ_FillArea((BUTTON_SIZE+12)*3 - 36, BUTTON_SIZE -40, 12, 12, LIGHT_GREEN);
 800321a:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	230c      	movs	r3, #12
 8003222:	220c      	movs	r2, #12
 8003224:	2118      	movs	r1, #24
 8003226:	20c0      	movs	r0, #192	; 0xc0
 8003228:	f001 fd2c 	bl	8004c84 <Displ_FillArea>
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <addCharacterToArray>:
        check_availability();
    }

}

void addCharacterToArray(char c) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
    char filler[2];
    filler[0] = c;
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	733b      	strb	r3, [r7, #12]
    filler[1] = '\0';
 8003242:	2300      	movs	r3, #0
 8003244:	737b      	strb	r3, [r7, #13]

    strcat(characterArray, filler);
 8003246:	f107 030c 	add.w	r3, r7, #12
 800324a:	4619      	mov	r1, r3
 800324c:	481d      	ldr	r0, [pc, #116]	; (80032c4 <addCharacterToArray+0x90>)
 800324e:	f007 fa3f 	bl	800a6d0 <strcat>
    //printf("%c\r\n", c);

    if(c == 'o' && mp == enabled) {
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	2b6f      	cmp	r3, #111	; 0x6f
 8003256:	d106      	bne.n	8003266 <addCharacterToArray+0x32>
 8003258:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <addCharacterToArray+0x94>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d102      	bne.n	8003266 <addCharacterToArray+0x32>
        test = 1;
 8003260:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <addCharacterToArray+0x98>)
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
        //printArray();
    }
    if(c == '?') {
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	2b3f      	cmp	r3, #63	; 0x3f
 800326a:	d10e      	bne.n	800328a <addCharacterToArray+0x56>
        HAL_UART_Transmit(&huart2, (uint8_t *)"Yes!", strlen("Yes!"), 300);
 800326c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003270:	2204      	movs	r2, #4
 8003272:	4917      	ldr	r1, [pc, #92]	; (80032d0 <addCharacterToArray+0x9c>)
 8003274:	4817      	ldr	r0, [pc, #92]	; (80032d4 <addCharacterToArray+0xa0>)
 8003276:	f006 f9a1 	bl	80095bc <HAL_UART_Transmit>
        printArray();
 800327a:	f000 f82f 	bl	80032dc <printArray>
        connected = 1;
 800327e:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <addCharacterToArray+0xa4>)
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
        mp = enabled;
 8003284:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <addCharacterToArray+0x94>)
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
    }if(c == '!') {
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	2b21      	cmp	r3, #33	; 0x21
 800328e:	d107      	bne.n	80032a0 <addCharacterToArray+0x6c>
        connected = 1;
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <addCharacterToArray+0xa4>)
 8003292:	2201      	movs	r2, #1
 8003294:	701a      	strb	r2, [r3, #0]
        mp = enabled;
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <addCharacterToArray+0x94>)
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
        printArray();
 800329c:	f000 f81e 	bl	80032dc <printArray>
    }if(c == 'G') {
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	2b47      	cmp	r3, #71	; 0x47
 80032a4:	d104      	bne.n	80032b0 <addCharacterToArray+0x7c>
        test = 1;
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <addCharacterToArray+0x98>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
        setMPGameChoice();
 80032ac:	f000 f850 	bl	8003350 <setMPGameChoice>
        //printArray();
    }if(c == 'B') {
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	2b42      	cmp	r3, #66	; 0x42
 80032b4:	d101      	bne.n	80032ba <addCharacterToArray+0x86>
        setCoordinate();
 80032b6:	f000 f86d 	bl	8003394 <setCoordinate>
    }
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20002108 	.word	0x20002108
 80032c8:	20002106 	.word	0x20002106
 80032cc:	2000216c 	.word	0x2000216c
 80032d0:	0800bca4 	.word	0x0800bca4
 80032d4:	20001fec 	.word	0x20001fec
 80032d8:	20002105 	.word	0x20002105

080032dc <printArray>:

void printArray() {
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
    printf("%s\r\n", characterArray);
 80032e0:	4906      	ldr	r1, [pc, #24]	; (80032fc <printArray+0x20>)
 80032e2:	4807      	ldr	r0, [pc, #28]	; (8003300 <printArray+0x24>)
 80032e4:	f007 f8c6 	bl	800a474 <iprintf>
    memset(characterArray, '\0', sizeof(characterArray));
 80032e8:	2264      	movs	r2, #100	; 0x64
 80032ea:	2100      	movs	r1, #0
 80032ec:	4803      	ldr	r0, [pc, #12]	; (80032fc <printArray+0x20>)
 80032ee:	f007 f8b9 	bl	800a464 <memset>
    test = 0;
 80032f2:	4b04      	ldr	r3, [pc, #16]	; (8003304 <printArray+0x28>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20002108 	.word	0x20002108
 8003300:	0800bcac 	.word	0x0800bcac
 8003304:	2000216c 	.word	0x2000216c

08003308 <returnTest>:

int returnTest() {
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
    return test;
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <returnTest+0x14>)
 800330e:	781b      	ldrb	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	2000216c 	.word	0x2000216c

08003320 <turnOffTest>:

void turnOffTest() {
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
    test = 0;
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <turnOffTest+0x14>)
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
}
 800332a:	bf00      	nop
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	2000216c 	.word	0x2000216c

08003338 <returnConnection>:

int returnConnection() {
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
    return connected;
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <returnConnection+0x14>)
 800333e:	781b      	ldrb	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	20002105 	.word	0x20002105

08003350 <setMPGameChoice>:

void setMPGameChoice() {
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
    mpGameChoice = characterArray[0] - '0';
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <setMPGameChoice+0x20>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	3b30      	subs	r3, #48	; 0x30
 800335a:	b2da      	uxtb	r2, r3
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <setMPGameChoice+0x24>)
 800335e:	701a      	strb	r2, [r3, #0]
    printf("%d\r\n", mpGameChoice);
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <setMPGameChoice+0x24>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	4619      	mov	r1, r3
 8003366:	4804      	ldr	r0, [pc, #16]	; (8003378 <setMPGameChoice+0x28>)
 8003368:	f007 f884 	bl	800a474 <iprintf>
}
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20002108 	.word	0x20002108
 8003374:	2000216d 	.word	0x2000216d
 8003378:	0800bcb4 	.word	0x0800bcb4

0800337c <returnMPGameChoice>:

uint8_t returnMPGameChoice() {
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
    return mpGameChoice;
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <returnMPGameChoice+0x14>)
 8003382:	781b      	ldrb	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	2000216d 	.word	0x2000216d

08003394 <setCoordinate>:

uint8_t returnCoord() {
    return x_coord;
}

void setCoordinate() {
 8003394:	b580      	push	{r7, lr}
 8003396:	b09a      	sub	sp, #104	; 0x68
 8003398:	af00      	add	r7, sp, #0
    char buffer[100];
    strncpy(buffer, characterArray, strlen(characterArray) - 2);
 800339a:	480d      	ldr	r0, [pc, #52]	; (80033d0 <setCoordinate+0x3c>)
 800339c:	f7fc ff18 	bl	80001d0 <strlen>
 80033a0:	4603      	mov	r3, r0
 80033a2:	1e9a      	subs	r2, r3, #2
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	490a      	ldr	r1, [pc, #40]	; (80033d0 <setCoordinate+0x3c>)
 80033a8:	4618      	mov	r0, r3
 80033aa:	f007 f9a0 	bl	800a6ee <strncpy>
    buffer[strlen(characterArray) - 1] = '\0';
 80033ae:	4808      	ldr	r0, [pc, #32]	; (80033d0 <setCoordinate+0x3c>)
 80033b0:	f7fc ff0e 	bl	80001d0 <strlen>
 80033b4:	4603      	mov	r3, r0
 80033b6:	3b01      	subs	r3, #1
 80033b8:	3368      	adds	r3, #104	; 0x68
 80033ba:	443b      	add	r3, r7
 80033bc:	2200      	movs	r2, #0
 80033be:	f803 2c64 	strb.w	r2, [r3, #-100]

    return atoi(buffer);
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	4618      	mov	r0, r3
 80033c6:	f007 f81e 	bl	800a406 <atoi>
}
 80033ca:	3768      	adds	r7, #104	; 0x68
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20002108 	.word	0x20002108

080033d4 <initSpaceInvaders>:
 * initialises ammo by clearing all values using initAmmo()
 * initialises comets by clearing all values using initComets()
 * initialises stars by clearing all values using initStars()
 *
 */
void initSpaceInvaders(){
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
    money = 0;
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <initSpaceInvaders+0x6c>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
    lives = 3;
 80033de:	4b19      	ldr	r3, [pc, #100]	; (8003444 <initSpaceInvaders+0x70>)
 80033e0:	2203      	movs	r2, #3
 80033e2:	701a      	strb	r2, [r3, #0]

    Displ_CLS(DARK_GREY);
 80033e4:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80033e8:	f001 fe00 	bl	8004fec <Displ_CLS>
    // Seed the random number generator
    srand(HAL_GetTick());
 80033ec:	f002 fa6a 	bl	80058c4 <HAL_GetTick>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f007 f8cc 	bl	800a590 <srand>
    comet_delay = RANDOM(5,20);
 80033f8:	f007 f8f8 	bl	800a5ec <rand>
 80033fc:	4603      	mov	r3, r0
 80033fe:	425a      	negs	r2, r3
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	f002 020f 	and.w	r2, r2, #15
 8003408:	bf58      	it	pl
 800340a:	4253      	negpl	r3, r2
 800340c:	b2db      	uxtb	r3, r3
 800340e:	3305      	adds	r3, #5
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <initSpaceInvaders+0x74>)
 8003414:	701a      	strb	r2, [r3, #0]
    initSpaceShip();
 8003416:	f000 f81f 	bl	8003458 <initSpaceShip>
    initAmmo(&ammo,0);
 800341a:	2100      	movs	r1, #0
 800341c:	480b      	ldr	r0, [pc, #44]	; (800344c <initSpaceInvaders+0x78>)
 800341e:	f000 f827 	bl	8003470 <initAmmo>
    if(in_multiplayer){
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <initSpaceInvaders+0x7c>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <initSpaceInvaders+0x5e>
        initAmmo(&enemy_ammo,1);
 800342a:	2101      	movs	r1, #1
 800342c:	4809      	ldr	r0, [pc, #36]	; (8003454 <initSpaceInvaders+0x80>)
 800342e:	f000 f81f 	bl	8003470 <initAmmo>
    }
    initComets();
 8003432:	f000 f845 	bl	80034c0 <initComets>
    initStars();
 8003436:	f000 f86d 	bl	8003514 <initStars>
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200021d4 	.word	0x200021d4
 8003444:	20000049 	.word	0x20000049
 8003448:	200021d8 	.word	0x200021d8
 800344c:	20002170 	.word	0x20002170
 8003450:	20000051 	.word	0x20000051
 8003454:	20002180 	.word	0x20002180

08003458 <initSpaceShip>:

void initSpaceShip(){
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
    SpaceShip.x = SCREEN_WIDTH/2;
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <initSpaceShip+0x14>)
 800345e:	2228      	movs	r2, #40	; 0x28
 8003460:	701a      	strb	r2, [r3, #0]
}
 8003462:	bf00      	nop
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	2000004c 	.word	0x2000004c

08003470 <initAmmo>:

void initAmmo(bullets *am,int enemy){
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
    am->enemy = enemy;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	b25a      	sxtb	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	701a      	strb	r2, [r3, #0]
    am->in_play=0;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	705a      	strb	r2, [r3, #1]
    for (int i = 0;i<MAX_BULLETS;i++){
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e00e      	b.n	80034ac <initAmmo+0x3c>
        am->bullet_ar[i].x = -1;
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	4413      	add	r3, r2
 8003496:	22ff      	movs	r2, #255	; 0xff
 8003498:	709a      	strb	r2, [r3, #2]
        am->bullet_ar[i].y = -1;
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	22ff      	movs	r2, #255	; 0xff
 80034a4:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_BULLETS;i++){
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	3301      	adds	r3, #1
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	dded      	ble.n	800348e <initAmmo+0x1e>
    }
}
 80034b2:	bf00      	nop
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <initComets>:

void initComets(){
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
    Comet.in_play = 0;
 80034c6:	4b12      	ldr	r3, [pc, #72]	; (8003510 <initComets+0x50>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 80034cc:	2300      	movs	r3, #0
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	e014      	b.n	80034fc <initComets+0x3c>
        COMET_X(i) = -1;
 80034d2:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <initComets+0x50>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	22ff      	movs	r2, #255	; 0xff
 80034dc:	705a      	strb	r2, [r3, #1]
        COMET_Y(i) = -1;
 80034de:	4a0c      	ldr	r2, [pc, #48]	; (8003510 <initComets+0x50>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	22ff      	movs	r2, #255	; 0xff
 80034e8:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(i) = 2;
 80034ea:	4a09      	ldr	r2, [pc, #36]	; (8003510 <initComets+0x50>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	2202      	movs	r2, #2
 80034f4:	70da      	strb	r2, [r3, #3]
    for (int i = 0;i<MAX_COMETS;i++){
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3301      	adds	r3, #1
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b09      	cmp	r3, #9
 8003500:	dde7      	ble.n	80034d2 <initComets+0x12>
    }
}
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	20002190 	.word	0x20002190

08003514 <initStars>:

void initStars(){
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
    Star.in_play = 0;
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <initStars+0x44>)
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
    for (int i = 0;i<MAX_COMETS;i++){
 8003520:	2300      	movs	r3, #0
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	e00e      	b.n	8003544 <initStars+0x30>
    	STAR_X(i) = -1;
 8003526:	4a0c      	ldr	r2, [pc, #48]	; (8003558 <initStars+0x44>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	4413      	add	r3, r2
 800352e:	22ff      	movs	r2, #255	; 0xff
 8003530:	705a      	strb	r2, [r3, #1]
    	STAR_Y(i) = -1;
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <initStars+0x44>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4413      	add	r3, r2
 800353a:	22ff      	movs	r2, #255	; 0xff
 800353c:	709a      	strb	r2, [r3, #2]
    for (int i = 0;i<MAX_COMETS;i++){
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3301      	adds	r3, #1
 8003542:	607b      	str	r3, [r7, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b09      	cmp	r3, #9
 8003548:	dded      	ble.n	8003526 <initStars+0x12>
    }
}
 800354a:	bf00      	nop
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	200021bc 	.word	0x200021bc

0800355c <spawnComet>:

void spawnComet(){
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
    if(comet_delay < 1 && Comet.in_play < MAX_COMETS){
 8003560:	4b3d      	ldr	r3, [pc, #244]	; (8003658 <spawnComet+0xfc>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d16e      	bne.n	8003646 <spawnComet+0xea>
 8003568:	4b3c      	ldr	r3, [pc, #240]	; (800365c <spawnComet+0x100>)
 800356a:	f993 3000 	ldrsb.w	r3, [r3]
 800356e:	2b09      	cmp	r3, #9
 8003570:	dc69      	bgt.n	8003646 <spawnComet+0xea>
    	COMET_X(Comet.in_play) = RANDOM(PLAYABLE_OFFSET, PLAYABLE_MAX);
 8003572:	f007 f83b 	bl	800a5ec <rand>
 8003576:	4602      	mov	r2, r0
 8003578:	4b39      	ldr	r3, [pc, #228]	; (8003660 <spawnComet+0x104>)
 800357a:	fb83 1302 	smull	r1, r3, r3, r2
 800357e:	4413      	add	r3, r2
 8003580:	1199      	asrs	r1, r3, #6
 8003582:	17d3      	asrs	r3, r2, #31
 8003584:	1ac9      	subs	r1, r1, r3
 8003586:	460b      	mov	r3, r1
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	440b      	add	r3, r1
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	1a5b      	subs	r3, r3, r1
 8003590:	1ad1      	subs	r1, r2, r3
 8003592:	b2cb      	uxtb	r3, r1
 8003594:	4a31      	ldr	r2, [pc, #196]	; (800365c <spawnComet+0x100>)
 8003596:	f992 2000 	ldrsb.w	r2, [r2]
 800359a:	4610      	mov	r0, r2
 800359c:	3305      	adds	r3, #5
 800359e:	b2d9      	uxtb	r1, r3
 80035a0:	4a2e      	ldr	r2, [pc, #184]	; (800365c <spawnComet+0x100>)
 80035a2:	0083      	lsls	r3, r0, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	460a      	mov	r2, r1
 80035a8:	705a      	strb	r2, [r3, #1]
    	COMET_Y(Comet.in_play) = 0;
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <spawnComet+0x100>)
 80035ac:	f993 3000 	ldrsb.w	r3, [r3]
 80035b0:	4a2a      	ldr	r2, [pc, #168]	; (800365c <spawnComet+0x100>)
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	2200      	movs	r2, #0
 80035b8:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(Comet.in_play) = RANDOM(MIN_COMET_SIZE,MAX_COMET_SIZE);
 80035ba:	f007 f817 	bl	800a5ec <rand>
 80035be:	4602      	mov	r2, r0
 80035c0:	4b28      	ldr	r3, [pc, #160]	; (8003664 <spawnComet+0x108>)
 80035c2:	fb83 3102 	smull	r3, r1, r3, r2
 80035c6:	17d3      	asrs	r3, r2, #31
 80035c8:	1ac9      	subs	r1, r1, r3
 80035ca:	460b      	mov	r3, r1
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	440b      	add	r3, r1
 80035d0:	1ad1      	subs	r1, r2, r3
 80035d2:	b2cb      	uxtb	r3, r1
 80035d4:	3302      	adds	r3, #2
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	4b20      	ldr	r3, [pc, #128]	; (800365c <spawnComet+0x100>)
 80035da:	f993 3000 	ldrsb.w	r3, [r3]
 80035de:	b251      	sxtb	r1, r2
 80035e0:	4a1e      	ldr	r2, [pc, #120]	; (800365c <spawnComet+0x100>)
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	460a      	mov	r2, r1
 80035e8:	70da      	strb	r2, [r3, #3]

        COMET_COINS(Comet.in_play) = 7 - COMET_SIZE(Comet.in_play);
 80035ea:	4b1c      	ldr	r3, [pc, #112]	; (800365c <spawnComet+0x100>)
 80035ec:	f993 3000 	ldrsb.w	r3, [r3]
 80035f0:	4a1a      	ldr	r2, [pc, #104]	; (800365c <spawnComet+0x100>)
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f1c3 0307 	rsb	r3, r3, #7
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4b16      	ldr	r3, [pc, #88]	; (800365c <spawnComet+0x100>)
 8003604:	f993 3000 	ldrsb.w	r3, [r3]
 8003608:	b251      	sxtb	r1, r2
 800360a:	4a14      	ldr	r2, [pc, #80]	; (800365c <spawnComet+0x100>)
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	460a      	mov	r2, r1
 8003612:	711a      	strb	r2, [r3, #4]
        comet_delay = RANDOM(5,20);
 8003614:	f006 ffea 	bl	800a5ec <rand>
 8003618:	4603      	mov	r3, r0
 800361a:	425a      	negs	r2, r3
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	f002 020f 	and.w	r2, r2, #15
 8003624:	bf58      	it	pl
 8003626:	4253      	negpl	r3, r2
 8003628:	b2db      	uxtb	r3, r3
 800362a:	3305      	adds	r3, #5
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <spawnComet+0xfc>)
 8003630:	701a      	strb	r2, [r3, #0]
        Comet.in_play++;
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <spawnComet+0x100>)
 8003634:	f993 3000 	ldrsb.w	r3, [r3]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	3301      	adds	r3, #1
 800363c:	b2db      	uxtb	r3, r3
 800363e:	b25a      	sxtb	r2, r3
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <spawnComet+0x100>)
 8003642:	701a      	strb	r2, [r3, #0]
 8003644:	e006      	b.n	8003654 <spawnComet+0xf8>
    }else{
        comet_delay--;
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <spawnComet+0xfc>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	3b01      	subs	r3, #1
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4b02      	ldr	r3, [pc, #8]	; (8003658 <spawnComet+0xfc>)
 8003650:	701a      	strb	r2, [r3, #0]
    }

}
 8003652:	bf00      	nop
 8003654:	bf00      	nop
 8003656:	bd80      	pop	{r7, pc}
 8003658:	200021d8 	.word	0x200021d8
 800365c:	20002190 	.word	0x20002190
 8003660:	e6c2b449 	.word	0xe6c2b449
 8003664:	55555556 	.word	0x55555556

08003668 <spawnBullet>:

void spawnBullet(int enemy){
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
    int x_val = SpaceShip.x;
 8003670:	4b22      	ldr	r3, [pc, #136]	; (80036fc <spawnBullet+0x94>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]
    int y_val = SpaceShip.y - 3;
 8003676:	4b21      	ldr	r3, [pc, #132]	; (80036fc <spawnBullet+0x94>)
 8003678:	785b      	ldrb	r3, [r3, #1]
 800367a:	3b03      	subs	r3, #3
 800367c:	617b      	str	r3, [r7, #20]
    bullets *am_p;
    if (enemy){
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <spawnBullet+0x22>
        am_p = &enemy_ammo;
 8003684:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <spawnBullet+0x98>)
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	e001      	b.n	800368e <spawnBullet+0x26>
    }else{
        am_p = &ammo;
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <spawnBullet+0x9c>)
 800368c:	613b      	str	r3, [r7, #16]
    }
    if(am_p->in_play < MAX_BULLETS && bullet_delay == 0){
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003694:	2b05      	cmp	r3, #5
 8003696:	dc2a      	bgt.n	80036ee <spawnBullet+0x86>
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <spawnBullet+0xa0>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d126      	bne.n	80036ee <spawnBullet+0x86>
        if(am_p->enemy){
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f993 3000 	ldrsb.w	r3, [r3]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <spawnBullet+0x46>
            //x_val = read the input from multiplayer;
            y_val = 3;
 80036aa:	2303      	movs	r3, #3
 80036ac:	617b      	str	r3, [r7, #20]
        }
        am_p->bullet_ar[am_p->in_play].x = x_val;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	b2d1      	uxtb	r1, r2
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	460a      	mov	r2, r1
 80036c0:	709a      	strb	r2, [r3, #2]
        am_p->bullet_ar[am_p->in_play].y = y_val;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	b2d1      	uxtb	r1, r2
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4413      	add	r3, r2
 80036d2:	460a      	mov	r2, r1
 80036d4:	70da      	strb	r2, [r3, #3]
        am_p->in_play++;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	b25a      	sxtb	r2, r3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	705a      	strb	r2, [r3, #1]
        bullet_delay = MAX_DELAY_BULLETS;
 80036e8:	4b07      	ldr	r3, [pc, #28]	; (8003708 <spawnBullet+0xa0>)
 80036ea:	220a      	movs	r2, #10
 80036ec:	701a      	strb	r2, [r3, #0]
    }
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	2000004c 	.word	0x2000004c
 8003700:	20002180 	.word	0x20002180
 8003704:	20002170 	.word	0x20002170
 8003708:	200021d1 	.word	0x200021d1

0800370c <spawnStar>:

void spawnStar(){
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
    if(star_delay < 1 && Star.in_play < MAX_STARS){
 8003710:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <spawnStar+0xa4>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d141      	bne.n	800379c <spawnStar+0x90>
 8003718:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <spawnStar+0xa8>)
 800371a:	f993 3000 	ldrsb.w	r3, [r3]
 800371e:	2b09      	cmp	r3, #9
 8003720:	dc3c      	bgt.n	800379c <spawnStar+0x90>
    	STAR_X(Star.in_play) = RANDOM(PLAYABLE_OFFSET,PLAYABLE_MAX);
 8003722:	f006 ff63 	bl	800a5ec <rand>
 8003726:	4602      	mov	r2, r0
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <spawnStar+0xac>)
 800372a:	fb83 1302 	smull	r1, r3, r3, r2
 800372e:	4413      	add	r3, r2
 8003730:	1199      	asrs	r1, r3, #6
 8003732:	17d3      	asrs	r3, r2, #31
 8003734:	1ac9      	subs	r1, r1, r3
 8003736:	460b      	mov	r3, r1
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	440b      	add	r3, r1
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	1a5b      	subs	r3, r3, r1
 8003740:	1ad1      	subs	r1, r2, r3
 8003742:	b2cb      	uxtb	r3, r1
 8003744:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <spawnStar+0xa8>)
 8003746:	f992 2000 	ldrsb.w	r2, [r2]
 800374a:	4610      	mov	r0, r2
 800374c:	3305      	adds	r3, #5
 800374e:	b2d9      	uxtb	r1, r3
 8003750:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <spawnStar+0xa8>)
 8003752:	0043      	lsls	r3, r0, #1
 8003754:	4413      	add	r3, r2
 8003756:	460a      	mov	r2, r1
 8003758:	705a      	strb	r2, [r3, #1]
    	STAR_Y(Star.in_play) = 0;
 800375a:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <spawnStar+0xa8>)
 800375c:	f993 3000 	ldrsb.w	r3, [r3]
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <spawnStar+0xa8>)
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	4413      	add	r3, r2
 8003766:	2200      	movs	r2, #0
 8003768:	709a      	strb	r2, [r3, #2]
        star_delay = RANDOM(5,20);
 800376a:	f006 ff3f 	bl	800a5ec <rand>
 800376e:	4603      	mov	r3, r0
 8003770:	425a      	negs	r2, r3
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	f002 020f 	and.w	r2, r2, #15
 800377a:	bf58      	it	pl
 800377c:	4253      	negpl	r3, r2
 800377e:	b2db      	uxtb	r3, r3
 8003780:	3305      	adds	r3, #5
 8003782:	b2da      	uxtb	r2, r3
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <spawnStar+0xa4>)
 8003786:	701a      	strb	r2, [r3, #0]
        Star.in_play++;
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <spawnStar+0xa8>)
 800378a:	f993 3000 	ldrsb.w	r3, [r3]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	3301      	adds	r3, #1
 8003792:	b2db      	uxtb	r3, r3
 8003794:	b25a      	sxtb	r2, r3
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <spawnStar+0xa8>)
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e006      	b.n	80037aa <spawnStar+0x9e>
    }else{
        star_delay--;
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <spawnStar+0xa4>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	4b02      	ldr	r3, [pc, #8]	; (80037b0 <spawnStar+0xa4>)
 80037a6:	701a      	strb	r2, [r3, #0]
    }
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	200021d9 	.word	0x200021d9
 80037b4:	200021bc 	.word	0x200021bc
 80037b8:	e6c2b449 	.word	0xe6c2b449

080037bc <moveBullets>:

void moveBullets(){
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
	displayAmmo(DARK_GREY);
 80037c2:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80037c6:	f000 fbc7 	bl	8003f58 <displayAmmo>
	for(int i = 0; i < ammo.in_play; i++){
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	e056      	b.n	800387e <moveBullets+0xc2>
		for (int j = 0; j < Comet.in_play; j++){
 80037d0:	2300      	movs	r3, #0
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	e03c      	b.n	8003850 <moveBullets+0x94>
			if(AMMO_X(i) >= COMET_X(j) && AMMO_X(i) < COMET_X(j) + COMET_SIZE(j)){
 80037d6:	4a31      	ldr	r2, [pc, #196]	; (800389c <moveBullets+0xe0>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4413      	add	r3, r2
 80037de:	789a      	ldrb	r2, [r3, #2]
 80037e0:	492f      	ldr	r1, [pc, #188]	; (80038a0 <moveBullets+0xe4>)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	785b      	ldrb	r3, [r3, #1]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d32d      	bcc.n	800384a <moveBullets+0x8e>
 80037ee:	4a2b      	ldr	r2, [pc, #172]	; (800389c <moveBullets+0xe0>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	789b      	ldrb	r3, [r3, #2]
 80037f8:	4619      	mov	r1, r3
 80037fa:	4a29      	ldr	r2, [pc, #164]	; (80038a0 <moveBullets+0xe4>)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	4618      	mov	r0, r3
 8003806:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <moveBullets+0xe4>)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003812:	4403      	add	r3, r0
 8003814:	4299      	cmp	r1, r3
 8003816:	da18      	bge.n	800384a <moveBullets+0x8e>
				if (AMMO_Y(i) <= COMET_Y(j) + COMET_SIZE(j) - 1){
 8003818:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <moveBullets+0xe4>)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	789b      	ldrb	r3, [r3, #2]
 8003822:	4619      	mov	r1, r3
 8003824:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <moveBullets+0xe4>)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003830:	18ca      	adds	r2, r1, r3
 8003832:	491a      	ldr	r1, [pc, #104]	; (800389c <moveBullets+0xe0>)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	440b      	add	r3, r1
 800383a:	78db      	ldrb	r3, [r3, #3]
 800383c:	429a      	cmp	r2, r3
 800383e:	dd04      	ble.n	800384a <moveBullets+0x8e>
					hitComet(i,j);
 8003840:	6839      	ldr	r1, [r7, #0]
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fab8 	bl	8003db8 <hitComet>
					continue;
 8003848:	bf00      	nop
		for (int j = 0; j < Comet.in_play; j++){
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <moveBullets+0xe4>)
 8003852:	f993 3000 	ldrsb.w	r3, [r3]
 8003856:	461a      	mov	r2, r3
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	4293      	cmp	r3, r2
 800385c:	dbbb      	blt.n	80037d6 <moveBullets+0x1a>
				}
			}

		}
		AMMO_Y(i)--;
 800385e:	4a0f      	ldr	r2, [pc, #60]	; (800389c <moveBullets+0xe0>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	4413      	add	r3, r2
 8003866:	78db      	ldrb	r3, [r3, #3]
 8003868:	3b01      	subs	r3, #1
 800386a:	b2d9      	uxtb	r1, r3
 800386c:	4a0b      	ldr	r2, [pc, #44]	; (800389c <moveBullets+0xe0>)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4413      	add	r3, r2
 8003874:	460a      	mov	r2, r1
 8003876:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < ammo.in_play; i++){
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3301      	adds	r3, #1
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <moveBullets+0xe0>)
 8003880:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003884:	461a      	mov	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4293      	cmp	r3, r2
 800388a:	dba1      	blt.n	80037d0 <moveBullets+0x14>
				AMMO_Y(j) = AMMO_Y(j+1);
			}
			ammo.in_play--;
		}
	}
	displayAmmo(RED);
 800388c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003890:	f000 fb62 	bl	8003f58 <displayAmmo>
}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20002170 	.word	0x20002170
 80038a0:	20002190 	.word	0x20002190

080038a4 <moveEnemyBullets>:

void moveEnemyBullets(void){
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
    if (!in_multiplayer){
 80038aa:	4b57      	ldr	r3, [pc, #348]	; (8003a08 <moveEnemyBullets+0x164>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80a6 	beq.w	8003a00 <moveEnemyBullets+0x15c>
        //QD << "not multiplayer";  // change to uart debug
        return;
    }
    displayAmmo(DARK_GREY);
 80038b4:	f642 402c 	movw	r0, #11308	; 0x2c2c
 80038b8:	f000 fb4e 	bl	8003f58 <displayAmmo>
    for(int i = 0; i < enemy_ammo.in_play; i++){
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e091      	b.n	80039e6 <moveEnemyBullets+0x142>
        if(E_AMMO_X(i) <= SPACESHIP_X_BOUND(+) && E_AMMO_X(i) >= SPACESHIP_X_BOUND(-)){
 80038c2:	4a52      	ldr	r2, [pc, #328]	; (8003a0c <moveEnemyBullets+0x168>)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	789b      	ldrb	r3, [r3, #2]
 80038cc:	461a      	mov	r2, r3
 80038ce:	4b50      	ldr	r3, [pc, #320]	; (8003a10 <moveEnemyBullets+0x16c>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	3302      	adds	r3, #2
 80038d4:	429a      	cmp	r2, r3
 80038d6:	dc45      	bgt.n	8003964 <moveEnemyBullets+0xc0>
 80038d8:	4a4c      	ldr	r2, [pc, #304]	; (8003a0c <moveEnemyBullets+0x168>)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	789b      	ldrb	r3, [r3, #2]
 80038e2:	461a      	mov	r2, r3
 80038e4:	4b4a      	ldr	r3, [pc, #296]	; (8003a10 <moveEnemyBullets+0x16c>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	3b02      	subs	r3, #2
 80038ea:	429a      	cmp	r2, r3
 80038ec:	db3a      	blt.n	8003964 <moveEnemyBullets+0xc0>
            if (E_AMMO_Y(i) >= SPACESHIP_Y_BOUND && hit == 0){
 80038ee:	4a47      	ldr	r2, [pc, #284]	; (8003a0c <moveEnemyBullets+0x168>)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	4413      	add	r3, r2
 80038f6:	78db      	ldrb	r3, [r3, #3]
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b45      	ldr	r3, [pc, #276]	; (8003a10 <moveEnemyBullets+0x16c>)
 80038fc:	785b      	ldrb	r3, [r3, #1]
 80038fe:	3b02      	subs	r3, #2
 8003900:	429a      	cmp	r2, r3
 8003902:	db2f      	blt.n	8003964 <moveEnemyBullets+0xc0>
 8003904:	4b43      	ldr	r3, [pc, #268]	; (8003a14 <moveEnemyBullets+0x170>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d12b      	bne.n	8003964 <moveEnemyBullets+0xc0>
                beenHit();
 800390c:	f000 fca4 	bl	8004258 <beenHit>
                for(int j = i; j < MAX_BULLETS - 1; j++){
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	e01a      	b.n	800394c <moveEnemyBullets+0xa8>
                	E_AMMO_X(j) = E_AMMO_X(j+1);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	3301      	adds	r3, #1
 800391a:	4a3c      	ldr	r2, [pc, #240]	; (8003a0c <moveEnemyBullets+0x168>)
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	7899      	ldrb	r1, [r3, #2]
 8003922:	4a3a      	ldr	r2, [pc, #232]	; (8003a0c <moveEnemyBullets+0x168>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4413      	add	r3, r2
 800392a:	460a      	mov	r2, r1
 800392c:	709a      	strb	r2, [r3, #2]
                	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3301      	adds	r3, #1
 8003932:	4a36      	ldr	r2, [pc, #216]	; (8003a0c <moveEnemyBullets+0x168>)
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	4413      	add	r3, r2
 8003938:	78d9      	ldrb	r1, [r3, #3]
 800393a:	4a34      	ldr	r2, [pc, #208]	; (8003a0c <moveEnemyBullets+0x168>)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4413      	add	r3, r2
 8003942:	460a      	mov	r2, r1
 8003944:	70da      	strb	r2, [r3, #3]
                for(int j = i; j < MAX_BULLETS - 1; j++){
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	3301      	adds	r3, #1
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b04      	cmp	r3, #4
 8003950:	dde1      	ble.n	8003916 <moveEnemyBullets+0x72>
                }
                enemy_ammo.in_play--;
 8003952:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <moveEnemyBullets+0x168>)
 8003954:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b2db      	uxtb	r3, r3
 800395e:	b25a      	sxtb	r2, r3
 8003960:	4b2a      	ldr	r3, [pc, #168]	; (8003a0c <moveEnemyBullets+0x168>)
 8003962:	705a      	strb	r2, [r3, #1]
            }
        }
        E_AMMO_Y(i)++;
 8003964:	4a29      	ldr	r2, [pc, #164]	; (8003a0c <moveEnemyBullets+0x168>)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	78db      	ldrb	r3, [r3, #3]
 800396e:	3301      	adds	r3, #1
 8003970:	b2d9      	uxtb	r1, r3
 8003972:	4a26      	ldr	r2, [pc, #152]	; (8003a0c <moveEnemyBullets+0x168>)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	4413      	add	r3, r2
 800397a:	460a      	mov	r2, r1
 800397c:	70da      	strb	r2, [r3, #3]
        if (E_AMMO_Y(i) > SCREEN_HEIGHT - 1){
 800397e:	4a23      	ldr	r2, [pc, #140]	; (8003a0c <moveEnemyBullets+0x168>)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	78db      	ldrb	r3, [r3, #3]
 8003988:	2b3b      	cmp	r3, #59	; 0x3b
 800398a:	d929      	bls.n	80039e0 <moveEnemyBullets+0x13c>
            for(int j = i; j < MAX_BULLETS - 1; j++){
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	e01a      	b.n	80039c8 <moveEnemyBullets+0x124>
            	E_AMMO_X(j) = E_AMMO_X(j+1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3301      	adds	r3, #1
 8003996:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <moveEnemyBullets+0x168>)
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	7899      	ldrb	r1, [r3, #2]
 800399e:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <moveEnemyBullets+0x168>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4413      	add	r3, r2
 80039a6:	460a      	mov	r2, r1
 80039a8:	709a      	strb	r2, [r3, #2]
            	E_AMMO_Y(j)= E_AMMO_Y(j+1);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3301      	adds	r3, #1
 80039ae:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <moveEnemyBullets+0x168>)
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	78d9      	ldrb	r1, [r3, #3]
 80039b6:	4a15      	ldr	r2, [pc, #84]	; (8003a0c <moveEnemyBullets+0x168>)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4413      	add	r3, r2
 80039be:	460a      	mov	r2, r1
 80039c0:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_BULLETS - 1; j++){
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3301      	adds	r3, #1
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	dde1      	ble.n	8003992 <moveEnemyBullets+0xee>
            }
            enemy_ammo.in_play--;
 80039ce:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <moveEnemyBullets+0x168>)
 80039d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	b25a      	sxtb	r2, r3
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <moveEnemyBullets+0x168>)
 80039de:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < enemy_ammo.in_play; i++){
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3301      	adds	r3, #1
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <moveEnemyBullets+0x168>)
 80039e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80039ec:	461a      	mov	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4293      	cmp	r3, r2
 80039f2:	f6ff af66 	blt.w	80038c2 <moveEnemyBullets+0x1e>
        }
    }
    displayAmmo(LIGHT_BLUE);
 80039f6:	f24f 70db 	movw	r0, #63451	; 0xf7db
 80039fa:	f000 faad 	bl	8003f58 <displayAmmo>
 80039fe:	e000      	b.n	8003a02 <moveEnemyBullets+0x15e>
        return;
 8003a00:	bf00      	nop
}
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000051 	.word	0x20000051
 8003a0c:	20002180 	.word	0x20002180
 8003a10:	2000004c 	.word	0x2000004c
 8003a14:	20001eeb 	.word	0x20001eeb

08003a18 <moveComets>:

void moveComets(){
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
	displayComets(DARK_GREY);
 8003a1e:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003a22:	f000 faf3 	bl	800400c <displayComets>
	for (int i = 0; i<Comet.in_play; i++){
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	e0eb      	b.n	8003c04 <moveComets+0x1ec>
		for(int j = 0; j < COMET_SIZE(i); j++){
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	e05b      	b.n	8003aea <moveComets+0xd2>
			if(COMET_X(i) + j <= SPACESHIP_X_BOUND(+) && COMET_X(i) + j >= SPACESHIP_X_BOUND(-)){
 8003a32:	4a7c      	ldr	r2, [pc, #496]	; (8003c24 <moveComets+0x20c>)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	441a      	add	r2, r3
 8003a42:	4b79      	ldr	r3, [pc, #484]	; (8003c28 <moveComets+0x210>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	3302      	adds	r3, #2
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	dc4b      	bgt.n	8003ae4 <moveComets+0xcc>
 8003a4c:	4a75      	ldr	r2, [pc, #468]	; (8003c24 <moveComets+0x20c>)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	785b      	ldrb	r3, [r3, #1]
 8003a56:	461a      	mov	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	441a      	add	r2, r3
 8003a5c:	4b72      	ldr	r3, [pc, #456]	; (8003c28 <moveComets+0x210>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	3b02      	subs	r3, #2
 8003a62:	429a      	cmp	r2, r3
 8003a64:	db3e      	blt.n	8003ae4 <moveComets+0xcc>
				if(powerUp == 2 && COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND){
 8003a66:	4b71      	ldr	r3, [pc, #452]	; (8003c2c <moveComets+0x214>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d11d      	bne.n	8003aaa <moveComets+0x92>
 8003a6e:	4a6d      	ldr	r2, [pc, #436]	; (8003c24 <moveComets+0x20c>)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	789b      	ldrb	r3, [r3, #2]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4a6a      	ldr	r2, [pc, #424]	; (8003c24 <moveComets+0x20c>)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003a86:	18ca      	adds	r2, r1, r3
 8003a88:	4b67      	ldr	r3, [pc, #412]	; (8003c28 <moveComets+0x210>)
 8003a8a:	785b      	ldrb	r3, [r3, #1]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	db0b      	blt.n	8003aaa <moveComets+0x92>
					hitComet(420,i);
 8003a92:	68f9      	ldr	r1, [r7, #12]
 8003a94:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003a98:	f000 f98e 	bl	8003db8 <hitComet>
					displayPowerup(DARK_GREY);
 8003a9c:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003aa0:	f000 fc3e 	bl	8004320 <displayPowerup>
					powerUp = 0;
 8003aa4:	4b61      	ldr	r3, [pc, #388]	; (8003c2c <moveComets+0x214>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
				}
                if (COMET_Y(i) + COMET_SIZE(i) - 1 >= SPACESHIP_Y_BOUND && hit == 0){
 8003aaa:	4a5e      	ldr	r2, [pc, #376]	; (8003c24 <moveComets+0x20c>)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	789b      	ldrb	r3, [r3, #2]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4a5b      	ldr	r2, [pc, #364]	; (8003c24 <moveComets+0x20c>)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003ac2:	18ca      	adds	r2, r1, r3
 8003ac4:	4b58      	ldr	r3, [pc, #352]	; (8003c28 <moveComets+0x210>)
 8003ac6:	785b      	ldrb	r3, [r3, #1]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	429a      	cmp	r2, r3
 8003acc:	db0a      	blt.n	8003ae4 <moveComets+0xcc>
 8003ace:	4b58      	ldr	r3, [pc, #352]	; (8003c30 <moveComets+0x218>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <moveComets+0xcc>
                    hitComet(420,i);
 8003ad6:	68f9      	ldr	r1, [r7, #12]
 8003ad8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003adc:	f000 f96c 	bl	8003db8 <hitComet>
                    beenHit();
 8003ae0:	f000 fbba 	bl	8004258 <beenHit>
		for(int j = 0; j < COMET_SIZE(i); j++){
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	4a4e      	ldr	r2, [pc, #312]	; (8003c24 <moveComets+0x20c>)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4293      	cmp	r3, r2
 8003afc:	db99      	blt.n	8003a32 <moveComets+0x1a>
                }
            }
        }
        if(powerUp == 1 && SpaceShip.x >= COMET_X(i) && SpaceShip.x <= COMET_X(i) + COMET_SIZE(i)){
 8003afe:	4b4b      	ldr	r3, [pc, #300]	; (8003c2c <moveComets+0x214>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d130      	bne.n	8003b68 <moveComets+0x150>
 8003b06:	4b48      	ldr	r3, [pc, #288]	; (8003c28 <moveComets+0x210>)
 8003b08:	781a      	ldrb	r2, [r3, #0]
 8003b0a:	4946      	ldr	r1, [pc, #280]	; (8003c24 <moveComets+0x20c>)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	785b      	ldrb	r3, [r3, #1]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d327      	bcc.n	8003b68 <moveComets+0x150>
 8003b18:	4b43      	ldr	r3, [pc, #268]	; (8003c28 <moveComets+0x210>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4a41      	ldr	r2, [pc, #260]	; (8003c24 <moveComets+0x20c>)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	4a3e      	ldr	r2, [pc, #248]	; (8003c24 <moveComets+0x20c>)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003b36:	4403      	add	r3, r0
 8003b38:	4299      	cmp	r1, r3
 8003b3a:	dc15      	bgt.n	8003b68 <moveComets+0x150>
        	hitComet(420,i);
 8003b3c:	68f9      	ldr	r1, [r7, #12]
 8003b3e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003b42:	f000 f939 	bl	8003db8 <hitComet>
        	if(powerUp_delay == 0){
 8003b46:	4b3b      	ldr	r3, [pc, #236]	; (8003c34 <moveComets+0x21c>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <moveComets+0x144>
        		displayPowerup(DARK_GREY);
 8003b4e:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003b52:	f000 fbe5 	bl	8004320 <displayPowerup>
        		powerUp = 0;
 8003b56:	4b35      	ldr	r3, [pc, #212]	; (8003c2c <moveComets+0x214>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]

        	}
        	powerUp_delay--;
 8003b5c:	4b35      	ldr	r3, [pc, #212]	; (8003c34 <moveComets+0x21c>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	4b33      	ldr	r3, [pc, #204]	; (8003c34 <moveComets+0x21c>)
 8003b66:	701a      	strb	r2, [r3, #0]
        }
        COMET_Y(i)++;
 8003b68:	4a2e      	ldr	r2, [pc, #184]	; (8003c24 <moveComets+0x20c>)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	789b      	ldrb	r3, [r3, #2]
 8003b72:	3301      	adds	r3, #1
 8003b74:	b2d9      	uxtb	r1, r3
 8003b76:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <moveComets+0x20c>)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	460a      	mov	r2, r1
 8003b80:	709a      	strb	r2, [r3, #2]
        if (COMET_Y(i) > SCREEN_HEIGHT - 1){
 8003b82:	4a28      	ldr	r2, [pc, #160]	; (8003c24 <moveComets+0x20c>)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	789b      	ldrb	r3, [r3, #2]
 8003b8c:	2b3b      	cmp	r3, #59	; 0x3b
 8003b8e:	d936      	bls.n	8003bfe <moveComets+0x1e6>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	e027      	b.n	8003be6 <moveComets+0x1ce>
            	COMET_X(j) = COMET_X(j+1);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	4a22      	ldr	r2, [pc, #136]	; (8003c24 <moveComets+0x20c>)
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	7859      	ldrb	r1, [r3, #1]
 8003ba2:	4a20      	ldr	r2, [pc, #128]	; (8003c24 <moveComets+0x20c>)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	460a      	mov	r2, r1
 8003bac:	705a      	strb	r2, [r3, #1]
            	COMET_Y(j) = COMET_Y(j+1);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <moveComets+0x20c>)
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	7899      	ldrb	r1, [r3, #2]
 8003bba:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <moveComets+0x20c>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	460a      	mov	r2, r1
 8003bc4:	709a      	strb	r2, [r3, #2]
                COMET_SIZE(j) = COMET_SIZE(j+1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	4a16      	ldr	r2, [pc, #88]	; (8003c24 <moveComets+0x20c>)
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003bd4:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <moveComets+0x20c>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	460a      	mov	r2, r1
 8003bde:	70da      	strb	r2, [r3, #3]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3301      	adds	r3, #1
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	ddd4      	ble.n	8003b96 <moveComets+0x17e>
            }
            Comet.in_play--;
 8003bec:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <moveComets+0x20c>)
 8003bee:	f993 3000 	ldrsb.w	r3, [r3]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	b25a      	sxtb	r2, r3
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <moveComets+0x20c>)
 8003bfc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<Comet.in_play; i++){
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3301      	adds	r3, #1
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <moveComets+0x20c>)
 8003c06:	f993 3000 	ldrsb.w	r3, [r3]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	f6ff af0c 	blt.w	8003a2c <moveComets+0x14>
        }
    }
    displayComets(GREY);
 8003c14:	f249 6096 	movw	r0, #38550	; 0x9696
 8003c18:	f000 f9f8 	bl	800400c <displayComets>
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20002190 	.word	0x20002190
 8003c28:	2000004c 	.word	0x2000004c
 8003c2c:	200021da 	.word	0x200021da
 8003c30:	20001eeb 	.word	0x20001eeb
 8003c34:	200021db 	.word	0x200021db

08003c38 <moveStars>:

void moveStars(){
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
	displayStars(DARK_GREY);
 8003c3e:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003c42:	f000 f959 	bl	8003ef8 <displayStars>
    for (int i = 0; i<Star.in_play; i++){
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	e040      	b.n	8003cce <moveStars+0x96>
    	STAR_Y(i)++;
 8003c4c:	4a27      	ldr	r2, [pc, #156]	; (8003cec <moveStars+0xb4>)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	789b      	ldrb	r3, [r3, #2]
 8003c56:	3301      	adds	r3, #1
 8003c58:	b2d9      	uxtb	r1, r3
 8003c5a:	4a24      	ldr	r2, [pc, #144]	; (8003cec <moveStars+0xb4>)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4413      	add	r3, r2
 8003c62:	460a      	mov	r2, r1
 8003c64:	709a      	strb	r2, [r3, #2]
        if (STAR_Y(i) > SCREEN_HEIGHT - 4){
 8003c66:	4a21      	ldr	r2, [pc, #132]	; (8003cec <moveStars+0xb4>)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4413      	add	r3, r2
 8003c6e:	789b      	ldrb	r3, [r3, #2]
 8003c70:	2b38      	cmp	r3, #56	; 0x38
 8003c72:	d929      	bls.n	8003cc8 <moveStars+0x90>
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	e01a      	b.n	8003cb0 <moveStars+0x78>
            	STAR_X(j) = STAR_X(j+1);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <moveStars+0xb4>)
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4413      	add	r3, r2
 8003c84:	7859      	ldrb	r1, [r3, #1]
 8003c86:	4a19      	ldr	r2, [pc, #100]	; (8003cec <moveStars+0xb4>)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	4413      	add	r3, r2
 8003c8e:	460a      	mov	r2, r1
 8003c90:	705a      	strb	r2, [r3, #1]
            	STAR_Y(j) = STAR_Y(j+1);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	4a15      	ldr	r2, [pc, #84]	; (8003cec <moveStars+0xb4>)
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	7899      	ldrb	r1, [r3, #2]
 8003c9e:	4a13      	ldr	r2, [pc, #76]	; (8003cec <moveStars+0xb4>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	4413      	add	r3, r2
 8003ca6:	460a      	mov	r2, r1
 8003ca8:	709a      	strb	r2, [r3, #2]
            for(int j = i; j < MAX_COMETS - 1; j++){
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	3301      	adds	r3, #1
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	dde1      	ble.n	8003c7a <moveStars+0x42>
            }
            Star.in_play--;
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <moveStars+0xb4>)
 8003cb8:	f993 3000 	ldrsb.w	r3, [r3]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	b25a      	sxtb	r2, r3
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <moveStars+0xb4>)
 8003cc6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<Star.in_play; i++){
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <moveStars+0xb4>)
 8003cd0:	f993 3000 	ldrsb.w	r3, [r3]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	dbb7      	blt.n	8003c4c <moveStars+0x14>
        }
    }
    displayStars(YELLOW);
 8003cdc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003ce0:	f000 f90a 	bl	8003ef8 <displayStars>
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	200021bc 	.word	0x200021bc

08003cf0 <moveSpaceship>:

void moveSpaceship(int direction){
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	displaySpaceShip(DARK_GREY);
 8003cf8:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003cfc:	f000 f9c6 	bl	800408c <displaySpaceShip>
	if(powerUp > 0){
 8003d00:	4b2a      	ldr	r3, [pc, #168]	; (8003dac <moveSpaceship+0xbc>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <moveSpaceship+0x20>
		displayPowerup(DARK_GREY);
 8003d08:	f642 402c 	movw	r0, #11308	; 0x2c2c
 8003d0c:	f000 fb08 	bl	8004320 <displayPowerup>
	}
    if(direction < 0){
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	da22      	bge.n	8003d5c <moveSpaceship+0x6c>
        SpaceShip.x--;
 8003d16:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <moveSpaceship+0xc0>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <moveSpaceship+0xc0>)
 8003d20:	701a      	strb	r2, [r3, #0]
        if(SpaceShip.x < SPACESHIP_WIDTH/2) {
 8003d22:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <moveSpaceship+0xc0>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d802      	bhi.n	8003d30 <moveSpaceship+0x40>
        	SpaceShip.x = (SPACESHIP_WIDTH/2);
 8003d2a:	4b21      	ldr	r3, [pc, #132]	; (8003db0 <moveSpaceship+0xc0>)
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	701a      	strb	r2, [r3, #0]
        }
        displaySpaceShip(spaceshipCurrentColor);
 8003d30:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <moveSpaceship+0xc4>)
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f9a9 	bl	800408c <displaySpaceShip>
        if(powerUp == 1){
 8003d3a:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <moveSpaceship+0xbc>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d103      	bne.n	8003d4a <moveSpaceship+0x5a>
        	displayPowerup(RED);
 8003d42:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003d46:	f000 faeb 	bl	8004320 <displayPowerup>
        }
        if(powerUp == 2){
 8003d4a:	4b18      	ldr	r3, [pc, #96]	; (8003dac <moveSpaceship+0xbc>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d127      	bne.n	8003da2 <moveSpaceship+0xb2>
        	displayPowerup(LIGHT_BLUE);
 8003d52:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003d56:	f000 fae3 	bl	8004320 <displayPowerup>
        }
        return;
 8003d5a:	e022      	b.n	8003da2 <moveSpaceship+0xb2>
    }
    SpaceShip.x++;
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <moveSpaceship+0xc0>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <moveSpaceship+0xc0>)
 8003d66:	701a      	strb	r2, [r3, #0]
    if(SpaceShip.x > SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1) {
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <moveSpaceship+0xc0>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b4d      	cmp	r3, #77	; 0x4d
 8003d6e:	d902      	bls.n	8003d76 <moveSpaceship+0x86>
    	SpaceShip.x = SCREEN_WIDTH - (SPACESHIP_WIDTH/2) - 1;
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <moveSpaceship+0xc0>)
 8003d72:	224d      	movs	r2, #77	; 0x4d
 8003d74:	701a      	strb	r2, [r3, #0]
    }
    displaySpaceShip(spaceshipCurrentColor);
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <moveSpaceship+0xc4>)
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f986 	bl	800408c <displaySpaceShip>
    if(powerUp == 1){
 8003d80:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <moveSpaceship+0xbc>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d103      	bne.n	8003d90 <moveSpaceship+0xa0>
    	displayPowerup(RED);
 8003d88:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003d8c:	f000 fac8 	bl	8004320 <displayPowerup>
    }
	if(powerUp == 2){
 8003d90:	4b06      	ldr	r3, [pc, #24]	; (8003dac <moveSpaceship+0xbc>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d105      	bne.n	8003da4 <moveSpaceship+0xb4>
		displayPowerup(LIGHT_BLUE);
 8003d98:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8003d9c:	f000 fac0 	bl	8004320 <displayPowerup>
 8003da0:	e000      	b.n	8003da4 <moveSpaceship+0xb4>
        return;
 8003da2:	bf00      	nop
	}
}
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	200021da 	.word	0x200021da
 8003db0:	2000004c 	.word	0x2000004c
 8003db4:	2000004e 	.word	0x2000004e

08003db8 <hitComet>:

void hitComet(int bul,int com){
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
    money += COMET_COINS(com);
 8003dc2:	4a4a      	ldr	r2, [pc, #296]	; (8003eec <hitComet+0x134>)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <hitComet+0x138>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	4a46      	ldr	r2, [pc, #280]	; (8003ef0 <hitComet+0x138>)
 8003dd8:	6013      	str	r3, [r2, #0]
    Displ_FillArea(COMET_X(com) * 4, COMET_Y(com) * 4, COMET_SIZE(com) * 4, COMET_SIZE(com) * 4, DARK_GREY);
 8003dda:	4a44      	ldr	r2, [pc, #272]	; (8003eec <hitComet+0x134>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	b298      	uxth	r0, r3
 8003dea:	4a40      	ldr	r2, [pc, #256]	; (8003eec <hitComet+0x134>)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	789b      	ldrb	r3, [r3, #2]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	b299      	uxth	r1, r3
 8003dfa:	4a3c      	ldr	r2, [pc, #240]	; (8003eec <hitComet+0x134>)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	4c37      	ldr	r4, [pc, #220]	; (8003eec <hitComet+0x134>)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4423      	add	r3, r4
 8003e14:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f642 442c 	movw	r4, #11308	; 0x2c2c
 8003e22:	9400      	str	r4, [sp, #0]
 8003e24:	f000 ff2e 	bl	8004c84 <Displ_FillArea>
    if(bul != 420){
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8003e2e:	d022      	beq.n	8003e76 <hitComet+0xbe>
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e01a      	b.n	8003e6c <hitComet+0xb4>
        	AMMO_X(j)= AMMO_X(j+1);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	4a2e      	ldr	r2, [pc, #184]	; (8003ef4 <hitComet+0x13c>)
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	4413      	add	r3, r2
 8003e40:	7899      	ldrb	r1, [r3, #2]
 8003e42:	4a2c      	ldr	r2, [pc, #176]	; (8003ef4 <hitComet+0x13c>)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	4413      	add	r3, r2
 8003e4a:	460a      	mov	r2, r1
 8003e4c:	709a      	strb	r2, [r3, #2]
        	AMMO_Y(j) = AMMO_Y(j+1);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3301      	adds	r3, #1
 8003e52:	4a28      	ldr	r2, [pc, #160]	; (8003ef4 <hitComet+0x13c>)
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	4413      	add	r3, r2
 8003e58:	78d9      	ldrb	r1, [r3, #3]
 8003e5a:	4a26      	ldr	r2, [pc, #152]	; (8003ef4 <hitComet+0x13c>)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	460a      	mov	r2, r1
 8003e64:	70da      	strb	r2, [r3, #3]
        for(int j = bul; j < MAX_BULLETS - 1; j++){
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	dde1      	ble.n	8003e36 <hitComet+0x7e>
        }
        powerups();
 8003e72:	f000 fa11 	bl	8004298 <powerups>
    }

    for(int j = com; j < MAX_COMETS - 1; j++){
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	e027      	b.n	8003ecc <hitComet+0x114>
    	COMET_X(j) = COMET_X(j+1);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <hitComet+0x134>)
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	7859      	ldrb	r1, [r3, #1]
 8003e88:	4a18      	ldr	r2, [pc, #96]	; (8003eec <hitComet+0x134>)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	460a      	mov	r2, r1
 8003e92:	705a      	strb	r2, [r3, #1]
    	COMET_Y(j) = COMET_Y(j+1);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	3301      	adds	r3, #1
 8003e98:	4a14      	ldr	r2, [pc, #80]	; (8003eec <hitComet+0x134>)
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	7899      	ldrb	r1, [r3, #2]
 8003ea0:	4a12      	ldr	r2, [pc, #72]	; (8003eec <hitComet+0x134>)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	460a      	mov	r2, r1
 8003eaa:	709a      	strb	r2, [r3, #2]
        COMET_SIZE(j) = COMET_SIZE(j+1);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	4a0e      	ldr	r2, [pc, #56]	; (8003eec <hitComet+0x134>)
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8003eba:	4a0c      	ldr	r2, [pc, #48]	; (8003eec <hitComet+0x134>)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	460a      	mov	r2, r1
 8003ec4:	70da      	strb	r2, [r3, #3]
    for(int j = com; j < MAX_COMETS - 1; j++){
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	ddd4      	ble.n	8003e7c <hitComet+0xc4>
    }
    Comet.in_play--;
 8003ed2:	4b06      	ldr	r3, [pc, #24]	; (8003eec <hitComet+0x134>)
 8003ed4:	f993 3000 	ldrsb.w	r3, [r3]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	b25a      	sxtb	r2, r3
 8003ee0:	4b02      	ldr	r3, [pc, #8]	; (8003eec <hitComet+0x134>)
 8003ee2:	701a      	strb	r2, [r3, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd90      	pop	{r4, r7, pc}
 8003eec:	20002190 	.word	0x20002190
 8003ef0:	200021d4 	.word	0x200021d4
 8003ef4:	20002170 	.word	0x20002170

08003ef8 <displayStars>:




void displayStars(uint16_t color){
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	4603      	mov	r3, r0
 8003f00:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < Star.in_play; i++){
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e018      	b.n	8003f3a <displayStars+0x42>
    	Displ_FillArea(STAR_X(i)* 4, STAR_Y(i) * 4, 4, 4, color);
 8003f08:	4a12      	ldr	r2, [pc, #72]	; (8003f54 <displayStars+0x5c>)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	4413      	add	r3, r2
 8003f10:	785b      	ldrb	r3, [r3, #1]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	b298      	uxth	r0, r3
 8003f18:	4a0e      	ldr	r2, [pc, #56]	; (8003f54 <displayStars+0x5c>)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	789b      	ldrb	r3, [r3, #2]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	b299      	uxth	r1, r3
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	2204      	movs	r2, #4
 8003f30:	f000 fea8 	bl	8004c84 <Displ_FillArea>
    for(int i = 0; i < Star.in_play; i++){
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3301      	adds	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <displayStars+0x5c>)
 8003f3c:	f993 3000 	ldrsb.w	r3, [r3]
 8003f40:	461a      	mov	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4293      	cmp	r3, r2
 8003f46:	dbdf      	blt.n	8003f08 <displayStars+0x10>
    }
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	200021bc 	.word	0x200021bc

08003f58 <displayAmmo>:

void displayAmmo(uint16_t color){
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	4603      	mov	r3, r0
 8003f60:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < ammo.in_play; i++){
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	e018      	b.n	8003f9a <displayAmmo+0x42>
    	Displ_FillArea(AMMO_X(i) * 4, AMMO_Y(i) * 4, 4, 4, color);
 8003f68:	4a25      	ldr	r2, [pc, #148]	; (8004000 <displayAmmo+0xa8>)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	789b      	ldrb	r3, [r3, #2]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	b298      	uxth	r0, r3
 8003f78:	4a21      	ldr	r2, [pc, #132]	; (8004000 <displayAmmo+0xa8>)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	78db      	ldrb	r3, [r3, #3]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	b299      	uxth	r1, r3
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	2204      	movs	r2, #4
 8003f90:	f000 fe78 	bl	8004c84 <Displ_FillArea>
    for(int i = 0; i < ammo.in_play; i++){
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3301      	adds	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	4b19      	ldr	r3, [pc, #100]	; (8004000 <displayAmmo+0xa8>)
 8003f9c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	dbdf      	blt.n	8003f68 <displayAmmo+0x10>
    }
    if(in_multiplayer){
 8003fa8:	4b16      	ldr	r3, [pc, #88]	; (8004004 <displayAmmo+0xac>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d023      	beq.n	8003ff8 <displayAmmo+0xa0>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	e019      	b.n	8003fea <displayAmmo+0x92>
            Displ_FillArea(E_AMMO_X(i) * 4, E_AMMO_Y(i) * 4, 4, 4, LIGHT_BLUE);
 8003fb6:	4a14      	ldr	r2, [pc, #80]	; (8004008 <displayAmmo+0xb0>)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	4413      	add	r3, r2
 8003fbe:	789b      	ldrb	r3, [r3, #2]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	b298      	uxth	r0, r3
 8003fc6:	4a10      	ldr	r2, [pc, #64]	; (8004008 <displayAmmo+0xb0>)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4413      	add	r3, r2
 8003fce:	78db      	ldrb	r3, [r3, #3]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	b299      	uxth	r1, r3
 8003fd6:	f24f 73db 	movw	r3, #63451	; 0xf7db
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2304      	movs	r3, #4
 8003fde:	2204      	movs	r2, #4
 8003fe0:	f000 fe50 	bl	8004c84 <Displ_FillArea>
        for(int i = 0; i < enemy_ammo.in_play; i++){
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	4b07      	ldr	r3, [pc, #28]	; (8004008 <displayAmmo+0xb0>)
 8003fec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	dbde      	blt.n	8003fb6 <displayAmmo+0x5e>
        }
    }
}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20002170 	.word	0x20002170
 8004004:	20000051 	.word	0x20000051
 8004008:	20002180 	.word	0x20002180

0800400c <displayComets>:

void displayComets(uint16_t color){
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b087      	sub	sp, #28
 8004010:	af02      	add	r7, sp, #8
 8004012:	4603      	mov	r3, r0
 8004014:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < Comet.in_play; i++){
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	e029      	b.n	8004070 <displayComets+0x64>
        Displ_FillArea(COMET_X(i) * 4, COMET_Y(i)  * 4, COMET_SIZE(i) * 4, COMET_SIZE(i) * 4, color);
 800401c:	4a1a      	ldr	r2, [pc, #104]	; (8004088 <displayComets+0x7c>)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	785b      	ldrb	r3, [r3, #1]
 8004026:	b29b      	uxth	r3, r3
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	b298      	uxth	r0, r3
 800402c:	4a16      	ldr	r2, [pc, #88]	; (8004088 <displayComets+0x7c>)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	789b      	ldrb	r3, [r3, #2]
 8004036:	b29b      	uxth	r3, r3
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	b299      	uxth	r1, r3
 800403c:	4a12      	ldr	r2, [pc, #72]	; (8004088 <displayComets+0x7c>)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004048:	b29b      	uxth	r3, r3
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	b29a      	uxth	r2, r3
 800404e:	4c0e      	ldr	r4, [pc, #56]	; (8004088 <displayComets+0x7c>)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4423      	add	r3, r4
 8004056:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800405a:	b29b      	uxth	r3, r3
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	b29c      	uxth	r4, r3
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	4623      	mov	r3, r4
 8004066:	f000 fe0d 	bl	8004c84 <Displ_FillArea>
    for (int i = 0; i < Comet.in_play; i++){
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3301      	adds	r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <displayComets+0x7c>)
 8004072:	f993 3000 	ldrsb.w	r3, [r3]
 8004076:	461a      	mov	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4293      	cmp	r3, r2
 800407c:	dbce      	blt.n	800401c <displayComets+0x10>
    }
}
 800407e:	bf00      	nop
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	bd90      	pop	{r4, r7, pc}
 8004088:	20002190 	.word	0x20002190

0800408c <displaySpaceShip>:

void displaySpaceShip(uint16_t color){
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af02      	add	r7, sp, #8
 8004092:	4603      	mov	r3, r0
 8004094:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(SpaceShip.x*4 - 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 8004096:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <displaySpaceShip+0x78>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	3b02      	subs	r3, #2
 800409c:	b29b      	uxth	r3, r3
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	b298      	uxth	r0, r3
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	2310      	movs	r3, #16
 80040a8:	2204      	movs	r2, #4
 80040aa:	21d8      	movs	r1, #216	; 0xd8
 80040ac:	f000 fdea 	bl	8004c84 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 + 8, SCREEN_HEIGHT*4 - 24, 4, 16, color);
 80040b0:	4b14      	ldr	r3, [pc, #80]	; (8004104 <displaySpaceShip+0x78>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	3302      	adds	r3, #2
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	b298      	uxth	r0, r3
 80040bc:	88fb      	ldrh	r3, [r7, #6]
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	2310      	movs	r3, #16
 80040c2:	2204      	movs	r2, #4
 80040c4:	21d8      	movs	r1, #216	; 0xd8
 80040c6:	f000 fddd 	bl	8004c84 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4 - 4, SCREEN_HEIGHT*4 -20, 12, 4, color);
 80040ca:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <displaySpaceShip+0x78>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	b298      	uxth	r0, r3
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2304      	movs	r3, #4
 80040dc:	220c      	movs	r2, #12
 80040de:	21dc      	movs	r1, #220	; 0xdc
 80040e0:	f000 fdd0 	bl	8004c84 <Displ_FillArea>
    Displ_FillArea(SpaceShip.x*4, SCREEN_HEIGHT*4 -28, 4, 16, color);
 80040e4:	4b07      	ldr	r3, [pc, #28]	; (8004104 <displaySpaceShip+0x78>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	b298      	uxth	r0, r3
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	2310      	movs	r3, #16
 80040f4:	2204      	movs	r2, #4
 80040f6:	21d4      	movs	r1, #212	; 0xd4
 80040f8:	f000 fdc4 	bl	8004c84 <Displ_FillArea>

}
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	2000004c 	.word	0x2000004c

08004108 <displayLives>:

void displayLives(){
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af02      	add	r7, sp, #8
    for(int i = 0; i < lives; i++){
 800410e:	2300      	movs	r3, #0
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	e013      	b.n	800413c <displayLives+0x34>
    	Displ_FillArea(HEARTS_X+HEARTS_OFFSET*i, HEARTS_Y, 4, 4, LIGHT_GREEN);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	0052      	lsls	r2, r2, #1
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	b29b      	uxth	r3, r3
 8004122:	3308      	adds	r3, #8
 8004124:	b298      	uxth	r0, r3
 8004126:	f64f 233c 	movw	r3, #64060	; 0xfa3c
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	2304      	movs	r3, #4
 800412e:	2204      	movs	r2, #4
 8004130:	2108      	movs	r1, #8
 8004132:	f000 fda7 	bl	8004c84 <Displ_FillArea>
    for(int i = 0; i < lives; i++){
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3301      	adds	r3, #1
 800413a:	607b      	str	r3, [r7, #4]
 800413c:	4b16      	ldr	r3, [pc, #88]	; (8004198 <displayLives+0x90>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4293      	cmp	r3, r2
 8004146:	dbe5      	blt.n	8004114 <displayLives+0xc>
    }
    if(lives < 3){
 8004148:	4b13      	ldr	r3, [pc, #76]	; (8004198 <displayLives+0x90>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d81f      	bhi.n	8004190 <displayLives+0x88>
    	for(int i = 0; i < 3 - lives; i++){
 8004150:	2300      	movs	r3, #0
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	e015      	b.n	8004182 <displayLives+0x7a>
    		Displ_FillArea(HEARTS_X+HEARTS_OFFSET*(3-i), HEARTS_Y, 4, 4, DARK_GREY);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f1c3 0303 	rsb	r3, r3, #3
 800415c:	b29b      	uxth	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	0052      	lsls	r2, r2, #1
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	b29b      	uxth	r3, r3
 8004168:	3308      	adds	r3, #8
 800416a:	b298      	uxth	r0, r3
 800416c:	f642 432c 	movw	r3, #11308	; 0x2c2c
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	2304      	movs	r3, #4
 8004174:	2204      	movs	r2, #4
 8004176:	2108      	movs	r1, #8
 8004178:	f000 fd84 	bl	8004c84 <Displ_FillArea>
    	for(int i = 0; i < 3 - lives; i++){
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <displayLives+0x90>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	f1c3 0303 	rsb	r3, r3, #3
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	dbe2      	blt.n	8004156 <displayLives+0x4e>
    	}
    }
}
 8004190:	bf00      	nop
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000049 	.word	0x20000049

0800419c <spaceShipHitColorToggle>:


void spaceShipHitColorToggle(){
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
    if(spaceshipCurrentColor == RED && hit % 10 == 0){
 80041a0:	4b1f      	ldr	r3, [pc, #124]	; (8004220 <spaceShipHitColorToggle+0x84>)
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 80041a8:	d112      	bne.n	80041d0 <spaceShipHitColorToggle+0x34>
 80041aa:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <spaceShipHitColorToggle+0x88>)
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <spaceShipHitColorToggle+0x8c>)
 80041b0:	fba3 1302 	umull	r1, r3, r3, r2
 80041b4:	08d9      	lsrs	r1, r3, #3
 80041b6:	460b      	mov	r3, r1
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d104      	bne.n	80041d0 <spaceShipHitColorToggle+0x34>
        spaceshipCurrentColor = WHITE;
 80041c6:	4b16      	ldr	r3, [pc, #88]	; (8004220 <spaceShipHitColorToggle+0x84>)
 80041c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041cc:	801a      	strh	r2, [r3, #0]
 80041ce:	e011      	b.n	80041f4 <spaceShipHitColorToggle+0x58>
    }else if(hit % 10 == 0){
 80041d0:	4b14      	ldr	r3, [pc, #80]	; (8004224 <spaceShipHitColorToggle+0x88>)
 80041d2:	781a      	ldrb	r2, [r3, #0]
 80041d4:	4b14      	ldr	r3, [pc, #80]	; (8004228 <spaceShipHitColorToggle+0x8c>)
 80041d6:	fba3 1302 	umull	r1, r3, r3, r2
 80041da:	08d9      	lsrs	r1, r3, #3
 80041dc:	460b      	mov	r3, r1
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d103      	bne.n	80041f4 <spaceShipHitColorToggle+0x58>
        spaceshipCurrentColor = RED;
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <spaceShipHitColorToggle+0x84>)
 80041ee:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80041f2:	801a      	strh	r2, [r3, #0]
    }
    if(hit < hit_graph_counter){
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <spaceShipHitColorToggle+0x88>)
 80041f6:	781a      	ldrb	r2, [r3, #0]
 80041f8:	4b0c      	ldr	r3, [pc, #48]	; (800422c <spaceShipHitColorToggle+0x90>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d206      	bcs.n	800420e <spaceShipHitColorToggle+0x72>
        hit++;
 8004200:	4b08      	ldr	r3, [pc, #32]	; (8004224 <spaceShipHitColorToggle+0x88>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	3301      	adds	r3, #1
 8004206:	b2da      	uxtb	r2, r3
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <spaceShipHitColorToggle+0x88>)
 800420a:	701a      	strb	r2, [r3, #0]
    }else{
        hit = 0;
    }
}
 800420c:	e002      	b.n	8004214 <spaceShipHitColorToggle+0x78>
        hit = 0;
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <spaceShipHitColorToggle+0x88>)
 8004210:	2200      	movs	r2, #0
 8004212:	701a      	strb	r2, [r3, #0]
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	2000004e 	.word	0x2000004e
 8004224:	20001eeb 	.word	0x20001eeb
 8004228:	cccccccd 	.word	0xcccccccd
 800422c:	20000050 	.word	0x20000050

08004230 <delayBullet>:

void delayBullet(){
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
    if (bullet_delay > 0){
 8004234:	4b07      	ldr	r3, [pc, #28]	; (8004254 <delayBullet+0x24>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <delayBullet+0x18>
        bullet_delay--;
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <delayBullet+0x24>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	3b01      	subs	r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <delayBullet+0x24>)
 8004246:	701a      	strb	r2, [r3, #0]
    }
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	200021d1 	.word	0x200021d1

08004258 <beenHit>:

void beenHit(){
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
    hit = 1;
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <beenHit+0x34>)
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
    lives--;
 8004262:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <beenHit+0x38>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	3b01      	subs	r3, #1
 8004268:	b2da      	uxtb	r2, r3
 800426a:	4b09      	ldr	r3, [pc, #36]	; (8004290 <beenHit+0x38>)
 800426c:	701a      	strb	r2, [r3, #0]
    if(lives <= 0){
 800426e:	4b08      	ldr	r3, [pc, #32]	; (8004290 <beenHit+0x38>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d107      	bne.n	8004286 <beenHit+0x2e>
        play = 0;
 8004276:	4b07      	ldr	r3, [pc, #28]	; (8004294 <beenHit+0x3c>)
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
        hit = 0;
 800427c:	4b03      	ldr	r3, [pc, #12]	; (800428c <beenHit+0x34>)
 800427e:	2200      	movs	r2, #0
 8004280:	701a      	strb	r2, [r3, #0]
        initSpaceInvaders();
 8004282:	f7ff f8a7 	bl	80033d4 <initSpaceInvaders>

    }
}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20001eeb 	.word	0x20001eeb
 8004290:	20000049 	.word	0x20000049
 8004294:	2000004a 	.word	0x2000004a

08004298 <powerups>:
            star_delay--;
        }
    }
}

void powerups(){
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
    uint8_t powerupornot = RANDOM(0,3);
 800429e:	f006 f9a5 	bl	800a5ec <rand>
 80042a2:	4603      	mov	r3, r0
 80042a4:	425a      	negs	r2, r3
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	f002 0203 	and.w	r2, r2, #3
 80042ae:	bf58      	it	pl
 80042b0:	4253      	negpl	r3, r2
 80042b2:	71fb      	strb	r3, [r7, #7]
    if(powerUp == 0 && powerupornot == 0){
 80042b4:	4b17      	ldr	r3, [pc, #92]	; (8004314 <powerups+0x7c>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d127      	bne.n	800430c <powerups+0x74>
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d124      	bne.n	800430c <powerups+0x74>
        powerUp = RANDOM(1,3);
 80042c2:	f006 f993 	bl	800a5ec <rand>
 80042c6:	4602      	mov	r2, r0
 80042c8:	4b13      	ldr	r3, [pc, #76]	; (8004318 <powerups+0x80>)
 80042ca:	fb83 3102 	smull	r3, r1, r3, r2
 80042ce:	17d3      	asrs	r3, r2, #31
 80042d0:	1ac9      	subs	r1, r1, r3
 80042d2:	460b      	mov	r3, r1
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	440b      	add	r3, r1
 80042d8:	1ad1      	subs	r1, r2, r3
 80042da:	b2cb      	uxtb	r3, r1
 80042dc:	3301      	adds	r3, #1
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <powerups+0x7c>)
 80042e2:	701a      	strb	r2, [r3, #0]
        if(powerUp == 1){
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <powerups+0x7c>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d104      	bne.n	80042f6 <powerups+0x5e>
        	displayPowerup(RED);
 80042ec:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80042f0:	f000 f816 	bl	8004320 <displayPowerup>
 80042f4:	e007      	b.n	8004306 <powerups+0x6e>
        }
        else if(powerUp == 2){
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <powerups+0x7c>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d103      	bne.n	8004306 <powerups+0x6e>
        	displayPowerup(LIGHT_BLUE);
 80042fe:	f24f 70db 	movw	r0, #63451	; 0xf7db
 8004302:	f000 f80d 	bl	8004320 <displayPowerup>
        }
        powerUp_delay = MAX_DELAY_POWERUP;
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <powerups+0x84>)
 8004308:	2205      	movs	r2, #5
 800430a:	701a      	strb	r2, [r3, #0]
    }
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	200021da 	.word	0x200021da
 8004318:	55555556 	.word	0x55555556
 800431c:	200021db 	.word	0x200021db

08004320 <displayPowerup>:

void displayPowerup(uint16_t color){
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af02      	add	r7, sp, #8
 8004326:	4603      	mov	r3, r0
 8004328:	80fb      	strh	r3, [r7, #6]

    if(powerUp == 1){
 800432a:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <displayPowerup+0x80>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d11a      	bne.n	8004368 <displayPowerup+0x48>
		Displ_FillArea(SpaceShip.x * 4, 0, 4, 180, color);
 8004332:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <displayPowerup+0x84>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	b298      	uxth	r0, r3
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	23b4      	movs	r3, #180	; 0xb4
 8004342:	2204      	movs	r2, #4
 8004344:	2100      	movs	r1, #0
 8004346:	f000 fc9d 	bl	8004c84 <Displ_FillArea>
		Displ_FillArea(SpaceShip.x * 4 + 1, 180, 2, 30, color);
 800434a:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <displayPowerup+0x84>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	b29b      	uxth	r3, r3
 8004354:	3301      	adds	r3, #1
 8004356:	b298      	uxth	r0, r3
 8004358:	88fb      	ldrh	r3, [r7, #6]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	231e      	movs	r3, #30
 800435e:	2202      	movs	r2, #2
 8004360:	21b4      	movs	r1, #180	; 0xb4
 8004362:	f000 fc8f 	bl	8004c84 <Displ_FillArea>
    }
    else if(powerUp == 2){
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
    }
}
 8004366:	e017      	b.n	8004398 <displayPowerup+0x78>
    else if(powerUp == 2){
 8004368:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <displayPowerup+0x80>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d113      	bne.n	8004398 <displayPowerup+0x78>
    	Displ_drawCircle(SpaceShip.x * 4 + 1, SpaceShip.y * 4 + 2, 14, color);
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <displayPowerup+0x84>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	b29b      	uxth	r3, r3
 800437a:	3301      	adds	r3, #1
 800437c:	b29b      	uxth	r3, r3
 800437e:	b218      	sxth	r0, r3
 8004380:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <displayPowerup+0x84>)
 8004382:	785b      	ldrb	r3, [r3, #1]
 8004384:	b29b      	uxth	r3, r3
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	b29b      	uxth	r3, r3
 800438a:	3302      	adds	r3, #2
 800438c:	b29b      	uxth	r3, r3
 800438e:	b219      	sxth	r1, r3
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	220e      	movs	r2, #14
 8004394:	f000 fd56 	bl	8004e44 <Displ_drawCircle>
}
 8004398:	bf00      	nop
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	200021da 	.word	0x200021da
 80043a4:	2000004c 	.word	0x2000004c

080043a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <HAL_MspInit+0x44>)
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	4a0e      	ldr	r2, [pc, #56]	; (80043ec <HAL_MspInit+0x44>)
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	6193      	str	r3, [r2, #24]
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <HAL_MspInit+0x44>)
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	607b      	str	r3, [r7, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043c6:	4b09      	ldr	r3, [pc, #36]	; (80043ec <HAL_MspInit+0x44>)
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	4a08      	ldr	r2, [pc, #32]	; (80043ec <HAL_MspInit+0x44>)
 80043cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d0:	61d3      	str	r3, [r2, #28]
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_MspInit+0x44>)
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40021000 	.word	0x40021000

080043f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	; 0x28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f8:	f107 0314 	add.w	r3, r7, #20
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	609a      	str	r2, [r3, #8]
 8004404:	60da      	str	r2, [r3, #12]
 8004406:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a17      	ldr	r2, [pc, #92]	; (800446c <HAL_I2C_MspInit+0x7c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d127      	bne.n	8004462 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004412:	4b17      	ldr	r3, [pc, #92]	; (8004470 <HAL_I2C_MspInit+0x80>)
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	4a16      	ldr	r2, [pc, #88]	; (8004470 <HAL_I2C_MspInit+0x80>)
 8004418:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800441c:	6153      	str	r3, [r2, #20]
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <HAL_I2C_MspInit+0x80>)
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PF1-OSC_OUT     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800442a:	2303      	movs	r3, #3
 800442c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800442e:	2312      	movs	r3, #18
 8004430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004432:	2301      	movs	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004436:	2303      	movs	r3, #3
 8004438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800443a:	2304      	movs	r3, #4
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800443e:	f107 0314 	add.w	r3, r7, #20
 8004442:	4619      	mov	r1, r3
 8004444:	480b      	ldr	r0, [pc, #44]	; (8004474 <HAL_I2C_MspInit+0x84>)
 8004446:	f001 fd8d 	bl	8005f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <HAL_I2C_MspInit+0x80>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4a08      	ldr	r2, [pc, #32]	; (8004470 <HAL_I2C_MspInit+0x80>)
 8004450:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004454:	61d3      	str	r3, [r2, #28]
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_I2C_MspInit+0x80>)
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004462:	bf00      	nop
 8004464:	3728      	adds	r7, #40	; 0x28
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40005800 	.word	0x40005800
 8004470:	40021000 	.word	0x40021000
 8004474:	48001400 	.word	0x48001400

08004478 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08a      	sub	sp, #40	; 0x28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004480:	f107 0314 	add.w	r3, r7, #20
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a2e      	ldr	r2, [pc, #184]	; (8004550 <HAL_SPI_MspInit+0xd8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d156      	bne.n	8004548 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800449a:	4b2e      	ldr	r3, [pc, #184]	; (8004554 <HAL_SPI_MspInit+0xdc>)
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	4a2d      	ldr	r2, [pc, #180]	; (8004554 <HAL_SPI_MspInit+0xdc>)
 80044a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044a4:	61d3      	str	r3, [r2, #28]
 80044a6:	4b2b      	ldr	r3, [pc, #172]	; (8004554 <HAL_SPI_MspInit+0xdc>)
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b2:	4b28      	ldr	r3, [pc, #160]	; (8004554 <HAL_SPI_MspInit+0xdc>)
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	4a27      	ldr	r2, [pc, #156]	; (8004554 <HAL_SPI_MspInit+0xdc>)
 80044b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044bc:	6153      	str	r3, [r2, #20]
 80044be:	4b25      	ldr	r3, [pc, #148]	; (8004554 <HAL_SPI_MspInit+0xdc>)
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80044ca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80044ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d0:	2302      	movs	r3, #2
 80044d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044d8:	2303      	movs	r3, #3
 80044da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80044dc:	2305      	movs	r3, #5
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044e0:	f107 0314 	add.w	r3, r7, #20
 80044e4:	4619      	mov	r1, r3
 80044e6:	481c      	ldr	r0, [pc, #112]	; (8004558 <HAL_SPI_MspInit+0xe0>)
 80044e8:	f001 fd3c 	bl	8005f64 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80044ec:	4b1b      	ldr	r3, [pc, #108]	; (800455c <HAL_SPI_MspInit+0xe4>)
 80044ee:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <HAL_SPI_MspInit+0xe8>)
 80044f0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044f2:	4b1a      	ldr	r3, [pc, #104]	; (800455c <HAL_SPI_MspInit+0xe4>)
 80044f4:	2210      	movs	r2, #16
 80044f6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044f8:	4b18      	ldr	r3, [pc, #96]	; (800455c <HAL_SPI_MspInit+0xe4>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044fe:	4b17      	ldr	r3, [pc, #92]	; (800455c <HAL_SPI_MspInit+0xe4>)
 8004500:	2280      	movs	r2, #128	; 0x80
 8004502:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004504:	4b15      	ldr	r3, [pc, #84]	; (800455c <HAL_SPI_MspInit+0xe4>)
 8004506:	2200      	movs	r2, #0
 8004508:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800450a:	4b14      	ldr	r3, [pc, #80]	; (800455c <HAL_SPI_MspInit+0xe4>)
 800450c:	2200      	movs	r2, #0
 800450e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004510:	4b12      	ldr	r3, [pc, #72]	; (800455c <HAL_SPI_MspInit+0xe4>)
 8004512:	2200      	movs	r2, #0
 8004514:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004516:	4b11      	ldr	r3, [pc, #68]	; (800455c <HAL_SPI_MspInit+0xe4>)
 8004518:	2200      	movs	r2, #0
 800451a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800451c:	480f      	ldr	r0, [pc, #60]	; (800455c <HAL_SPI_MspInit+0xe4>)
 800451e:	f001 fb12 	bl	8005b46 <HAL_DMA_Init>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8004528:	f7fe fca2 	bl	8002e70 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a0b      	ldr	r2, [pc, #44]	; (800455c <HAL_SPI_MspInit+0xe4>)
 8004530:	655a      	str	r2, [r3, #84]	; 0x54
 8004532:	4a0a      	ldr	r2, [pc, #40]	; (800455c <HAL_SPI_MspInit+0xe4>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004538:	2200      	movs	r2, #0
 800453a:	2100      	movs	r1, #0
 800453c:	2024      	movs	r0, #36	; 0x24
 800453e:	f001 facc 	bl	8005ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004542:	2024      	movs	r0, #36	; 0x24
 8004544:	f001 fae5 	bl	8005b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004548:	bf00      	nop
 800454a:	3728      	adds	r7, #40	; 0x28
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40003800 	.word	0x40003800
 8004554:	40021000 	.word	0x40021000
 8004558:	48000400 	.word	0x48000400
 800455c:	20001fa8 	.word	0x20001fa8
 8004560:	40020058 	.word	0x40020058

08004564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08c      	sub	sp, #48	; 0x30
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800456c:	f107 031c 	add.w	r3, r7, #28
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	605a      	str	r2, [r3, #4]
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a33      	ldr	r2, [pc, #204]	; (8004650 <HAL_UART_MspInit+0xec>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d131      	bne.n	80045ea <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004586:	4b33      	ldr	r3, [pc, #204]	; (8004654 <HAL_UART_MspInit+0xf0>)
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	4a32      	ldr	r2, [pc, #200]	; (8004654 <HAL_UART_MspInit+0xf0>)
 800458c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004590:	61d3      	str	r3, [r2, #28]
 8004592:	4b30      	ldr	r3, [pc, #192]	; (8004654 <HAL_UART_MspInit+0xf0>)
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459e:	4b2d      	ldr	r3, [pc, #180]	; (8004654 <HAL_UART_MspInit+0xf0>)
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	4a2c      	ldr	r2, [pc, #176]	; (8004654 <HAL_UART_MspInit+0xf0>)
 80045a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a8:	6153      	str	r3, [r2, #20]
 80045aa:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <HAL_UART_MspInit+0xf0>)
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80045b6:	230c      	movs	r3, #12
 80045b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ba:	2302      	movs	r3, #2
 80045bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045c2:	2303      	movs	r3, #3
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80045c6:	2307      	movs	r3, #7
 80045c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ca:	f107 031c 	add.w	r3, r7, #28
 80045ce:	4619      	mov	r1, r3
 80045d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045d4:	f001 fcc6 	bl	8005f64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80045d8:	2200      	movs	r2, #0
 80045da:	2100      	movs	r1, #0
 80045dc:	2026      	movs	r0, #38	; 0x26
 80045de:	f001 fa7c 	bl	8005ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045e2:	2026      	movs	r0, #38	; 0x26
 80045e4:	f001 fa95 	bl	8005b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80045e8:	e02d      	b.n	8004646 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a1a      	ldr	r2, [pc, #104]	; (8004658 <HAL_UART_MspInit+0xf4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d128      	bne.n	8004646 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80045f4:	4b17      	ldr	r3, [pc, #92]	; (8004654 <HAL_UART_MspInit+0xf0>)
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	4a16      	ldr	r2, [pc, #88]	; (8004654 <HAL_UART_MspInit+0xf0>)
 80045fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045fe:	61d3      	str	r3, [r2, #28]
 8004600:	4b14      	ldr	r3, [pc, #80]	; (8004654 <HAL_UART_MspInit+0xf0>)
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800460c:	4b11      	ldr	r3, [pc, #68]	; (8004654 <HAL_UART_MspInit+0xf0>)
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	4a10      	ldr	r2, [pc, #64]	; (8004654 <HAL_UART_MspInit+0xf0>)
 8004612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004616:	6153      	str	r3, [r2, #20]
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <HAL_UART_MspInit+0xf0>)
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004624:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462a:	2302      	movs	r3, #2
 800462c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462e:	2300      	movs	r3, #0
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004632:	2303      	movs	r3, #3
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004636:	2307      	movs	r3, #7
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800463a:	f107 031c 	add.w	r3, r7, #28
 800463e:	4619      	mov	r1, r3
 8004640:	4806      	ldr	r0, [pc, #24]	; (800465c <HAL_UART_MspInit+0xf8>)
 8004642:	f001 fc8f 	bl	8005f64 <HAL_GPIO_Init>
}
 8004646:	bf00      	nop
 8004648:	3730      	adds	r7, #48	; 0x30
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40004400 	.word	0x40004400
 8004654:	40021000 	.word	0x40021000
 8004658:	40004800 	.word	0x40004800
 800465c:	48000400 	.word	0x48000400

08004660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004664:	e7fe      	b.n	8004664 <NMI_Handler+0x4>

08004666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004666:	b480      	push	{r7}
 8004668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800466a:	e7fe      	b.n	800466a <HardFault_Handler+0x4>

0800466c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004670:	e7fe      	b.n	8004670 <MemManage_Handler+0x4>

08004672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004672:	b480      	push	{r7}
 8004674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004676:	e7fe      	b.n	8004676 <BusFault_Handler+0x4>

08004678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800467c:	e7fe      	b.n	800467c <UsageFault_Handler+0x4>

0800467e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800467e:	b480      	push	{r7}
 8004680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004682:	bf00      	nop
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800469a:	b480      	push	{r7}
 800469c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800469e:	bf00      	nop
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046ac:	f001 f8f6 	bl	800589c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046b0:	bf00      	nop
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MIDDLE_Pin);
 80046b8:	2001      	movs	r0, #1
 80046ba:	f001 fdf5 	bl	80062a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80046be:	bf00      	nop
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80046c8:	4802      	ldr	r0, [pc, #8]	; (80046d4 <DMA1_Channel5_IRQHandler+0x10>)
 80046ca:	f001 fb59 	bl	8005d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20001fa8 	.word	0x20001fa8

080046d8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80046dc:	4802      	ldr	r0, [pc, #8]	; (80046e8 <SPI2_IRQHandler+0x10>)
 80046de:	f004 fc1b 	bl	8008f18 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20001f44 	.word	0x20001f44

080046ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char ch;
    uint16_t number;

    uint32_t isrflags = READ_REG(huart2.Instance->ISR);
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <USART2_IRQHandler+0x50>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	60fb      	str	r3, [r7, #12]
    uint32_t crlits = READ_REG(huart2.Instance->CR1);
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <USART2_IRQHandler+0x50>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60bb      	str	r3, [r7, #8]

    if (((isrflags & USART_ISR_RXNE) != RESET) && ((crlits & USART_CR1_RXNEIE) != RESET)) {
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d010      	beq.n	800472e <USART2_IRQHandler+0x42>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <USART2_IRQHandler+0x42>
        huart2.Instance->ISR;
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <USART2_IRQHandler+0x50>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69db      	ldr	r3, [r3, #28]
        //number = huart2.Instance->RDR;
        ch = huart2.Instance->RDR;
 800471c:	4b07      	ldr	r3, [pc, #28]	; (800473c <USART2_IRQHandler+0x50>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004722:	b29b      	uxth	r3, r3
 8004724:	71fb      	strb	r3, [r7, #7]
        //printf("%ul\r\n", number);
        //printf("%c\r\n", ch);
        addCharacterToArray(ch);
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe fd83 	bl	8003234 <addCharacterToArray>
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800472e:	4803      	ldr	r0, [pc, #12]	; (800473c <USART2_IRQHandler+0x50>)
 8004730:	f004 ffce 	bl	80096d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20001fec 	.word	0x20001fec

08004740 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOP_Pin);
 8004744:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004748:	f001 fdae 	bl	80062a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 800474c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004750:	f001 fdaa 	bl	80062a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8004754:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004758:	f001 fda6 	bl	80062a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800475c:	bf00      	nop
 800475e:	bd80      	pop	{r7, pc}

08004760 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return 1;
 8004764:	2301      	movs	r3, #1
}
 8004766:	4618      	mov	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <_kill>:

int _kill(int pid, int sig)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800477a:	f005 fe49 	bl	800a410 <__errno>
 800477e:	4603      	mov	r3, r0
 8004780:	2216      	movs	r2, #22
 8004782:	601a      	str	r2, [r3, #0]
  return -1;
 8004784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <_exit>:

void _exit (int status)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004798:	f04f 31ff 	mov.w	r1, #4294967295
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff ffe7 	bl	8004770 <_kill>
  while (1) {}    /* Make sure we hang here */
 80047a2:	e7fe      	b.n	80047a2 <_exit+0x12>

080047a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	e00a      	b.n	80047cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80047b6:	f3af 8000 	nop.w
 80047ba:	4601      	mov	r1, r0
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	60ba      	str	r2, [r7, #8]
 80047c2:	b2ca      	uxtb	r2, r1
 80047c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	3301      	adds	r3, #1
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	dbf0      	blt.n	80047b6 <_read+0x12>
  }

  return len;
 80047d4:	687b      	ldr	r3, [r7, #4]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <_close>:
  }
  return len;
}

int _close(int file)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80047e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004806:	605a      	str	r2, [r3, #4]
  return 0;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <_isatty>:

int _isatty(int file)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800481e:	2301      	movs	r3, #1
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004850:	4a14      	ldr	r2, [pc, #80]	; (80048a4 <_sbrk+0x5c>)
 8004852:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <_sbrk+0x60>)
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800485c:	4b13      	ldr	r3, [pc, #76]	; (80048ac <_sbrk+0x64>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004864:	4b11      	ldr	r3, [pc, #68]	; (80048ac <_sbrk+0x64>)
 8004866:	4a12      	ldr	r2, [pc, #72]	; (80048b0 <_sbrk+0x68>)
 8004868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800486a:	4b10      	ldr	r3, [pc, #64]	; (80048ac <_sbrk+0x64>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	429a      	cmp	r2, r3
 8004876:	d207      	bcs.n	8004888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004878:	f005 fdca 	bl	800a410 <__errno>
 800487c:	4603      	mov	r3, r0
 800487e:	220c      	movs	r2, #12
 8004880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004882:	f04f 33ff 	mov.w	r3, #4294967295
 8004886:	e009      	b.n	800489c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <_sbrk+0x64>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800488e:	4b07      	ldr	r3, [pc, #28]	; (80048ac <_sbrk+0x64>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4413      	add	r3, r2
 8004896:	4a05      	ldr	r2, [pc, #20]	; (80048ac <_sbrk+0x64>)
 8004898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800489a:	68fb      	ldr	r3, [r7, #12]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20004000 	.word	0x20004000
 80048a8:	00000400 	.word	0x00000400
 80048ac:	200021dc 	.word	0x200021dc
 80048b0:	20002a08 	.word	0x20002a08

080048b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <SystemInit+0x20>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	4a05      	ldr	r2, [pc, #20]	; (80048d4 <SystemInit+0x20>)
 80048c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048c8:	bf00      	nop
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	e000ed00 	.word	0xe000ed00

080048d8 <Displ_Select>:

/******************************************
 * @brief   enable display, disabling touch
 *          device selected if CS low
 ******************************************/
void Displ_Select(void) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
    if (TOUCH_SPI==DISPL_SPI){                                                      // if SPI port shared (display <-> touch)
        if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {                   // if display not yet selected
 80048dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048e4:	f001 fcb0 	bl	8006248 <HAL_GPIO_ReadPin>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d017      	beq.n	800491e <Displ_Select+0x46>
            HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch
 80048ee:	2201      	movs	r2, #1
 80048f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048f4:	480b      	ldr	r0, [pc, #44]	; (8004924 <Displ_Select+0x4c>)
 80048f6:	f001 fcbf 	bl	8006278 <HAL_GPIO_WritePin>
            SET_DISPL_SPI_BAUDRATE;                                                 //change SPI port speed as per display needs
 80048fa:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <Displ_Select+0x50>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	490a      	ldr	r1, [pc, #40]	; (8004928 <Displ_Select+0x50>)
 8004900:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8004904:	4013      	ands	r3, r2
 8004906:	600b      	str	r3, [r1, #0]
 8004908:	4b07      	ldr	r3, [pc, #28]	; (8004928 <Displ_Select+0x50>)
 800490a:	4a07      	ldr	r2, [pc, #28]	; (8004928 <Displ_Select+0x50>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
 8004910:	2200      	movs	r2, #0
 8004912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800491a:	f001 fcad 	bl	8006278 <HAL_GPIO_WritePin>
        }
    }
}
 800491e:	bf00      	nop
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	48000400 	.word	0x48000400
 8004928:	40003800 	.word	0x40003800

0800492c <Displ_Transmit>:
 * @PARAM   DC_Status   indicates if sending command or data
 *          data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6039      	str	r1, [r7, #0]
 8004934:	4611      	mov	r1, r2
 8004936:	461a      	mov	r2, r3
 8004938:	4603      	mov	r3, r0
 800493a:	71fb      	strb	r3, [r7, #7]
 800493c:	460b      	mov	r3, r1
 800493e:	80bb      	strh	r3, [r7, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	71bb      	strb	r3, [r7, #6]

    while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8004944:	bf00      	nop
 8004946:	4b23      	ldr	r3, [pc, #140]	; (80049d4 <Displ_Transmit+0xa8>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0fa      	beq.n	8004946 <Displ_Transmit+0x1a>

    Displ_Select();
 8004950:	f7ff ffc2 	bl	80048d8 <Displ_Select>
    HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	461a      	mov	r2, r3
 8004958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800495c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004960:	f001 fc8a 	bl	8006278 <HAL_GPIO_WritePin>

    if (isTouchGFXBuffer){
 8004964:	79bb      	ldrb	r3, [r7, #6]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d016      	beq.n	8004998 <Displ_Transmit+0x6c>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
        uint32_t *limit=(uint32_t*)(data+dataSize);
 800496a:	88bb      	ldrh	r3, [r7, #4]
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	4413      	add	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	e00b      	b.n	8004990 <Displ_Transmit+0x64>
            *data32=__REV16(*data32);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	ba5b      	rev16	r3, r3
 8004982:	60bb      	str	r3, [r7, #8]
  return result;
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	601a      	str	r2, [r3, #0]
        for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	3304      	adds	r3, #4
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	429a      	cmp	r2, r3
 8004996:	d3ef      	bcc.n	8004978 <Displ_Transmit+0x4c>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
        Displ_SpiAvailable=0;
        HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
        if (dataSize<DISPL_DMA_CUTOFF) {
 8004998:	88bb      	ldrh	r3, [r7, #4]
 800499a:	2b13      	cmp	r3, #19
 800499c:	d80d      	bhi.n	80049ba <Displ_Transmit+0x8e>
#endif //DISPLAY_SPI_DMA_MODE
            Displ_SpiAvailable=0;
 800499e:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <Displ_Transmit+0xa8>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 80049a4:	88ba      	ldrh	r2, [r7, #4]
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295
 80049aa:	6839      	ldr	r1, [r7, #0]
 80049ac:	480a      	ldr	r0, [pc, #40]	; (80049d8 <Displ_Transmit+0xac>)
 80049ae:	f004 f84e 	bl	8008a4e <HAL_SPI_Transmit>
            Displ_SpiAvailable=1;
 80049b2:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <Displ_Transmit+0xa8>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	701a      	strb	r2, [r3, #0]
            Displ_SpiAvailable=0;
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
        }
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
    }
 80049b8:	e008      	b.n	80049cc <Displ_Transmit+0xa0>
            Displ_SpiAvailable=0;
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <Displ_Transmit+0xa8>)
 80049bc:	2200      	movs	r2, #0
 80049be:	701a      	strb	r2, [r3, #0]
            HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 80049c0:	88bb      	ldrh	r3, [r7, #4]
 80049c2:	461a      	mov	r2, r3
 80049c4:	6839      	ldr	r1, [r7, #0]
 80049c6:	4804      	ldr	r0, [pc, #16]	; (80049d8 <Displ_Transmit+0xac>)
 80049c8:	f004 f9b6 	bl	8008d38 <HAL_SPI_Transmit_DMA>
    }
 80049cc:	bf00      	nop
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000058 	.word	0x20000058
 80049d8:	20001f44 	.word	0x20001f44

080049dc <Displ_WriteCommand>:


/**********************************
 * @BRIEF   transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
    Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 80049e6:	1df9      	adds	r1, r7, #7
 80049e8:	2300      	movs	r3, #0
 80049ea:	2201      	movs	r2, #1
 80049ec:	2000      	movs	r0, #0
 80049ee:	f7ff ff9d 	bl	800492c <Displ_Transmit>
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <Displ_WriteData>:
 * @BRIEF   transmit a set of data in a SPI_DATA format
 * @PARAM   data        buffer data to send
 *          dataSize    number of bytes in "data" to be sent
 *          isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	4613      	mov	r3, r2
 8004a06:	71fb      	strb	r3, [r7, #7]
    if (buff_size==0) return;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <Displ_WriteData+0x24>
    Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	68f9      	ldr	r1, [r7, #12]
 8004a16:	2001      	movs	r0, #1
 8004a18:	f7ff ff88 	bl	800492c <Displ_Transmit>
 8004a1c:	e000      	b.n	8004a20 <Displ_WriteData+0x26>
    if (buff_size==0) return;
 8004a1e:	bf00      	nop
}
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <ILI9XXX_Init>:


/**********************************
 * @brief   ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
    Displ_Select();
 8004a2c:	f7ff ff54 	bl	80048d8 <Displ_Select>

    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8004a30:	2200      	movs	r2, #0
 8004a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a3a:	f001 fc1d 	bl	8006278 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8004a3e:	2001      	movs	r0, #1
 8004a40:	f000 ff4c 	bl	80058dc <HAL_Delay>
    HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8004a44:	2201      	movs	r2, #1
 8004a46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a4e:	f001 fc13 	bl	8006278 <HAL_GPIO_WritePin>
    HAL_Delay(150);
 8004a52:	2096      	movs	r0, #150	; 0x96
 8004a54:	f000 ff42 	bl	80058dc <HAL_Delay>
        Displ_WriteData(data,3);
    #endif
*/


    Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8004a58:	203a      	movs	r0, #58	; 0x3a
 8004a5a:	f7ff ffbf 	bl	80049dc <Displ_WriteCommand>
#ifdef Z_RGB666
    Displ_WriteData((uint8_t *)"\x66",1,0);     // RGB666
#endif
#ifdef Z_RGB565
    Displ_WriteData((uint8_t *)"\x55",1,0);     // RGB565
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2101      	movs	r1, #1
 8004a62:	4810      	ldr	r0, [pc, #64]	; (8004aa4 <ILI9XXX_Init+0x7c>)
 8004a64:	f7ff ffc9 	bl	80049fa <Displ_WriteData>
#endif
    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004a68:	20b0      	movs	r0, #176	; 0xb0
 8004a6a:	f7ff ffb7 	bl	80049dc <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2101      	movs	r1, #1
 8004a72:	480d      	ldr	r0, [pc, #52]	; (8004aa8 <ILI9XXX_Init+0x80>)
 8004a74:	f7ff ffc1 	bl	80049fa <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004a78:	20b0      	movs	r0, #176	; 0xb0
 8004a7a:	f7ff ffaf 	bl	80049dc <Displ_WriteCommand>
    Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2101      	movs	r1, #1
 8004a82:	4809      	ldr	r0, [pc, #36]	; (8004aa8 <ILI9XXX_Init+0x80>)
 8004a84:	f7ff ffb9 	bl	80049fa <Displ_WriteData>

    Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8004a88:	2011      	movs	r0, #17
 8004a8a:	f7ff ffa7 	bl	80049dc <Displ_WriteCommand>
    HAL_Delay(120);
 8004a8e:	2078      	movs	r0, #120	; 0x78
 8004a90:	f000 ff24 	bl	80058dc <HAL_Delay>

    Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8004a94:	2029      	movs	r0, #41	; 0x29
 8004a96:	f7ff ffa1 	bl	80049dc <Displ_WriteCommand>
    HAL_Delay(5);
 8004a9a:	2005      	movs	r0, #5
 8004a9c:	f000 ff1e 	bl	80058dc <HAL_Delay>

}
 8004aa0:	bf00      	nop
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	0800bcbc 	.word	0x0800bcbc
 8004aa8:	0800bcc0 	.word	0x0800bcc0

08004aac <Displ_SetAddressWindow>:
 *          information
 * @param  x1,y1,x2,y2 top left and bottom
 *                     right corner of the area
 *                     to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4623      	mov	r3, r4
 8004abc:	80fb      	strh	r3, [r7, #6]
 8004abe:	4603      	mov	r3, r0
 8004ac0:	80bb      	strh	r3, [r7, #4]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	807b      	strh	r3, [r7, #2]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	803b      	strh	r3, [r7, #0]
    static uint8_t data[4];

    ((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8004aca:	887b      	ldrh	r3, [r7, #2]
 8004acc:	061a      	lsls	r2, r3, #24
 8004ace:	887b      	ldrh	r3, [r7, #2]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	021b      	lsls	r3, r3, #8
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	88fa      	ldrh	r2, [r7, #6]
 8004ae2:	0a12      	lsrs	r2, r2, #8
 8004ae4:	b292      	uxth	r2, r2
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	4b14      	ldr	r3, [pc, #80]	; (8004b3c <Displ_SetAddressWindow+0x90>)
 8004aea:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8004aec:	202a      	movs	r0, #42	; 0x2a
 8004aee:	f7ff ff75 	bl	80049dc <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8004af2:	2200      	movs	r2, #0
 8004af4:	2104      	movs	r1, #4
 8004af6:	4811      	ldr	r0, [pc, #68]	; (8004b3c <Displ_SetAddressWindow+0x90>)
 8004af8:	f7ff ff7f 	bl	80049fa <Displ_WriteData>

    ((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8004afc:	883b      	ldrh	r3, [r7, #0]
 8004afe:	061a      	lsls	r2, r3, #24
 8004b00:	883b      	ldrh	r3, [r7, #0]
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	88bb      	ldrh	r3, [r7, #4]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	4313      	orrs	r3, r2
 8004b12:	88ba      	ldrh	r2, [r7, #4]
 8004b14:	0a12      	lsrs	r2, r2, #8
 8004b16:	b292      	uxth	r2, r2
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <Displ_SetAddressWindow+0x90>)
 8004b1c:	601a      	str	r2, [r3, #0]
    Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8004b1e:	202b      	movs	r0, #43	; 0x2b
 8004b20:	f7ff ff5c 	bl	80049dc <Displ_WriteCommand>
    Displ_WriteData(data, 4,0);
 8004b24:	2200      	movs	r2, #0
 8004b26:	2104      	movs	r1, #4
 8004b28:	4804      	ldr	r0, [pc, #16]	; (8004b3c <Displ_SetAddressWindow+0x90>)
 8004b2a:	f7ff ff66 	bl	80049fa <Displ_WriteData>
    Displ_WriteCommand(ILI9XXX_MEMWR);
 8004b2e:	202c      	movs	r0, #44	; 0x2c
 8004b30:	f7ff ff54 	bl	80049dc <Displ_WriteCommand>
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd90      	pop	{r4, r7, pc}
 8004b3c:	200029e8 	.word	0x200029e8

08004b40 <Displ_Init>:

/*****************************************************
 * @brief               first display initialization.
 * @param   orientation display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	71fb      	strb	r3, [r7, #7]
    if (TOUCH_SPI==DISPL_SPI){                                                  // if touch and display share the same SPI port
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);      // unselect display (will be selected at writing time)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b54:	f001 fb90 	bl	8006278 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);      // unselect touch (will be selected at writing time)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b5e:	4806      	ldr	r0, [pc, #24]	; (8004b78 <Displ_Init+0x38>)
 8004b60:	f001 fb8a 	bl	8006278 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);    // select display
        SET_DISPL_SPI_BAUDRATE;
        HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);    // select touch
        SET_TOUCH_SPI_BAUDRATE;
    }
    ILI9XXX_Init();
 8004b64:	f7ff ff60 	bl	8004a28 <ILI9XXX_Init>
    Displ_Orientation(orientation);
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 f806 	bl	8004b7c <Displ_Orientation>
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	48000400 	.word	0x48000400

08004b7c <Displ_Orientation>:

/**********************************************
 * @brief       set orientation of the display
 * @param   m   orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	71fb      	strb	r3, [r7, #7]
    static uint8_t data[1];
    switch(orientation) {
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d837      	bhi.n	8004bfc <Displ_Orientation+0x80>
 8004b8c:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <Displ_Orientation+0x18>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004ba5 	.word	0x08004ba5
 8004b98:	08004bbb 	.word	0x08004bbb
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004be7 	.word	0x08004be7
        case Displ_Orientat_0:
            data[0]=ILI9XXX_MADCTL_0DEG;
 8004ba4:	4b1d      	ldr	r3, [pc, #116]	; (8004c1c <Displ_Orientation+0xa0>)
 8004ba6:	2288      	movs	r2, #136	; 0x88
 8004ba8:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8004baa:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <Displ_Orientation+0xa4>)
 8004bac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004bb0:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 8004bb2:	4b1c      	ldr	r3, [pc, #112]	; (8004c24 <Displ_Orientation+0xa8>)
 8004bb4:	22f0      	movs	r2, #240	; 0xf0
 8004bb6:	801a      	strh	r2, [r3, #0]
            break;
 8004bb8:	e020      	b.n	8004bfc <Displ_Orientation+0x80>
        case Displ_Orientat_90:
            data[0]=ILI9XXX_MADCTL_90DEG;
 8004bba:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <Displ_Orientation+0xa0>)
 8004bbc:	22e8      	movs	r2, #232	; 0xe8
 8004bbe:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 8004bc0:	4b17      	ldr	r3, [pc, #92]	; (8004c20 <Displ_Orientation+0xa4>)
 8004bc2:	22f0      	movs	r2, #240	; 0xf0
 8004bc4:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 8004bc6:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <Displ_Orientation+0xa8>)
 8004bc8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004bcc:	801a      	strh	r2, [r3, #0]
            break;
 8004bce:	e015      	b.n	8004bfc <Displ_Orientation+0x80>
        case Displ_Orientat_180:
            data[0]=ILI9XXX_MADCTL_180DEG;
 8004bd0:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <Displ_Orientation+0xa0>)
 8004bd2:	2248      	movs	r2, #72	; 0x48
 8004bd4:	701a      	strb	r2, [r3, #0]
            _height = DISPL_HEIGHT;
 8004bd6:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <Displ_Orientation+0xa4>)
 8004bd8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004bdc:	801a      	strh	r2, [r3, #0]
            _width = DISPL_WIDTH;
 8004bde:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <Displ_Orientation+0xa8>)
 8004be0:	22f0      	movs	r2, #240	; 0xf0
 8004be2:	801a      	strh	r2, [r3, #0]
            break;
 8004be4:	e00a      	b.n	8004bfc <Displ_Orientation+0x80>
        case Displ_Orientat_270:
            data[0]=ILI9XXX_MADCTL_270DEG;
 8004be6:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <Displ_Orientation+0xa0>)
 8004be8:	2228      	movs	r2, #40	; 0x28
 8004bea:	701a      	strb	r2, [r3, #0]
            _height = DISPL_WIDTH;
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <Displ_Orientation+0xa4>)
 8004bee:	22f0      	movs	r2, #240	; 0xf0
 8004bf0:	801a      	strh	r2, [r3, #0]
            _width = DISPL_HEIGHT;
 8004bf2:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <Displ_Orientation+0xa8>)
 8004bf4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004bf8:	801a      	strh	r2, [r3, #0]
            break;
 8004bfa:	bf00      	nop
    }
    Displ_WriteCommand(ILI9XXX_MADCTL);
 8004bfc:	2036      	movs	r0, #54	; 0x36
 8004bfe:	f7ff feed 	bl	80049dc <Displ_WriteCommand>
    Displ_WriteData(data,1,0);
 8004c02:	2200      	movs	r2, #0
 8004c04:	2101      	movs	r1, #1
 8004c06:	4805      	ldr	r0, [pc, #20]	; (8004c1c <Displ_Orientation+0xa0>)
 8004c08:	f7ff fef7 	bl	80049fa <Displ_WriteData>
    current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8004c0c:	4a06      	ldr	r2, [pc, #24]	; (8004c28 <Displ_Orientation+0xac>)
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	7013      	strb	r3, [r2, #0]
}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	200029ec 	.word	0x200029ec
 8004c20:	200021e4 	.word	0x200021e4
 8004c24:	200021e2 	.word	0x200021e2
 8004c28:	200021e0 	.word	0x200021e0

08004c2c <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a05      	ldr	r2, [pc, #20]	; (8004c50 <HAL_SPI_ErrorCallback+0x24>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d102      	bne.n	8004c44 <HAL_SPI_ErrorCallback+0x18>
        Displ_SpiAvailable=1;
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_SPI_ErrorCallback+0x28>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]
    }
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	40003800 	.word	0x40003800
 8004c54:	20000058 	.word	0x20000058

08004c58 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance==DISPL_SPI) {
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a05      	ldr	r2, [pc, #20]	; (8004c7c <HAL_SPI_TxCpltCallback+0x24>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d102      	bne.n	8004c70 <HAL_SPI_TxCpltCallback+0x18>
        Displ_SpiAvailable=1;
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <HAL_SPI_TxCpltCallback+0x28>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	701a      	strb	r2, [r3, #0]
    #ifdef DISPLAY_USING_TOUCHGFX
        DisplayDriver_TransferCompleteCallback();
    #endif

    }
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	40003800 	.word	0x40003800
 8004c80:	20000058 	.word	0x20000058

08004c84 <Displ_FillArea>:
/*****************************
 * @brief   fill a rectangle with a color
 * @param   x, y    top left corner of the rectangle
 *          w, h    width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004c84:	b590      	push	{r4, r7, lr}
 8004c86:	b08b      	sub	sp, #44	; 0x2c
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	4611      	mov	r1, r2
 8004c90:	461a      	mov	r2, r3
 8004c92:	4623      	mov	r3, r4
 8004c94:	80fb      	strh	r3, [r7, #6]
 8004c96:	4603      	mov	r3, r0
 8004c98:	80bb      	strh	r3, [r7, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	807b      	strh	r3, [r7, #2]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	803b      	strh	r3, [r7, #0]
 * -    swap buffers
 */

    uint32_t k,x1,y1,area,times;

    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004ca2:	88fb      	ldrh	r3, [r7, #6]
 8004ca4:	4a4f      	ldr	r2, [pc, #316]	; (8004de4 <Displ_FillArea+0x160>)
 8004ca6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004caa:	4293      	cmp	r3, r2
 8004cac:	f280 8096 	bge.w	8004ddc <Displ_FillArea+0x158>
 8004cb0:	88bb      	ldrh	r3, [r7, #4]
 8004cb2:	4a4d      	ldr	r2, [pc, #308]	; (8004de8 <Displ_FillArea+0x164>)
 8004cb4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	f280 808f 	bge.w	8004ddc <Displ_FillArea+0x158>
 8004cbe:	887b      	ldrh	r3, [r7, #2]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 808b 	beq.w	8004ddc <Displ_FillArea+0x158>
 8004cc6:	883b      	ldrh	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8087 	beq.w	8004ddc <Displ_FillArea+0x158>

    x1=x + w - 1;
 8004cce:	88fa      	ldrh	r2, [r7, #6]
 8004cd0:	887b      	ldrh	r3, [r7, #2]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	623b      	str	r3, [r7, #32]
    if (x1 > _width) {
 8004cd8:	4b42      	ldr	r3, [pc, #264]	; (8004de4 <Displ_FillArea+0x160>)
 8004cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d903      	bls.n	8004cee <Displ_FillArea+0x6a>
        x1=_width;
 8004ce6:	4b3f      	ldr	r3, [pc, #252]	; (8004de4 <Displ_FillArea+0x160>)
 8004ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cec:	623b      	str	r3, [r7, #32]
    }

    y1=y + h - 1;
 8004cee:	88ba      	ldrh	r2, [r7, #4]
 8004cf0:	883b      	ldrh	r3, [r7, #0]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	61fb      	str	r3, [r7, #28]
    if (y1 > _height) {
 8004cf8:	4b3b      	ldr	r3, [pc, #236]	; (8004de8 <Displ_FillArea+0x164>)
 8004cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d903      	bls.n	8004d0e <Displ_FillArea+0x8a>
        y1=_height;
 8004d06:	4b38      	ldr	r3, [pc, #224]	; (8004de8 <Displ_FillArea+0x164>)
 8004d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d0c:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

    uint32_t data32;

    data32=(color>>8) | (color<<8) | (color<<24);   // supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8004d0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d10:	0a1b      	lsrs	r3, r3, #8
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d18:	021b      	lsls	r3, r3, #8
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d1e:	061b      	lsls	r3, r3, #24
 8004d20:	4313      	orrs	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
    area=((y1-y+1)*(x1-x+1));                       // area to fill in 16bit pixels
 8004d24:	88bb      	ldrh	r3, [r7, #4]
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	88fa      	ldrh	r2, [r7, #6]
 8004d2e:	6a39      	ldr	r1, [r7, #32]
 8004d30:	1a8a      	subs	r2, r1, r2
 8004d32:	3201      	adds	r2, #1
 8004d34:	fb02 f303 	mul.w	r3, r2, r3
 8004d38:	60fb      	str	r3, [r7, #12]
    uint32_t *buf32Pos=(uint32_t *)dispBuffer;      //dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8004d3a:	4b2c      	ldr	r3, [pc, #176]	; (8004dec <Displ_FillArea+0x168>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	617b      	str	r3, [r7, #20]
    if (area<(SIZEBUF>>1))                          // if area is smaller than dispBuffer
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d46:	d204      	bcs.n	8004d52 <Displ_FillArea+0xce>
        times=(area>>1)+1;                          // number of times data32 has to be loaded into buffer
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	085b      	lsrs	r3, r3, #1
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	e002      	b.n	8004d58 <Displ_FillArea+0xd4>
    else
        times=(SIZEBUF>>2);                         // dispBuffer size as 32bit-words
 8004d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d56:	61bb      	str	r3, [r7, #24]
    for (k = 0; k < times; k++)
 8004d58:	2300      	movs	r3, #0
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5c:	e007      	b.n	8004d6e <Displ_FillArea+0xea>
        *(buf32Pos++)=data32;                       // loads buffer moving 32bit-words
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	1d1a      	adds	r2, r3, #4
 8004d62:	617a      	str	r2, [r7, #20]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	601a      	str	r2, [r3, #0]
    for (k = 0; k < times; k++)
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d3f3      	bcc.n	8004d5e <Displ_FillArea+0xda>
    }
    datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
    Displ_SetAddressWindow(x, y, x1, y1);
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	88b9      	ldrh	r1, [r7, #4]
 8004d80:	88f8      	ldrh	r0, [r7, #6]
 8004d82:	f7ff fe93 	bl	8004aac <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
    times=(area>>(BUFLEVEL-1));                     //how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	0a5b      	lsrs	r3, r3, #9
 8004d8a:	61bb      	str	r3, [r7, #24]
    for  (k=0;k<times;k++) {
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d90:	e00a      	b.n	8004da8 <Displ_FillArea+0x124>
        Displ_WriteData(dispBuffer,SIZEBUF,0);
 8004d92:	4b16      	ldr	r3, [pc, #88]	; (8004dec <Displ_FillArea+0x168>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fe2c 	bl	80049fa <Displ_WriteData>
    for  (k=0;k<times;k++) {
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	3301      	adds	r3, #1
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
 8004da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d3f0      	bcc.n	8004d92 <Displ_FillArea+0x10e>
    }
    Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8004db0:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <Displ_FillArea+0x168>)
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	005a      	lsls	r2, r3, #1
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	029b      	lsls	r3, r3, #10
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	f7ff fe1a 	bl	80049fa <Displ_WriteData>
    }
    Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <Displ_FillArea+0x168>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <Displ_FillArea+0x16c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d101      	bne.n	8004dd4 <Displ_FillArea+0x150>
 8004dd0:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <Displ_FillArea+0x170>)
 8004dd2:	e000      	b.n	8004dd6 <Displ_FillArea+0x152>
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <Displ_FillArea+0x16c>)
 8004dd6:	4a05      	ldr	r2, [pc, #20]	; (8004dec <Displ_FillArea+0x168>)
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	e000      	b.n	8004dde <Displ_FillArea+0x15a>
    if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004ddc:	bf00      	nop

}
 8004dde:	372c      	adds	r7, #44	; 0x2c
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd90      	pop	{r4, r7, pc}
 8004de4:	200021e2 	.word	0x200021e2
 8004de8:	200021e4 	.word	0x200021e4
 8004dec:	2000005c 	.word	0x2000005c
 8004df0:	200021e8 	.word	0x200021e8
 8004df4:	200025e8 	.word	0x200025e8

08004df8 <Displ_Pixel>:
/***********************
 * @brief   print a single pixel
 * @params  x, y    pixel position on display
 *          color   ... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	4603      	mov	r3, r0
 8004e00:	80fb      	strh	r3, [r7, #6]
 8004e02:	460b      	mov	r3, r1
 8004e04:	80bb      	strh	r3, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8004e0a:	88fb      	ldrh	r3, [r7, #6]
 8004e0c:	4a0b      	ldr	r2, [pc, #44]	; (8004e3c <Displ_Pixel+0x44>)
 8004e0e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004e12:	4293      	cmp	r3, r2
 8004e14:	da0e      	bge.n	8004e34 <Displ_Pixel+0x3c>
 8004e16:	88bb      	ldrh	r3, [r7, #4]
 8004e18:	4a09      	ldr	r2, [pc, #36]	; (8004e40 <Displ_Pixel+0x48>)
 8004e1a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	da08      	bge.n	8004e34 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8004e22:	88b9      	ldrh	r1, [r7, #4]
 8004e24:	88f8      	ldrh	r0, [r7, #6]
 8004e26:	887b      	ldrh	r3, [r7, #2]
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f7ff ff29 	bl	8004c84 <Displ_FillArea>
 8004e32:	e000      	b.n	8004e36 <Displ_Pixel+0x3e>
        return;
 8004e34:	bf00      	nop

}
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	200021e2 	.word	0x200021e2
 8004e40:	200021e4 	.word	0x200021e4

08004e44 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8004e44:	b590      	push	{r4, r7, lr}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	461a      	mov	r2, r3
 8004e52:	4623      	mov	r3, r4
 8004e54:	80fb      	strh	r3, [r7, #6]
 8004e56:	4603      	mov	r3, r0
 8004e58:	80bb      	strh	r3, [r7, #4]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	807b      	strh	r3, [r7, #2]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8004e62:	887b      	ldrh	r3, [r7, #2]
 8004e64:	f1c3 0301 	rsb	r3, r3, #1
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8004e70:	887b      	ldrh	r3, [r7, #2]
 8004e72:	461a      	mov	r2, r3
 8004e74:	03d2      	lsls	r2, r2, #15
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8004e82:	887b      	ldrh	r3, [r7, #2]
 8004e84:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8004e86:	88f8      	ldrh	r0, [r7, #6]
 8004e88:	88ba      	ldrh	r2, [r7, #4]
 8004e8a:	887b      	ldrh	r3, [r7, #2]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	883a      	ldrh	r2, [r7, #0]
 8004e92:	4619      	mov	r1, r3
 8004e94:	f7ff ffb0 	bl	8004df8 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8004e98:	88f8      	ldrh	r0, [r7, #6]
 8004e9a:	88ba      	ldrh	r2, [r7, #4]
 8004e9c:	887b      	ldrh	r3, [r7, #2]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	883a      	ldrh	r2, [r7, #0]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f7ff ffa7 	bl	8004df8 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8004eaa:	88fa      	ldrh	r2, [r7, #6]
 8004eac:	887b      	ldrh	r3, [r7, #2]
 8004eae:	4413      	add	r3, r2
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	88b9      	ldrh	r1, [r7, #4]
 8004eb4:	883a      	ldrh	r2, [r7, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff ff9e 	bl	8004df8 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 8004ebc:	88fa      	ldrh	r2, [r7, #6]
 8004ebe:	887b      	ldrh	r3, [r7, #2]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	88b9      	ldrh	r1, [r7, #4]
 8004ec6:	883a      	ldrh	r2, [r7, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff ff95 	bl	8004df8 <Displ_Pixel>

    while (x<y) {
 8004ece:	e081      	b.n	8004fd4 <Displ_drawCircle+0x190>
        if (f >= 0) {
 8004ed0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	db0e      	blt.n	8004ef6 <Displ_drawCircle+0xb2>
            y--;
 8004ed8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8004ee4:	8a7b      	ldrh	r3, [r7, #18]
 8004ee6:	3302      	adds	r3, #2
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8004eec:	8afa      	ldrh	r2, [r7, #22]
 8004eee:	8a7b      	ldrh	r3, [r7, #18]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8004ef6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3301      	adds	r3, #1
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8004f02:	8abb      	ldrh	r3, [r7, #20]
 8004f04:	3302      	adds	r3, #2
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8004f0a:	8afa      	ldrh	r2, [r7, #22]
 8004f0c:	8abb      	ldrh	r3, [r7, #20]
 8004f0e:	4413      	add	r3, r2
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8004f14:	88fa      	ldrh	r2, [r7, #6]
 8004f16:	8a3b      	ldrh	r3, [r7, #16]
 8004f18:	4413      	add	r3, r2
 8004f1a:	b298      	uxth	r0, r3
 8004f1c:	88ba      	ldrh	r2, [r7, #4]
 8004f1e:	89fb      	ldrh	r3, [r7, #14]
 8004f20:	4413      	add	r3, r2
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	883a      	ldrh	r2, [r7, #0]
 8004f26:	4619      	mov	r1, r3
 8004f28:	f7ff ff66 	bl	8004df8 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8004f2c:	88fa      	ldrh	r2, [r7, #6]
 8004f2e:	8a3b      	ldrh	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	b298      	uxth	r0, r3
 8004f34:	88ba      	ldrh	r2, [r7, #4]
 8004f36:	89fb      	ldrh	r3, [r7, #14]
 8004f38:	4413      	add	r3, r2
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	883a      	ldrh	r2, [r7, #0]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	f7ff ff5a 	bl	8004df8 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8004f44:	88fa      	ldrh	r2, [r7, #6]
 8004f46:	8a3b      	ldrh	r3, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	b298      	uxth	r0, r3
 8004f4c:	88ba      	ldrh	r2, [r7, #4]
 8004f4e:	89fb      	ldrh	r3, [r7, #14]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	883a      	ldrh	r2, [r7, #0]
 8004f56:	4619      	mov	r1, r3
 8004f58:	f7ff ff4e 	bl	8004df8 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8004f5c:	88fa      	ldrh	r2, [r7, #6]
 8004f5e:	8a3b      	ldrh	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	b298      	uxth	r0, r3
 8004f64:	88ba      	ldrh	r2, [r7, #4]
 8004f66:	89fb      	ldrh	r3, [r7, #14]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	883a      	ldrh	r2, [r7, #0]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	f7ff ff42 	bl	8004df8 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8004f74:	88fa      	ldrh	r2, [r7, #6]
 8004f76:	89fb      	ldrh	r3, [r7, #14]
 8004f78:	4413      	add	r3, r2
 8004f7a:	b298      	uxth	r0, r3
 8004f7c:	88ba      	ldrh	r2, [r7, #4]
 8004f7e:	8a3b      	ldrh	r3, [r7, #16]
 8004f80:	4413      	add	r3, r2
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	883a      	ldrh	r2, [r7, #0]
 8004f86:	4619      	mov	r1, r3
 8004f88:	f7ff ff36 	bl	8004df8 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8004f8c:	88fa      	ldrh	r2, [r7, #6]
 8004f8e:	89fb      	ldrh	r3, [r7, #14]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	b298      	uxth	r0, r3
 8004f94:	88ba      	ldrh	r2, [r7, #4]
 8004f96:	8a3b      	ldrh	r3, [r7, #16]
 8004f98:	4413      	add	r3, r2
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	883a      	ldrh	r2, [r7, #0]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	f7ff ff2a 	bl	8004df8 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8004fa4:	88fa      	ldrh	r2, [r7, #6]
 8004fa6:	89fb      	ldrh	r3, [r7, #14]
 8004fa8:	4413      	add	r3, r2
 8004faa:	b298      	uxth	r0, r3
 8004fac:	88ba      	ldrh	r2, [r7, #4]
 8004fae:	8a3b      	ldrh	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	883a      	ldrh	r2, [r7, #0]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f7ff ff1e 	bl	8004df8 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8004fbc:	88fa      	ldrh	r2, [r7, #6]
 8004fbe:	89fb      	ldrh	r3, [r7, #14]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	b298      	uxth	r0, r3
 8004fc4:	88ba      	ldrh	r2, [r7, #4]
 8004fc6:	8a3b      	ldrh	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	883a      	ldrh	r2, [r7, #0]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f7ff ff12 	bl	8004df8 <Displ_Pixel>
    while (x<y) {
 8004fd4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004fd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	f6ff af77 	blt.w	8004ed0 <Displ_drawCircle+0x8c>
    }
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd90      	pop	{r4, r7, pc}

08004fec <Displ_CLS>:

/*****************
 * @brief   clear display with a color.
 * @param   bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	80fb      	strh	r3, [r7, #6]
    Displ_FillArea(0, 0, _width, _height, bgcolor);
 8004ff6:	4b09      	ldr	r3, [pc, #36]	; (800501c <Displ_CLS+0x30>)
 8004ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	4b08      	ldr	r3, [pc, #32]	; (8005020 <Displ_CLS+0x34>)
 8005000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005004:	b299      	uxth	r1, r3
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	460b      	mov	r3, r1
 800500c:	2100      	movs	r1, #0
 800500e:	2000      	movs	r0, #0
 8005010:	f7ff fe38 	bl	8004c84 <Displ_FillArea>
}
 8005014:	bf00      	nop
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	200021e2 	.word	0x200021e2
 8005020:	200021e4 	.word	0x200021e4

08005024 <Displ_Line>:

/************************************************************************
 * @brief   draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8005024:	b590      	push	{r4, r7, lr}
 8005026:	b08b      	sub	sp, #44	; 0x2c
 8005028:	af02      	add	r7, sp, #8
 800502a:	4604      	mov	r4, r0
 800502c:	4608      	mov	r0, r1
 800502e:	4611      	mov	r1, r2
 8005030:	461a      	mov	r2, r3
 8005032:	4623      	mov	r3, r4
 8005034:	80fb      	strh	r3, [r7, #6]
 8005036:	4603      	mov	r3, r0
 8005038:	80bb      	strh	r3, [r7, #4]
 800503a:	460b      	mov	r3, r1
 800503c:	807b      	strh	r3, [r7, #2]
 800503e:	4613      	mov	r3, r2
 8005040:	803b      	strh	r3, [r7, #0]
    int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8005042:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005046:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800504a:	429a      	cmp	r2, r3
 800504c:	d123      	bne.n	8005096 <Displ_Line+0x72>
        if (y1>y0){
 800504e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005052:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005056:	429a      	cmp	r2, r3
 8005058:	dd0e      	ble.n	8005078 <Displ_Line+0x54>
            Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 800505a:	88f8      	ldrh	r0, [r7, #6]
 800505c:	88b9      	ldrh	r1, [r7, #4]
 800505e:	883a      	ldrh	r2, [r7, #0]
 8005060:	88bb      	ldrh	r3, [r7, #4]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	b29b      	uxth	r3, r3
 8005066:	3301      	adds	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	4613      	mov	r3, r2
 8005070:	2201      	movs	r2, #1
 8005072:	f7ff fe07 	bl	8004c84 <Displ_FillArea>
        }
        else {
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
        }
        return;
 8005076:	e103      	b.n	8005280 <Displ_Line+0x25c>
            Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8005078:	88f8      	ldrh	r0, [r7, #6]
 800507a:	8839      	ldrh	r1, [r7, #0]
 800507c:	88ba      	ldrh	r2, [r7, #4]
 800507e:	883b      	ldrh	r3, [r7, #0]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	b29b      	uxth	r3, r3
 8005084:	3301      	adds	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	2201      	movs	r2, #1
 8005090:	f7ff fdf8 	bl	8004c84 <Displ_FillArea>
        return;
 8005094:	e0f4      	b.n	8005280 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8005096:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800509a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d121      	bne.n	80050e6 <Displ_Line+0xc2>
        if (x1>x0)
 80050a2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80050a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	dd0d      	ble.n	80050ca <Displ_Line+0xa6>
            Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 80050ae:	88f8      	ldrh	r0, [r7, #6]
 80050b0:	88b9      	ldrh	r1, [r7, #4]
 80050b2:	887a      	ldrh	r2, [r7, #2]
 80050b4:	88fb      	ldrh	r3, [r7, #6]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3301      	adds	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	2301      	movs	r3, #1
 80050c4:	f7ff fdde 	bl	8004c84 <Displ_FillArea>
        else
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
        return;
 80050c8:	e0da      	b.n	8005280 <Displ_Line+0x25c>
            Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 80050ca:	8878      	ldrh	r0, [r7, #2]
 80050cc:	8839      	ldrh	r1, [r7, #0]
 80050ce:	88fa      	ldrh	r2, [r7, #6]
 80050d0:	887b      	ldrh	r3, [r7, #2]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3301      	adds	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	2301      	movs	r3, #1
 80050e0:	f7ff fdd0 	bl	8004c84 <Displ_FillArea>
        return;
 80050e4:	e0cc      	b.n	8005280 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 80050e6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80050ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	dd05      	ble.n	80050fe <Displ_Line+0xda>
 80050f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80050f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80050fa:	1ad2      	subs	r2, r2, r3
 80050fc:	e004      	b.n	8005108 <Displ_Line+0xe4>
 80050fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005102:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005106:	1ad2      	subs	r2, r2, r3
 8005108:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800510c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005110:	4299      	cmp	r1, r3
 8005112:	dd05      	ble.n	8005120 <Displ_Line+0xfc>
 8005114:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800511c:	1acb      	subs	r3, r1, r3
 800511e:	e004      	b.n	800512a <Displ_Line+0x106>
 8005120:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8005124:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005128:	1acb      	subs	r3, r1, r3
 800512a:	429a      	cmp	r2, r3
 800512c:	bfcc      	ite	gt
 800512e:	2301      	movgt	r3, #1
 8005130:	2300      	movle	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8005136:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	827b      	strh	r3, [r7, #18]
 8005142:	88bb      	ldrh	r3, [r7, #4]
 8005144:	80fb      	strh	r3, [r7, #6]
 8005146:	8a7b      	ldrh	r3, [r7, #18]
 8005148:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 800514a:	887b      	ldrh	r3, [r7, #2]
 800514c:	823b      	strh	r3, [r7, #16]
 800514e:	883b      	ldrh	r3, [r7, #0]
 8005150:	807b      	strh	r3, [r7, #2]
 8005152:	8a3b      	ldrh	r3, [r7, #16]
 8005154:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8005156:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800515a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800515e:	429a      	cmp	r2, r3
 8005160:	dd0b      	ble.n	800517a <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	81fb      	strh	r3, [r7, #14]
 8005166:	887b      	ldrh	r3, [r7, #2]
 8005168:	80fb      	strh	r3, [r7, #6]
 800516a:	89fb      	ldrh	r3, [r7, #14]
 800516c:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 800516e:	88bb      	ldrh	r3, [r7, #4]
 8005170:	81bb      	strh	r3, [r7, #12]
 8005172:	883b      	ldrh	r3, [r7, #0]
 8005174:	80bb      	strh	r3, [r7, #4]
 8005176:	89bb      	ldrh	r3, [r7, #12]
 8005178:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 800517a:	887a      	ldrh	r2, [r7, #2]
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	b29b      	uxth	r3, r3
 8005182:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8005184:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005188:	105b      	asrs	r3, r3, #1
 800518a:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 800518c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005190:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005194:	429a      	cmp	r2, r3
 8005196:	da07      	bge.n	80051a8 <Displ_Line+0x184>
        dy = y1-y0;
 8005198:	883a      	ldrh	r2, [r7, #0]
 800519a:	88bb      	ldrh	r3, [r7, #4]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	b29b      	uxth	r3, r3
 80051a0:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 80051a2:	2301      	movs	r3, #1
 80051a4:	837b      	strh	r3, [r7, #26]
 80051a6:	e007      	b.n	80051b8 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 80051a8:	88ba      	ldrh	r2, [r7, #4]
 80051aa:	883b      	ldrh	r3, [r7, #0]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 80051b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051b6:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 80051b8:	2300      	movs	r3, #0
 80051ba:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	83bb      	strh	r3, [r7, #28]
 80051c0:	e03a      	b.n	8005238 <Displ_Line+0x214>
        l++;
 80051c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3301      	adds	r3, #1
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 80051ce:	8b3a      	ldrh	r2, [r7, #24]
 80051d0:	8afb      	ldrh	r3, [r7, #22]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 80051d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	da25      	bge.n	800522c <Displ_Line+0x208>
            if (steep) {
 80051e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d009      	beq.n	80051fc <Displ_Line+0x1d8>
                Displ_FillArea(y0, x0, 1, l, color);
 80051e8:	88b8      	ldrh	r0, [r7, #4]
 80051ea:	88f9      	ldrh	r1, [r7, #6]
 80051ec:	8bfa      	ldrh	r2, [r7, #30]
 80051ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	4613      	mov	r3, r2
 80051f4:	2201      	movs	r2, #1
 80051f6:	f7ff fd45 	bl	8004c84 <Displ_FillArea>
 80051fa:	e007      	b.n	800520c <Displ_Line+0x1e8>
            } else {
                Displ_FillArea(x0, y0, l, 1, color);
 80051fc:	88f8      	ldrh	r0, [r7, #6]
 80051fe:	88b9      	ldrh	r1, [r7, #4]
 8005200:	8bfa      	ldrh	r2, [r7, #30]
 8005202:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	2301      	movs	r3, #1
 8005208:	f7ff fd3c 	bl	8004c84 <Displ_FillArea>
            }
            y0 += ystep;
 800520c:	88ba      	ldrh	r2, [r7, #4]
 800520e:	8b7b      	ldrh	r3, [r7, #26]
 8005210:	4413      	add	r3, r2
 8005212:	b29b      	uxth	r3, r3
 8005214:	80bb      	strh	r3, [r7, #4]
            l=0;
 8005216:	2300      	movs	r3, #0
 8005218:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 800521a:	8bbb      	ldrh	r3, [r7, #28]
 800521c:	3301      	adds	r3, #1
 800521e:	b29b      	uxth	r3, r3
 8005220:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8005222:	8b3a      	ldrh	r2, [r7, #24]
 8005224:	897b      	ldrh	r3, [r7, #10]
 8005226:	4413      	add	r3, r2
 8005228:	b29b      	uxth	r3, r3
 800522a:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 800522c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005230:	b29b      	uxth	r3, r3
 8005232:	3301      	adds	r3, #1
 8005234:	b29b      	uxth	r3, r3
 8005236:	83bb      	strh	r3, [r7, #28]
 8005238:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800523c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005240:	429a      	cmp	r2, r3
 8005242:	ddbe      	ble.n	80051c2 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8005244:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d019      	beq.n	8005280 <Displ_Line+0x25c>
        if (steep) {
 800524c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <Displ_Line+0x248>
            Displ_FillArea(y0, x0, 1, l-1, color);
 8005254:	88b8      	ldrh	r0, [r7, #4]
 8005256:	88f9      	ldrh	r1, [r7, #6]
 8005258:	8bfb      	ldrh	r3, [r7, #30]
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	4613      	mov	r3, r2
 8005264:	2201      	movs	r2, #1
 8005266:	f7ff fd0d 	bl	8004c84 <Displ_FillArea>
 800526a:	e009      	b.n	8005280 <Displ_Line+0x25c>
        } else {
            Displ_FillArea(x0, y0, l-1,1, color);
 800526c:	88f8      	ldrh	r0, [r7, #6]
 800526e:	88b9      	ldrh	r1, [r7, #4]
 8005270:	8bfb      	ldrh	r3, [r7, #30]
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	2301      	movs	r3, #1
 800527c:	f7ff fd02 	bl	8004c84 <Displ_FillArea>
        }
    }
}
 8005280:	3724      	adds	r7, #36	; 0x24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd90      	pop	{r4, r7, pc}

08005286 <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8005286:	b590      	push	{r4, r7, lr}
 8005288:	b091      	sub	sp, #68	; 0x44
 800528a:	af02      	add	r7, sp, #8
 800528c:	4604      	mov	r4, r0
 800528e:	4608      	mov	r0, r1
 8005290:	4611      	mov	r1, r2
 8005292:	461a      	mov	r2, r3
 8005294:	4623      	mov	r3, r4
 8005296:	80fb      	strh	r3, [r7, #6]
 8005298:	4603      	mov	r3, r0
 800529a:	80bb      	strh	r3, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	807b      	strh	r3, [r7, #2]
 80052a0:	4613      	mov	r3, r2
 80052a2:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 80052a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80052a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	dd0b      	ble.n	80052c8 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80052b0:	88bb      	ldrh	r3, [r7, #4]
 80052b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80052b4:	883b      	ldrh	r3, [r7, #0]
 80052b6:	80bb      	strh	r3, [r7, #4]
 80052b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052ba:	803b      	strh	r3, [r7, #0]
 80052bc:	88fb      	ldrh	r3, [r7, #6]
 80052be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80052c0:	887b      	ldrh	r3, [r7, #2]
 80052c2:	80fb      	strh	r3, [r7, #6]
 80052c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052c6:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 80052c8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80052cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80052d0:	429a      	cmp	r2, r3
 80052d2:	dd0f      	ble.n	80052f4 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 80052d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80052d8:	847b      	strh	r3, [r7, #34]	; 0x22
 80052da:	883b      	ldrh	r3, [r7, #0]
 80052dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80052e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052e2:	803b      	strh	r3, [r7, #0]
 80052e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80052e8:	843b      	strh	r3, [r7, #32]
 80052ea:	887b      	ldrh	r3, [r7, #2]
 80052ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80052f0:	8c3b      	ldrh	r3, [r7, #32]
 80052f2:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80052f4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80052f8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	dd0b      	ble.n	8005318 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005300:	88bb      	ldrh	r3, [r7, #4]
 8005302:	83fb      	strh	r3, [r7, #30]
 8005304:	883b      	ldrh	r3, [r7, #0]
 8005306:	80bb      	strh	r3, [r7, #4]
 8005308:	8bfb      	ldrh	r3, [r7, #30]
 800530a:	803b      	strh	r3, [r7, #0]
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	83bb      	strh	r3, [r7, #28]
 8005310:	887b      	ldrh	r3, [r7, #2]
 8005312:	80fb      	strh	r3, [r7, #6]
 8005314:	8bbb      	ldrh	r3, [r7, #28]
 8005316:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8005318:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800531c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005320:	429a      	cmp	r2, r3
 8005322:	d136      	bne.n	8005392 <Displ_fillTriangle+0x10c>
        a = b = x0;
 8005324:	88fb      	ldrh	r3, [r7, #6]
 8005326:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005328:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800532a:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 800532c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005330:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005334:	429a      	cmp	r2, r3
 8005336:	da02      	bge.n	800533e <Displ_fillTriangle+0xb8>
 8005338:	887b      	ldrh	r3, [r7, #2]
 800533a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800533c:	e007      	b.n	800534e <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 800533e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005342:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005346:	429a      	cmp	r2, r3
 8005348:	dd01      	ble.n	800534e <Displ_fillTriangle+0xc8>
 800534a:	887b      	ldrh	r3, [r7, #2]
 800534c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 800534e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005352:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005356:	429a      	cmp	r2, r3
 8005358:	da03      	bge.n	8005362 <Displ_fillTriangle+0xdc>
 800535a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800535e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005360:	e008      	b.n	8005374 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8005362:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005366:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800536a:	429a      	cmp	r2, r3
 800536c:	dd02      	ble.n	8005374 <Displ_fillTriangle+0xee>
 800536e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005372:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8005374:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005378:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800537c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005380:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005384:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	4623      	mov	r3, r4
 800538c:	f7ff fe4a 	bl	8005024 <Displ_Line>
        return;
 8005390:	e0d2      	b.n	8005538 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8005392:	887a      	ldrh	r2, [r7, #2]
 8005394:	88fb      	ldrh	r3, [r7, #6]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	b29b      	uxth	r3, r3
 800539a:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 800539c:	883a      	ldrh	r2, [r7, #0]
 800539e:	88bb      	ldrh	r3, [r7, #4]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 80053a6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 80053b2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80053b6:	88bb      	ldrh	r3, [r7, #4]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 80053be:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80053c2:	887b      	ldrh	r3, [r7, #2]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 80053ca:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80053ce:	883b      	ldrh	r3, [r7, #0]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 80053d6:	2300      	movs	r3, #0
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 80053da:	2300      	movs	r3, #0
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80053de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80053e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d102      	bne.n	80053f0 <Displ_fillTriangle+0x16a>
 80053ea:	883b      	ldrh	r3, [r7, #0]
 80053ec:	863b      	strh	r3, [r7, #48]	; 0x30
 80053ee:	e003      	b.n	80053f8 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 80053f0:	883b      	ldrh	r3, [r7, #0]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 80053f8:	88bb      	ldrh	r3, [r7, #4]
 80053fa:	867b      	strh	r3, [r7, #50]	; 0x32
 80053fc:	e03d      	b.n	800547a <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 80053fe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005404:	fb92 f3f3 	sdiv	r3, r2, r3
 8005408:	b29a      	uxth	r2, r3
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	4413      	add	r3, r2
 800540e:	b29b      	uxth	r3, r3
 8005410:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005412:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005418:	fb92 f3f3 	sdiv	r3, r2, r3
 800541c:	b29a      	uxth	r2, r3
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	4413      	add	r3, r2
 8005422:	b29b      	uxth	r3, r3
 8005424:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8005426:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800542a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800542c:	4413      	add	r3, r2
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005430:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005436:	4413      	add	r3, r2
 8005438:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800543a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800543e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005442:	429a      	cmp	r2, r3
 8005444:	dd05      	ble.n	8005452 <Displ_fillTriangle+0x1cc>
 8005446:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005448:	81bb      	strh	r3, [r7, #12]
 800544a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800544c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800544e:	89bb      	ldrh	r3, [r7, #12]
 8005450:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005452:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005456:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800545a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800545e:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005462:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	4623      	mov	r3, r4
 800546a:	f7ff fddb 	bl	8005024 <Displ_Line>
    for(y=y0; y<=last; y++) {
 800546e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005472:	b29b      	uxth	r3, r3
 8005474:	3301      	adds	r3, #1
 8005476:	b29b      	uxth	r3, r3
 8005478:	867b      	strh	r3, [r7, #50]	; 0x32
 800547a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800547e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005482:	429a      	cmp	r2, r3
 8005484:	ddbb      	ble.n	80053fe <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8005486:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800548a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800548e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005492:	1a8a      	subs	r2, r1, r2
 8005494:	fb02 f303 	mul.w	r3, r2, r3
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 800549a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800549e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80054a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80054a6:	1a8a      	subs	r2, r1, r2
 80054a8:	fb02 f303 	mul.w	r3, r2, r3
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 80054ae:	e03d      	b.n	800552c <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 80054b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80054b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	887b      	ldrh	r3, [r7, #2]
 80054be:	4413      	add	r3, r2
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 80054c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80054c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	4413      	add	r3, r2
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 80054d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054de:	4413      	add	r3, r2
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80054e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80054e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054e8:	4413      	add	r3, r2
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80054ec:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80054f0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80054f4:	429a      	cmp	r2, r3
 80054f6:	dd05      	ble.n	8005504 <Displ_fillTriangle+0x27e>
 80054f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054fa:	81fb      	strh	r3, [r7, #14]
 80054fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80054fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005500:	89fb      	ldrh	r3, [r7, #14]
 8005502:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005504:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005508:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800550c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005510:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005514:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	4623      	mov	r3, r4
 800551c:	f7ff fd82 	bl	8005024 <Displ_Line>
    for(; y<=y2; y++) {
 8005520:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005524:	b29b      	uxth	r3, r3
 8005526:	3301      	adds	r3, #1
 8005528:	b29b      	uxth	r3, r3
 800552a:	867b      	strh	r3, [r7, #50]	; 0x32
 800552c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005530:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005534:	429a      	cmp	r2, r3
 8005536:	ddbb      	ble.n	80054b0 <Displ_fillTriangle+0x22a>
    }
}
 8005538:	373c      	adds	r7, #60	; 0x3c
 800553a:	46bd      	mov	sp, r7
 800553c:	bd90      	pop	{r4, r7, pc}
	...

08005540 <Displ_WChar>:
 * @brief   display one character on the display
 * @param   x,y: top left corner of the character to be printed
 *          ch, font, color, bgcolor: as per parameter name
 *          size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005540:	b082      	sub	sp, #8
 8005542:	b590      	push	{r4, r7, lr}
 8005544:	b08d      	sub	sp, #52	; 0x34
 8005546:	af00      	add	r7, sp, #0
 8005548:	647b      	str	r3, [r7, #68]	; 0x44
 800554a:	4603      	mov	r3, r0
 800554c:	80fb      	strh	r3, [r7, #6]
 800554e:	460b      	mov	r3, r1
 8005550:	80bb      	strh	r3, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
    uint8_t wsize=font.Width; //printing char width
 8005556:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800555a:	76fb      	strb	r3, [r7, #27]

    if (size==2)
 800555c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005560:	2b02      	cmp	r3, #2
 8005562:	d102      	bne.n	800556a <Displ_WChar+0x2a>
        wsize<<= 1;
 8005564:	7efb      	ldrb	r3, [r7, #27]
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	76fb      	strb	r3, [r7, #27]
    bufSize=0;
 800556a:	2300      	movs	r3, #0
 800556c:	623b      	str	r3, [r7, #32]
    bytes=font.Height * font.Size ;
 800556e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005572:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	617b      	str	r3, [r7, #20]
    pos=font.table+(ch - 32) * bytes ;//that's char position in table
 800557c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	3b20      	subs	r3, #32
 8005582:	4619      	mov	r1, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	fb01 f303 	mul.w	r3, r1, r3
 800558a:	4413      	add	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
    switch (font.Size) {
 800558e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005592:	2b02      	cmp	r3, #2
 8005594:	d005      	beq.n	80055a2 <Displ_WChar+0x62>
 8005596:	2b03      	cmp	r3, #3
 8005598:	d107      	bne.n	80055aa <Displ_WChar+0x6a>
        case 3:
            mask=0x800000;
 800559a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800559e:	61fb      	str	r3, [r7, #28]
            break;
 80055a0:	e005      	b.n	80055ae <Displ_WChar+0x6e>
        case 2:
            mask=0x8000;
 80055a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a6:	61fb      	str	r3, [r7, #28]
            break;
 80055a8:	e001      	b.n	80055ae <Displ_WChar+0x6e>
        default:
            mask=0x80;
 80055aa:	2380      	movs	r3, #128	; 0x80
 80055ac:	61fb      	str	r3, [r7, #28]
    }

#ifdef Z_RGB565

    uint16_t color1, bgcolor1;
    uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 80055ae:	4b60      	ldr	r3, [pc, #384]	; (8005730 <Displ_WChar+0x1f0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]

    color1 = ((color & 0xFF)<<8 | (color >> 8));            //swapping byte endian: STM32 is little endian, ST7735 is big endian
 80055b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	b21a      	sxth	r2, r3
 80055bc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80055c0:	0a1b      	lsrs	r3, r3, #8
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	b21b      	sxth	r3, r3
 80055c6:	4313      	orrs	r3, r2
 80055c8:	b21b      	sxth	r3, r3
 80055ca:	817b      	strh	r3, [r7, #10]
    bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));      //swapping byte endian: STM32 is little endian, ST7735 is big endian
 80055cc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	b21a      	sxth	r2, r3
 80055d4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80055d8:	0a1b      	lsrs	r3, r3, #8
 80055da:	b29b      	uxth	r3, r3
 80055dc:	b21b      	sxth	r3, r3
 80055de:	4313      	orrs	r3, r2
 80055e0:	b21b      	sxth	r3, r3
 80055e2:	813b      	strh	r3, [r7, #8]

    for(i = 0; i < (bytes); i+=font.Size){
 80055e4:	2300      	movs	r3, #0
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055e8:	e06f      	b.n	80056ca <Displ_WChar+0x18a>
        b=0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	62bb      	str	r3, [r7, #40]	; 0x28
        switch (font.Size) {
 80055ee:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d015      	beq.n	8005622 <Displ_WChar+0xe2>
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d120      	bne.n	800563c <Displ_WChar+0xfc>
            case 3:
                b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	4413      	add	r3, r2
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	041a      	lsls	r2, r3, #16
 8005604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005606:	3301      	adds	r3, #1
 8005608:	6939      	ldr	r1, [r7, #16]
 800560a:	440b      	add	r3, r1
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	4313      	orrs	r3, r2
 8005612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005614:	3202      	adds	r2, #2
 8005616:	6939      	ldr	r1, [r7, #16]
 8005618:	440a      	add	r2, r1
 800561a:	7812      	ldrb	r2, [r2, #0]
 800561c:	4313      	orrs	r3, r2
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8005620:	e011      	b.n	8005646 <Displ_WChar+0x106>
            case 2:
                b=pos[i]<<8 | pos[i+1];
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005626:	4413      	add	r3, r2
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800562e:	3201      	adds	r2, #1
 8005630:	6939      	ldr	r1, [r7, #16]
 8005632:	440a      	add	r2, r1
 8005634:	7812      	ldrb	r2, [r2, #0]
 8005636:	4313      	orrs	r3, r2
 8005638:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 800563a:	e004      	b.n	8005646 <Displ_WChar+0x106>
            default:
                b=pos[i];
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005640:	4413      	add	r3, r2
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        for(j = 0; j < font.Width; j++) {
 8005646:	2300      	movs	r3, #0
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
 800564a:	e032      	b.n	80056b2 <Displ_WChar+0x172>
            if((b << j) & mask)  {
 800564c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	409a      	lsls	r2, r3
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	4013      	ands	r3, r2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d014      	beq.n	8005684 <Displ_WChar+0x144>
                dispBuffer16[bufSize++] = color1;
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	623a      	str	r2, [r7, #32]
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	897a      	ldrh	r2, [r7, #10]
 8005668:	801a      	strh	r2, [r3, #0]
                if (size==2){
 800566a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800566e:	2b02      	cmp	r3, #2
 8005670:	d11c      	bne.n	80056ac <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = color1;
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	623a      	str	r2, [r7, #32]
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	897a      	ldrh	r2, [r7, #10]
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e013      	b.n	80056ac <Displ_WChar+0x16c>
                }
            } else {
                dispBuffer16[bufSize++] = bgcolor1;
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	623a      	str	r2, [r7, #32]
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	893a      	ldrh	r2, [r7, #8]
 8005692:	801a      	strh	r2, [r3, #0]
                if (size==2) {
 8005694:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005698:	2b02      	cmp	r3, #2
 800569a:	d107      	bne.n	80056ac <Displ_WChar+0x16c>
                    dispBuffer16[bufSize++] = bgcolor1;
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	623a      	str	r2, [r7, #32]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	893a      	ldrh	r2, [r7, #8]
 80056aa:	801a      	strh	r2, [r3, #0]
        for(j = 0; j < font.Width; j++) {
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	3301      	adds	r3, #1
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
 80056b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056b6:	461a      	mov	r2, r3
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d3c6      	bcc.n	800564c <Displ_WChar+0x10c>
    for(i = 0; i < (bytes); i+=font.Size){
 80056be:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80056c2:	461a      	mov	r2, r3
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	4413      	add	r3, r2
 80056c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d38b      	bcc.n	80055ea <Displ_WChar+0xaa>
                }
            }
        }
    }
    bufSize<<=1;
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	623b      	str	r3, [r7, #32]
            }
        }
    }
#endif

    Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 80056d8:	7efb      	ldrb	r3, [r7, #27]
 80056da:	b29a      	uxth	r2, r3
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	4413      	add	r3, r2
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29c      	uxth	r4, r3
 80056e6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80056ea:	88bb      	ldrh	r3, [r7, #4]
 80056ec:	4413      	add	r3, r2
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	88b9      	ldrh	r1, [r7, #4]
 80056f6:	88f8      	ldrh	r0, [r7, #6]
 80056f8:	4622      	mov	r2, r4
 80056fa:	f7ff f9d7 	bl	8004aac <Displ_SetAddressWindow>
    Displ_WriteData(dispBuffer,bufSize,0);
 80056fe:	4b0c      	ldr	r3, [pc, #48]	; (8005730 <Displ_WChar+0x1f0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2200      	movs	r2, #0
 8005704:	6a39      	ldr	r1, [r7, #32]
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff f977 	bl	80049fa <Displ_WriteData>
    dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <Displ_WChar+0x1f0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a08      	ldr	r2, [pc, #32]	; (8005734 <Displ_WChar+0x1f4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d101      	bne.n	800571a <Displ_WChar+0x1da>
 8005716:	4b08      	ldr	r3, [pc, #32]	; (8005738 <Displ_WChar+0x1f8>)
 8005718:	e000      	b.n	800571c <Displ_WChar+0x1dc>
 800571a:	4b06      	ldr	r3, [pc, #24]	; (8005734 <Displ_WChar+0x1f4>)
 800571c:	4a04      	ldr	r2, [pc, #16]	; (8005730 <Displ_WChar+0x1f0>)
 800571e:	6013      	str	r3, [r2, #0]

}
 8005720:	bf00      	nop
 8005722:	3734      	adds	r7, #52	; 0x34
 8005724:	46bd      	mov	sp, r7
 8005726:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800572a:	b002      	add	sp, #8
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	2000005c 	.word	0x2000005c
 8005734:	200021e8 	.word	0x200021e8
 8005738:	200025e8 	.word	0x200025e8

0800573c <Displ_WString>:
 *          font    to bu used
 *          size    1 (normal), 2 (double width)
 *          color   font color
 *          bgcolor background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 800573c:	b082      	sub	sp, #8
 800573e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005740:	b08b      	sub	sp, #44	; 0x2c
 8005742:	af06      	add	r7, sp, #24
 8005744:	603a      	str	r2, [r7, #0]
 8005746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005748:	4603      	mov	r3, r0
 800574a:	80fb      	strh	r3, [r7, #6]
 800574c:	460b      	mov	r3, r1
 800574e:	80bb      	strh	r3, [r7, #4]
    uint16_t delta=font.Width;
 8005750:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005752:	81fb      	strh	r3, [r7, #14]
    if (size>1)
 8005754:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005758:	2b01      	cmp	r3, #1
 800575a:	d922      	bls.n	80057a2 <Displ_WString+0x66>
        delta<<=1;
 800575c:	89fb      	ldrh	r3, [r7, #14]
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8005762:	e01e      	b.n	80057a2 <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781a      	ldrb	r2, [r3, #0]
 8005768:	88bd      	ldrh	r5, [r7, #4]
 800576a:	88fc      	ldrh	r4, [r7, #6]
 800576c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005770:	9304      	str	r3, [sp, #16]
 8005772:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005774:	9303      	str	r3, [sp, #12]
 8005776:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800577a:	9302      	str	r3, [sp, #8]
 800577c:	466e      	mov	r6, sp
 800577e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005782:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005786:	e886 0003 	stmia.w	r6, {r0, r1}
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	4629      	mov	r1, r5
 800578e:	4620      	mov	r0, r4
 8005790:	f7ff fed6 	bl	8005540 <Displ_WChar>
        x += delta;
 8005794:	88fa      	ldrh	r2, [r7, #6]
 8005796:	89fb      	ldrh	r3, [r7, #14]
 8005798:	4413      	add	r3, r2
 800579a:	80fb      	strh	r3, [r7, #6]
        str++;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	3301      	adds	r3, #1
 80057a0:	603b      	str	r3, [r7, #0]
    while(*str) {
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1dc      	bne.n	8005764 <Displ_WString+0x28>
    }
}
 80057aa:	bf00      	nop
 80057ac:	bf00      	nop
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80057b6:	b002      	add	sp, #8
 80057b8:	4770      	bx	lr
	...

080057bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80057bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057f4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80057c0:	f7ff f878 	bl	80048b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80057c4:	480c      	ldr	r0, [pc, #48]	; (80057f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80057c6:	490d      	ldr	r1, [pc, #52]	; (80057fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80057c8:	4a0d      	ldr	r2, [pc, #52]	; (8005800 <LoopForever+0xe>)
  movs r3, #0
 80057ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057cc:	e002      	b.n	80057d4 <LoopCopyDataInit>

080057ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057d2:	3304      	adds	r3, #4

080057d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057d8:	d3f9      	bcc.n	80057ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057da:	4a0a      	ldr	r2, [pc, #40]	; (8005804 <LoopForever+0x12>)
  ldr r4, =_ebss
 80057dc:	4c0a      	ldr	r4, [pc, #40]	; (8005808 <LoopForever+0x16>)
  movs r3, #0
 80057de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057e0:	e001      	b.n	80057e6 <LoopFillZerobss>

080057e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057e4:	3204      	adds	r2, #4

080057e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057e8:	d3fb      	bcc.n	80057e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80057ea:	f004 fe17 	bl	800a41c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80057ee:	f7fd f861 	bl	80028b4 <main>

080057f2 <LoopForever>:

LoopForever:
    b LoopForever
 80057f2:	e7fe      	b.n	80057f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80057f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80057f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057fc:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8005800:	0800da04 	.word	0x0800da04
  ldr r2, =_sbss
 8005804:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8005808:	20002a04 	.word	0x20002a04

0800580c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800580c:	e7fe      	b.n	800580c <ADC1_IRQHandler>
	...

08005810 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005814:	4b08      	ldr	r3, [pc, #32]	; (8005838 <HAL_Init+0x28>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a07      	ldr	r2, [pc, #28]	; (8005838 <HAL_Init+0x28>)
 800581a:	f043 0310 	orr.w	r3, r3, #16
 800581e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005820:	2003      	movs	r0, #3
 8005822:	f000 f94f 	bl	8005ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005826:	200f      	movs	r0, #15
 8005828:	f000 f808 	bl	800583c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800582c:	f7fe fdbc 	bl	80043a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40022000 	.word	0x40022000

0800583c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005844:	4b12      	ldr	r3, [pc, #72]	; (8005890 <HAL_InitTick+0x54>)
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	4b12      	ldr	r3, [pc, #72]	; (8005894 <HAL_InitTick+0x58>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	4619      	mov	r1, r3
 800584e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005852:	fbb3 f3f1 	udiv	r3, r3, r1
 8005856:	fbb2 f3f3 	udiv	r3, r2, r3
 800585a:	4618      	mov	r0, r3
 800585c:	f000 f967 	bl	8005b2e <HAL_SYSTICK_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e00e      	b.n	8005888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b0f      	cmp	r3, #15
 800586e:	d80a      	bhi.n	8005886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005870:	2200      	movs	r2, #0
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	f04f 30ff 	mov.w	r0, #4294967295
 8005878:	f000 f92f 	bl	8005ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800587c:	4a06      	ldr	r2, [pc, #24]	; (8005898 <HAL_InitTick+0x5c>)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	e000      	b.n	8005888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
}
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000054 	.word	0x20000054
 8005894:	20000064 	.word	0x20000064
 8005898:	20000060 	.word	0x20000060

0800589c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <HAL_IncTick+0x20>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <HAL_IncTick+0x24>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4413      	add	r3, r2
 80058ac:	4a04      	ldr	r2, [pc, #16]	; (80058c0 <HAL_IncTick+0x24>)
 80058ae:	6013      	str	r3, [r2, #0]
}
 80058b0:	bf00      	nop
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000064 	.word	0x20000064
 80058c0:	200029f0 	.word	0x200029f0

080058c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80058c8:	4b03      	ldr	r3, [pc, #12]	; (80058d8 <HAL_GetTick+0x14>)
 80058ca:	681b      	ldr	r3, [r3, #0]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	200029f0 	.word	0x200029f0

080058dc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058e4:	f7ff ffee 	bl	80058c4 <HAL_GetTick>
 80058e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f4:	d005      	beq.n	8005902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058f6:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <HAL_Delay+0x44>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005902:	bf00      	nop
 8005904:	f7ff ffde 	bl	80058c4 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	429a      	cmp	r2, r3
 8005912:	d8f7      	bhi.n	8005904 <HAL_Delay+0x28>
  {
  }
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000064 	.word	0x20000064

08005924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005934:	4b0c      	ldr	r3, [pc, #48]	; (8005968 <__NVIC_SetPriorityGrouping+0x44>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005940:	4013      	ands	r3, r2
 8005942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800594c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005956:	4a04      	ldr	r2, [pc, #16]	; (8005968 <__NVIC_SetPriorityGrouping+0x44>)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	60d3      	str	r3, [r2, #12]
}
 800595c:	bf00      	nop
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	e000ed00 	.word	0xe000ed00

0800596c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005970:	4b04      	ldr	r3, [pc, #16]	; (8005984 <__NVIC_GetPriorityGrouping+0x18>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	f003 0307 	and.w	r3, r3, #7
}
 800597a:	4618      	mov	r0, r3
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	e000ed00 	.word	0xe000ed00

08005988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005996:	2b00      	cmp	r3, #0
 8005998:	db0b      	blt.n	80059b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	f003 021f 	and.w	r2, r3, #31
 80059a0:	4907      	ldr	r1, [pc, #28]	; (80059c0 <__NVIC_EnableIRQ+0x38>)
 80059a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2001      	movs	r0, #1
 80059aa:	fa00 f202 	lsl.w	r2, r0, r2
 80059ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	e000e100 	.word	0xe000e100

080059c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	6039      	str	r1, [r7, #0]
 80059ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	db0a      	blt.n	80059ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	490c      	ldr	r1, [pc, #48]	; (8005a10 <__NVIC_SetPriority+0x4c>)
 80059de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e2:	0112      	lsls	r2, r2, #4
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	440b      	add	r3, r1
 80059e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059ec:	e00a      	b.n	8005a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	4908      	ldr	r1, [pc, #32]	; (8005a14 <__NVIC_SetPriority+0x50>)
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	3b04      	subs	r3, #4
 80059fc:	0112      	lsls	r2, r2, #4
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	440b      	add	r3, r1
 8005a02:	761a      	strb	r2, [r3, #24]
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	e000e100 	.word	0xe000e100
 8005a14:	e000ed00 	.word	0xe000ed00

08005a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b089      	sub	sp, #36	; 0x24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f1c3 0307 	rsb	r3, r3, #7
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	bf28      	it	cs
 8005a36:	2304      	movcs	r3, #4
 8005a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	2b06      	cmp	r3, #6
 8005a40:	d902      	bls.n	8005a48 <NVIC_EncodePriority+0x30>
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	3b03      	subs	r3, #3
 8005a46:	e000      	b.n	8005a4a <NVIC_EncodePriority+0x32>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43da      	mvns	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	401a      	ands	r2, r3
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a60:	f04f 31ff 	mov.w	r1, #4294967295
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6a:	43d9      	mvns	r1, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a70:	4313      	orrs	r3, r2
         );
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3724      	adds	r7, #36	; 0x24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a90:	d301      	bcc.n	8005a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a92:	2301      	movs	r3, #1
 8005a94:	e00f      	b.n	8005ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a96:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <SysTick_Config+0x40>)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a9e:	210f      	movs	r1, #15
 8005aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa4:	f7ff ff8e 	bl	80059c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <SysTick_Config+0x40>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aae:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <SysTick_Config+0x40>)
 8005ab0:	2207      	movs	r2, #7
 8005ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	e000e010 	.word	0xe000e010

08005ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff ff29 	bl	8005924 <__NVIC_SetPriorityGrouping>
}
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b086      	sub	sp, #24
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
 8005ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005aec:	f7ff ff3e 	bl	800596c <__NVIC_GetPriorityGrouping>
 8005af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	6978      	ldr	r0, [r7, #20]
 8005af8:	f7ff ff8e 	bl	8005a18 <NVIC_EncodePriority>
 8005afc:	4602      	mov	r2, r0
 8005afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b02:	4611      	mov	r1, r2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff ff5d 	bl	80059c4 <__NVIC_SetPriority>
}
 8005b0a:	bf00      	nop
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	4603      	mov	r3, r0
 8005b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff ff31 	bl	8005988 <__NVIC_EnableIRQ>
}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff ffa2 	bl	8005a80 <SysTick_Config>
 8005b3c:	4603      	mov	r3, r0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e037      	b.n	8005bcc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005b72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005b76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f9b8 	bl	8005f24 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}  
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_DMA_Start_IT+0x20>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e04a      	b.n	8005c8a <HAL_DMA_Start_IT+0xb6>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d13a      	bne.n	8005c7c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0201 	bic.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f94b 	bl	8005ec6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 020e 	orr.w	r2, r2, #14
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	e00f      	b.n	8005c6a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f042 020a 	orr.w	r2, r2, #10
 8005c58:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0204 	bic.w	r2, r2, #4
 8005c68:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	e005      	b.n	8005c88 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005c84:	2302      	movs	r3, #2
 8005c86:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005c88:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d008      	beq.n	8005cb6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2204      	movs	r2, #4
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e020      	b.n	8005cf8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 020e 	bic.w	r2, r2, #14
 8005cc4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cde:	2101      	movs	r1, #1
 8005ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ce4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d005      	beq.n	8005d26 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2204      	movs	r2, #4
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	73fb      	strb	r3, [r7, #15]
 8005d24:	e027      	b.n	8005d76 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 020e 	bic.w	r2, r2, #14
 8005d34:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0201 	bic.w	r2, r2, #1
 8005d44:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4e:	2101      	movs	r1, #1
 8005d50:	fa01 f202 	lsl.w	r2, r1, r2
 8005d54:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	4798      	blx	r3
    } 
  }
  return status;
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d024      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x72>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d01f      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d107      	bne.n	8005dd0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0204 	bic.w	r2, r2, #4
 8005dce:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd8:	2104      	movs	r1, #4
 8005dda:	fa01 f202 	lsl.w	r2, r1, r2
 8005dde:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d06a      	beq.n	8005ebe <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005df0:	e065      	b.n	8005ebe <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	2202      	movs	r2, #2
 8005df8:	409a      	lsls	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d02c      	beq.n	8005e5c <HAL_DMA_IRQHandler+0xdc>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d027      	beq.n	8005e5c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10b      	bne.n	8005e32 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 020a 	bic.w	r2, r2, #10
 8005e28:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3a:	2102      	movs	r1, #2
 8005e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e40:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d035      	beq.n	8005ebe <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005e5a:	e030      	b.n	8005ebe <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	2208      	movs	r2, #8
 8005e62:	409a      	lsls	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d028      	beq.n	8005ebe <HAL_DMA_IRQHandler+0x13e>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d023      	beq.n	8005ebe <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 020e 	bic.w	r2, r2, #14
 8005e84:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8e:	2101      	movs	r1, #1
 8005e90:	fa01 f202 	lsl.w	r2, r1, r2
 8005e94:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d004      	beq.n	8005ebe <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
    }
  }
}  
 8005ebc:	e7ff      	b.n	8005ebe <HAL_DMA_IRQHandler+0x13e>
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	2101      	movs	r1, #1
 8005ede:	fa01 f202 	lsl.w	r2, r1, r2
 8005ee2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d108      	bne.n	8005f06 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f04:	e007      	b.n	8005f16 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	60da      	str	r2, [r3, #12]
}
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	461a      	mov	r2, r3
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <DMA_CalcBaseAndBitshift+0x34>)
 8005f34:	4413      	add	r3, r2
 8005f36:	4a09      	ldr	r2, [pc, #36]	; (8005f5c <DMA_CalcBaseAndBitshift+0x38>)
 8005f38:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	009a      	lsls	r2, r3, #2
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a06      	ldr	r2, [pc, #24]	; (8005f60 <DMA_CalcBaseAndBitshift+0x3c>)
 8005f48:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	bffdfff8 	.word	0xbffdfff8
 8005f5c:	cccccccd 	.word	0xcccccccd
 8005f60:	40020000 	.word	0x40020000

08005f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f72:	e14e      	b.n	8006212 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	2101      	movs	r1, #1
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f80:	4013      	ands	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 8140 	beq.w	800620c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f003 0303 	and.w	r3, r3, #3
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d005      	beq.n	8005fa4 <HAL_GPIO_Init+0x40>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d130      	bne.n	8006006 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	2203      	movs	r2, #3
 8005fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fda:	2201      	movs	r2, #1
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	091b      	lsrs	r3, r3, #4
 8005ff0:	f003 0201 	and.w	r2, r3, #1
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	2b03      	cmp	r3, #3
 8006010:	d017      	beq.n	8006042 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	2203      	movs	r2, #3
 800601e:	fa02 f303 	lsl.w	r3, r2, r3
 8006022:	43db      	mvns	r3, r3
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4013      	ands	r3, r2
 8006028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d123      	bne.n	8006096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	08da      	lsrs	r2, r3, #3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3208      	adds	r2, #8
 8006056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	220f      	movs	r2, #15
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	43db      	mvns	r3, r3
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4013      	ands	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	691a      	ldr	r2, [r3, #16]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	08da      	lsrs	r2, r3, #3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	3208      	adds	r2, #8
 8006090:	6939      	ldr	r1, [r7, #16]
 8006092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	2203      	movs	r2, #3
 80060a2:	fa02 f303 	lsl.w	r3, r2, r3
 80060a6:	43db      	mvns	r3, r3
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4013      	ands	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f003 0203 	and.w	r2, r3, #3
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 809a 	beq.w	800620c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060d8:	4b55      	ldr	r3, [pc, #340]	; (8006230 <HAL_GPIO_Init+0x2cc>)
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	4a54      	ldr	r2, [pc, #336]	; (8006230 <HAL_GPIO_Init+0x2cc>)
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	6193      	str	r3, [r2, #24]
 80060e4:	4b52      	ldr	r3, [pc, #328]	; (8006230 <HAL_GPIO_Init+0x2cc>)
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	60bb      	str	r3, [r7, #8]
 80060ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80060f0:	4a50      	ldr	r2, [pc, #320]	; (8006234 <HAL_GPIO_Init+0x2d0>)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	089b      	lsrs	r3, r3, #2
 80060f6:	3302      	adds	r3, #2
 80060f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	220f      	movs	r2, #15
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	43db      	mvns	r3, r3
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	4013      	ands	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800611a:	d013      	beq.n	8006144 <HAL_GPIO_Init+0x1e0>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a46      	ldr	r2, [pc, #280]	; (8006238 <HAL_GPIO_Init+0x2d4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00d      	beq.n	8006140 <HAL_GPIO_Init+0x1dc>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a45      	ldr	r2, [pc, #276]	; (800623c <HAL_GPIO_Init+0x2d8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d007      	beq.n	800613c <HAL_GPIO_Init+0x1d8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a44      	ldr	r2, [pc, #272]	; (8006240 <HAL_GPIO_Init+0x2dc>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d101      	bne.n	8006138 <HAL_GPIO_Init+0x1d4>
 8006134:	2303      	movs	r3, #3
 8006136:	e006      	b.n	8006146 <HAL_GPIO_Init+0x1e2>
 8006138:	2305      	movs	r3, #5
 800613a:	e004      	b.n	8006146 <HAL_GPIO_Init+0x1e2>
 800613c:	2302      	movs	r3, #2
 800613e:	e002      	b.n	8006146 <HAL_GPIO_Init+0x1e2>
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <HAL_GPIO_Init+0x1e2>
 8006144:	2300      	movs	r3, #0
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	f002 0203 	and.w	r2, r2, #3
 800614c:	0092      	lsls	r2, r2, #2
 800614e:	4093      	lsls	r3, r2
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006156:	4937      	ldr	r1, [pc, #220]	; (8006234 <HAL_GPIO_Init+0x2d0>)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	089b      	lsrs	r3, r3, #2
 800615c:	3302      	adds	r3, #2
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006164:	4b37      	ldr	r3, [pc, #220]	; (8006244 <HAL_GPIO_Init+0x2e0>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	43db      	mvns	r3, r3
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4013      	ands	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006188:	4a2e      	ldr	r2, [pc, #184]	; (8006244 <HAL_GPIO_Init+0x2e0>)
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800618e:	4b2d      	ldr	r3, [pc, #180]	; (8006244 <HAL_GPIO_Init+0x2e0>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	43db      	mvns	r3, r3
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4013      	ands	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80061b2:	4a24      	ldr	r2, [pc, #144]	; (8006244 <HAL_GPIO_Init+0x2e0>)
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061b8:	4b22      	ldr	r3, [pc, #136]	; (8006244 <HAL_GPIO_Init+0x2e0>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	43db      	mvns	r3, r3
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4013      	ands	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80061dc:	4a19      	ldr	r2, [pc, #100]	; (8006244 <HAL_GPIO_Init+0x2e0>)
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061e2:	4b18      	ldr	r3, [pc, #96]	; (8006244 <HAL_GPIO_Init+0x2e0>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	43db      	mvns	r3, r3
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4013      	ands	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006206:	4a0f      	ldr	r2, [pc, #60]	; (8006244 <HAL_GPIO_Init+0x2e0>)
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	3301      	adds	r3, #1
 8006210:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	fa22 f303 	lsr.w	r3, r2, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	f47f aea9 	bne.w	8005f74 <HAL_GPIO_Init+0x10>
  }
}
 8006222:	bf00      	nop
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	40021000 	.word	0x40021000
 8006234:	40010000 	.word	0x40010000
 8006238:	48000400 	.word	0x48000400
 800623c:	48000800 	.word	0x48000800
 8006240:	48000c00 	.word	0x48000c00
 8006244:	40010400 	.word	0x40010400

08006248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	887b      	ldrh	r3, [r7, #2]
 800625a:	4013      	ands	r3, r2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006260:	2301      	movs	r3, #1
 8006262:	73fb      	strb	r3, [r7, #15]
 8006264:	e001      	b.n	800626a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	807b      	strh	r3, [r7, #2]
 8006284:	4613      	mov	r3, r2
 8006286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006288:	787b      	ldrb	r3, [r7, #1]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800628e:	887a      	ldrh	r2, [r7, #2]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006294:	e002      	b.n	800629c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006296:	887a      	ldrh	r2, [r7, #2]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	4603      	mov	r3, r0
 80062b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80062b2:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062b4:	695a      	ldr	r2, [r3, #20]
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	4013      	ands	r3, r2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d006      	beq.n	80062cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062be:	4a05      	ldr	r2, [pc, #20]	; (80062d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062c0:	88fb      	ldrh	r3, [r7, #6]
 80062c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062c4:	88fb      	ldrh	r3, [r7, #6]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fc fd5e 	bl	8002d88 <HAL_GPIO_EXTI_Callback>
  }
}
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40010400 	.word	0x40010400

080062d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e081      	b.n	80063ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fe f876 	bl	80043f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2224      	movs	r2, #36	; 0x24
 8006308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0201 	bic.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006328:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006338:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d107      	bne.n	8006352 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800634e:	609a      	str	r2, [r3, #8]
 8006350:	e006      	b.n	8006360 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800635e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2b02      	cmp	r3, #2
 8006366:	d104      	bne.n	8006372 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006370:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006384:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006394:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	69d9      	ldr	r1, [r3, #28]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1a      	ldr	r2, [r3, #32]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0201 	orr.w	r2, r2, #1
 80063ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	4608      	mov	r0, r1
 8006402:	4611      	mov	r1, r2
 8006404:	461a      	mov	r2, r3
 8006406:	4603      	mov	r3, r0
 8006408:	817b      	strh	r3, [r7, #10]
 800640a:	460b      	mov	r3, r1
 800640c:	813b      	strh	r3, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b20      	cmp	r3, #32
 800641c:	f040 80f9 	bne.w	8006612 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_I2C_Mem_Write+0x34>
 8006426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006428:	2b00      	cmp	r3, #0
 800642a:	d105      	bne.n	8006438 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006432:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0ed      	b.n	8006614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800643e:	2b01      	cmp	r3, #1
 8006440:	d101      	bne.n	8006446 <HAL_I2C_Mem_Write+0x4e>
 8006442:	2302      	movs	r3, #2
 8006444:	e0e6      	b.n	8006614 <HAL_I2C_Mem_Write+0x21c>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800644e:	f7ff fa39 	bl	80058c4 <HAL_GetTick>
 8006452:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	2319      	movs	r3, #25
 800645a:	2201      	movs	r2, #1
 800645c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 fbcd 	bl	8006c00 <I2C_WaitOnFlagUntilTimeout>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e0d1      	b.n	8006614 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2221      	movs	r2, #33	; 0x21
 8006474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2240      	movs	r2, #64	; 0x40
 800647c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a3a      	ldr	r2, [r7, #32]
 800648a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006498:	88f8      	ldrh	r0, [r7, #6]
 800649a:	893a      	ldrh	r2, [r7, #8]
 800649c:	8979      	ldrh	r1, [r7, #10]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	9301      	str	r3, [sp, #4]
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	4603      	mov	r3, r0
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 fadd 	bl	8006a68 <I2C_RequestMemoryWrite>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e0a9      	b.n	8006614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2bff      	cmp	r3, #255	; 0xff
 80064c8:	d90e      	bls.n	80064e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	22ff      	movs	r2, #255	; 0xff
 80064ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	8979      	ldrh	r1, [r7, #10]
 80064d8:	2300      	movs	r3, #0
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 fd47 	bl	8006f74 <I2C_TransferConfig>
 80064e6:	e00f      	b.n	8006508 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	8979      	ldrh	r1, [r7, #10]
 80064fa:	2300      	movs	r3, #0
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 fd36 	bl	8006f74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 fbc6 	bl	8006c9e <I2C_WaitOnTXISFlagUntilTimeout>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e07b      	b.n	8006614 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	781a      	ldrb	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006550:	b29b      	uxth	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d034      	beq.n	80065c0 <HAL_I2C_Mem_Write+0x1c8>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655a:	2b00      	cmp	r3, #0
 800655c:	d130      	bne.n	80065c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	2200      	movs	r2, #0
 8006566:	2180      	movs	r1, #128	; 0x80
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fb49 	bl	8006c00 <I2C_WaitOnFlagUntilTimeout>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e04d      	b.n	8006614 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657c:	b29b      	uxth	r3, r3
 800657e:	2bff      	cmp	r3, #255	; 0xff
 8006580:	d90e      	bls.n	80065a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	22ff      	movs	r2, #255	; 0xff
 8006586:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658c:	b2da      	uxtb	r2, r3
 800658e:	8979      	ldrh	r1, [r7, #10]
 8006590:	2300      	movs	r3, #0
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 fceb 	bl	8006f74 <I2C_TransferConfig>
 800659e:	e00f      	b.n	80065c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	8979      	ldrh	r1, [r7, #10]
 80065b2:	2300      	movs	r3, #0
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 fcda 	bl	8006f74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d19e      	bne.n	8006508 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 fbac 	bl	8006d2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e01a      	b.n	8006614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2220      	movs	r2, #32
 80065e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6859      	ldr	r1, [r3, #4]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <HAL_I2C_Mem_Write+0x224>)
 80065f2:	400b      	ands	r3, r1
 80065f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	e000      	b.n	8006614 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006612:	2302      	movs	r3, #2
  }
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	fe00e800 	.word	0xfe00e800

08006620 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	4608      	mov	r0, r1
 800662a:	4611      	mov	r1, r2
 800662c:	461a      	mov	r2, r3
 800662e:	4603      	mov	r3, r0
 8006630:	817b      	strh	r3, [r7, #10]
 8006632:	460b      	mov	r3, r1
 8006634:	813b      	strh	r3, [r7, #8]
 8006636:	4613      	mov	r3, r2
 8006638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b20      	cmp	r3, #32
 8006644:	f040 80fd 	bne.w	8006842 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <HAL_I2C_Mem_Read+0x34>
 800664e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006650:	2b00      	cmp	r3, #0
 8006652:	d105      	bne.n	8006660 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800665a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0f1      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_I2C_Mem_Read+0x4e>
 800666a:	2302      	movs	r3, #2
 800666c:	e0ea      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006676:	f7ff f925 	bl	80058c4 <HAL_GetTick>
 800667a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	2319      	movs	r3, #25
 8006682:	2201      	movs	r2, #1
 8006684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 fab9 	bl	8006c00 <I2C_WaitOnFlagUntilTimeout>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e0d5      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2222      	movs	r2, #34	; 0x22
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2240      	movs	r2, #64	; 0x40
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a3a      	ldr	r2, [r7, #32]
 80066b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80066b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066c0:	88f8      	ldrh	r0, [r7, #6]
 80066c2:	893a      	ldrh	r2, [r7, #8]
 80066c4:	8979      	ldrh	r1, [r7, #10]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	4603      	mov	r3, r0
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 fa1d 	bl	8006b10 <I2C_RequestMemoryRead>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0ad      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2bff      	cmp	r3, #255	; 0xff
 80066f0:	d90e      	bls.n	8006710 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	22ff      	movs	r2, #255	; 0xff
 80066f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	8979      	ldrh	r1, [r7, #10]
 8006700:	4b52      	ldr	r3, [pc, #328]	; (800684c <HAL_I2C_Mem_Read+0x22c>)
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 fc33 	bl	8006f74 <I2C_TransferConfig>
 800670e:	e00f      	b.n	8006730 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671e:	b2da      	uxtb	r2, r3
 8006720:	8979      	ldrh	r1, [r7, #10]
 8006722:	4b4a      	ldr	r3, [pc, #296]	; (800684c <HAL_I2C_Mem_Read+0x22c>)
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 fc22 	bl	8006f74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	2200      	movs	r2, #0
 8006738:	2104      	movs	r1, #4
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 fa60 	bl	8006c00 <I2C_WaitOnFlagUntilTimeout>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e07c      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006766:	3b01      	subs	r3, #1
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d034      	beq.n	80067f0 <HAL_I2C_Mem_Read+0x1d0>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d130      	bne.n	80067f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	2200      	movs	r2, #0
 8006796:	2180      	movs	r1, #128	; 0x80
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fa31 	bl	8006c00 <I2C_WaitOnFlagUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e04d      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2bff      	cmp	r3, #255	; 0xff
 80067b0:	d90e      	bls.n	80067d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	22ff      	movs	r2, #255	; 0xff
 80067b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	8979      	ldrh	r1, [r7, #10]
 80067c0:	2300      	movs	r3, #0
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 fbd3 	bl	8006f74 <I2C_TransferConfig>
 80067ce:	e00f      	b.n	80067f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	8979      	ldrh	r1, [r7, #10]
 80067e2:	2300      	movs	r3, #0
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 fbc2 	bl	8006f74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d19a      	bne.n	8006730 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fa94 	bl	8006d2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e01a      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2220      	movs	r2, #32
 8006814:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6859      	ldr	r1, [r3, #4]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <HAL_I2C_Mem_Read+0x230>)
 8006822:	400b      	ands	r3, r1
 8006824:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	e000      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006842:	2302      	movs	r3, #2
  }
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	80002400 	.word	0x80002400
 8006850:	fe00e800 	.word	0xfe00e800

08006854 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08a      	sub	sp, #40	; 0x28
 8006858:	af02      	add	r7, sp, #8
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	607a      	str	r2, [r7, #4]
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	460b      	mov	r3, r1
 8006862:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006864:	2300      	movs	r3, #0
 8006866:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b20      	cmp	r3, #32
 8006872:	f040 80f3 	bne.w	8006a5c <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006884:	d101      	bne.n	800688a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006886:	2302      	movs	r3, #2
 8006888:	e0e9      	b.n	8006a5e <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_I2C_IsDeviceReady+0x44>
 8006894:	2302      	movs	r3, #2
 8006896:	e0e2      	b.n	8006a5e <HAL_I2C_IsDeviceReady+0x20a>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2224      	movs	r2, #36	; 0x24
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d107      	bne.n	80068c6 <HAL_I2C_IsDeviceReady+0x72>
 80068b6:	897b      	ldrh	r3, [r7, #10]
 80068b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068c4:	e006      	b.n	80068d4 <HAL_I2C_IsDeviceReady+0x80>
 80068c6:	897b      	ldrh	r3, [r7, #10]
 80068c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068d0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80068da:	f7fe fff3 	bl	80058c4 <HAL_GetTick>
 80068de:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	bf0c      	ite	eq
 80068ee:	2301      	moveq	r3, #1
 80068f0:	2300      	movne	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	f003 0310 	and.w	r3, r3, #16
 8006900:	2b10      	cmp	r3, #16
 8006902:	bf0c      	ite	eq
 8006904:	2301      	moveq	r3, #1
 8006906:	2300      	movne	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800690c:	e034      	b.n	8006978 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006914:	d01a      	beq.n	800694c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006916:	f7fe ffd5 	bl	80058c4 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	429a      	cmp	r2, r3
 8006924:	d302      	bcc.n	800692c <HAL_I2C_IsDeviceReady+0xd8>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10f      	bne.n	800694c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2220      	movs	r2, #32
 8006930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006938:	f043 0220 	orr.w	r2, r3, #32
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e088      	b.n	8006a5e <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b20      	cmp	r3, #32
 8006958:	bf0c      	ite	eq
 800695a:	2301      	moveq	r3, #1
 800695c:	2300      	movne	r3, #0
 800695e:	b2db      	uxtb	r3, r3
 8006960:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b10      	cmp	r3, #16
 800696e:	bf0c      	ite	eq
 8006970:	2301      	moveq	r3, #1
 8006972:	2300      	movne	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006978:	7ffb      	ldrb	r3, [r7, #31]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <HAL_I2C_IsDeviceReady+0x130>
 800697e:	7fbb      	ldrb	r3, [r7, #30]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0c4      	beq.n	800690e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f003 0310 	and.w	r3, r3, #16
 800698e:	2b10      	cmp	r3, #16
 8006990:	d01a      	beq.n	80069c8 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2200      	movs	r2, #0
 800699a:	2120      	movs	r1, #32
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f92f 	bl	8006c00 <I2C_WaitOnFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e058      	b.n	8006a5e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2220      	movs	r2, #32
 80069b2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	e04a      	b.n	8006a5e <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2200      	movs	r2, #0
 80069d0:	2120      	movs	r1, #32
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 f914 	bl	8006c00 <I2C_WaitOnFlagUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e03d      	b.n	8006a5e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2210      	movs	r2, #16
 80069e8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2220      	movs	r2, #32
 80069f0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d118      	bne.n	8006a2c <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a08:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2200      	movs	r2, #0
 8006a12:	2120      	movs	r1, #32
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 f8f3 	bl	8006c00 <I2C_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e01c      	b.n	8006a5e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	f63f af39 	bhi.w	80068ae <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a48:	f043 0220 	orr.w	r2, r3, #32
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
  }
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	4608      	mov	r0, r1
 8006a72:	4611      	mov	r1, r2
 8006a74:	461a      	mov	r2, r3
 8006a76:	4603      	mov	r3, r0
 8006a78:	817b      	strh	r3, [r7, #10]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	813b      	strh	r3, [r7, #8]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006a82:	88fb      	ldrh	r3, [r7, #6]
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	8979      	ldrh	r1, [r7, #10]
 8006a88:	4b20      	ldr	r3, [pc, #128]	; (8006b0c <I2C_RequestMemoryWrite+0xa4>)
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 fa6f 	bl	8006f74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a96:	69fa      	ldr	r2, [r7, #28]
 8006a98:	69b9      	ldr	r1, [r7, #24]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f8ff 	bl	8006c9e <I2C_WaitOnTXISFlagUntilTimeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e02c      	b.n	8006b04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d105      	bne.n	8006abc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ab0:	893b      	ldrh	r3, [r7, #8]
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	629a      	str	r2, [r3, #40]	; 0x28
 8006aba:	e015      	b.n	8006ae8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006abc:	893b      	ldrh	r3, [r7, #8]
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	69b9      	ldr	r1, [r7, #24]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 f8e5 	bl	8006c9e <I2C_WaitOnTXISFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e012      	b.n	8006b04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ade:	893b      	ldrh	r3, [r7, #8]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2200      	movs	r2, #0
 8006af0:	2180      	movs	r1, #128	; 0x80
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f884 	bl	8006c00 <I2C_WaitOnFlagUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e000      	b.n	8006b04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	80002000 	.word	0x80002000

08006b10 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	4608      	mov	r0, r1
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	4603      	mov	r3, r0
 8006b20:	817b      	strh	r3, [r7, #10]
 8006b22:	460b      	mov	r3, r1
 8006b24:	813b      	strh	r3, [r7, #8]
 8006b26:	4613      	mov	r3, r2
 8006b28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006b2a:	88fb      	ldrh	r3, [r7, #6]
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	8979      	ldrh	r1, [r7, #10]
 8006b30:	4b20      	ldr	r3, [pc, #128]	; (8006bb4 <I2C_RequestMemoryRead+0xa4>)
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	2300      	movs	r3, #0
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 fa1c 	bl	8006f74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	69b9      	ldr	r1, [r7, #24]
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 f8ac 	bl	8006c9e <I2C_WaitOnTXISFlagUntilTimeout>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e02c      	b.n	8006baa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b50:	88fb      	ldrh	r3, [r7, #6]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d105      	bne.n	8006b62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b56:	893b      	ldrh	r3, [r7, #8]
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	629a      	str	r2, [r3, #40]	; 0x28
 8006b60:	e015      	b.n	8006b8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b62:	893b      	ldrh	r3, [r7, #8]
 8006b64:	0a1b      	lsrs	r3, r3, #8
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b70:	69fa      	ldr	r2, [r7, #28]
 8006b72:	69b9      	ldr	r1, [r7, #24]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 f892 	bl	8006c9e <I2C_WaitOnTXISFlagUntilTimeout>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e012      	b.n	8006baa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b84:	893b      	ldrh	r3, [r7, #8]
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2200      	movs	r2, #0
 8006b96:	2140      	movs	r1, #64	; 0x40
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f831 	bl	8006c00 <I2C_WaitOnFlagUntilTimeout>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	80002000 	.word	0x80002000

08006bb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d103      	bne.n	8006bd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d007      	beq.n	8006bf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0201 	orr.w	r2, r2, #1
 8006bf2:	619a      	str	r2, [r3, #24]
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	603b      	str	r3, [r7, #0]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c10:	e031      	b.n	8006c76 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c18:	d02d      	beq.n	8006c76 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c1a:	f7fe fe53 	bl	80058c4 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d302      	bcc.n	8006c30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d122      	bne.n	8006c76 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	bf0c      	ite	eq
 8006c40:	2301      	moveq	r3, #1
 8006c42:	2300      	movne	r3, #0
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	461a      	mov	r2, r3
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d113      	bne.n	8006c76 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c52:	f043 0220 	orr.w	r2, r3, #32
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e00f      	b.n	8006c96 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	699a      	ldr	r2, [r3, #24]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	bf0c      	ite	eq
 8006c86:	2301      	moveq	r3, #1
 8006c88:	2300      	movne	r3, #0
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d0be      	beq.n	8006c12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006caa:	e033      	b.n	8006d14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	68b9      	ldr	r1, [r7, #8]
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 f87f 	bl	8006db4 <I2C_IsErrorOccurred>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e031      	b.n	8006d24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc6:	d025      	beq.n	8006d14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cc8:	f7fe fdfc 	bl	80058c4 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d302      	bcc.n	8006cde <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d11a      	bne.n	8006d14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d013      	beq.n	8006d14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf0:	f043 0220 	orr.w	r2, r3, #32
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e007      	b.n	8006d24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d1c4      	bne.n	8006cac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d38:	e02f      	b.n	8006d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f838 	bl	8006db4 <I2C_IsErrorOccurred>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e02d      	b.n	8006daa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d4e:	f7fe fdb9 	bl	80058c4 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d302      	bcc.n	8006d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d11a      	bne.n	8006d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	d013      	beq.n	8006d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d76:	f043 0220 	orr.w	r2, r3, #32
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2220      	movs	r2, #32
 8006d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e007      	b.n	8006daa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d1c8      	bne.n	8006d3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08a      	sub	sp, #40	; 0x28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d068      	beq.n	8006eb2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2210      	movs	r2, #16
 8006de6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006de8:	e049      	b.n	8006e7e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df0:	d045      	beq.n	8006e7e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006df2:	f7fe fd67 	bl	80058c4 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d302      	bcc.n	8006e08 <I2C_IsErrorOccurred+0x54>
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d13a      	bne.n	8006e7e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e2a:	d121      	bne.n	8006e70 <I2C_IsErrorOccurred+0xbc>
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e32:	d01d      	beq.n	8006e70 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006e34:	7cfb      	ldrb	r3, [r7, #19]
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d01a      	beq.n	8006e70 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006e4a:	f7fe fd3b 	bl	80058c4 <HAL_GetTick>
 8006e4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e50:	e00e      	b.n	8006e70 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006e52:	f7fe fd37 	bl	80058c4 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	2b19      	cmp	r3, #25
 8006e5e:	d907      	bls.n	8006e70 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	f043 0320 	orr.w	r3, r3, #32
 8006e66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006e6e:	e006      	b.n	8006e7e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	2b20      	cmp	r3, #32
 8006e7c:	d1e9      	bne.n	8006e52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	d003      	beq.n	8006e94 <I2C_IsErrorOccurred+0xe0>
 8006e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0aa      	beq.n	8006dea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d103      	bne.n	8006ea4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	f043 0304 	orr.w	r3, r3, #4
 8006eaa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	f043 0301 	orr.w	r3, r3, #1
 8006eca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ed4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00b      	beq.n	8006efe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	f043 0308 	orr.w	r3, r3, #8
 8006eec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ef6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	f043 0302 	orr.w	r3, r3, #2
 8006f0e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01c      	beq.n	8006f62 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f7ff fe45 	bl	8006bb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6859      	ldr	r1, [r3, #4]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <I2C_IsErrorOccurred+0x1bc>)
 8006f3a:	400b      	ands	r3, r1
 8006f3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	431a      	orrs	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3728      	adds	r7, #40	; 0x28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	fe00e800 	.word	0xfe00e800

08006f74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	607b      	str	r3, [r7, #4]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	817b      	strh	r3, [r7, #10]
 8006f82:	4613      	mov	r3, r2
 8006f84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f86:	897b      	ldrh	r3, [r7, #10]
 8006f88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f8c:	7a7b      	ldrb	r3, [r7, #9]
 8006f8e:	041b      	lsls	r3, r3, #16
 8006f90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fa2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	0d5b      	lsrs	r3, r3, #21
 8006fae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006fb2:	4b08      	ldr	r3, [pc, #32]	; (8006fd4 <I2C_TransferConfig+0x60>)
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	43db      	mvns	r3, r3
 8006fb8:	ea02 0103 	and.w	r1, r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006fc6:	bf00      	nop
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	03ff63ff 	.word	0x03ff63ff

08006fd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d138      	bne.n	8007060 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e032      	b.n	8007062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2224      	movs	r2, #36	; 0x24
 8007008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0201 	bic.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800702a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6819      	ldr	r1, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 0201 	orr.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	e000      	b.n	8007062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007060:	2302      	movs	r3, #2
  }
}
 8007062:	4618      	mov	r0, r3
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800706e:	b480      	push	{r7}
 8007070:	b085      	sub	sp, #20
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b20      	cmp	r3, #32
 8007082:	d139      	bne.n	80070f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800708a:	2b01      	cmp	r3, #1
 800708c:	d101      	bne.n	8007092 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800708e:	2302      	movs	r3, #2
 8007090:	e033      	b.n	80070fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2224      	movs	r2, #36	; 0x24
 800709e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80070c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e000      	b.n	80070fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80070f8:	2302      	movs	r3, #2
  }
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
	...

08007108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800710e:	af00      	add	r7, sp, #0
 8007110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007114:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007118:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800711a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800711e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d102      	bne.n	800712e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	f001 b823 	b.w	8008174 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800712e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 817d 	beq.w	800743e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007144:	4bbc      	ldr	r3, [pc, #752]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f003 030c 	and.w	r3, r3, #12
 800714c:	2b04      	cmp	r3, #4
 800714e:	d00c      	beq.n	800716a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007150:	4bb9      	ldr	r3, [pc, #740]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f003 030c 	and.w	r3, r3, #12
 8007158:	2b08      	cmp	r3, #8
 800715a:	d15c      	bne.n	8007216 <HAL_RCC_OscConfig+0x10e>
 800715c:	4bb6      	ldr	r3, [pc, #728]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007168:	d155      	bne.n	8007216 <HAL_RCC_OscConfig+0x10e>
 800716a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800716e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007172:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007176:	fa93 f3a3 	rbit	r3, r3
 800717a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800717e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007182:	fab3 f383 	clz	r3, r3
 8007186:	b2db      	uxtb	r3, r3
 8007188:	095b      	lsrs	r3, r3, #5
 800718a:	b2db      	uxtb	r3, r3
 800718c:	f043 0301 	orr.w	r3, r3, #1
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b01      	cmp	r3, #1
 8007194:	d102      	bne.n	800719c <HAL_RCC_OscConfig+0x94>
 8007196:	4ba8      	ldr	r3, [pc, #672]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	e015      	b.n	80071c8 <HAL_RCC_OscConfig+0xc0>
 800719c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80071a8:	fa93 f3a3 	rbit	r3, r3
 80071ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80071b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80071b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80071bc:	fa93 f3a3 	rbit	r3, r3
 80071c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80071c4:	4b9c      	ldr	r3, [pc, #624]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80071cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80071d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80071d4:	fa92 f2a2 	rbit	r2, r2
 80071d8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80071dc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80071e0:	fab2 f282 	clz	r2, r2
 80071e4:	b2d2      	uxtb	r2, r2
 80071e6:	f042 0220 	orr.w	r2, r2, #32
 80071ea:	b2d2      	uxtb	r2, r2
 80071ec:	f002 021f 	and.w	r2, r2, #31
 80071f0:	2101      	movs	r1, #1
 80071f2:	fa01 f202 	lsl.w	r2, r1, r2
 80071f6:	4013      	ands	r3, r2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 811f 	beq.w	800743c <HAL_RCC_OscConfig+0x334>
 80071fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 8116 	bne.w	800743c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	f000 bfaf 	b.w	8008174 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800721a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007226:	d106      	bne.n	8007236 <HAL_RCC_OscConfig+0x12e>
 8007228:	4b83      	ldr	r3, [pc, #524]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a82      	ldr	r2, [pc, #520]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 800722e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	e036      	b.n	80072a4 <HAL_RCC_OscConfig+0x19c>
 8007236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800723a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10c      	bne.n	8007260 <HAL_RCC_OscConfig+0x158>
 8007246:	4b7c      	ldr	r3, [pc, #496]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a7b      	ldr	r2, [pc, #492]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 800724c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	4b79      	ldr	r3, [pc, #484]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a78      	ldr	r2, [pc, #480]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 8007258:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	e021      	b.n	80072a4 <HAL_RCC_OscConfig+0x19c>
 8007260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007264:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007270:	d10c      	bne.n	800728c <HAL_RCC_OscConfig+0x184>
 8007272:	4b71      	ldr	r3, [pc, #452]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a70      	ldr	r2, [pc, #448]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 8007278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	4b6e      	ldr	r3, [pc, #440]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a6d      	ldr	r2, [pc, #436]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 8007284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	e00b      	b.n	80072a4 <HAL_RCC_OscConfig+0x19c>
 800728c:	4b6a      	ldr	r3, [pc, #424]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a69      	ldr	r2, [pc, #420]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 8007292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	4b67      	ldr	r3, [pc, #412]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a66      	ldr	r2, [pc, #408]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 800729e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80072a4:	4b64      	ldr	r3, [pc, #400]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	f023 020f 	bic.w	r2, r3, #15
 80072ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	495f      	ldr	r1, [pc, #380]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d059      	beq.n	8007382 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ce:	f7fe faf9 	bl	80058c4 <HAL_GetTick>
 80072d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072d6:	e00a      	b.n	80072ee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072d8:	f7fe faf4 	bl	80058c4 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b64      	cmp	r3, #100	; 0x64
 80072e6:	d902      	bls.n	80072ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	f000 bf43 	b.w	8008174 <HAL_RCC_OscConfig+0x106c>
 80072ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80072fa:	fa93 f3a3 	rbit	r3, r3
 80072fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007302:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007306:	fab3 f383 	clz	r3, r3
 800730a:	b2db      	uxtb	r3, r3
 800730c:	095b      	lsrs	r3, r3, #5
 800730e:	b2db      	uxtb	r3, r3
 8007310:	f043 0301 	orr.w	r3, r3, #1
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b01      	cmp	r3, #1
 8007318:	d102      	bne.n	8007320 <HAL_RCC_OscConfig+0x218>
 800731a:	4b47      	ldr	r3, [pc, #284]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	e015      	b.n	800734c <HAL_RCC_OscConfig+0x244>
 8007320:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007324:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007328:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800732c:	fa93 f3a3 	rbit	r3, r3
 8007330:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007334:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007338:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800733c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007340:	fa93 f3a3 	rbit	r3, r3
 8007344:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007348:	4b3b      	ldr	r3, [pc, #236]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007350:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007354:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007358:	fa92 f2a2 	rbit	r2, r2
 800735c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007360:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007364:	fab2 f282 	clz	r2, r2
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	f042 0220 	orr.w	r2, r2, #32
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	f002 021f 	and.w	r2, r2, #31
 8007374:	2101      	movs	r1, #1
 8007376:	fa01 f202 	lsl.w	r2, r1, r2
 800737a:	4013      	ands	r3, r2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0ab      	beq.n	80072d8 <HAL_RCC_OscConfig+0x1d0>
 8007380:	e05d      	b.n	800743e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007382:	f7fe fa9f 	bl	80058c4 <HAL_GetTick>
 8007386:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800738a:	e00a      	b.n	80073a2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800738c:	f7fe fa9a 	bl	80058c4 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	2b64      	cmp	r3, #100	; 0x64
 800739a:	d902      	bls.n	80073a2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	f000 bee9 	b.w	8008174 <HAL_RCC_OscConfig+0x106c>
 80073a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073a6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80073ae:	fa93 f3a3 	rbit	r3, r3
 80073b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80073b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ba:	fab3 f383 	clz	r3, r3
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	f043 0301 	orr.w	r3, r3, #1
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d102      	bne.n	80073d4 <HAL_RCC_OscConfig+0x2cc>
 80073ce:	4b1a      	ldr	r3, [pc, #104]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	e015      	b.n	8007400 <HAL_RCC_OscConfig+0x2f8>
 80073d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073d8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073dc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80073e0:	fa93 f3a3 	rbit	r3, r3
 80073e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80073e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80073f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80073f4:	fa93 f3a3 	rbit	r3, r3
 80073f8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80073fc:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <HAL_RCC_OscConfig+0x330>)
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007404:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007408:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800740c:	fa92 f2a2 	rbit	r2, r2
 8007410:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007414:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007418:	fab2 f282 	clz	r2, r2
 800741c:	b2d2      	uxtb	r2, r2
 800741e:	f042 0220 	orr.w	r2, r2, #32
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	f002 021f 	and.w	r2, r2, #31
 8007428:	2101      	movs	r1, #1
 800742a:	fa01 f202 	lsl.w	r2, r1, r2
 800742e:	4013      	ands	r3, r2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1ab      	bne.n	800738c <HAL_RCC_OscConfig+0x284>
 8007434:	e003      	b.n	800743e <HAL_RCC_OscConfig+0x336>
 8007436:	bf00      	nop
 8007438:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800743c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800743e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007442:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 817d 	beq.w	800774e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007454:	4ba6      	ldr	r3, [pc, #664]	; (80076f0 <HAL_RCC_OscConfig+0x5e8>)
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f003 030c 	and.w	r3, r3, #12
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00b      	beq.n	8007478 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007460:	4ba3      	ldr	r3, [pc, #652]	; (80076f0 <HAL_RCC_OscConfig+0x5e8>)
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f003 030c 	and.w	r3, r3, #12
 8007468:	2b08      	cmp	r3, #8
 800746a:	d172      	bne.n	8007552 <HAL_RCC_OscConfig+0x44a>
 800746c:	4ba0      	ldr	r3, [pc, #640]	; (80076f0 <HAL_RCC_OscConfig+0x5e8>)
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d16c      	bne.n	8007552 <HAL_RCC_OscConfig+0x44a>
 8007478:	2302      	movs	r3, #2
 800747a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800747e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007482:	fa93 f3a3 	rbit	r3, r3
 8007486:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800748a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800748e:	fab3 f383 	clz	r3, r3
 8007492:	b2db      	uxtb	r3, r3
 8007494:	095b      	lsrs	r3, r3, #5
 8007496:	b2db      	uxtb	r3, r3
 8007498:	f043 0301 	orr.w	r3, r3, #1
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d102      	bne.n	80074a8 <HAL_RCC_OscConfig+0x3a0>
 80074a2:	4b93      	ldr	r3, [pc, #588]	; (80076f0 <HAL_RCC_OscConfig+0x5e8>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	e013      	b.n	80074d0 <HAL_RCC_OscConfig+0x3c8>
 80074a8:	2302      	movs	r3, #2
 80074aa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80074b2:	fa93 f3a3 	rbit	r3, r3
 80074b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80074ba:	2302      	movs	r3, #2
 80074bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80074c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80074c4:	fa93 f3a3 	rbit	r3, r3
 80074c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80074cc:	4b88      	ldr	r3, [pc, #544]	; (80076f0 <HAL_RCC_OscConfig+0x5e8>)
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	2202      	movs	r2, #2
 80074d2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80074d6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80074da:	fa92 f2a2 	rbit	r2, r2
 80074de:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80074e2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80074e6:	fab2 f282 	clz	r2, r2
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	f042 0220 	orr.w	r2, r2, #32
 80074f0:	b2d2      	uxtb	r2, r2
 80074f2:	f002 021f 	and.w	r2, r2, #31
 80074f6:	2101      	movs	r1, #1
 80074f8:	fa01 f202 	lsl.w	r2, r1, r2
 80074fc:	4013      	ands	r3, r2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <HAL_RCC_OscConfig+0x410>
 8007502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007506:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d002      	beq.n	8007518 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	f000 be2e 	b.w	8008174 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007518:	4b75      	ldr	r3, [pc, #468]	; (80076f0 <HAL_RCC_OscConfig+0x5e8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007524:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	21f8      	movs	r1, #248	; 0xf8
 800752e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007532:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007536:	fa91 f1a1 	rbit	r1, r1
 800753a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800753e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007542:	fab1 f181 	clz	r1, r1
 8007546:	b2c9      	uxtb	r1, r1
 8007548:	408b      	lsls	r3, r1
 800754a:	4969      	ldr	r1, [pc, #420]	; (80076f0 <HAL_RCC_OscConfig+0x5e8>)
 800754c:	4313      	orrs	r3, r2
 800754e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007550:	e0fd      	b.n	800774e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007556:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 8088 	beq.w	8007674 <HAL_RCC_OscConfig+0x56c>
 8007564:	2301      	movs	r3, #1
 8007566:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800756a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800756e:	fa93 f3a3 	rbit	r3, r3
 8007572:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007576:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800757a:	fab3 f383 	clz	r3, r3
 800757e:	b2db      	uxtb	r3, r3
 8007580:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007584:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	461a      	mov	r2, r3
 800758c:	2301      	movs	r3, #1
 800758e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007590:	f7fe f998 	bl	80058c4 <HAL_GetTick>
 8007594:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007598:	e00a      	b.n	80075b0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800759a:	f7fe f993 	bl	80058c4 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d902      	bls.n	80075b0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	f000 bde2 	b.w	8008174 <HAL_RCC_OscConfig+0x106c>
 80075b0:	2302      	movs	r3, #2
 80075b2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075b6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80075ba:	fa93 f3a3 	rbit	r3, r3
 80075be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80075c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075c6:	fab3 f383 	clz	r3, r3
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	095b      	lsrs	r3, r3, #5
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	f043 0301 	orr.w	r3, r3, #1
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d102      	bne.n	80075e0 <HAL_RCC_OscConfig+0x4d8>
 80075da:	4b45      	ldr	r3, [pc, #276]	; (80076f0 <HAL_RCC_OscConfig+0x5e8>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	e013      	b.n	8007608 <HAL_RCC_OscConfig+0x500>
 80075e0:	2302      	movs	r3, #2
 80075e2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80075ea:	fa93 f3a3 	rbit	r3, r3
 80075ee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80075f2:	2302      	movs	r3, #2
 80075f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80075f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80075fc:	fa93 f3a3 	rbit	r3, r3
 8007600:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007604:	4b3a      	ldr	r3, [pc, #232]	; (80076f0 <HAL_RCC_OscConfig+0x5e8>)
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	2202      	movs	r2, #2
 800760a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800760e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007612:	fa92 f2a2 	rbit	r2, r2
 8007616:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800761a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800761e:	fab2 f282 	clz	r2, r2
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	f042 0220 	orr.w	r2, r2, #32
 8007628:	b2d2      	uxtb	r2, r2
 800762a:	f002 021f 	and.w	r2, r2, #31
 800762e:	2101      	movs	r1, #1
 8007630:	fa01 f202 	lsl.w	r2, r1, r2
 8007634:	4013      	ands	r3, r2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0af      	beq.n	800759a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800763a:	4b2d      	ldr	r3, [pc, #180]	; (80076f0 <HAL_RCC_OscConfig+0x5e8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007646:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	21f8      	movs	r1, #248	; 0xf8
 8007650:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007654:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007658:	fa91 f1a1 	rbit	r1, r1
 800765c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007660:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007664:	fab1 f181 	clz	r1, r1
 8007668:	b2c9      	uxtb	r1, r1
 800766a:	408b      	lsls	r3, r1
 800766c:	4920      	ldr	r1, [pc, #128]	; (80076f0 <HAL_RCC_OscConfig+0x5e8>)
 800766e:	4313      	orrs	r3, r2
 8007670:	600b      	str	r3, [r1, #0]
 8007672:	e06c      	b.n	800774e <HAL_RCC_OscConfig+0x646>
 8007674:	2301      	movs	r3, #1
 8007676:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800767a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800767e:	fa93 f3a3 	rbit	r3, r3
 8007682:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007686:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800768a:	fab3 f383 	clz	r3, r3
 800768e:	b2db      	uxtb	r3, r3
 8007690:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007694:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	461a      	mov	r2, r3
 800769c:	2300      	movs	r3, #0
 800769e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a0:	f7fe f910 	bl	80058c4 <HAL_GetTick>
 80076a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076a8:	e00a      	b.n	80076c0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076aa:	f7fe f90b 	bl	80058c4 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d902      	bls.n	80076c0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	f000 bd5a 	b.w	8008174 <HAL_RCC_OscConfig+0x106c>
 80076c0:	2302      	movs	r3, #2
 80076c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80076ca:	fa93 f3a3 	rbit	r3, r3
 80076ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80076d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076d6:	fab3 f383 	clz	r3, r3
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	095b      	lsrs	r3, r3, #5
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	f043 0301 	orr.w	r3, r3, #1
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d104      	bne.n	80076f4 <HAL_RCC_OscConfig+0x5ec>
 80076ea:	4b01      	ldr	r3, [pc, #4]	; (80076f0 <HAL_RCC_OscConfig+0x5e8>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	e015      	b.n	800771c <HAL_RCC_OscConfig+0x614>
 80076f0:	40021000 	.word	0x40021000
 80076f4:	2302      	movs	r3, #2
 80076f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076fe:	fa93 f3a3 	rbit	r3, r3
 8007702:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007706:	2302      	movs	r3, #2
 8007708:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800770c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007710:	fa93 f3a3 	rbit	r3, r3
 8007714:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007718:	4bc8      	ldr	r3, [pc, #800]	; (8007a3c <HAL_RCC_OscConfig+0x934>)
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	2202      	movs	r2, #2
 800771e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007722:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007726:	fa92 f2a2 	rbit	r2, r2
 800772a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800772e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007732:	fab2 f282 	clz	r2, r2
 8007736:	b2d2      	uxtb	r2, r2
 8007738:	f042 0220 	orr.w	r2, r2, #32
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	f002 021f 	and.w	r2, r2, #31
 8007742:	2101      	movs	r1, #1
 8007744:	fa01 f202 	lsl.w	r2, r1, r2
 8007748:	4013      	ands	r3, r2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1ad      	bne.n	80076aa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800774e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 8110 	beq.w	8007984 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007768:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d079      	beq.n	8007868 <HAL_RCC_OscConfig+0x760>
 8007774:	2301      	movs	r3, #1
 8007776:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800777a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800777e:	fa93 f3a3 	rbit	r3, r3
 8007782:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800778a:	fab3 f383 	clz	r3, r3
 800778e:	b2db      	uxtb	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	4bab      	ldr	r3, [pc, #684]	; (8007a40 <HAL_RCC_OscConfig+0x938>)
 8007794:	4413      	add	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	461a      	mov	r2, r3
 800779a:	2301      	movs	r3, #1
 800779c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800779e:	f7fe f891 	bl	80058c4 <HAL_GetTick>
 80077a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077a6:	e00a      	b.n	80077be <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077a8:	f7fe f88c 	bl	80058c4 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d902      	bls.n	80077be <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	f000 bcdb 	b.w	8008174 <HAL_RCC_OscConfig+0x106c>
 80077be:	2302      	movs	r3, #2
 80077c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077c8:	fa93 f3a3 	rbit	r3, r3
 80077cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80077d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80077d8:	2202      	movs	r2, #2
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	fa93 f2a3 	rbit	r2, r3
 80077ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fc:	2202      	movs	r2, #2
 80077fe:	601a      	str	r2, [r3, #0]
 8007800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	fa93 f2a3 	rbit	r2, r3
 800780e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007812:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007816:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007818:	4b88      	ldr	r3, [pc, #544]	; (8007a3c <HAL_RCC_OscConfig+0x934>)
 800781a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800781c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007820:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007824:	2102      	movs	r1, #2
 8007826:	6019      	str	r1, [r3, #0]
 8007828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800782c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	fa93 f1a3 	rbit	r1, r3
 8007836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800783a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800783e:	6019      	str	r1, [r3, #0]
  return result;
 8007840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007844:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	fab3 f383 	clz	r3, r3
 800784e:	b2db      	uxtb	r3, r3
 8007850:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007854:	b2db      	uxtb	r3, r3
 8007856:	f003 031f 	and.w	r3, r3, #31
 800785a:	2101      	movs	r1, #1
 800785c:	fa01 f303 	lsl.w	r3, r1, r3
 8007860:	4013      	ands	r3, r2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0a0      	beq.n	80077a8 <HAL_RCC_OscConfig+0x6a0>
 8007866:	e08d      	b.n	8007984 <HAL_RCC_OscConfig+0x87c>
 8007868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800786c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007870:	2201      	movs	r2, #1
 8007872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007878:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	fa93 f2a3 	rbit	r2, r3
 8007882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007886:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800788a:	601a      	str	r2, [r3, #0]
  return result;
 800788c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007890:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007894:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007896:	fab3 f383 	clz	r3, r3
 800789a:	b2db      	uxtb	r3, r3
 800789c:	461a      	mov	r2, r3
 800789e:	4b68      	ldr	r3, [pc, #416]	; (8007a40 <HAL_RCC_OscConfig+0x938>)
 80078a0:	4413      	add	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	461a      	mov	r2, r3
 80078a6:	2300      	movs	r3, #0
 80078a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078aa:	f7fe f80b 	bl	80058c4 <HAL_GetTick>
 80078ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078b2:	e00a      	b.n	80078ca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078b4:	f7fe f806 	bl	80058c4 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d902      	bls.n	80078ca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	f000 bc55 	b.w	8008174 <HAL_RCC_OscConfig+0x106c>
 80078ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80078d2:	2202      	movs	r2, #2
 80078d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	fa93 f2a3 	rbit	r2, r3
 80078e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80078f6:	2202      	movs	r2, #2
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	fa93 f2a3 	rbit	r2, r3
 8007908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800790c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800791a:	2202      	movs	r2, #2
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	fa93 f2a3 	rbit	r2, r3
 800792c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007930:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007934:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007936:	4b41      	ldr	r3, [pc, #260]	; (8007a3c <HAL_RCC_OscConfig+0x934>)
 8007938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800793a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800793e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007942:	2102      	movs	r1, #2
 8007944:	6019      	str	r1, [r3, #0]
 8007946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800794a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	fa93 f1a3 	rbit	r1, r3
 8007954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007958:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800795c:	6019      	str	r1, [r3, #0]
  return result;
 800795e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007962:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	fab3 f383 	clz	r3, r3
 800796c:	b2db      	uxtb	r3, r3
 800796e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f003 031f 	and.w	r3, r3, #31
 8007978:	2101      	movs	r1, #1
 800797a:	fa01 f303 	lsl.w	r3, r1, r3
 800797e:	4013      	ands	r3, r2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d197      	bne.n	80078b4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007988:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 81a1 	beq.w	8007cdc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800799a:	2300      	movs	r3, #0
 800799c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079a0:	4b26      	ldr	r3, [pc, #152]	; (8007a3c <HAL_RCC_OscConfig+0x934>)
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d116      	bne.n	80079da <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ac:	4b23      	ldr	r3, [pc, #140]	; (8007a3c <HAL_RCC_OscConfig+0x934>)
 80079ae:	69db      	ldr	r3, [r3, #28]
 80079b0:	4a22      	ldr	r2, [pc, #136]	; (8007a3c <HAL_RCC_OscConfig+0x934>)
 80079b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b6:	61d3      	str	r3, [r2, #28]
 80079b8:	4b20      	ldr	r3, [pc, #128]	; (8007a3c <HAL_RCC_OscConfig+0x934>)
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80079c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079c4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079ce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80079d2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80079d4:	2301      	movs	r3, #1
 80079d6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079da:	4b1a      	ldr	r3, [pc, #104]	; (8007a44 <HAL_RCC_OscConfig+0x93c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d11a      	bne.n	8007a1c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079e6:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <HAL_RCC_OscConfig+0x93c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a16      	ldr	r2, [pc, #88]	; (8007a44 <HAL_RCC_OscConfig+0x93c>)
 80079ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079f2:	f7fd ff67 	bl	80058c4 <HAL_GetTick>
 80079f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079fa:	e009      	b.n	8007a10 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079fc:	f7fd ff62 	bl	80058c4 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b64      	cmp	r3, #100	; 0x64
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e3b1      	b.n	8008174 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a10:	4b0c      	ldr	r3, [pc, #48]	; (8007a44 <HAL_RCC_OscConfig+0x93c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0ef      	beq.n	80079fc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d10d      	bne.n	8007a48 <HAL_RCC_OscConfig+0x940>
 8007a2c:	4b03      	ldr	r3, [pc, #12]	; (8007a3c <HAL_RCC_OscConfig+0x934>)
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	4a02      	ldr	r2, [pc, #8]	; (8007a3c <HAL_RCC_OscConfig+0x934>)
 8007a32:	f043 0301 	orr.w	r3, r3, #1
 8007a36:	6213      	str	r3, [r2, #32]
 8007a38:	e03c      	b.n	8007ab4 <HAL_RCC_OscConfig+0x9ac>
 8007a3a:	bf00      	nop
 8007a3c:	40021000 	.word	0x40021000
 8007a40:	10908120 	.word	0x10908120
 8007a44:	40007000 	.word	0x40007000
 8007a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10c      	bne.n	8007a72 <HAL_RCC_OscConfig+0x96a>
 8007a58:	4bc1      	ldr	r3, [pc, #772]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	4ac0      	ldr	r2, [pc, #768]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007a5e:	f023 0301 	bic.w	r3, r3, #1
 8007a62:	6213      	str	r3, [r2, #32]
 8007a64:	4bbe      	ldr	r3, [pc, #760]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007a66:	6a1b      	ldr	r3, [r3, #32]
 8007a68:	4abd      	ldr	r2, [pc, #756]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007a6a:	f023 0304 	bic.w	r3, r3, #4
 8007a6e:	6213      	str	r3, [r2, #32]
 8007a70:	e020      	b.n	8007ab4 <HAL_RCC_OscConfig+0x9ac>
 8007a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	2b05      	cmp	r3, #5
 8007a80:	d10c      	bne.n	8007a9c <HAL_RCC_OscConfig+0x994>
 8007a82:	4bb7      	ldr	r3, [pc, #732]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	4ab6      	ldr	r2, [pc, #728]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007a88:	f043 0304 	orr.w	r3, r3, #4
 8007a8c:	6213      	str	r3, [r2, #32]
 8007a8e:	4bb4      	ldr	r3, [pc, #720]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	4ab3      	ldr	r2, [pc, #716]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007a94:	f043 0301 	orr.w	r3, r3, #1
 8007a98:	6213      	str	r3, [r2, #32]
 8007a9a:	e00b      	b.n	8007ab4 <HAL_RCC_OscConfig+0x9ac>
 8007a9c:	4bb0      	ldr	r3, [pc, #704]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	4aaf      	ldr	r2, [pc, #700]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007aa2:	f023 0301 	bic.w	r3, r3, #1
 8007aa6:	6213      	str	r3, [r2, #32]
 8007aa8:	4bad      	ldr	r3, [pc, #692]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	4aac      	ldr	r2, [pc, #688]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007aae:	f023 0304 	bic.w	r3, r3, #4
 8007ab2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ab8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 8081 	beq.w	8007bc8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ac6:	f7fd fefd 	bl	80058c4 <HAL_GetTick>
 8007aca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ace:	e00b      	b.n	8007ae8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ad0:	f7fd fef8 	bl	80058c4 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d901      	bls.n	8007ae8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e345      	b.n	8008174 <HAL_RCC_OscConfig+0x106c>
 8007ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007af0:	2202      	movs	r2, #2
 8007af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007af8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	fa93 f2a3 	rbit	r2, r3
 8007b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b06:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007b14:	2202      	movs	r2, #2
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	fa93 f2a3 	rbit	r2, r3
 8007b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b2a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007b2e:	601a      	str	r2, [r3, #0]
  return result;
 8007b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b34:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007b38:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b3a:	fab3 f383 	clz	r3, r3
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	f043 0302 	orr.w	r3, r3, #2
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d102      	bne.n	8007b54 <HAL_RCC_OscConfig+0xa4c>
 8007b4e:	4b84      	ldr	r3, [pc, #528]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	e013      	b.n	8007b7c <HAL_RCC_OscConfig+0xa74>
 8007b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b58:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b64:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	fa93 f2a3 	rbit	r2, r3
 8007b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b72:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	4b79      	ldr	r3, [pc, #484]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b80:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007b84:	2102      	movs	r1, #2
 8007b86:	6011      	str	r1, [r2, #0]
 8007b88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b8c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007b90:	6812      	ldr	r2, [r2, #0]
 8007b92:	fa92 f1a2 	rbit	r1, r2
 8007b96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b9a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007b9e:	6011      	str	r1, [r2, #0]
  return result;
 8007ba0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ba4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007ba8:	6812      	ldr	r2, [r2, #0]
 8007baa:	fab2 f282 	clz	r2, r2
 8007bae:	b2d2      	uxtb	r2, r2
 8007bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	f002 021f 	and.w	r2, r2, #31
 8007bba:	2101      	movs	r1, #1
 8007bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d084      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x9c8>
 8007bc6:	e07f      	b.n	8007cc8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bc8:	f7fd fe7c 	bl	80058c4 <HAL_GetTick>
 8007bcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bd0:	e00b      	b.n	8007bea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bd2:	f7fd fe77 	bl	80058c4 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e2c4      	b.n	8008174 <HAL_RCC_OscConfig+0x106c>
 8007bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bfa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	fa93 f2a3 	rbit	r2, r3
 8007c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c08:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007c16:	2202      	movs	r2, #2
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c1e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	fa93 f2a3 	rbit	r2, r3
 8007c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c2c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007c30:	601a      	str	r2, [r3, #0]
  return result;
 8007c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c36:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007c3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c3c:	fab3 f383 	clz	r3, r3
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	095b      	lsrs	r3, r3, #5
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	f043 0302 	orr.w	r3, r3, #2
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d102      	bne.n	8007c56 <HAL_RCC_OscConfig+0xb4e>
 8007c50:	4b43      	ldr	r3, [pc, #268]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	e013      	b.n	8007c7e <HAL_RCC_OscConfig+0xb76>
 8007c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007c5e:	2202      	movs	r2, #2
 8007c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c66:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	fa93 f2a3 	rbit	r2, r3
 8007c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c74:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	4b39      	ldr	r3, [pc, #228]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007c82:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007c86:	2102      	movs	r1, #2
 8007c88:	6011      	str	r1, [r2, #0]
 8007c8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007c8e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007c92:	6812      	ldr	r2, [r2, #0]
 8007c94:	fa92 f1a2 	rbit	r1, r2
 8007c98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007c9c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007ca0:	6011      	str	r1, [r2, #0]
  return result;
 8007ca2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ca6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007caa:	6812      	ldr	r2, [r2, #0]
 8007cac:	fab2 f282 	clz	r2, r2
 8007cb0:	b2d2      	uxtb	r2, r2
 8007cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	f002 021f 	and.w	r2, r2, #31
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d184      	bne.n	8007bd2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007cc8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d105      	bne.n	8007cdc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cd0:	4b23      	ldr	r3, [pc, #140]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	4a22      	ldr	r2, [pc, #136]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cda:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ce0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 8242 	beq.w	8008172 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cee:	4b1c      	ldr	r3, [pc, #112]	; (8007d60 <HAL_RCC_OscConfig+0xc58>)
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f003 030c 	and.w	r3, r3, #12
 8007cf6:	2b08      	cmp	r3, #8
 8007cf8:	f000 8213 	beq.w	8008122 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	f040 8162 	bne.w	8007fd2 <HAL_RCC_OscConfig+0xeca>
 8007d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d12:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007d16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d20:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	fa93 f2a3 	rbit	r2, r3
 8007d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d2e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007d32:	601a      	str	r2, [r3, #0]
  return result;
 8007d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d38:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007d3c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d3e:	fab3 f383 	clz	r3, r3
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007d48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	461a      	mov	r2, r3
 8007d50:	2300      	movs	r3, #0
 8007d52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d54:	f7fd fdb6 	bl	80058c4 <HAL_GetTick>
 8007d58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d5c:	e00c      	b.n	8007d78 <HAL_RCC_OscConfig+0xc70>
 8007d5e:	bf00      	nop
 8007d60:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d64:	f7fd fdae 	bl	80058c4 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d901      	bls.n	8007d78 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	e1fd      	b.n	8008174 <HAL_RCC_OscConfig+0x106c>
 8007d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d7c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007d80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d8a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	fa93 f2a3 	rbit	r2, r3
 8007d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d98:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007d9c:	601a      	str	r2, [r3, #0]
  return result;
 8007d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007da2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007da6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007da8:	fab3 f383 	clz	r3, r3
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	095b      	lsrs	r3, r3, #5
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	f043 0301 	orr.w	r3, r3, #1
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d102      	bne.n	8007dc2 <HAL_RCC_OscConfig+0xcba>
 8007dbc:	4bb0      	ldr	r3, [pc, #704]	; (8008080 <HAL_RCC_OscConfig+0xf78>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	e027      	b.n	8007e12 <HAL_RCC_OscConfig+0xd0a>
 8007dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dc6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dd4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	fa93 f2a3 	rbit	r2, r3
 8007dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007de2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dfa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	fa93 f2a3 	rbit	r2, r3
 8007e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e08:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	4b9c      	ldr	r3, [pc, #624]	; (8008080 <HAL_RCC_OscConfig+0xf78>)
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e16:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007e1a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007e1e:	6011      	str	r1, [r2, #0]
 8007e20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e24:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007e28:	6812      	ldr	r2, [r2, #0]
 8007e2a:	fa92 f1a2 	rbit	r1, r2
 8007e2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e32:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007e36:	6011      	str	r1, [r2, #0]
  return result;
 8007e38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e3c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007e40:	6812      	ldr	r2, [r2, #0]
 8007e42:	fab2 f282 	clz	r2, r2
 8007e46:	b2d2      	uxtb	r2, r2
 8007e48:	f042 0220 	orr.w	r2, r2, #32
 8007e4c:	b2d2      	uxtb	r2, r2
 8007e4e:	f002 021f 	and.w	r2, r2, #31
 8007e52:	2101      	movs	r1, #1
 8007e54:	fa01 f202 	lsl.w	r2, r1, r2
 8007e58:	4013      	ands	r3, r2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d182      	bne.n	8007d64 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e5e:	4b88      	ldr	r3, [pc, #544]	; (8008080 <HAL_RCC_OscConfig+0xf78>)
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	430b      	orrs	r3, r1
 8007e80:	497f      	ldr	r1, [pc, #508]	; (8008080 <HAL_RCC_OscConfig+0xf78>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	604b      	str	r3, [r1, #4]
 8007e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e8a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007e8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e98:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	fa93 f2a3 	rbit	r2, r3
 8007ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ea6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007eaa:	601a      	str	r2, [r3, #0]
  return result;
 8007eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eb0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007eb4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007eb6:	fab3 f383 	clz	r3, r3
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007ec0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	2301      	movs	r3, #1
 8007eca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ecc:	f7fd fcfa 	bl	80058c4 <HAL_GetTick>
 8007ed0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ed4:	e009      	b.n	8007eea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ed6:	f7fd fcf5 	bl	80058c4 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d901      	bls.n	8007eea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e144      	b.n	8008174 <HAL_RCC_OscConfig+0x106c>
 8007eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007efc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	fa93 f2a3 	rbit	r2, r3
 8007f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f0a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007f0e:	601a      	str	r2, [r3, #0]
  return result;
 8007f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f14:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007f18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f1a:	fab3 f383 	clz	r3, r3
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	095b      	lsrs	r3, r3, #5
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	f043 0301 	orr.w	r3, r3, #1
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d102      	bne.n	8007f34 <HAL_RCC_OscConfig+0xe2c>
 8007f2e:	4b54      	ldr	r3, [pc, #336]	; (8008080 <HAL_RCC_OscConfig+0xf78>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	e027      	b.n	8007f84 <HAL_RCC_OscConfig+0xe7c>
 8007f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f38:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007f3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f46:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	fa93 f2a3 	rbit	r2, r3
 8007f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f54:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f5e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007f62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f6c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	fa93 f2a3 	rbit	r2, r3
 8007f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f7a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	4b3f      	ldr	r3, [pc, #252]	; (8008080 <HAL_RCC_OscConfig+0xf78>)
 8007f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f88:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007f8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007f90:	6011      	str	r1, [r2, #0]
 8007f92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f96:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007f9a:	6812      	ldr	r2, [r2, #0]
 8007f9c:	fa92 f1a2 	rbit	r1, r2
 8007fa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fa4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007fa8:	6011      	str	r1, [r2, #0]
  return result;
 8007faa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007fb2:	6812      	ldr	r2, [r2, #0]
 8007fb4:	fab2 f282 	clz	r2, r2
 8007fb8:	b2d2      	uxtb	r2, r2
 8007fba:	f042 0220 	orr.w	r2, r2, #32
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	f002 021f 	and.w	r2, r2, #31
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8007fca:	4013      	ands	r3, r2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d082      	beq.n	8007ed6 <HAL_RCC_OscConfig+0xdce>
 8007fd0:	e0cf      	b.n	8008172 <HAL_RCC_OscConfig+0x106a>
 8007fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fd6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007fda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fe4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	fa93 f2a3 	rbit	r2, r3
 8007fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ff2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007ff6:	601a      	str	r2, [r3, #0]
  return result;
 8007ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ffc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008000:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008002:	fab3 f383 	clz	r3, r3
 8008006:	b2db      	uxtb	r3, r3
 8008008:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800800c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	461a      	mov	r2, r3
 8008014:	2300      	movs	r3, #0
 8008016:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008018:	f7fd fc54 	bl	80058c4 <HAL_GetTick>
 800801c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008020:	e009      	b.n	8008036 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008022:	f7fd fc4f 	bl	80058c4 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2b02      	cmp	r3, #2
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e09e      	b.n	8008174 <HAL_RCC_OscConfig+0x106c>
 8008036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800803a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800803e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008048:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	fa93 f2a3 	rbit	r2, r3
 8008052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008056:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800805a:	601a      	str	r2, [r3, #0]
  return result;
 800805c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008060:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008064:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008066:	fab3 f383 	clz	r3, r3
 800806a:	b2db      	uxtb	r3, r3
 800806c:	095b      	lsrs	r3, r3, #5
 800806e:	b2db      	uxtb	r3, r3
 8008070:	f043 0301 	orr.w	r3, r3, #1
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b01      	cmp	r3, #1
 8008078:	d104      	bne.n	8008084 <HAL_RCC_OscConfig+0xf7c>
 800807a:	4b01      	ldr	r3, [pc, #4]	; (8008080 <HAL_RCC_OscConfig+0xf78>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	e029      	b.n	80080d4 <HAL_RCC_OscConfig+0xfcc>
 8008080:	40021000 	.word	0x40021000
 8008084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008088:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800808c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008096:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	fa93 f2a3 	rbit	r2, r3
 80080a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80080b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	fa93 f2a3 	rbit	r2, r3
 80080c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	4b2b      	ldr	r3, [pc, #172]	; (8008180 <HAL_RCC_OscConfig+0x1078>)
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80080d8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80080dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80080e0:	6011      	str	r1, [r2, #0]
 80080e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80080e6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80080ea:	6812      	ldr	r2, [r2, #0]
 80080ec:	fa92 f1a2 	rbit	r1, r2
 80080f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80080f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80080f8:	6011      	str	r1, [r2, #0]
  return result;
 80080fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80080fe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008102:	6812      	ldr	r2, [r2, #0]
 8008104:	fab2 f282 	clz	r2, r2
 8008108:	b2d2      	uxtb	r2, r2
 800810a:	f042 0220 	orr.w	r2, r2, #32
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	f002 021f 	and.w	r2, r2, #31
 8008114:	2101      	movs	r1, #1
 8008116:	fa01 f202 	lsl.w	r2, r1, r2
 800811a:	4013      	ands	r3, r2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d180      	bne.n	8008022 <HAL_RCC_OscConfig+0xf1a>
 8008120:	e027      	b.n	8008172 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008126:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d101      	bne.n	8008136 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e01e      	b.n	8008174 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008136:	4b12      	ldr	r3, [pc, #72]	; (8008180 <HAL_RCC_OscConfig+0x1078>)
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800813e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008142:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800814a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	429a      	cmp	r2, r3
 8008154:	d10b      	bne.n	800816e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008156:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800815a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800815e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800816a:	429a      	cmp	r2, r3
 800816c:	d001      	beq.n	8008172 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	40021000 	.word	0x40021000

08008184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b09e      	sub	sp, #120	; 0x78
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800818e:	2300      	movs	r3, #0
 8008190:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e162      	b.n	8008462 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800819c:	4b90      	ldr	r3, [pc, #576]	; (80083e0 <HAL_RCC_ClockConfig+0x25c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0307 	and.w	r3, r3, #7
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d910      	bls.n	80081cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081aa:	4b8d      	ldr	r3, [pc, #564]	; (80083e0 <HAL_RCC_ClockConfig+0x25c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f023 0207 	bic.w	r2, r3, #7
 80081b2:	498b      	ldr	r1, [pc, #556]	; (80083e0 <HAL_RCC_ClockConfig+0x25c>)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ba:	4b89      	ldr	r3, [pc, #548]	; (80083e0 <HAL_RCC_ClockConfig+0x25c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0307 	and.w	r3, r3, #7
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d001      	beq.n	80081cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e14a      	b.n	8008462 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0302 	and.w	r3, r3, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d008      	beq.n	80081ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081d8:	4b82      	ldr	r3, [pc, #520]	; (80083e4 <HAL_RCC_ClockConfig+0x260>)
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	497f      	ldr	r1, [pc, #508]	; (80083e4 <HAL_RCC_ClockConfig+0x260>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 80dc 	beq.w	80083b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d13c      	bne.n	800827a <HAL_RCC_ClockConfig+0xf6>
 8008200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008204:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008208:	fa93 f3a3 	rbit	r3, r3
 800820c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800820e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008210:	fab3 f383 	clz	r3, r3
 8008214:	b2db      	uxtb	r3, r3
 8008216:	095b      	lsrs	r3, r3, #5
 8008218:	b2db      	uxtb	r3, r3
 800821a:	f043 0301 	orr.w	r3, r3, #1
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b01      	cmp	r3, #1
 8008222:	d102      	bne.n	800822a <HAL_RCC_ClockConfig+0xa6>
 8008224:	4b6f      	ldr	r3, [pc, #444]	; (80083e4 <HAL_RCC_ClockConfig+0x260>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	e00f      	b.n	800824a <HAL_RCC_ClockConfig+0xc6>
 800822a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800822e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008232:	fa93 f3a3 	rbit	r3, r3
 8008236:	667b      	str	r3, [r7, #100]	; 0x64
 8008238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800823c:	663b      	str	r3, [r7, #96]	; 0x60
 800823e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008240:	fa93 f3a3 	rbit	r3, r3
 8008244:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008246:	4b67      	ldr	r3, [pc, #412]	; (80083e4 <HAL_RCC_ClockConfig+0x260>)
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800824e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008250:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008252:	fa92 f2a2 	rbit	r2, r2
 8008256:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008258:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800825a:	fab2 f282 	clz	r2, r2
 800825e:	b2d2      	uxtb	r2, r2
 8008260:	f042 0220 	orr.w	r2, r2, #32
 8008264:	b2d2      	uxtb	r2, r2
 8008266:	f002 021f 	and.w	r2, r2, #31
 800826a:	2101      	movs	r1, #1
 800826c:	fa01 f202 	lsl.w	r2, r1, r2
 8008270:	4013      	ands	r3, r2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d17b      	bne.n	800836e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e0f3      	b.n	8008462 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	2b02      	cmp	r3, #2
 8008280:	d13c      	bne.n	80082fc <HAL_RCC_ClockConfig+0x178>
 8008282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008286:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800828a:	fa93 f3a3 	rbit	r3, r3
 800828e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008292:	fab3 f383 	clz	r3, r3
 8008296:	b2db      	uxtb	r3, r3
 8008298:	095b      	lsrs	r3, r3, #5
 800829a:	b2db      	uxtb	r3, r3
 800829c:	f043 0301 	orr.w	r3, r3, #1
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d102      	bne.n	80082ac <HAL_RCC_ClockConfig+0x128>
 80082a6:	4b4f      	ldr	r3, [pc, #316]	; (80083e4 <HAL_RCC_ClockConfig+0x260>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	e00f      	b.n	80082cc <HAL_RCC_ClockConfig+0x148>
 80082ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082b4:	fa93 f3a3 	rbit	r3, r3
 80082b8:	647b      	str	r3, [r7, #68]	; 0x44
 80082ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082be:	643b      	str	r3, [r7, #64]	; 0x40
 80082c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c2:	fa93 f3a3 	rbit	r3, r3
 80082c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c8:	4b46      	ldr	r3, [pc, #280]	; (80083e4 <HAL_RCC_ClockConfig+0x260>)
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80082d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80082d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082d4:	fa92 f2a2 	rbit	r2, r2
 80082d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80082da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082dc:	fab2 f282 	clz	r2, r2
 80082e0:	b2d2      	uxtb	r2, r2
 80082e2:	f042 0220 	orr.w	r2, r2, #32
 80082e6:	b2d2      	uxtb	r2, r2
 80082e8:	f002 021f 	and.w	r2, r2, #31
 80082ec:	2101      	movs	r1, #1
 80082ee:	fa01 f202 	lsl.w	r2, r1, r2
 80082f2:	4013      	ands	r3, r2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d13a      	bne.n	800836e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e0b2      	b.n	8008462 <HAL_RCC_ClockConfig+0x2de>
 80082fc:	2302      	movs	r3, #2
 80082fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	fa93 f3a3 	rbit	r3, r3
 8008306:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800830a:	fab3 f383 	clz	r3, r3
 800830e:	b2db      	uxtb	r3, r3
 8008310:	095b      	lsrs	r3, r3, #5
 8008312:	b2db      	uxtb	r3, r3
 8008314:	f043 0301 	orr.w	r3, r3, #1
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b01      	cmp	r3, #1
 800831c:	d102      	bne.n	8008324 <HAL_RCC_ClockConfig+0x1a0>
 800831e:	4b31      	ldr	r3, [pc, #196]	; (80083e4 <HAL_RCC_ClockConfig+0x260>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	e00d      	b.n	8008340 <HAL_RCC_ClockConfig+0x1bc>
 8008324:	2302      	movs	r3, #2
 8008326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	fa93 f3a3 	rbit	r3, r3
 800832e:	627b      	str	r3, [r7, #36]	; 0x24
 8008330:	2302      	movs	r3, #2
 8008332:	623b      	str	r3, [r7, #32]
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	fa93 f3a3 	rbit	r3, r3
 800833a:	61fb      	str	r3, [r7, #28]
 800833c:	4b29      	ldr	r3, [pc, #164]	; (80083e4 <HAL_RCC_ClockConfig+0x260>)
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	2202      	movs	r2, #2
 8008342:	61ba      	str	r2, [r7, #24]
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	fa92 f2a2 	rbit	r2, r2
 800834a:	617a      	str	r2, [r7, #20]
  return result;
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	fab2 f282 	clz	r2, r2
 8008352:	b2d2      	uxtb	r2, r2
 8008354:	f042 0220 	orr.w	r2, r2, #32
 8008358:	b2d2      	uxtb	r2, r2
 800835a:	f002 021f 	and.w	r2, r2, #31
 800835e:	2101      	movs	r1, #1
 8008360:	fa01 f202 	lsl.w	r2, r1, r2
 8008364:	4013      	ands	r3, r2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e079      	b.n	8008462 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800836e:	4b1d      	ldr	r3, [pc, #116]	; (80083e4 <HAL_RCC_ClockConfig+0x260>)
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f023 0203 	bic.w	r2, r3, #3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	491a      	ldr	r1, [pc, #104]	; (80083e4 <HAL_RCC_ClockConfig+0x260>)
 800837c:	4313      	orrs	r3, r2
 800837e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008380:	f7fd faa0 	bl	80058c4 <HAL_GetTick>
 8008384:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008386:	e00a      	b.n	800839e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008388:	f7fd fa9c 	bl	80058c4 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	f241 3288 	movw	r2, #5000	; 0x1388
 8008396:	4293      	cmp	r3, r2
 8008398:	d901      	bls.n	800839e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e061      	b.n	8008462 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800839e:	4b11      	ldr	r3, [pc, #68]	; (80083e4 <HAL_RCC_ClockConfig+0x260>)
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f003 020c 	and.w	r2, r3, #12
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d1eb      	bne.n	8008388 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083b0:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <HAL_RCC_ClockConfig+0x25c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0307 	and.w	r3, r3, #7
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d214      	bcs.n	80083e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083be:	4b08      	ldr	r3, [pc, #32]	; (80083e0 <HAL_RCC_ClockConfig+0x25c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f023 0207 	bic.w	r2, r3, #7
 80083c6:	4906      	ldr	r1, [pc, #24]	; (80083e0 <HAL_RCC_ClockConfig+0x25c>)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ce:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <HAL_RCC_ClockConfig+0x25c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d005      	beq.n	80083e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e040      	b.n	8008462 <HAL_RCC_ClockConfig+0x2de>
 80083e0:	40022000 	.word	0x40022000
 80083e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d008      	beq.n	8008406 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083f4:	4b1d      	ldr	r3, [pc, #116]	; (800846c <HAL_RCC_ClockConfig+0x2e8>)
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	491a      	ldr	r1, [pc, #104]	; (800846c <HAL_RCC_ClockConfig+0x2e8>)
 8008402:	4313      	orrs	r3, r2
 8008404:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0308 	and.w	r3, r3, #8
 800840e:	2b00      	cmp	r3, #0
 8008410:	d009      	beq.n	8008426 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008412:	4b16      	ldr	r3, [pc, #88]	; (800846c <HAL_RCC_ClockConfig+0x2e8>)
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	4912      	ldr	r1, [pc, #72]	; (800846c <HAL_RCC_ClockConfig+0x2e8>)
 8008422:	4313      	orrs	r3, r2
 8008424:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008426:	f000 f829 	bl	800847c <HAL_RCC_GetSysClockFreq>
 800842a:	4601      	mov	r1, r0
 800842c:	4b0f      	ldr	r3, [pc, #60]	; (800846c <HAL_RCC_ClockConfig+0x2e8>)
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008434:	22f0      	movs	r2, #240	; 0xf0
 8008436:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	fa92 f2a2 	rbit	r2, r2
 800843e:	60fa      	str	r2, [r7, #12]
  return result;
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	fab2 f282 	clz	r2, r2
 8008446:	b2d2      	uxtb	r2, r2
 8008448:	40d3      	lsrs	r3, r2
 800844a:	4a09      	ldr	r2, [pc, #36]	; (8008470 <HAL_RCC_ClockConfig+0x2ec>)
 800844c:	5cd3      	ldrb	r3, [r2, r3]
 800844e:	fa21 f303 	lsr.w	r3, r1, r3
 8008452:	4a08      	ldr	r2, [pc, #32]	; (8008474 <HAL_RCC_ClockConfig+0x2f0>)
 8008454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008456:	4b08      	ldr	r3, [pc, #32]	; (8008478 <HAL_RCC_ClockConfig+0x2f4>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4618      	mov	r0, r3
 800845c:	f7fd f9ee 	bl	800583c <HAL_InitTick>
  
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3778      	adds	r7, #120	; 0x78
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	40021000 	.word	0x40021000
 8008470:	0800d77c 	.word	0x0800d77c
 8008474:	20000054 	.word	0x20000054
 8008478:	20000060 	.word	0x20000060

0800847c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800847c:	b480      	push	{r7}
 800847e:	b08b      	sub	sp, #44	; 0x2c
 8008480:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	61fb      	str	r3, [r7, #28]
 8008486:	2300      	movs	r3, #0
 8008488:	61bb      	str	r3, [r7, #24]
 800848a:	2300      	movs	r3, #0
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
 800848e:	2300      	movs	r3, #0
 8008490:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008496:	4b29      	ldr	r3, [pc, #164]	; (800853c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	f003 030c 	and.w	r3, r3, #12
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	d002      	beq.n	80084ac <HAL_RCC_GetSysClockFreq+0x30>
 80084a6:	2b08      	cmp	r3, #8
 80084a8:	d003      	beq.n	80084b2 <HAL_RCC_GetSysClockFreq+0x36>
 80084aa:	e03c      	b.n	8008526 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80084ac:	4b24      	ldr	r3, [pc, #144]	; (8008540 <HAL_RCC_GetSysClockFreq+0xc4>)
 80084ae:	623b      	str	r3, [r7, #32]
      break;
 80084b0:	e03c      	b.n	800852c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80084b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80084bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	fa92 f2a2 	rbit	r2, r2
 80084c4:	607a      	str	r2, [r7, #4]
  return result;
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	fab2 f282 	clz	r2, r2
 80084cc:	b2d2      	uxtb	r2, r2
 80084ce:	40d3      	lsrs	r3, r2
 80084d0:	4a1c      	ldr	r2, [pc, #112]	; (8008544 <HAL_RCC_GetSysClockFreq+0xc8>)
 80084d2:	5cd3      	ldrb	r3, [r2, r3]
 80084d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80084d6:	4b19      	ldr	r3, [pc, #100]	; (800853c <HAL_RCC_GetSysClockFreq+0xc0>)
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084da:	f003 030f 	and.w	r3, r3, #15
 80084de:	220f      	movs	r2, #15
 80084e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	fa92 f2a2 	rbit	r2, r2
 80084e8:	60fa      	str	r2, [r7, #12]
  return result;
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	fab2 f282 	clz	r2, r2
 80084f0:	b2d2      	uxtb	r2, r2
 80084f2:	40d3      	lsrs	r3, r2
 80084f4:	4a14      	ldr	r2, [pc, #80]	; (8008548 <HAL_RCC_GetSysClockFreq+0xcc>)
 80084f6:	5cd3      	ldrb	r3, [r2, r3]
 80084f8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d008      	beq.n	8008516 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008504:	4a0e      	ldr	r2, [pc, #56]	; (8008540 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	fbb2 f2f3 	udiv	r2, r2, r3
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	fb02 f303 	mul.w	r3, r2, r3
 8008512:	627b      	str	r3, [r7, #36]	; 0x24
 8008514:	e004      	b.n	8008520 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	4a0c      	ldr	r2, [pc, #48]	; (800854c <HAL_RCC_GetSysClockFreq+0xd0>)
 800851a:	fb02 f303 	mul.w	r3, r2, r3
 800851e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	623b      	str	r3, [r7, #32]
      break;
 8008524:	e002      	b.n	800852c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008526:	4b06      	ldr	r3, [pc, #24]	; (8008540 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008528:	623b      	str	r3, [r7, #32]
      break;
 800852a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800852c:	6a3b      	ldr	r3, [r7, #32]
}
 800852e:	4618      	mov	r0, r3
 8008530:	372c      	adds	r7, #44	; 0x2c
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	40021000 	.word	0x40021000
 8008540:	007a1200 	.word	0x007a1200
 8008544:	0800d794 	.word	0x0800d794
 8008548:	0800d7a4 	.word	0x0800d7a4
 800854c:	003d0900 	.word	0x003d0900

08008550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008554:	4b03      	ldr	r3, [pc, #12]	; (8008564 <HAL_RCC_GetHCLKFreq+0x14>)
 8008556:	681b      	ldr	r3, [r3, #0]
}
 8008558:	4618      	mov	r0, r3
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	20000054 	.word	0x20000054

08008568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800856e:	f7ff ffef 	bl	8008550 <HAL_RCC_GetHCLKFreq>
 8008572:	4601      	mov	r1, r0
 8008574:	4b0b      	ldr	r3, [pc, #44]	; (80085a4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800857c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008580:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	fa92 f2a2 	rbit	r2, r2
 8008588:	603a      	str	r2, [r7, #0]
  return result;
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	fab2 f282 	clz	r2, r2
 8008590:	b2d2      	uxtb	r2, r2
 8008592:	40d3      	lsrs	r3, r2
 8008594:	4a04      	ldr	r2, [pc, #16]	; (80085a8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008596:	5cd3      	ldrb	r3, [r2, r3]
 8008598:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800859c:	4618      	mov	r0, r3
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	40021000 	.word	0x40021000
 80085a8:	0800d78c 	.word	0x0800d78c

080085ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80085b2:	f7ff ffcd 	bl	8008550 <HAL_RCC_GetHCLKFreq>
 80085b6:	4601      	mov	r1, r0
 80085b8:	4b0b      	ldr	r3, [pc, #44]	; (80085e8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80085c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80085c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	fa92 f2a2 	rbit	r2, r2
 80085cc:	603a      	str	r2, [r7, #0]
  return result;
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	fab2 f282 	clz	r2, r2
 80085d4:	b2d2      	uxtb	r2, r2
 80085d6:	40d3      	lsrs	r3, r2
 80085d8:	4a04      	ldr	r2, [pc, #16]	; (80085ec <HAL_RCC_GetPCLK2Freq+0x40>)
 80085da:	5cd3      	ldrb	r3, [r2, r3]
 80085dc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80085e0:	4618      	mov	r0, r3
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	40021000 	.word	0x40021000
 80085ec:	0800d78c 	.word	0x0800d78c

080085f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b092      	sub	sp, #72	; 0x48
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008600:	2300      	movs	r3, #0
 8008602:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 80d4 	beq.w	80087bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008614:	4b4e      	ldr	r3, [pc, #312]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10e      	bne.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008620:	4b4b      	ldr	r3, [pc, #300]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008622:	69db      	ldr	r3, [r3, #28]
 8008624:	4a4a      	ldr	r2, [pc, #296]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800862a:	61d3      	str	r3, [r2, #28]
 800862c:	4b48      	ldr	r3, [pc, #288]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008634:	60bb      	str	r3, [r7, #8]
 8008636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008638:	2301      	movs	r3, #1
 800863a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800863e:	4b45      	ldr	r3, [pc, #276]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008646:	2b00      	cmp	r3, #0
 8008648:	d118      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800864a:	4b42      	ldr	r3, [pc, #264]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a41      	ldr	r2, [pc, #260]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008654:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008656:	f7fd f935 	bl	80058c4 <HAL_GetTick>
 800865a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800865c:	e008      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800865e:	f7fd f931 	bl	80058c4 <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	2b64      	cmp	r3, #100	; 0x64
 800866a:	d901      	bls.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e13c      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008670:	4b38      	ldr	r3, [pc, #224]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0f0      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800867c:	4b34      	ldr	r3, [pc, #208]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008684:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 8084 	beq.w	8008796 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008696:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008698:	429a      	cmp	r2, r3
 800869a:	d07c      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800869c:	4b2c      	ldr	r3, [pc, #176]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ae:	fa93 f3a3 	rbit	r3, r3
 80086b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086b6:	fab3 f383 	clz	r3, r3
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	461a      	mov	r2, r3
 80086be:	4b26      	ldr	r3, [pc, #152]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	461a      	mov	r2, r3
 80086c6:	2301      	movs	r3, #1
 80086c8:	6013      	str	r3, [r2, #0]
 80086ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d2:	fa93 f3a3 	rbit	r3, r3
 80086d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80086d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086da:	fab3 f383 	clz	r3, r3
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	461a      	mov	r2, r3
 80086e2:	4b1d      	ldr	r3, [pc, #116]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	461a      	mov	r2, r3
 80086ea:	2300      	movs	r3, #0
 80086ec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80086ee:	4a18      	ldr	r2, [pc, #96]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80086f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d04b      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086fe:	f7fd f8e1 	bl	80058c4 <HAL_GetTick>
 8008702:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008704:	e00a      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008706:	f7fd f8dd 	bl	80058c4 <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	f241 3288 	movw	r2, #5000	; 0x1388
 8008714:	4293      	cmp	r3, r2
 8008716:	d901      	bls.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e0e6      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800871c:	2302      	movs	r3, #2
 800871e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	fa93 f3a3 	rbit	r3, r3
 8008726:	627b      	str	r3, [r7, #36]	; 0x24
 8008728:	2302      	movs	r3, #2
 800872a:	623b      	str	r3, [r7, #32]
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	fa93 f3a3 	rbit	r3, r3
 8008732:	61fb      	str	r3, [r7, #28]
  return result;
 8008734:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008736:	fab3 f383 	clz	r3, r3
 800873a:	b2db      	uxtb	r3, r3
 800873c:	095b      	lsrs	r3, r3, #5
 800873e:	b2db      	uxtb	r3, r3
 8008740:	f043 0302 	orr.w	r3, r3, #2
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b02      	cmp	r3, #2
 8008748:	d108      	bne.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800874a:	4b01      	ldr	r3, [pc, #4]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	e00d      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008750:	40021000 	.word	0x40021000
 8008754:	40007000 	.word	0x40007000
 8008758:	10908100 	.word	0x10908100
 800875c:	2302      	movs	r3, #2
 800875e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	fa93 f3a3 	rbit	r3, r3
 8008766:	617b      	str	r3, [r7, #20]
 8008768:	4b62      	ldr	r3, [pc, #392]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	2202      	movs	r2, #2
 800876e:	613a      	str	r2, [r7, #16]
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	fa92 f2a2 	rbit	r2, r2
 8008776:	60fa      	str	r2, [r7, #12]
  return result;
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	fab2 f282 	clz	r2, r2
 800877e:	b2d2      	uxtb	r2, r2
 8008780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008784:	b2d2      	uxtb	r2, r2
 8008786:	f002 021f 	and.w	r2, r2, #31
 800878a:	2101      	movs	r1, #1
 800878c:	fa01 f202 	lsl.w	r2, r1, r2
 8008790:	4013      	ands	r3, r2
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0b7      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008796:	4b57      	ldr	r3, [pc, #348]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	4954      	ldr	r1, [pc, #336]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80087a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d105      	bne.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087b0:	4b50      	ldr	r3, [pc, #320]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	4a4f      	ldr	r2, [pc, #316]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d008      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087c8:	4b4a      	ldr	r3, [pc, #296]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087cc:	f023 0203 	bic.w	r2, r3, #3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	4947      	ldr	r1, [pc, #284]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0320 	and.w	r3, r3, #32
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d008      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80087e6:	4b43      	ldr	r3, [pc, #268]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	f023 0210 	bic.w	r2, r3, #16
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	4940      	ldr	r1, [pc, #256]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008800:	2b00      	cmp	r3, #0
 8008802:	d008      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008804:	4b3b      	ldr	r3, [pc, #236]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008808:	f023 0220 	bic.w	r2, r3, #32
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	4938      	ldr	r1, [pc, #224]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008812:	4313      	orrs	r3, r2
 8008814:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d008      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008822:	4b34      	ldr	r3, [pc, #208]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008826:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	4931      	ldr	r1, [pc, #196]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008830:	4313      	orrs	r3, r2
 8008832:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800883c:	2b00      	cmp	r3, #0
 800883e:	d008      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008840:	4b2c      	ldr	r3, [pc, #176]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	4929      	ldr	r1, [pc, #164]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800884e:	4313      	orrs	r3, r2
 8008850:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885a:	2b00      	cmp	r3, #0
 800885c:	d008      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800885e:	4b25      	ldr	r3, [pc, #148]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	4922      	ldr	r1, [pc, #136]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800886c:	4313      	orrs	r3, r2
 800886e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d008      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800887c:	4b1d      	ldr	r3, [pc, #116]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800887e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008880:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a1b      	ldr	r3, [r3, #32]
 8008888:	491a      	ldr	r1, [pc, #104]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800888a:	4313      	orrs	r3, r2
 800888c:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d008      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800889a:	4b16      	ldr	r3, [pc, #88]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800889c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	4913      	ldr	r1, [pc, #76]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d008      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80088b8:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c4:	490b      	ldr	r1, [pc, #44]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d008      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80088d6:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088da:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e2:	4904      	ldr	r1, [pc, #16]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3748      	adds	r7, #72	; 0x48
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	40021000 	.word	0x40021000

080088f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e09d      	b.n	8008a46 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	2b00      	cmp	r3, #0
 8008910:	d108      	bne.n	8008924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800891a:	d009      	beq.n	8008930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	61da      	str	r2, [r3, #28]
 8008922:	e005      	b.n	8008930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d106      	bne.n	8008950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7fb fd94 	bl	8004478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008966:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008970:	d902      	bls.n	8008978 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008972:	2300      	movs	r3, #0
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	e002      	b.n	800897e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800897c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008986:	d007      	beq.n	8008998 <HAL_SPI_Init+0xa0>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008990:	d002      	beq.n	8008998 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089a8:	431a      	orrs	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	431a      	orrs	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	431a      	orrs	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089c6:	431a      	orrs	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089d0:	431a      	orrs	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089da:	ea42 0103 	orr.w	r1, r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	0c1b      	lsrs	r3, r3, #16
 80089f4:	f003 0204 	and.w	r2, r3, #4
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	f003 0310 	and.w	r3, r3, #16
 8008a00:	431a      	orrs	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a06:	f003 0308 	and.w	r3, r3, #8
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008a14:	ea42 0103 	orr.w	r1, r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	69da      	ldr	r2, [r3, #28]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b088      	sub	sp, #32
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d101      	bne.n	8008a70 <HAL_SPI_Transmit+0x22>
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	e15f      	b.n	8008d30 <HAL_SPI_Transmit+0x2e2>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a78:	f7fc ff24 	bl	80058c4 <HAL_GetTick>
 8008a7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008a7e:	88fb      	ldrh	r3, [r7, #6]
 8008a80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d002      	beq.n	8008a94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a92:	e148      	b.n	8008d26 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <HAL_SPI_Transmit+0x52>
 8008a9a:	88fb      	ldrh	r3, [r7, #6]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d102      	bne.n	8008aa6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008aa4:	e13f      	b.n	8008d26 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2203      	movs	r2, #3
 8008aaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	88fa      	ldrh	r2, [r7, #6]
 8008abe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	88fa      	ldrh	r2, [r7, #6]
 8008ac4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008af0:	d10f      	bne.n	8008b12 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1c:	2b40      	cmp	r3, #64	; 0x40
 8008b1e:	d007      	beq.n	8008b30 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b38:	d94f      	bls.n	8008bda <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d002      	beq.n	8008b48 <HAL_SPI_Transmit+0xfa>
 8008b42:	8afb      	ldrh	r3, [r7, #22]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d142      	bne.n	8008bce <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	881a      	ldrh	r2, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	1c9a      	adds	r2, r3, #2
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	3b01      	subs	r3, #1
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b6c:	e02f      	b.n	8008bce <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f003 0302 	and.w	r3, r3, #2
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d112      	bne.n	8008ba2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b80:	881a      	ldrh	r2, [r3, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8c:	1c9a      	adds	r2, r3, #2
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ba0:	e015      	b.n	8008bce <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ba2:	f7fc fe8f 	bl	80058c4 <HAL_GetTick>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d803      	bhi.n	8008bba <HAL_SPI_Transmit+0x16c>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb8:	d102      	bne.n	8008bc0 <HAL_SPI_Transmit+0x172>
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d106      	bne.n	8008bce <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008bcc:	e0ab      	b.n	8008d26 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1ca      	bne.n	8008b6e <HAL_SPI_Transmit+0x120>
 8008bd8:	e080      	b.n	8008cdc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <HAL_SPI_Transmit+0x19a>
 8008be2:	8afb      	ldrh	r3, [r7, #22]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d174      	bne.n	8008cd2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d912      	bls.n	8008c18 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf6:	881a      	ldrh	r2, [r3, #0]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c02:	1c9a      	adds	r2, r3, #2
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	3b02      	subs	r3, #2
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c16:	e05c      	b.n	8008cd2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	330c      	adds	r3, #12
 8008c22:	7812      	ldrb	r2, [r2, #0]
 8008c24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008c3e:	e048      	b.n	8008cd2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d12b      	bne.n	8008ca6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d912      	bls.n	8008c7e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5c:	881a      	ldrh	r2, [r3, #0]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c68:	1c9a      	adds	r2, r3, #2
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	3b02      	subs	r3, #2
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c7c:	e029      	b.n	8008cd2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	330c      	adds	r3, #12
 8008c88:	7812      	ldrb	r2, [r2, #0]
 8008c8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ca4:	e015      	b.n	8008cd2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ca6:	f7fc fe0d 	bl	80058c4 <HAL_GetTick>
 8008caa:	4602      	mov	r2, r0
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	683a      	ldr	r2, [r7, #0]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d803      	bhi.n	8008cbe <HAL_SPI_Transmit+0x270>
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbc:	d102      	bne.n	8008cc4 <HAL_SPI_Transmit+0x276>
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d106      	bne.n	8008cd2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008cd0:	e029      	b.n	8008d26 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1b1      	bne.n	8008c40 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cdc:	69ba      	ldr	r2, [r7, #24]
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 fbd7 	bl	8009494 <SPI_EndRxTxTransaction>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2220      	movs	r2, #32
 8008cf0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10a      	bne.n	8008d10 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	613b      	str	r3, [r7, #16]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	613b      	str	r3, [r7, #16]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	613b      	str	r3, [r7, #16]
 8008d0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	77fb      	strb	r3, [r7, #31]
 8008d1c:	e003      	b.n	8008d26 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3720      	adds	r7, #32
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	4613      	mov	r3, r2
 8008d44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d101      	bne.n	8008d58 <HAL_SPI_Transmit_DMA+0x20>
 8008d54:	2302      	movs	r3, #2
 8008d56:	e0d4      	b.n	8008f02 <HAL_SPI_Transmit_DMA+0x1ca>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d002      	beq.n	8008d72 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d70:	e0c2      	b.n	8008ef8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d002      	beq.n	8008d7e <HAL_SPI_Transmit_DMA+0x46>
 8008d78:	88fb      	ldrh	r3, [r7, #6]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d102      	bne.n	8008d84 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d82:	e0b9      	b.n	8008ef8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2203      	movs	r2, #3
 8008d88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	88fa      	ldrh	r2, [r7, #6]
 8008d9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	88fa      	ldrh	r2, [r7, #6]
 8008da2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dce:	d10f      	bne.n	8008df0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008dee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df4:	4a45      	ldr	r2, [pc, #276]	; (8008f0c <HAL_SPI_Transmit_DMA+0x1d4>)
 8008df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dfc:	4a44      	ldr	r2, [pc, #272]	; (8008f10 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008dfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e04:	4a43      	ldr	r2, [pc, #268]	; (8008f14 <HAL_SPI_Transmit_DMA+0x1dc>)
 8008e06:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e1e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e28:	d82d      	bhi.n	8008e86 <HAL_SPI_Transmit_DMA+0x14e>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e34:	d127      	bne.n	8008e86 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10f      	bne.n	8008e64 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e52:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	085b      	lsrs	r3, r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e62:	e010      	b.n	8008e86 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e72:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	085b      	lsrs	r3, r3, #1
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	3301      	adds	r3, #1
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8e:	4619      	mov	r1, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	330c      	adds	r3, #12
 8008e96:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e9c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008e9e:	f7fc fe99 	bl	8005bd4 <HAL_DMA_Start_IT>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d008      	beq.n	8008eba <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eac:	f043 0210 	orr.w	r2, r3, #16
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	75fb      	strb	r3, [r7, #23]

    goto error;
 8008eb8:	e01e      	b.n	8008ef8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec4:	2b40      	cmp	r3, #64	; 0x40
 8008ec6:	d007      	beq.n	8008ed8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ed6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f042 0220 	orr.w	r2, r2, #32
 8008ee6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f042 0202 	orr.w	r2, r2, #2
 8008ef6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	080091d3 	.word	0x080091d3
 8008f10:	0800912d 	.word	0x0800912d
 8008f14:	080091ef 	.word	0x080091ef

08008f18 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	099b      	lsrs	r3, r3, #6
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10f      	bne.n	8008f5c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	099b      	lsrs	r3, r3, #6
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d004      	beq.n	8008f5c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
    return;
 8008f5a:	e0d7      	b.n	800910c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	085b      	lsrs	r3, r3, #1
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <HAL_SPI_IRQHandler+0x66>
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	09db      	lsrs	r3, r3, #7
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d004      	beq.n	8008f7e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	4798      	blx	r3
    return;
 8008f7c:	e0c6      	b.n	800910c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	095b      	lsrs	r3, r3, #5
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10c      	bne.n	8008fa4 <HAL_SPI_IRQHandler+0x8c>
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	099b      	lsrs	r3, r3, #6
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d106      	bne.n	8008fa4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	0a1b      	lsrs	r3, r3, #8
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 80b4 	beq.w	800910c <HAL_SPI_IRQHandler+0x1f4>
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	095b      	lsrs	r3, r3, #5
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 80ad 	beq.w	800910c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	099b      	lsrs	r3, r3, #6
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d023      	beq.n	8009006 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d011      	beq.n	8008fee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fce:	f043 0204 	orr.w	r2, r3, #4
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	617b      	str	r3, [r7, #20]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	617b      	str	r3, [r7, #20]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	617b      	str	r3, [r7, #20]
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	e00b      	b.n	8009006 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fee:	2300      	movs	r3, #0
 8008ff0:	613b      	str	r3, [r7, #16]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	613b      	str	r3, [r7, #16]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	613b      	str	r3, [r7, #16]
 8009002:	693b      	ldr	r3, [r7, #16]
        return;
 8009004:	e082      	b.n	800910c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	095b      	lsrs	r3, r3, #5
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	2b00      	cmp	r3, #0
 8009010:	d014      	beq.n	800903c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009016:	f043 0201 	orr.w	r2, r3, #1
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800901e:	2300      	movs	r3, #0
 8009020:	60fb      	str	r3, [r7, #12]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	0a1b      	lsrs	r3, r3, #8
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00c      	beq.n	8009062 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800904c:	f043 0208 	orr.w	r2, r3, #8
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009054:	2300      	movs	r3, #0
 8009056:	60bb      	str	r3, [r7, #8]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	60bb      	str	r3, [r7, #8]
 8009060:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009066:	2b00      	cmp	r3, #0
 8009068:	d04f      	beq.n	800910a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009078:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	f003 0302 	and.w	r3, r3, #2
 8009088:	2b00      	cmp	r3, #0
 800908a:	d104      	bne.n	8009096 <HAL_SPI_IRQHandler+0x17e>
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d034      	beq.n	8009100 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 0203 	bic.w	r2, r2, #3
 80090a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d011      	beq.n	80090d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b2:	4a18      	ldr	r2, [pc, #96]	; (8009114 <HAL_SPI_IRQHandler+0x1fc>)
 80090b4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fc fe22 	bl	8005d04 <HAL_DMA_Abort_IT>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d005      	beq.n	80090d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d016      	beq.n	8009108 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090de:	4a0d      	ldr	r2, [pc, #52]	; (8009114 <HAL_SPI_IRQHandler+0x1fc>)
 80090e0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fc fe0c 	bl	8005d04 <HAL_DMA_Abort_IT>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00a      	beq.n	8009108 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80090fe:	e003      	b.n	8009108 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7fb fd93 	bl	8004c2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009106:	e000      	b.n	800910a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009108:	bf00      	nop
    return;
 800910a:	bf00      	nop
  }
}
 800910c:	3720      	adds	r7, #32
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	0800922f 	.word	0x0800922f

08009118 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009138:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800913a:	f7fc fbc3 	bl	80058c4 <HAL_GetTick>
 800913e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0320 	and.w	r3, r3, #32
 800914a:	2b20      	cmp	r3, #32
 800914c:	d03b      	beq.n	80091c6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0220 	bic.w	r2, r2, #32
 800915c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 0202 	bic.w	r2, r2, #2
 800916c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	2164      	movs	r1, #100	; 0x64
 8009172:	6978      	ldr	r0, [r7, #20]
 8009174:	f000 f98e 	bl	8009494 <SPI_EndRxTxTransaction>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d005      	beq.n	800918a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009182:	f043 0220 	orr.w	r2, r3, #32
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10a      	bne.n	80091a8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009192:	2300      	movs	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	60fb      	str	r3, [r7, #12]
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2200      	movs	r2, #0
 80091ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80091be:	6978      	ldr	r0, [r7, #20]
 80091c0:	f7fb fd34 	bl	8004c2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80091c4:	e002      	b.n	80091cc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80091c6:	6978      	ldr	r0, [r7, #20]
 80091c8:	f7fb fd46 	bl	8004c58 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091cc:	3718      	adds	r7, #24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091de:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f7ff ff99 	bl	8009118 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091e6:	bf00      	nop
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b084      	sub	sp, #16
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 0203 	bic.w	r2, r2, #3
 800920a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009210:	f043 0210 	orr.w	r2, r3, #16
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f7fb fd03 	bl	8004c2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009226:	bf00      	nop
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f7fb fcee 	bl	8004c2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009250:	bf00      	nop
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	4613      	mov	r3, r2
 8009266:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009268:	f7fc fb2c 	bl	80058c4 <HAL_GetTick>
 800926c:	4602      	mov	r2, r0
 800926e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009270:	1a9b      	subs	r3, r3, r2
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	4413      	add	r3, r2
 8009276:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009278:	f7fc fb24 	bl	80058c4 <HAL_GetTick>
 800927c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800927e:	4b39      	ldr	r3, [pc, #228]	; (8009364 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	015b      	lsls	r3, r3, #5
 8009284:	0d1b      	lsrs	r3, r3, #20
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	fb02 f303 	mul.w	r3, r2, r3
 800928c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800928e:	e054      	b.n	800933a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009296:	d050      	beq.n	800933a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009298:	f7fc fb14 	bl	80058c4 <HAL_GetTick>
 800929c:	4602      	mov	r2, r0
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	69fa      	ldr	r2, [r7, #28]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d902      	bls.n	80092ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d13d      	bne.n	800932a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092c6:	d111      	bne.n	80092ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092d0:	d004      	beq.n	80092dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092da:	d107      	bne.n	80092ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092f4:	d10f      	bne.n	8009316 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009304:	601a      	str	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009314:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e017      	b.n	800935a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d101      	bne.n	8009334 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	3b01      	subs	r3, #1
 8009338:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	4013      	ands	r3, r2
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	429a      	cmp	r2, r3
 8009348:	bf0c      	ite	eq
 800934a:	2301      	moveq	r3, #1
 800934c:	2300      	movne	r3, #0
 800934e:	b2db      	uxtb	r3, r3
 8009350:	461a      	mov	r2, r3
 8009352:	79fb      	ldrb	r3, [r7, #7]
 8009354:	429a      	cmp	r2, r3
 8009356:	d19b      	bne.n	8009290 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3720      	adds	r7, #32
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20000054 	.word	0x20000054

08009368 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b08a      	sub	sp, #40	; 0x28
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
 8009374:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800937a:	f7fc faa3 	bl	80058c4 <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	1a9b      	subs	r3, r3, r2
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	4413      	add	r3, r2
 8009388:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800938a:	f7fc fa9b 	bl	80058c4 <HAL_GetTick>
 800938e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	330c      	adds	r3, #12
 8009396:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009398:	4b3d      	ldr	r3, [pc, #244]	; (8009490 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	4613      	mov	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	00da      	lsls	r2, r3, #3
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	0d1b      	lsrs	r3, r3, #20
 80093a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093aa:	fb02 f303 	mul.w	r3, r2, r3
 80093ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80093b0:	e060      	b.n	8009474 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80093b8:	d107      	bne.n	80093ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d104      	bne.n	80093ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80093c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d0:	d050      	beq.n	8009474 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093d2:	f7fc fa77 	bl	80058c4 <HAL_GetTick>
 80093d6:	4602      	mov	r2, r0
 80093d8:	6a3b      	ldr	r3, [r7, #32]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093de:	429a      	cmp	r2, r3
 80093e0:	d902      	bls.n	80093e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d13d      	bne.n	8009464 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80093f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009400:	d111      	bne.n	8009426 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800940a:	d004      	beq.n	8009416 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009414:	d107      	bne.n	8009426 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009424:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800942e:	d10f      	bne.n	8009450 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800944e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e010      	b.n	8009486 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800946a:	2300      	movs	r3, #0
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	3b01      	subs	r3, #1
 8009472:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689a      	ldr	r2, [r3, #8]
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	4013      	ands	r3, r2
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	429a      	cmp	r2, r3
 8009482:	d196      	bne.n	80093b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3728      	adds	r7, #40	; 0x28
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	20000054 	.word	0x20000054

08009494 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af02      	add	r7, sp, #8
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f7ff ff5b 	bl	8009368 <SPI_WaitFifoStateUntilTimeout>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d007      	beq.n	80094c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094bc:	f043 0220 	orr.w	r2, r3, #32
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e027      	b.n	8009518 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	2200      	movs	r2, #0
 80094d0:	2180      	movs	r1, #128	; 0x80
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7ff fec0 	bl	8009258 <SPI_WaitFlagStateUntilTimeout>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d007      	beq.n	80094ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094e2:	f043 0220 	orr.w	r2, r3, #32
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e014      	b.n	8009518 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f7ff ff34 	bl	8009368 <SPI_WaitFifoStateUntilTimeout>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d007      	beq.n	8009516 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800950a:	f043 0220 	orr.w	r2, r3, #32
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009512:	2303      	movs	r3, #3
 8009514:	e000      	b.n	8009518 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d101      	bne.n	8009532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e040      	b.n	80095b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7fb f80e 	bl	8004564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2224      	movs	r2, #36	; 0x24
 800954c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0201 	bic.w	r2, r2, #1
 800955c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fbbc 	bl	8009cdc <UART_SetConfig>
 8009564:	4603      	mov	r3, r0
 8009566:	2b01      	cmp	r3, #1
 8009568:	d101      	bne.n	800956e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e022      	b.n	80095b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	2b00      	cmp	r3, #0
 8009574:	d002      	beq.n	800957c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fce6 	bl	8009f48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800958a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800959a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f042 0201 	orr.w	r2, r2, #1
 80095aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fd6d 	bl	800a08c <UART_CheckIdleState>
 80095b2:	4603      	mov	r3, r0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b08a      	sub	sp, #40	; 0x28
 80095c0:	af02      	add	r7, sp, #8
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	4613      	mov	r3, r2
 80095ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	d178      	bne.n	80096c6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <HAL_UART_Transmit+0x24>
 80095da:	88fb      	ldrh	r3, [r7, #6]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e071      	b.n	80096c8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2221      	movs	r2, #33	; 0x21
 80095f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095f2:	f7fc f967 	bl	80058c4 <HAL_GetTick>
 80095f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	88fa      	ldrh	r2, [r7, #6]
 80095fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	88fa      	ldrh	r2, [r7, #6]
 8009604:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009610:	d108      	bne.n	8009624 <HAL_UART_Transmit+0x68>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d104      	bne.n	8009624 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800961a:	2300      	movs	r3, #0
 800961c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	61bb      	str	r3, [r7, #24]
 8009622:	e003      	b.n	800962c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009628:	2300      	movs	r3, #0
 800962a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800962c:	e030      	b.n	8009690 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2200      	movs	r2, #0
 8009636:	2180      	movs	r1, #128	; 0x80
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 fdcf 	bl	800a1dc <UART_WaitOnFlagUntilTimeout>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d004      	beq.n	800964e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2220      	movs	r2, #32
 8009648:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e03c      	b.n	80096c8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10b      	bne.n	800966c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	881a      	ldrh	r2, [r3, #0]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009660:	b292      	uxth	r2, r2
 8009662:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	3302      	adds	r3, #2
 8009668:	61bb      	str	r3, [r7, #24]
 800966a:	e008      	b.n	800967e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	781a      	ldrb	r2, [r3, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	b292      	uxth	r2, r2
 8009676:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	3301      	adds	r3, #1
 800967c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009684:	b29b      	uxth	r3, r3
 8009686:	3b01      	subs	r3, #1
 8009688:	b29a      	uxth	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009696:	b29b      	uxth	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1c8      	bne.n	800962e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	2200      	movs	r2, #0
 80096a4:	2140      	movs	r1, #64	; 0x40
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f000 fd98 	bl	800a1dc <UART_WaitOnFlagUntilTimeout>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d004      	beq.n	80096bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2220      	movs	r2, #32
 80096b6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e005      	b.n	80096c8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2220      	movs	r2, #32
 80096c0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	e000      	b.n	80096c8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80096c6:	2302      	movs	r3, #2
  }
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3720      	adds	r7, #32
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b0ba      	sub	sp, #232	; 0xe8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80096fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80096fe:	4013      	ands	r3, r2
 8009700:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009708:	2b00      	cmp	r3, #0
 800970a:	d115      	bne.n	8009738 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800970c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009710:	f003 0320 	and.w	r3, r3, #32
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00f      	beq.n	8009738 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800971c:	f003 0320 	and.w	r3, r3, #32
 8009720:	2b00      	cmp	r3, #0
 8009722:	d009      	beq.n	8009738 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 82ab 	beq.w	8009c84 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	4798      	blx	r3
      }
      return;
 8009736:	e2a5      	b.n	8009c84 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 8117 	beq.w	8009970 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	2b00      	cmp	r3, #0
 800974c:	d106      	bne.n	800975c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800974e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009752:	4b85      	ldr	r3, [pc, #532]	; (8009968 <HAL_UART_IRQHandler+0x298>)
 8009754:	4013      	ands	r3, r2
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 810a 	beq.w	8009970 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800975c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	d011      	beq.n	800978c <HAL_UART_IRQHandler+0xbc>
 8009768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800976c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00b      	beq.n	800978c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2201      	movs	r2, #1
 800977a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009782:	f043 0201 	orr.w	r2, r3, #1
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800978c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009790:	f003 0302 	and.w	r3, r3, #2
 8009794:	2b00      	cmp	r3, #0
 8009796:	d011      	beq.n	80097bc <HAL_UART_IRQHandler+0xec>
 8009798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00b      	beq.n	80097bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2202      	movs	r2, #2
 80097aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097b2:	f043 0204 	orr.w	r2, r3, #4
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c0:	f003 0304 	and.w	r3, r3, #4
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d011      	beq.n	80097ec <HAL_UART_IRQHandler+0x11c>
 80097c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00b      	beq.n	80097ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2204      	movs	r2, #4
 80097da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097e2:	f043 0202 	orr.w	r2, r3, #2
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80097ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f0:	f003 0308 	and.w	r3, r3, #8
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d017      	beq.n	8009828 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80097f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097fc:	f003 0320 	and.w	r3, r3, #32
 8009800:	2b00      	cmp	r3, #0
 8009802:	d105      	bne.n	8009810 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009808:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00b      	beq.n	8009828 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2208      	movs	r2, #8
 8009816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800981e:	f043 0208 	orr.w	r2, r3, #8
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800982c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009830:	2b00      	cmp	r3, #0
 8009832:	d012      	beq.n	800985a <HAL_UART_IRQHandler+0x18a>
 8009834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00c      	beq.n	800985a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009848:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009850:	f043 0220 	orr.w	r2, r3, #32
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 8211 	beq.w	8009c88 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00d      	beq.n	800988e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009876:	f003 0320 	and.w	r3, r3, #32
 800987a:	2b00      	cmp	r3, #0
 800987c:	d007      	beq.n	800988e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009882:	2b00      	cmp	r3, #0
 8009884:	d003      	beq.n	800988e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009894:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a2:	2b40      	cmp	r3, #64	; 0x40
 80098a4:	d005      	beq.n	80098b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d04f      	beq.n	8009952 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fcf9 	bl	800a2aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c2:	2b40      	cmp	r3, #64	; 0x40
 80098c4:	d141      	bne.n	800994a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3308      	adds	r3, #8
 80098cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098d4:	e853 3f00 	ldrex	r3, [r3]
 80098d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80098dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3308      	adds	r3, #8
 80098ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80098f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80098f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80098fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009902:	e841 2300 	strex	r3, r2, [r1]
 8009906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800990a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1d9      	bne.n	80098c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009916:	2b00      	cmp	r3, #0
 8009918:	d013      	beq.n	8009942 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800991e:	4a13      	ldr	r2, [pc, #76]	; (800996c <HAL_UART_IRQHandler+0x29c>)
 8009920:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009926:	4618      	mov	r0, r3
 8009928:	f7fc f9ec 	bl	8005d04 <HAL_DMA_Abort_IT>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d017      	beq.n	8009962 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800993c:	4610      	mov	r0, r2
 800993e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009940:	e00f      	b.n	8009962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f9b4 	bl	8009cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009948:	e00b      	b.n	8009962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f9b0 	bl	8009cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009950:	e007      	b.n	8009962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f9ac 	bl	8009cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009960:	e192      	b.n	8009c88 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009962:	bf00      	nop
    return;
 8009964:	e190      	b.n	8009c88 <HAL_UART_IRQHandler+0x5b8>
 8009966:	bf00      	nop
 8009968:	04000120 	.word	0x04000120
 800996c:	0800a373 	.word	0x0800a373

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009974:	2b01      	cmp	r3, #1
 8009976:	f040 814b 	bne.w	8009c10 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800997a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800997e:	f003 0310 	and.w	r3, r3, #16
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 8144 	beq.w	8009c10 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800998c:	f003 0310 	and.w	r3, r3, #16
 8009990:	2b00      	cmp	r3, #0
 8009992:	f000 813d 	beq.w	8009c10 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2210      	movs	r2, #16
 800999c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a8:	2b40      	cmp	r3, #64	; 0x40
 80099aa:	f040 80b5 	bne.w	8009b18 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 8164 	beq.w	8009c8c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80099ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099ce:	429a      	cmp	r2, r3
 80099d0:	f080 815c 	bcs.w	8009c8c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	2b20      	cmp	r3, #32
 80099e6:	f000 8086 	beq.w	8009af6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099f6:	e853 3f00 	ldrex	r3, [r3]
 80099fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80099fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009a14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a18:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009a20:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a24:	e841 2300 	strex	r3, r2, [r1]
 8009a28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1da      	bne.n	80099ea <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a3e:	e853 3f00 	ldrex	r3, [r3]
 8009a42:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a46:	f023 0301 	bic.w	r3, r3, #1
 8009a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	3308      	adds	r3, #8
 8009a54:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a58:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a5c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a60:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a64:	e841 2300 	strex	r3, r2, [r1]
 8009a68:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1e1      	bne.n	8009a34 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3308      	adds	r3, #8
 8009a76:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a7a:	e853 3f00 	ldrex	r3, [r3]
 8009a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3308      	adds	r3, #8
 8009a90:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009a94:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009a96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a98:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a9c:	e841 2300 	strex	r3, r2, [r1]
 8009aa0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009aa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1e3      	bne.n	8009a70 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2220      	movs	r2, #32
 8009aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009abe:	e853 3f00 	ldrex	r3, [r3]
 8009ac2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ac6:	f023 0310 	bic.w	r3, r3, #16
 8009aca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ad8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ada:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ade:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ae0:	e841 2300 	strex	r3, r2, [r1]
 8009ae4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e4      	bne.n	8009ab6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fc f8ce 	bl	8005c92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2202      	movs	r2, #2
 8009afa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	4619      	mov	r1, r3
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f8d7 	bl	8009cc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b16:	e0b9      	b.n	8009c8c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 80ab 	beq.w	8009c90 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8009b3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 80a6 	beq.w	8009c90 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4c:	e853 3f00 	ldrex	r3, [r3]
 8009b50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	461a      	mov	r2, r3
 8009b62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b66:	647b      	str	r3, [r7, #68]	; 0x44
 8009b68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b6e:	e841 2300 	strex	r3, r2, [r1]
 8009b72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1e4      	bne.n	8009b44 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3308      	adds	r3, #8
 8009b80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	623b      	str	r3, [r7, #32]
   return(result);
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	f023 0301 	bic.w	r3, r3, #1
 8009b90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3308      	adds	r3, #8
 8009b9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009b9e:	633a      	str	r2, [r7, #48]	; 0x30
 8009ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ba6:	e841 2300 	strex	r3, r2, [r1]
 8009baa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1e3      	bne.n	8009b7a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	e853 3f00 	ldrex	r3, [r3]
 8009bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f023 0310 	bic.w	r3, r3, #16
 8009bda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	461a      	mov	r2, r3
 8009be4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009be8:	61fb      	str	r3, [r7, #28]
 8009bea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bec:	69b9      	ldr	r1, [r7, #24]
 8009bee:	69fa      	ldr	r2, [r7, #28]
 8009bf0:	e841 2300 	strex	r3, r2, [r1]
 8009bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e4      	bne.n	8009bc6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2202      	movs	r2, #2
 8009c00:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f85b 	bl	8009cc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c0e:	e03f      	b.n	8009c90 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00e      	beq.n	8009c3a <HAL_UART_IRQHandler+0x56a>
 8009c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d008      	beq.n	8009c3a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009c30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fbdd 	bl	800a3f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c38:	e02d      	b.n	8009c96 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00e      	beq.n	8009c64 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d008      	beq.n	8009c64 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d01c      	beq.n	8009c94 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	4798      	blx	r3
    }
    return;
 8009c62:	e017      	b.n	8009c94 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d012      	beq.n	8009c96 <HAL_UART_IRQHandler+0x5c6>
 8009c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00c      	beq.n	8009c96 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fb8e 	bl	800a39e <UART_EndTransmit_IT>
    return;
 8009c82:	e008      	b.n	8009c96 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009c84:	bf00      	nop
 8009c86:	e006      	b.n	8009c96 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009c88:	bf00      	nop
 8009c8a:	e004      	b.n	8009c96 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009c8c:	bf00      	nop
 8009c8e:	e002      	b.n	8009c96 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009c90:	bf00      	nop
 8009c92:	e000      	b.n	8009c96 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009c94:	bf00      	nop
  }

}
 8009c96:	37e8      	adds	r7, #232	; 0xe8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689a      	ldr	r2, [r3, #8]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	431a      	orrs	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	69db      	ldr	r3, [r3, #28]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	4b8a      	ldr	r3, [pc, #552]	; (8009f30 <UART_SetConfig+0x254>)
 8009d08:	4013      	ands	r3, r2
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	6812      	ldr	r2, [r2, #0]
 8009d0e:	6979      	ldr	r1, [r7, #20]
 8009d10:	430b      	orrs	r3, r1
 8009d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	68da      	ldr	r2, [r3, #12]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	697a      	ldr	r2, [r7, #20]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	697a      	ldr	r2, [r7, #20]
 8009d4a:	430a      	orrs	r2, r1
 8009d4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a78      	ldr	r2, [pc, #480]	; (8009f34 <UART_SetConfig+0x258>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d120      	bne.n	8009d9a <UART_SetConfig+0xbe>
 8009d58:	4b77      	ldr	r3, [pc, #476]	; (8009f38 <UART_SetConfig+0x25c>)
 8009d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5c:	f003 0303 	and.w	r3, r3, #3
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d817      	bhi.n	8009d94 <UART_SetConfig+0xb8>
 8009d64:	a201      	add	r2, pc, #4	; (adr r2, 8009d6c <UART_SetConfig+0x90>)
 8009d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6a:	bf00      	nop
 8009d6c:	08009d7d 	.word	0x08009d7d
 8009d70:	08009d89 	.word	0x08009d89
 8009d74:	08009d8f 	.word	0x08009d8f
 8009d78:	08009d83 	.word	0x08009d83
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	77fb      	strb	r3, [r7, #31]
 8009d80:	e01d      	b.n	8009dbe <UART_SetConfig+0xe2>
 8009d82:	2302      	movs	r3, #2
 8009d84:	77fb      	strb	r3, [r7, #31]
 8009d86:	e01a      	b.n	8009dbe <UART_SetConfig+0xe2>
 8009d88:	2304      	movs	r3, #4
 8009d8a:	77fb      	strb	r3, [r7, #31]
 8009d8c:	e017      	b.n	8009dbe <UART_SetConfig+0xe2>
 8009d8e:	2308      	movs	r3, #8
 8009d90:	77fb      	strb	r3, [r7, #31]
 8009d92:	e014      	b.n	8009dbe <UART_SetConfig+0xe2>
 8009d94:	2310      	movs	r3, #16
 8009d96:	77fb      	strb	r3, [r7, #31]
 8009d98:	e011      	b.n	8009dbe <UART_SetConfig+0xe2>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a67      	ldr	r2, [pc, #412]	; (8009f3c <UART_SetConfig+0x260>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d102      	bne.n	8009daa <UART_SetConfig+0xce>
 8009da4:	2300      	movs	r3, #0
 8009da6:	77fb      	strb	r3, [r7, #31]
 8009da8:	e009      	b.n	8009dbe <UART_SetConfig+0xe2>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a64      	ldr	r2, [pc, #400]	; (8009f40 <UART_SetConfig+0x264>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d102      	bne.n	8009dba <UART_SetConfig+0xde>
 8009db4:	2300      	movs	r3, #0
 8009db6:	77fb      	strb	r3, [r7, #31]
 8009db8:	e001      	b.n	8009dbe <UART_SetConfig+0xe2>
 8009dba:	2310      	movs	r3, #16
 8009dbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dc6:	d15a      	bne.n	8009e7e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8009dc8:	7ffb      	ldrb	r3, [r7, #31]
 8009dca:	2b08      	cmp	r3, #8
 8009dcc:	d827      	bhi.n	8009e1e <UART_SetConfig+0x142>
 8009dce:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <UART_SetConfig+0xf8>)
 8009dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd4:	08009df9 	.word	0x08009df9
 8009dd8:	08009e01 	.word	0x08009e01
 8009ddc:	08009e09 	.word	0x08009e09
 8009de0:	08009e1f 	.word	0x08009e1f
 8009de4:	08009e0f 	.word	0x08009e0f
 8009de8:	08009e1f 	.word	0x08009e1f
 8009dec:	08009e1f 	.word	0x08009e1f
 8009df0:	08009e1f 	.word	0x08009e1f
 8009df4:	08009e17 	.word	0x08009e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009df8:	f7fe fbb6 	bl	8008568 <HAL_RCC_GetPCLK1Freq>
 8009dfc:	61b8      	str	r0, [r7, #24]
        break;
 8009dfe:	e013      	b.n	8009e28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e00:	f7fe fbd4 	bl	80085ac <HAL_RCC_GetPCLK2Freq>
 8009e04:	61b8      	str	r0, [r7, #24]
        break;
 8009e06:	e00f      	b.n	8009e28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e08:	4b4e      	ldr	r3, [pc, #312]	; (8009f44 <UART_SetConfig+0x268>)
 8009e0a:	61bb      	str	r3, [r7, #24]
        break;
 8009e0c:	e00c      	b.n	8009e28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e0e:	f7fe fb35 	bl	800847c <HAL_RCC_GetSysClockFreq>
 8009e12:	61b8      	str	r0, [r7, #24]
        break;
 8009e14:	e008      	b.n	8009e28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e1a:	61bb      	str	r3, [r7, #24]
        break;
 8009e1c:	e004      	b.n	8009e28 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	77bb      	strb	r3, [r7, #30]
        break;
 8009e26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d074      	beq.n	8009f18 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	005a      	lsls	r2, r3, #1
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	085b      	lsrs	r3, r3, #1
 8009e38:	441a      	add	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	2b0f      	cmp	r3, #15
 8009e48:	d916      	bls.n	8009e78 <UART_SetConfig+0x19c>
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e50:	d212      	bcs.n	8009e78 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	f023 030f 	bic.w	r3, r3, #15
 8009e5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	085b      	lsrs	r3, r3, #1
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	89fb      	ldrh	r3, [r7, #14]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	89fa      	ldrh	r2, [r7, #14]
 8009e74:	60da      	str	r2, [r3, #12]
 8009e76:	e04f      	b.n	8009f18 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	77bb      	strb	r3, [r7, #30]
 8009e7c:	e04c      	b.n	8009f18 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e7e:	7ffb      	ldrb	r3, [r7, #31]
 8009e80:	2b08      	cmp	r3, #8
 8009e82:	d828      	bhi.n	8009ed6 <UART_SetConfig+0x1fa>
 8009e84:	a201      	add	r2, pc, #4	; (adr r2, 8009e8c <UART_SetConfig+0x1b0>)
 8009e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8a:	bf00      	nop
 8009e8c:	08009eb1 	.word	0x08009eb1
 8009e90:	08009eb9 	.word	0x08009eb9
 8009e94:	08009ec1 	.word	0x08009ec1
 8009e98:	08009ed7 	.word	0x08009ed7
 8009e9c:	08009ec7 	.word	0x08009ec7
 8009ea0:	08009ed7 	.word	0x08009ed7
 8009ea4:	08009ed7 	.word	0x08009ed7
 8009ea8:	08009ed7 	.word	0x08009ed7
 8009eac:	08009ecf 	.word	0x08009ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eb0:	f7fe fb5a 	bl	8008568 <HAL_RCC_GetPCLK1Freq>
 8009eb4:	61b8      	str	r0, [r7, #24]
        break;
 8009eb6:	e013      	b.n	8009ee0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009eb8:	f7fe fb78 	bl	80085ac <HAL_RCC_GetPCLK2Freq>
 8009ebc:	61b8      	str	r0, [r7, #24]
        break;
 8009ebe:	e00f      	b.n	8009ee0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ec0:	4b20      	ldr	r3, [pc, #128]	; (8009f44 <UART_SetConfig+0x268>)
 8009ec2:	61bb      	str	r3, [r7, #24]
        break;
 8009ec4:	e00c      	b.n	8009ee0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ec6:	f7fe fad9 	bl	800847c <HAL_RCC_GetSysClockFreq>
 8009eca:	61b8      	str	r0, [r7, #24]
        break;
 8009ecc:	e008      	b.n	8009ee0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ed2:	61bb      	str	r3, [r7, #24]
        break;
 8009ed4:	e004      	b.n	8009ee0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	77bb      	strb	r3, [r7, #30]
        break;
 8009ede:	bf00      	nop
    }

    if (pclk != 0U)
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d018      	beq.n	8009f18 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	085a      	lsrs	r2, r3, #1
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	441a      	add	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	2b0f      	cmp	r3, #15
 8009efe:	d909      	bls.n	8009f14 <UART_SetConfig+0x238>
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f06:	d205      	bcs.n	8009f14 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	60da      	str	r2, [r3, #12]
 8009f12:	e001      	b.n	8009f18 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009f24:	7fbb      	ldrb	r3, [r7, #30]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3720      	adds	r7, #32
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	efff69f3 	.word	0xefff69f3
 8009f34:	40013800 	.word	0x40013800
 8009f38:	40021000 	.word	0x40021000
 8009f3c:	40004400 	.word	0x40004400
 8009f40:	40004800 	.word	0x40004800
 8009f44:	007a1200 	.word	0x007a1200

08009f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f54:	f003 0301 	and.w	r3, r3, #1
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00a      	beq.n	8009f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f76:	f003 0302 	and.w	r3, r3, #2
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00a      	beq.n	8009f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	430a      	orrs	r2, r1
 8009f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f98:	f003 0304 	and.w	r3, r3, #4
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00a      	beq.n	8009fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fba:	f003 0308 	and.w	r3, r3, #8
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00a      	beq.n	8009fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fdc:	f003 0310 	and.w	r3, r3, #16
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00a      	beq.n	8009ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	f003 0320 	and.w	r3, r3, #32
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00a      	beq.n	800a01c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	430a      	orrs	r2, r1
 800a01a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a024:	2b00      	cmp	r3, #0
 800a026:	d01a      	beq.n	800a05e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	430a      	orrs	r2, r1
 800a03c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a046:	d10a      	bne.n	800a05e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	430a      	orrs	r2, r1
 800a05c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00a      	beq.n	800a080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	430a      	orrs	r2, r1
 800a07e:	605a      	str	r2, [r3, #4]
  }
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b098      	sub	sp, #96	; 0x60
 800a090:	af02      	add	r7, sp, #8
 800a092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a09c:	f7fb fc12 	bl	80058c4 <HAL_GetTick>
 800a0a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0308 	and.w	r3, r3, #8
 800a0ac:	2b08      	cmp	r3, #8
 800a0ae:	d12e      	bne.n	800a10e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f88c 	bl	800a1dc <UART_WaitOnFlagUntilTimeout>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d021      	beq.n	800a10e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d2:	e853 3f00 	ldrex	r3, [r3]
 800a0d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0de:	653b      	str	r3, [r7, #80]	; 0x50
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0e8:	647b      	str	r3, [r7, #68]	; 0x44
 800a0ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0f0:	e841 2300 	strex	r3, r2, [r1]
 800a0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1e6      	bne.n	800a0ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2220      	movs	r2, #32
 800a100:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e062      	b.n	800a1d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0304 	and.w	r3, r3, #4
 800a118:	2b04      	cmp	r3, #4
 800a11a:	d149      	bne.n	800a1b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a11c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a124:	2200      	movs	r2, #0
 800a126:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f856 	bl	800a1dc <UART_WaitOnFlagUntilTimeout>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d03c      	beq.n	800a1b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13e:	e853 3f00 	ldrex	r3, [r3]
 800a142:	623b      	str	r3, [r7, #32]
   return(result);
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a14a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a154:	633b      	str	r3, [r7, #48]	; 0x30
 800a156:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a158:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a15a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a15c:	e841 2300 	strex	r3, r2, [r1]
 800a160:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1e6      	bne.n	800a136 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3308      	adds	r3, #8
 800a16e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	e853 3f00 	ldrex	r3, [r3]
 800a176:	60fb      	str	r3, [r7, #12]
   return(result);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f023 0301 	bic.w	r3, r3, #1
 800a17e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	3308      	adds	r3, #8
 800a186:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a188:	61fa      	str	r2, [r7, #28]
 800a18a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18c:	69b9      	ldr	r1, [r7, #24]
 800a18e:	69fa      	ldr	r2, [r7, #28]
 800a190:	e841 2300 	strex	r3, r2, [r1]
 800a194:	617b      	str	r3, [r7, #20]
   return(result);
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1e5      	bne.n	800a168 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2220      	movs	r2, #32
 800a1a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e011      	b.n	800a1d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2220      	movs	r2, #32
 800a1ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3758      	adds	r7, #88	; 0x58
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	603b      	str	r3, [r7, #0]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1ec:	e049      	b.n	800a282 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f4:	d045      	beq.n	800a282 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1f6:	f7fb fb65 	bl	80058c4 <HAL_GetTick>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	69ba      	ldr	r2, [r7, #24]
 800a202:	429a      	cmp	r2, r3
 800a204:	d302      	bcc.n	800a20c <UART_WaitOnFlagUntilTimeout+0x30>
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e048      	b.n	800a2a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0304 	and.w	r3, r3, #4
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d031      	beq.n	800a282 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	f003 0308 	and.w	r3, r3, #8
 800a228:	2b08      	cmp	r3, #8
 800a22a:	d110      	bne.n	800a24e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2208      	movs	r2, #8
 800a232:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f838 	bl	800a2aa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2208      	movs	r2, #8
 800a23e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e029      	b.n	800a2a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	69db      	ldr	r3, [r3, #28]
 800a254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a25c:	d111      	bne.n	800a282 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a266:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f000 f81e 	bl	800a2aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2220      	movs	r2, #32
 800a272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	e00f      	b.n	800a2a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	69da      	ldr	r2, [r3, #28]
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	4013      	ands	r3, r2
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	429a      	cmp	r2, r3
 800a290:	bf0c      	ite	eq
 800a292:	2301      	moveq	r3, #1
 800a294:	2300      	movne	r3, #0
 800a296:	b2db      	uxtb	r3, r3
 800a298:	461a      	mov	r2, r3
 800a29a:	79fb      	ldrb	r3, [r7, #7]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d0a6      	beq.n	800a1ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b095      	sub	sp, #84	; 0x54
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ba:	e853 3f00 	ldrex	r3, [r3]
 800a2be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2d0:	643b      	str	r3, [r7, #64]	; 0x40
 800a2d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2d8:	e841 2300 	strex	r3, r2, [r1]
 800a2dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e6      	bne.n	800a2b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	e853 3f00 	ldrex	r3, [r3]
 800a2f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	f023 0301 	bic.w	r3, r3, #1
 800a2fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3308      	adds	r3, #8
 800a302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a304:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a30a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a30c:	e841 2300 	strex	r3, r2, [r1]
 800a310:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e5      	bne.n	800a2e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d118      	bne.n	800a352 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	e853 3f00 	ldrex	r3, [r3]
 800a32c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	f023 0310 	bic.w	r3, r3, #16
 800a334:	647b      	str	r3, [r7, #68]	; 0x44
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	461a      	mov	r2, r3
 800a33c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a33e:	61bb      	str	r3, [r7, #24]
 800a340:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a342:	6979      	ldr	r1, [r7, #20]
 800a344:	69ba      	ldr	r2, [r7, #24]
 800a346:	e841 2300 	strex	r3, r2, [r1]
 800a34a:	613b      	str	r3, [r7, #16]
   return(result);
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1e6      	bne.n	800a320 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2220      	movs	r2, #32
 800a356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a366:	bf00      	nop
 800a368:	3754      	adds	r7, #84	; 0x54
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f7ff fc8d 	bl	8009cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a396:	bf00      	nop
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b088      	sub	sp, #32
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	e853 3f00 	ldrex	r3, [r3]
 800a3b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3ba:	61fb      	str	r3, [r7, #28]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	61bb      	str	r3, [r7, #24]
 800a3c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c8:	6979      	ldr	r1, [r7, #20]
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	e841 2300 	strex	r3, r2, [r1]
 800a3d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e6      	bne.n	800a3a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2220      	movs	r2, #32
 800a3dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff fc59 	bl	8009c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3ea:	bf00      	nop
 800a3ec:	3720      	adds	r7, #32
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3fa:	bf00      	nop
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <atoi>:
 800a406:	220a      	movs	r2, #10
 800a408:	2100      	movs	r1, #0
 800a40a:	f000 ba05 	b.w	800a818 <strtol>
	...

0800a410 <__errno>:
 800a410:	4b01      	ldr	r3, [pc, #4]	; (800a418 <__errno+0x8>)
 800a412:	6818      	ldr	r0, [r3, #0]
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	20000068 	.word	0x20000068

0800a41c <__libc_init_array>:
 800a41c:	b570      	push	{r4, r5, r6, lr}
 800a41e:	4d0d      	ldr	r5, [pc, #52]	; (800a454 <__libc_init_array+0x38>)
 800a420:	4c0d      	ldr	r4, [pc, #52]	; (800a458 <__libc_init_array+0x3c>)
 800a422:	1b64      	subs	r4, r4, r5
 800a424:	10a4      	asrs	r4, r4, #2
 800a426:	2600      	movs	r6, #0
 800a428:	42a6      	cmp	r6, r4
 800a42a:	d109      	bne.n	800a440 <__libc_init_array+0x24>
 800a42c:	4d0b      	ldr	r5, [pc, #44]	; (800a45c <__libc_init_array+0x40>)
 800a42e:	4c0c      	ldr	r4, [pc, #48]	; (800a460 <__libc_init_array+0x44>)
 800a430:	f001 fbb2 	bl	800bb98 <_init>
 800a434:	1b64      	subs	r4, r4, r5
 800a436:	10a4      	asrs	r4, r4, #2
 800a438:	2600      	movs	r6, #0
 800a43a:	42a6      	cmp	r6, r4
 800a43c:	d105      	bne.n	800a44a <__libc_init_array+0x2e>
 800a43e:	bd70      	pop	{r4, r5, r6, pc}
 800a440:	f855 3b04 	ldr.w	r3, [r5], #4
 800a444:	4798      	blx	r3
 800a446:	3601      	adds	r6, #1
 800a448:	e7ee      	b.n	800a428 <__libc_init_array+0xc>
 800a44a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a44e:	4798      	blx	r3
 800a450:	3601      	adds	r6, #1
 800a452:	e7f2      	b.n	800a43a <__libc_init_array+0x1e>
 800a454:	0800d9fc 	.word	0x0800d9fc
 800a458:	0800d9fc 	.word	0x0800d9fc
 800a45c:	0800d9fc 	.word	0x0800d9fc
 800a460:	0800da00 	.word	0x0800da00

0800a464 <memset>:
 800a464:	4402      	add	r2, r0
 800a466:	4603      	mov	r3, r0
 800a468:	4293      	cmp	r3, r2
 800a46a:	d100      	bne.n	800a46e <memset+0xa>
 800a46c:	4770      	bx	lr
 800a46e:	f803 1b01 	strb.w	r1, [r3], #1
 800a472:	e7f9      	b.n	800a468 <memset+0x4>

0800a474 <iprintf>:
 800a474:	b40f      	push	{r0, r1, r2, r3}
 800a476:	4b0a      	ldr	r3, [pc, #40]	; (800a4a0 <iprintf+0x2c>)
 800a478:	b513      	push	{r0, r1, r4, lr}
 800a47a:	681c      	ldr	r4, [r3, #0]
 800a47c:	b124      	cbz	r4, 800a488 <iprintf+0x14>
 800a47e:	69a3      	ldr	r3, [r4, #24]
 800a480:	b913      	cbnz	r3, 800a488 <iprintf+0x14>
 800a482:	4620      	mov	r0, r4
 800a484:	f000 fbca 	bl	800ac1c <__sinit>
 800a488:	ab05      	add	r3, sp, #20
 800a48a:	9a04      	ldr	r2, [sp, #16]
 800a48c:	68a1      	ldr	r1, [r4, #8]
 800a48e:	9301      	str	r3, [sp, #4]
 800a490:	4620      	mov	r0, r4
 800a492:	f000 ff49 	bl	800b328 <_vfiprintf_r>
 800a496:	b002      	add	sp, #8
 800a498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a49c:	b004      	add	sp, #16
 800a49e:	4770      	bx	lr
 800a4a0:	20000068 	.word	0x20000068

0800a4a4 <_puts_r>:
 800a4a4:	b570      	push	{r4, r5, r6, lr}
 800a4a6:	460e      	mov	r6, r1
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	b118      	cbz	r0, 800a4b4 <_puts_r+0x10>
 800a4ac:	6983      	ldr	r3, [r0, #24]
 800a4ae:	b90b      	cbnz	r3, 800a4b4 <_puts_r+0x10>
 800a4b0:	f000 fbb4 	bl	800ac1c <__sinit>
 800a4b4:	69ab      	ldr	r3, [r5, #24]
 800a4b6:	68ac      	ldr	r4, [r5, #8]
 800a4b8:	b913      	cbnz	r3, 800a4c0 <_puts_r+0x1c>
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	f000 fbae 	bl	800ac1c <__sinit>
 800a4c0:	4b2c      	ldr	r3, [pc, #176]	; (800a574 <_puts_r+0xd0>)
 800a4c2:	429c      	cmp	r4, r3
 800a4c4:	d120      	bne.n	800a508 <_puts_r+0x64>
 800a4c6:	686c      	ldr	r4, [r5, #4]
 800a4c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4ca:	07db      	lsls	r3, r3, #31
 800a4cc:	d405      	bmi.n	800a4da <_puts_r+0x36>
 800a4ce:	89a3      	ldrh	r3, [r4, #12]
 800a4d0:	0598      	lsls	r0, r3, #22
 800a4d2:	d402      	bmi.n	800a4da <_puts_r+0x36>
 800a4d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4d6:	f000 fc51 	bl	800ad7c <__retarget_lock_acquire_recursive>
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	0719      	lsls	r1, r3, #28
 800a4de:	d51d      	bpl.n	800a51c <_puts_r+0x78>
 800a4e0:	6923      	ldr	r3, [r4, #16]
 800a4e2:	b1db      	cbz	r3, 800a51c <_puts_r+0x78>
 800a4e4:	3e01      	subs	r6, #1
 800a4e6:	68a3      	ldr	r3, [r4, #8]
 800a4e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	60a3      	str	r3, [r4, #8]
 800a4f0:	bb39      	cbnz	r1, 800a542 <_puts_r+0x9e>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	da38      	bge.n	800a568 <_puts_r+0xc4>
 800a4f6:	4622      	mov	r2, r4
 800a4f8:	210a      	movs	r1, #10
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	f000 f996 	bl	800a82c <__swbuf_r>
 800a500:	3001      	adds	r0, #1
 800a502:	d011      	beq.n	800a528 <_puts_r+0x84>
 800a504:	250a      	movs	r5, #10
 800a506:	e011      	b.n	800a52c <_puts_r+0x88>
 800a508:	4b1b      	ldr	r3, [pc, #108]	; (800a578 <_puts_r+0xd4>)
 800a50a:	429c      	cmp	r4, r3
 800a50c:	d101      	bne.n	800a512 <_puts_r+0x6e>
 800a50e:	68ac      	ldr	r4, [r5, #8]
 800a510:	e7da      	b.n	800a4c8 <_puts_r+0x24>
 800a512:	4b1a      	ldr	r3, [pc, #104]	; (800a57c <_puts_r+0xd8>)
 800a514:	429c      	cmp	r4, r3
 800a516:	bf08      	it	eq
 800a518:	68ec      	ldreq	r4, [r5, #12]
 800a51a:	e7d5      	b.n	800a4c8 <_puts_r+0x24>
 800a51c:	4621      	mov	r1, r4
 800a51e:	4628      	mov	r0, r5
 800a520:	f000 f9d6 	bl	800a8d0 <__swsetup_r>
 800a524:	2800      	cmp	r0, #0
 800a526:	d0dd      	beq.n	800a4e4 <_puts_r+0x40>
 800a528:	f04f 35ff 	mov.w	r5, #4294967295
 800a52c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a52e:	07da      	lsls	r2, r3, #31
 800a530:	d405      	bmi.n	800a53e <_puts_r+0x9a>
 800a532:	89a3      	ldrh	r3, [r4, #12]
 800a534:	059b      	lsls	r3, r3, #22
 800a536:	d402      	bmi.n	800a53e <_puts_r+0x9a>
 800a538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a53a:	f000 fc20 	bl	800ad7e <__retarget_lock_release_recursive>
 800a53e:	4628      	mov	r0, r5
 800a540:	bd70      	pop	{r4, r5, r6, pc}
 800a542:	2b00      	cmp	r3, #0
 800a544:	da04      	bge.n	800a550 <_puts_r+0xac>
 800a546:	69a2      	ldr	r2, [r4, #24]
 800a548:	429a      	cmp	r2, r3
 800a54a:	dc06      	bgt.n	800a55a <_puts_r+0xb6>
 800a54c:	290a      	cmp	r1, #10
 800a54e:	d004      	beq.n	800a55a <_puts_r+0xb6>
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	6022      	str	r2, [r4, #0]
 800a556:	7019      	strb	r1, [r3, #0]
 800a558:	e7c5      	b.n	800a4e6 <_puts_r+0x42>
 800a55a:	4622      	mov	r2, r4
 800a55c:	4628      	mov	r0, r5
 800a55e:	f000 f965 	bl	800a82c <__swbuf_r>
 800a562:	3001      	adds	r0, #1
 800a564:	d1bf      	bne.n	800a4e6 <_puts_r+0x42>
 800a566:	e7df      	b.n	800a528 <_puts_r+0x84>
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	250a      	movs	r5, #10
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	6022      	str	r2, [r4, #0]
 800a570:	701d      	strb	r5, [r3, #0]
 800a572:	e7db      	b.n	800a52c <_puts_r+0x88>
 800a574:	0800d988 	.word	0x0800d988
 800a578:	0800d9a8 	.word	0x0800d9a8
 800a57c:	0800d968 	.word	0x0800d968

0800a580 <puts>:
 800a580:	4b02      	ldr	r3, [pc, #8]	; (800a58c <puts+0xc>)
 800a582:	4601      	mov	r1, r0
 800a584:	6818      	ldr	r0, [r3, #0]
 800a586:	f7ff bf8d 	b.w	800a4a4 <_puts_r>
 800a58a:	bf00      	nop
 800a58c:	20000068 	.word	0x20000068

0800a590 <srand>:
 800a590:	b538      	push	{r3, r4, r5, lr}
 800a592:	4b10      	ldr	r3, [pc, #64]	; (800a5d4 <srand+0x44>)
 800a594:	681d      	ldr	r5, [r3, #0]
 800a596:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a598:	4604      	mov	r4, r0
 800a59a:	b9b3      	cbnz	r3, 800a5ca <srand+0x3a>
 800a59c:	2018      	movs	r0, #24
 800a59e:	f000 fc55 	bl	800ae4c <malloc>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	63a8      	str	r0, [r5, #56]	; 0x38
 800a5a6:	b920      	cbnz	r0, 800a5b2 <srand+0x22>
 800a5a8:	4b0b      	ldr	r3, [pc, #44]	; (800a5d8 <srand+0x48>)
 800a5aa:	480c      	ldr	r0, [pc, #48]	; (800a5dc <srand+0x4c>)
 800a5ac:	2142      	movs	r1, #66	; 0x42
 800a5ae:	f000 f9fd 	bl	800a9ac <__assert_func>
 800a5b2:	490b      	ldr	r1, [pc, #44]	; (800a5e0 <srand+0x50>)
 800a5b4:	4b0b      	ldr	r3, [pc, #44]	; (800a5e4 <srand+0x54>)
 800a5b6:	e9c0 1300 	strd	r1, r3, [r0]
 800a5ba:	4b0b      	ldr	r3, [pc, #44]	; (800a5e8 <srand+0x58>)
 800a5bc:	6083      	str	r3, [r0, #8]
 800a5be:	230b      	movs	r3, #11
 800a5c0:	8183      	strh	r3, [r0, #12]
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	2001      	movs	r0, #1
 800a5c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a5ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	611c      	str	r4, [r3, #16]
 800a5d0:	615a      	str	r2, [r3, #20]
 800a5d2:	bd38      	pop	{r3, r4, r5, pc}
 800a5d4:	20000068 	.word	0x20000068
 800a5d8:	0800d7b8 	.word	0x0800d7b8
 800a5dc:	0800d7cf 	.word	0x0800d7cf
 800a5e0:	abcd330e 	.word	0xabcd330e
 800a5e4:	e66d1234 	.word	0xe66d1234
 800a5e8:	0005deec 	.word	0x0005deec

0800a5ec <rand>:
 800a5ec:	4b16      	ldr	r3, [pc, #88]	; (800a648 <rand+0x5c>)
 800a5ee:	b510      	push	{r4, lr}
 800a5f0:	681c      	ldr	r4, [r3, #0]
 800a5f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5f4:	b9b3      	cbnz	r3, 800a624 <rand+0x38>
 800a5f6:	2018      	movs	r0, #24
 800a5f8:	f000 fc28 	bl	800ae4c <malloc>
 800a5fc:	63a0      	str	r0, [r4, #56]	; 0x38
 800a5fe:	b928      	cbnz	r0, 800a60c <rand+0x20>
 800a600:	4602      	mov	r2, r0
 800a602:	4b12      	ldr	r3, [pc, #72]	; (800a64c <rand+0x60>)
 800a604:	4812      	ldr	r0, [pc, #72]	; (800a650 <rand+0x64>)
 800a606:	214e      	movs	r1, #78	; 0x4e
 800a608:	f000 f9d0 	bl	800a9ac <__assert_func>
 800a60c:	4a11      	ldr	r2, [pc, #68]	; (800a654 <rand+0x68>)
 800a60e:	4b12      	ldr	r3, [pc, #72]	; (800a658 <rand+0x6c>)
 800a610:	e9c0 2300 	strd	r2, r3, [r0]
 800a614:	4b11      	ldr	r3, [pc, #68]	; (800a65c <rand+0x70>)
 800a616:	6083      	str	r3, [r0, #8]
 800a618:	230b      	movs	r3, #11
 800a61a:	8183      	strh	r3, [r0, #12]
 800a61c:	2201      	movs	r2, #1
 800a61e:	2300      	movs	r3, #0
 800a620:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a624:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a626:	4a0e      	ldr	r2, [pc, #56]	; (800a660 <rand+0x74>)
 800a628:	6920      	ldr	r0, [r4, #16]
 800a62a:	6963      	ldr	r3, [r4, #20]
 800a62c:	490d      	ldr	r1, [pc, #52]	; (800a664 <rand+0x78>)
 800a62e:	4342      	muls	r2, r0
 800a630:	fb01 2203 	mla	r2, r1, r3, r2
 800a634:	fba0 0101 	umull	r0, r1, r0, r1
 800a638:	1c43      	adds	r3, r0, #1
 800a63a:	eb42 0001 	adc.w	r0, r2, r1
 800a63e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800a642:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a646:	bd10      	pop	{r4, pc}
 800a648:	20000068 	.word	0x20000068
 800a64c:	0800d7b8 	.word	0x0800d7b8
 800a650:	0800d7cf 	.word	0x0800d7cf
 800a654:	abcd330e 	.word	0xabcd330e
 800a658:	e66d1234 	.word	0xe66d1234
 800a65c:	0005deec 	.word	0x0005deec
 800a660:	5851f42d 	.word	0x5851f42d
 800a664:	4c957f2d 	.word	0x4c957f2d

0800a668 <sniprintf>:
 800a668:	b40c      	push	{r2, r3}
 800a66a:	b530      	push	{r4, r5, lr}
 800a66c:	4b17      	ldr	r3, [pc, #92]	; (800a6cc <sniprintf+0x64>)
 800a66e:	1e0c      	subs	r4, r1, #0
 800a670:	681d      	ldr	r5, [r3, #0]
 800a672:	b09d      	sub	sp, #116	; 0x74
 800a674:	da08      	bge.n	800a688 <sniprintf+0x20>
 800a676:	238b      	movs	r3, #139	; 0x8b
 800a678:	602b      	str	r3, [r5, #0]
 800a67a:	f04f 30ff 	mov.w	r0, #4294967295
 800a67e:	b01d      	add	sp, #116	; 0x74
 800a680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a684:	b002      	add	sp, #8
 800a686:	4770      	bx	lr
 800a688:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a68c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a690:	bf14      	ite	ne
 800a692:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a696:	4623      	moveq	r3, r4
 800a698:	9304      	str	r3, [sp, #16]
 800a69a:	9307      	str	r3, [sp, #28]
 800a69c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a6a0:	9002      	str	r0, [sp, #8]
 800a6a2:	9006      	str	r0, [sp, #24]
 800a6a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a6a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a6aa:	ab21      	add	r3, sp, #132	; 0x84
 800a6ac:	a902      	add	r1, sp, #8
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	9301      	str	r3, [sp, #4]
 800a6b2:	f000 fd0f 	bl	800b0d4 <_svfiprintf_r>
 800a6b6:	1c43      	adds	r3, r0, #1
 800a6b8:	bfbc      	itt	lt
 800a6ba:	238b      	movlt	r3, #139	; 0x8b
 800a6bc:	602b      	strlt	r3, [r5, #0]
 800a6be:	2c00      	cmp	r4, #0
 800a6c0:	d0dd      	beq.n	800a67e <sniprintf+0x16>
 800a6c2:	9b02      	ldr	r3, [sp, #8]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	701a      	strb	r2, [r3, #0]
 800a6c8:	e7d9      	b.n	800a67e <sniprintf+0x16>
 800a6ca:	bf00      	nop
 800a6cc:	20000068 	.word	0x20000068

0800a6d0 <strcat>:
 800a6d0:	b510      	push	{r4, lr}
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	7814      	ldrb	r4, [r2, #0]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	3201      	adds	r2, #1
 800a6da:	2c00      	cmp	r4, #0
 800a6dc:	d1fa      	bne.n	800a6d4 <strcat+0x4>
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6e8:	2a00      	cmp	r2, #0
 800a6ea:	d1f9      	bne.n	800a6e0 <strcat+0x10>
 800a6ec:	bd10      	pop	{r4, pc}

0800a6ee <strncpy>:
 800a6ee:	b510      	push	{r4, lr}
 800a6f0:	3901      	subs	r1, #1
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	b132      	cbz	r2, 800a704 <strncpy+0x16>
 800a6f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a6fa:	f803 4b01 	strb.w	r4, [r3], #1
 800a6fe:	3a01      	subs	r2, #1
 800a700:	2c00      	cmp	r4, #0
 800a702:	d1f7      	bne.n	800a6f4 <strncpy+0x6>
 800a704:	441a      	add	r2, r3
 800a706:	2100      	movs	r1, #0
 800a708:	4293      	cmp	r3, r2
 800a70a:	d100      	bne.n	800a70e <strncpy+0x20>
 800a70c:	bd10      	pop	{r4, pc}
 800a70e:	f803 1b01 	strb.w	r1, [r3], #1
 800a712:	e7f9      	b.n	800a708 <strncpy+0x1a>

0800a714 <_strtol_l.constprop.0>:
 800a714:	2b01      	cmp	r3, #1
 800a716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a71a:	d001      	beq.n	800a720 <_strtol_l.constprop.0+0xc>
 800a71c:	2b24      	cmp	r3, #36	; 0x24
 800a71e:	d906      	bls.n	800a72e <_strtol_l.constprop.0+0x1a>
 800a720:	f7ff fe76 	bl	800a410 <__errno>
 800a724:	2316      	movs	r3, #22
 800a726:	6003      	str	r3, [r0, #0]
 800a728:	2000      	movs	r0, #0
 800a72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a72e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a814 <_strtol_l.constprop.0+0x100>
 800a732:	460d      	mov	r5, r1
 800a734:	462e      	mov	r6, r5
 800a736:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a73a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a73e:	f017 0708 	ands.w	r7, r7, #8
 800a742:	d1f7      	bne.n	800a734 <_strtol_l.constprop.0+0x20>
 800a744:	2c2d      	cmp	r4, #45	; 0x2d
 800a746:	d132      	bne.n	800a7ae <_strtol_l.constprop.0+0x9a>
 800a748:	782c      	ldrb	r4, [r5, #0]
 800a74a:	2701      	movs	r7, #1
 800a74c:	1cb5      	adds	r5, r6, #2
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d05b      	beq.n	800a80a <_strtol_l.constprop.0+0xf6>
 800a752:	2b10      	cmp	r3, #16
 800a754:	d109      	bne.n	800a76a <_strtol_l.constprop.0+0x56>
 800a756:	2c30      	cmp	r4, #48	; 0x30
 800a758:	d107      	bne.n	800a76a <_strtol_l.constprop.0+0x56>
 800a75a:	782c      	ldrb	r4, [r5, #0]
 800a75c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a760:	2c58      	cmp	r4, #88	; 0x58
 800a762:	d14d      	bne.n	800a800 <_strtol_l.constprop.0+0xec>
 800a764:	786c      	ldrb	r4, [r5, #1]
 800a766:	2310      	movs	r3, #16
 800a768:	3502      	adds	r5, #2
 800a76a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a76e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a772:	f04f 0c00 	mov.w	ip, #0
 800a776:	fbb8 f9f3 	udiv	r9, r8, r3
 800a77a:	4666      	mov	r6, ip
 800a77c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a780:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a784:	f1be 0f09 	cmp.w	lr, #9
 800a788:	d816      	bhi.n	800a7b8 <_strtol_l.constprop.0+0xa4>
 800a78a:	4674      	mov	r4, lr
 800a78c:	42a3      	cmp	r3, r4
 800a78e:	dd24      	ble.n	800a7da <_strtol_l.constprop.0+0xc6>
 800a790:	f1bc 0f00 	cmp.w	ip, #0
 800a794:	db1e      	blt.n	800a7d4 <_strtol_l.constprop.0+0xc0>
 800a796:	45b1      	cmp	r9, r6
 800a798:	d31c      	bcc.n	800a7d4 <_strtol_l.constprop.0+0xc0>
 800a79a:	d101      	bne.n	800a7a0 <_strtol_l.constprop.0+0x8c>
 800a79c:	45a2      	cmp	sl, r4
 800a79e:	db19      	blt.n	800a7d4 <_strtol_l.constprop.0+0xc0>
 800a7a0:	fb06 4603 	mla	r6, r6, r3, r4
 800a7a4:	f04f 0c01 	mov.w	ip, #1
 800a7a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7ac:	e7e8      	b.n	800a780 <_strtol_l.constprop.0+0x6c>
 800a7ae:	2c2b      	cmp	r4, #43	; 0x2b
 800a7b0:	bf04      	itt	eq
 800a7b2:	782c      	ldrbeq	r4, [r5, #0]
 800a7b4:	1cb5      	addeq	r5, r6, #2
 800a7b6:	e7ca      	b.n	800a74e <_strtol_l.constprop.0+0x3a>
 800a7b8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a7bc:	f1be 0f19 	cmp.w	lr, #25
 800a7c0:	d801      	bhi.n	800a7c6 <_strtol_l.constprop.0+0xb2>
 800a7c2:	3c37      	subs	r4, #55	; 0x37
 800a7c4:	e7e2      	b.n	800a78c <_strtol_l.constprop.0+0x78>
 800a7c6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a7ca:	f1be 0f19 	cmp.w	lr, #25
 800a7ce:	d804      	bhi.n	800a7da <_strtol_l.constprop.0+0xc6>
 800a7d0:	3c57      	subs	r4, #87	; 0x57
 800a7d2:	e7db      	b.n	800a78c <_strtol_l.constprop.0+0x78>
 800a7d4:	f04f 3cff 	mov.w	ip, #4294967295
 800a7d8:	e7e6      	b.n	800a7a8 <_strtol_l.constprop.0+0x94>
 800a7da:	f1bc 0f00 	cmp.w	ip, #0
 800a7de:	da05      	bge.n	800a7ec <_strtol_l.constprop.0+0xd8>
 800a7e0:	2322      	movs	r3, #34	; 0x22
 800a7e2:	6003      	str	r3, [r0, #0]
 800a7e4:	4646      	mov	r6, r8
 800a7e6:	b942      	cbnz	r2, 800a7fa <_strtol_l.constprop.0+0xe6>
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	e79e      	b.n	800a72a <_strtol_l.constprop.0+0x16>
 800a7ec:	b107      	cbz	r7, 800a7f0 <_strtol_l.constprop.0+0xdc>
 800a7ee:	4276      	negs	r6, r6
 800a7f0:	2a00      	cmp	r2, #0
 800a7f2:	d0f9      	beq.n	800a7e8 <_strtol_l.constprop.0+0xd4>
 800a7f4:	f1bc 0f00 	cmp.w	ip, #0
 800a7f8:	d000      	beq.n	800a7fc <_strtol_l.constprop.0+0xe8>
 800a7fa:	1e69      	subs	r1, r5, #1
 800a7fc:	6011      	str	r1, [r2, #0]
 800a7fe:	e7f3      	b.n	800a7e8 <_strtol_l.constprop.0+0xd4>
 800a800:	2430      	movs	r4, #48	; 0x30
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1b1      	bne.n	800a76a <_strtol_l.constprop.0+0x56>
 800a806:	2308      	movs	r3, #8
 800a808:	e7af      	b.n	800a76a <_strtol_l.constprop.0+0x56>
 800a80a:	2c30      	cmp	r4, #48	; 0x30
 800a80c:	d0a5      	beq.n	800a75a <_strtol_l.constprop.0+0x46>
 800a80e:	230a      	movs	r3, #10
 800a810:	e7ab      	b.n	800a76a <_strtol_l.constprop.0+0x56>
 800a812:	bf00      	nop
 800a814:	0800d867 	.word	0x0800d867

0800a818 <strtol>:
 800a818:	4613      	mov	r3, r2
 800a81a:	460a      	mov	r2, r1
 800a81c:	4601      	mov	r1, r0
 800a81e:	4802      	ldr	r0, [pc, #8]	; (800a828 <strtol+0x10>)
 800a820:	6800      	ldr	r0, [r0, #0]
 800a822:	f7ff bf77 	b.w	800a714 <_strtol_l.constprop.0>
 800a826:	bf00      	nop
 800a828:	20000068 	.word	0x20000068

0800a82c <__swbuf_r>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	460e      	mov	r6, r1
 800a830:	4614      	mov	r4, r2
 800a832:	4605      	mov	r5, r0
 800a834:	b118      	cbz	r0, 800a83e <__swbuf_r+0x12>
 800a836:	6983      	ldr	r3, [r0, #24]
 800a838:	b90b      	cbnz	r3, 800a83e <__swbuf_r+0x12>
 800a83a:	f000 f9ef 	bl	800ac1c <__sinit>
 800a83e:	4b21      	ldr	r3, [pc, #132]	; (800a8c4 <__swbuf_r+0x98>)
 800a840:	429c      	cmp	r4, r3
 800a842:	d12b      	bne.n	800a89c <__swbuf_r+0x70>
 800a844:	686c      	ldr	r4, [r5, #4]
 800a846:	69a3      	ldr	r3, [r4, #24]
 800a848:	60a3      	str	r3, [r4, #8]
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	071a      	lsls	r2, r3, #28
 800a84e:	d52f      	bpl.n	800a8b0 <__swbuf_r+0x84>
 800a850:	6923      	ldr	r3, [r4, #16]
 800a852:	b36b      	cbz	r3, 800a8b0 <__swbuf_r+0x84>
 800a854:	6923      	ldr	r3, [r4, #16]
 800a856:	6820      	ldr	r0, [r4, #0]
 800a858:	1ac0      	subs	r0, r0, r3
 800a85a:	6963      	ldr	r3, [r4, #20]
 800a85c:	b2f6      	uxtb	r6, r6
 800a85e:	4283      	cmp	r3, r0
 800a860:	4637      	mov	r7, r6
 800a862:	dc04      	bgt.n	800a86e <__swbuf_r+0x42>
 800a864:	4621      	mov	r1, r4
 800a866:	4628      	mov	r0, r5
 800a868:	f000 f944 	bl	800aaf4 <_fflush_r>
 800a86c:	bb30      	cbnz	r0, 800a8bc <__swbuf_r+0x90>
 800a86e:	68a3      	ldr	r3, [r4, #8]
 800a870:	3b01      	subs	r3, #1
 800a872:	60a3      	str	r3, [r4, #8]
 800a874:	6823      	ldr	r3, [r4, #0]
 800a876:	1c5a      	adds	r2, r3, #1
 800a878:	6022      	str	r2, [r4, #0]
 800a87a:	701e      	strb	r6, [r3, #0]
 800a87c:	6963      	ldr	r3, [r4, #20]
 800a87e:	3001      	adds	r0, #1
 800a880:	4283      	cmp	r3, r0
 800a882:	d004      	beq.n	800a88e <__swbuf_r+0x62>
 800a884:	89a3      	ldrh	r3, [r4, #12]
 800a886:	07db      	lsls	r3, r3, #31
 800a888:	d506      	bpl.n	800a898 <__swbuf_r+0x6c>
 800a88a:	2e0a      	cmp	r6, #10
 800a88c:	d104      	bne.n	800a898 <__swbuf_r+0x6c>
 800a88e:	4621      	mov	r1, r4
 800a890:	4628      	mov	r0, r5
 800a892:	f000 f92f 	bl	800aaf4 <_fflush_r>
 800a896:	b988      	cbnz	r0, 800a8bc <__swbuf_r+0x90>
 800a898:	4638      	mov	r0, r7
 800a89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a89c:	4b0a      	ldr	r3, [pc, #40]	; (800a8c8 <__swbuf_r+0x9c>)
 800a89e:	429c      	cmp	r4, r3
 800a8a0:	d101      	bne.n	800a8a6 <__swbuf_r+0x7a>
 800a8a2:	68ac      	ldr	r4, [r5, #8]
 800a8a4:	e7cf      	b.n	800a846 <__swbuf_r+0x1a>
 800a8a6:	4b09      	ldr	r3, [pc, #36]	; (800a8cc <__swbuf_r+0xa0>)
 800a8a8:	429c      	cmp	r4, r3
 800a8aa:	bf08      	it	eq
 800a8ac:	68ec      	ldreq	r4, [r5, #12]
 800a8ae:	e7ca      	b.n	800a846 <__swbuf_r+0x1a>
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f000 f80c 	bl	800a8d0 <__swsetup_r>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d0cb      	beq.n	800a854 <__swbuf_r+0x28>
 800a8bc:	f04f 37ff 	mov.w	r7, #4294967295
 800a8c0:	e7ea      	b.n	800a898 <__swbuf_r+0x6c>
 800a8c2:	bf00      	nop
 800a8c4:	0800d988 	.word	0x0800d988
 800a8c8:	0800d9a8 	.word	0x0800d9a8
 800a8cc:	0800d968 	.word	0x0800d968

0800a8d0 <__swsetup_r>:
 800a8d0:	4b32      	ldr	r3, [pc, #200]	; (800a99c <__swsetup_r+0xcc>)
 800a8d2:	b570      	push	{r4, r5, r6, lr}
 800a8d4:	681d      	ldr	r5, [r3, #0]
 800a8d6:	4606      	mov	r6, r0
 800a8d8:	460c      	mov	r4, r1
 800a8da:	b125      	cbz	r5, 800a8e6 <__swsetup_r+0x16>
 800a8dc:	69ab      	ldr	r3, [r5, #24]
 800a8de:	b913      	cbnz	r3, 800a8e6 <__swsetup_r+0x16>
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f000 f99b 	bl	800ac1c <__sinit>
 800a8e6:	4b2e      	ldr	r3, [pc, #184]	; (800a9a0 <__swsetup_r+0xd0>)
 800a8e8:	429c      	cmp	r4, r3
 800a8ea:	d10f      	bne.n	800a90c <__swsetup_r+0x3c>
 800a8ec:	686c      	ldr	r4, [r5, #4]
 800a8ee:	89a3      	ldrh	r3, [r4, #12]
 800a8f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8f4:	0719      	lsls	r1, r3, #28
 800a8f6:	d42c      	bmi.n	800a952 <__swsetup_r+0x82>
 800a8f8:	06dd      	lsls	r5, r3, #27
 800a8fa:	d411      	bmi.n	800a920 <__swsetup_r+0x50>
 800a8fc:	2309      	movs	r3, #9
 800a8fe:	6033      	str	r3, [r6, #0]
 800a900:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a904:	81a3      	strh	r3, [r4, #12]
 800a906:	f04f 30ff 	mov.w	r0, #4294967295
 800a90a:	e03e      	b.n	800a98a <__swsetup_r+0xba>
 800a90c:	4b25      	ldr	r3, [pc, #148]	; (800a9a4 <__swsetup_r+0xd4>)
 800a90e:	429c      	cmp	r4, r3
 800a910:	d101      	bne.n	800a916 <__swsetup_r+0x46>
 800a912:	68ac      	ldr	r4, [r5, #8]
 800a914:	e7eb      	b.n	800a8ee <__swsetup_r+0x1e>
 800a916:	4b24      	ldr	r3, [pc, #144]	; (800a9a8 <__swsetup_r+0xd8>)
 800a918:	429c      	cmp	r4, r3
 800a91a:	bf08      	it	eq
 800a91c:	68ec      	ldreq	r4, [r5, #12]
 800a91e:	e7e6      	b.n	800a8ee <__swsetup_r+0x1e>
 800a920:	0758      	lsls	r0, r3, #29
 800a922:	d512      	bpl.n	800a94a <__swsetup_r+0x7a>
 800a924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a926:	b141      	cbz	r1, 800a93a <__swsetup_r+0x6a>
 800a928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a92c:	4299      	cmp	r1, r3
 800a92e:	d002      	beq.n	800a936 <__swsetup_r+0x66>
 800a930:	4630      	mov	r0, r6
 800a932:	f000 fa93 	bl	800ae5c <_free_r>
 800a936:	2300      	movs	r3, #0
 800a938:	6363      	str	r3, [r4, #52]	; 0x34
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a940:	81a3      	strh	r3, [r4, #12]
 800a942:	2300      	movs	r3, #0
 800a944:	6063      	str	r3, [r4, #4]
 800a946:	6923      	ldr	r3, [r4, #16]
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	89a3      	ldrh	r3, [r4, #12]
 800a94c:	f043 0308 	orr.w	r3, r3, #8
 800a950:	81a3      	strh	r3, [r4, #12]
 800a952:	6923      	ldr	r3, [r4, #16]
 800a954:	b94b      	cbnz	r3, 800a96a <__swsetup_r+0x9a>
 800a956:	89a3      	ldrh	r3, [r4, #12]
 800a958:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a95c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a960:	d003      	beq.n	800a96a <__swsetup_r+0x9a>
 800a962:	4621      	mov	r1, r4
 800a964:	4630      	mov	r0, r6
 800a966:	f000 fa31 	bl	800adcc <__smakebuf_r>
 800a96a:	89a0      	ldrh	r0, [r4, #12]
 800a96c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a970:	f010 0301 	ands.w	r3, r0, #1
 800a974:	d00a      	beq.n	800a98c <__swsetup_r+0xbc>
 800a976:	2300      	movs	r3, #0
 800a978:	60a3      	str	r3, [r4, #8]
 800a97a:	6963      	ldr	r3, [r4, #20]
 800a97c:	425b      	negs	r3, r3
 800a97e:	61a3      	str	r3, [r4, #24]
 800a980:	6923      	ldr	r3, [r4, #16]
 800a982:	b943      	cbnz	r3, 800a996 <__swsetup_r+0xc6>
 800a984:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a988:	d1ba      	bne.n	800a900 <__swsetup_r+0x30>
 800a98a:	bd70      	pop	{r4, r5, r6, pc}
 800a98c:	0781      	lsls	r1, r0, #30
 800a98e:	bf58      	it	pl
 800a990:	6963      	ldrpl	r3, [r4, #20]
 800a992:	60a3      	str	r3, [r4, #8]
 800a994:	e7f4      	b.n	800a980 <__swsetup_r+0xb0>
 800a996:	2000      	movs	r0, #0
 800a998:	e7f7      	b.n	800a98a <__swsetup_r+0xba>
 800a99a:	bf00      	nop
 800a99c:	20000068 	.word	0x20000068
 800a9a0:	0800d988 	.word	0x0800d988
 800a9a4:	0800d9a8 	.word	0x0800d9a8
 800a9a8:	0800d968 	.word	0x0800d968

0800a9ac <__assert_func>:
 800a9ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9ae:	4614      	mov	r4, r2
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	4b09      	ldr	r3, [pc, #36]	; (800a9d8 <__assert_func+0x2c>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	68d8      	ldr	r0, [r3, #12]
 800a9ba:	b14c      	cbz	r4, 800a9d0 <__assert_func+0x24>
 800a9bc:	4b07      	ldr	r3, [pc, #28]	; (800a9dc <__assert_func+0x30>)
 800a9be:	9100      	str	r1, [sp, #0]
 800a9c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9c4:	4906      	ldr	r1, [pc, #24]	; (800a9e0 <__assert_func+0x34>)
 800a9c6:	462b      	mov	r3, r5
 800a9c8:	f000 f9a6 	bl	800ad18 <fiprintf>
 800a9cc:	f000 ffd6 	bl	800b97c <abort>
 800a9d0:	4b04      	ldr	r3, [pc, #16]	; (800a9e4 <__assert_func+0x38>)
 800a9d2:	461c      	mov	r4, r3
 800a9d4:	e7f3      	b.n	800a9be <__assert_func+0x12>
 800a9d6:	bf00      	nop
 800a9d8:	20000068 	.word	0x20000068
 800a9dc:	0800d82a 	.word	0x0800d82a
 800a9e0:	0800d837 	.word	0x0800d837
 800a9e4:	0800d865 	.word	0x0800d865

0800a9e8 <__sflush_r>:
 800a9e8:	898a      	ldrh	r2, [r1, #12]
 800a9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ee:	4605      	mov	r5, r0
 800a9f0:	0710      	lsls	r0, r2, #28
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	d458      	bmi.n	800aaa8 <__sflush_r+0xc0>
 800a9f6:	684b      	ldr	r3, [r1, #4]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	dc05      	bgt.n	800aa08 <__sflush_r+0x20>
 800a9fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	dc02      	bgt.n	800aa08 <__sflush_r+0x20>
 800aa02:	2000      	movs	r0, #0
 800aa04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa0a:	2e00      	cmp	r6, #0
 800aa0c:	d0f9      	beq.n	800aa02 <__sflush_r+0x1a>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa14:	682f      	ldr	r7, [r5, #0]
 800aa16:	602b      	str	r3, [r5, #0]
 800aa18:	d032      	beq.n	800aa80 <__sflush_r+0x98>
 800aa1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa1c:	89a3      	ldrh	r3, [r4, #12]
 800aa1e:	075a      	lsls	r2, r3, #29
 800aa20:	d505      	bpl.n	800aa2e <__sflush_r+0x46>
 800aa22:	6863      	ldr	r3, [r4, #4]
 800aa24:	1ac0      	subs	r0, r0, r3
 800aa26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa28:	b10b      	cbz	r3, 800aa2e <__sflush_r+0x46>
 800aa2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa2c:	1ac0      	subs	r0, r0, r3
 800aa2e:	2300      	movs	r3, #0
 800aa30:	4602      	mov	r2, r0
 800aa32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa34:	6a21      	ldr	r1, [r4, #32]
 800aa36:	4628      	mov	r0, r5
 800aa38:	47b0      	blx	r6
 800aa3a:	1c43      	adds	r3, r0, #1
 800aa3c:	89a3      	ldrh	r3, [r4, #12]
 800aa3e:	d106      	bne.n	800aa4e <__sflush_r+0x66>
 800aa40:	6829      	ldr	r1, [r5, #0]
 800aa42:	291d      	cmp	r1, #29
 800aa44:	d82c      	bhi.n	800aaa0 <__sflush_r+0xb8>
 800aa46:	4a2a      	ldr	r2, [pc, #168]	; (800aaf0 <__sflush_r+0x108>)
 800aa48:	40ca      	lsrs	r2, r1
 800aa4a:	07d6      	lsls	r6, r2, #31
 800aa4c:	d528      	bpl.n	800aaa0 <__sflush_r+0xb8>
 800aa4e:	2200      	movs	r2, #0
 800aa50:	6062      	str	r2, [r4, #4]
 800aa52:	04d9      	lsls	r1, r3, #19
 800aa54:	6922      	ldr	r2, [r4, #16]
 800aa56:	6022      	str	r2, [r4, #0]
 800aa58:	d504      	bpl.n	800aa64 <__sflush_r+0x7c>
 800aa5a:	1c42      	adds	r2, r0, #1
 800aa5c:	d101      	bne.n	800aa62 <__sflush_r+0x7a>
 800aa5e:	682b      	ldr	r3, [r5, #0]
 800aa60:	b903      	cbnz	r3, 800aa64 <__sflush_r+0x7c>
 800aa62:	6560      	str	r0, [r4, #84]	; 0x54
 800aa64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa66:	602f      	str	r7, [r5, #0]
 800aa68:	2900      	cmp	r1, #0
 800aa6a:	d0ca      	beq.n	800aa02 <__sflush_r+0x1a>
 800aa6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa70:	4299      	cmp	r1, r3
 800aa72:	d002      	beq.n	800aa7a <__sflush_r+0x92>
 800aa74:	4628      	mov	r0, r5
 800aa76:	f000 f9f1 	bl	800ae5c <_free_r>
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	6360      	str	r0, [r4, #52]	; 0x34
 800aa7e:	e7c1      	b.n	800aa04 <__sflush_r+0x1c>
 800aa80:	6a21      	ldr	r1, [r4, #32]
 800aa82:	2301      	movs	r3, #1
 800aa84:	4628      	mov	r0, r5
 800aa86:	47b0      	blx	r6
 800aa88:	1c41      	adds	r1, r0, #1
 800aa8a:	d1c7      	bne.n	800aa1c <__sflush_r+0x34>
 800aa8c:	682b      	ldr	r3, [r5, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d0c4      	beq.n	800aa1c <__sflush_r+0x34>
 800aa92:	2b1d      	cmp	r3, #29
 800aa94:	d001      	beq.n	800aa9a <__sflush_r+0xb2>
 800aa96:	2b16      	cmp	r3, #22
 800aa98:	d101      	bne.n	800aa9e <__sflush_r+0xb6>
 800aa9a:	602f      	str	r7, [r5, #0]
 800aa9c:	e7b1      	b.n	800aa02 <__sflush_r+0x1a>
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa4:	81a3      	strh	r3, [r4, #12]
 800aaa6:	e7ad      	b.n	800aa04 <__sflush_r+0x1c>
 800aaa8:	690f      	ldr	r7, [r1, #16]
 800aaaa:	2f00      	cmp	r7, #0
 800aaac:	d0a9      	beq.n	800aa02 <__sflush_r+0x1a>
 800aaae:	0793      	lsls	r3, r2, #30
 800aab0:	680e      	ldr	r6, [r1, #0]
 800aab2:	bf08      	it	eq
 800aab4:	694b      	ldreq	r3, [r1, #20]
 800aab6:	600f      	str	r7, [r1, #0]
 800aab8:	bf18      	it	ne
 800aaba:	2300      	movne	r3, #0
 800aabc:	eba6 0807 	sub.w	r8, r6, r7
 800aac0:	608b      	str	r3, [r1, #8]
 800aac2:	f1b8 0f00 	cmp.w	r8, #0
 800aac6:	dd9c      	ble.n	800aa02 <__sflush_r+0x1a>
 800aac8:	6a21      	ldr	r1, [r4, #32]
 800aaca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aacc:	4643      	mov	r3, r8
 800aace:	463a      	mov	r2, r7
 800aad0:	4628      	mov	r0, r5
 800aad2:	47b0      	blx	r6
 800aad4:	2800      	cmp	r0, #0
 800aad6:	dc06      	bgt.n	800aae6 <__sflush_r+0xfe>
 800aad8:	89a3      	ldrh	r3, [r4, #12]
 800aada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aade:	81a3      	strh	r3, [r4, #12]
 800aae0:	f04f 30ff 	mov.w	r0, #4294967295
 800aae4:	e78e      	b.n	800aa04 <__sflush_r+0x1c>
 800aae6:	4407      	add	r7, r0
 800aae8:	eba8 0800 	sub.w	r8, r8, r0
 800aaec:	e7e9      	b.n	800aac2 <__sflush_r+0xda>
 800aaee:	bf00      	nop
 800aaf0:	20400001 	.word	0x20400001

0800aaf4 <_fflush_r>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	690b      	ldr	r3, [r1, #16]
 800aaf8:	4605      	mov	r5, r0
 800aafa:	460c      	mov	r4, r1
 800aafc:	b913      	cbnz	r3, 800ab04 <_fflush_r+0x10>
 800aafe:	2500      	movs	r5, #0
 800ab00:	4628      	mov	r0, r5
 800ab02:	bd38      	pop	{r3, r4, r5, pc}
 800ab04:	b118      	cbz	r0, 800ab0e <_fflush_r+0x1a>
 800ab06:	6983      	ldr	r3, [r0, #24]
 800ab08:	b90b      	cbnz	r3, 800ab0e <_fflush_r+0x1a>
 800ab0a:	f000 f887 	bl	800ac1c <__sinit>
 800ab0e:	4b14      	ldr	r3, [pc, #80]	; (800ab60 <_fflush_r+0x6c>)
 800ab10:	429c      	cmp	r4, r3
 800ab12:	d11b      	bne.n	800ab4c <_fflush_r+0x58>
 800ab14:	686c      	ldr	r4, [r5, #4]
 800ab16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d0ef      	beq.n	800aafe <_fflush_r+0xa>
 800ab1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab20:	07d0      	lsls	r0, r2, #31
 800ab22:	d404      	bmi.n	800ab2e <_fflush_r+0x3a>
 800ab24:	0599      	lsls	r1, r3, #22
 800ab26:	d402      	bmi.n	800ab2e <_fflush_r+0x3a>
 800ab28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab2a:	f000 f927 	bl	800ad7c <__retarget_lock_acquire_recursive>
 800ab2e:	4628      	mov	r0, r5
 800ab30:	4621      	mov	r1, r4
 800ab32:	f7ff ff59 	bl	800a9e8 <__sflush_r>
 800ab36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab38:	07da      	lsls	r2, r3, #31
 800ab3a:	4605      	mov	r5, r0
 800ab3c:	d4e0      	bmi.n	800ab00 <_fflush_r+0xc>
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	059b      	lsls	r3, r3, #22
 800ab42:	d4dd      	bmi.n	800ab00 <_fflush_r+0xc>
 800ab44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab46:	f000 f91a 	bl	800ad7e <__retarget_lock_release_recursive>
 800ab4a:	e7d9      	b.n	800ab00 <_fflush_r+0xc>
 800ab4c:	4b05      	ldr	r3, [pc, #20]	; (800ab64 <_fflush_r+0x70>)
 800ab4e:	429c      	cmp	r4, r3
 800ab50:	d101      	bne.n	800ab56 <_fflush_r+0x62>
 800ab52:	68ac      	ldr	r4, [r5, #8]
 800ab54:	e7df      	b.n	800ab16 <_fflush_r+0x22>
 800ab56:	4b04      	ldr	r3, [pc, #16]	; (800ab68 <_fflush_r+0x74>)
 800ab58:	429c      	cmp	r4, r3
 800ab5a:	bf08      	it	eq
 800ab5c:	68ec      	ldreq	r4, [r5, #12]
 800ab5e:	e7da      	b.n	800ab16 <_fflush_r+0x22>
 800ab60:	0800d988 	.word	0x0800d988
 800ab64:	0800d9a8 	.word	0x0800d9a8
 800ab68:	0800d968 	.word	0x0800d968

0800ab6c <std>:
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	b510      	push	{r4, lr}
 800ab70:	4604      	mov	r4, r0
 800ab72:	e9c0 3300 	strd	r3, r3, [r0]
 800ab76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab7a:	6083      	str	r3, [r0, #8]
 800ab7c:	8181      	strh	r1, [r0, #12]
 800ab7e:	6643      	str	r3, [r0, #100]	; 0x64
 800ab80:	81c2      	strh	r2, [r0, #14]
 800ab82:	6183      	str	r3, [r0, #24]
 800ab84:	4619      	mov	r1, r3
 800ab86:	2208      	movs	r2, #8
 800ab88:	305c      	adds	r0, #92	; 0x5c
 800ab8a:	f7ff fc6b 	bl	800a464 <memset>
 800ab8e:	4b05      	ldr	r3, [pc, #20]	; (800aba4 <std+0x38>)
 800ab90:	6263      	str	r3, [r4, #36]	; 0x24
 800ab92:	4b05      	ldr	r3, [pc, #20]	; (800aba8 <std+0x3c>)
 800ab94:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab96:	4b05      	ldr	r3, [pc, #20]	; (800abac <std+0x40>)
 800ab98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab9a:	4b05      	ldr	r3, [pc, #20]	; (800abb0 <std+0x44>)
 800ab9c:	6224      	str	r4, [r4, #32]
 800ab9e:	6323      	str	r3, [r4, #48]	; 0x30
 800aba0:	bd10      	pop	{r4, pc}
 800aba2:	bf00      	nop
 800aba4:	0800b8d1 	.word	0x0800b8d1
 800aba8:	0800b8f3 	.word	0x0800b8f3
 800abac:	0800b92b 	.word	0x0800b92b
 800abb0:	0800b94f 	.word	0x0800b94f

0800abb4 <_cleanup_r>:
 800abb4:	4901      	ldr	r1, [pc, #4]	; (800abbc <_cleanup_r+0x8>)
 800abb6:	f000 b8c1 	b.w	800ad3c <_fwalk_reent>
 800abba:	bf00      	nop
 800abbc:	0800aaf5 	.word	0x0800aaf5

0800abc0 <__sfmoreglue>:
 800abc0:	b570      	push	{r4, r5, r6, lr}
 800abc2:	2268      	movs	r2, #104	; 0x68
 800abc4:	1e4d      	subs	r5, r1, #1
 800abc6:	4355      	muls	r5, r2
 800abc8:	460e      	mov	r6, r1
 800abca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abce:	f000 f9b1 	bl	800af34 <_malloc_r>
 800abd2:	4604      	mov	r4, r0
 800abd4:	b140      	cbz	r0, 800abe8 <__sfmoreglue+0x28>
 800abd6:	2100      	movs	r1, #0
 800abd8:	e9c0 1600 	strd	r1, r6, [r0]
 800abdc:	300c      	adds	r0, #12
 800abde:	60a0      	str	r0, [r4, #8]
 800abe0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abe4:	f7ff fc3e 	bl	800a464 <memset>
 800abe8:	4620      	mov	r0, r4
 800abea:	bd70      	pop	{r4, r5, r6, pc}

0800abec <__sfp_lock_acquire>:
 800abec:	4801      	ldr	r0, [pc, #4]	; (800abf4 <__sfp_lock_acquire+0x8>)
 800abee:	f000 b8c5 	b.w	800ad7c <__retarget_lock_acquire_recursive>
 800abf2:	bf00      	nop
 800abf4:	200029f5 	.word	0x200029f5

0800abf8 <__sfp_lock_release>:
 800abf8:	4801      	ldr	r0, [pc, #4]	; (800ac00 <__sfp_lock_release+0x8>)
 800abfa:	f000 b8c0 	b.w	800ad7e <__retarget_lock_release_recursive>
 800abfe:	bf00      	nop
 800ac00:	200029f5 	.word	0x200029f5

0800ac04 <__sinit_lock_acquire>:
 800ac04:	4801      	ldr	r0, [pc, #4]	; (800ac0c <__sinit_lock_acquire+0x8>)
 800ac06:	f000 b8b9 	b.w	800ad7c <__retarget_lock_acquire_recursive>
 800ac0a:	bf00      	nop
 800ac0c:	200029f6 	.word	0x200029f6

0800ac10 <__sinit_lock_release>:
 800ac10:	4801      	ldr	r0, [pc, #4]	; (800ac18 <__sinit_lock_release+0x8>)
 800ac12:	f000 b8b4 	b.w	800ad7e <__retarget_lock_release_recursive>
 800ac16:	bf00      	nop
 800ac18:	200029f6 	.word	0x200029f6

0800ac1c <__sinit>:
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	4604      	mov	r4, r0
 800ac20:	f7ff fff0 	bl	800ac04 <__sinit_lock_acquire>
 800ac24:	69a3      	ldr	r3, [r4, #24]
 800ac26:	b11b      	cbz	r3, 800ac30 <__sinit+0x14>
 800ac28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac2c:	f7ff bff0 	b.w	800ac10 <__sinit_lock_release>
 800ac30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac34:	6523      	str	r3, [r4, #80]	; 0x50
 800ac36:	4b13      	ldr	r3, [pc, #76]	; (800ac84 <__sinit+0x68>)
 800ac38:	4a13      	ldr	r2, [pc, #76]	; (800ac88 <__sinit+0x6c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac3e:	42a3      	cmp	r3, r4
 800ac40:	bf04      	itt	eq
 800ac42:	2301      	moveq	r3, #1
 800ac44:	61a3      	streq	r3, [r4, #24]
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 f820 	bl	800ac8c <__sfp>
 800ac4c:	6060      	str	r0, [r4, #4]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f000 f81c 	bl	800ac8c <__sfp>
 800ac54:	60a0      	str	r0, [r4, #8]
 800ac56:	4620      	mov	r0, r4
 800ac58:	f000 f818 	bl	800ac8c <__sfp>
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	60e0      	str	r0, [r4, #12]
 800ac60:	2104      	movs	r1, #4
 800ac62:	6860      	ldr	r0, [r4, #4]
 800ac64:	f7ff ff82 	bl	800ab6c <std>
 800ac68:	68a0      	ldr	r0, [r4, #8]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	2109      	movs	r1, #9
 800ac6e:	f7ff ff7d 	bl	800ab6c <std>
 800ac72:	68e0      	ldr	r0, [r4, #12]
 800ac74:	2202      	movs	r2, #2
 800ac76:	2112      	movs	r1, #18
 800ac78:	f7ff ff78 	bl	800ab6c <std>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	61a3      	str	r3, [r4, #24]
 800ac80:	e7d2      	b.n	800ac28 <__sinit+0xc>
 800ac82:	bf00      	nop
 800ac84:	0800d7b4 	.word	0x0800d7b4
 800ac88:	0800abb5 	.word	0x0800abb5

0800ac8c <__sfp>:
 800ac8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8e:	4607      	mov	r7, r0
 800ac90:	f7ff ffac 	bl	800abec <__sfp_lock_acquire>
 800ac94:	4b1e      	ldr	r3, [pc, #120]	; (800ad10 <__sfp+0x84>)
 800ac96:	681e      	ldr	r6, [r3, #0]
 800ac98:	69b3      	ldr	r3, [r6, #24]
 800ac9a:	b913      	cbnz	r3, 800aca2 <__sfp+0x16>
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f7ff ffbd 	bl	800ac1c <__sinit>
 800aca2:	3648      	adds	r6, #72	; 0x48
 800aca4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aca8:	3b01      	subs	r3, #1
 800acaa:	d503      	bpl.n	800acb4 <__sfp+0x28>
 800acac:	6833      	ldr	r3, [r6, #0]
 800acae:	b30b      	cbz	r3, 800acf4 <__sfp+0x68>
 800acb0:	6836      	ldr	r6, [r6, #0]
 800acb2:	e7f7      	b.n	800aca4 <__sfp+0x18>
 800acb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800acb8:	b9d5      	cbnz	r5, 800acf0 <__sfp+0x64>
 800acba:	4b16      	ldr	r3, [pc, #88]	; (800ad14 <__sfp+0x88>)
 800acbc:	60e3      	str	r3, [r4, #12]
 800acbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acc2:	6665      	str	r5, [r4, #100]	; 0x64
 800acc4:	f000 f859 	bl	800ad7a <__retarget_lock_init_recursive>
 800acc8:	f7ff ff96 	bl	800abf8 <__sfp_lock_release>
 800accc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800acd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800acd4:	6025      	str	r5, [r4, #0]
 800acd6:	61a5      	str	r5, [r4, #24]
 800acd8:	2208      	movs	r2, #8
 800acda:	4629      	mov	r1, r5
 800acdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ace0:	f7ff fbc0 	bl	800a464 <memset>
 800ace4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ace8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acec:	4620      	mov	r0, r4
 800acee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acf0:	3468      	adds	r4, #104	; 0x68
 800acf2:	e7d9      	b.n	800aca8 <__sfp+0x1c>
 800acf4:	2104      	movs	r1, #4
 800acf6:	4638      	mov	r0, r7
 800acf8:	f7ff ff62 	bl	800abc0 <__sfmoreglue>
 800acfc:	4604      	mov	r4, r0
 800acfe:	6030      	str	r0, [r6, #0]
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d1d5      	bne.n	800acb0 <__sfp+0x24>
 800ad04:	f7ff ff78 	bl	800abf8 <__sfp_lock_release>
 800ad08:	230c      	movs	r3, #12
 800ad0a:	603b      	str	r3, [r7, #0]
 800ad0c:	e7ee      	b.n	800acec <__sfp+0x60>
 800ad0e:	bf00      	nop
 800ad10:	0800d7b4 	.word	0x0800d7b4
 800ad14:	ffff0001 	.word	0xffff0001

0800ad18 <fiprintf>:
 800ad18:	b40e      	push	{r1, r2, r3}
 800ad1a:	b503      	push	{r0, r1, lr}
 800ad1c:	4601      	mov	r1, r0
 800ad1e:	ab03      	add	r3, sp, #12
 800ad20:	4805      	ldr	r0, [pc, #20]	; (800ad38 <fiprintf+0x20>)
 800ad22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad26:	6800      	ldr	r0, [r0, #0]
 800ad28:	9301      	str	r3, [sp, #4]
 800ad2a:	f000 fafd 	bl	800b328 <_vfiprintf_r>
 800ad2e:	b002      	add	sp, #8
 800ad30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad34:	b003      	add	sp, #12
 800ad36:	4770      	bx	lr
 800ad38:	20000068 	.word	0x20000068

0800ad3c <_fwalk_reent>:
 800ad3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad40:	4606      	mov	r6, r0
 800ad42:	4688      	mov	r8, r1
 800ad44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad48:	2700      	movs	r7, #0
 800ad4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad4e:	f1b9 0901 	subs.w	r9, r9, #1
 800ad52:	d505      	bpl.n	800ad60 <_fwalk_reent+0x24>
 800ad54:	6824      	ldr	r4, [r4, #0]
 800ad56:	2c00      	cmp	r4, #0
 800ad58:	d1f7      	bne.n	800ad4a <_fwalk_reent+0xe>
 800ad5a:	4638      	mov	r0, r7
 800ad5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad60:	89ab      	ldrh	r3, [r5, #12]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d907      	bls.n	800ad76 <_fwalk_reent+0x3a>
 800ad66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	d003      	beq.n	800ad76 <_fwalk_reent+0x3a>
 800ad6e:	4629      	mov	r1, r5
 800ad70:	4630      	mov	r0, r6
 800ad72:	47c0      	blx	r8
 800ad74:	4307      	orrs	r7, r0
 800ad76:	3568      	adds	r5, #104	; 0x68
 800ad78:	e7e9      	b.n	800ad4e <_fwalk_reent+0x12>

0800ad7a <__retarget_lock_init_recursive>:
 800ad7a:	4770      	bx	lr

0800ad7c <__retarget_lock_acquire_recursive>:
 800ad7c:	4770      	bx	lr

0800ad7e <__retarget_lock_release_recursive>:
 800ad7e:	4770      	bx	lr

0800ad80 <__swhatbuf_r>:
 800ad80:	b570      	push	{r4, r5, r6, lr}
 800ad82:	460e      	mov	r6, r1
 800ad84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad88:	2900      	cmp	r1, #0
 800ad8a:	b096      	sub	sp, #88	; 0x58
 800ad8c:	4614      	mov	r4, r2
 800ad8e:	461d      	mov	r5, r3
 800ad90:	da08      	bge.n	800ada4 <__swhatbuf_r+0x24>
 800ad92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad96:	2200      	movs	r2, #0
 800ad98:	602a      	str	r2, [r5, #0]
 800ad9a:	061a      	lsls	r2, r3, #24
 800ad9c:	d410      	bmi.n	800adc0 <__swhatbuf_r+0x40>
 800ad9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ada2:	e00e      	b.n	800adc2 <__swhatbuf_r+0x42>
 800ada4:	466a      	mov	r2, sp
 800ada6:	f000 fe01 	bl	800b9ac <_fstat_r>
 800adaa:	2800      	cmp	r0, #0
 800adac:	dbf1      	blt.n	800ad92 <__swhatbuf_r+0x12>
 800adae:	9a01      	ldr	r2, [sp, #4]
 800adb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800adb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800adb8:	425a      	negs	r2, r3
 800adba:	415a      	adcs	r2, r3
 800adbc:	602a      	str	r2, [r5, #0]
 800adbe:	e7ee      	b.n	800ad9e <__swhatbuf_r+0x1e>
 800adc0:	2340      	movs	r3, #64	; 0x40
 800adc2:	2000      	movs	r0, #0
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	b016      	add	sp, #88	; 0x58
 800adc8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800adcc <__smakebuf_r>:
 800adcc:	898b      	ldrh	r3, [r1, #12]
 800adce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800add0:	079d      	lsls	r5, r3, #30
 800add2:	4606      	mov	r6, r0
 800add4:	460c      	mov	r4, r1
 800add6:	d507      	bpl.n	800ade8 <__smakebuf_r+0x1c>
 800add8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	6123      	str	r3, [r4, #16]
 800ade0:	2301      	movs	r3, #1
 800ade2:	6163      	str	r3, [r4, #20]
 800ade4:	b002      	add	sp, #8
 800ade6:	bd70      	pop	{r4, r5, r6, pc}
 800ade8:	ab01      	add	r3, sp, #4
 800adea:	466a      	mov	r2, sp
 800adec:	f7ff ffc8 	bl	800ad80 <__swhatbuf_r>
 800adf0:	9900      	ldr	r1, [sp, #0]
 800adf2:	4605      	mov	r5, r0
 800adf4:	4630      	mov	r0, r6
 800adf6:	f000 f89d 	bl	800af34 <_malloc_r>
 800adfa:	b948      	cbnz	r0, 800ae10 <__smakebuf_r+0x44>
 800adfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae00:	059a      	lsls	r2, r3, #22
 800ae02:	d4ef      	bmi.n	800ade4 <__smakebuf_r+0x18>
 800ae04:	f023 0303 	bic.w	r3, r3, #3
 800ae08:	f043 0302 	orr.w	r3, r3, #2
 800ae0c:	81a3      	strh	r3, [r4, #12]
 800ae0e:	e7e3      	b.n	800add8 <__smakebuf_r+0xc>
 800ae10:	4b0d      	ldr	r3, [pc, #52]	; (800ae48 <__smakebuf_r+0x7c>)
 800ae12:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	6020      	str	r0, [r4, #0]
 800ae18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae1c:	81a3      	strh	r3, [r4, #12]
 800ae1e:	9b00      	ldr	r3, [sp, #0]
 800ae20:	6163      	str	r3, [r4, #20]
 800ae22:	9b01      	ldr	r3, [sp, #4]
 800ae24:	6120      	str	r0, [r4, #16]
 800ae26:	b15b      	cbz	r3, 800ae40 <__smakebuf_r+0x74>
 800ae28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f000 fdcf 	bl	800b9d0 <_isatty_r>
 800ae32:	b128      	cbz	r0, 800ae40 <__smakebuf_r+0x74>
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	f023 0303 	bic.w	r3, r3, #3
 800ae3a:	f043 0301 	orr.w	r3, r3, #1
 800ae3e:	81a3      	strh	r3, [r4, #12]
 800ae40:	89a0      	ldrh	r0, [r4, #12]
 800ae42:	4305      	orrs	r5, r0
 800ae44:	81a5      	strh	r5, [r4, #12]
 800ae46:	e7cd      	b.n	800ade4 <__smakebuf_r+0x18>
 800ae48:	0800abb5 	.word	0x0800abb5

0800ae4c <malloc>:
 800ae4c:	4b02      	ldr	r3, [pc, #8]	; (800ae58 <malloc+0xc>)
 800ae4e:	4601      	mov	r1, r0
 800ae50:	6818      	ldr	r0, [r3, #0]
 800ae52:	f000 b86f 	b.w	800af34 <_malloc_r>
 800ae56:	bf00      	nop
 800ae58:	20000068 	.word	0x20000068

0800ae5c <_free_r>:
 800ae5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae5e:	2900      	cmp	r1, #0
 800ae60:	d044      	beq.n	800aeec <_free_r+0x90>
 800ae62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae66:	9001      	str	r0, [sp, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f1a1 0404 	sub.w	r4, r1, #4
 800ae6e:	bfb8      	it	lt
 800ae70:	18e4      	addlt	r4, r4, r3
 800ae72:	f000 fdf7 	bl	800ba64 <__malloc_lock>
 800ae76:	4a1e      	ldr	r2, [pc, #120]	; (800aef0 <_free_r+0x94>)
 800ae78:	9801      	ldr	r0, [sp, #4]
 800ae7a:	6813      	ldr	r3, [r2, #0]
 800ae7c:	b933      	cbnz	r3, 800ae8c <_free_r+0x30>
 800ae7e:	6063      	str	r3, [r4, #4]
 800ae80:	6014      	str	r4, [r2, #0]
 800ae82:	b003      	add	sp, #12
 800ae84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae88:	f000 bdf2 	b.w	800ba70 <__malloc_unlock>
 800ae8c:	42a3      	cmp	r3, r4
 800ae8e:	d908      	bls.n	800aea2 <_free_r+0x46>
 800ae90:	6825      	ldr	r5, [r4, #0]
 800ae92:	1961      	adds	r1, r4, r5
 800ae94:	428b      	cmp	r3, r1
 800ae96:	bf01      	itttt	eq
 800ae98:	6819      	ldreq	r1, [r3, #0]
 800ae9a:	685b      	ldreq	r3, [r3, #4]
 800ae9c:	1949      	addeq	r1, r1, r5
 800ae9e:	6021      	streq	r1, [r4, #0]
 800aea0:	e7ed      	b.n	800ae7e <_free_r+0x22>
 800aea2:	461a      	mov	r2, r3
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	b10b      	cbz	r3, 800aeac <_free_r+0x50>
 800aea8:	42a3      	cmp	r3, r4
 800aeaa:	d9fa      	bls.n	800aea2 <_free_r+0x46>
 800aeac:	6811      	ldr	r1, [r2, #0]
 800aeae:	1855      	adds	r5, r2, r1
 800aeb0:	42a5      	cmp	r5, r4
 800aeb2:	d10b      	bne.n	800aecc <_free_r+0x70>
 800aeb4:	6824      	ldr	r4, [r4, #0]
 800aeb6:	4421      	add	r1, r4
 800aeb8:	1854      	adds	r4, r2, r1
 800aeba:	42a3      	cmp	r3, r4
 800aebc:	6011      	str	r1, [r2, #0]
 800aebe:	d1e0      	bne.n	800ae82 <_free_r+0x26>
 800aec0:	681c      	ldr	r4, [r3, #0]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	6053      	str	r3, [r2, #4]
 800aec6:	4421      	add	r1, r4
 800aec8:	6011      	str	r1, [r2, #0]
 800aeca:	e7da      	b.n	800ae82 <_free_r+0x26>
 800aecc:	d902      	bls.n	800aed4 <_free_r+0x78>
 800aece:	230c      	movs	r3, #12
 800aed0:	6003      	str	r3, [r0, #0]
 800aed2:	e7d6      	b.n	800ae82 <_free_r+0x26>
 800aed4:	6825      	ldr	r5, [r4, #0]
 800aed6:	1961      	adds	r1, r4, r5
 800aed8:	428b      	cmp	r3, r1
 800aeda:	bf04      	itt	eq
 800aedc:	6819      	ldreq	r1, [r3, #0]
 800aede:	685b      	ldreq	r3, [r3, #4]
 800aee0:	6063      	str	r3, [r4, #4]
 800aee2:	bf04      	itt	eq
 800aee4:	1949      	addeq	r1, r1, r5
 800aee6:	6021      	streq	r1, [r4, #0]
 800aee8:	6054      	str	r4, [r2, #4]
 800aeea:	e7ca      	b.n	800ae82 <_free_r+0x26>
 800aeec:	b003      	add	sp, #12
 800aeee:	bd30      	pop	{r4, r5, pc}
 800aef0:	200029f8 	.word	0x200029f8

0800aef4 <sbrk_aligned>:
 800aef4:	b570      	push	{r4, r5, r6, lr}
 800aef6:	4e0e      	ldr	r6, [pc, #56]	; (800af30 <sbrk_aligned+0x3c>)
 800aef8:	460c      	mov	r4, r1
 800aefa:	6831      	ldr	r1, [r6, #0]
 800aefc:	4605      	mov	r5, r0
 800aefe:	b911      	cbnz	r1, 800af06 <sbrk_aligned+0x12>
 800af00:	f000 fcd6 	bl	800b8b0 <_sbrk_r>
 800af04:	6030      	str	r0, [r6, #0]
 800af06:	4621      	mov	r1, r4
 800af08:	4628      	mov	r0, r5
 800af0a:	f000 fcd1 	bl	800b8b0 <_sbrk_r>
 800af0e:	1c43      	adds	r3, r0, #1
 800af10:	d00a      	beq.n	800af28 <sbrk_aligned+0x34>
 800af12:	1cc4      	adds	r4, r0, #3
 800af14:	f024 0403 	bic.w	r4, r4, #3
 800af18:	42a0      	cmp	r0, r4
 800af1a:	d007      	beq.n	800af2c <sbrk_aligned+0x38>
 800af1c:	1a21      	subs	r1, r4, r0
 800af1e:	4628      	mov	r0, r5
 800af20:	f000 fcc6 	bl	800b8b0 <_sbrk_r>
 800af24:	3001      	adds	r0, #1
 800af26:	d101      	bne.n	800af2c <sbrk_aligned+0x38>
 800af28:	f04f 34ff 	mov.w	r4, #4294967295
 800af2c:	4620      	mov	r0, r4
 800af2e:	bd70      	pop	{r4, r5, r6, pc}
 800af30:	200029fc 	.word	0x200029fc

0800af34 <_malloc_r>:
 800af34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af38:	1ccd      	adds	r5, r1, #3
 800af3a:	f025 0503 	bic.w	r5, r5, #3
 800af3e:	3508      	adds	r5, #8
 800af40:	2d0c      	cmp	r5, #12
 800af42:	bf38      	it	cc
 800af44:	250c      	movcc	r5, #12
 800af46:	2d00      	cmp	r5, #0
 800af48:	4607      	mov	r7, r0
 800af4a:	db01      	blt.n	800af50 <_malloc_r+0x1c>
 800af4c:	42a9      	cmp	r1, r5
 800af4e:	d905      	bls.n	800af5c <_malloc_r+0x28>
 800af50:	230c      	movs	r3, #12
 800af52:	603b      	str	r3, [r7, #0]
 800af54:	2600      	movs	r6, #0
 800af56:	4630      	mov	r0, r6
 800af58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af5c:	4e2e      	ldr	r6, [pc, #184]	; (800b018 <_malloc_r+0xe4>)
 800af5e:	f000 fd81 	bl	800ba64 <__malloc_lock>
 800af62:	6833      	ldr	r3, [r6, #0]
 800af64:	461c      	mov	r4, r3
 800af66:	bb34      	cbnz	r4, 800afb6 <_malloc_r+0x82>
 800af68:	4629      	mov	r1, r5
 800af6a:	4638      	mov	r0, r7
 800af6c:	f7ff ffc2 	bl	800aef4 <sbrk_aligned>
 800af70:	1c43      	adds	r3, r0, #1
 800af72:	4604      	mov	r4, r0
 800af74:	d14d      	bne.n	800b012 <_malloc_r+0xde>
 800af76:	6834      	ldr	r4, [r6, #0]
 800af78:	4626      	mov	r6, r4
 800af7a:	2e00      	cmp	r6, #0
 800af7c:	d140      	bne.n	800b000 <_malloc_r+0xcc>
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	4631      	mov	r1, r6
 800af82:	4638      	mov	r0, r7
 800af84:	eb04 0803 	add.w	r8, r4, r3
 800af88:	f000 fc92 	bl	800b8b0 <_sbrk_r>
 800af8c:	4580      	cmp	r8, r0
 800af8e:	d13a      	bne.n	800b006 <_malloc_r+0xd2>
 800af90:	6821      	ldr	r1, [r4, #0]
 800af92:	3503      	adds	r5, #3
 800af94:	1a6d      	subs	r5, r5, r1
 800af96:	f025 0503 	bic.w	r5, r5, #3
 800af9a:	3508      	adds	r5, #8
 800af9c:	2d0c      	cmp	r5, #12
 800af9e:	bf38      	it	cc
 800afa0:	250c      	movcc	r5, #12
 800afa2:	4629      	mov	r1, r5
 800afa4:	4638      	mov	r0, r7
 800afa6:	f7ff ffa5 	bl	800aef4 <sbrk_aligned>
 800afaa:	3001      	adds	r0, #1
 800afac:	d02b      	beq.n	800b006 <_malloc_r+0xd2>
 800afae:	6823      	ldr	r3, [r4, #0]
 800afb0:	442b      	add	r3, r5
 800afb2:	6023      	str	r3, [r4, #0]
 800afb4:	e00e      	b.n	800afd4 <_malloc_r+0xa0>
 800afb6:	6822      	ldr	r2, [r4, #0]
 800afb8:	1b52      	subs	r2, r2, r5
 800afba:	d41e      	bmi.n	800affa <_malloc_r+0xc6>
 800afbc:	2a0b      	cmp	r2, #11
 800afbe:	d916      	bls.n	800afee <_malloc_r+0xba>
 800afc0:	1961      	adds	r1, r4, r5
 800afc2:	42a3      	cmp	r3, r4
 800afc4:	6025      	str	r5, [r4, #0]
 800afc6:	bf18      	it	ne
 800afc8:	6059      	strne	r1, [r3, #4]
 800afca:	6863      	ldr	r3, [r4, #4]
 800afcc:	bf08      	it	eq
 800afce:	6031      	streq	r1, [r6, #0]
 800afd0:	5162      	str	r2, [r4, r5]
 800afd2:	604b      	str	r3, [r1, #4]
 800afd4:	4638      	mov	r0, r7
 800afd6:	f104 060b 	add.w	r6, r4, #11
 800afda:	f000 fd49 	bl	800ba70 <__malloc_unlock>
 800afde:	f026 0607 	bic.w	r6, r6, #7
 800afe2:	1d23      	adds	r3, r4, #4
 800afe4:	1af2      	subs	r2, r6, r3
 800afe6:	d0b6      	beq.n	800af56 <_malloc_r+0x22>
 800afe8:	1b9b      	subs	r3, r3, r6
 800afea:	50a3      	str	r3, [r4, r2]
 800afec:	e7b3      	b.n	800af56 <_malloc_r+0x22>
 800afee:	6862      	ldr	r2, [r4, #4]
 800aff0:	42a3      	cmp	r3, r4
 800aff2:	bf0c      	ite	eq
 800aff4:	6032      	streq	r2, [r6, #0]
 800aff6:	605a      	strne	r2, [r3, #4]
 800aff8:	e7ec      	b.n	800afd4 <_malloc_r+0xa0>
 800affa:	4623      	mov	r3, r4
 800affc:	6864      	ldr	r4, [r4, #4]
 800affe:	e7b2      	b.n	800af66 <_malloc_r+0x32>
 800b000:	4634      	mov	r4, r6
 800b002:	6876      	ldr	r6, [r6, #4]
 800b004:	e7b9      	b.n	800af7a <_malloc_r+0x46>
 800b006:	230c      	movs	r3, #12
 800b008:	603b      	str	r3, [r7, #0]
 800b00a:	4638      	mov	r0, r7
 800b00c:	f000 fd30 	bl	800ba70 <__malloc_unlock>
 800b010:	e7a1      	b.n	800af56 <_malloc_r+0x22>
 800b012:	6025      	str	r5, [r4, #0]
 800b014:	e7de      	b.n	800afd4 <_malloc_r+0xa0>
 800b016:	bf00      	nop
 800b018:	200029f8 	.word	0x200029f8

0800b01c <__ssputs_r>:
 800b01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b020:	688e      	ldr	r6, [r1, #8]
 800b022:	429e      	cmp	r6, r3
 800b024:	4682      	mov	sl, r0
 800b026:	460c      	mov	r4, r1
 800b028:	4690      	mov	r8, r2
 800b02a:	461f      	mov	r7, r3
 800b02c:	d838      	bhi.n	800b0a0 <__ssputs_r+0x84>
 800b02e:	898a      	ldrh	r2, [r1, #12]
 800b030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b034:	d032      	beq.n	800b09c <__ssputs_r+0x80>
 800b036:	6825      	ldr	r5, [r4, #0]
 800b038:	6909      	ldr	r1, [r1, #16]
 800b03a:	eba5 0901 	sub.w	r9, r5, r1
 800b03e:	6965      	ldr	r5, [r4, #20]
 800b040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b044:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b048:	3301      	adds	r3, #1
 800b04a:	444b      	add	r3, r9
 800b04c:	106d      	asrs	r5, r5, #1
 800b04e:	429d      	cmp	r5, r3
 800b050:	bf38      	it	cc
 800b052:	461d      	movcc	r5, r3
 800b054:	0553      	lsls	r3, r2, #21
 800b056:	d531      	bpl.n	800b0bc <__ssputs_r+0xa0>
 800b058:	4629      	mov	r1, r5
 800b05a:	f7ff ff6b 	bl	800af34 <_malloc_r>
 800b05e:	4606      	mov	r6, r0
 800b060:	b950      	cbnz	r0, 800b078 <__ssputs_r+0x5c>
 800b062:	230c      	movs	r3, #12
 800b064:	f8ca 3000 	str.w	r3, [sl]
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b06e:	81a3      	strh	r3, [r4, #12]
 800b070:	f04f 30ff 	mov.w	r0, #4294967295
 800b074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b078:	6921      	ldr	r1, [r4, #16]
 800b07a:	464a      	mov	r2, r9
 800b07c:	f000 fcca 	bl	800ba14 <memcpy>
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b08a:	81a3      	strh	r3, [r4, #12]
 800b08c:	6126      	str	r6, [r4, #16]
 800b08e:	6165      	str	r5, [r4, #20]
 800b090:	444e      	add	r6, r9
 800b092:	eba5 0509 	sub.w	r5, r5, r9
 800b096:	6026      	str	r6, [r4, #0]
 800b098:	60a5      	str	r5, [r4, #8]
 800b09a:	463e      	mov	r6, r7
 800b09c:	42be      	cmp	r6, r7
 800b09e:	d900      	bls.n	800b0a2 <__ssputs_r+0x86>
 800b0a0:	463e      	mov	r6, r7
 800b0a2:	6820      	ldr	r0, [r4, #0]
 800b0a4:	4632      	mov	r2, r6
 800b0a6:	4641      	mov	r1, r8
 800b0a8:	f000 fcc2 	bl	800ba30 <memmove>
 800b0ac:	68a3      	ldr	r3, [r4, #8]
 800b0ae:	1b9b      	subs	r3, r3, r6
 800b0b0:	60a3      	str	r3, [r4, #8]
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	4433      	add	r3, r6
 800b0b6:	6023      	str	r3, [r4, #0]
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	e7db      	b.n	800b074 <__ssputs_r+0x58>
 800b0bc:	462a      	mov	r2, r5
 800b0be:	f000 fcdd 	bl	800ba7c <_realloc_r>
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d1e1      	bne.n	800b08c <__ssputs_r+0x70>
 800b0c8:	6921      	ldr	r1, [r4, #16]
 800b0ca:	4650      	mov	r0, sl
 800b0cc:	f7ff fec6 	bl	800ae5c <_free_r>
 800b0d0:	e7c7      	b.n	800b062 <__ssputs_r+0x46>
	...

0800b0d4 <_svfiprintf_r>:
 800b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	4698      	mov	r8, r3
 800b0da:	898b      	ldrh	r3, [r1, #12]
 800b0dc:	061b      	lsls	r3, r3, #24
 800b0de:	b09d      	sub	sp, #116	; 0x74
 800b0e0:	4607      	mov	r7, r0
 800b0e2:	460d      	mov	r5, r1
 800b0e4:	4614      	mov	r4, r2
 800b0e6:	d50e      	bpl.n	800b106 <_svfiprintf_r+0x32>
 800b0e8:	690b      	ldr	r3, [r1, #16]
 800b0ea:	b963      	cbnz	r3, 800b106 <_svfiprintf_r+0x32>
 800b0ec:	2140      	movs	r1, #64	; 0x40
 800b0ee:	f7ff ff21 	bl	800af34 <_malloc_r>
 800b0f2:	6028      	str	r0, [r5, #0]
 800b0f4:	6128      	str	r0, [r5, #16]
 800b0f6:	b920      	cbnz	r0, 800b102 <_svfiprintf_r+0x2e>
 800b0f8:	230c      	movs	r3, #12
 800b0fa:	603b      	str	r3, [r7, #0]
 800b0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b100:	e0d1      	b.n	800b2a6 <_svfiprintf_r+0x1d2>
 800b102:	2340      	movs	r3, #64	; 0x40
 800b104:	616b      	str	r3, [r5, #20]
 800b106:	2300      	movs	r3, #0
 800b108:	9309      	str	r3, [sp, #36]	; 0x24
 800b10a:	2320      	movs	r3, #32
 800b10c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b110:	f8cd 800c 	str.w	r8, [sp, #12]
 800b114:	2330      	movs	r3, #48	; 0x30
 800b116:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b2c0 <_svfiprintf_r+0x1ec>
 800b11a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b11e:	f04f 0901 	mov.w	r9, #1
 800b122:	4623      	mov	r3, r4
 800b124:	469a      	mov	sl, r3
 800b126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b12a:	b10a      	cbz	r2, 800b130 <_svfiprintf_r+0x5c>
 800b12c:	2a25      	cmp	r2, #37	; 0x25
 800b12e:	d1f9      	bne.n	800b124 <_svfiprintf_r+0x50>
 800b130:	ebba 0b04 	subs.w	fp, sl, r4
 800b134:	d00b      	beq.n	800b14e <_svfiprintf_r+0x7a>
 800b136:	465b      	mov	r3, fp
 800b138:	4622      	mov	r2, r4
 800b13a:	4629      	mov	r1, r5
 800b13c:	4638      	mov	r0, r7
 800b13e:	f7ff ff6d 	bl	800b01c <__ssputs_r>
 800b142:	3001      	adds	r0, #1
 800b144:	f000 80aa 	beq.w	800b29c <_svfiprintf_r+0x1c8>
 800b148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b14a:	445a      	add	r2, fp
 800b14c:	9209      	str	r2, [sp, #36]	; 0x24
 800b14e:	f89a 3000 	ldrb.w	r3, [sl]
 800b152:	2b00      	cmp	r3, #0
 800b154:	f000 80a2 	beq.w	800b29c <_svfiprintf_r+0x1c8>
 800b158:	2300      	movs	r3, #0
 800b15a:	f04f 32ff 	mov.w	r2, #4294967295
 800b15e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b162:	f10a 0a01 	add.w	sl, sl, #1
 800b166:	9304      	str	r3, [sp, #16]
 800b168:	9307      	str	r3, [sp, #28]
 800b16a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b16e:	931a      	str	r3, [sp, #104]	; 0x68
 800b170:	4654      	mov	r4, sl
 800b172:	2205      	movs	r2, #5
 800b174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b178:	4851      	ldr	r0, [pc, #324]	; (800b2c0 <_svfiprintf_r+0x1ec>)
 800b17a:	f7f5 f831 	bl	80001e0 <memchr>
 800b17e:	9a04      	ldr	r2, [sp, #16]
 800b180:	b9d8      	cbnz	r0, 800b1ba <_svfiprintf_r+0xe6>
 800b182:	06d0      	lsls	r0, r2, #27
 800b184:	bf44      	itt	mi
 800b186:	2320      	movmi	r3, #32
 800b188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b18c:	0711      	lsls	r1, r2, #28
 800b18e:	bf44      	itt	mi
 800b190:	232b      	movmi	r3, #43	; 0x2b
 800b192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b196:	f89a 3000 	ldrb.w	r3, [sl]
 800b19a:	2b2a      	cmp	r3, #42	; 0x2a
 800b19c:	d015      	beq.n	800b1ca <_svfiprintf_r+0xf6>
 800b19e:	9a07      	ldr	r2, [sp, #28]
 800b1a0:	4654      	mov	r4, sl
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	f04f 0c0a 	mov.w	ip, #10
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1ae:	3b30      	subs	r3, #48	; 0x30
 800b1b0:	2b09      	cmp	r3, #9
 800b1b2:	d94e      	bls.n	800b252 <_svfiprintf_r+0x17e>
 800b1b4:	b1b0      	cbz	r0, 800b1e4 <_svfiprintf_r+0x110>
 800b1b6:	9207      	str	r2, [sp, #28]
 800b1b8:	e014      	b.n	800b1e4 <_svfiprintf_r+0x110>
 800b1ba:	eba0 0308 	sub.w	r3, r0, r8
 800b1be:	fa09 f303 	lsl.w	r3, r9, r3
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	9304      	str	r3, [sp, #16]
 800b1c6:	46a2      	mov	sl, r4
 800b1c8:	e7d2      	b.n	800b170 <_svfiprintf_r+0x9c>
 800b1ca:	9b03      	ldr	r3, [sp, #12]
 800b1cc:	1d19      	adds	r1, r3, #4
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	9103      	str	r1, [sp, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	bfbb      	ittet	lt
 800b1d6:	425b      	neglt	r3, r3
 800b1d8:	f042 0202 	orrlt.w	r2, r2, #2
 800b1dc:	9307      	strge	r3, [sp, #28]
 800b1de:	9307      	strlt	r3, [sp, #28]
 800b1e0:	bfb8      	it	lt
 800b1e2:	9204      	strlt	r2, [sp, #16]
 800b1e4:	7823      	ldrb	r3, [r4, #0]
 800b1e6:	2b2e      	cmp	r3, #46	; 0x2e
 800b1e8:	d10c      	bne.n	800b204 <_svfiprintf_r+0x130>
 800b1ea:	7863      	ldrb	r3, [r4, #1]
 800b1ec:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ee:	d135      	bne.n	800b25c <_svfiprintf_r+0x188>
 800b1f0:	9b03      	ldr	r3, [sp, #12]
 800b1f2:	1d1a      	adds	r2, r3, #4
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	9203      	str	r2, [sp, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	bfb8      	it	lt
 800b1fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b200:	3402      	adds	r4, #2
 800b202:	9305      	str	r3, [sp, #20]
 800b204:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b2d0 <_svfiprintf_r+0x1fc>
 800b208:	7821      	ldrb	r1, [r4, #0]
 800b20a:	2203      	movs	r2, #3
 800b20c:	4650      	mov	r0, sl
 800b20e:	f7f4 ffe7 	bl	80001e0 <memchr>
 800b212:	b140      	cbz	r0, 800b226 <_svfiprintf_r+0x152>
 800b214:	2340      	movs	r3, #64	; 0x40
 800b216:	eba0 000a 	sub.w	r0, r0, sl
 800b21a:	fa03 f000 	lsl.w	r0, r3, r0
 800b21e:	9b04      	ldr	r3, [sp, #16]
 800b220:	4303      	orrs	r3, r0
 800b222:	3401      	adds	r4, #1
 800b224:	9304      	str	r3, [sp, #16]
 800b226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b22a:	4826      	ldr	r0, [pc, #152]	; (800b2c4 <_svfiprintf_r+0x1f0>)
 800b22c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b230:	2206      	movs	r2, #6
 800b232:	f7f4 ffd5 	bl	80001e0 <memchr>
 800b236:	2800      	cmp	r0, #0
 800b238:	d038      	beq.n	800b2ac <_svfiprintf_r+0x1d8>
 800b23a:	4b23      	ldr	r3, [pc, #140]	; (800b2c8 <_svfiprintf_r+0x1f4>)
 800b23c:	bb1b      	cbnz	r3, 800b286 <_svfiprintf_r+0x1b2>
 800b23e:	9b03      	ldr	r3, [sp, #12]
 800b240:	3307      	adds	r3, #7
 800b242:	f023 0307 	bic.w	r3, r3, #7
 800b246:	3308      	adds	r3, #8
 800b248:	9303      	str	r3, [sp, #12]
 800b24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b24c:	4433      	add	r3, r6
 800b24e:	9309      	str	r3, [sp, #36]	; 0x24
 800b250:	e767      	b.n	800b122 <_svfiprintf_r+0x4e>
 800b252:	fb0c 3202 	mla	r2, ip, r2, r3
 800b256:	460c      	mov	r4, r1
 800b258:	2001      	movs	r0, #1
 800b25a:	e7a5      	b.n	800b1a8 <_svfiprintf_r+0xd4>
 800b25c:	2300      	movs	r3, #0
 800b25e:	3401      	adds	r4, #1
 800b260:	9305      	str	r3, [sp, #20]
 800b262:	4619      	mov	r1, r3
 800b264:	f04f 0c0a 	mov.w	ip, #10
 800b268:	4620      	mov	r0, r4
 800b26a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b26e:	3a30      	subs	r2, #48	; 0x30
 800b270:	2a09      	cmp	r2, #9
 800b272:	d903      	bls.n	800b27c <_svfiprintf_r+0x1a8>
 800b274:	2b00      	cmp	r3, #0
 800b276:	d0c5      	beq.n	800b204 <_svfiprintf_r+0x130>
 800b278:	9105      	str	r1, [sp, #20]
 800b27a:	e7c3      	b.n	800b204 <_svfiprintf_r+0x130>
 800b27c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b280:	4604      	mov	r4, r0
 800b282:	2301      	movs	r3, #1
 800b284:	e7f0      	b.n	800b268 <_svfiprintf_r+0x194>
 800b286:	ab03      	add	r3, sp, #12
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	462a      	mov	r2, r5
 800b28c:	4b0f      	ldr	r3, [pc, #60]	; (800b2cc <_svfiprintf_r+0x1f8>)
 800b28e:	a904      	add	r1, sp, #16
 800b290:	4638      	mov	r0, r7
 800b292:	f3af 8000 	nop.w
 800b296:	1c42      	adds	r2, r0, #1
 800b298:	4606      	mov	r6, r0
 800b29a:	d1d6      	bne.n	800b24a <_svfiprintf_r+0x176>
 800b29c:	89ab      	ldrh	r3, [r5, #12]
 800b29e:	065b      	lsls	r3, r3, #25
 800b2a0:	f53f af2c 	bmi.w	800b0fc <_svfiprintf_r+0x28>
 800b2a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2a6:	b01d      	add	sp, #116	; 0x74
 800b2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ac:	ab03      	add	r3, sp, #12
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	462a      	mov	r2, r5
 800b2b2:	4b06      	ldr	r3, [pc, #24]	; (800b2cc <_svfiprintf_r+0x1f8>)
 800b2b4:	a904      	add	r1, sp, #16
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	f000 f9d4 	bl	800b664 <_printf_i>
 800b2bc:	e7eb      	b.n	800b296 <_svfiprintf_r+0x1c2>
 800b2be:	bf00      	nop
 800b2c0:	0800d9c8 	.word	0x0800d9c8
 800b2c4:	0800d9d2 	.word	0x0800d9d2
 800b2c8:	00000000 	.word	0x00000000
 800b2cc:	0800b01d 	.word	0x0800b01d
 800b2d0:	0800d9ce 	.word	0x0800d9ce

0800b2d4 <__sfputc_r>:
 800b2d4:	6893      	ldr	r3, [r2, #8]
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	b410      	push	{r4}
 800b2dc:	6093      	str	r3, [r2, #8]
 800b2de:	da08      	bge.n	800b2f2 <__sfputc_r+0x1e>
 800b2e0:	6994      	ldr	r4, [r2, #24]
 800b2e2:	42a3      	cmp	r3, r4
 800b2e4:	db01      	blt.n	800b2ea <__sfputc_r+0x16>
 800b2e6:	290a      	cmp	r1, #10
 800b2e8:	d103      	bne.n	800b2f2 <__sfputc_r+0x1e>
 800b2ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2ee:	f7ff ba9d 	b.w	800a82c <__swbuf_r>
 800b2f2:	6813      	ldr	r3, [r2, #0]
 800b2f4:	1c58      	adds	r0, r3, #1
 800b2f6:	6010      	str	r0, [r2, #0]
 800b2f8:	7019      	strb	r1, [r3, #0]
 800b2fa:	4608      	mov	r0, r1
 800b2fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b300:	4770      	bx	lr

0800b302 <__sfputs_r>:
 800b302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b304:	4606      	mov	r6, r0
 800b306:	460f      	mov	r7, r1
 800b308:	4614      	mov	r4, r2
 800b30a:	18d5      	adds	r5, r2, r3
 800b30c:	42ac      	cmp	r4, r5
 800b30e:	d101      	bne.n	800b314 <__sfputs_r+0x12>
 800b310:	2000      	movs	r0, #0
 800b312:	e007      	b.n	800b324 <__sfputs_r+0x22>
 800b314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b318:	463a      	mov	r2, r7
 800b31a:	4630      	mov	r0, r6
 800b31c:	f7ff ffda 	bl	800b2d4 <__sfputc_r>
 800b320:	1c43      	adds	r3, r0, #1
 800b322:	d1f3      	bne.n	800b30c <__sfputs_r+0xa>
 800b324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b328 <_vfiprintf_r>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	460d      	mov	r5, r1
 800b32e:	b09d      	sub	sp, #116	; 0x74
 800b330:	4614      	mov	r4, r2
 800b332:	4698      	mov	r8, r3
 800b334:	4606      	mov	r6, r0
 800b336:	b118      	cbz	r0, 800b340 <_vfiprintf_r+0x18>
 800b338:	6983      	ldr	r3, [r0, #24]
 800b33a:	b90b      	cbnz	r3, 800b340 <_vfiprintf_r+0x18>
 800b33c:	f7ff fc6e 	bl	800ac1c <__sinit>
 800b340:	4b89      	ldr	r3, [pc, #548]	; (800b568 <_vfiprintf_r+0x240>)
 800b342:	429d      	cmp	r5, r3
 800b344:	d11b      	bne.n	800b37e <_vfiprintf_r+0x56>
 800b346:	6875      	ldr	r5, [r6, #4]
 800b348:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b34a:	07d9      	lsls	r1, r3, #31
 800b34c:	d405      	bmi.n	800b35a <_vfiprintf_r+0x32>
 800b34e:	89ab      	ldrh	r3, [r5, #12]
 800b350:	059a      	lsls	r2, r3, #22
 800b352:	d402      	bmi.n	800b35a <_vfiprintf_r+0x32>
 800b354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b356:	f7ff fd11 	bl	800ad7c <__retarget_lock_acquire_recursive>
 800b35a:	89ab      	ldrh	r3, [r5, #12]
 800b35c:	071b      	lsls	r3, r3, #28
 800b35e:	d501      	bpl.n	800b364 <_vfiprintf_r+0x3c>
 800b360:	692b      	ldr	r3, [r5, #16]
 800b362:	b9eb      	cbnz	r3, 800b3a0 <_vfiprintf_r+0x78>
 800b364:	4629      	mov	r1, r5
 800b366:	4630      	mov	r0, r6
 800b368:	f7ff fab2 	bl	800a8d0 <__swsetup_r>
 800b36c:	b1c0      	cbz	r0, 800b3a0 <_vfiprintf_r+0x78>
 800b36e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b370:	07dc      	lsls	r4, r3, #31
 800b372:	d50e      	bpl.n	800b392 <_vfiprintf_r+0x6a>
 800b374:	f04f 30ff 	mov.w	r0, #4294967295
 800b378:	b01d      	add	sp, #116	; 0x74
 800b37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37e:	4b7b      	ldr	r3, [pc, #492]	; (800b56c <_vfiprintf_r+0x244>)
 800b380:	429d      	cmp	r5, r3
 800b382:	d101      	bne.n	800b388 <_vfiprintf_r+0x60>
 800b384:	68b5      	ldr	r5, [r6, #8]
 800b386:	e7df      	b.n	800b348 <_vfiprintf_r+0x20>
 800b388:	4b79      	ldr	r3, [pc, #484]	; (800b570 <_vfiprintf_r+0x248>)
 800b38a:	429d      	cmp	r5, r3
 800b38c:	bf08      	it	eq
 800b38e:	68f5      	ldreq	r5, [r6, #12]
 800b390:	e7da      	b.n	800b348 <_vfiprintf_r+0x20>
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	0598      	lsls	r0, r3, #22
 800b396:	d4ed      	bmi.n	800b374 <_vfiprintf_r+0x4c>
 800b398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b39a:	f7ff fcf0 	bl	800ad7e <__retarget_lock_release_recursive>
 800b39e:	e7e9      	b.n	800b374 <_vfiprintf_r+0x4c>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3a4:	2320      	movs	r3, #32
 800b3a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3ae:	2330      	movs	r3, #48	; 0x30
 800b3b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b574 <_vfiprintf_r+0x24c>
 800b3b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3b8:	f04f 0901 	mov.w	r9, #1
 800b3bc:	4623      	mov	r3, r4
 800b3be:	469a      	mov	sl, r3
 800b3c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3c4:	b10a      	cbz	r2, 800b3ca <_vfiprintf_r+0xa2>
 800b3c6:	2a25      	cmp	r2, #37	; 0x25
 800b3c8:	d1f9      	bne.n	800b3be <_vfiprintf_r+0x96>
 800b3ca:	ebba 0b04 	subs.w	fp, sl, r4
 800b3ce:	d00b      	beq.n	800b3e8 <_vfiprintf_r+0xc0>
 800b3d0:	465b      	mov	r3, fp
 800b3d2:	4622      	mov	r2, r4
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	f7ff ff93 	bl	800b302 <__sfputs_r>
 800b3dc:	3001      	adds	r0, #1
 800b3de:	f000 80aa 	beq.w	800b536 <_vfiprintf_r+0x20e>
 800b3e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3e4:	445a      	add	r2, fp
 800b3e6:	9209      	str	r2, [sp, #36]	; 0x24
 800b3e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f000 80a2 	beq.w	800b536 <_vfiprintf_r+0x20e>
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3fc:	f10a 0a01 	add.w	sl, sl, #1
 800b400:	9304      	str	r3, [sp, #16]
 800b402:	9307      	str	r3, [sp, #28]
 800b404:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b408:	931a      	str	r3, [sp, #104]	; 0x68
 800b40a:	4654      	mov	r4, sl
 800b40c:	2205      	movs	r2, #5
 800b40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b412:	4858      	ldr	r0, [pc, #352]	; (800b574 <_vfiprintf_r+0x24c>)
 800b414:	f7f4 fee4 	bl	80001e0 <memchr>
 800b418:	9a04      	ldr	r2, [sp, #16]
 800b41a:	b9d8      	cbnz	r0, 800b454 <_vfiprintf_r+0x12c>
 800b41c:	06d1      	lsls	r1, r2, #27
 800b41e:	bf44      	itt	mi
 800b420:	2320      	movmi	r3, #32
 800b422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b426:	0713      	lsls	r3, r2, #28
 800b428:	bf44      	itt	mi
 800b42a:	232b      	movmi	r3, #43	; 0x2b
 800b42c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b430:	f89a 3000 	ldrb.w	r3, [sl]
 800b434:	2b2a      	cmp	r3, #42	; 0x2a
 800b436:	d015      	beq.n	800b464 <_vfiprintf_r+0x13c>
 800b438:	9a07      	ldr	r2, [sp, #28]
 800b43a:	4654      	mov	r4, sl
 800b43c:	2000      	movs	r0, #0
 800b43e:	f04f 0c0a 	mov.w	ip, #10
 800b442:	4621      	mov	r1, r4
 800b444:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b448:	3b30      	subs	r3, #48	; 0x30
 800b44a:	2b09      	cmp	r3, #9
 800b44c:	d94e      	bls.n	800b4ec <_vfiprintf_r+0x1c4>
 800b44e:	b1b0      	cbz	r0, 800b47e <_vfiprintf_r+0x156>
 800b450:	9207      	str	r2, [sp, #28]
 800b452:	e014      	b.n	800b47e <_vfiprintf_r+0x156>
 800b454:	eba0 0308 	sub.w	r3, r0, r8
 800b458:	fa09 f303 	lsl.w	r3, r9, r3
 800b45c:	4313      	orrs	r3, r2
 800b45e:	9304      	str	r3, [sp, #16]
 800b460:	46a2      	mov	sl, r4
 800b462:	e7d2      	b.n	800b40a <_vfiprintf_r+0xe2>
 800b464:	9b03      	ldr	r3, [sp, #12]
 800b466:	1d19      	adds	r1, r3, #4
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	9103      	str	r1, [sp, #12]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	bfbb      	ittet	lt
 800b470:	425b      	neglt	r3, r3
 800b472:	f042 0202 	orrlt.w	r2, r2, #2
 800b476:	9307      	strge	r3, [sp, #28]
 800b478:	9307      	strlt	r3, [sp, #28]
 800b47a:	bfb8      	it	lt
 800b47c:	9204      	strlt	r2, [sp, #16]
 800b47e:	7823      	ldrb	r3, [r4, #0]
 800b480:	2b2e      	cmp	r3, #46	; 0x2e
 800b482:	d10c      	bne.n	800b49e <_vfiprintf_r+0x176>
 800b484:	7863      	ldrb	r3, [r4, #1]
 800b486:	2b2a      	cmp	r3, #42	; 0x2a
 800b488:	d135      	bne.n	800b4f6 <_vfiprintf_r+0x1ce>
 800b48a:	9b03      	ldr	r3, [sp, #12]
 800b48c:	1d1a      	adds	r2, r3, #4
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	9203      	str	r2, [sp, #12]
 800b492:	2b00      	cmp	r3, #0
 800b494:	bfb8      	it	lt
 800b496:	f04f 33ff 	movlt.w	r3, #4294967295
 800b49a:	3402      	adds	r4, #2
 800b49c:	9305      	str	r3, [sp, #20]
 800b49e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b584 <_vfiprintf_r+0x25c>
 800b4a2:	7821      	ldrb	r1, [r4, #0]
 800b4a4:	2203      	movs	r2, #3
 800b4a6:	4650      	mov	r0, sl
 800b4a8:	f7f4 fe9a 	bl	80001e0 <memchr>
 800b4ac:	b140      	cbz	r0, 800b4c0 <_vfiprintf_r+0x198>
 800b4ae:	2340      	movs	r3, #64	; 0x40
 800b4b0:	eba0 000a 	sub.w	r0, r0, sl
 800b4b4:	fa03 f000 	lsl.w	r0, r3, r0
 800b4b8:	9b04      	ldr	r3, [sp, #16]
 800b4ba:	4303      	orrs	r3, r0
 800b4bc:	3401      	adds	r4, #1
 800b4be:	9304      	str	r3, [sp, #16]
 800b4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c4:	482c      	ldr	r0, [pc, #176]	; (800b578 <_vfiprintf_r+0x250>)
 800b4c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4ca:	2206      	movs	r2, #6
 800b4cc:	f7f4 fe88 	bl	80001e0 <memchr>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d03f      	beq.n	800b554 <_vfiprintf_r+0x22c>
 800b4d4:	4b29      	ldr	r3, [pc, #164]	; (800b57c <_vfiprintf_r+0x254>)
 800b4d6:	bb1b      	cbnz	r3, 800b520 <_vfiprintf_r+0x1f8>
 800b4d8:	9b03      	ldr	r3, [sp, #12]
 800b4da:	3307      	adds	r3, #7
 800b4dc:	f023 0307 	bic.w	r3, r3, #7
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	9303      	str	r3, [sp, #12]
 800b4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e6:	443b      	add	r3, r7
 800b4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ea:	e767      	b.n	800b3bc <_vfiprintf_r+0x94>
 800b4ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	2001      	movs	r0, #1
 800b4f4:	e7a5      	b.n	800b442 <_vfiprintf_r+0x11a>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	3401      	adds	r4, #1
 800b4fa:	9305      	str	r3, [sp, #20]
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	f04f 0c0a 	mov.w	ip, #10
 800b502:	4620      	mov	r0, r4
 800b504:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b508:	3a30      	subs	r2, #48	; 0x30
 800b50a:	2a09      	cmp	r2, #9
 800b50c:	d903      	bls.n	800b516 <_vfiprintf_r+0x1ee>
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d0c5      	beq.n	800b49e <_vfiprintf_r+0x176>
 800b512:	9105      	str	r1, [sp, #20]
 800b514:	e7c3      	b.n	800b49e <_vfiprintf_r+0x176>
 800b516:	fb0c 2101 	mla	r1, ip, r1, r2
 800b51a:	4604      	mov	r4, r0
 800b51c:	2301      	movs	r3, #1
 800b51e:	e7f0      	b.n	800b502 <_vfiprintf_r+0x1da>
 800b520:	ab03      	add	r3, sp, #12
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	462a      	mov	r2, r5
 800b526:	4b16      	ldr	r3, [pc, #88]	; (800b580 <_vfiprintf_r+0x258>)
 800b528:	a904      	add	r1, sp, #16
 800b52a:	4630      	mov	r0, r6
 800b52c:	f3af 8000 	nop.w
 800b530:	4607      	mov	r7, r0
 800b532:	1c78      	adds	r0, r7, #1
 800b534:	d1d6      	bne.n	800b4e4 <_vfiprintf_r+0x1bc>
 800b536:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b538:	07d9      	lsls	r1, r3, #31
 800b53a:	d405      	bmi.n	800b548 <_vfiprintf_r+0x220>
 800b53c:	89ab      	ldrh	r3, [r5, #12]
 800b53e:	059a      	lsls	r2, r3, #22
 800b540:	d402      	bmi.n	800b548 <_vfiprintf_r+0x220>
 800b542:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b544:	f7ff fc1b 	bl	800ad7e <__retarget_lock_release_recursive>
 800b548:	89ab      	ldrh	r3, [r5, #12]
 800b54a:	065b      	lsls	r3, r3, #25
 800b54c:	f53f af12 	bmi.w	800b374 <_vfiprintf_r+0x4c>
 800b550:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b552:	e711      	b.n	800b378 <_vfiprintf_r+0x50>
 800b554:	ab03      	add	r3, sp, #12
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	462a      	mov	r2, r5
 800b55a:	4b09      	ldr	r3, [pc, #36]	; (800b580 <_vfiprintf_r+0x258>)
 800b55c:	a904      	add	r1, sp, #16
 800b55e:	4630      	mov	r0, r6
 800b560:	f000 f880 	bl	800b664 <_printf_i>
 800b564:	e7e4      	b.n	800b530 <_vfiprintf_r+0x208>
 800b566:	bf00      	nop
 800b568:	0800d988 	.word	0x0800d988
 800b56c:	0800d9a8 	.word	0x0800d9a8
 800b570:	0800d968 	.word	0x0800d968
 800b574:	0800d9c8 	.word	0x0800d9c8
 800b578:	0800d9d2 	.word	0x0800d9d2
 800b57c:	00000000 	.word	0x00000000
 800b580:	0800b303 	.word	0x0800b303
 800b584:	0800d9ce 	.word	0x0800d9ce

0800b588 <_printf_common>:
 800b588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b58c:	4616      	mov	r6, r2
 800b58e:	4699      	mov	r9, r3
 800b590:	688a      	ldr	r2, [r1, #8]
 800b592:	690b      	ldr	r3, [r1, #16]
 800b594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b598:	4293      	cmp	r3, r2
 800b59a:	bfb8      	it	lt
 800b59c:	4613      	movlt	r3, r2
 800b59e:	6033      	str	r3, [r6, #0]
 800b5a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5a4:	4607      	mov	r7, r0
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	b10a      	cbz	r2, 800b5ae <_printf_common+0x26>
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	6033      	str	r3, [r6, #0]
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	0699      	lsls	r1, r3, #26
 800b5b2:	bf42      	ittt	mi
 800b5b4:	6833      	ldrmi	r3, [r6, #0]
 800b5b6:	3302      	addmi	r3, #2
 800b5b8:	6033      	strmi	r3, [r6, #0]
 800b5ba:	6825      	ldr	r5, [r4, #0]
 800b5bc:	f015 0506 	ands.w	r5, r5, #6
 800b5c0:	d106      	bne.n	800b5d0 <_printf_common+0x48>
 800b5c2:	f104 0a19 	add.w	sl, r4, #25
 800b5c6:	68e3      	ldr	r3, [r4, #12]
 800b5c8:	6832      	ldr	r2, [r6, #0]
 800b5ca:	1a9b      	subs	r3, r3, r2
 800b5cc:	42ab      	cmp	r3, r5
 800b5ce:	dc26      	bgt.n	800b61e <_printf_common+0x96>
 800b5d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5d4:	1e13      	subs	r3, r2, #0
 800b5d6:	6822      	ldr	r2, [r4, #0]
 800b5d8:	bf18      	it	ne
 800b5da:	2301      	movne	r3, #1
 800b5dc:	0692      	lsls	r2, r2, #26
 800b5de:	d42b      	bmi.n	800b638 <_printf_common+0xb0>
 800b5e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5e4:	4649      	mov	r1, r9
 800b5e6:	4638      	mov	r0, r7
 800b5e8:	47c0      	blx	r8
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d01e      	beq.n	800b62c <_printf_common+0xa4>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	68e5      	ldr	r5, [r4, #12]
 800b5f2:	6832      	ldr	r2, [r6, #0]
 800b5f4:	f003 0306 	and.w	r3, r3, #6
 800b5f8:	2b04      	cmp	r3, #4
 800b5fa:	bf08      	it	eq
 800b5fc:	1aad      	subeq	r5, r5, r2
 800b5fe:	68a3      	ldr	r3, [r4, #8]
 800b600:	6922      	ldr	r2, [r4, #16]
 800b602:	bf0c      	ite	eq
 800b604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b608:	2500      	movne	r5, #0
 800b60a:	4293      	cmp	r3, r2
 800b60c:	bfc4      	itt	gt
 800b60e:	1a9b      	subgt	r3, r3, r2
 800b610:	18ed      	addgt	r5, r5, r3
 800b612:	2600      	movs	r6, #0
 800b614:	341a      	adds	r4, #26
 800b616:	42b5      	cmp	r5, r6
 800b618:	d11a      	bne.n	800b650 <_printf_common+0xc8>
 800b61a:	2000      	movs	r0, #0
 800b61c:	e008      	b.n	800b630 <_printf_common+0xa8>
 800b61e:	2301      	movs	r3, #1
 800b620:	4652      	mov	r2, sl
 800b622:	4649      	mov	r1, r9
 800b624:	4638      	mov	r0, r7
 800b626:	47c0      	blx	r8
 800b628:	3001      	adds	r0, #1
 800b62a:	d103      	bne.n	800b634 <_printf_common+0xac>
 800b62c:	f04f 30ff 	mov.w	r0, #4294967295
 800b630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b634:	3501      	adds	r5, #1
 800b636:	e7c6      	b.n	800b5c6 <_printf_common+0x3e>
 800b638:	18e1      	adds	r1, r4, r3
 800b63a:	1c5a      	adds	r2, r3, #1
 800b63c:	2030      	movs	r0, #48	; 0x30
 800b63e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b642:	4422      	add	r2, r4
 800b644:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b648:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b64c:	3302      	adds	r3, #2
 800b64e:	e7c7      	b.n	800b5e0 <_printf_common+0x58>
 800b650:	2301      	movs	r3, #1
 800b652:	4622      	mov	r2, r4
 800b654:	4649      	mov	r1, r9
 800b656:	4638      	mov	r0, r7
 800b658:	47c0      	blx	r8
 800b65a:	3001      	adds	r0, #1
 800b65c:	d0e6      	beq.n	800b62c <_printf_common+0xa4>
 800b65e:	3601      	adds	r6, #1
 800b660:	e7d9      	b.n	800b616 <_printf_common+0x8e>
	...

0800b664 <_printf_i>:
 800b664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b668:	7e0f      	ldrb	r7, [r1, #24]
 800b66a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b66c:	2f78      	cmp	r7, #120	; 0x78
 800b66e:	4691      	mov	r9, r2
 800b670:	4680      	mov	r8, r0
 800b672:	460c      	mov	r4, r1
 800b674:	469a      	mov	sl, r3
 800b676:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b67a:	d807      	bhi.n	800b68c <_printf_i+0x28>
 800b67c:	2f62      	cmp	r7, #98	; 0x62
 800b67e:	d80a      	bhi.n	800b696 <_printf_i+0x32>
 800b680:	2f00      	cmp	r7, #0
 800b682:	f000 80d8 	beq.w	800b836 <_printf_i+0x1d2>
 800b686:	2f58      	cmp	r7, #88	; 0x58
 800b688:	f000 80a3 	beq.w	800b7d2 <_printf_i+0x16e>
 800b68c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b690:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b694:	e03a      	b.n	800b70c <_printf_i+0xa8>
 800b696:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b69a:	2b15      	cmp	r3, #21
 800b69c:	d8f6      	bhi.n	800b68c <_printf_i+0x28>
 800b69e:	a101      	add	r1, pc, #4	; (adr r1, 800b6a4 <_printf_i+0x40>)
 800b6a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6a4:	0800b6fd 	.word	0x0800b6fd
 800b6a8:	0800b711 	.word	0x0800b711
 800b6ac:	0800b68d 	.word	0x0800b68d
 800b6b0:	0800b68d 	.word	0x0800b68d
 800b6b4:	0800b68d 	.word	0x0800b68d
 800b6b8:	0800b68d 	.word	0x0800b68d
 800b6bc:	0800b711 	.word	0x0800b711
 800b6c0:	0800b68d 	.word	0x0800b68d
 800b6c4:	0800b68d 	.word	0x0800b68d
 800b6c8:	0800b68d 	.word	0x0800b68d
 800b6cc:	0800b68d 	.word	0x0800b68d
 800b6d0:	0800b81d 	.word	0x0800b81d
 800b6d4:	0800b741 	.word	0x0800b741
 800b6d8:	0800b7ff 	.word	0x0800b7ff
 800b6dc:	0800b68d 	.word	0x0800b68d
 800b6e0:	0800b68d 	.word	0x0800b68d
 800b6e4:	0800b83f 	.word	0x0800b83f
 800b6e8:	0800b68d 	.word	0x0800b68d
 800b6ec:	0800b741 	.word	0x0800b741
 800b6f0:	0800b68d 	.word	0x0800b68d
 800b6f4:	0800b68d 	.word	0x0800b68d
 800b6f8:	0800b807 	.word	0x0800b807
 800b6fc:	682b      	ldr	r3, [r5, #0]
 800b6fe:	1d1a      	adds	r2, r3, #4
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	602a      	str	r2, [r5, #0]
 800b704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b70c:	2301      	movs	r3, #1
 800b70e:	e0a3      	b.n	800b858 <_printf_i+0x1f4>
 800b710:	6820      	ldr	r0, [r4, #0]
 800b712:	6829      	ldr	r1, [r5, #0]
 800b714:	0606      	lsls	r6, r0, #24
 800b716:	f101 0304 	add.w	r3, r1, #4
 800b71a:	d50a      	bpl.n	800b732 <_printf_i+0xce>
 800b71c:	680e      	ldr	r6, [r1, #0]
 800b71e:	602b      	str	r3, [r5, #0]
 800b720:	2e00      	cmp	r6, #0
 800b722:	da03      	bge.n	800b72c <_printf_i+0xc8>
 800b724:	232d      	movs	r3, #45	; 0x2d
 800b726:	4276      	negs	r6, r6
 800b728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b72c:	485e      	ldr	r0, [pc, #376]	; (800b8a8 <_printf_i+0x244>)
 800b72e:	230a      	movs	r3, #10
 800b730:	e019      	b.n	800b766 <_printf_i+0x102>
 800b732:	680e      	ldr	r6, [r1, #0]
 800b734:	602b      	str	r3, [r5, #0]
 800b736:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b73a:	bf18      	it	ne
 800b73c:	b236      	sxthne	r6, r6
 800b73e:	e7ef      	b.n	800b720 <_printf_i+0xbc>
 800b740:	682b      	ldr	r3, [r5, #0]
 800b742:	6820      	ldr	r0, [r4, #0]
 800b744:	1d19      	adds	r1, r3, #4
 800b746:	6029      	str	r1, [r5, #0]
 800b748:	0601      	lsls	r1, r0, #24
 800b74a:	d501      	bpl.n	800b750 <_printf_i+0xec>
 800b74c:	681e      	ldr	r6, [r3, #0]
 800b74e:	e002      	b.n	800b756 <_printf_i+0xf2>
 800b750:	0646      	lsls	r6, r0, #25
 800b752:	d5fb      	bpl.n	800b74c <_printf_i+0xe8>
 800b754:	881e      	ldrh	r6, [r3, #0]
 800b756:	4854      	ldr	r0, [pc, #336]	; (800b8a8 <_printf_i+0x244>)
 800b758:	2f6f      	cmp	r7, #111	; 0x6f
 800b75a:	bf0c      	ite	eq
 800b75c:	2308      	moveq	r3, #8
 800b75e:	230a      	movne	r3, #10
 800b760:	2100      	movs	r1, #0
 800b762:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b766:	6865      	ldr	r5, [r4, #4]
 800b768:	60a5      	str	r5, [r4, #8]
 800b76a:	2d00      	cmp	r5, #0
 800b76c:	bfa2      	ittt	ge
 800b76e:	6821      	ldrge	r1, [r4, #0]
 800b770:	f021 0104 	bicge.w	r1, r1, #4
 800b774:	6021      	strge	r1, [r4, #0]
 800b776:	b90e      	cbnz	r6, 800b77c <_printf_i+0x118>
 800b778:	2d00      	cmp	r5, #0
 800b77a:	d04d      	beq.n	800b818 <_printf_i+0x1b4>
 800b77c:	4615      	mov	r5, r2
 800b77e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b782:	fb03 6711 	mls	r7, r3, r1, r6
 800b786:	5dc7      	ldrb	r7, [r0, r7]
 800b788:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b78c:	4637      	mov	r7, r6
 800b78e:	42bb      	cmp	r3, r7
 800b790:	460e      	mov	r6, r1
 800b792:	d9f4      	bls.n	800b77e <_printf_i+0x11a>
 800b794:	2b08      	cmp	r3, #8
 800b796:	d10b      	bne.n	800b7b0 <_printf_i+0x14c>
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	07de      	lsls	r6, r3, #31
 800b79c:	d508      	bpl.n	800b7b0 <_printf_i+0x14c>
 800b79e:	6923      	ldr	r3, [r4, #16]
 800b7a0:	6861      	ldr	r1, [r4, #4]
 800b7a2:	4299      	cmp	r1, r3
 800b7a4:	bfde      	ittt	le
 800b7a6:	2330      	movle	r3, #48	; 0x30
 800b7a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7b0:	1b52      	subs	r2, r2, r5
 800b7b2:	6122      	str	r2, [r4, #16]
 800b7b4:	f8cd a000 	str.w	sl, [sp]
 800b7b8:	464b      	mov	r3, r9
 800b7ba:	aa03      	add	r2, sp, #12
 800b7bc:	4621      	mov	r1, r4
 800b7be:	4640      	mov	r0, r8
 800b7c0:	f7ff fee2 	bl	800b588 <_printf_common>
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	d14c      	bne.n	800b862 <_printf_i+0x1fe>
 800b7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7cc:	b004      	add	sp, #16
 800b7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d2:	4835      	ldr	r0, [pc, #212]	; (800b8a8 <_printf_i+0x244>)
 800b7d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b7d8:	6829      	ldr	r1, [r5, #0]
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b7e0:	6029      	str	r1, [r5, #0]
 800b7e2:	061d      	lsls	r5, r3, #24
 800b7e4:	d514      	bpl.n	800b810 <_printf_i+0x1ac>
 800b7e6:	07df      	lsls	r7, r3, #31
 800b7e8:	bf44      	itt	mi
 800b7ea:	f043 0320 	orrmi.w	r3, r3, #32
 800b7ee:	6023      	strmi	r3, [r4, #0]
 800b7f0:	b91e      	cbnz	r6, 800b7fa <_printf_i+0x196>
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	f023 0320 	bic.w	r3, r3, #32
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	2310      	movs	r3, #16
 800b7fc:	e7b0      	b.n	800b760 <_printf_i+0xfc>
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	f043 0320 	orr.w	r3, r3, #32
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	2378      	movs	r3, #120	; 0x78
 800b808:	4828      	ldr	r0, [pc, #160]	; (800b8ac <_printf_i+0x248>)
 800b80a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b80e:	e7e3      	b.n	800b7d8 <_printf_i+0x174>
 800b810:	0659      	lsls	r1, r3, #25
 800b812:	bf48      	it	mi
 800b814:	b2b6      	uxthmi	r6, r6
 800b816:	e7e6      	b.n	800b7e6 <_printf_i+0x182>
 800b818:	4615      	mov	r5, r2
 800b81a:	e7bb      	b.n	800b794 <_printf_i+0x130>
 800b81c:	682b      	ldr	r3, [r5, #0]
 800b81e:	6826      	ldr	r6, [r4, #0]
 800b820:	6961      	ldr	r1, [r4, #20]
 800b822:	1d18      	adds	r0, r3, #4
 800b824:	6028      	str	r0, [r5, #0]
 800b826:	0635      	lsls	r5, r6, #24
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	d501      	bpl.n	800b830 <_printf_i+0x1cc>
 800b82c:	6019      	str	r1, [r3, #0]
 800b82e:	e002      	b.n	800b836 <_printf_i+0x1d2>
 800b830:	0670      	lsls	r0, r6, #25
 800b832:	d5fb      	bpl.n	800b82c <_printf_i+0x1c8>
 800b834:	8019      	strh	r1, [r3, #0]
 800b836:	2300      	movs	r3, #0
 800b838:	6123      	str	r3, [r4, #16]
 800b83a:	4615      	mov	r5, r2
 800b83c:	e7ba      	b.n	800b7b4 <_printf_i+0x150>
 800b83e:	682b      	ldr	r3, [r5, #0]
 800b840:	1d1a      	adds	r2, r3, #4
 800b842:	602a      	str	r2, [r5, #0]
 800b844:	681d      	ldr	r5, [r3, #0]
 800b846:	6862      	ldr	r2, [r4, #4]
 800b848:	2100      	movs	r1, #0
 800b84a:	4628      	mov	r0, r5
 800b84c:	f7f4 fcc8 	bl	80001e0 <memchr>
 800b850:	b108      	cbz	r0, 800b856 <_printf_i+0x1f2>
 800b852:	1b40      	subs	r0, r0, r5
 800b854:	6060      	str	r0, [r4, #4]
 800b856:	6863      	ldr	r3, [r4, #4]
 800b858:	6123      	str	r3, [r4, #16]
 800b85a:	2300      	movs	r3, #0
 800b85c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b860:	e7a8      	b.n	800b7b4 <_printf_i+0x150>
 800b862:	6923      	ldr	r3, [r4, #16]
 800b864:	462a      	mov	r2, r5
 800b866:	4649      	mov	r1, r9
 800b868:	4640      	mov	r0, r8
 800b86a:	47d0      	blx	sl
 800b86c:	3001      	adds	r0, #1
 800b86e:	d0ab      	beq.n	800b7c8 <_printf_i+0x164>
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	079b      	lsls	r3, r3, #30
 800b874:	d413      	bmi.n	800b89e <_printf_i+0x23a>
 800b876:	68e0      	ldr	r0, [r4, #12]
 800b878:	9b03      	ldr	r3, [sp, #12]
 800b87a:	4298      	cmp	r0, r3
 800b87c:	bfb8      	it	lt
 800b87e:	4618      	movlt	r0, r3
 800b880:	e7a4      	b.n	800b7cc <_printf_i+0x168>
 800b882:	2301      	movs	r3, #1
 800b884:	4632      	mov	r2, r6
 800b886:	4649      	mov	r1, r9
 800b888:	4640      	mov	r0, r8
 800b88a:	47d0      	blx	sl
 800b88c:	3001      	adds	r0, #1
 800b88e:	d09b      	beq.n	800b7c8 <_printf_i+0x164>
 800b890:	3501      	adds	r5, #1
 800b892:	68e3      	ldr	r3, [r4, #12]
 800b894:	9903      	ldr	r1, [sp, #12]
 800b896:	1a5b      	subs	r3, r3, r1
 800b898:	42ab      	cmp	r3, r5
 800b89a:	dcf2      	bgt.n	800b882 <_printf_i+0x21e>
 800b89c:	e7eb      	b.n	800b876 <_printf_i+0x212>
 800b89e:	2500      	movs	r5, #0
 800b8a0:	f104 0619 	add.w	r6, r4, #25
 800b8a4:	e7f5      	b.n	800b892 <_printf_i+0x22e>
 800b8a6:	bf00      	nop
 800b8a8:	0800d9d9 	.word	0x0800d9d9
 800b8ac:	0800d9ea 	.word	0x0800d9ea

0800b8b0 <_sbrk_r>:
 800b8b0:	b538      	push	{r3, r4, r5, lr}
 800b8b2:	4d06      	ldr	r5, [pc, #24]	; (800b8cc <_sbrk_r+0x1c>)
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	4608      	mov	r0, r1
 800b8ba:	602b      	str	r3, [r5, #0]
 800b8bc:	f7f8 ffc4 	bl	8004848 <_sbrk>
 800b8c0:	1c43      	adds	r3, r0, #1
 800b8c2:	d102      	bne.n	800b8ca <_sbrk_r+0x1a>
 800b8c4:	682b      	ldr	r3, [r5, #0]
 800b8c6:	b103      	cbz	r3, 800b8ca <_sbrk_r+0x1a>
 800b8c8:	6023      	str	r3, [r4, #0]
 800b8ca:	bd38      	pop	{r3, r4, r5, pc}
 800b8cc:	20002a00 	.word	0x20002a00

0800b8d0 <__sread>:
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d8:	f000 f900 	bl	800badc <_read_r>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	bfab      	itete	ge
 800b8e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8e2:	89a3      	ldrhlt	r3, [r4, #12]
 800b8e4:	181b      	addge	r3, r3, r0
 800b8e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8ea:	bfac      	ite	ge
 800b8ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8ee:	81a3      	strhlt	r3, [r4, #12]
 800b8f0:	bd10      	pop	{r4, pc}

0800b8f2 <__swrite>:
 800b8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f6:	461f      	mov	r7, r3
 800b8f8:	898b      	ldrh	r3, [r1, #12]
 800b8fa:	05db      	lsls	r3, r3, #23
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	460c      	mov	r4, r1
 800b900:	4616      	mov	r6, r2
 800b902:	d505      	bpl.n	800b910 <__swrite+0x1e>
 800b904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b908:	2302      	movs	r3, #2
 800b90a:	2200      	movs	r2, #0
 800b90c:	f000 f870 	bl	800b9f0 <_lseek_r>
 800b910:	89a3      	ldrh	r3, [r4, #12]
 800b912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	4632      	mov	r2, r6
 800b91e:	463b      	mov	r3, r7
 800b920:	4628      	mov	r0, r5
 800b922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b926:	f000 b817 	b.w	800b958 <_write_r>

0800b92a <__sseek>:
 800b92a:	b510      	push	{r4, lr}
 800b92c:	460c      	mov	r4, r1
 800b92e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b932:	f000 f85d 	bl	800b9f0 <_lseek_r>
 800b936:	1c43      	adds	r3, r0, #1
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	bf15      	itete	ne
 800b93c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b93e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b946:	81a3      	strheq	r3, [r4, #12]
 800b948:	bf18      	it	ne
 800b94a:	81a3      	strhne	r3, [r4, #12]
 800b94c:	bd10      	pop	{r4, pc}

0800b94e <__sclose>:
 800b94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b952:	f000 b81b 	b.w	800b98c <_close_r>
	...

0800b958 <_write_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	4d07      	ldr	r5, [pc, #28]	; (800b978 <_write_r+0x20>)
 800b95c:	4604      	mov	r4, r0
 800b95e:	4608      	mov	r0, r1
 800b960:	4611      	mov	r1, r2
 800b962:	2200      	movs	r2, #0
 800b964:	602a      	str	r2, [r5, #0]
 800b966:	461a      	mov	r2, r3
 800b968:	f7f6 fc6a 	bl	8002240 <_write>
 800b96c:	1c43      	adds	r3, r0, #1
 800b96e:	d102      	bne.n	800b976 <_write_r+0x1e>
 800b970:	682b      	ldr	r3, [r5, #0]
 800b972:	b103      	cbz	r3, 800b976 <_write_r+0x1e>
 800b974:	6023      	str	r3, [r4, #0]
 800b976:	bd38      	pop	{r3, r4, r5, pc}
 800b978:	20002a00 	.word	0x20002a00

0800b97c <abort>:
 800b97c:	b508      	push	{r3, lr}
 800b97e:	2006      	movs	r0, #6
 800b980:	f000 f8e6 	bl	800bb50 <raise>
 800b984:	2001      	movs	r0, #1
 800b986:	f7f8 ff03 	bl	8004790 <_exit>
	...

0800b98c <_close_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	4d06      	ldr	r5, [pc, #24]	; (800b9a8 <_close_r+0x1c>)
 800b990:	2300      	movs	r3, #0
 800b992:	4604      	mov	r4, r0
 800b994:	4608      	mov	r0, r1
 800b996:	602b      	str	r3, [r5, #0]
 800b998:	f7f8 ff21 	bl	80047de <_close>
 800b99c:	1c43      	adds	r3, r0, #1
 800b99e:	d102      	bne.n	800b9a6 <_close_r+0x1a>
 800b9a0:	682b      	ldr	r3, [r5, #0]
 800b9a2:	b103      	cbz	r3, 800b9a6 <_close_r+0x1a>
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	bd38      	pop	{r3, r4, r5, pc}
 800b9a8:	20002a00 	.word	0x20002a00

0800b9ac <_fstat_r>:
 800b9ac:	b538      	push	{r3, r4, r5, lr}
 800b9ae:	4d07      	ldr	r5, [pc, #28]	; (800b9cc <_fstat_r+0x20>)
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	4608      	mov	r0, r1
 800b9b6:	4611      	mov	r1, r2
 800b9b8:	602b      	str	r3, [r5, #0]
 800b9ba:	f7f8 ff1c 	bl	80047f6 <_fstat>
 800b9be:	1c43      	adds	r3, r0, #1
 800b9c0:	d102      	bne.n	800b9c8 <_fstat_r+0x1c>
 800b9c2:	682b      	ldr	r3, [r5, #0]
 800b9c4:	b103      	cbz	r3, 800b9c8 <_fstat_r+0x1c>
 800b9c6:	6023      	str	r3, [r4, #0]
 800b9c8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ca:	bf00      	nop
 800b9cc:	20002a00 	.word	0x20002a00

0800b9d0 <_isatty_r>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	4d06      	ldr	r5, [pc, #24]	; (800b9ec <_isatty_r+0x1c>)
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	4608      	mov	r0, r1
 800b9da:	602b      	str	r3, [r5, #0]
 800b9dc:	f7f8 ff1b 	bl	8004816 <_isatty>
 800b9e0:	1c43      	adds	r3, r0, #1
 800b9e2:	d102      	bne.n	800b9ea <_isatty_r+0x1a>
 800b9e4:	682b      	ldr	r3, [r5, #0]
 800b9e6:	b103      	cbz	r3, 800b9ea <_isatty_r+0x1a>
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	bd38      	pop	{r3, r4, r5, pc}
 800b9ec:	20002a00 	.word	0x20002a00

0800b9f0 <_lseek_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4d07      	ldr	r5, [pc, #28]	; (800ba10 <_lseek_r+0x20>)
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	4608      	mov	r0, r1
 800b9f8:	4611      	mov	r1, r2
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	602a      	str	r2, [r5, #0]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	f7f8 ff14 	bl	800482c <_lseek>
 800ba04:	1c43      	adds	r3, r0, #1
 800ba06:	d102      	bne.n	800ba0e <_lseek_r+0x1e>
 800ba08:	682b      	ldr	r3, [r5, #0]
 800ba0a:	b103      	cbz	r3, 800ba0e <_lseek_r+0x1e>
 800ba0c:	6023      	str	r3, [r4, #0]
 800ba0e:	bd38      	pop	{r3, r4, r5, pc}
 800ba10:	20002a00 	.word	0x20002a00

0800ba14 <memcpy>:
 800ba14:	440a      	add	r2, r1
 800ba16:	4291      	cmp	r1, r2
 800ba18:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba1c:	d100      	bne.n	800ba20 <memcpy+0xc>
 800ba1e:	4770      	bx	lr
 800ba20:	b510      	push	{r4, lr}
 800ba22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba2a:	4291      	cmp	r1, r2
 800ba2c:	d1f9      	bne.n	800ba22 <memcpy+0xe>
 800ba2e:	bd10      	pop	{r4, pc}

0800ba30 <memmove>:
 800ba30:	4288      	cmp	r0, r1
 800ba32:	b510      	push	{r4, lr}
 800ba34:	eb01 0402 	add.w	r4, r1, r2
 800ba38:	d902      	bls.n	800ba40 <memmove+0x10>
 800ba3a:	4284      	cmp	r4, r0
 800ba3c:	4623      	mov	r3, r4
 800ba3e:	d807      	bhi.n	800ba50 <memmove+0x20>
 800ba40:	1e43      	subs	r3, r0, #1
 800ba42:	42a1      	cmp	r1, r4
 800ba44:	d008      	beq.n	800ba58 <memmove+0x28>
 800ba46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba4e:	e7f8      	b.n	800ba42 <memmove+0x12>
 800ba50:	4402      	add	r2, r0
 800ba52:	4601      	mov	r1, r0
 800ba54:	428a      	cmp	r2, r1
 800ba56:	d100      	bne.n	800ba5a <memmove+0x2a>
 800ba58:	bd10      	pop	{r4, pc}
 800ba5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba62:	e7f7      	b.n	800ba54 <memmove+0x24>

0800ba64 <__malloc_lock>:
 800ba64:	4801      	ldr	r0, [pc, #4]	; (800ba6c <__malloc_lock+0x8>)
 800ba66:	f7ff b989 	b.w	800ad7c <__retarget_lock_acquire_recursive>
 800ba6a:	bf00      	nop
 800ba6c:	200029f4 	.word	0x200029f4

0800ba70 <__malloc_unlock>:
 800ba70:	4801      	ldr	r0, [pc, #4]	; (800ba78 <__malloc_unlock+0x8>)
 800ba72:	f7ff b984 	b.w	800ad7e <__retarget_lock_release_recursive>
 800ba76:	bf00      	nop
 800ba78:	200029f4 	.word	0x200029f4

0800ba7c <_realloc_r>:
 800ba7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba80:	4680      	mov	r8, r0
 800ba82:	4614      	mov	r4, r2
 800ba84:	460e      	mov	r6, r1
 800ba86:	b921      	cbnz	r1, 800ba92 <_realloc_r+0x16>
 800ba88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8c:	4611      	mov	r1, r2
 800ba8e:	f7ff ba51 	b.w	800af34 <_malloc_r>
 800ba92:	b92a      	cbnz	r2, 800baa0 <_realloc_r+0x24>
 800ba94:	f7ff f9e2 	bl	800ae5c <_free_r>
 800ba98:	4625      	mov	r5, r4
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa0:	f000 f872 	bl	800bb88 <_malloc_usable_size_r>
 800baa4:	4284      	cmp	r4, r0
 800baa6:	4607      	mov	r7, r0
 800baa8:	d802      	bhi.n	800bab0 <_realloc_r+0x34>
 800baaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800baae:	d812      	bhi.n	800bad6 <_realloc_r+0x5a>
 800bab0:	4621      	mov	r1, r4
 800bab2:	4640      	mov	r0, r8
 800bab4:	f7ff fa3e 	bl	800af34 <_malloc_r>
 800bab8:	4605      	mov	r5, r0
 800baba:	2800      	cmp	r0, #0
 800babc:	d0ed      	beq.n	800ba9a <_realloc_r+0x1e>
 800babe:	42bc      	cmp	r4, r7
 800bac0:	4622      	mov	r2, r4
 800bac2:	4631      	mov	r1, r6
 800bac4:	bf28      	it	cs
 800bac6:	463a      	movcs	r2, r7
 800bac8:	f7ff ffa4 	bl	800ba14 <memcpy>
 800bacc:	4631      	mov	r1, r6
 800bace:	4640      	mov	r0, r8
 800bad0:	f7ff f9c4 	bl	800ae5c <_free_r>
 800bad4:	e7e1      	b.n	800ba9a <_realloc_r+0x1e>
 800bad6:	4635      	mov	r5, r6
 800bad8:	e7df      	b.n	800ba9a <_realloc_r+0x1e>
	...

0800badc <_read_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	4d07      	ldr	r5, [pc, #28]	; (800bafc <_read_r+0x20>)
 800bae0:	4604      	mov	r4, r0
 800bae2:	4608      	mov	r0, r1
 800bae4:	4611      	mov	r1, r2
 800bae6:	2200      	movs	r2, #0
 800bae8:	602a      	str	r2, [r5, #0]
 800baea:	461a      	mov	r2, r3
 800baec:	f7f8 fe5a 	bl	80047a4 <_read>
 800baf0:	1c43      	adds	r3, r0, #1
 800baf2:	d102      	bne.n	800bafa <_read_r+0x1e>
 800baf4:	682b      	ldr	r3, [r5, #0]
 800baf6:	b103      	cbz	r3, 800bafa <_read_r+0x1e>
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	bd38      	pop	{r3, r4, r5, pc}
 800bafc:	20002a00 	.word	0x20002a00

0800bb00 <_raise_r>:
 800bb00:	291f      	cmp	r1, #31
 800bb02:	b538      	push	{r3, r4, r5, lr}
 800bb04:	4604      	mov	r4, r0
 800bb06:	460d      	mov	r5, r1
 800bb08:	d904      	bls.n	800bb14 <_raise_r+0x14>
 800bb0a:	2316      	movs	r3, #22
 800bb0c:	6003      	str	r3, [r0, #0]
 800bb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb12:	bd38      	pop	{r3, r4, r5, pc}
 800bb14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb16:	b112      	cbz	r2, 800bb1e <_raise_r+0x1e>
 800bb18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb1c:	b94b      	cbnz	r3, 800bb32 <_raise_r+0x32>
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f000 f830 	bl	800bb84 <_getpid_r>
 800bb24:	462a      	mov	r2, r5
 800bb26:	4601      	mov	r1, r0
 800bb28:	4620      	mov	r0, r4
 800bb2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb2e:	f000 b817 	b.w	800bb60 <_kill_r>
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d00a      	beq.n	800bb4c <_raise_r+0x4c>
 800bb36:	1c59      	adds	r1, r3, #1
 800bb38:	d103      	bne.n	800bb42 <_raise_r+0x42>
 800bb3a:	2316      	movs	r3, #22
 800bb3c:	6003      	str	r3, [r0, #0]
 800bb3e:	2001      	movs	r0, #1
 800bb40:	e7e7      	b.n	800bb12 <_raise_r+0x12>
 800bb42:	2400      	movs	r4, #0
 800bb44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb48:	4628      	mov	r0, r5
 800bb4a:	4798      	blx	r3
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	e7e0      	b.n	800bb12 <_raise_r+0x12>

0800bb50 <raise>:
 800bb50:	4b02      	ldr	r3, [pc, #8]	; (800bb5c <raise+0xc>)
 800bb52:	4601      	mov	r1, r0
 800bb54:	6818      	ldr	r0, [r3, #0]
 800bb56:	f7ff bfd3 	b.w	800bb00 <_raise_r>
 800bb5a:	bf00      	nop
 800bb5c:	20000068 	.word	0x20000068

0800bb60 <_kill_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4d07      	ldr	r5, [pc, #28]	; (800bb80 <_kill_r+0x20>)
 800bb64:	2300      	movs	r3, #0
 800bb66:	4604      	mov	r4, r0
 800bb68:	4608      	mov	r0, r1
 800bb6a:	4611      	mov	r1, r2
 800bb6c:	602b      	str	r3, [r5, #0]
 800bb6e:	f7f8 fdff 	bl	8004770 <_kill>
 800bb72:	1c43      	adds	r3, r0, #1
 800bb74:	d102      	bne.n	800bb7c <_kill_r+0x1c>
 800bb76:	682b      	ldr	r3, [r5, #0]
 800bb78:	b103      	cbz	r3, 800bb7c <_kill_r+0x1c>
 800bb7a:	6023      	str	r3, [r4, #0]
 800bb7c:	bd38      	pop	{r3, r4, r5, pc}
 800bb7e:	bf00      	nop
 800bb80:	20002a00 	.word	0x20002a00

0800bb84 <_getpid_r>:
 800bb84:	f7f8 bdec 	b.w	8004760 <_getpid>

0800bb88 <_malloc_usable_size_r>:
 800bb88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb8c:	1f18      	subs	r0, r3, #4
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	bfbc      	itt	lt
 800bb92:	580b      	ldrlt	r3, [r1, r0]
 800bb94:	18c0      	addlt	r0, r0, r3
 800bb96:	4770      	bx	lr

0800bb98 <_init>:
 800bb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9a:	bf00      	nop
 800bb9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb9e:	bc08      	pop	{r3}
 800bba0:	469e      	mov	lr, r3
 800bba2:	4770      	bx	lr

0800bba4 <_fini>:
 800bba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba6:	bf00      	nop
 800bba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbaa:	bc08      	pop	{r3}
 800bbac:	469e      	mov	lr, r3
 800bbae:	4770      	bx	lr
